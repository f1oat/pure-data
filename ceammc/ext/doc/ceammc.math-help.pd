#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 376 50 cnv 1 364 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 376 50 math objects. can operate with list of numbers.;
#X obj 30 116 math.abs;
#X text 200 116 absolute value function;
#X obj 30 143 math.abs~;
#X text 200 143 absolute value function for signals;
#X obj 30 170 math.acos;
#X text 200 170 arc cosine function;
#X obj 30 197 math.acosh;
#X text 200 197 inverse hyperbolic cosine function;
#X obj 30 224 math.acos~;
#X text 200 224 arc cosine function for signals;
#X obj 30 251 math.and;
#X text 200 251 operation AND for multiple arguments;
#X obj 30 278 math.approx;
#X text 200 278 check if input value approximately equal to pattern;
#X obj 30 305 math.asin;
#X text 200 305 arc sine function;
#X obj 30 332 math.asinh;
#X text 200 332 inverse hyperbolic sine function;
#X obj 30 359 math.asin~;
#X text 200 359 arc sine for signals;
#X obj 30 386 math.atan;
#X text 200 386 arc tangent function;
#X obj 30 413 math.atanh;
#X text 200 413 inverse hyperbolic tangent function;
#X obj 30 440 math.atan~;
#X text 200 440 arc tangent for signals;
#X obj 30 467 math.cabs~;
#X text 200 467 magnitude of a complex signals;
#X obj 30 494 math.carg~;
#X text 200 494 phase angle of a complex signals;
#X obj 30 521 math.cbrt;
#X text 200 521 cube root function;
#X obj 30 548 math.cdiv~;
#X text 200 548 division of complex signals;
#X obj 30 575 math.ceil;
#X text 200 575 round to smallest integral value not less than input
value;
#X obj 30 602 math.ceil~;
#X text 200 602 round to smallest integral value not less than input
value;
#X obj 30 629 math.cexp~;
#X text 200 629 exponent of a complex signals;
#X obj 30 656 math.cmul~;
#X text 200 656 multiplication of complex signals;
#X obj 30 683 math.cos;
#X text 200 683 cosine function;
#X obj 30 710 math.cosh;
#X text 200 710 hyperbolic cosine function;
#X obj 30 737 math.cosh~;
#X text 200 737 hyperbolic cosine for signals;
#X obj 30 764 math.cos~;
#X text 200 764 cosine function;
#X obj 30 791 math.div;
#X text 200 791 division (on lists too);
#X obj 30 818 math.e;
#X text 200 818 mathematical constant \, base of the natural logarithm;
#X obj 30 845 math.erf;
#X text 200 845 error function;
#X obj 30 872 math.erf~;
#X text 200 872 error function for signals;
#X obj 30 899 math.exp;
#X text 200 899 exponential functions;
#X obj 30 926 math.exp2;
#X text 200 926 exponential functions;
#X obj 30 953 math.exp2~;
#X text 200 953 base-2 exponential for signal;
#X obj 30 980 math.expr;
#X text 200 980 dynamic [expr];
#X obj 30 1007 math.exp~;
#X text 200 1007 base-e exponential for signal;
#X obj 30 1034 math.floor;
#X text 200 1034 round to largest integral value not greater than x;
#X obj 30 1061 math.floor~;
#X text 200 1061 round to largest integral value not greater than x;
#X obj 30 1088 math.gamma;
#X text 200 1088 gamma function;
#X obj 30 1115 math.gamma~;
#X text 200 1115 gamma function for floating point signals;
#X obj 30 1142 math.gcd;
#X text 200 1142 calculate greatest common divisor;
#X obj 30 1169 math.inf;
#X text 200 1169 infinity value that cannot be represented accurately;
#X obj 30 1196 math.lcm;
#X text 200 1196 calculate least common multiple;
#X obj 30 1223 math.lgamma;
#X text 200 1223 natural logarithm of the absolute value of the gamma
function;
#X obj 30 1250 math.lgamma~;
#X text 200 1250 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 1290 math.log;
#X text 200 1290 logarithm functions;
#X obj 30 1317 math.log10;
#X text 200 1317 logarithm functions;
#X obj 30 1344 math.log2;
#X text 200 1344 logarithm functions;
#X obj 30 1371 math.mul;
#X text 200 1371 multiplication (on lists too);
#X obj 30 1398 math.nan;
#X text 200 1398 Not a Number \, unrepresentable value;
#X obj 30 1425 math.neg;
#X text 200 1425 negate function;
#X obj 30 1452 math.or;
#X text 200 1452 operation OR for multiple arguments;
#X obj 30 1479 math.pi;
#X text 200 1479 mathematical constant;
#X obj 30 1506 math.pi~;
#X text 200 1506 mathematical constant;
#X obj 30 1533 math.polyeval;
#X text 200 1533 evaluates the polynomial described by the coefficients
list;
#X obj 30 1560 math.reciprocal;
#X text 200 1560 calculate reciprocal number;
#X obj 30 1587 math.reciprocal~;
#X text 200 1587 calculate reciprocal number for signals;
#X obj 30 1614 math.round;
#X text 200 1614 round to integral value \, regardless of rounding
direction;
#X obj 30 1641 math.round~;
#X text 200 1641 signal round;
#X obj 30 1668 math.sign;
#X text 200 1668 sign function;
#X obj 30 1695 math.sin;
#X text 200 1695 sine function;
#X obj 30 1722 math.sinh;
#X text 200 1722 hyperbolic sine function;
#X obj 30 1749 math.sin~;
#X text 200 1749 sine function;
#X obj 30 1776 math.sqrt;
#X text 200 1776 square root function;
#X obj 30 1803 math.sqrt~;
#X text 200 1803 square root for signal;
#X obj 30 1830 math.squared;
#X text 200 1830 value square;
#X obj 30 1857 math.squared~;
#X text 200 1857 signal value square;
#X obj 30 1884 math.sync_add;
#X text 200 1884 sync addition;
#X obj 30 1911 math.sync_and;
#X text 200 1911 sync logical AND operation;
#X obj 30 1938 math.sync_div;
#X text 200 1938 sync division;
#X obj 30 1965 math.sync_eq;
#X text 200 1965 sync equal numbers check;
#X obj 30 1992 math.sync_ge;
#X text 200 1992 sync greater equal numbers compare;
#X obj 30 2019 math.sync_gt;
#X text 200 2019 sync greater then numbers compare;
#X obj 30 2046 math.sync_le;
#X text 200 2046 sync less equal numbers compare;
#X obj 30 2073 math.sync_lt;
#X text 200 2073 sync less then numbers compare;
#X obj 30 2100 math.sync_mod;
#X text 200 2100 sync remainder of modulo division (float or integer);
#X obj 30 2127 math.sync_mul;
#X text 200 2127 sync multiplication;
#X obj 30 2154 math.sync_ne;
#X text 200 2154 sync numbers for not equality;
#X obj 30 2181 math.sync_or;
#X text 200 2181 sync logical OR operation;
#X obj 30 2208 math.sync_sub;
#X text 200 2208 sync subtraction;
#X obj 30 2235 math.sync_xor;
#X text 200 2235 sync logical XOR operation;
#X obj 30 2262 math.tan;
#X text 200 2262 tangent function;
#X obj 30 2289 math.tanh;
#X text 200 2289 hyperbolic tangent function;
#X obj 30 2316 math.trunc;
#X text 200 2316 truncate to integer value;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::math 20 20 0 20 -104026
-4096 0;
#X obj 1 2343 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2353 library: ceammc;