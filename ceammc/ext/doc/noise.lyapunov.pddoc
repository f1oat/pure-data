<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="noise.lyapunov">
        <title>noise.lyapunov</title>
        <meta>
            <authors>
                <author>André Sier</author>
            </authors>
            <description>lyapunov random attractor</description>
            <license>%</license>
            <library>ceammc</library>
            <category>noise</category>
            <keywords>noise</keywords>
            <since>0.5</since>
        </meta>
        <info>
            <par>inspired by Paul Bourke, implementation by André Sier</par>
            <par>---</par>
            <par>lyapunov random attractors</par>
            <par>---</par>
            <par>Paul Bourke's words
            http://astronomy.swin.edu.au/%7Epbourke/fractals/lyapunov/</par>
            <par>---</par>
            <par>On average 98% of the random selections of (an, bn) result in an infinite
            series.</par>
            <par>This is so common because of the range (-2&lt;=a, b&lt;=2) for each of the
            parameters a and b, the number of infinite cases will reduce greatly with a smaller
            range.</par>
            <par>About 1% were point attractors, and about 0.5% were periodic basins of
            attraction.</par>
            <par>===</par>
            <par>x[n+1] = a[0] + a[1]*x[n] + a[2]*x[n]^2 + a[3]*x[n]*y[n] + a[4]*y[n] + a[5]*y[n]^2</par>
            <par>y[n+1] = b[0] + b[1]*x[n] + b[2]*x[n]^2 + b[3]*x[n]*y[n] + b[4]*y[n] + b[5]*y[n]^2</par>
            <par>===</par>
        </info>
        <arguments>
            <argument name="A" type="float">a value (optional)</argument>
            <argument name="B" type="float">b value (optional)</argument>
            <argument name="X" type="float">x value (optional)</argument>
            <argument name="Y" type="float">y value (optional)</argument>
        </arguments>
        <methods>
            <method name="set">
                <param type="float" name="SET" required="true">set to value</param>
            </method>
            <method name="reset">reset state</method>
            <method name="om">
                <param type="int" name="OM" required="true">enables output when cut or fold value
                is changed</param>
            </method>
            <method name="a">
                <param type="float" name="A0" required="true">a[0] value</param>
                <param type="float" name="A1" required="false">a[1] value</param>
                <param type="float" name="A2" required="false">a[2] value</param>
                <param type="float" name="A3" required="false">a[3] value</param>
                <param type="float" name="A4" required="false">a[4] value</param>
                <param type="float" name="A5" required="false">a[5] value</param>
            </method>
            <method name="b">
                <param type="float" name="B0" required="true">b[0] value</param>
                <param type="float" name="B1" required="false">b[1] value</param>
                <param type="float" name="B2" required="false">b[2] value</param>
                <param type="float" name="B3" required="false">b[3] value</param>
                <param type="float" name="B4" required="false">b[4] value</param>
                <param type="float" name="B5" required="false">b[5] value</param>
            </method>
            <method name="x">
                <param type="float" name="NX" required="true">x value</param>
            </method>
            <method name="y">
                <param type="float" name="NY" required="true">y value</param>
            </method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">output value</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>x outlet</outlet>
            <outlet>y outlet</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[

[T]
|
[metro 50 #metro]


  [T]         [F]
  |           |
  [om $1 #om( [set $1 #set( [reset #reset(

 [F]           [F]
 |             |
 [x $1 #x(     [y $1 #y(  

    [F]       [F]       
    |         |         
    [a $1 #a( [b $1 #b(  

[noise.lyapunov #noise-obj]
|
[ui.display {i=1,o=0}]

[X x:0->noise-obj:0]  
[X y:0->noise-obj:0] 

[X a:0->noise-obj:0]
[X b:0->noise-obj:0]

[X om:0->noise-obj:0]
[X set:0->noise-obj:0]
[X reset:0->noise-obj:0]

[X metro->noise-obj]

]]>
            </pdascii>
        </example>
    </object>
</pddoc>
