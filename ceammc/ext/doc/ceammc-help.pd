#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 an.pitchtrack~;
#X text 175 153 pitch tracker;
#X obj 20 180 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 221 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 array.bpm;
#X text 175 232 BPM calculator;
#X obj 30 259 array.copy;
#X text 175 259 copy samples from one array to another;
#X obj 30 286 array.do;
#X text 175 286 iterate and modify array content via side-chain;
#X obj 30 313 array.each;
#X text 175 313 process each array elements via side-chain;
#X obj 30 340 array.fill;
#X text 175 340 fill array with single value or pattern;
#X obj 30 367 array.minmax;
#X text 175 367 find array min and max element value;
#X obj 30 394 array.set;
#X text 175 394 set array content from list;
#X obj 30 421 array.stretch;
#X text 175 421 array time-stretch \, pitch-shift or rate-change;
#X obj 30 448 array.vplay;
#X text 175 448 simple array player for using with vline~;
#X obj 30 475 array.window;
#X text 175 475 fill array with window;
#X obj 20 502 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 543 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 557 ui.link @title [function] @url function-help.pd;
#X text 175 554 named function;
#X obj 30 577 function.call;
#X text 175 577 call named function;
#X obj 30 604 gain~;
#X text 175 604 multislot signal gain;
#X obj 30 631 matrix~;
#X text 175 631 signal routing matrix;
#X obj 30 658 metro.pattern;
#X text 175 658 metro with rhythmic patterns;
#X obj 30 685 metro.seq;
#X text 175 685 metro sequencer;
#X obj 30 712 mix~;
#X text 175 712 multislot signal mixer;
#X obj 30 739 obj.props;
#X text 175 739 property extractor;
#X obj 30 766 radio;
#X text 175 766 float index to outlet values as radio switch;
#X obj 30 793 window;
#X text 175 793 returns window value by given window position;
#X obj 30 820 xfade2~;
#X text 175 820 multi stereo-signal crossfade;
#X obj 30 847 xfade~;
#X text 175 847 multi signal crossfade;
#X obj 20 874 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 915 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 926 array.p2s;
#X text 175 926 convert array phase [0\..1] to sample position;
#X obj 30 953 array.s2p;
#X text 175 953 convert array sample position to relative phase
position [0\..1];
#X obj 30 990 conv.amp2dbfs;
#X text 175 990 convert from amplitude to decibel full scale;
#X obj 30 1017 conv.bpm2hz;
#X text 175 1017 converts BPM to frequency in herz;
#X obj 30 1044 conv.bpm2ms;
#X text 175 1044 convert frequency in BPM to period in milliseconds;
#X obj 30 1071 conv.bpm2sec;
#X text 175 1071 convert frequency in BPM to period in seconds;
#X obj 30 1098 conv.cc2amp;
#X text 175 1098 convert from MIDI Control Change range;
#X obj 30 1125 conv.dbfs2amp;
#X text 175 1125 convert decibel full scale to amplitude;
#X obj 30 1152 conv.lin2curve;
#X text 175 1152 map linear to exponential range with 0 allowed.;
#X obj 30 1179 conv.lin2exp;
#X text 175 1179 maps linear range to exponential range;
#X obj 30 1206 conv.lin2lin;
#X text 175 1206 convert from one linear range to another;
#X obj 30 1233 conv.list2props;
#X text 175 1233 converts list to series of property messages;
#X obj 30 1260 conv.midi2freq;
#X text 175 1260 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1297 conv.pitch2midi;
#X text 175 1297 converts symbol pitch name to MIDI note number;
#X obj 30 1324 conv.samp2sec;
#X text 175 1324 convert samples to time according to samplerate;
#X obj 30 1351 conv.sec2samp;
#X text 175 1351 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1388 conv.sec2str;
#X text 175 1388 converts float time in seconds to formated symbol (or
string);
#X obj 30 1425 conv.str2sec;
#X text 175 1425 converts formatted time to float value in seconds;
#X obj 20 1452 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1493 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1504 data.dict;
#X text 175 1504 dictionary container: store values by key;
#X obj 30 1531 data.fifo;
#X text 175 1531 First-In-First-Out (FIFO) queue data container;
#X obj 30 1558 data.float;
#X text 175 1558 robust float object;
#X obj 30 1585 data.int;
#X text 175 1585 robust int object;
#X obj 30 1612 data.list;
#X text 175 1612 list container;
#X obj 30 1639 data.mlist;
#X text 175 1639 multidimensional list container;
#X obj 30 1666 data.set;
#X text 175 1666 container that store unique elements;
#X obj 30 1693 data.set2list;
#X text 175 1693 converts set to list;
#X obj 30 1720 dict.contains;
#X text 175 1720 predicate to check dict contains key;
#X obj 30 1747 dict.each;
#X text 175 1747 map each value in dict;
#X obj 30 1774 dict.from_list;
#X text 175 1774 creates dictionary from list;
#X obj 30 1801 dict.get;
#X text 175 1801 on input dict outputs value to corresponding key
outlet;
#X obj 30 1828 dict.keys;
#X text 175 1828 get list of dict keys;
#X obj 30 1855 dict.pass;
#X text 175 1855 passes specified keys in dict;
#X obj 30 1882 dict.reject;
#X text 175 1882 rejects specified keys from dict;
#X obj 30 1909 dict.size;
#X text 175 1909 dictionary size;
#X obj 30 1936 dict.to_list;
#X text 175 1936 converts dictionary to plain list;
#X obj 30 1963 dict.values;
#X text 175 1963 dictionary values as mlist;
#X obj 30 1990 mlist.flatten;
#X text 175 1990 flatten nested mlist;
#X obj 30 2017 set.contains;
#X text 175 2017 check if specified element is in set;
#X obj 30 2044 set.diff;
#X text 175 2044 difference between two sets;
#X obj 30 2071 set.equal;
#X text 175 2071 checks if two sets are equal (contains same
elements);
#X obj 30 2098 set.intersect;
#X text 175 2098 output intersection of given sets;
#X obj 30 2125 set.size;
#X text 175 2125 get number of elements in set;
#X obj 30 2152 set.symdiff;
#X text 175 2152 symmetric difference between two sets;
#X obj 30 2179 set.union;
#X text 175 2179 output union of given sets;
#X obj 20 2206 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2247 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2258 dyn.comp2~;
#X text 175 2258 stereo dynamic range compressor;
#X obj 30 2285 dyn.comp~;
#X text 175 2285 mono dynamic range compressors;
#X obj 30 2312 dyn.gate2~;
#X text 175 2312 stereo signal gate;
#X obj 30 2339 dyn.gate~;
#X text 175 2339 mono signal gate;
#X obj 30 2366 dyn.limit2~;
#X text 175 2366 stereo 1176LN Peak Limiter;
#X obj 30 2393 dyn.limit~;
#X text 175 2393 mono 1176LN Peak Limiter;
#X obj 30 2420 dyn.softclip~;
#X text 175 2420 soft signal clip;
#X obj 20 2447 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2488 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2499 env.adsr~;
#X text 175 2499 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2526 env.ar~;
#X text 175 2526 Attack/Release envelope generator;
#X obj 30 2553 env.asr~;
#X text 175 2553 Attack/Sustain/Release envelope generator;
#X obj 30 2580 env.concat;
#X text 175 2580 Envelope concatenation;
#X obj 30 2607 env.follow~;
#X text 175 2607 Envelope follower with independent attack and release
times.;
#X obj 30 2644 env.mix;
#X text 175 2644 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2681 env.smooth~;
#X text 175 2681 An envelope with an exponential attack and release;
#X obj 30 2708 env.tscale;
#X text 175 2708 Envelope time-scale;
#X obj 30 2735 env.tshift;
#X text 175 2735 Envelope time-shift (horizontal);
#X obj 30 2762 env.vscale;
#X text 175 2762 Envelope value-scale;
#X obj 30 2789 env2array;
#X text 175 2789 Renders envelope to specified array;
#X obj 30 2816 env2vline;
#X text 175 2816 Converts envelope to bunch of vline messages;
#X obj 30 2843 envelope;
#X text 175 2843 Envelope data type;
#X obj 30 2870 vline2env;
#X text 175 2870 Converts vline messages to env;
#X obj 20 2897 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2938 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2949 expand_env;
#X text 175 2949 Substitute enviroment variables in data stream;
#X obj 30 2976 flow.append;
#X text 175 2976 inject message into flow;
#X obj 30 3003 flow.change;
#X text 175 3003 rejects redundant input values;
#X obj 30 3030 flow.count;
#X text 175 3030 control flow event counter;
#X obj 30 3057 flow.demultiplex;
#X text 175 3057 control flow demultiplexer;
#X obj 30 3084 flow.demultiplex2~;
#X text 175 3084 audio stream stereo demultiplexer;
#X obj 30 3111 flow.demultiplex~;
#X text 175 3111 audio stream demultiplexer;
#X obj 30 3138 flow.gate;
#X text 175 3138 control flow gate. [spigot] analog;
#X obj 30 3165 flow.group;
#X text 175 3165 group data atoms in list of specified size;
#X obj 30 3192 flow.interval;
#X text 175 3192 measure time between flow events;
#X obj 30 3219 flow.less;
#X text 175 3219 numeric stream router \, like many [moses];
#X obj 30 3246 flow.less_eq;
#X text 175 3246 numeric stream router \, like many [moses];
#X obj 30 3273 flow.multiplex;
#X text 175 3273 control flow multiplexer;
#X obj 30 3300 flow.multiplex2~;
#X text 175 3300 audio stream stereo multiplexer;
#X obj 30 3327 flow.multiplex~;
#X text 175 3327 audio stream multiplexer;
#X obj 30 3354 flow.once;
#X text 175 3354 one message pass thru;
#X obj 30 3381 flow.pass;
#X text 175 3381 pass specified values;
#X obj 30 3408 flow.pass_if;
#X text 175 3408 pass values that accepted by predicate object;
#X obj 30 3435 flow.reject;
#X text 175 3435 reject specified values;
#X obj 30 3462 flow.reject_if;
#X text 175 3462 reject values by predicate;
#X obj 30 3489 flow.route;
#X text 175 3489 advanced message router;
#X obj 30 3516 flow.speedlim;
#X text 175 3516 control stream speed limiter;
#X obj 30 3543 flow.split;
#X text 175 3543 split data flow by external side-chain predicate;
#X obj 30 3570 flow.sync;
#X text 175 3570 bus with only hot inlets;
#X obj 30 3597 flow.tee~;
#X text 175 3597 separate audio and control streams;
#X obj 30 3624 replace;
#X text 175 3624 Replace atoms in data stream;
#X obj 20 3651 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3692 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3703 flt.biquad~;
#X text 175 3703 second order IIR filter.;
#X obj 30 3730 flt.bpf12~;
#X text 175 3730 Band-pass filter with 12/db per octave slope;
#X obj 30 3757 flt.bpf24~;
#X text 175 3757 Band-pass filter with 24/db per octave slope;
#X obj 30 3784 flt.c_bpf~;
#X text 175 3784 BPF coefficient calculator for biquad filter;
#X obj 30 3811 flt.c_highshelf~;
#X text 175 3811 Highshelf filter coefficient calculator for biquad;
#X obj 30 3838 flt.c_hpf~;
#X text 175 3838 HPF coefficient calculator for biquad filter;
#X obj 30 3865 flt.c_lowshelf~;
#X text 175 3865 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3892 flt.c_lpf~;
#X text 175 3892 LPF coefficient calculator for biquad filter;
#X obj 30 3919 flt.c_notch~;
#X text 175 3919 Band-reject coefficient calculator for biquad filter;
#X obj 30 3946 flt.c_peak~;
#X text 175 3946 Peaking equalizer calculator for biquad;
#X obj 30 3973 flt.dcblock2~;
#X text 175 3973 stereo DC blocker;
#X obj 30 4000 flt.dcblock~;
#X text 175 4000 mono DC blocker;
#X obj 30 4027 flt.eq10~;
#X text 175 4027 graphic 10 band equalizer;
#X obj 30 4054 flt.eq_peak_cq~;
#X text 175 4054 constant-Q second order peaking equalizer section;
#X obj 30 4081 flt.eq_peak~;
#X text 175 4081 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 4132 flt.highshelf~;
#X text 175 4132 gain boost|cut above some frequency;
#X obj 30 4159 flt.hpf12~;
#X text 175 4159 High-pass filter with 12/db per octave slope;
#X obj 30 4186 flt.hpf24~;
#X text 175 4186 High-pass filter with 24/db per octave slope;
#X obj 30 4213 flt.lowshelf~;
#X text 175 4213 gain boost|cut below some frequency;
#X obj 30 4240 flt.lpf12~;
#X text 175 4240 Low-pass filter with 12/db per octave slope;
#X obj 30 4267 flt.lpf24~;
#X text 175 4267 Low-pass filter with 24/db per octave slope;
#X obj 30 4294 flt.moog_vcf~;
#X text 175 4294 Moog Voltage Controlled Filter;
#X obj 30 4321 flt.notch~;
#X text 175 4321 band-rejection filter;
#X obj 30 4348 flt.resonbp~;
#X text 175 4348 Simple resonant bandpass filter;
#X obj 20 4375 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4416 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4427 fx.bitdown~;
#X text 175 4427 bit downer and downsampler effect;
#X obj 30 4454 fx.chorus~;
#X text 175 4454 Chorus effect;
#X obj 30 4481 fx.distortion~;
#X text 175 4481 cubic nonlinearity distortion;
#X obj 30 4508 fx.drive~;
#X text 175 4508 Guitarix drive effect;
#X obj 30 4535 fx.drone_box~;
#X text 175 4535 mono sympathetic resonance generator;
#X obj 30 4562 fx.echo~;
#X text 175 4562 simple echo effect;
#X obj 30 4589 fx.flanger~;
#X text 175 4589 mono flanging effect;
#X obj 30 4616 fx.freeverb2~;
#X text 175 4616 freeverb2 - stereo version of freeverb;
#X obj 30 4643 fx.freeverb~;
#X text 175 4643 freeverb - common used open-source reverb;
#X obj 30 4670 fx.freqshift~;
#X text 175 4670 frequency shifter or single-sideband ring modulation;
#X obj 30 4697 fx.granulator~;
#X text 175 4697 simple input stream granulator;
#X obj 30 4724 fx.greyhole~;
#X text 175 4724 A complex echo-like effect;
#X obj 30 4751 fx.looper~;
#X text 175 4751 One track looper;
#X obj 30 4778 fx.pitchshift~;
#X text 175 4778 simple pitch shifter based on 2 delay lines;
#X obj 30 4805 fx.sdelay~;
#X text 175 4805 smooth delay with a feedback control;
#X obj 30 4832 fx.wahwah~;
#X text 175 4832 digitized CryBaby wah pedal;
#X obj 30 4859 fx.zita_rev1~;
#X text 175 4859 Zita stereo reverb;
#X obj 20 4886 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4927 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4938 global.dict;
#X text 175 4938 global named dict object;
#X obj 30 4965 global.float;
#X text 175 4965 global named float object;
#X obj 30 4992 global.int;
#X text 175 4992 global named integer object;
#X obj 30 5019 global.list;
#X text 175 5019 global named list object;
#X obj 30 5046 global.mlist;
#X text 175 5046 global named mlist object;
#X obj 30 5073 global.set;
#X text 175 5073 global named set object;
#X obj 20 5100 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5141 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5152 hw.arduino;
#X text 175 5152 Arduino device;
#X obj 20 5179 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5220 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5231 lfo.+pulse~;
#X text 175 5231 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5258 lfo.+saw~;
#X text 175 5258 Positive unit-amplitude low frequency saw wave;
#X obj 30 5285 lfo.+square~;
#X text 175 5285 Positive low frequency square wave;
#X obj 30 5312 lfo.+tri~;
#X text 175 5312 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5339 lfo.impulse~;
#X text 175 5339 Unit-amplitude low-frequency impulse train;
#X obj 30 5366 lfo.pulse~;
#X text 175 5366 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5393 lfo.saw~;
#X text 175 5393 Full-range unit-amplitude low frequency saw;
#X obj 30 5420 lfo.square~;
#X text 175 5420 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5447 lfo.tri~;
#X text 175 5447 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5474 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5515 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5526 list.^at;
#X text 175 5526 on input index(es) outputs list element(s);
#X obj 30 5553 list.^contains;
#X text 175 5553 on input atom or list checks if specified list
contains it;
#X obj 30 5580 list.^search;
#X text 175 5580 on input atom returns it index in list;
#X obj 30 5607 list.all_of;
#X text 175 5607 checks if all list atoms accepted by predicate;
#X obj 30 5634 list.any_of;
#X text 175 5634 checks if at least one list element is accepted by
predicate;
#X obj 30 5671 list.append;
#X text 175 5671 append atom or list to the end of input list;
#X obj 30 5698 list.apply_to;
#X text 175 5698 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5735 list.at;
#X text 175 5735 on input list outputs element(s) at specified
index(es);
#X obj 30 5762 list.choice;
#X text 175 5762 returns random element from list;
#X obj 30 5789 list.contains;
#X text 175 5789 on input list checks if it contains specified
subsequence;
#X obj 30 5816 list.count;
#X text 175 5816 returns the number of items that equal to specified
value;
#X obj 30 5843 list.count_if;
#X text 175 5843 returns the number of items that satisfy to external
predicate.;
#X obj 30 5880 list.delta;
#X text 175 5880 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5917 list.distribution;
#X text 175 5917 list value distribution;
#X obj 30 5944 list.do;
#X text 175 5944 iterate and modify list contents via side-chain;
#X obj 30 5971 list.each;
#X text 175 5971 maps each list value via external object(s);
#X obj 30 5998 list.enumerate;
#X text 175 5998 enumerates input list;
#X obj 30 6025 list.equal;
#X text 175 6025 checks if given lists are equal;
#X obj 30 6052 list.first;
#X text 175 6052 returns first list element;
#X obj 30 6079 list.gen;
#X text 175 6079 generates list of specified length via external
generator;
#X obj 30 6106 list.histogram;
#X text 175 6106 outputs distribution histogram;
#X obj 30 6133 list.insert;
#X text 175 6133 insert atom or list to the specified position of
input list;
#X obj 30 6160 list.integrator;
#X text 175 6160 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 6197 list.last;
#X text 175 6197 returns last list element;
#X obj 30 6224 list.length;
#X text 175 6224 returns the number of atoms in the list;
#X obj 30 6251 list.max;
#X text 175 6251 returns largest element in the list;
#X obj 30 6278 list.mean;
#X text 175 6278 calculates average of list of floats;
#X obj 30 6305 list.min;
#X text 175 6305 returns smallest element in the list;
#X obj 30 6332 list.none_of;
#X text 175 6332 checks if none of list atoms is accepted by
predicate;
#X obj 30 6359 list.normalize;
#X text 175 6359 normalizes float list values to get their sum = 1.0;
#X obj 30 6386 list.pass_if;
#X text 175 6386 leave only elements accepted by predicate;
#X obj 30 6413 list.prepend;
#X text 175 6413 prepend atom or list before input list;
#X obj 30 6440 list.product;
#X text 175 6440 calculates product of floats in list;
#X obj 30 6467 list.range;
#X text 175 6467 returns list smallest and largest value;
#X obj 30 6494 list.reduce;
#X text 175 6494 apply function of two arguments cumulatively to the
list;
#X obj 30 6521 list.remove;
#X text 175 6521 on input list remove element(s) at specified
positions;
#X obj 30 6548 list.remove_if;
#X text 175 6548 remove elements by predicate;
#X obj 30 6575 list.repack;
#X text 175 6575 repack input list to specified size;
#X obj 30 6602 list.repeat;
#X text 175 6602 creates new list by repeating given list specified
times;
#X obj 30 6629 list.resize;
#X text 175 6629 changes list size;
#X obj 30 6656 list.reverse;
#X text 175 6656 reverses the order of the elements in the list;
#X obj 30 6683 list.rldecode;
#X text 175 6683 Run-length list decoder (RLE);
#X obj 30 6710 list.rlencode;
#X text 175 6710 RLE (run-length encoding) for lists;
#X obj 30 6737 list.rotate;
#X text 175 6737 rotates list;
#X obj 30 6764 list.route;
#X text 175 6764 acts like [route] but for lists;
#X obj 30 6791 list.search;
#X text 175 6791 search specified items in input list;
#X obj 30 6818 list.separate;
#X text 175 6818 sends list elements one by one separately;
#X obj 30 6845 list.seq;
#X text 175 6845 numeric sequence list generator;
#X obj 30 6872 list.set;
#X text 175 6872 on input list set value at specified position;
#X obj 30 6899 list.shift;
#X text 175 6899 shifts the contents of the list with linear
interpolation;
#X obj 30 6926 list.shuffle;
#X text 175 6926 randomly rearranges elements in list;
#X obj 30 6953 list.slice;
#X text 175 6953 extract sublist;
#X obj 30 6980 list.sort;
#X text 175 6980 sorts list values by ascending order;
#X obj 30 7007 list.sort_with;
#X text 175 7007 sort list with user defined side-chain;
#X obj 30 7034 list.split;
#X text 175 7034 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7071 list.stretch;
#X text 175 7071 stretches list - chenges its size with linear
interpolation.;
#X obj 30 7108 list.sum;
#X text 175 7108 calculates sum of floats in list;
#X obj 30 7135 list.unique;
#X text 175 7135 removes duplicates from input list;
#X obj 30 7162 list.unpack;
#X text 175 7162 unpack list elements to separate outlets;
#X obj 30 7189 list.unzip;
#X text 175 7189 splits list to N lists \, each to separate output;
#X obj 30 7216 list.walk;
#X text 175 7216 Walks thru the list;
#X obj 30 7243 list.zip;
#X text 175 7243 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7294 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7335 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7346 live.capture~;
#X text 175 7346 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7383 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7424 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7435 local.dict;
#X text 175 7435 local named dict object;
#X obj 30 7462 local.float;
#X text 175 7462 canvas-scoped named float variable;
#X obj 30 7489 local.int;
#X text 175 7489 canvas-scoped named integer variable;
#X obj 30 7516 local.list;
#X text 175 7516 local named list object;
#X obj 30 7543 local.mlist;
#X text 175 7543 local named mlist object;
#X obj 30 7570 local.set;
#X text 175 7570 local named set object;
#X obj 20 7597 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7638 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7649 math.abs;
#X text 175 7649 absolute value function;
#X obj 30 7676 math.acos;
#X text 175 7676 arc cosine function;
#X obj 30 7703 math.acosh;
#X text 175 7703 inverse hyperbolic cosine function;
#X obj 30 7730 math.and;
#X text 175 7730 operation AND for multiple arguments;
#X obj 30 7757 math.approx;
#X text 175 7757 check if input value approximately equal to pattern;
#X obj 30 7784 math.asin;
#X text 175 7784 arc sine function;
#X obj 30 7811 math.asinh;
#X text 175 7811 inverse hyperbolic sine function;
#X obj 30 7838 math.atan;
#X text 175 7838 arc tangent function;
#X obj 30 7865 math.atanh;
#X text 175 7865 inverse hyperbolic tangent function;
#X obj 30 7892 math.cbrt;
#X text 175 7892 cube root function;
#X obj 30 7919 math.cdiv~;
#X text 175 7919 division of complex signals;
#X obj 30 7946 math.ceil;
#X text 175 7946 round to smallest integral value not less than input
value;
#X obj 30 7973 math.cmul~;
#X text 175 7973 multiplication of complex signals;
#X obj 30 8000 math.cos;
#X text 175 8000 cosine function;
#X obj 30 8027 math.cosh;
#X text 175 8027 hyperbolic cosine function;
#X obj 30 8054 math.div;
#X text 175 8054 division (on lists too);
#X obj 30 8081 math.e;
#X text 175 8081 mathematical constant \, base of the natural
logarithm;
#X obj 30 8108 math.exp;
#X text 175 8108 exponential functions;
#X obj 30 8135 math.exp2;
#X text 175 8135 exponential functions;
#X obj 30 8162 math.expr;
#X text 175 8162 dynamic [expr];
#X obj 30 8189 math.floor;
#X text 175 8189 round to largest integral value not greater than x;
#X obj 30 8216 math.gcd;
#X text 175 8216 calculate greatest common divisor;
#X obj 30 8243 math.inf;
#X text 175 8243 infinity value that cannot be represented accurately;
#X obj 30 8270 math.lcm;
#X text 175 8270 calculate least common multiple;
#X obj 30 8297 math.log;
#X text 175 8297 logarithm functions;
#X obj 30 8324 math.log10;
#X text 175 8324 logarithm functions;
#X obj 30 8351 math.log2;
#X text 175 8351 logarithm functions;
#X obj 30 8378 math.mul;
#X text 175 8378 multiplication (on lists too);
#X obj 30 8405 math.nan;
#X text 175 8405 Not a Number \, unrepresentable value;
#X obj 30 8432 math.neg;
#X text 175 8432 negate function;
#X obj 30 8459 math.or;
#X text 175 8459 operation OR for multiple arguments;
#X obj 30 8486 math.pi;
#X text 175 8486 mathematical constant;
#X obj 30 8513 math.polyeval;
#X text 175 8513 evaluates the polynomial described by the
coefficients list;
#X obj 30 8540 math.reciprocal;
#X text 175 8540 calculate reciprocal number;
#X obj 30 8567 math.round;
#X text 175 8567 round to integral value \, regardless of rounding
direction;
#X obj 30 8594 math.round~;
#X text 175 8594 signal round;
#X obj 30 8621 math.sign;
#X text 175 8621 sign function;
#X obj 30 8648 math.sin;
#X text 175 8648 sine function;
#X obj 30 8675 math.sinh;
#X text 175 8675 hyperbolic sine function;
#X obj 30 8702 math.sqrt;
#X text 175 8702 square root function;
#X obj 30 8729 math.squared;
#X text 175 8729 value square;
#X obj 30 8756 math.tan;
#X text 175 8756 tangent function;
#X obj 30 8783 math.tanh;
#X text 175 8783 hyperbolic tangent function;
#X obj 30 8810 math.trunc;
#X text 175 8810 truncate to integer value;
#X obj 20 8837 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8878 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8889 midi.ctl2str;
#X text 175 8889 convert Standard MIDI Controllers number to name;
#X obj 30 8916 midi.event2ctl;
#X text 175 8916 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8943 midi.event2note;
#X text 175 8943 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8970 midi.event2prg;
#X text 175 8970 convert MidiEvent message to midi program change
value;
#X obj 30 8997 midi.file;
#X text 175 8997 standard midi file SMF reader and writer;
#X obj 30 9024 midi.key2str;
#X text 175 9024 convert key number to SPN name according to tonality;
#X obj 30 9051 midi.prg2str;
#X text 175 9051 convert GM Instrument number to name (string or
symbol);
#X obj 30 9078 midi.track;
#X text 175 9078 extract track from MidiFile;
#X obj 20 9105 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9146 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9157 click~;
#X text 175 9157 Output single impulse on bang;
#X obj 30 9184 fluid~;
#X text 175 9184 FluidSynth SoundFont 2 player;
#X obj 30 9211 modplug~;
#X text 175 9211 MOD file player (using libmodplug);
#X obj 30 9238 speech.flite;
#X text 175 9238 render speech to array;
#X obj 20 9265 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9306 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9317 msg;
#X text 175 9317 message constructor;
#X obj 30 9344 msg.after;
#X text 175 9344 send specified message after incoming message;
#X obj 30 9371 msg.onload;
#X text 175 9371 send message when patch loads;
#X obj 20 9398 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9439 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9450 net.host2ip;
#X text 175 9450 returns IP address by DNS name;
#X obj 20 9477 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9518 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9529 noise.crackle~;
#X text 175 9529 sparse noise generator;
#X obj 30 9556 noise.lfreq0~;
#X text 175 9556 sampled/held noise (piecewise constant);
#X obj 30 9583 noise.lfreq~;
#X text 175 9583 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9610 noise.pink~;
#X text 175 9610 Pink noise generator;
#X obj 30 9637 noise.white~;
#X text 175 9637 White noise generator;
#X obj 20 9664 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9705 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9716 osc.blit~;
#X text 175 9716 Bandlimited impulse train oscillator;
#X obj 30 9743 osc.impulse~;
#X text 175 9743 Bandlimited impulse train generator;
#X obj 30 9770 osc.pulse~;
#X text 175 9770 Bandlimited pulse train oscillator;
#X obj 30 9797 osc.saw4~;
#X text 175 9797 Bandlimited sawtooth wave;
#X obj 30 9824 osc.saw~;
#X text 175 9824 Alias-free sawtooth wave;
#X obj 30 9851 osc.sinfb~;
#X text 175 9851 Sine oscilator with feedback;
#X obj 30 9878 osc.sin~;
#X text 175 9878 Sine wave oscillator;
#X obj 30 9905 osc.square~;
#X text 175 9905 Bandlimited square wave oscillator;
#X obj 30 9932 osc.tri~;
#X text 175 9932 Bandlimited triangle wave oscillator;
#X obj 20 9959 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10000 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10011 canvas.current;
#X text 175 10011 verbose information about current canvas;
#X obj 30 10038 canvas.top;
#X text 175 10038 verbose information about top-level canvas;
#X obj 30 10065 patch.args;
#X text 175 10065 Get patch or subpatch arguments;
#X obj 20 10092 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10133 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10144 path.basename;
#X text 175 10144 outputs filename portion of pathname;
#X obj 30 10171 path.dirname;
#X text 175 10171 outputs directory portion of pathname;
#X obj 30 10198 path.exists;
#X text 175 10198 checks if given path exists;
#X obj 30 10225 path.lsdir;
#X text 175 10225 list directory contents;
#X obj 20 10252 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10293 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10304 is_any;
#X text 175 10304 checks if input data has *any* type;
#X obj 30 10331 is_bang;
#X text 175 10331 checks if input data has *bang* type;
#X obj 30 10358 is_data;
#X text 175 10358 checks if input data has *data* type;
#X obj 30 10385 is_dict;
#X text 175 10385 checks if input data has *dict* type;
#X obj 30 10412 is_even;
#X text 175 10412 checks if input number is even;
#X obj 30 10439 is_file;
#X text 175 10439 checks if file exists and accessible;
#X obj 30 10466 is_float;
#X text 175 10466 checks if input data has *float* type;
#X obj 30 10493 is_list;
#X text 175 10493 checks if input data has *list* type;
#X obj 30 10520 is_odd;
#X text 175 10520 checks if input number is odd;
#X obj 30 10547 is_pointer;
#X text 175 10547 checks if input data has *pointer* type;
#X obj 30 10574 is_symbol;
#X text 175 10574 checks if input data has *symbol* type;
#X obj 20 10601 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10642 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10653 preset.float;
#X text 175 10653 load/store float preset;
#X obj 30 10680 preset.list;
#X text 175 10680 load/store symbol preset;
#X obj 30 10707 preset.storage;
#X text 175 10707 preset storage control;
#X obj 30 10734 preset.symbol;
#X text 175 10734 load/store symbol preset;
#X obj 20 10761 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10802 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10813 patch.props;
#X text 175 10813 patch properties manager;
#X obj 30 10840 prop;
#X text 175 10840 get/set named property value for subpatch or
abstraction;
#X obj 30 10867 prop.declare;
#X text 175 10867 declare named property for subpatch or abstraction;
#X obj 30 10894 prop.get;
#X text 175 10894 Property extractor;
#X obj 30 10921 prop.get~;
#X text 175 10921 Property extractor from sound stream;
#X obj 30 10948 prop.set;
#X text 175 10948 Property injector;
#X obj 20 10975 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11016 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11027 proto.firmata;
#X text 175 11027 Firmata Arduino protocol support;
#X obj 20 11054 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11095 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11106 random.discrete;
#X text 175 11106 random weighted integers on interval [0 \, n);
#X obj 30 11133 random.float;
#X text 175 11133 random float generator in specified range;
#X obj 30 11160 random.gauss;
#X text 175 11160 gaussian random distribution;
#X obj 30 11187 random.int;
#X text 175 11187 Random integer generator in specified range;
#X obj 30 11214 random.linear;
#X text 175 11214 random linear distribution;
#X obj 30 11241 random.pw_const;
#X text 175 11241 piecewise constant random distribution;
#X obj 30 11268 random.pw_lin;
#X text 175 11268 piecewise linear random distribution;
#X obj 20 11295 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11336 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11347 snd.file;
#X text 175 11347 Sound file loader on steroids;
#X obj 20 11374 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11415 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11426 pan.cos~;
#X text 175 11426 two channel equal power sine/cosine panner;
#X obj 30 11453 pan.linsig~;
#X text 175 11453 two channel linear panner with signal control;
#X obj 30 11480 pan.lin~;
#X text 175 11480 two channel linear panner;
#X obj 30 11507 pan.spread~;
#X text 175 11507 spreads input channels across the stereo field;
#X obj 30 11534 pan.sqrt~;
#X text 175 11534 two channel equal power square root panner;
#X obj 30 11561 spat.pan4~;
#X text 175 11561 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11588 spat.pan8~;
#X text 175 11588 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11615 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11656 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11667 string;
#X text 175 11667 string constructor;
#X obj 30 11694 string.contains;
#X text 175 11694 checks if given string contains specified substring;
#X obj 30 11721 string.ends_with;
#X text 175 11721 checks if given string ends with specified suffix;
#X obj 30 11748 string.equal;
#X text 175 11748 check strings for equality;
#X obj 30 11775 string.format;
#X text 175 11775 formats string like printf.;
#X obj 30 11802 string.join;
#X text 175 11802 joins (concatenates) strings with separator;
#X obj 30 11829 string.length;
#X text 175 11829 number of characters in string (unicode supported);
#X obj 30 11856 string.remove;
#X text 175 11856 remove substring from input string;
#X obj 30 11883 string.replace;
#X text 175 11883 replace from one substring to another in input
string;
#X obj 30 11910 string.split;
#X text 175 11910 split string by separator;
#X obj 30 11937 string.starts_with;
#X text 175 11937 checks if given string starts with specified prefix;
#X obj 30 11964 string.substr;
#X text 175 11964 extract substring from input string;
#X obj 30 11991 string2symbol;
#X text 175 11991 converts string to symbol;
#X obj 20 12018 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12059 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12070 symbol.equal;
#X text 175 12070 check symbols for equality;
#X obj 30 12097 symbol.length;
#X text 175 12097 number of characters in symbol (unicode supported);
#X obj 30 12124 symbol.num_compare;
#X text 175 12124 numeric symbol compare;
#X obj 20 12151 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12192 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12203 synth.bee3~;
#X text 175 12203 Hammond-oid organ FM synthesis instrument;
#X obj 30 12230 synth.birds~;
#X text 175 12230 bird singing generator;
#X obj 30 12257 synth.church_bell~;
#X text 175 12257 generic church bell modal model;
#X obj 30 12284 synth.dubdub~;
#X text 175 12284 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12321 synth.eguitar~;
#X text 175 12321 simple electric guitar model with steel strings;
#X obj 30 12348 synth.fgrain~;
#X text 175 12348 file granulator from STK;
#X obj 30 12375 synth.ks~;
#X text 175 12375 Karplus-Strong string;
#X obj 30 12402 synth.marimba~;
#X text 175 12402 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12439 synth.rhodey~;
#X text 175 12439 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12466 synth.risset_arp~;
#X text 175 12466 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12493 synth.risset_tone~;
#X text 175 12493 Jean Claude Risset's endless glissando;
#X obj 30 12520 synth.shakers~;
#X text 175 12520 various percussion sounds from STK library;
#X obj 30 12547 synth.wurley~;
#X text 175 12547 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12574 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12615 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12626 system.cursor;
#X text 175 12626 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12663 system.getenv;
#X text 175 12663 Get system environment variables;
#X obj 30 12690 system.hostname;
#X text 175 12690 outputs system hostname;
#X obj 30 12717 system.memsize;
#X text 175 12717 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12754 system.memused;
#X text 175 12754 returns the process physical memory use - current
and peak;
#X obj 30 12781 system.screen_size;
#X text 175 12781 returns current screen size in pixels;
#X obj 30 12808 system.shell;
#X text 175 12808 run external command in separate process;
#X obj 20 12835 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12876 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12887 tl.bang;
#X text 175 12887 Timeline bang (with possible delay);
#X obj 30 12917 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12914 Timeline section;
#X obj 30 12937 tl.timeline;
#X text 175 12937 Timeline - event scheduler;
#X obj 30 12964 tl.toggle;
#X text 175 12964 Timeline bang;
#X obj 30 12991 tl.transport;
#X text 175 12991 Timeline transport control;
#X obj 20 13018 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13059 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13073 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 13070 array view with cursor and selection;
#X obj 30 13096 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 13093 A bang... that's all;
#X obj 30 13119 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 13116 colorchooser widget;
#X obj 30 13142 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 13139 Display GUI object;
#X obj 30 13165 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 13162 GUI for turning DSP on/off;
#X obj 30 13188 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 13185 envelope editor widget;
#X obj 30 13211 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 175 13208 UI stereo gain control;
#X obj 30 13234 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 13231 UI gain control;
#X obj 30 13257 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 13254 simple icon with button capabilities;
#X obj 30 13280 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 13277 value increment/decrement;
#X obj 30 13303 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 13300 keyboard widget;
#X obj 30 13326 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 13323 knob widget;
#X obj 30 13349 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 13346 simple label widget;
#X obj 30 13372 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 13369 Hyperlink widget;
#X obj 30 13395 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 13392 The matrix of toggles has you.;
#X obj 30 13418 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 13415 Dropdown menu;
#X obj 30 13441 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 13438 Shows peak and rms signal level;
#X obj 30 13464 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 13461 counterpart of the vanilla [nbx];
#X obj 30 13487 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 13484 counterpart of the vanilla [nbx] for signal;
#X obj 30 13510 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 13507 Preset manager;
#X obj 30 13533 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 13530 counterpart of the vanilla radio toggle;
#X obj 30 13556 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 13553 range slider;
#X obj 30 13579 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 13576 Scope GUI object;
#X obj 30 13602 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 13599 counterpart of the vanilla slider;
#X obj 30 13625 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 13622 2D slider widget;
#X obj 30 13648 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 13645 Multiple slider widget;
#X obj 30 13671 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 13668 Spectroscope GUI object;
#X obj 30 13694 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 13691 displays a list of text buttons or text toggles;
#X obj 30 13717 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13714 modern toggle widget;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13737 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13737 version: v0.6 \, license: GPL3;
#X obj 20 13756 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;