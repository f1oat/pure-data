#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 20 776 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 817 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 831 ui.link @title [function] @url function-help.pd;
#X text 200 828 named function;
#X obj 30 853 function.call;
#X text 200 853 call named function;
#X obj 30 880 gain~;
#X text 200 880 multislot signal gain;
#X obj 30 907 matrix~;
#X text 200 907 signal routing matrix;
#X obj 30 934 metro.pattern;
#X text 200 934 metro with rhythmic patterns;
#X obj 30 961 metro.random;
#X text 200 961 metro random bang with specified range;
#X obj 30 988 metro.seq;
#X text 200 988 metro sequencer;
#X obj 30 1015 mix~;
#X text 200 1015 multislot signal mixer;
#X obj 30 1042 obj.props;
#X text 200 1042 property extractor;
#X obj 30 1069 radio;
#X text 200 1069 float index to outlet values as radio switch;
#X obj 30 1096 window;
#X text 200 1096 returns window value by given window position;
#X obj 30 1123 xdac~;
#X text 200 1123 dac~ with channel ranges;
#X obj 30 1150 xfade2~;
#X text 200 1150 multi stereo-signal crossfade;
#X obj 30 1177 xfade~;
#X text 200 1177 multi signal crossfade;
#X obj 20 1204 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1245 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1256 chaos.gbman0;
#X text 200 1256 Gingerbreadman map chaotic generator;
#X obj 30 1283 chaos.gbman0~;
#X text 200 1283 Gingerbreadman map chaotic generator;
#X obj 20 1310 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1351 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1362 array.p2s;
#X text 200 1362 convert array phase [0\..1] to sample position;
#X obj 30 1389 array.s2p;
#X text 200 1389 convert array sample position to relative phase position
[0\..1];
#X obj 30 1429 conv.amp2dbfs;
#X text 200 1429 convert from amplitude to decibel full scale;
#X obj 30 1456 conv.bpm2hz;
#X text 200 1456 converts BPM to frequency in herz;
#X obj 30 1483 conv.bpm2ms;
#X text 200 1483 convert frequency in BPM to period in milliseconds;
#X obj 30 1510 conv.bpm2sec;
#X text 200 1510 convert frequency in BPM to period in seconds;
#X obj 30 1537 conv.car2pol;
#X text 200 1537 convert cartesian coords to polar;
#X obj 30 1564 conv.cc2amp;
#X text 200 1564 convert from MIDI Control Change range;
#X obj 30 1591 conv.dbfs2amp;
#X text 200 1591 convert decibel full scale to amplitude;
#X obj 30 1618 conv.lin2curve;
#X text 200 1618 map linear to exponential range with 0 allowed.;
#X obj 30 1645 conv.lin2exp;
#X text 200 1645 maps linear range to exponential range;
#X obj 30 1672 conv.lin2lin;
#X text 200 1672 convert from one linear range to another;
#X obj 30 1699 conv.lin2lin~;
#X text 200 1699 convert from one linear range to another for signals;
#X obj 30 1726 conv.list2props;
#X text 200 1726 converts list to series of property messages;
#X obj 30 1753 conv.midi2freq;
#X text 200 1753 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1793 conv.phase2rad;
#X text 200 1793 convert phase value [0-1] to radians;
#X obj 30 1820 conv.phase2rad~;
#X text 200 1820 convert phase value [0-1] to radians;
#X obj 30 1847 conv.pitch2midi;
#X text 200 1847 converts symbol pitch name to MIDI note number;
#X obj 30 1874 conv.pol2car;
#X text 200 1874 convert from polar coordinates to cartesian;
#X obj 30 1901 conv.rad2phase;
#X text 200 1901 convert radians value to phase;
#X obj 30 1928 conv.rad2phase~;
#X text 200 1928 convert radians value to phase;
#X obj 30 1955 conv.samp2ms;
#X text 200 1955 convert samples to time according to samplerate;
#X obj 30 1982 conv.samp2sec;
#X text 200 1982 convert samples to time according to samplerate;
#X obj 30 2009 conv.sec2samp;
#X text 200 2009 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2049 conv.sec2str;
#X text 200 2049 converts float time in seconds to formated symbol
(or string);
#X obj 30 2076 conv.str2sec;
#X text 200 2076 converts formatted time to float value in seconds;
#X obj 20 2103 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2144 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2155 data.dict;
#X text 200 2155 dictionary container: store values by key;
#X obj 30 2182 data.fifo;
#X text 200 2182 First-In-First-Out (FIFO) queue data container;
#X obj 30 2209 data.float;
#X text 200 2209 robust float object;
#X obj 30 2236 data.int;
#X text 200 2236 robust int object;
#X obj 30 2263 data.list;
#X text 200 2263 list container;
#X obj 30 2290 data.mlist;
#X text 200 2290 multidimensional list container;
#X obj 30 2317 data.set;
#X text 200 2317 container that store unique elements;
#X obj 30 2344 data.set2list;
#X text 200 2344 converts set to list;
#X obj 30 2371 dict.contains;
#X text 200 2371 predicate to check if dict contains a keys;
#X obj 30 2398 dict.each;
#X text 200 2398 map each value in dict;
#X obj 30 2425 dict.from_list;
#X text 200 2425 creates dictionary from list;
#X obj 30 2452 dict.get;
#X text 200 2452 output dict values;
#X obj 30 2479 dict.keys;
#X text 200 2479 get list of dict keys;
#X obj 30 2506 dict.pass;
#X text 200 2506 passes specified keys in dict;
#X obj 30 2533 dict.reject;
#X text 200 2533 rejects specified keys from dict;
#X obj 30 2560 dict.size;
#X text 200 2560 dictionary size;
#X obj 30 2587 dict.to_list;
#X text 200 2587 converts dictionary to plain list;
#X obj 30 2614 dict.values;
#X text 200 2614 dictionary values as mlist;
#X obj 30 2641 mlist.flatten;
#X text 200 2641 flatten nested mlist;
#X obj 30 2668 set.contains;
#X text 200 2668 check if specified element is in set;
#X obj 30 2695 set.diff;
#X text 200 2695 difference between two sets;
#X obj 30 2722 set.equal;
#X text 200 2722 checks if two sets are equal (contains same elements);
#X obj 30 2749 set.intersect;
#X text 200 2749 output intersection of given sets;
#X obj 30 2776 set.size;
#X text 200 2776 get number of elements in set;
#X obj 30 2803 set.symdiff;
#X text 200 2803 symmetric difference between two sets;
#X obj 30 2830 set.union;
#X text 200 2830 output union of given sets;
#X obj 20 2857 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2898 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2909 dyn.comp2~;
#X text 200 2909 stereo dynamic range compressor;
#X obj 30 2936 dyn.comp~;
#X text 200 2936 mono dynamic range compressors;
#X obj 30 2963 dyn.gate2~;
#X text 200 2963 stereo signal gate;
#X obj 30 2990 dyn.gate~;
#X text 200 2990 mono signal gate;
#X obj 30 3017 dyn.limit2~;
#X text 200 3017 stereo 1176LN Peak Limiter;
#X obj 30 3044 dyn.limit~;
#X text 200 3044 mono 1176LN Peak Limiter;
#X obj 30 3071 dyn.softclip~;
#X text 200 3071 soft signal clip;
#X obj 20 3098 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3139 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3150 env.adsr~;
#X text 200 3150 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3177 env.ar~;
#X text 200 3177 Attack/Release envelope generator;
#X obj 30 3204 env.asr~;
#X text 200 3204 Attack/Sustain/Release envelope generator;
#X obj 30 3231 env.concat;
#X text 200 3231 Envelope concatenation;
#X obj 30 3258 env.follow~;
#X text 200 3258 Envelope follower with independent attack and release
times;
#X obj 30 3285 env.mix;
#X text 200 3285 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3325 env.smooth~;
#X text 200 3325 An envelope with an exponential attack and release;
#X obj 30 3352 env.tscale;
#X text 200 3352 Envelope time-scale;
#X obj 30 3379 env.tshift;
#X text 200 3379 Envelope time-shift (horizontal);
#X obj 30 3406 env.vscale;
#X text 200 3406 Envelope value-scale;
#X obj 30 3433 env2array;
#X text 200 3433 Renders envelope to specified array;
#X obj 30 3460 env2vline;
#X text 200 3460 Converts envelope to bunch of vline messages;
#X obj 30 3487 envelope;
#X text 200 3487 Envelope data type;
#X obj 30 3514 vline2env;
#X text 200 3514 Converts vline messages to env;
#X obj 20 3541 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3582 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3593 expand_env;
#X text 200 3593 Substitute enviroment variables in data stream;
#X obj 30 3620 flow.append;
#X text 200 3620 inject message into flow;
#X obj 30 3647 flow.change;
#X text 200 3647 rejects redundant input values;
#X obj 30 3674 flow.count;
#X text 200 3674 control flow event counter;
#X obj 30 3701 flow.demultiplex;
#X text 200 3701 control flow demultiplexer;
#X obj 30 3728 flow.demultiplex2~;
#X text 200 3728 audio stream stereo demultiplexer;
#X obj 30 3755 flow.demultiplex~;
#X text 200 3755 audio stream demultiplexer;
#X obj 30 3782 flow.gate;
#X text 200 3782 control flow gate. [spigot] analog;
#X obj 30 3809 flow.greater;
#X text 200 3809 numeric stream router;
#X obj 30 3836 flow.group;
#X text 200 3836 group data atoms in list of specified size;
#X obj 30 3863 flow.interval;
#X text 200 3863 measure time between flow events;
#X obj 30 3890 flow.less;
#X text 200 3890 numeric stream router \, like many [moses];
#X obj 30 3917 flow.less_eq;
#X text 200 3917 numeric stream router \, like many [moses];
#X obj 30 3944 flow.match;
#X text 200 3944 route data flow by regexp match;
#X obj 30 3971 flow.multiplex;
#X text 200 3971 control flow multiplexer;
#X obj 30 3998 flow.multiplex2~;
#X text 200 3998 audio stream stereo multiplexer;
#X obj 30 4025 flow.multiplex~;
#X text 200 4025 audio stream multiplexer;
#X obj 30 4052 flow.once;
#X text 200 4052 one message pass thru;
#X obj 30 4079 flow.pack;
#X text 200 4079 flow pack;
#X obj 30 4106 flow.pass;
#X text 200 4106 pass specified values;
#X obj 30 4133 flow.pass_if;
#X text 200 4133 pass values that accepted by predicate object;
#X obj 30 4160 flow.reject;
#X text 200 4160 reject specified values;
#X obj 30 4187 flow.reject_if;
#X text 200 4187 reject values by predicate;
#X obj 30 4214 flow.route;
#X text 200 4214 advanced message router;
#X obj 30 4241 flow.speedlim;
#X text 200 4241 control stream speed limiter;
#X obj 30 4268 flow.split;
#X text 200 4268 split data flow by external side-chain predicate;
#X obj 30 4295 flow.sync;
#X text 200 4295 bus with only hot inlets;
#X obj 30 4322 flow.sync_pack;
#X text 200 4322 flow pack with all hot inlets;
#X obj 30 4349 flow.tee~;
#X text 200 4349 separate audio and control streams;
#X obj 30 4376 replace;
#X text 200 4376 Replace atoms in data stream;
#X obj 20 4403 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4444 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4455 flt.biquad~;
#X text 200 4455 second order IIR filter.;
#X obj 30 4482 flt.bpf12~;
#X text 200 4482 Band-pass filter with 12/db per octave slope;
#X obj 30 4509 flt.bpf24~;
#X text 200 4509 Band-pass filter with 24/db per octave slope;
#X obj 30 4536 flt.c_bpf~;
#X text 200 4536 BPF coefficient calculator for biquad filter;
#X obj 30 4563 flt.c_highshelf~;
#X text 200 4563 Highshelf filter coefficient calculator for biquad;
#X obj 30 4590 flt.c_hpf~;
#X text 200 4590 HPF coefficient calculator for biquad filter;
#X obj 30 4617 flt.c_lowshelf~;
#X text 200 4617 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4644 flt.c_lpf~;
#X text 200 4644 LPF coefficient calculator for biquad filter;
#X obj 30 4671 flt.c_notch~;
#X text 200 4671 Band-reject coefficient calculator for biquad filter;
#X obj 30 4698 flt.c_peak~;
#X text 200 4698 Peaking equalizer calculator for biquad;
#X obj 30 4725 flt.dcblock2~;
#X text 200 4725 stereo DC blocker;
#X obj 30 4752 flt.dcblock~;
#X text 200 4752 mono DC blocker;
#X obj 30 4779 flt.eq10~;
#X text 200 4779 graphic 10 band equalizer;
#X obj 30 4806 flt.eq_peak_cq~;
#X text 200 4806 constant-Q second order peaking equalizer section;
#X obj 30 4833 flt.eq_peak~;
#X text 200 4833 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4888 flt.highshelf~;
#X text 200 4888 gain boost|cut above some frequency;
#X obj 30 4915 flt.hpf12~;
#X text 200 4915 High-pass filter with 12/db per octave slope;
#X obj 30 4942 flt.hpf24~;
#X text 200 4942 High-pass filter with 24/db per octave slope;
#X obj 30 4969 flt.lowshelf~;
#X text 200 4969 gain boost|cut below some frequency;
#X obj 30 4996 flt.lpf12~;
#X text 200 4996 Low-pass filter with 12/db per octave slope;
#X obj 30 5023 flt.lpf24~;
#X text 200 5023 Low-pass filter with 24/db per octave slope;
#X obj 30 5050 flt.median;
#X text 200 5050 Median control flow filter;
#X obj 30 5077 flt.moog_vcf~;
#X text 200 5077 Moog Voltage Controlled Filter;
#X obj 30 5104 flt.notch~;
#X text 200 5104 band-rejection filter;
#X obj 30 5131 flt.resonbp~;
#X text 200 5131 Simple resonant bandpass filter;
#X obj 20 5158 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5199 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5210 fx.bitdown~;
#X text 200 5210 bit downer and downsampler effect;
#X obj 30 5237 fx.chorus~;
#X text 200 5237 Chorus effect;
#X obj 30 5264 fx.distortion1~;
#X text 200 5264 distortion #1 from Guitarix effects set;
#X obj 30 5291 fx.distortion2~;
#X text 200 5291 distortion #2 from Guitarix effects set;
#X obj 30 5318 fx.distortion3~;
#X text 200 5318 simple distortion #3 from Guitarix effects set;
#X obj 30 5345 fx.distortion~;
#X text 200 5345 cubic nonlinearity distortion;
#X obj 30 5372 fx.drive~;
#X text 200 5372 Guitarix drive effect;
#X obj 30 5399 fx.drone_box~;
#X text 200 5399 mono sympathetic resonance generator;
#X obj 30 5426 fx.echo~;
#X text 200 5426 simple echo effect;
#X obj 30 5453 fx.flanger~;
#X text 200 5453 mono flanging effect;
#X obj 30 5480 fx.freeverb2~;
#X text 200 5480 freeverb2 - stereo version of freeverb;
#X obj 30 5507 fx.freeverb~;
#X text 200 5507 freeverb - common used open-source reverb;
#X obj 30 5534 fx.freqshift~;
#X text 200 5534 frequency shifter or single-sideband ring modulation;
#X obj 30 5561 fx.granulator~;
#X text 200 5561 simple input stream granulator;
#X obj 30 5588 fx.greyhole~;
#X text 200 5588 A complex echo-like effect;
#X obj 30 5615 fx.looper~;
#X text 200 5615 One track looper;
#X obj 30 5642 fx.pitchshift~;
#X text 200 5642 simple pitch shifter based on 2 delay lines;
#X obj 30 5669 fx.sdelay~;
#X text 200 5669 smooth delay with a feedback control;
#X obj 30 5696 fx.vocoder~;
#X text 200 5696 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5736 fx.wahwah~;
#X text 200 5736 digitized CryBaby wah pedal;
#X obj 30 5763 fx.zita_rev1~;
#X text 200 5763 Zita stereo reverb;
#X obj 20 5790 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5831 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5842 global.dict;
#X text 200 5842 global named dict object;
#X obj 30 5869 global.float;
#X text 200 5869 global named float object;
#X obj 30 5896 global.int;
#X text 200 5896 global named integer object;
#X obj 30 5923 global.list;
#X text 200 5923 global named list object;
#X obj 30 5950 global.mlist;
#X text 200 5950 global named mlist object;
#X obj 30 5977 global.set;
#X text 200 5977 global named set object;
#X obj 20 6004 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6045 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6056 hw.apple_smc;
#X text 200 6056 query the system management control in Apples;
#X obj 30 6083 hw.apple_sms;
#X text 200 6083 query the sudden motion sensor in Apples;
#X obj 30 6110 hw.arduino;
#X text 200 6110 Arduino device;
#X obj 30 6137 hw.cpu_temp;
#X text 200 6137 get CPU temperature;
#X obj 30 6164 hw.display;
#X text 200 6164 get/set display properties;
#X obj 30 6191 hw.kbd_light;
#X text 200 6191 Get/set keyboard light on some devices;
#X obj 20 6218 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6270 lfo.+pulse~;
#X text 200 6270 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6297 lfo.+saw~;
#X text 200 6297 Positive unit-amplitude low frequency saw wave;
#X obj 30 6324 lfo.+square~;
#X text 200 6324 Positive low frequency square wave;
#X obj 30 6351 lfo.+tri~;
#X text 200 6351 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6378 lfo.impulse~;
#X text 200 6378 Unit-amplitude low-frequency impulse train;
#X obj 30 6405 lfo.pulse~;
#X text 200 6405 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6432 lfo.saw~;
#X text 200 6432 Full-range unit-amplitude low frequency saw;
#X obj 30 6459 lfo.square~;
#X text 200 6459 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6486 lfo.tri~;
#X text 200 6486 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6513 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6554 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6565 list.^at;
#X text 200 6565 on input index(es) outputs list element(s);
#X obj 30 6592 list.^contains;
#X text 200 6592 on input atom or list checks if specified list contains
it;
#X obj 30 6619 list.^search;
#X text 200 6619 on input atom returns it index in list;
#X obj 30 6646 list.all_of;
#X text 200 6646 checks if all list atoms accepted by predicate;
#X obj 30 6673 list.any_of;
#X text 200 6673 checks if at least one list element is accepted by
predicate;
#X obj 30 6700 list.append;
#X text 200 6700 append atom or list to the end of input list;
#X obj 30 6727 list.apply_to;
#X text 200 6727 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6767 list.at;
#X text 200 6767 on input list outputs element(s) at specified index(es);
#X obj 30 6794 list.choice;
#X text 200 6794 returns random element from list;
#X obj 30 6821 list.contains;
#X text 200 6821 checks if input list contains specified atoms;
#X obj 30 6848 list.count;
#X text 200 6848 returns the number of items that equal to specified
value;
#X obj 30 6875 list.count_if;
#X text 200 6875 returns the number of items that satisfy to external
predicate.;
#X obj 30 6915 list.delta;
#X text 200 6915 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6955 list.distribution;
#X text 200 6955 list value distribution;
#X obj 30 6982 list.do;
#X text 200 6982 iterate and modify list contents via side-chain;
#X obj 30 7009 list.each;
#X text 200 7009 maps each list value via external object(s);
#X obj 30 7036 list.enumerate;
#X text 200 7036 enumerates input list;
#X obj 30 7063 list.equal;
#X text 200 7063 checks if given lists are equal;
#X obj 30 7090 list.first;
#X text 200 7090 returns first list element;
#X obj 30 7117 list.gen;
#X text 200 7117 generates list of specified length via external generator;
#X obj 30 7144 list.histogram;
#X text 200 7144 outputs distribution histogram;
#X obj 30 7171 list.insert;
#X text 200 7171 insert atom or list to the specified position of input
list;
#X obj 30 7198 list.integrator;
#X text 200 7198 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7238 list.last;
#X text 200 7238 returns last list element;
#X obj 30 7265 list.length;
#X text 200 7265 returns the number of atoms in the list;
#X obj 30 7292 list.max;
#X text 200 7292 returns largest element in the list;
#X obj 30 7319 list.mean;
#X text 200 7319 calculates average of list of floats;
#X obj 30 7346 list.min;
#X text 200 7346 returns smallest element in the list;
#X obj 30 7373 list.none_of;
#X text 200 7373 checks if none of list atoms is accepted by predicate;
#X obj 30 7400 list.normalize;
#X text 200 7400 normalizes float list values to get their sum = 1.0;
#X obj 30 7427 list.pass_if;
#X text 200 7427 leave only elements accepted by predicate;
#X obj 30 7454 list.prepend;
#X text 200 7454 prepend atom or list before input list;
#X obj 30 7481 list.product;
#X text 200 7481 calculates product of floats in list;
#X obj 30 7508 list.range;
#X text 200 7508 returns list smallest and largest value;
#X obj 30 7535 list.reduce;
#X text 200 7535 apply function of two arguments cumulatively to the
list;
#X obj 30 7562 list.remove;
#X text 200 7562 on input list remove element(s) at specified positions;
#X obj 30 7589 list.remove_if;
#X text 200 7589 remove elements by predicate;
#X obj 30 7616 list.repack;
#X text 200 7616 repack input list to specified size;
#X obj 30 7643 list.repeat;
#X text 200 7643 creates new list by repeating given list specified
times;
#X obj 30 7670 list.resample;
#X text 200 7670 resample list with specified ratio;
#X obj 30 7697 list.resize;
#X text 200 7697 changes list size;
#X obj 30 7724 list.reverse;
#X text 200 7724 reverses the order of the elements in the list;
#X obj 30 7751 list.rldecode;
#X text 200 7751 Run-length list decoder (RLE);
#X obj 30 7778 list.rlencode;
#X text 200 7778 RLE (run-length encoding) for lists;
#X obj 30 7805 list.rotate;
#X text 200 7805 rotates list;
#X obj 30 7832 list.route;
#X text 200 7832 acts like [route] but for lists;
#X obj 30 7859 list.search;
#X text 200 7859 search specified items in input list;
#X obj 30 7886 list.separate;
#X text 200 7886 sends list elements one by one separately;
#X obj 30 7913 list.seq;
#X text 200 7913 numeric sequence list generator;
#X obj 30 7940 list.set;
#X text 200 7940 on input list set value at specified position;
#X obj 30 7967 list.shift;
#X text 200 7967 shifts the contents of the list with linear interpolation;
#X obj 30 7994 list.shuffle;
#X text 200 7994 randomly rearranges elements in list;
#X obj 30 8021 list.slice;
#X text 200 8021 extract sublist;
#X obj 30 8048 list.sort;
#X text 200 8048 sorts list values by ascending order;
#X obj 30 8075 list.sort_with;
#X text 200 8075 sort list with user defined side-chain;
#X obj 30 8102 list.split;
#X text 200 8102 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8142 list.stretch;
#X text 200 8142 stretches list - changes its size with linear interpolation;
#X obj 30 8169 list.sum;
#X text 200 8169 calculates sum of floats in list;
#X obj 30 8196 list.unique;
#X text 200 8196 removes duplicates from input list;
#X obj 30 8223 list.unpack;
#X text 200 8223 unpack list elements to separate outlets;
#X obj 30 8250 list.unzip;
#X text 200 8250 splits list to N lists \, each to separate output;
#X obj 30 8277 list.walk;
#X text 200 8277 Walks thru the list;
#X obj 30 8304 list.zip;
#X text 200 8304 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8359 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8400 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8411 live.capture~;
#X text 200 8411 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8451 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8492 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8503 local.dict;
#X text 200 8503 local named dict object;
#X obj 30 8530 local.float;
#X text 200 8530 canvas-scoped named float variable;
#X obj 30 8557 local.int;
#X text 200 8557 canvas-scoped named integer variable;
#X obj 30 8584 local.list;
#X text 200 8584 local named list object;
#X obj 30 8611 local.mlist;
#X text 200 8611 local named mlist object;
#X obj 30 8638 local.set;
#X text 200 8638 local named set object;
#X obj 20 8665 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8706 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8717 math.abs;
#X text 200 8717 absolute value function;
#X obj 30 8744 math.abs~;
#X text 200 8744 absolute value function for signals;
#X obj 30 8771 math.acos;
#X text 200 8771 arc cosine function;
#X obj 30 8798 math.acosh;
#X text 200 8798 inverse hyperbolic cosine function;
#X obj 30 8825 math.acos~;
#X text 200 8825 arc cosine function for signals;
#X obj 30 8852 math.and;
#X text 200 8852 operation AND for multiple arguments;
#X obj 30 8879 math.approx;
#X text 200 8879 check if input value approximately equal to pattern;
#X obj 30 8906 math.asin;
#X text 200 8906 arc sine function;
#X obj 30 8933 math.asinh;
#X text 200 8933 inverse hyperbolic sine function;
#X obj 30 8960 math.atan;
#X text 200 8960 arc tangent function;
#X obj 30 8987 math.atanh;
#X text 200 8987 inverse hyperbolic tangent function;
#X obj 30 9014 math.cbrt;
#X text 200 9014 cube root function;
#X obj 30 9041 math.cdiv~;
#X text 200 9041 division of complex signals;
#X obj 30 9068 math.ceil;
#X text 200 9068 round to smallest integral value not less than input
value;
#X obj 30 9095 math.cmul~;
#X text 200 9095 multiplication of complex signals;
#X obj 30 9122 math.cos;
#X text 200 9122 cosine function;
#X obj 30 9149 math.cosh;
#X text 200 9149 hyperbolic cosine function;
#X obj 30 9176 math.div;
#X text 200 9176 division (on lists too);
#X obj 30 9203 math.e;
#X text 200 9203 mathematical constant \, base of the natural logarithm;
#X obj 30 9230 math.exp;
#X text 200 9230 exponential functions;
#X obj 30 9257 math.exp2;
#X text 200 9257 exponential functions;
#X obj 30 9284 math.expr;
#X text 200 9284 dynamic [expr];
#X obj 30 9311 math.floor;
#X text 200 9311 round to largest integral value not greater than x;
#X obj 30 9338 math.gcd;
#X text 200 9338 calculate greatest common divisor;
#X obj 30 9365 math.inf;
#X text 200 9365 infinity value that cannot be represented accurately;
#X obj 30 9392 math.lcm;
#X text 200 9392 calculate least common multiple;
#X obj 30 9419 math.log;
#X text 200 9419 logarithm functions;
#X obj 30 9446 math.log10;
#X text 200 9446 logarithm functions;
#X obj 30 9473 math.log2;
#X text 200 9473 logarithm functions;
#X obj 30 9500 math.mul;
#X text 200 9500 multiplication (on lists too);
#X obj 30 9527 math.nan;
#X text 200 9527 Not a Number \, unrepresentable value;
#X obj 30 9554 math.neg;
#X text 200 9554 negate function;
#X obj 30 9581 math.or;
#X text 200 9581 operation OR for multiple arguments;
#X obj 30 9608 math.pi;
#X text 200 9608 mathematical constant;
#X obj 30 9635 math.pi~;
#X text 200 9635 mathematical constant;
#X obj 30 9662 math.polyeval;
#X text 200 9662 evaluates the polynomial described by the coefficients
list;
#X obj 30 9689 math.reciprocal;
#X text 200 9689 calculate reciprocal number;
#X obj 30 9716 math.round;
#X text 200 9716 round to integral value \, regardless of rounding
direction;
#X obj 30 9743 math.round~;
#X text 200 9743 signal round;
#X obj 30 9770 math.sign;
#X text 200 9770 sign function;
#X obj 30 9797 math.sin;
#X text 200 9797 sine function;
#X obj 30 9824 math.sinh;
#X text 200 9824 hyperbolic sine function;
#X obj 30 9851 math.sqrt;
#X text 200 9851 square root function;
#X obj 30 9878 math.squared;
#X text 200 9878 value square;
#X obj 30 9905 math.sync_add;
#X text 200 9905 sync addition;
#X obj 30 9932 math.sync_and;
#X text 200 9932 sync logical AND operation;
#X obj 30 9959 math.sync_div;
#X text 200 9959 sync division;
#X obj 30 9986 math.sync_eq;
#X text 200 9986 sync equal numbers check;
#X obj 30 10013 math.sync_ge;
#X text 200 10013 sync greater equal numbers compare;
#X obj 30 10040 math.sync_gt;
#X text 200 10040 sync greater then numbers compare;
#X obj 30 10067 math.sync_le;
#X text 200 10067 sync less equal numbers compare;
#X obj 30 10094 math.sync_lt;
#X text 200 10094 sync less then numbers compare;
#X obj 30 10121 math.sync_mod;
#X text 200 10121 sync remainder of modulo division (float or integer);
#X obj 30 10148 math.sync_mul;
#X text 200 10148 sync multiplication;
#X obj 30 10175 math.sync_ne;
#X text 200 10175 sync numbers for not equality;
#X obj 30 10202 math.sync_or;
#X text 200 10202 sync logical OR operation;
#X obj 30 10229 math.sync_sub;
#X text 200 10229 sync subtraction;
#X obj 30 10256 math.sync_xor;
#X text 200 10256 sync logical XOR operation;
#X obj 30 10283 math.tan;
#X text 200 10283 tangent function;
#X obj 30 10310 math.tanh;
#X text 200 10310 hyperbolic tangent function;
#X obj 30 10337 math.trunc;
#X text 200 10337 truncate to integer value;
#X obj 20 10364 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10405 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10416 midi.ctl2str;
#X text 200 10416 convert Standard MIDI Controllers number to name;
#X obj 30 10443 midi.event2ctl;
#X text 200 10443 convert MidiEvent message to controller channel/value
pair;
#X obj 30 10470 midi.event2note;
#X text 200 10470 convert MidiEvent message to midi note/velocity pair;
#X obj 30 10497 midi.event2prg;
#X text 200 10497 convert MidiEvent message to midi program change
value;
#X obj 30 10524 midi.file;
#X text 200 10524 standard midi file SMF reader and writer;
#X obj 30 10551 midi.key2str;
#X text 200 10551 convert key number to SPN name according to tonality;
#X obj 30 10578 midi.prg2str;
#X text 200 10578 convert GM Instrument number to name (string or symbol);
#X obj 30 10605 midi.track;
#X text 200 10605 extract track from MidiFile;
#X obj 20 10632 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 10673 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10684 click~;
#X text 200 10684 Output single impulse on bang;
#X obj 30 10711 fluid~;
#X text 200 10711 FluidSynth SoundFont 2 player;
#X obj 30 10738 modplug~;
#X text 200 10738 MOD file player (using libmodplug);
#X obj 30 10765 speech.flite;
#X text 200 10765 render speech to array;
#X obj 20 10792 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 10833 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10844 msg;
#X text 200 10844 message constructor;
#X obj 30 10871 msg.after;
#X text 200 10871 send specified message after incoming message;
#X obj 30 10898 msg.onload;
#X text 200 10898 send message when patch loads;
#X obj 20 10925 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 10966 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10977 net.host2ip;
#X text 200 10977 returns IP address by DNS name;
#X obj 20 11004 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 11045 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11056 noise.crackle~;
#X text 200 11056 sparse noise generator;
#X obj 30 11083 noise.lfreq0~;
#X text 200 11083 sampled/held noise (piecewise constant);
#X obj 30 11110 noise.lfreq~;
#X text 200 11110 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 11137 noise.pink~;
#X text 200 11137 Pink noise generator;
#X obj 30 11164 noise.white~;
#X text 200 11164 White noise generator;
#X obj 20 11191 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 11232 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11243 osc.blit~;
#X text 200 11243 Bandlimited impulse train oscillator;
#X obj 30 11270 osc.impulse~;
#X text 200 11270 Bandlimited impulse train generator;
#X obj 30 11297 osc.pulse~;
#X text 200 11297 Bandlimited pulse train oscillator;
#X obj 30 11324 osc.saw4~;
#X text 200 11324 Bandlimited sawtooth wave;
#X obj 30 11351 osc.saw~;
#X text 200 11351 Alias-free sawtooth wave;
#X obj 30 11378 osc.sinfb~;
#X text 200 11378 Sine oscilator with feedback;
#X obj 30 11405 osc.sin~;
#X text 200 11405 Sine wave oscillator;
#X obj 30 11432 osc.square~;
#X text 200 11432 Bandlimited square wave oscillator;
#X obj 30 11459 osc.tri~;
#X text 200 11459 Bandlimited triangle wave oscillator;
#X obj 20 11486 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 11527 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11538 canvas.current;
#X text 200 11538 verbose information about current canvas;
#X obj 30 11565 canvas.dir;
#X text 200 11565 current canvas directory;
#X obj 30 11592 canvas.name;
#X text 200 11592 current canvas name;
#X obj 30 11619 canvas.path;
#X text 200 11619 current canvas fullpath;
#X obj 30 11646 canvas.top;
#X text 200 11646 verbose information about top-level canvas;
#X obj 30 11673 patch.args;
#X text 200 11673 Get patch or subpatch arguments;
#X obj 20 11700 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 11741 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11752 path.basename;
#X text 200 11752 outputs filename portion of pathname;
#X obj 30 11779 path.dirname;
#X text 200 11779 outputs directory portion of pathname;
#X obj 30 11806 path.exists;
#X text 200 11806 checks if given path exists;
#X obj 30 11833 path.is_dir;
#X text 200 11833 check if path is directory;
#X obj 30 11860 path.lsdir;
#X text 200 11860 list directory contents;
#X obj 20 11887 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 11928 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11939 is_any;
#X text 200 11939 checks if input data has *any* type;
#X obj 30 11966 is_bang;
#X text 200 11966 checks if input data has *bang* type;
#X obj 30 11993 is_data;
#X text 200 11993 checks if input data has *data* type;
#X obj 30 12020 is_dict;
#X text 200 12020 checks if input data has *dict* type;
#X obj 30 12047 is_even;
#X text 200 12047 checks if input number is even;
#X obj 30 12074 is_file;
#X text 200 12074 checks if file exists and accessible;
#X obj 30 12101 is_float;
#X text 200 12101 checks if input data has *float* type;
#X obj 30 12128 is_list;
#X text 200 12128 checks if input data has *list* type;
#X obj 30 12155 is_odd;
#X text 200 12155 checks if input number is odd;
#X obj 30 12182 is_pointer;
#X text 200 12182 checks if input data has *pointer* type;
#X obj 30 12209 is_symbol;
#X text 200 12209 checks if input data has *symbol* type;
#X obj 20 12236 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 12277 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12288 preset.float;
#X text 200 12288 load/store float preset;
#X obj 30 12315 preset.list;
#X text 200 12315 load/store symbol preset;
#X obj 30 12342 preset.storage;
#X text 200 12342 preset storage control;
#X obj 30 12369 preset.symbol;
#X text 200 12369 load/store symbol preset;
#X obj 20 12396 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12437 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12448 patch.props;
#X text 200 12448 patch properties manager;
#X obj 30 12475 prop;
#X text 200 12475 get/set named property value for subpatch or abstraction;
#X obj 30 12502 prop.declare;
#X text 200 12502 declare named property for subpatch or abstraction;
#X obj 30 12529 prop.get;
#X text 200 12529 Property extractor;
#X obj 30 12556 prop.get~;
#X text 200 12556 Property extractor from sound stream;
#X obj 30 12583 prop.set;
#X text 200 12583 Property injector;
#X obj 20 12610 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 12651 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12662 proto.firmata;
#X text 200 12662 Firmata Arduino protocol support;
#X obj 30 12689 proto.sp.alpaca;
#X text 200 12689 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 12716 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 12757 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12768 random.discrete;
#X text 200 12768 random weighted integers on interval [0 \, n);
#X obj 30 12795 random.float;
#X text 200 12795 random float generator in specified range;
#X obj 30 12822 random.gauss;
#X text 200 12822 gaussian random distribution;
#X obj 30 12849 random.int;
#X text 200 12849 Random integer generator in specified range;
#X obj 30 12876 random.linear;
#X text 200 12876 random linear distribution;
#X obj 30 12903 random.pw_const;
#X text 200 12903 piecewise constant random distribution;
#X obj 30 12930 random.pw_lin;
#X text 200 12930 piecewise linear random distribution;
#X obj 20 12957 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 12998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13009 snd.file;
#X text 200 13009 Sound file loader on steroids;
#X obj 20 13036 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 13077 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13088 hoa.2d.decoder~;
#X text 200 13088 hoa 2d decoder;
#X obj 30 13115 hoa.2d.encoder~;
#X text 200 13115 hoa 2d encoder;
#X obj 30 13142 hoa.2d.map~;
#X text 200 13142 a 2d ambisonic multisource spatializer;
#X obj 30 13169 hoa.2d.optim~;
#X text 200 13169 a 2D ambisonic optimization tool;
#X obj 30 13196 hoa.2d.projector~;
#X text 200 13196 a plane waves decomposer from circular harmonics
domain;
#X obj 30 13223 hoa.2d.recomposer~;
#X text 200 13223 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 13263 hoa.2d.rotate~;
#X text 200 13263 a 2D ambisonic sound field rotation;
#X obj 30 13290 hoa.2d.wider~;
#X text 200 13290 a 2d fractional ambisonic order simulator;
#X obj 30 13317 hoa.@process;
#X text 200 13317 process properties manager for hoa.process~;
#X obj 30 13344 hoa.in;
#X text 200 13344 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13371 hoa.in~;
#X text 200 13371 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13398 hoa.out;
#X text 200 13398 message outlet for a patcher loaded by hoa.process~;
#X obj 30 13425 hoa.out~;
#X text 200 13425 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13452 hoa.process~;
#X text 200 13452 patcher loader for multichannel processing;
#X obj 30 13482 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 13479 a 2d ambisonic harmonic scope;
#X obj 30 13504 pan.cos~;
#X text 200 13504 two channel equal power sine/cosine panner;
#X obj 30 13531 pan.linsig~;
#X text 200 13531 two channel linear panner with signal control;
#X obj 30 13558 pan.lin~;
#X text 200 13558 two channel linear panner;
#X obj 30 13585 pan.spread~;
#X text 200 13585 spreads input channels across the stereo field;
#X obj 30 13612 pan.sqrt~;
#X text 200 13612 two channel equal power square root panner;
#X obj 30 13639 spat.pan4~;
#X text 200 13639 GMEM SPAT: 4-outputs spatializer;
#X obj 30 13666 spat.pan8~;
#X text 200 13666 GMEM SPAT: 8-outputs spatializer;
#X obj 20 13693 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 13734 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13745 string;
#X text 200 13745 string constructor;
#X obj 30 13772 string.contains;
#X text 200 13772 checks if given string contains specified substring;
#X obj 30 13799 string.ends_with;
#X text 200 13799 checks if given string ends with specified suffix;
#X obj 30 13826 string.equal;
#X text 200 13826 check strings for equality;
#X obj 30 13853 string.format;
#X text 200 13853 formats string like printf.;
#X obj 30 13880 string.join;
#X text 200 13880 joins (concatenates) strings with separator;
#X obj 30 13907 string.length;
#X text 200 13907 number of characters in string (unicode supported);
#X obj 30 13934 string.match;
#X text 200 13934 check if string match regular expression;
#X obj 30 13961 string.remove;
#X text 200 13961 remove substring from input string;
#X obj 30 13988 string.replace;
#X text 200 13988 replace from one substring to another in input string;
#X obj 30 14015 string.split;
#X text 200 14015 split string by separator;
#X obj 30 14042 string.starts_with;
#X text 200 14042 checks if given string starts with specified prefix;
#X obj 30 14069 string.substr;
#X text 200 14069 extract substring from input string;
#X obj 30 14096 string2symbol;
#X text 200 14096 converts string to symbol;
#X obj 20 14123 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 14164 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14175 symbol.equal;
#X text 200 14175 check symbols for equality;
#X obj 30 14202 symbol.length;
#X text 200 14202 number of characters in symbol (unicode supported);
#X obj 30 14229 symbol.num_compare;
#X text 200 14229 numeric symbol compare;
#X obj 20 14256 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14297 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14308 synth.bee3~;
#X text 200 14308 Hammond-oid organ FM synthesis instrument;
#X obj 30 14335 synth.birds~;
#X text 200 14335 bird singing generator;
#X obj 30 14362 synth.church_bell~;
#X text 200 14362 generic church bell modal model;
#X obj 30 14389 synth.dubdub~;
#X text 200 14389 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 14429 synth.eguitar~;
#X text 200 14429 simple electric guitar model with steel strings;
#X obj 30 14456 synth.fgrain~;
#X text 200 14456 file granulator from STK;
#X obj 30 14483 synth.ks~;
#X text 200 14483 Karplus-Strong string;
#X obj 30 14510 synth.marimba~;
#X text 200 14510 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 14550 synth.rhodey~;
#X text 200 14550 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 14577 synth.risset_arp~;
#X text 200 14577 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 14604 synth.risset_tone~;
#X text 200 14604 Jean Claude Risset's endless glissando;
#X obj 30 14631 synth.shakers~;
#X text 200 14631 various percussion sounds from STK library;
#X obj 30 14658 synth.wurley~;
#X text 200 14658 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 14685 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 14726 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14737 system.colorpanel;
#X text 200 14737 System color panel dialog popup;
#X obj 30 14764 system.cursor;
#X text 200 14764 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 14791 system.getenv;
#X text 200 14791 Get system environment variables;
#X obj 30 14818 system.hostname;
#X text 200 14818 outputs system hostname;
#X obj 30 14845 system.memsize;
#X text 200 14845 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 14885 system.memused;
#X text 200 14885 returns the process physical memory use - current
and peak;
#X obj 30 14912 system.screen_size;
#X text 200 14912 returns current screen size in pixels;
#X obj 30 14939 system.shell;
#X text 200 14939 run external command in separate process;
#X obj 20 14966 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 15007 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15018 tl.bang;
#X text 200 15018 Timeline bang (with possible delay);
#X obj 30 15048 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 15045 Timeline section;
#X obj 30 15070 tl.timeline;
#X text 200 15070 Timeline - event scheduler;
#X obj 30 15097 tl.toggle;
#X text 200 15097 Timeline bang;
#X obj 30 15124 tl.transport;
#X text 200 15124 Timeline transport control;
#X obj 20 15151 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 15192 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15206 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 15203 array view with cursor and selection;
#X obj 30 15231 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 15228 A bang... that's all;
#X obj 30 15256 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 15253 colorchooser widget;
#X obj 30 15281 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 15278 Display GUI object;
#X obj 30 15306 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15303 GUI for turning DSP on/off;
#X obj 30 15331 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15328 envelope editor widget;
#X obj 30 15356 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15353 UI stereo gain control;
#X obj 30 15381 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15378 UI gain control;
#X obj 30 15406 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 15403 simple icon with button capabilities;
#X obj 30 15431 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 15428 value increment/decrement;
#X obj 30 15456 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 15453 keyboard widget;
#X obj 30 15481 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 15478 knob widget;
#X obj 30 15506 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 15503 simple label widget;
#X obj 30 15531 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 15528 Hyperlink widget;
#X obj 30 15556 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 15553 The matrix of toggles has you.;
#X obj 30 15581 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 15578 Dropdown menu;
#X obj 30 15606 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 15603 Shows peak and rms signal level;
#X obj 30 15631 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 15628 filter mouse events from ui objects;
#X obj 30 15656 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 15653 routes mouse events from ui objects;
#X obj 30 15681 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 15678 counterpart of the vanilla [nbx];
#X obj 30 15706 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 15703 counterpart of the vanilla [nbx] for signal;
#X obj 30 15731 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 15728 2D slider in polar coordinates;
#X obj 30 15756 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 15753 Preset manager;
#X obj 30 15781 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 15778 counterpart of the vanilla radio toggle;
#X obj 30 15806 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 15803 range slider;
#X obj 30 15831 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 15828 Scope GUI object;
#X obj 30 15856 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 15853 counterpart of the vanilla slider;
#X obj 30 15881 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 15878 2D slider widget;
#X obj 30 15906 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 15903 Multiple slider widget;
#X obj 30 15931 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 15928 Spectroscope GUI object;
#X obj 30 15956 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 15953 displays a list of text buttons or text toggles;
#X obj 30 15981 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 15978 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 16003 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 16003 version: v0.8.0 \, license: GPL3;
#X obj 20 16024 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;