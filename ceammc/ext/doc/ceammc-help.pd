#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.tramp~;
#X text 200 965 triggered ramp generator for array;
#X obj 30 992 array.variance;
#X text 200 992 calculates variance of array values;
#X obj 30 1019 array.vplay;
#X text 200 1019 simple array player for using with vline~;
#X obj 30 1046 array.window;
#X text 200 1046 fill array with window;
#X obj 30 1073 plot.geomspace~;
#X text 200 1073 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1113 plot.hist~;
#X text 200 1113 calculate and output signal histogram;
#X obj 30 1140 plot.linspace~;
#X text 200 1140 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1180 plot.logspace~;
#X text 200 1180 outputs numbers spaced evenly on a log scale;
#X obj 30 1207 plot.response~;
#X text 200 1207 output amp/phase freq response to impulse;
#X obj 20 1234 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1286 ceammc.search;
#X text 200 1286 ceammc library search object;
#X obj 30 1316 ui.link @title [function] @url function-help.pd;
#X text 200 1313 named function;
#X obj 30 1338 function.call;
#X text 200 1338 call named function;
#X obj 30 1365 gain~;
#X text 200 1365 multislot signal gain;
#X obj 30 1392 logger;
#X text 200 1392 advanced data logger;
#X obj 30 1419 matrix~;
#X text 200 1419 signal routing matrix;
#X obj 30 1446 metro.choice;
#X text 200 1446 metro with random choice from timeset;
#X obj 30 1473 metro.pattern;
#X text 200 1473 metro with rhythmic patterns;
#X obj 30 1500 metro.random;
#X text 200 1500 metro random bang with specified range;
#X obj 30 1527 metro.seq;
#X text 200 1527 metro sequencer;
#X obj 30 1554 metro.wchoice;
#X text 200 1554 metro with weighted random choice from timeset;
#X obj 30 1581 mix~;
#X text 200 1581 multislot signal mixer;
#X obj 30 1608 nsig~;
#X text 200 1608 Mulitchannel converter from control to audio rate;
#X obj 30 1635 obj.props;
#X text 200 1635 property extractor;
#X obj 30 1662 radio;
#X text 200 1662 float index to outlet values as radio switch;
#X obj 30 1689 spring;
#X text 200 1689 float value "spring";
#X obj 30 1716 sync;
#X text 200 1716 value synchronization;
#X obj 30 1743 window;
#X text 200 1743 returns window value by given window position;
#X obj 30 1770 xdac~;
#X text 200 1770 dac~ with channel ranges;
#X obj 30 1797 xfade2~;
#X text 200 1797 multi stereo-signal crossfade;
#X obj 30 1824 xfade~;
#X text 200 1824 multi signal crossfade;
#X obj 30 1851 z~;
#X text 200 1851 sample delay;
#X obj 20 1878 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1919 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1930 chaos.gbman0;
#X text 200 1930 Gingerbreadman map chaotic generator;
#X obj 30 1957 chaos.gbman0~;
#X text 200 1957 Gingerbreadman map chaotic generator;
#X obj 30 1984 chaos.jong;
#X text 200 1984 Peter de Jong attractor;
#X obj 30 2011 chaos.logistic;
#X text 200 2011 Logistic map chaotic generator;
#X obj 30 2038 chaos.std0;
#X text 200 2038 Standard map chaotic generator;
#X obj 30 2065 chaos.std0~;
#X text 200 2065 Standard map chaotic generator;
#X obj 20 2092 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2133 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2144 array.p2s;
#X text 200 2144 convert array phase [0\..1] to sample position;
#X obj 30 2171 array.s2p;
#X text 200 2171 convert sample position to phase range [0\..1];
#X obj 30 2198 conv.amp2dbfs;
#X text 200 2198 convert from amplitude to decibel full scale;
#X obj 30 2225 conv.amp2dbfs~;
#X text 200 2225 convert from amplitude to decibel full scale;
#X obj 30 2252 conv.bar2ms;
#X text 200 2252 calculate bar and beat duration;
#X obj 30 2279 conv.bits2bang;
#X text 200 2279 convert list of bits to bang events;
#X obj 30 2306 conv.bits2int;
#X text 200 2306 convert list of bits to integer;
#X obj 30 2333 conv.bits2note;
#X text 200 2333 convert list of bits to note events;
#X obj 30 2360 conv.bits2pos;
#X text 200 2360 convert list of bits to list of bit position;
#X obj 30 2387 conv.bpm2hz;
#X text 200 2387 converts BPM to frequency in hertz;
#X obj 30 2414 conv.bpm2ms;
#X text 200 2414 convert frequency in BPM to period in milliseconds;
#X obj 30 2441 conv.bpm2sec;
#X text 200 2441 convert frequency in BPM to period in seconds;
#X obj 30 2468 conv.car2pol;
#X text 200 2468 convert cartesian coords to polar;
#X obj 30 2495 conv.cc2amp;
#X text 200 2495 convert from MIDI Control Change range;
#X obj 30 2522 conv.char2morse;
#X text 200 2522 convert character to morse code;
#X obj 30 2549 conv.color2rgba;
#X text 200 2549 convert named or hex color to separate RGBA values;
#X obj 30 2576 conv.dbfs2amp;
#X text 200 2576 convert decibel full scale to amplitude;
#X obj 30 2603 conv.dbfs2amp~;
#X text 200 2603 convert decibel full scale to amplitude;
#X obj 30 2630 conv.degree2key;
#X text 200 2630 convert scale degree to key;
#X obj 30 2657 conv.edge2bang;
#X text 200 2657 edge detector for numeric stream;
#X obj 30 2684 conv.hex2int;
#X text 200 2684 hex symbol to int value;
#X obj 30 2711 conv.int2bits;
#X text 200 2711 convert integer to list of bits;
#X obj 30 2738 conv.lin2curve;
#X text 200 2738 map linear to exponential range with 0 allowed.;
#X obj 30 2765 conv.lin2exp;
#X text 200 2765 maps linear range to exponential range;
#X obj 30 2792 conv.lin2lin;
#X text 200 2792 convert from one linear range to another;
#X obj 30 2819 conv.lin2lin~;
#X text 200 2819 convert from one linear range to another for signals;
#X obj 30 2846 conv.list2props;
#X text 200 2846 converts list to series of property messages;
#X obj 30 2873 conv.midi2freq;
#X text 200 2873 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2913 conv.ms2bpm;
#X text 200 2913 convert period in milliseconds to frequency in BPM;
#X obj 30 2940 conv.ms2samp;
#X text 200 2940 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2980 conv.ms2samp~;
#X text 200 2980 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3020 conv.ms2str;
#X text 200 3020 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3060 conv.note2guido;
#X text 200 3060 convert MIDI note to Guido notation;
#X obj 30 3087 conv.phase2rad;
#X text 200 3087 convert phase value [0-1] to radians [0-2π];
#X obj 30 3114 conv.phase2rad~;
#X text 200 3114 convert phase value [0-1] to radians [0-2π];
#X obj 30 3141 conv.pitch2midi;
#X text 200 3141 converts symbol pitch name to MIDI note number;
#X obj 30 3168 conv.pol2car;
#X text 200 3168 convert from polar coordinates to cartesian;
#X obj 30 3195 conv.rad2phase;
#X text 200 3195 convert radians value to phase;
#X obj 30 3222 conv.rad2phase~;
#X text 200 3222 convert radians value to phase;
#X obj 30 3249 conv.rgb2hex;
#X text 200 3249 convert separate RGB values to hex color;
#X obj 30 3276 conv.samp2ms;
#X text 200 3276 convert samples to time according to samplerate;
#X obj 30 3303 conv.samp2ms~;
#X text 200 3303 convert samples to milliseconds according to samplerate;
#X obj 30 3330 conv.samp2sec;
#X text 200 3330 convert samples to time according to samplerate;
#X obj 30 3357 conv.sec2bpm;
#X text 200 3357 convert period in seconds to frequency in BPM;
#X obj 30 3384 conv.sec2samp;
#X text 200 3384 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3424 conv.sec2str;
#X text 200 3424 converts float time in seconds to formated symbol
(or string);
#X obj 30 3451 conv.semi2ratio;
#X text 200 3451 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3478 conv.sig2float~;
#X text 200 3478 convert signal to floats;
#X obj 30 3505 conv.str2sec;
#X text 200 3505 converts formatted time to float value in seconds;
#X obj 30 3532 music.dur2time;
#X text 200 3532 convert duration list to time;
#X obj 30 3559 music.voice2midi;
#X text 200 3559 convert voice music list of midi pitches;
#X obj 20 3586 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3627 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3638 data.bimap;
#X text 200 3638 bidirectional map container;
#X obj 30 3665 data.color;
#X text 200 3665 Color datatype;
#X obj 30 3692 data.copy;
#X text 200 3692 make copy for any data types: MList \, Set etc...;
#X obj 30 3719 data.dict;
#X text 200 3719 dictionary container: store values by key;
#X obj 30 3746 data.fifo;
#X text 200 3746 First-In-First-Out (FIFO) queue data container;
#X obj 30 3773 data.float;
#X text 200 3773 robust float object;
#X obj 30 3800 data.int;
#X text 200 3800 robust int object;
#X obj 30 3827 data.list;
#X text 200 3827 list container;
#X obj 30 3854 data.mlist;
#X text 200 3854 multidimensional list container;
#X obj 30 3881 data.set;
#X text 200 3881 container that store unique elements;
#X obj 30 3908 data.set2list;
#X text 200 3908 converts set to list;
#X obj 30 3935 dict.contains;
#X text 200 3935 predicate to check if dict contains a keys;
#X obj 30 3962 dict.each;
#X text 200 3962 map each value in dict;
#X obj 30 3989 dict.from_list;
#X text 200 3989 creates dictionary from list;
#X obj 30 4016 dict.get;
#X text 200 4016 output dict values;
#X obj 30 4043 dict.keys;
#X text 200 4043 get list of dict keys;
#X obj 30 4070 dict.pass;
#X text 200 4070 passes specified keys in dict;
#X obj 30 4097 dict.reject;
#X text 200 4097 rejects specified keys from dict;
#X obj 30 4124 dict.size;
#X text 200 4124 dictionary size;
#X obj 30 4151 dict.to_list;
#X text 200 4151 converts dictionary to plain list;
#X obj 30 4178 dict.values;
#X text 200 4178 dictionary values as mlist;
#X obj 30 4205 mlist.flatten;
#X text 200 4205 flatten nested mlist;
#X obj 30 4232 rtree.to_list;
#X text 200 4232 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4259 set.contains;
#X text 200 4259 check if specified element is in set;
#X obj 30 4286 set.diff;
#X text 200 4286 difference between two sets;
#X obj 30 4313 set.equal;
#X text 200 4313 checks if two sets are equal (contains same elements);
#X obj 30 4340 set.intersect;
#X text 200 4340 output intersection of given sets;
#X obj 30 4367 set.size;
#X text 200 4367 get number of elements in set;
#X obj 30 4394 set.symdiff;
#X text 200 4394 symmetric difference between two sets;
#X obj 30 4421 set.union;
#X text 200 4421 output union of given sets;
#X obj 20 4448 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4489 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4500 dyn.comp2~;
#X text 200 4500 stereo dynamic range compressor;
#X obj 30 4527 dyn.comp_peak2~;
#X text 200 4527 stereo peak feed forward compressor with channel linking;
#X obj 30 4554 dyn.comp_peak~;
#X text 200 4554 mono dynamic range peak feed forward compressor;
#X obj 30 4581 dyn.comp_up2~;
#X text 200 4581 stereo upward compressor with channel linking;
#X obj 30 4608 dyn.comp_up~;
#X text 200 4608 mono upward compressor;
#X obj 30 4635 dyn.comp~;
#X text 200 4635 mono dynamic range compressors;
#X obj 30 4662 dyn.expand2~;
#X text 200 4662 stereo dynamic range expander with channel linking;
#X obj 30 4689 dyn.expand~;
#X text 200 4689 mono dynamic range expander;
#X obj 30 4716 dyn.gate2~;
#X text 200 4716 stereo signal gate;
#X obj 30 4743 dyn.gate~;
#X text 200 4743 mono signal gate;
#X obj 30 4770 dyn.limit2~;
#X text 200 4770 stereo 1176LN Peak Limiter;
#X obj 30 4797 dyn.limit~;
#X text 200 4797 mono 1176LN Peak Limiter;
#X obj 30 4824 dyn.softclip~;
#X text 200 4824 soft signal clip;
#X obj 20 4851 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4892 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4903 env.adsr~;
#X text 200 4903 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4930 env.ar~;
#X text 200 4930 Attack/Release envelope generator;
#X obj 30 4957 env.asr~;
#X text 200 4957 Attack/Sustain/Release envelope generator;
#X obj 30 4984 env.concat;
#X text 200 4984 Envelope concatenation;
#X obj 30 5011 env.follow~;
#X text 200 5011 Envelope follower with independent attack and release
times;
#X obj 30 5038 env.mix;
#X text 200 5038 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5078 env.smooth~;
#X text 200 5078 An envelope with an exponential attack and release;
#X obj 30 5105 env.tscale;
#X text 200 5105 Envelope time-scale;
#X obj 30 5132 env.tshift;
#X text 200 5132 Envelope time-shift (horizontal);
#X obj 30 5159 env.vscale;
#X text 200 5159 Envelope value-scale;
#X obj 30 5186 env2array;
#X text 200 5186 Renders envelope to specified array;
#X obj 30 5213 env2vline;
#X text 200 5213 Converts envelope to bunch of vline messages;
#X obj 30 5240 envelope;
#X text 200 5240 Envelope data type;
#X obj 30 5267 vline2env;
#X text 200 5267 Converts vline messages to env;
#X obj 20 5294 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5335 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5346 expand_env;
#X text 200 5346 Substitute environment variables in data stream;
#X obj 30 5373 flow.append;
#X text 200 5373 append message to flow stream;
#X obj 30 5400 flow.change;
#X text 200 5400 rejects redundant input values;
#X obj 30 5427 flow.count;
#X text 200 5427 control flow event counter;
#X obj 30 5454 flow.delay;
#X text 200 5454 enhanced version on vanilla delay object;
#X obj 30 5481 flow.demultiplex;
#X text 200 5481 control flow demultiplexer;
#X obj 30 5508 flow.demultiplex2~;
#X text 200 5508 audio stream stereo demultiplexer;
#X obj 30 5535 flow.demultiplex~;
#X text 200 5535 audio stream demultiplexer;
#X obj 30 5562 flow.dollar;
#X text 200 5562 data flow dollar converter;
#X obj 30 5589 flow.dup;
#X text 200 5589 message duplicator;
#X obj 30 5616 flow.float;
#X text 200 5616 pass floats;
#X obj 30 5643 flow.gate;
#X text 200 5643 control flow gate. [spigot] analog;
#X obj 30 5670 flow.greater;
#X text 200 5670 numeric stream router;
#X obj 30 5697 flow.greater_eq;
#X text 200 5697 numeric stream router;
#X obj 30 5724 flow.group;
#X text 200 5724 group input atoms in list of specified size;
#X obj 30 5751 flow.interval;
#X text 200 5751 measure time between flow events;
#X obj 30 5778 flow.less;
#X text 200 5778 numeric stream router \, like many [moses];
#X obj 30 5805 flow.less_eq;
#X text 200 5805 numeric stream router \, like many [moses];
#X obj 30 5832 flow.list2many;
#X text 200 5832 routes list element with message selectors;
#X obj 30 5859 flow.match;
#X text 200 5859 route data flow by regexp match;
#X obj 30 5886 flow.mem;
#X text 200 5886 store data flow in memory;
#X obj 30 5913 flow.multiplex;
#X text 200 5913 control flow multiplexer;
#X obj 30 5940 flow.multiplex2~;
#X text 200 5940 audio stream stereo multiplexer;
#X obj 30 5967 flow.multiplex~;
#X text 200 5967 audio stream multiplexer;
#X obj 30 5994 flow.once;
#X text 200 5994 one message pass thru;
#X obj 30 6021 flow.pack;
#X text 200 6021 flow pack;
#X obj 30 6048 flow.pass;
#X text 200 6048 pass specified values;
#X obj 30 6075 flow.pass_if;
#X text 200 6075 pass values that accepted by predicate object;
#X obj 30 6102 flow.pipe;
#X text 200 6102 enhanced version on vanilla pipe object;
#X obj 30 6129 flow.queue;
#X text 200 6129 multi-channel control flow sync queue (or FIFO);
#X obj 30 6156 flow.record;
#X text 200 6156 flow stream recorder/player;
#X obj 30 6183 flow.reject;
#X text 200 6183 reject specified values;
#X obj 30 6210 flow.reject_if;
#X text 200 6210 reject values by predicate;
#X obj 30 6237 flow.ring;
#X text 200 6237 dataflow ring buffer;
#X obj 30 6264 flow.route;
#X text 200 6264 advanced message router;
#X obj 30 6291 flow.select;
#X text 200 6291 vanilla flow on steroids;
#X obj 30 6318 flow.seqdelay;
#X text 200 6318 sequential delay/router for input flow;
#X obj 30 6345 flow.space;
#X text 200 6345 space in time messages received at the same logical
time;
#X obj 30 6372 flow.speedlim;
#X text 200 6372 control stream speed limiter;
#X obj 30 6399 flow.split;
#X text 200 6399 split data flow by external side-chain predicate;
#X obj 30 6426 flow.stack;
#X text 200 6426 any message stack;
#X obj 30 6453 flow.sync;
#X text 200 6453 bus with only hot inlets;
#X obj 30 6480 flow.sync_pack;
#X text 200 6480 flow pack with all hot inlets;
#X obj 30 6507 flow.tee~;
#X text 200 6507 separate audio and control streams;
#X obj 30 6534 replace;
#X text 200 6534 Replace atoms in data stream;
#X obj 30 6561 route.any;
#X text 200 6561 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6588 route.bang;
#X text 200 6588 separate bang messages from other types;
#X obj 30 6615 route.cycle;
#X text 200 6615 cyclic message router;
#X obj 30 6642 route.float;
#X text 200 6642 separate float messages from other types;
#X obj 30 6669 route.list;
#X text 200 6669 separate list messages from other types;
#X obj 30 6696 route.prop;
#X text 200 6696 separate property messages from other types;
#X obj 30 6723 route.random;
#X text 200 6723 routes input flow to random outlet;
#X obj 30 6750 route.symbol;
#X text 200 6750 separate symbol messages from other types;
#X obj 20 6777 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6818 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6829 flt.a-weight;
#X text 200 6829 convert frequency to A-weight value;
#X obj 30 6856 flt.biquad~;
#X text 200 6856 second order IIR filter.;
#X obj 30 6883 flt.bpf12~;
#X text 200 6883 Two pole band-pass butterworth filter;
#X obj 30 6910 flt.bpf24~;
#X text 200 6910 Four pole band-pass butterworth filter;
#X obj 30 6937 flt.c_apf;
#X text 200 6937 Allpass filter coefficient calculator for biquad;
#X obj 30 6964 flt.c_bpf~;
#X text 200 6964 BPF coefficient calculator for biquad filter;
#X obj 30 6991 flt.c_highshelf~;
#X text 200 6991 Highshelf filter coefficient calculator for biquad;
#X obj 30 7018 flt.c_hpf;
#X text 200 7018 HPF coefficient calculator for biquad filter;
#X obj 30 7045 flt.c_hpf~;
#X text 200 7045 HPF coefficient calculator for biquad filter;
#X obj 30 7072 flt.c_lowshelf~;
#X text 200 7072 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7099 flt.c_lpf;
#X text 200 7099 LPF coefficient calculator for biquad filter;
#X obj 30 7126 flt.c_lpf~;
#X text 200 7126 LPF coefficient calculator for biquad filter;
#X obj 30 7153 flt.c_notch;
#X text 200 7153 Notch filter coefficient calculator for biquad;
#X obj 30 7180 flt.c_notch~;
#X text 200 7180 Band-reject coefficient calculator for biquad filter;
#X obj 30 7207 flt.c_peak~;
#X text 200 7207 Peaking equalizer calculator for biquad;
#X obj 30 7234 flt.c_pole;
#X text 200 7234 One-pole coefficient calculator for biquad filter;
#X obj 30 7261 flt.dcblock2~;
#X text 200 7261 stereo DC blocker;
#X obj 30 7288 flt.dcblock~;
#X text 200 7288 mono DC blocker;
#X obj 30 7315 flt.eq10~;
#X text 200 7315 graphic 10 band equalizer;
#X obj 30 7342 flt.eq_peak_cq~;
#X text 200 7342 constant-Q second order peaking equalizer section;
#X obj 30 7369 flt.eq_peak~;
#X text 200 7369 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7424 flt.fb_comb~;
#X text 200 7424 feedback comb filter;
#X obj 30 7451 flt.fbank5x1~;
#X text 200 7451 5 band one octave butterworth filterbank;
#X obj 30 7478 flt.ff_comb~;
#X text 200 7478 feed forward comb filter;
#X obj 30 7505 flt.freqz;
#X text 200 7505 compute the frequency response of a digital filter;
#X obj 30 7532 flt.freqz~;
#X text 200 7532 compute the frequency response of a digital filter;
#X obj 30 7559 flt.highshelf~;
#X text 200 7559 gain boost|cut above some frequency;
#X obj 30 7586 flt.hpf12~;
#X text 200 7586 High-pass second order Butterworth filter;
#X obj 30 7613 flt.hpf24~;
#X text 200 7613 High-pass fourth order Butterworth filter;
#X obj 30 7640 flt.lowshelf~;
#X text 200 7640 gain boost|cut below some frequency;
#X obj 30 7667 flt.lpf12~;
#X text 200 7667 Low-pass second order Butterworth filter;
#X obj 30 7694 flt.lpf24~;
#X text 200 7694 Low-pass fourth order Butterworth filter;
#X obj 30 7721 flt.median;
#X text 200 7721 Median control flow filter;
#X obj 30 7748 flt.moog_vcf~;
#X text 200 7748 Moog Voltage Controlled Filter;
#X obj 30 7775 flt.notch~;
#X text 200 7775 band-rejection filter;
#X obj 30 7802 flt.resonbp~;
#X text 200 7802 Simple resonant bandpass filter;
#X obj 30 7829 flt.resonhp~;
#X text 200 7829 Simple resonant highpass filter;
#X obj 30 7856 flt.resonlp~;
#X text 200 7856 Simple resonant lowpass filter;
#X obj 20 7883 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7924 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7935 fx.bitdown~;
#X text 200 7935 bit downer and downsampler effect;
#X obj 30 7962 fx.chorus~;
#X text 200 7962 Chorus effect;
#X obj 30 7989 fx.dattorro~;
#X text 200 7989 dattorro reverb;
#X obj 30 8016 fx.delay~;
#X text 200 8016 smooth delay with a feedback control;
#X obj 30 8043 fx.distortion1~;
#X text 200 8043 distortion #1 from Guitarix effects set;
#X obj 30 8070 fx.distortion2~;
#X text 200 8070 distortion #2 from Guitarix effects set;
#X obj 30 8097 fx.distortion3~;
#X text 200 8097 simple distortion #3 from Guitarix effects set;
#X obj 30 8124 fx.distortion~;
#X text 200 8124 cubic nonlinearity distortion;
#X obj 30 8151 fx.drive~;
#X text 200 8151 Guitarix drive effect;
#X obj 30 8178 fx.drone_box~;
#X text 200 8178 mono sympathetic resonance generator;
#X obj 30 8205 fx.echo2~;
#X text 200 8205 stereo echo effect;
#X obj 30 8232 fx.echo~;
#X text 200 8232 enhanced echo effect;
#X obj 30 8259 fx.flanger~;
#X text 200 8259 mono flanging effect;
#X obj 30 8286 fx.freeverb2~;
#X text 200 8286 freeverb2 - stereo version of freeverb;
#X obj 30 8313 fx.freeverb~;
#X text 200 8313 freeverb - common used open-source reverb;
#X obj 30 8340 fx.freqshift~;
#X text 200 8340 frequency shifter or single-sideband ring modulation;
#X obj 30 8367 fx.granulator~;
#X text 200 8367 simple input stream granulator;
#X obj 30 8394 fx.greyhole~;
#X text 200 8394 A complex echo-like effect;
#X obj 30 8421 fx.infrev~;
#X text 200 8421 port of Infinity VST plugin from airwindows;
#X obj 30 8448 fx.jcrev~;
#X text 200 8448 Schroeder quad reverberator from 1972;
#X obj 30 8475 fx.looper~;
#X text 200 8475 One track looper;
#X obj 30 8502 fx.overdrive~;
#X text 200 8502 overdrive effect;
#X obj 30 8529 fx.pitchshift_s~;
#X text 200 8529 signal version of fx.pitchshift~;
#X obj 30 8556 fx.pitchshift~;
#X text 200 8556 simple pitch shifter based on 2 delay lines;
#X obj 30 8583 fx.rb_pitchshift~;
#X text 200 8583 rubber band pitchshift;
#X obj 30 8610 fx.recho~;
#X text 200 8610 reversed echo effect;
#X obj 30 8637 fx.ringmod~;
#X text 200 8637 ring modulator effect;
#X obj 30 8664 fx.room~;
#X text 200 8664 Gardners room emulation algorithms;
#X obj 30 8691 fx.satrev~;
#X text 200 8691 Schroeder reverberator from 1971;
#X obj 30 8718 fx.scramble~;
#X text 200 8718 scramble delayed sound fragments;
#X obj 30 8745 fx.shimmer~;
#X text 200 8745 shimmer reverb effect effect;
#X obj 30 8772 fx.stutter~;
#X text 200 8772 stutter effect;
#X obj 30 8799 fx.tapiir~;
#X text 200 8799 multi-tap delay;
#X obj 30 8826 fx.tremolo~;
#X text 200 8826 tremolo effect from guitarix project;
#X obj 30 8853 fx.vocoder~;
#X text 200 8853 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8893 fx.wahwah~;
#X text 200 8893 digitized CryBaby wah pedal;
#X obj 30 8920 fx.zita_rev1~;
#X text 200 8920 Zita stereo reverb;
#X obj 20 8947 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8988 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8999 global.dict;
#X text 200 8999 global named dict object;
#X obj 30 9026 global.float;
#X text 200 9026 global named float object;
#X obj 30 9053 global.int;
#X text 200 9053 global named integer object;
#X obj 30 9080 global.list;
#X text 200 9080 global named list object;
#X obj 30 9107 global.mlist;
#X text 200 9107 global named mlist object;
#X obj 30 9134 global.set;
#X text 200 9134 global named set object;
#X obj 20 9161 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 9202 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9213 hw.apple_smc;
#X text 200 9213 query the system management control in Apples;
#X obj 30 9240 hw.apple_sms;
#X text 200 9240 query the sudden motion sensor in Apples;
#X obj 30 9267 hw.arduino;
#X text 200 9267 Arduino device;
#X obj 30 9294 hw.cpu_temp;
#X text 200 9294 get CPU temperature;
#X obj 30 9321 hw.display;
#X text 200 9321 get/set display properties;
#X obj 30 9348 hw.kbd_light;
#X text 200 9348 Get/set keyboard light on some devices;
#X obj 30 9375 hw.motu.avb;
#X text 200 9375 controls Motu AVB devices over http requests;
#X obj 30 9402 hw.serial;
#X text 200 9402 serial port device;
#X obj 20 9429 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9470 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9484 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9481 faust realtime compilation;
#X obj 30 9506 lang.lua;
#X text 200 9506 Lua JIT language bindings;
#X obj 30 9536 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9533 faust compiled ui object;
#X obj 20 9558 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9599 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9610 lfo.+pulse~;
#X text 200 9610 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9637 lfo.+saw~;
#X text 200 9637 Positive unit-amplitude low frequency saw wave;
#X obj 30 9664 lfo.+square~;
#X text 200 9664 Positive low frequency square wave;
#X obj 30 9691 lfo.+tri~;
#X text 200 9691 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9718 lfo.impulse~;
#X text 200 9718 Unit-amplitude low-frequency impulse train;
#X obj 30 9745 lfo.mosc~;
#X text 200 9745 multi-oscillator with various waveforms;
#X obj 30 9772 lfo.pulse~;
#X text 200 9772 Full-range unit-amplitude low frequency pulse train;
#X obj 30 9799 lfo.saw~;
#X text 200 9799 Full-range unit-amplitude low frequency saw;
#X obj 30 9826 lfo.square~;
#X text 200 9826 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 9853 lfo.tri~;
#X text 200 9853 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 9880 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 9921 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9932 list.^at;
#X text 200 9932 on input index(es) outputs list element(s);
#X obj 30 9959 list.^contains;
#X text 200 9959 checks if input atom is found in the list;
#X obj 30 9986 list.^search;
#X text 200 9986 on input atom returns it index in list;
#X obj 30 10013 list.all_of;
#X text 200 10013 checks if all list atoms accepted by predicate;
#X obj 30 10040 list.any_of;
#X text 200 10040 checks if at least one list element is accepted by
predicate;
#X obj 30 10067 list.append;
#X text 200 10067 append atom or list to the end of input list;
#X obj 30 10094 list.apply_to;
#X text 200 10094 modifies list value at specified position \, filtering
it via external object;
#X obj 30 10134 list.at;
#X text 200 10134 outputs list element(s) at specified index(es);
#X obj 30 10161 list.choice;
#X text 200 10161 outputs random element from list;
#X obj 30 10188 list.contains;
#X text 200 10188 checks if input list contains specified atoms;
#X obj 30 10215 list.convolve;
#X text 200 10215 convolution for lists;
#X obj 30 10242 list.correlate;
#X text 200 10242 list cross-correlation;
#X obj 30 10269 list.count;
#X text 200 10269 output the number of items that equal to specified
value;
#X obj 30 10296 list.count_if;
#X text 200 10296 output the number of items that satisfy to external
predicate;
#X obj 30 10323 list.delta;
#X text 200 10323 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10363 list.distribution;
#X text 200 10363 list value distribution;
#X obj 30 10390 list.do;
#X text 200 10390 iterate and modify list contents via side-chain;
#X obj 30 10417 list.each;
#X text 200 10417 maps each list value via external side-chain;
#X obj 30 10444 list.enumerate;
#X text 200 10444 enumerates input list;
#X obj 30 10471 list.equal;
#X text 200 10471 checks if given lists are equal;
#X obj 30 10498 list.first;
#X text 200 10498 returns first list element;
#X obj 30 10525 list.gen;
#X text 200 10525 generates list of specified length via external generator;
#X obj 30 10552 list.histogram;
#X text 200 10552 outputs distribution histogram;
#X obj 30 10579 list.insert;
#X text 200 10579 insert atom or list to the specified position of
input list;
#X obj 30 10606 list.integrator;
#X text 200 10606 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10646 list.last;
#X text 200 10646 output last list element;
#X obj 30 10673 list.length;
#X text 200 10673 output the number of atoms in the list;
#X obj 30 10700 list.map;
#X text 200 10700 map list values by specified dictionary;
#X obj 30 10727 list.max;
#X text 200 10727 output largest element in the list;
#X obj 30 10754 list.mean;
#X text 200 10754 calculates average of list of floats;
#X obj 30 10781 list.min;
#X text 200 10781 returns smallest element in the list;
#X obj 30 10808 list.none_of;
#X text 200 10808 checks if none of list atoms is accepted by predicate;
#X obj 30 10835 list.normalize;
#X text 200 10835 normalizes float list values to get their sum = 1.0;
#X obj 30 10862 list.pass;
#X text 200 10862 leave in list only specified elements;
#X obj 30 10889 list.pass_if;
#X text 200 10889 leave only elements accepted by predicate;
#X obj 30 10916 list.prepend;
#X text 200 10916 prepend atom or list before input list;
#X obj 30 10943 list.product;
#X text 200 10943 calculates product of floats in list;
#X obj 30 10970 list.range;
#X text 200 10970 output list smallest and largest value;
#X obj 30 10997 list.reduce;
#X text 200 10997 apply function of two arguments cumulatively to the
list;
#X obj 30 11024 list.reject;
#X text 200 11024 remove specified element from list;
#X obj 30 11051 list.remove;
#X text 200 11051 remove list element(s) at specified positions;
#X obj 30 11078 list.remove_if;
#X text 200 11078 remove elements by predicate;
#X obj 30 11105 list.repack;
#X text 200 11105 repack list to specified size;
#X obj 30 11132 list.repeat;
#X text 200 11132 output new list by repeating input list specified
times;
#X obj 30 11159 list.resample;
#X text 200 11159 resample list with specified ratio;
#X obj 30 11186 list.resize;
#X text 200 11186 changes list size;
#X obj 30 11213 list.reverse;
#X text 200 11213 reverses the order of the elements in the list;
#X obj 30 11240 list.rldecode;
#X text 200 11240 Run-length list decoder (RLE);
#X obj 30 11267 list.rlencode;
#X text 200 11267 RLE (run-length encoding) for lists;
#X obj 30 11294 list.rotate;
#X text 200 11294 rotates list;
#X obj 30 11321 list.route;
#X text 200 11321 acts like [route] but for lists;
#X obj 30 11348 list.rundiff;
#X text 200 11348 running difference;
#X obj 30 11375 list.runsum;
#X text 200 11375 running sum;
#X obj 30 11402 list.search;
#X text 200 11402 search specified items in input list;
#X obj 30 11429 list.separate;
#X text 200 11429 sends list elements one by one separately;
#X obj 30 11456 list.seq;
#X text 200 11456 numeric sequence list generator;
#X obj 30 11483 list.set;
#X text 200 11483 set list value at specified position;
#X obj 30 11510 list.shift;
#X text 200 11510 shifts the contents of the list with linear interpolation;
#X obj 30 11537 list.shuffle;
#X text 200 11537 randomly rearranges elements in list;
#X obj 30 11564 list.slice;
#X text 200 11564 extract sublist;
#X obj 30 11591 list.sort;
#X text 200 11591 sorts list values by ascending order;
#X obj 30 11618 list.sort_with;
#X text 200 11618 sort list with user defined side-chain;
#X obj 30 11645 list.split;
#X text 200 11645 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11685 list.stretch;
#X text 200 11685 stretches list - changes its size with linear interpolation;
#X obj 30 11712 list.sum;
#X text 200 11712 calculates sum of floats in list;
#X obj 30 11739 list.unique;
#X text 200 11739 removes duplicates from input list;
#X obj 30 11766 list.unpack;
#X text 200 11766 unpack list elements to separate outlets;
#X obj 30 11793 list.unzip;
#X text 200 11793 splits list to N lists \, each to separate output;
#X obj 30 11820 list.walk;
#X text 200 11820 Walks thru the list;
#X obj 30 11847 list.zip;
#X text 200 11847 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 11902 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 11943 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11954 live.capture~;
#X text 200 11954 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11994 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 12035 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12046 local.dict;
#X text 200 12046 local named dict object;
#X obj 30 12073 local.float;
#X text 200 12073 canvas-scoped named float variable;
#X obj 30 12100 local.int;
#X text 200 12100 canvas-scoped named integer variable;
#X obj 30 12127 local.list;
#X text 200 12127 local named list object;
#X obj 30 12154 local.mlist;
#X text 200 12154 local named mlist object;
#X obj 30 12181 local.set;
#X text 200 12181 local named set object;
#X obj 20 12208 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 12249 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12260 math.abs;
#X text 200 12260 absolute value function;
#X obj 30 12287 math.abs~;
#X text 200 12287 absolute value function for signals;
#X obj 30 12314 math.acos;
#X text 200 12314 arc cosine function;
#X obj 30 12341 math.acosh;
#X text 200 12341 inverse hyperbolic cosine function;
#X obj 30 12368 math.acosh~;
#X text 200 12368 hyperbolic arc cosine for signals;
#X obj 30 12395 math.acos~;
#X text 200 12395 arc cosine function for signals;
#X obj 30 12422 math.and;
#X text 200 12422 operation AND for multiple arguments;
#X obj 30 12449 math.approx;
#X text 200 12449 check if input value approximately equal to pattern;
#X obj 30 12476 math.asin;
#X text 200 12476 arc sine function;
#X obj 30 12503 math.asinh;
#X text 200 12503 inverse hyperbolic sine function;
#X obj 30 12530 math.asinh~;
#X text 200 12530 hyperbolic arc sine for signals;
#X obj 30 12557 math.asin~;
#X text 200 12557 arc sine for signals;
#X obj 30 12584 math.atan;
#X text 200 12584 arc tangent function;
#X obj 30 12611 math.atanh;
#X text 200 12611 inverse hyperbolic tangent function;
#X obj 30 12638 math.atanh~;
#X text 200 12638 hyperbolic arc tangent for signals;
#X obj 30 12665 math.atan~;
#X text 200 12665 arc tangent for signals;
#X obj 30 12692 math.binomial;
#X text 200 12692 binomial coefficient calculator;
#X obj 30 12719 math.cabs~;
#X text 200 12719 magnitude of a complex signals;
#X obj 30 12746 math.carg~;
#X text 200 12746 phase angle of a complex signals;
#X obj 30 12773 math.cbrt;
#X text 200 12773 cube root function;
#X obj 30 12800 math.cbrt~;
#X text 200 12800 cube root function for signals;
#X obj 30 12827 math.cdiv~;
#X text 200 12827 division of complex signals;
#X obj 30 12854 math.ceil;
#X text 200 12854 round to smallest integral value not less than input
value;
#X obj 30 12881 math.ceil~;
#X text 200 12881 round to smallest integral value not less than input
value;
#X obj 30 12908 math.cexp~;
#X text 200 12908 exponent of a complex signals;
#X obj 30 12935 math.cmul~;
#X text 200 12935 multiplication of complex signals;
#X obj 30 12962 math.cos;
#X text 200 12962 cosine function;
#X obj 30 12989 math.cosh;
#X text 200 12989 hyperbolic cosine function;
#X obj 30 13016 math.cosh~;
#X text 200 13016 hyperbolic cosine for signals;
#X obj 30 13043 math.cos~;
#X text 200 13043 cosine function;
#X obj 30 13070 math.div;
#X text 200 13070 division (on lists too);
#X obj 30 13097 math.e;
#X text 200 13097 mathematical constant \, base of the natural logarithm;
#X obj 30 13124 math.erf;
#X text 200 13124 error function;
#X obj 30 13151 math.erf~;
#X text 200 13151 error function for signals;
#X obj 30 13178 math.exp;
#X text 200 13178 exponential functions;
#X obj 30 13205 math.exp2;
#X text 200 13205 exponential functions;
#X obj 30 13232 math.exp2~;
#X text 200 13232 base-2 exponential for signal;
#X obj 30 13259 math.expr;
#X text 200 13259 dynamic [expr];
#X obj 30 13286 math.exp~;
#X text 200 13286 base-e exponential for signal;
#X obj 30 13313 math.floor;
#X text 200 13313 round to largest integral value not greater than
x;
#X obj 30 13340 math.floor~;
#X text 200 13340 round to largest integral value not greater than
x;
#X obj 30 13367 math.gamma;
#X text 200 13367 gamma function;
#X obj 30 13394 math.gamma~;
#X text 200 13394 gamma function for floating point signals;
#X obj 30 13421 math.gcd;
#X text 200 13421 calculate greatest common divisor;
#X obj 30 13448 math.inf;
#X text 200 13448 infinity value that cannot be represented accurately;
#X obj 30 13475 math.inf~;
#X text 200 13475 inifinity signal generator;
#X obj 30 13502 math.lcm;
#X text 200 13502 calculate least common multiple;
#X obj 30 13529 math.lgamma;
#X text 200 13529 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13556 math.lgamma~;
#X text 200 13556 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13596 math.log;
#X text 200 13596 natural logarithm;
#X obj 30 13623 math.log10;
#X text 200 13623 logarithm functions;
#X obj 30 13650 math.log10~;
#X text 200 13650 natural logarithm;
#X obj 30 13677 math.log2;
#X text 200 13677 logarithm functions;
#X obj 30 13704 math.log2~;
#X text 200 13704 base-2 logarithm;
#X obj 30 13731 math.log~;
#X text 200 13731 natural logarithm;
#X obj 30 13758 math.mul;
#X text 200 13758 multiplication (on lists too);
#X obj 30 13785 math.nan;
#X text 200 13785 Not a Number \, unrepresentable value;
#X obj 30 13812 math.nan~;
#X text 200 13812 signal NaN;
#X obj 30 13839 math.neg;
#X text 200 13839 negate function;
#X obj 30 13866 math.or;
#X text 200 13866 operation OR for multiple arguments;
#X obj 30 13893 math.pi;
#X text 200 13893 mathematical constant;
#X obj 30 13920 math.pi~;
#X text 200 13920 mathematical constant;
#X obj 30 13947 math.polyeval;
#X text 200 13947 evaluates the polynomial described by the coefficients
list;
#X obj 30 13974 math.reciprocal;
#X text 200 13974 calculate reciprocal number;
#X obj 30 14001 math.reciprocal~;
#X text 200 14001 calculate reciprocal number for signals;
#X obj 30 14028 math.round;
#X text 200 14028 round to integral value \, regardless of rounding
direction;
#X obj 30 14055 math.round~;
#X text 200 14055 signal round;
#X obj 30 14082 math.sign;
#X text 200 14082 sign function;
#X obj 30 14109 math.sin;
#X text 200 14109 sine function;
#X obj 30 14136 math.sinh;
#X text 200 14136 hyperbolic sine function;
#X obj 30 14163 math.sinh~;
#X text 200 14163 hyperbolic sine for signals;
#X obj 30 14190 math.sin~;
#X text 200 14190 sine function;
#X obj 30 14217 math.sqrt;
#X text 200 14217 square root function;
#X obj 30 14244 math.sqrt~;
#X text 200 14244 square root for signal;
#X obj 30 14271 math.squared;
#X text 200 14271 value square;
#X obj 30 14298 math.squared~;
#X text 200 14298 signal value square;
#X obj 30 14325 math.sync_add;
#X text 200 14325 sync addition;
#X obj 30 14352 math.sync_and;
#X text 200 14352 sync logical AND operation;
#X obj 30 14379 math.sync_div;
#X text 200 14379 sync division;
#X obj 30 14406 math.sync_eq;
#X text 200 14406 sync equal numbers check;
#X obj 30 14433 math.sync_ge;
#X text 200 14433 sync greater equal numbers compare;
#X obj 30 14460 math.sync_gt;
#X text 200 14460 sync greater then numbers compare;
#X obj 30 14487 math.sync_le;
#X text 200 14487 sync less equal numbers compare;
#X obj 30 14514 math.sync_lshift;
#X text 200 14514 sync signed bit left shift;
#X obj 30 14541 math.sync_lt;
#X text 200 14541 sync less then numbers compare;
#X obj 30 14568 math.sync_mod;
#X text 200 14568 sync remainder of modulo division (float or integer);
#X obj 30 14595 math.sync_mul;
#X text 200 14595 sync multiplication;
#X obj 30 14622 math.sync_ne;
#X text 200 14622 sync numbers for not equality;
#X obj 30 14649 math.sync_or;
#X text 200 14649 sync logical OR operation;
#X obj 30 14676 math.sync_rshift;
#X text 200 14676 sync signed bit right shift;
#X obj 30 14703 math.sync_sub;
#X text 200 14703 sync subtraction;
#X obj 30 14730 math.sync_xor;
#X text 200 14730 sync logical XOR operation;
#X obj 30 14757 math.tan;
#X text 200 14757 tangent function;
#X obj 30 14784 math.tanh;
#X text 200 14784 hyperbolic tangent function;
#X obj 30 14811 math.tanh~;
#X text 200 14811 hyperbolic tangent for signals;
#X obj 30 14838 math.tan~;
#X text 200 14838 tangent function;
#X obj 30 14865 math.trunc;
#X text 200 14865 truncate to integer value;
#X obj 30 14892 math.trunc~;
#X text 200 14892 truncate to integer value;
#X obj 20 14919 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14960 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14971 midi.arp;
#X text 200 14971 MIDI arpeggiator;
#X obj 30 14998 midi.cc;
#X text 200 14998 enhanced version of vanilla ctlin;
#X obj 30 15025 midi.clock;
#X text 200 15025 midi clock toolbox;
#X obj 30 15052 midi.ctl2str;
#X text 200 15052 convert Standard MIDI Controllers number to name;
#X obj 30 15079 midi.event2ctl;
#X text 200 15079 convert MidiEvent message to controller channel/value
pair;
#X obj 30 15106 midi.event2note;
#X text 200 15106 convert MidiEvent message to midi note/velocity pair;
#X obj 30 15133 midi.event2prg;
#X text 200 15133 convert MidiEvent message to midi program change
value;
#X obj 30 15160 midi.file;
#X text 200 15160 standard midi file SMF reader and writer;
#X obj 30 15187 midi.kbd;
#X text 200 15187 computer keyboard midi;
#X obj 30 15214 midi.key2str;
#X text 200 15214 convert key number to SPN name according to tonality;
#X obj 30 15241 midi.modus;
#X text 200 15241 snap/skip midi pitches according modus;
#X obj 30 15268 midi.oct;
#X text 200 15268 midi octave transpose;
#X obj 30 15295 midi.prg2str;
#X text 200 15295 convert GM Instrument number to name (string or symbol);
#X obj 30 15322 midi.split;
#X text 200 15322 midi note splitter;
#X obj 30 15349 midi.sustain;
#X text 200 15349 sustain pedal emulation;
#X obj 30 15376 midi.sysex;
#X text 200 15376 sysex input messages as list;
#X obj 30 15403 midi.track;
#X text 200 15403 extract track from MidiFile;
#X obj 30 15430 midi.tuning;
#X text 200 15430 apply tuning to midi messages;
#X obj 30 15457 midi.vramp;
#X text 200 15457 apply crescendo or diminuendo for midi message flow;
#X obj 30 15484 midi.vrand;
#X text 200 15484 midi velocity randomizer;
#X obj 20 15511 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 15552 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15563 click~;
#X text 200 15563 Output single impulse on bang;
#X obj 30 15590 fluid~;
#X text 200 15590 FluidSynth SoundFont 2 player;
#X obj 30 15617 modplug~;
#X text 200 15617 MOD file player (using libmodplug);
#X obj 30 15644 qrcode;
#X text 200 15644 QR code generator;
#X obj 30 15671 risset.gliss;
#X text 200 15671 Sheppard/Risset glissando calculator;
#X obj 30 15698 sfizz~;
#X text 200 15698 SFZ format sample player;
#X obj 30 15725 speech.flite;
#X text 200 15725 render speech to array;
#X obj 30 15752 speech.flite~;
#X text 200 15752 render speech to array;
#X obj 30 15779 speech.rhvoice~;
#X text 200 15779 RHVoice text to speech synthesis;
#X obj 20 15806 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 15847 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15858 loadexpr;
#X text 200 15858 send message when patch loads;
#X obj 30 15885 msg;
#X text 200 15885 message constructor;
#X obj 30 15912 msg.after;
#X text 200 15912 send specified message after incoming message;
#X obj 30 15939 msg.onclose;
#X text 200 15939 send message when patch closes;
#X obj 30 15966 msg.onload;
#X text 200 15966 send message when patch loads;
#X obj 30 15993 msg.sched;
#X text 200 15993 message scheduler;
#X obj 20 16020 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 16061 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16072 rhythm.euclid;
#X text 200 16072 euclid pattern generator;
#X obj 30 16099 rhythm.hexbeat;
#X text 200 16099 hexbeat pattern generator;
#X obj 30 16126 rhythm.lsystem;
#X text 200 16126 L-system pattern generator;
#X obj 20 16153 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 16194 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16205 net.artnet.send;
#X text 200 16205 ArtNet DMX message sender;
#X obj 30 16232 net.host2ip;
#X text 200 16232 returns IP address by DNS name;
#X obj 30 16259 net.http.send;
#X text 200 16259 HTTP request sender;
#X obj 30 16286 net.osc.receive;
#X text 200 16286 OSC message listener;
#X obj 30 16313 net.osc.send;
#X text 200 16313 OSC message sender;
#X obj 30 16340 net.osc.server;
#X text 200 16340 OSC server control;
#X obj 20 16367 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 16408 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16419 noise.baker;
#X text 200 16419 Part of a-chaos library;
#X obj 30 16446 noise.clifford;
#X text 200 16446 clifford attractor;
#X obj 30 16473 noise.collatz;
#X text 200 16473 collatz conjecture output;
#X obj 30 16500 noise.colored~;
#X text 200 16500 colored noise generator with an arbitrary spectral
roll;
#X obj 30 16527 noise.crackle~;
#X text 200 16527 sparse noise generator;
#X obj 30 16554 noise.duffing;
#X text 200 16554 duffing attractor;
#X obj 30 16581 noise.ginger;
#X text 200 16581 Gingerbreadman map chaotic generator;
#X obj 30 16608 noise.henon;
#X text 200 16608 henon attractor;
#X obj 30 16635 noise.henon_heilles;
#X text 200 16635 Hénon–Heiles_system;
#X obj 30 16662 noise.henon_phase;
#X text 200 16662 henon phase Ddagrams;
#X obj 30 16689 noise.henonf;
#X text 200 16689 Henon phase;
#X obj 30 16716 noise.ikeda;
#X text 200 16716 Ikeda attractor;
#X obj 30 16743 noise.lfreq0~;
#X text 200 16743 sampled/held noise (piecewise constant);
#X obj 30 16770 noise.lfreq~;
#X text 200 16770 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 16797 noise.lorenz;
#X text 200 16797 Lorenz chaos;
#X obj 30 16824 noise.lyapunov;
#X text 200 16824 lyapunov random attractor;
#X obj 30 16851 noise.navier_stokes;
#X text 200 16851 navier-stokes diff equations;
#X obj 30 16878 noise.pink~;
#X text 200 16878 Pink noise generator;
#X obj 30 16905 noise.rossler;
#X text 200 16905 Rössler attractor;
#X obj 30 16932 noise.stein;
#X text 200 16932 Stein distribution;
#X obj 30 16959 noise.torus;
#X text 200 16959 torus attractor;
#X obj 30 16986 noise.verhulst;
#X text 200 16986 verhulst distribution;
#X obj 30 17013 noise.white~;
#X text 200 17013 White noise generator;
#X obj 20 17040 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 17081 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17092 osc.blit~;
#X text 200 17092 Bandlimited impulse train oscillator;
#X obj 30 17119 osc.impulse~;
#X text 200 17119 Bandlimited impulse train generator;
#X obj 30 17146 osc.pulse~;
#X text 200 17146 Bandlimited pulse train oscillator;
#X obj 30 17173 osc.saw4~;
#X text 200 17173 Bandlimited sawtooth wave;
#X obj 30 17200 osc.saw~;
#X text 200 17200 Alias-free sawtooth wave;
#X obj 30 17227 osc.sinfb~;
#X text 200 17227 Sine oscilator with feedback;
#X obj 30 17254 osc.sin~;
#X text 200 17254 Sine wave oscillator;
#X obj 30 17281 osc.square~;
#X text 200 17281 Bandlimited square wave oscillator;
#X obj 30 17308 osc.tri~;
#X text 200 17308 Bandlimited triangle wave oscillator;
#X obj 20 17335 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 17376 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17387 canvas.active;
#X text 200 17387 checks if canvas window is on top and active;
#X obj 30 17414 canvas.current;
#X text 200 17414 verbose information about current canvas;
#X obj 30 17441 canvas.dir;
#X text 200 17441 current canvas directory;
#X obj 30 17468 canvas.name;
#X text 200 17468 current canvas name;
#X obj 30 17495 canvas.path;
#X text 200 17495 current canvas fullpath;
#X obj 30 17522 canvas.top;
#X text 200 17522 verbose information about top-level canvas;
#X obj 30 17549 patch.args;
#X text 200 17549 Get patch or subpatch arguments;
#X obj 30 17576 patch.deps;
#X text 200 17576 patch dependencies: used objects and abstractions;
#X obj 30 17603 patch.tree;
#X text 200 17603 patch tree;
#X obj 20 17630 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 17671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17682 file.size;
#X text 200 17682 output file size;
#X obj 30 17709 path.basename;
#X text 200 17709 outputs filename portion of pathname;
#X obj 30 17736 path.dirname;
#X text 200 17736 outputs directory portion of pathname;
#X obj 30 17763 path.exists;
#X text 200 17763 checks if given path exists;
#X obj 30 17790 path.file;
#X text 200 17790 file input/output;
#X obj 30 17817 path.is_dir;
#X text 200 17817 check if path is directory;
#X obj 30 17844 path.lsdir;
#X text 200 17844 list directory contents;
#X obj 30 17871 path.monitor;
#X text 200 17871 filesystem event monitor;
#X obj 30 17898 path.normalize;
#X text 200 17898 normalize file paths;
#X obj 30 17925 path.pattern;
#X text 200 17925 pattern filename generator;
#X obj 30 17952 path.search;
#X text 200 17952 file search;
#X obj 30 17979 path.split;
#X text 200 17979 file path split;
#X obj 20 18006 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 18047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18058 is_any;
#X text 200 18058 checks if input data has *any* type;
#X obj 30 18085 is_bang;
#X text 200 18085 checks if input data has *bang* type;
#X obj 30 18112 is_data;
#X text 200 18112 checks if input data has *data* type;
#X obj 30 18139 is_dict;
#X text 200 18139 checks if input data has *dict* type;
#X obj 30 18166 is_even;
#X text 200 18166 checks if input number is even;
#X obj 30 18193 is_file;
#X text 200 18193 checks if file exists and accessible;
#X obj 30 18220 is_float;
#X text 200 18220 checks if input data has *float* type;
#X obj 30 18247 is_list;
#X text 200 18247 checks if input data has *list* type;
#X obj 30 18274 is_odd;
#X text 200 18274 checks if input number is odd;
#X obj 30 18301 is_pointer;
#X text 200 18301 checks if input data has *pointer* type;
#X obj 30 18328 is_prop;
#X text 200 18328 checks if input message is *property* message;
#X obj 30 18355 is_symbol;
#X text 200 18355 checks if input data has *symbol* type;
#X obj 20 18382 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 18423 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18434 preset.float;
#X text 200 18434 load/store float preset;
#X obj 30 18461 preset.list;
#X text 200 18461 load/store symbol preset;
#X obj 30 18488 preset.storage;
#X text 200 18488 preset storage control;
#X obj 30 18515 preset.symbol;
#X text 200 18515 load/store symbol preset;
#X obj 20 18542 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 18583 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18594 patch.props;
#X text 200 18594 patch properties manager;
#X obj 30 18621 prop;
#X text 200 18621 get/set named property value for subpatch or abstraction;
#X obj 30 18648 prop.declare;
#X text 200 18648 declare named property for subpatch or abstraction;
#X obj 30 18675 prop.get;
#X text 200 18675 get property from connected object/subpatch/abstraction;
#X obj 30 18702 prop.get~;
#X text 200 18702 Property extractor from sound stream;
#X obj 30 18729 prop.join;
#X text 200 18729 join property to main data flow;
#X obj 30 18756 prop.random;
#X text 200 18756 property randomizer;
#X obj 30 18783 prop.set;
#X text 200 18783 set property for connected object/subpatch/abstraction;
#X obj 30 18810 prop.split;
#X text 200 18810 separate properties from dataflow;
#X obj 20 18837 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 18878 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18889 proto.feelworld;
#X text 200 18889 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 18916 proto.firmata;
#X text 200 18916 Firmata Arduino protocol support;
#X obj 30 18943 proto.inscore;
#X text 200 18943 INScore message creator;
#X obj 30 18970 proto.ltc.in~;
#X text 200 18970 LTC decoder;
#X obj 30 18997 proto.midi;
#X text 200 18997 raw midi encoder/parser;
#X obj 30 19024 proto.midi.cc;
#X text 200 19024 raw midi CC encoder/parser;
#X obj 30 19051 proto.midi.sysex;
#X text 200 19051 raw midi SYSex encoder/parser;
#X obj 30 19078 proto.moppy;
#X text 200 19078 protocol for Musical flOPPY controller;
#X obj 30 19105 proto.morse;
#X text 200 19105 Morse encoder;
#X obj 30 19132 proto.mpv;
#X text 200 19132 mpv video player control;
#X obj 30 19159 proto.sp.alpaca;
#X text 200 19159 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 19186 proto.vlc;
#X text 200 19186 VLC video player control over HTTP;
#X obj 30 19213 proto.whammy;
#X text 200 19213 Control for Digitech Whammy pedal;
#X obj 30 19240 proto.xtouch_ext;
#X text 200 19240 Behringer XTouch Extender XMidi protocol;
#X obj 20 19267 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 19308 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19319 random.atom;
#X text 200 19319 weighted atom generation from specified list;
#X obj 30 19346 random.discrete;
#X text 200 19346 random weighted integers on interval [0 \, n);
#X obj 30 19373 random.float;
#X text 200 19373 uniform random float generator in specified range;
#X obj 30 19400 random.gauss;
#X text 200 19400 gaussian random distribution;
#X obj 30 19427 random.int;
#X text 200 19427 uniform random integer generator in specified range;
#X obj 30 19454 random.linear;
#X text 200 19454 random linear distribution;
#X obj 30 19481 random.pw_const;
#X text 200 19481 piecewise constant random distribution;
#X obj 30 19508 random.pw_lin;
#X text 200 19508 piecewise linear random distribution;
#X obj 20 19535 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 19576 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19587 samp.time~;
#X text 200 19587 sample counter;
#X obj 20 19614 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 19655 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19666 seq.arp;
#X text 200 19666 sequence arpeggiator;
#X obj 30 19693 seq.bangs;
#X text 200 19693 bang sequencer;
#X obj 30 19720 seq.counter;
#X text 200 19720 sequencer counter;
#X obj 30 19747 seq.life;
#X text 200 19747 Conway gamw of life sequencer;
#X obj 30 19774 seq.matrix;
#X text 200 19774 sequencer control for ui.matrix;
#X obj 30 19801 seq.nbangs;
#X text 200 19801 output specified number of bang with time intervals;
#X obj 30 19828 seq.phasor;
#X text 200 19828 control rate phasor (saw) generator;
#X obj 30 19855 seq.toggles;
#X text 200 19855 toggle sequencer;
#X obj 30 19882 sequencer;
#X text 200 19882 basic sequence player;
#X obj 20 19909 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 19950 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19961 snd.file;
#X text 200 19961 Sound file loader on steroids;
#X obj 20 19988 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 20029 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20040 hoa.2d.decoder~;
#X text 200 20040 hoa 2d decoder;
#X obj 30 20067 hoa.2d.encoder~;
#X text 200 20067 hoa 2d encoder;
#X obj 30 20094 hoa.2d.map~;
#X text 200 20094 a 2d ambisonic multisource spatializer;
#X obj 30 20121 hoa.2d.optim~;
#X text 200 20121 a 2D ambisonic optimization tool;
#X obj 30 20148 hoa.2d.projector~;
#X text 200 20148 a plane waves decomposer from circular harmonics
domain;
#X obj 30 20175 hoa.2d.recomposer~;
#X text 200 20175 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 20215 hoa.2d.rotate~;
#X text 200 20215 a 2D ambisonic sound field rotation;
#X obj 30 20242 hoa.2d.wider~;
#X text 200 20242 a 2d fractional ambisonic order simulator;
#X obj 30 20269 hoa.@process;
#X text 200 20269 process properties manager for hoa.process~;
#X obj 30 20296 hoa.in;
#X text 200 20296 message inlet for a patcher loaded by hoa.process~;
#X obj 30 20323 hoa.in~;
#X text 200 20323 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20350 hoa.out;
#X text 200 20350 message outlet for a patcher loaded by hoa.process~;
#X obj 30 20377 hoa.out~;
#X text 200 20377 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20404 hoa.process~;
#X text 200 20404 patcher loader for multichannel processing;
#X obj 30 20434 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 20431 a 2d ambisonic harmonic scope;
#X obj 30 20456 pan.cos~;
#X text 200 20456 two channel equal power sine/cosine panner;
#X obj 30 20483 pan.linsig~;
#X text 200 20483 two channel linear panner with signal control;
#X obj 30 20510 pan.lin~;
#X text 200 20510 two channel linear panner;
#X obj 30 20537 pan.spread~;
#X text 200 20537 spreads input channels across the stereo field;
#X obj 30 20564 pan.sqrt~;
#X text 200 20564 two channel equal power square root panner;
#X obj 30 20591 spat.pan4~;
#X text 200 20591 GMEM SPAT: 4-outputs spatializer;
#X obj 30 20618 spat.pan8~;
#X text 200 20618 GMEM SPAT: 8-outputs spatializer;
#X obj 30 20645 spat.zita6x8~;
#X text 200 20645 spat with 6 inputs sources to 8 channel output;
#X obj 30 20672 spat.zita8~;
#X text 200 20672 8 channel reverb spatializer;
#X obj 20 20699 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 20740 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20751 string;
#X text 200 20751 string constructor;
#X obj 30 20778 string.contains;
#X text 200 20778 checks if string contains specified substring;
#X obj 30 20805 string.ends_with;
#X text 200 20805 checks if string ends with specified substring;
#X obj 30 20832 string.equal;
#X text 200 20832 check strings or symbols for equality;
#X obj 30 20859 string.format;
#X text 200 20859 formats string like printf.;
#X obj 30 20886 string.join;
#X text 200 20886 joins (concatenates) list to string with separator;
#X obj 30 20913 string.length;
#X text 200 20913 number of characters in string (unicode supported);
#X obj 30 20940 string.match;
#X text 200 20940 check if string match regular expression;
#X obj 30 20967 string.remove;
#X text 200 20967 remove substring from input string;
#X obj 30 20994 string.replace;
#X text 200 20994 replace from one substring to another in input string;
#X obj 30 21021 string.split;
#X text 200 21021 split string or symbol by separator;
#X obj 30 21048 string.starts_with;
#X text 200 21048 checks if string starts with specified substring;
#X obj 30 21075 string.substr;
#X text 200 21075 extract substring from input string;
#X obj 30 21102 string2symbol;
#X text 200 21102 converts string to symbol;
#X obj 20 21129 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 21170 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21181 symbol.equal;
#X text 200 21181 check symbols for equality;
#X obj 30 21208 symbol.length;
#X text 200 21208 number of characters in symbol (unicode supported);
#X obj 30 21235 symbol.num_compare;
#X text 200 21235 numeric symbol compare;
#X obj 30 21262 symbol2any;
#X text 200 21262 converts symbol or string to message;
#X obj 30 21289 symbol2intlist;
#X text 200 21289 converts symbol to list of character codes;
#X obj 20 21316 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 21357 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21368 noise.chua~;
#X text 200 21368 Chua's diode circuit;
#X obj 30 21395 synth.bee3~;
#X text 200 21395 Hammond-oid organ FM synthesis instrument;
#X obj 30 21422 synth.birds~;
#X text 200 21422 bird singing generator;
#X obj 30 21449 synth.church_bell~;
#X text 200 21449 generic church bell modal model;
#X obj 30 21476 synth.clap~;
#X text 200 21476 clap synth from faust libraries;
#X obj 30 21503 synth.dubdub~;
#X text 200 21503 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 21543 synth.dx7~;
#X text 200 21543 FAUST dx7 implementation;
#X obj 30 21570 synth.eguitar~;
#X text 200 21570 simple electric guitar model with steel strings;
#X obj 30 21597 synth.english_bell~;
#X text 200 21597 english church bell modal model;
#X obj 30 21624 synth.fgrain~;
#X text 200 21624 file granulator from STK;
#X obj 30 21651 synth.french_bell~;
#X text 200 21651 french church bell modal model;
#X obj 30 21678 synth.german_bell~;
#X text 200 21678 german church bell modal model;
#X obj 30 21705 synth.glass_harm~;
#X text 200 21705 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 21732 synth.glitch~;
#X text 200 21732 Glitch synthesizer by naivesound;
#X obj 30 21759 synth.harpsichord~;
#X text 200 21759 waveguide commuted harpsichord;
#X obj 30 21786 synth.hat~;
#X text 200 21786 hi-hat synth from faust librariest;
#X obj 30 21813 synth.kick2~;
#X text 200 21813 low-kick synth from faust librariest;
#X obj 30 21840 synth.kick~;
#X text 200 21840 low-kick synth from Guitarix project;
#X obj 30 21867 synth.ks~;
#X text 200 21867 Karplus-Strong string;
#X obj 30 21894 synth.marimba~;
#X text 200 21894 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 21934 synth.metro~;
#X text 200 21934 ready to use metronome synth;
#X obj 30 21961 synth.piano~;
#X text 200 21961 waveguide commuted piano;
#X obj 30 21988 synth.rhodey~;
#X text 200 21988 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 22015 synth.risset_arp~;
#X text 200 22015 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 22042 synth.risset_bell~;
#X text 200 22042 Jean Claude Risset's bell synth;
#X obj 30 22069 synth.risset_tone~;
#X text 200 22069 Jean Claude Risset's endless glissando;
#X obj 30 22096 synth.russian_bell~;
#X text 200 22096 russian church bell modal model;
#X obj 30 22123 synth.shakers~;
#X text 200 22123 various percussion sounds from STK library;
#X obj 30 22150 synth.sitar~;
#X text 200 22150 STK sitar;
#X obj 30 22177 synth.snare~;
#X text 200 22177 Snare drum synth from Guitarix project;
#X obj 30 22204 synth.standard_bell~;
#X text 200 22204 german church bell modal model;
#X obj 30 22231 synth.tube_bell~;
#X text 200 22231 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 22258 synth.voice_fofc~;
#X text 200 22258 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 22285 synth.voice_fofs~;
#X text 200 22285 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 22312 synth.wurley~;
#X text 200 22312 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 22339 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 22380 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22391 system.colorpanel;
#X text 200 22391 System color panel dialog popup;
#X obj 30 22418 system.cursor;
#X text 200 22418 Output cursor motion \, mousewheel and button clicks;
#X obj 30 22445 system.exec;
#X text 200 22445 run external command in separate process;
#X obj 30 22472 system.exit;
#X text 200 22472 quit PureData;
#X obj 30 22499 system.getenv;
#X text 200 22499 Get system environment variables;
#X obj 30 22526 system.hostname;
#X text 200 22526 outputs system hostname;
#X obj 30 22553 system.memsize;
#X text 200 22553 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 22593 system.memused;
#X text 200 22593 returns the process physical memory use - current
and peak;
#X obj 30 22620 system.screen_size;
#X text 200 22620 returns current screen size in pixels;
#X obj 20 22647 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 22688 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22699 tl.bang;
#X text 200 22699 Timeline bang (with possible delay);
#X obj 30 22729 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 22726 Timeline section;
#X obj 30 22751 tl.timeline;
#X text 200 22751 Timeline - event scheduler;
#X obj 30 22778 tl.toggle;
#X text 200 22778 Timeline bang;
#X obj 30 22805 tl.transport;
#X text 200 22805 Timeline transport control;
#X obj 20 22832 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 22873 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22887 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 22884 array view with cursor and selection;
#X obj 30 22912 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 22909 A bang... that's all;
#X obj 30 22937 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 22934 button widget;
#X obj 30 22962 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 22959 colorchooser widget;
#X obj 30 22987 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 22984 Display GUI object;
#X obj 30 23012 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 23009 GUI for turning DSP on/off;
#X obj 30 23037 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 23034 envelope editor widget;
#X obj 30 23062 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 23059 UI filter object calculator for biquad filter;
#X obj 30 23087 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 23084 UI filter object based on biquad filter;
#X obj 30 23112 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 23109 UI stereo gain control;
#X obj 30 23137 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 23134 UI gain control;
#X obj 30 23162 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 23159 simple icon with button capabilities;
#X obj 30 23187 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 23184 value increment/decrement;
#X obj 30 23212 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 23209 keyboard widget;
#X obj 30 23237 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 23234 knob widget;
#X obj 30 23262 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 23259 simple label widget;
#X obj 30 23287 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 23284 black and white bitmap display;
#X obj 30 23312 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 23309 Hyperlink widget;
#X obj 30 23337 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 23334 The matrix of toggles has you.;
#X obj 30 23362 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 23359 Dropdown menu;
#X obj 30 23387 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 23384 Shows peak and rms signal level;
#X obj 30 23412 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 23409 incoming MIDI message viewport;
#X obj 30 23437 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 23434 filter mouse events from ui objects;
#X obj 30 23462 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 23459 routes mouse events from ui objects;
#X obj 30 23487 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 23484 counterpart of the vanilla [nbx];
#X obj 30 23512 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 23509 counterpart of the vanilla [nbx] for signal;
#X obj 30 23537 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 23534 signal plotter;
#X obj 30 23562 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 23559 2D slider in polar coordinates;
#X obj 30 23587 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 23584 Preset manager;
#X obj 30 23612 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 23609 counterpart of the vanilla radio toggle;
#X obj 30 23637 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 23634 range slider;
#X obj 30 23662 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 23659 Scope GUI object;
#X obj 30 23687 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 23684 counterpart of the vanilla slider;
#X obj 30 23712 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 23709 2D slider widget;
#X obj 30 23737 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 23734 Multiple slider widget;
#X obj 30 23762 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 23759 Spectroscope GUI object;
#X obj 30 23787 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 23784 displays a list of text buttons or text toggles;
#X obj 30 23812 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 23809 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 23834 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 23834 version: v0.9.6 \, license: GPL3;
#X obj 20 23862 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 23885 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 23849 msg 0;
#X obj 670 23884 switch~;
#X connect 1668 0 1669 0;