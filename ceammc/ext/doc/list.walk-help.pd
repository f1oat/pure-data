#N canvas 0 0 760 555 12;
#X declare -lib ceammc;
#X obj 583 50 cnv 1 157 21 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 583 50 Walks thru the list;
#X obj 1 1 cnv 5 740 40 empty empty list.walk 20 20 0 20 -104026 -4096
0;
#X obj 650 11 list.walk;
#X obj 245 80 cnv 1 495 75 empty empty empty 17 7 0 10 -257983 -1 0;
#X text 250 80 Universal list walker. If you want to output current
element and when move to next - use [1( message \, Otherwise - use
[next( if you want first move to next position and then output it.;
#X obj 50 183 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1;
#X obj 280 183 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1;
#X obj 50 212 metro 100;
#X msg 165 212 1 6 9 11;
#X msg 270 212 @direction \$1;
#X msg 184 241 @clip;
#X msg 290 241 @single;
#X msg 386 241 @loop;
#X msg 462 241 @fold;
#X msg 88 270 -1;
#X msg 213 270 1;
#X msg 482 270 prev;
#X msg 549 270 next;
#X obj 50 299 list.walk 1 3 6 8 @fold;
#X obj 50 327 + 60;
#X obj 50 356 mtof;
#X obj 50 385 osc~;
#X obj 50 414 *~ 0.1;
#X obj 50 443 dac~;
#X obj 20 482 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 487 cnv 5 90 26 empty empty arguments: 4 10 0 14 -262144
-49933 0;
#X text 120 492 1\.;
#X text 150 492 list;
#X obj 281 493 cnv 1 40 18 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 280 492 INIT: initial list.;
#X obj 20 520 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 525 cnv 5 98 26 empty empty properties: 4 10 0 14 -262144
-49933 0;
#X msg 120 530 @mode;
#X text 280 530 Get/Set pass mode. See properties below for detailed
information. Type: symbol. Allowed values: single \, clip \, wrap \,
fold;
#X msg 120 581 @clip;
#X text 280 581 clipped pass mode. When the list bounds are reached -
min/max value repeats perpetually;
#X msg 120 618 @single;
#X text 280 618 single pass mode. When the list bounds are reached -
no output any more until reset;
#X msg 120 655 @loop;
#X text 280 655 @wrap alias;
#X msg 120 682 @wrap;
#X text 280 682 wrap pass mode. List values are repeated in a loop;
#X msg 120 709 @fold;
#X text 280 709 fold pass mode. List values are repeated in a loop
with folding;
#X msg 120 746 @direction;
#X text 280 746 Get/Set walking direction. "1" - forwards \, "0" -
backwards. Type: int. Default value: 1\. Allowed values: 0 \, 1;
#X msg 120 783 @index;
#X text 280 783 Get/Set current position. Type: int. Default value:
0\. Min value: 0;
#X msg 120 820 @length;
#X text 280 820 Get/Set output list length. Type: int. Default value:
1\. Min value: 1;
#X msg 120 857 @size;
#X text 280 857 (readonly) Get current list size. Type: int;
#X msg 120 884 @value;
#X text 280 884 (readonly) Get current list. Type: list. Default
value: [];
#X obj 20 921 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 926 cnv 5 73 26 empty empty methods: 4 10 0 14 -262144
-49933 0;
#X msg 120 931 current;
#X text 280 931 outputs current element.;
#X msg 120 963 dump;
#X text 280 963 dump internal object state to Pd console window.;
#X msg 120 995 next;
#X text 280 995 Arguments are:;
#X obj 290 1023 cnv 1 64 21 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 290 1023 [STEP=1]: moves to next element with optional given
step and outputs it. Type: int.;
#X msg 120 1065 prev;
#X text 280 1065 Arguments are:;
#X obj 290 1093 cnv 1 64 21 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 290 1093 [STEP=1]: moves to previous element with optional
given step and outputs it. Type: int.;
#X msg 120 1135 reset;
#X text 280 1135 sets current position to 0\.;
#X obj 20 1177 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1182 cnv 5 64 26 empty empty inlets: 4 10 0 14 -262144
-49933 0;
#X text 120 1187 1\.;
#X text 150 1187 *bang*;
#X text 280 1187 outputs current element and moves to next.;
#X text 150 1205 *float*;
#X text 280 1205 outputs current element and moves by specified
position.;
#X obj 20 1233 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1238 cnv 5 73 26 empty empty outlets: 4 10 0 14 -262144
-49933 0;
#X text 120 1243 1\.;
#X text 280 1243 list element;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 67 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 115 45 ::;
#X obj 131 48 ui.link @title list @url ceammc.list-help.pd;
#X obj 1 1291 cnv 5 740 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 1294 library: ceammc v0.7;
#X text 515 1306 see also:;
#X obj 591 1306 list.gen;
#X obj 663 1306 list.seq;
#N canvas 10 1313 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.7;
#X text 10 54 object:;
#X text 120 54 list.walk;
#X text 10 76 category:;
#X text 120 76 list;
#X text 10 98 since:;
#X text 120 98 0.1;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3;
#X text 10 164 keywords:;
#X text 120 164 list \, walk \, iterate;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 1313 pd info;
#X connect 6 0 8 0;
#X connect 7 0 10 0;
#X connect 8 0 19 0;
#X connect 15 0 19 0;
#X connect 9 0 19 0;
#X connect 11 0 19 0;
#X connect 16 0 19 0;
#X connect 10 0 19 0;
#X connect 12 0 19 0;
#X connect 13 0 19 0;
#X connect 14 0 19 0;
#X connect 17 0 19 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 23 0 24 0;
#X connect 23 0 24 1;