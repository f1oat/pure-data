#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 20 292 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 333 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 344 array.bpm;
#X text 200 344 BPM calculator;
#X obj 30 371 array.circular~;
#X text 200 371 circular buffer for arrays;
#X obj 30 398 array.copy;
#X text 200 398 copy samples from one array to another;
#X obj 30 425 array.do;
#X text 200 425 iterate and modify array content via side-chain;
#X obj 30 452 array.each;
#X text 200 452 process each array elements via side-chain;
#X obj 30 479 array.fill;
#X text 200 479 fill array with single value or pattern;
#X obj 30 506 array.grainer~;
#X text 200 506 array granulator;
#X obj 30 533 array.hist;
#X text 200 533 calculates array histogram;
#X obj 30 560 array.mean;
#X text 200 560 calculates array arithmetic mean value;
#X obj 30 587 array.minmax;
#X text 200 587 find array min and max element value;
#X obj 30 614 array.play~;
#X text 200 614 array player with variable speed and amplitude;
#X obj 30 641 array.plot;
#X text 200 641 array data plotter;
#X obj 30 668 array.plot~;
#X text 200 668 plot signal on specified array;
#X obj 30 695 array.resample;
#X text 200 695 array resampler;
#X obj 30 722 array.risset_rythm~;
#X text 200 722 Risset Rythm: accelerando or ritardando;
#X obj 30 749 array.rms;
#X text 200 749 calculates root mean square value for array;
#X obj 30 776 array.set;
#X text 200 776 set array content from list;
#X obj 30 803 array.stddev;
#X text 200 803 calculates standard deviation for array values;
#X obj 30 830 array.stretch;
#X text 200 830 array time-stretch \, pitch-shift or rate-change;
#X obj 30 857 array.sum;
#X text 200 857 calculates sum of array elements;
#X obj 30 884 array.sum2;
#X text 200 884 calculates sum of squares of array elements;
#X obj 30 911 array.variance;
#X text 200 911 calculates variance of array values;
#X obj 30 938 array.vplay;
#X text 200 938 simple array player for using with vline~;
#X obj 30 965 array.window;
#X text 200 965 fill array with window;
#X obj 30 992 plot.geomspace~;
#X text 200 992 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1032 plot.hist~;
#X text 200 1032 calculate and output signal histogram;
#X obj 30 1059 plot.linspace~;
#X text 200 1059 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1099 plot.logspace~;
#X text 200 1099 outputs numbers spaced evenly on a log scale;
#X obj 30 1126 plot.response~;
#X text 200 1126 output amp/phase freq response to impulse;
#X obj 20 1153 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1194 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1205 ceammc.search;
#X text 200 1205 ceammc library search object;
#X obj 30 1235 ui.link @title [function] @url function-help.pd;
#X text 200 1232 named function;
#X obj 30 1257 function.call;
#X text 200 1257 call named function;
#X obj 30 1284 gain~;
#X text 200 1284 multislot signal gain;
#X obj 30 1311 logger;
#X text 200 1311 advanced data logger;
#X obj 30 1338 matrix~;
#X text 200 1338 signal routing matrix;
#X obj 30 1365 metro.pattern;
#X text 200 1365 metro with rhythmic patterns;
#X obj 30 1392 metro.random;
#X text 200 1392 metro random bang with specified range;
#X obj 30 1419 metro.seq;
#X text 200 1419 metro sequencer;
#X obj 30 1446 mix~;
#X text 200 1446 multislot signal mixer;
#X obj 30 1473 nsig~;
#X text 200 1473 Mulitchannel converter from control to audio rate;
#X obj 30 1500 obj.props;
#X text 200 1500 property extractor;
#X obj 30 1527 radio;
#X text 200 1527 float index to outlet values as radio switch;
#X obj 30 1554 spring;
#X text 200 1554 float value "spring";
#X obj 30 1581 sync;
#X text 200 1581 value synchronization;
#X obj 30 1608 window;
#X text 200 1608 returns window value by given window position;
#X obj 30 1635 xdac~;
#X text 200 1635 dac~ with channel ranges;
#X obj 30 1662 xfade2~;
#X text 200 1662 multi stereo-signal crossfade;
#X obj 30 1689 xfade~;
#X text 200 1689 multi signal crossfade;
#X obj 30 1716 z~;
#X text 200 1716 sample delay;
#X obj 20 1743 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1784 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1795 chaos.gbman0;
#X text 200 1795 Gingerbreadman map chaotic generator;
#X obj 30 1822 chaos.gbman0~;
#X text 200 1822 Gingerbreadman map chaotic generator;
#X obj 30 1849 chaos.jong;
#X text 200 1849 Peter de Jong attractor;
#X obj 30 1876 chaos.logistic;
#X text 200 1876 Logistic map chaotic generator;
#X obj 30 1903 chaos.std0;
#X text 200 1903 Standard map chaotic generator;
#X obj 30 1930 chaos.std0~;
#X text 200 1930 Standard map chaotic generator;
#X obj 20 1957 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2009 array.p2s;
#X text 200 2009 convert array phase [0\..1] to sample position;
#X obj 30 2036 array.s2p;
#X text 200 2036 convert sample position to phase range [0\..1];
#X obj 30 2063 conv.amp2dbfs;
#X text 200 2063 convert from amplitude to decibel full scale;
#X obj 30 2090 conv.amp2dbfs~;
#X text 200 2090 convert from amplitude to decibel full scale;
#X obj 30 2117 conv.bits2bang;
#X text 200 2117 convert list of bits to bang events;
#X obj 30 2144 conv.bits2int;
#X text 200 2144 convert list of bits to integer;
#X obj 30 2171 conv.bits2note;
#X text 200 2171 convert list of bits to note events;
#X obj 30 2198 conv.bits2pos;
#X text 200 2198 convert list of bits to list of bit position;
#X obj 30 2225 conv.bpm2hz;
#X text 200 2225 converts BPM to frequency in herz;
#X obj 30 2252 conv.bpm2ms;
#X text 200 2252 convert frequency in BPM to period in milliseconds;
#X obj 30 2279 conv.bpm2sec;
#X text 200 2279 convert frequency in BPM to period in seconds;
#X obj 30 2306 conv.car2pol;
#X text 200 2306 convert cartesian coords to polar;
#X obj 30 2333 conv.cc2amp;
#X text 200 2333 convert from MIDI Control Change range;
#X obj 30 2360 conv.dbfs2amp;
#X text 200 2360 convert decibel full scale to amplitude;
#X obj 30 2387 conv.dbfs2amp~;
#X text 200 2387 convert decibel full scale to amplitude;
#X obj 30 2414 conv.degree2key;
#X text 200 2414 convert scale degree to key;
#X obj 30 2441 conv.edge2bang;
#X text 200 2441 edge detector for numeric stream;
#X obj 30 2468 conv.hex2int;
#X text 200 2468 hex symbol to int value;
#X obj 30 2495 conv.int2bits;
#X text 200 2495 convert integer to list of bits;
#X obj 30 2522 conv.lin2curve;
#X text 200 2522 map linear to exponential range with 0 allowed.;
#X obj 30 2549 conv.lin2exp;
#X text 200 2549 maps linear range to exponential range;
#X obj 30 2576 conv.lin2lin;
#X text 200 2576 convert from one linear range to another;
#X obj 30 2603 conv.lin2lin~;
#X text 200 2603 convert from one linear range to another for signals;
#X obj 30 2630 conv.list2props;
#X text 200 2630 converts list to series of property messages;
#X obj 30 2657 conv.midi2freq;
#X text 200 2657 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2697 conv.ms2bpm;
#X text 200 2697 convert period in milliseconds to frequency in BPM;
#X obj 30 2724 conv.ms2samp;
#X text 200 2724 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2764 conv.ms2samp~;
#X text 200 2764 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2804 conv.phase2rad;
#X text 200 2804 convert phase value [0-1] to radians [0-2π];
#X obj 30 2831 conv.phase2rad~;
#X text 200 2831 convert phase value [0-1] to radians [0-2π];
#X obj 30 2858 conv.pitch2midi;
#X text 200 2858 converts symbol pitch name to MIDI note number;
#X obj 30 2885 conv.pol2car;
#X text 200 2885 convert from polar coordinates to cartesian;
#X obj 30 2912 conv.rad2phase;
#X text 200 2912 convert radians value to phase;
#X obj 30 2939 conv.rad2phase~;
#X text 200 2939 convert radians value to phase;
#X obj 30 2966 conv.samp2ms;
#X text 200 2966 convert samples to time according to samplerate;
#X obj 30 2993 conv.samp2ms~;
#X text 200 2993 convert samples to milliseconds according to samplerate;
#X obj 30 3020 conv.samp2sec;
#X text 200 3020 convert samples to time according to samplerate;
#X obj 30 3047 conv.sec2bpm;
#X text 200 3047 convert period in seconds to frequency in BPM;
#X obj 30 3074 conv.sec2samp;
#X text 200 3074 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3114 conv.sec2str;
#X text 200 3114 converts float time in seconds to formated symbol
(or string);
#X obj 30 3141 conv.sig2float~;
#X text 200 3141 convert signal to floats;
#X obj 30 3168 conv.str2sec;
#X text 200 3168 converts formatted time to float value in seconds;
#X obj 30 3195 music.dur2time;
#X text 200 3195 convert duration list to time;
#X obj 30 3222 music.voice2midi;
#X text 200 3222 convert voice music list of midi pitches;
#X obj 20 3249 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3290 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3301 data.copy;
#X text 200 3301 make copy for any data types: MList \, Set etc...;
#X obj 30 3328 data.dict;
#X text 200 3328 dictionary container: store values by key;
#X obj 30 3355 data.fifo;
#X text 200 3355 First-In-First-Out (FIFO) queue data container;
#X obj 30 3382 data.float;
#X text 200 3382 robust float object;
#X obj 30 3409 data.int;
#X text 200 3409 robust int object;
#X obj 30 3436 data.list;
#X text 200 3436 list container;
#X obj 30 3463 data.mlist;
#X text 200 3463 multidimensional list container;
#X obj 30 3490 data.set;
#X text 200 3490 container that store unique elements;
#X obj 30 3517 data.set2list;
#X text 200 3517 converts set to list;
#X obj 30 3544 dict.contains;
#X text 200 3544 predicate to check if dict contains a keys;
#X obj 30 3571 dict.each;
#X text 200 3571 map each value in dict;
#X obj 30 3598 dict.from_list;
#X text 200 3598 creates dictionary from list;
#X obj 30 3625 dict.get;
#X text 200 3625 output dict values;
#X obj 30 3652 dict.keys;
#X text 200 3652 get list of dict keys;
#X obj 30 3679 dict.pass;
#X text 200 3679 passes specified keys in dict;
#X obj 30 3706 dict.reject;
#X text 200 3706 rejects specified keys from dict;
#X obj 30 3733 dict.size;
#X text 200 3733 dictionary size;
#X obj 30 3760 dict.to_list;
#X text 200 3760 converts dictionary to plain list;
#X obj 30 3787 dict.values;
#X text 200 3787 dictionary values as mlist;
#X obj 30 3814 mlist.flatten;
#X text 200 3814 flatten nested mlist;
#X obj 30 3841 rtree.to_list;
#X text 200 3841 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3868 set.contains;
#X text 200 3868 check if specified element is in set;
#X obj 30 3895 set.diff;
#X text 200 3895 difference between two sets;
#X obj 30 3922 set.equal;
#X text 200 3922 checks if two sets are equal (contains same elements);
#X obj 30 3949 set.intersect;
#X text 200 3949 output intersection of given sets;
#X obj 30 3976 set.size;
#X text 200 3976 get number of elements in set;
#X obj 30 4003 set.symdiff;
#X text 200 4003 symmetric difference between two sets;
#X obj 30 4030 set.union;
#X text 200 4030 output union of given sets;
#X obj 20 4057 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4098 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4109 dyn.comp2~;
#X text 200 4109 stereo dynamic range compressor;
#X obj 30 4136 dyn.comp~;
#X text 200 4136 mono dynamic range compressors;
#X obj 30 4163 dyn.gate2~;
#X text 200 4163 stereo signal gate;
#X obj 30 4190 dyn.gate~;
#X text 200 4190 mono signal gate;
#X obj 30 4217 dyn.limit2~;
#X text 200 4217 stereo 1176LN Peak Limiter;
#X obj 30 4244 dyn.limit~;
#X text 200 4244 mono 1176LN Peak Limiter;
#X obj 30 4271 dyn.softclip~;
#X text 200 4271 soft signal clip;
#X obj 20 4298 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4339 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4350 env.adsr~;
#X text 200 4350 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4377 env.ar~;
#X text 200 4377 Attack/Release envelope generator;
#X obj 30 4404 env.asr~;
#X text 200 4404 Attack/Sustain/Release envelope generator;
#X obj 30 4431 env.concat;
#X text 200 4431 Envelope concatenation;
#X obj 30 4458 env.follow~;
#X text 200 4458 Envelope follower with independent attack and release
times;
#X obj 30 4485 env.mix;
#X text 200 4485 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4525 env.smooth~;
#X text 200 4525 An envelope with an exponential attack and release;
#X obj 30 4552 env.tscale;
#X text 200 4552 Envelope time-scale;
#X obj 30 4579 env.tshift;
#X text 200 4579 Envelope time-shift (horizontal);
#X obj 30 4606 env.vscale;
#X text 200 4606 Envelope value-scale;
#X obj 30 4633 env2array;
#X text 200 4633 Renders envelope to specified array;
#X obj 30 4660 env2vline;
#X text 200 4660 Converts envelope to bunch of vline messages;
#X obj 30 4687 envelope;
#X text 200 4687 Envelope data type;
#X obj 30 4714 vline2env;
#X text 200 4714 Converts vline messages to env;
#X obj 20 4741 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4782 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4793 expand_env;
#X text 200 4793 Substitute environment variables in data stream;
#X obj 30 4820 flow.append;
#X text 200 4820 append message to flow stream;
#X obj 30 4847 flow.change;
#X text 200 4847 rejects redundant input values;
#X obj 30 4874 flow.count;
#X text 200 4874 control flow event counter;
#X obj 30 4901 flow.delay;
#X text 200 4901 enhanced version on vanilla delay object;
#X obj 30 4928 flow.demultiplex;
#X text 200 4928 control flow demultiplexer;
#X obj 30 4955 flow.demultiplex2~;
#X text 200 4955 audio stream stereo demultiplexer;
#X obj 30 4982 flow.demultiplex~;
#X text 200 4982 audio stream demultiplexer;
#X obj 30 5009 flow.dollar;
#X text 200 5009 data flow dollar converter;
#X obj 30 5036 flow.dup;
#X text 200 5036 message duplicator;
#X obj 30 5063 flow.float;
#X text 200 5063 pass floats;
#X obj 30 5090 flow.gate;
#X text 200 5090 control flow gate. [spigot] analog;
#X obj 30 5117 flow.greater;
#X text 200 5117 numeric stream router;
#X obj 30 5144 flow.greater_eq;
#X text 200 5144 numeric stream router;
#X obj 30 5171 flow.group;
#X text 200 5171 group input atoms in list of specified size;
#X obj 30 5198 flow.interval;
#X text 200 5198 measure time between flow events;
#X obj 30 5225 flow.less;
#X text 200 5225 numeric stream router \, like many [moses];
#X obj 30 5252 flow.less_eq;
#X text 200 5252 numeric stream router \, like many [moses];
#X obj 30 5279 flow.list2many;
#X text 200 5279 routes list element with message selectors;
#X obj 30 5306 flow.match;
#X text 200 5306 route data flow by regexp match;
#X obj 30 5333 flow.mem;
#X text 200 5333 store data flow in memory;
#X obj 30 5360 flow.multiplex;
#X text 200 5360 control flow multiplexer;
#X obj 30 5387 flow.multiplex2~;
#X text 200 5387 audio stream stereo multiplexer;
#X obj 30 5414 flow.multiplex~;
#X text 200 5414 audio stream multiplexer;
#X obj 30 5441 flow.once;
#X text 200 5441 one message pass thru;
#X obj 30 5468 flow.pack;
#X text 200 5468 flow pack;
#X obj 30 5495 flow.pass;
#X text 200 5495 pass specified values;
#X obj 30 5522 flow.pass_if;
#X text 200 5522 pass values that accepted by predicate object;
#X obj 30 5549 flow.pipe;
#X text 200 5549 enhanced version on vanilla pipe object;
#X obj 30 5576 flow.queue;
#X text 200 5576 multi-channel control flow sync queue (or FIFO);
#X obj 30 5603 flow.record;
#X text 200 5603 flow stream recorder/player;
#X obj 30 5630 flow.reject;
#X text 200 5630 reject specified values;
#X obj 30 5657 flow.reject_if;
#X text 200 5657 reject values by predicate;
#X obj 30 5684 flow.ring;
#X text 200 5684 dataflow ring buffer;
#X obj 30 5711 flow.route;
#X text 200 5711 advanced message router;
#X obj 30 5738 flow.select;
#X text 200 5738 vanilla flow on steroids;
#X obj 30 5765 flow.space;
#X text 200 5765 space in time messages received at the same logical
time;
#X obj 30 5792 flow.speedlim;
#X text 200 5792 control stream speed limiter;
#X obj 30 5819 flow.split;
#X text 200 5819 split data flow by external side-chain predicate;
#X obj 30 5846 flow.stack;
#X text 200 5846 any message stack;
#X obj 30 5873 flow.sync;
#X text 200 5873 bus with only hot inlets;
#X obj 30 5900 flow.sync_pack;
#X text 200 5900 flow pack with all hot inlets;
#X obj 30 5927 flow.tee~;
#X text 200 5927 separate audio and control streams;
#X obj 30 5954 replace;
#X text 200 5954 Replace atoms in data stream;
#X obj 30 5981 route.float;
#X text 200 5981 separate float messages from other types;
#X obj 20 6008 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6049 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6060 flt.biquad~;
#X text 200 6060 second order IIR filter.;
#X obj 30 6087 flt.bpf12~;
#X text 200 6087 Two pole band-pass butterworth filter;
#X obj 30 6114 flt.bpf24~;
#X text 200 6114 Four pole band-pass butterworth filter;
#X obj 30 6141 flt.c_apf;
#X text 200 6141 Allpass filter coefficient calculator for biquad;
#X obj 30 6168 flt.c_bpf~;
#X text 200 6168 BPF coefficient calculator for biquad filter;
#X obj 30 6195 flt.c_highshelf~;
#X text 200 6195 Highshelf filter coefficient calculator for biquad;
#X obj 30 6222 flt.c_hpf;
#X text 200 6222 HPF coefficient calculator for biquad filter;
#X obj 30 6249 flt.c_hpf~;
#X text 200 6249 HPF coefficient calculator for biquad filter;
#X obj 30 6276 flt.c_lowshelf~;
#X text 200 6276 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6303 flt.c_lpf;
#X text 200 6303 LPF coefficient calculator for biquad filter;
#X obj 30 6330 flt.c_lpf~;
#X text 200 6330 LPF coefficient calculator for biquad filter;
#X obj 30 6357 flt.c_notch;
#X text 200 6357 Notch filter coefficient calculator for biquad;
#X obj 30 6384 flt.c_notch~;
#X text 200 6384 Band-reject coefficient calculator for biquad filter;
#X obj 30 6411 flt.c_peak~;
#X text 200 6411 Peaking equalizer calculator for biquad;
#X obj 30 6438 flt.c_pole;
#X text 200 6438 One-pole coefficient calculator for biquad filter;
#X obj 30 6465 flt.dcblock2~;
#X text 200 6465 stereo DC blocker;
#X obj 30 6492 flt.dcblock~;
#X text 200 6492 mono DC blocker;
#X obj 30 6519 flt.eq10~;
#X text 200 6519 graphic 10 band equalizer;
#X obj 30 6546 flt.eq_peak_cq~;
#X text 200 6546 constant-Q second order peaking equalizer section;
#X obj 30 6573 flt.eq_peak~;
#X text 200 6573 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6628 flt.fb_comb~;
#X text 200 6628 feedback comb filter;
#X obj 30 6655 flt.fbank5x1~;
#X text 200 6655 5 band one octave butterworth filterbank;
#X obj 30 6682 flt.ff_comb~;
#X text 200 6682 feed forward comb filter;
#X obj 30 6709 flt.freqz;
#X text 200 6709 compute the frequency response of a digital filter;
#X obj 30 6736 flt.freqz~;
#X text 200 6736 compute the frequency response of a digital filter;
#X obj 30 6763 flt.highshelf~;
#X text 200 6763 gain boost|cut above some frequency;
#X obj 30 6790 flt.hpf12~;
#X text 200 6790 High-pass second order Butterworth filter;
#X obj 30 6817 flt.hpf24~;
#X text 200 6817 High-pass fourth order Butterworth filter;
#X obj 30 6844 flt.lowshelf~;
#X text 200 6844 gain boost|cut below some frequency;
#X obj 30 6871 flt.lpf12~;
#X text 200 6871 Low-pass second order Butterworth filter;
#X obj 30 6898 flt.lpf24~;
#X text 200 6898 Low-pass fourth order Butterworth filter;
#X obj 30 6925 flt.median;
#X text 200 6925 Median control flow filter;
#X obj 30 6952 flt.moog_vcf~;
#X text 200 6952 Moog Voltage Controlled Filter;
#X obj 30 6979 flt.notch~;
#X text 200 6979 band-rejection filter;
#X obj 30 7006 flt.resonbp~;
#X text 200 7006 Simple resonant bandpass filter;
#X obj 20 7033 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7074 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7085 fx.bitdown~;
#X text 200 7085 bit downer and downsampler effect;
#X obj 30 7112 fx.chorus~;
#X text 200 7112 Chorus effect;
#X obj 30 7139 fx.distortion1~;
#X text 200 7139 distortion #1 from Guitarix effects set;
#X obj 30 7166 fx.distortion2~;
#X text 200 7166 distortion #2 from Guitarix effects set;
#X obj 30 7193 fx.distortion3~;
#X text 200 7193 simple distortion #3 from Guitarix effects set;
#X obj 30 7220 fx.distortion~;
#X text 200 7220 cubic nonlinearity distortion;
#X obj 30 7247 fx.drive~;
#X text 200 7247 Guitarix drive effect;
#X obj 30 7274 fx.drone_box~;
#X text 200 7274 mono sympathetic resonance generator;
#X obj 30 7301 fx.echo2~;
#X text 200 7301 stereo echo effect;
#X obj 30 7328 fx.echo~;
#X text 200 7328 simple echo effect;
#X obj 30 7355 fx.flanger~;
#X text 200 7355 mono flanging effect;
#X obj 30 7382 fx.freeverb2~;
#X text 200 7382 freeverb2 - stereo version of freeverb;
#X obj 30 7409 fx.freeverb~;
#X text 200 7409 freeverb - common used open-source reverb;
#X obj 30 7436 fx.freqshift~;
#X text 200 7436 frequency shifter or single-sideband ring modulation;
#X obj 30 7463 fx.granulator~;
#X text 200 7463 simple input stream granulator;
#X obj 30 7490 fx.greyhole~;
#X text 200 7490 A complex echo-like effect;
#X obj 30 7517 fx.infrev~;
#X text 200 7517 port of Infinity VST plugin from airwindows;
#X obj 30 7544 fx.looper~;
#X text 200 7544 One track looper;
#X obj 30 7571 fx.pitchshift_s~;
#X text 200 7571 signal version of fx.pitchshift~;
#X obj 30 7598 fx.pitchshift~;
#X text 200 7598 simple pitch shifter based on 2 delay lines;
#X obj 30 7625 fx.rb_pitchshift~;
#X text 200 7625 rubber band pitchshift;
#X obj 30 7652 fx.recho~;
#X text 200 7652 reversed echo effect;
#X obj 30 7679 fx.room~;
#X text 200 7679 Gardners room emulation algorithms;
#X obj 30 7706 fx.sdelay~;
#X text 200 7706 smooth delay with a feedback control;
#X obj 30 7733 fx.secho~;
#X text 200 7733 enchanced echo effect that does not click on delay
change;
#X obj 30 7760 fx.shimmer~;
#X text 200 7760 shimmer reverb effect effect;
#X obj 30 7787 fx.tapiir~;
#X text 200 7787 multi-tap delay;
#X obj 30 7814 fx.vocoder~;
#X text 200 7814 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7854 fx.wahwah~;
#X text 200 7854 digitized CryBaby wah pedal;
#X obj 30 7881 fx.zita_rev1~;
#X text 200 7881 Zita stereo reverb;
#X obj 20 7908 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7949 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7960 global.dict;
#X text 200 7960 global named dict object;
#X obj 30 7987 global.float;
#X text 200 7987 global named float object;
#X obj 30 8014 global.int;
#X text 200 8014 global named integer object;
#X obj 30 8041 global.list;
#X text 200 8041 global named list object;
#X obj 30 8068 global.mlist;
#X text 200 8068 global named mlist object;
#X obj 30 8095 global.set;
#X text 200 8095 global named set object;
#X obj 20 8122 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8163 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8174 hw.apple_smc;
#X text 200 8174 query the system management control in Apples;
#X obj 30 8201 hw.apple_sms;
#X text 200 8201 query the sudden motion sensor in Apples;
#X obj 30 8228 hw.arduino;
#X text 200 8228 Arduino device;
#X obj 30 8255 hw.cpu_temp;
#X text 200 8255 get CPU temperature;
#X obj 30 8282 hw.display;
#X text 200 8282 get/set display properties;
#X obj 30 8309 hw.kbd_light;
#X text 200 8309 Get/set keyboard light on some devices;
#X obj 30 8336 hw.serial;
#X text 200 8336 serial port device;
#X obj 20 8363 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8404 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8418 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8415 faust realtime compilation;
#X obj 30 8443 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8440 faust compiled ui object;
#X obj 20 8465 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8506 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8517 lfo.+pulse~;
#X text 200 8517 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8544 lfo.+saw~;
#X text 200 8544 Positive unit-amplitude low frequency saw wave;
#X obj 30 8571 lfo.+square~;
#X text 200 8571 Positive low frequency square wave;
#X obj 30 8598 lfo.+tri~;
#X text 200 8598 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8625 lfo.impulse~;
#X text 200 8625 Unit-amplitude low-frequency impulse train;
#X obj 30 8652 lfo.mosc~;
#X text 200 8652 multi-oscillator with various waveforms;
#X obj 30 8679 lfo.pulse~;
#X text 200 8679 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8706 lfo.saw~;
#X text 200 8706 Full-range unit-amplitude low frequency saw;
#X obj 30 8733 lfo.square~;
#X text 200 8733 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8760 lfo.tri~;
#X text 200 8760 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8787 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8828 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8839 list.^at;
#X text 200 8839 on input index(es) outputs list element(s);
#X obj 30 8866 list.^contains;
#X text 200 8866 checks if input atom is found in the list;
#X obj 30 8893 list.^search;
#X text 200 8893 on input atom returns it index in list;
#X obj 30 8920 list.all_of;
#X text 200 8920 checks if all list atoms accepted by predicate;
#X obj 30 8947 list.any_of;
#X text 200 8947 checks if at least one list element is accepted by
predicate;
#X obj 30 8974 list.append;
#X text 200 8974 append atom or list to the end of input list;
#X obj 30 9001 list.apply_to;
#X text 200 9001 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9041 list.at;
#X text 200 9041 outputs list element(s) at specified index(es);
#X obj 30 9068 list.choice;
#X text 200 9068 outputs random element from list;
#X obj 30 9095 list.contains;
#X text 200 9095 checks if input list contains specified atoms;
#X obj 30 9122 list.convolve;
#X text 200 9122 convolution for lists;
#X obj 30 9149 list.correlate;
#X text 200 9149 list cross-correlation;
#X obj 30 9176 list.count;
#X text 200 9176 output the number of items that equal to specified
value;
#X obj 30 9203 list.count_if;
#X text 200 9203 output the number of items that satisfy to external
predicate;
#X obj 30 9230 list.delta;
#X text 200 9230 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9270 list.distribution;
#X text 200 9270 list value distribution;
#X obj 30 9297 list.do;
#X text 200 9297 iterate and modify list contents via side-chain;
#X obj 30 9324 list.each;
#X text 200 9324 maps each list value via external side-chain;
#X obj 30 9351 list.enumerate;
#X text 200 9351 enumerates input list;
#X obj 30 9378 list.equal;
#X text 200 9378 checks if given lists are equal;
#X obj 30 9405 list.first;
#X text 200 9405 returns first list element;
#X obj 30 9432 list.gen;
#X text 200 9432 generates list of specified length via external generator;
#X obj 30 9459 list.histogram;
#X text 200 9459 outputs distribution histogram;
#X obj 30 9486 list.insert;
#X text 200 9486 insert atom or list to the specified position of input
list;
#X obj 30 9513 list.integrator;
#X text 200 9513 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9553 list.last;
#X text 200 9553 output last list element;
#X obj 30 9580 list.length;
#X text 200 9580 output the number of atoms in the list;
#X obj 30 9607 list.max;
#X text 200 9607 output largest element in the list;
#X obj 30 9634 list.mean;
#X text 200 9634 calculates average of list of floats;
#X obj 30 9661 list.min;
#X text 200 9661 returns smallest element in the list;
#X obj 30 9688 list.none_of;
#X text 200 9688 checks if none of list atoms is accepted by predicate;
#X obj 30 9715 list.normalize;
#X text 200 9715 normalizes float list values to get their sum = 1.0;
#X obj 30 9742 list.pass;
#X text 200 9742 leave in list only specified elements;
#X obj 30 9769 list.pass_if;
#X text 200 9769 leave only elements accepted by predicate;
#X obj 30 9796 list.prepend;
#X text 200 9796 prepend atom or list before input list;
#X obj 30 9823 list.product;
#X text 200 9823 calculates product of floats in list;
#X obj 30 9850 list.range;
#X text 200 9850 output list smallest and largest value;
#X obj 30 9877 list.reduce;
#X text 200 9877 apply function of two arguments cumulatively to the
list;
#X obj 30 9904 list.reject;
#X text 200 9904 remove specified element from list;
#X obj 30 9931 list.remove;
#X text 200 9931 remove list element(s) at specified positions;
#X obj 30 9958 list.remove_if;
#X text 200 9958 remove elements by predicate;
#X obj 30 9985 list.repack;
#X text 200 9985 repack list to specified size;
#X obj 30 10012 list.repeat;
#X text 200 10012 output new list by repeating input list specified
times;
#X obj 30 10039 list.resample;
#X text 200 10039 resample list with specified ratio;
#X obj 30 10066 list.resize;
#X text 200 10066 changes list size;
#X obj 30 10093 list.reverse;
#X text 200 10093 reverses the order of the elements in the list;
#X obj 30 10120 list.rldecode;
#X text 200 10120 Run-length list decoder (RLE);
#X obj 30 10147 list.rlencode;
#X text 200 10147 RLE (run-length encoding) for lists;
#X obj 30 10174 list.rotate;
#X text 200 10174 rotates list;
#X obj 30 10201 list.route;
#X text 200 10201 acts like [route] but for lists;
#X obj 30 10228 list.rundiff;
#X text 200 10228 running difference;
#X obj 30 10255 list.runsum;
#X text 200 10255 running sum;
#X obj 30 10282 list.search;
#X text 200 10282 search specified items in input list;
#X obj 30 10309 list.separate;
#X text 200 10309 sends list elements one by one separately;
#X obj 30 10336 list.seq;
#X text 200 10336 numeric sequence list generator;
#X obj 30 10363 list.set;
#X text 200 10363 set list value at specified position;
#X obj 30 10390 list.shift;
#X text 200 10390 shifts the contents of the list with linear interpolation;
#X obj 30 10417 list.shuffle;
#X text 200 10417 randomly rearranges elements in list;
#X obj 30 10444 list.slice;
#X text 200 10444 extract sublist;
#X obj 30 10471 list.sort;
#X text 200 10471 sorts list values by ascending order;
#X obj 30 10498 list.sort_with;
#X text 200 10498 sort list with user defined side-chain;
#X obj 30 10525 list.split;
#X text 200 10525 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 10565 list.stretch;
#X text 200 10565 stretches list - changes its size with linear interpolation;
#X obj 30 10592 list.sum;
#X text 200 10592 calculates sum of floats in list;
#X obj 30 10619 list.unique;
#X text 200 10619 removes duplicates from input list;
#X obj 30 10646 list.unpack;
#X text 200 10646 unpack list elements to separate outlets;
#X obj 30 10673 list.unzip;
#X text 200 10673 splits list to N lists \, each to separate output;
#X obj 30 10700 list.walk;
#X text 200 10700 Walks thru the list;
#X obj 30 10727 list.zip;
#X text 200 10727 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10782 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10823 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10834 live.capture~;
#X text 200 10834 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10874 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10915 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10926 local.dict;
#X text 200 10926 local named dict object;
#X obj 30 10953 local.float;
#X text 200 10953 canvas-scoped named float variable;
#X obj 30 10980 local.int;
#X text 200 10980 canvas-scoped named integer variable;
#X obj 30 11007 local.list;
#X text 200 11007 local named list object;
#X obj 30 11034 local.mlist;
#X text 200 11034 local named mlist object;
#X obj 30 11061 local.set;
#X text 200 11061 local named set object;
#X obj 20 11088 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11129 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11140 math.abs;
#X text 200 11140 absolute value function;
#X obj 30 11167 math.abs~;
#X text 200 11167 absolute value function for signals;
#X obj 30 11194 math.acos;
#X text 200 11194 arc cosine function;
#X obj 30 11221 math.acosh;
#X text 200 11221 inverse hyperbolic cosine function;
#X obj 30 11248 math.acosh~;
#X text 200 11248 hyperbolic arc cosine for signals;
#X obj 30 11275 math.acos~;
#X text 200 11275 arc cosine function for signals;
#X obj 30 11302 math.and;
#X text 200 11302 operation AND for multiple arguments;
#X obj 30 11329 math.approx;
#X text 200 11329 check if input value approximately equal to pattern;
#X obj 30 11356 math.asin;
#X text 200 11356 arc sine function;
#X obj 30 11383 math.asinh;
#X text 200 11383 inverse hyperbolic sine function;
#X obj 30 11410 math.asinh~;
#X text 200 11410 hyperbolic arc sine for signals;
#X obj 30 11437 math.asin~;
#X text 200 11437 arc sine for signals;
#X obj 30 11464 math.atan;
#X text 200 11464 arc tangent function;
#X obj 30 11491 math.atanh;
#X text 200 11491 inverse hyperbolic tangent function;
#X obj 30 11518 math.atanh~;
#X text 200 11518 hyperbolic arc tangent for signals;
#X obj 30 11545 math.atan~;
#X text 200 11545 arc tangent for signals;
#X obj 30 11572 math.binomial;
#X text 200 11572 binomial coefficient calculator;
#X obj 30 11599 math.cabs~;
#X text 200 11599 magnitude of a complex signals;
#X obj 30 11626 math.carg~;
#X text 200 11626 phase angle of a complex signals;
#X obj 30 11653 math.cbrt;
#X text 200 11653 cube root function;
#X obj 30 11680 math.cbrt~;
#X text 200 11680 cube root function for signals;
#X obj 30 11707 math.cdiv~;
#X text 200 11707 division of complex signals;
#X obj 30 11734 math.ceil;
#X text 200 11734 round to smallest integral value not less than input
value;
#X obj 30 11761 math.ceil~;
#X text 200 11761 round to smallest integral value not less than input
value;
#X obj 30 11788 math.cexp~;
#X text 200 11788 exponent of a complex signals;
#X obj 30 11815 math.cmul~;
#X text 200 11815 multiplication of complex signals;
#X obj 30 11842 math.cos;
#X text 200 11842 cosine function;
#X obj 30 11869 math.cosh;
#X text 200 11869 hyperbolic cosine function;
#X obj 30 11896 math.cosh~;
#X text 200 11896 hyperbolic cosine for signals;
#X obj 30 11923 math.cos~;
#X text 200 11923 cosine function;
#X obj 30 11950 math.div;
#X text 200 11950 division (on lists too);
#X obj 30 11977 math.e;
#X text 200 11977 mathematical constant \, base of the natural logarithm;
#X obj 30 12004 math.erf;
#X text 200 12004 error function;
#X obj 30 12031 math.erf~;
#X text 200 12031 error function for signals;
#X obj 30 12058 math.exp;
#X text 200 12058 exponential functions;
#X obj 30 12085 math.exp2;
#X text 200 12085 exponential functions;
#X obj 30 12112 math.exp2~;
#X text 200 12112 base-2 exponential for signal;
#X obj 30 12139 math.expr;
#X text 200 12139 dynamic [expr];
#X obj 30 12166 math.exp~;
#X text 200 12166 base-e exponential for signal;
#X obj 30 12193 math.floor;
#X text 200 12193 round to largest integral value not greater than
x;
#X obj 30 12220 math.floor~;
#X text 200 12220 round to largest integral value not greater than
x;
#X obj 30 12247 math.gamma;
#X text 200 12247 gamma function;
#X obj 30 12274 math.gamma~;
#X text 200 12274 gamma function for floating point signals;
#X obj 30 12301 math.gcd;
#X text 200 12301 calculate greatest common divisor;
#X obj 30 12328 math.inf;
#X text 200 12328 infinity value that cannot be represented accurately;
#X obj 30 12355 math.inf~;
#X text 200 12355 inifinity signal generator;
#X obj 30 12382 math.lcm;
#X text 200 12382 calculate least common multiple;
#X obj 30 12409 math.lgamma;
#X text 200 12409 natural logarithm of the absolute value of the gamma
function;
#X obj 30 12436 math.lgamma~;
#X text 200 12436 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 12476 math.log;
#X text 200 12476 natural logarithm;
#X obj 30 12503 math.log10;
#X text 200 12503 logarithm functions;
#X obj 30 12530 math.log10~;
#X text 200 12530 natural logarithm;
#X obj 30 12557 math.log2;
#X text 200 12557 logarithm functions;
#X obj 30 12584 math.log2~;
#X text 200 12584 base-2 logarithm;
#X obj 30 12611 math.log~;
#X text 200 12611 natural logarithm;
#X obj 30 12638 math.mul;
#X text 200 12638 multiplication (on lists too);
#X obj 30 12665 math.nan;
#X text 200 12665 Not a Number \, unrepresentable value;
#X obj 30 12692 math.nan~;
#X text 200 12692 signal NaN;
#X obj 30 12719 math.neg;
#X text 200 12719 negate function;
#X obj 30 12746 math.or;
#X text 200 12746 operation OR for multiple arguments;
#X obj 30 12773 math.pi;
#X text 200 12773 mathematical constant;
#X obj 30 12800 math.pi~;
#X text 200 12800 mathematical constant;
#X obj 30 12827 math.polyeval;
#X text 200 12827 evaluates the polynomial described by the coefficients
list;
#X obj 30 12854 math.reciprocal;
#X text 200 12854 calculate reciprocal number;
#X obj 30 12881 math.reciprocal~;
#X text 200 12881 calculate reciprocal number for signals;
#X obj 30 12908 math.round;
#X text 200 12908 round to integral value \, regardless of rounding
direction;
#X obj 30 12935 math.round~;
#X text 200 12935 signal round;
#X obj 30 12962 math.sign;
#X text 200 12962 sign function;
#X obj 30 12989 math.sin;
#X text 200 12989 sine function;
#X obj 30 13016 math.sinh;
#X text 200 13016 hyperbolic sine function;
#X obj 30 13043 math.sinh~;
#X text 200 13043 hyperbolic sine for signals;
#X obj 30 13070 math.sin~;
#X text 200 13070 sine function;
#X obj 30 13097 math.sqrt;
#X text 200 13097 square root function;
#X obj 30 13124 math.sqrt~;
#X text 200 13124 square root for signal;
#X obj 30 13151 math.squared;
#X text 200 13151 value square;
#X obj 30 13178 math.squared~;
#X text 200 13178 signal value square;
#X obj 30 13205 math.sync_add;
#X text 200 13205 sync addition;
#X obj 30 13232 math.sync_and;
#X text 200 13232 sync logical AND operation;
#X obj 30 13259 math.sync_div;
#X text 200 13259 sync division;
#X obj 30 13286 math.sync_eq;
#X text 200 13286 sync equal numbers check;
#X obj 30 13313 math.sync_ge;
#X text 200 13313 sync greater equal numbers compare;
#X obj 30 13340 math.sync_gt;
#X text 200 13340 sync greater then numbers compare;
#X obj 30 13367 math.sync_le;
#X text 200 13367 sync less equal numbers compare;
#X obj 30 13394 math.sync_lshift;
#X text 200 13394 sync signed bit left shift;
#X obj 30 13421 math.sync_lt;
#X text 200 13421 sync less then numbers compare;
#X obj 30 13448 math.sync_mod;
#X text 200 13448 sync remainder of modulo division (float or integer);
#X obj 30 13475 math.sync_mul;
#X text 200 13475 sync multiplication;
#X obj 30 13502 math.sync_ne;
#X text 200 13502 sync numbers for not equality;
#X obj 30 13529 math.sync_or;
#X text 200 13529 sync logical OR operation;
#X obj 30 13556 math.sync_rshift;
#X text 200 13556 sync signed bit right shift;
#X obj 30 13583 math.sync_sub;
#X text 200 13583 sync subtraction;
#X obj 30 13610 math.sync_xor;
#X text 200 13610 sync logical XOR operation;
#X obj 30 13637 math.tan;
#X text 200 13637 tangent function;
#X obj 30 13664 math.tanh;
#X text 200 13664 hyperbolic tangent function;
#X obj 30 13691 math.tanh~;
#X text 200 13691 hyperbolic tangent for signals;
#X obj 30 13718 math.tan~;
#X text 200 13718 tangent function;
#X obj 30 13745 math.trunc;
#X text 200 13745 truncate to integer value;
#X obj 30 13772 math.trunc~;
#X text 200 13772 truncate to integer value;
#X obj 20 13799 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13840 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13851 midi.cc;
#X text 200 13851 enhanced version of vanilla ctlin;
#X obj 30 13878 midi.clock;
#X text 200 13878 midi clock toolbox;
#X obj 30 13905 midi.ctl2str;
#X text 200 13905 convert Standard MIDI Controllers number to name;
#X obj 30 13932 midi.event2ctl;
#X text 200 13932 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13959 midi.event2note;
#X text 200 13959 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13986 midi.event2prg;
#X text 200 13986 convert MidiEvent message to midi program change
value;
#X obj 30 14013 midi.file;
#X text 200 14013 standard midi file SMF reader and writer;
#X obj 30 14040 midi.kbd;
#X text 200 14040 computer keyboard midi;
#X obj 30 14067 midi.key2str;
#X text 200 14067 convert key number to SPN name according to tonality;
#X obj 30 14094 midi.modus;
#X text 200 14094 snap/skip midi pitches according modus;
#X obj 30 14121 midi.oct;
#X text 200 14121 midi octave transpose;
#X obj 30 14148 midi.prg2str;
#X text 200 14148 convert GM Instrument number to name (string or symbol);
#X obj 30 14175 midi.split;
#X text 200 14175 midi note splitter;
#X obj 30 14202 midi.sustain;
#X text 200 14202 sustain pedal emulation;
#X obj 30 14229 midi.sysex;
#X text 200 14229 sysex input messages as list;
#X obj 30 14256 midi.track;
#X text 200 14256 extract track from MidiFile;
#X obj 30 14283 midi.tuning;
#X text 200 14283 apply tuning to midi messages;
#X obj 30 14310 midi.vramp;
#X text 200 14310 apply crescendo or diminuendo for midi message flow;
#X obj 30 14337 midi.vrand;
#X text 200 14337 midi velocity randomizer;
#X obj 20 14364 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 14405 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14416 click~;
#X text 200 14416 Output single impulse on bang;
#X obj 30 14443 fluid~;
#X text 200 14443 FluidSynth SoundFont 2 player;
#X obj 30 14470 modplug~;
#X text 200 14470 MOD file player (using libmodplug);
#X obj 30 14497 risset.gliss;
#X text 200 14497 Sheppard/Risset glissando calculator;
#X obj 30 14524 sfizz~;
#X text 200 14524 SFZ format sample player;
#X obj 30 14551 speech.flite;
#X text 200 14551 render speech to array;
#X obj 30 14578 speech.flite~;
#X text 200 14578 render speech to array;
#X obj 20 14605 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 14646 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14657 loadexpr;
#X text 200 14657 send message when patch loads;
#X obj 30 14684 msg;
#X text 200 14684 message constructor;
#X obj 30 14711 msg.after;
#X text 200 14711 send specified message after incoming message;
#X obj 30 14738 msg.onload;
#X text 200 14738 send message when patch loads;
#X obj 30 14765 msg.sched;
#X text 200 14765 message scheduler;
#X obj 20 14792 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 14833 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14844 net.host2ip;
#X text 200 14844 returns IP address by DNS name;
#X obj 20 14871 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14912 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14923 noise.baker;
#X text 200 14923 Part of a-chaos library;
#X obj 30 14950 noise.clifford;
#X text 200 14950 Part of a-chaos library;
#X obj 30 14977 noise.collatz;
#X text 200 14977 Part of a-chaos library;
#X obj 30 15004 noise.crackle~;
#X text 200 15004 sparse noise generator;
#X obj 30 15031 noise.duffing;
#X text 200 15031 Part of a-chaos library;
#X obj 30 15058 noise.ginger;
#X text 200 15058 Gingerbreadman map chaotic generator;
#X obj 30 15085 noise.henon;
#X text 200 15085 Part of a-chaos library;
#X obj 30 15112 noise.henon_heilles;
#X text 200 15112 Part of a-chaos library;
#X obj 30 15139 noise.henon_phase;
#X text 200 15139 Part of a-chaos library;
#X obj 30 15166 noise.henonf;
#X text 200 15166 Part of a-chaos library;
#X obj 30 15193 noise.ikeda;
#X text 200 15193 Part of a-chaos library;
#X obj 30 15220 noise.lfreq0~;
#X text 200 15220 sampled/held noise (piecewise constant);
#X obj 30 15247 noise.lfreq~;
#X text 200 15247 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 15274 noise.lorenz;
#X text 200 15274 Part of a-chaos library;
#X obj 30 15301 noise.lyapunov;
#X text 200 15301 Part of a-chaos library;
#X obj 30 15328 noise.navier_stokes;
#X text 200 15328 Part of a-chaos library;
#X obj 30 15355 noise.pink~;
#X text 200 15355 Pink noise generator;
#X obj 30 15382 noise.rossler;
#X text 200 15382 Part of a-chaos library;
#X obj 30 15409 noise.stein;
#X text 200 15409 Part of a-chaos library;
#X obj 30 15436 noise.torus;
#X text 200 15436 Part of a-chaos library;
#X obj 30 15463 noise.verhulst;
#X text 200 15463 Part of a-chaos library;
#X obj 30 15490 noise.white~;
#X text 200 15490 White noise generator;
#X obj 20 15517 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 15558 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15569 osc.blit~;
#X text 200 15569 Bandlimited impulse train oscillator;
#X obj 30 15596 osc.impulse~;
#X text 200 15596 Bandlimited impulse train generator;
#X obj 30 15623 osc.pulse~;
#X text 200 15623 Bandlimited pulse train oscillator;
#X obj 30 15650 osc.saw4~;
#X text 200 15650 Bandlimited sawtooth wave;
#X obj 30 15677 osc.saw~;
#X text 200 15677 Alias-free sawtooth wave;
#X obj 30 15704 osc.sinfb~;
#X text 200 15704 Sine oscilator with feedback;
#X obj 30 15731 osc.sin~;
#X text 200 15731 Sine wave oscillator;
#X obj 30 15758 osc.square~;
#X text 200 15758 Bandlimited square wave oscillator;
#X obj 30 15785 osc.tri~;
#X text 200 15785 Bandlimited triangle wave oscillator;
#X obj 20 15812 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 15853 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15864 canvas.current;
#X text 200 15864 verbose information about current canvas;
#X obj 30 15891 canvas.dir;
#X text 200 15891 current canvas directory;
#X obj 30 15918 canvas.name;
#X text 200 15918 current canvas name;
#X obj 30 15945 canvas.path;
#X text 200 15945 current canvas fullpath;
#X obj 30 15972 canvas.top;
#X text 200 15972 verbose information about top-level canvas;
#X obj 30 15999 patch.args;
#X text 200 15999 Get patch or subpatch arguments;
#X obj 30 16026 patch.deps;
#X text 200 16026 patch dependencies: used objects and abstractions;
#X obj 30 16053 patch.tree;
#X text 200 16053 patch tree;
#X obj 20 16080 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 16121 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16132 file.size;
#X text 200 16132 output file size;
#X obj 30 16159 path.basename;
#X text 200 16159 outputs filename portion of pathname;
#X obj 30 16186 path.dirname;
#X text 200 16186 outputs directory portion of pathname;
#X obj 30 16213 path.exists;
#X text 200 16213 checks if given path exists;
#X obj 30 16240 path.is_dir;
#X text 200 16240 check if path is directory;
#X obj 30 16267 path.lsdir;
#X text 200 16267 list directory contents;
#X obj 30 16294 path.normalize;
#X text 200 16294 normalize file paths;
#X obj 30 16321 path.search;
#X text 200 16321 file search;
#X obj 30 16348 path.split;
#X text 200 16348 file path split;
#X obj 20 16375 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 16416 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16427 is_any;
#X text 200 16427 checks if input data has *any* type;
#X obj 30 16454 is_bang;
#X text 200 16454 checks if input data has *bang* type;
#X obj 30 16481 is_data;
#X text 200 16481 checks if input data has *data* type;
#X obj 30 16508 is_dict;
#X text 200 16508 checks if input data has *dict* type;
#X obj 30 16535 is_even;
#X text 200 16535 checks if input number is even;
#X obj 30 16562 is_file;
#X text 200 16562 checks if file exists and accessible;
#X obj 30 16589 is_float;
#X text 200 16589 checks if input data has *float* type;
#X obj 30 16616 is_list;
#X text 200 16616 checks if input data has *list* type;
#X obj 30 16643 is_odd;
#X text 200 16643 checks if input number is odd;
#X obj 30 16670 is_pointer;
#X text 200 16670 checks if input data has *pointer* type;
#X obj 30 16697 is_symbol;
#X text 200 16697 checks if input data has *symbol* type;
#X obj 20 16724 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 16765 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16776 preset.float;
#X text 200 16776 load/store float preset;
#X obj 30 16803 preset.list;
#X text 200 16803 load/store symbol preset;
#X obj 30 16830 preset.storage;
#X text 200 16830 preset storage control;
#X obj 30 16857 preset.symbol;
#X text 200 16857 load/store symbol preset;
#X obj 20 16884 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 16925 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16936 patch.props;
#X text 200 16936 patch properties manager;
#X obj 30 16963 prop;
#X text 200 16963 get/set named property value for subpatch or abstraction;
#X obj 30 16990 prop.declare;
#X text 200 16990 declare named property for subpatch or abstraction;
#X obj 30 17017 prop.get;
#X text 200 17017 get property from connected object/subpatch/abstraction;
#X obj 30 17044 prop.get~;
#X text 200 17044 Property extractor from sound stream;
#X obj 30 17071 prop.join;
#X text 200 17071 join property to main data flow;
#X obj 30 17098 prop.random;
#X text 200 17098 property randomizer;
#X obj 30 17125 prop.set;
#X text 200 17125 set property for connected object/subpatch/abstraction;
#X obj 30 17152 prop.split;
#X text 200 17152 separate properties from dataflow;
#X obj 20 17179 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 17220 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17231 proto.firmata;
#X text 200 17231 Firmata Arduino protocol support;
#X obj 30 17258 proto.midi;
#X text 200 17258 raw midi encoder/parser;
#X obj 30 17285 proto.midi.cc;
#X text 200 17285 raw midi CC encoder/parser;
#X obj 30 17312 proto.midi.sysex;
#X text 200 17312 raw midi SYSex encoder/parser;
#X obj 30 17339 proto.mpv;
#X text 200 17339 mpv video player control;
#X obj 30 17366 proto.sp.alpaca;
#X text 200 17366 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 17393 proto.xtouch_ext;
#X text 200 17393 Behringer XTouch Extender XMidi protocol;
#X obj 20 17420 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 17461 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17472 random.atom;
#X text 200 17472 weighted atom generation from specified list;
#X obj 30 17499 random.discrete;
#X text 200 17499 random weighted integers on interval [0 \, n);
#X obj 30 17526 random.float;
#X text 200 17526 uniform random float generator in specified range;
#X obj 30 17553 random.gauss;
#X text 200 17553 gaussian random distribution;
#X obj 30 17580 random.int;
#X text 200 17580 uniform random integer generator in specified range;
#X obj 30 17607 random.linear;
#X text 200 17607 random linear distribution;
#X obj 30 17634 random.pw_const;
#X text 200 17634 piecewise constant random distribution;
#X obj 30 17661 random.pw_lin;
#X text 200 17661 piecewise linear random distribution;
#X obj 20 17688 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 17729 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17740 samp.time~;
#X text 200 17740 sample counter;
#X obj 20 17767 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 17808 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17819 seq.arp;
#X text 200 17819 sequence arpeggiator;
#X obj 30 17846 seq.bangs;
#X text 200 17846 bang sequencer;
#X obj 30 17873 seq.counter;
#X text 200 17873 sequencer counter;
#X obj 30 17900 seq.life;
#X text 200 17900 Conway gamw of life sequencer;
#X obj 30 17927 seq.matrix;
#X text 200 17927 sequencer control for ui.matrix;
#X obj 30 17954 seq.nbangs;
#X text 200 17954 output specified number of bang with time intervals;
#X obj 30 17981 seq.phasor;
#X text 200 17981 control rate phasor (saw) generator;
#X obj 30 18008 seq.toggles;
#X text 200 18008 toggle sequencer;
#X obj 30 18035 sequencer;
#X text 200 18035 basic sequence player;
#X obj 20 18062 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 18103 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18114 snd.file;
#X text 200 18114 Sound file loader on steroids;
#X obj 20 18141 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 18182 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18193 hoa.2d.decoder~;
#X text 200 18193 hoa 2d decoder;
#X obj 30 18220 hoa.2d.encoder~;
#X text 200 18220 hoa 2d encoder;
#X obj 30 18247 hoa.2d.map~;
#X text 200 18247 a 2d ambisonic multisource spatializer;
#X obj 30 18274 hoa.2d.optim~;
#X text 200 18274 a 2D ambisonic optimization tool;
#X obj 30 18301 hoa.2d.projector~;
#X text 200 18301 a plane waves decomposer from circular harmonics
domain;
#X obj 30 18328 hoa.2d.recomposer~;
#X text 200 18328 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 18368 hoa.2d.rotate~;
#X text 200 18368 a 2D ambisonic sound field rotation;
#X obj 30 18395 hoa.2d.wider~;
#X text 200 18395 a 2d fractional ambisonic order simulator;
#X obj 30 18422 hoa.@process;
#X text 200 18422 process properties manager for hoa.process~;
#X obj 30 18449 hoa.in;
#X text 200 18449 message inlet for a patcher loaded by hoa.process~;
#X obj 30 18476 hoa.in~;
#X text 200 18476 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18503 hoa.out;
#X text 200 18503 message outlet for a patcher loaded by hoa.process~;
#X obj 30 18530 hoa.out~;
#X text 200 18530 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18557 hoa.process~;
#X text 200 18557 patcher loader for multichannel processing;
#X obj 30 18587 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 18584 a 2d ambisonic harmonic scope;
#X obj 30 18609 pan.cos~;
#X text 200 18609 two channel equal power sine/cosine panner;
#X obj 30 18636 pan.linsig~;
#X text 200 18636 two channel linear panner with signal control;
#X obj 30 18663 pan.lin~;
#X text 200 18663 two channel linear panner;
#X obj 30 18690 pan.spread~;
#X text 200 18690 spreads input channels across the stereo field;
#X obj 30 18717 pan.sqrt~;
#X text 200 18717 two channel equal power square root panner;
#X obj 30 18744 spat.pan4~;
#X text 200 18744 GMEM SPAT: 4-outputs spatializer;
#X obj 30 18771 spat.pan8~;
#X text 200 18771 GMEM SPAT: 8-outputs spatializer;
#X obj 30 18798 spat.zita6x8~;
#X text 200 18798 spat with 6 inputs sources to 8 channel output;
#X obj 30 18825 spat.zita8~;
#X text 200 18825 8 channel reverb spatializer;
#X obj 20 18852 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 18893 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18904 string;
#X text 200 18904 string constructor;
#X obj 30 18931 string.contains;
#X text 200 18931 checks if string contains specified substring;
#X obj 30 18958 string.ends_with;
#X text 200 18958 checks if string ends with specified substring;
#X obj 30 18985 string.equal;
#X text 200 18985 check strings or symbols for equality;
#X obj 30 19012 string.format;
#X text 200 19012 formats string like printf.;
#X obj 30 19039 string.join;
#X text 200 19039 joins (concatenates) strings with separator;
#X obj 30 19066 string.length;
#X text 200 19066 number of characters in string (unicode supported);
#X obj 30 19093 string.match;
#X text 200 19093 check if string match regular expression;
#X obj 30 19120 string.remove;
#X text 200 19120 remove substring from input string;
#X obj 30 19147 string.replace;
#X text 200 19147 replace from one substring to another in input string;
#X obj 30 19174 string.split;
#X text 200 19174 split string or symbol by separator;
#X obj 30 19201 string.starts_with;
#X text 200 19201 checks if string starts with specified substring;
#X obj 30 19228 string.substr;
#X text 200 19228 extract substring from input string;
#X obj 30 19255 string2symbol;
#X text 200 19255 converts string to symbol;
#X obj 20 19282 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 19323 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19334 symbol.equal;
#X text 200 19334 check symbols for equality;
#X obj 30 19361 symbol.length;
#X text 200 19361 number of characters in symbol (unicode supported);
#X obj 30 19388 symbol.num_compare;
#X text 200 19388 numeric symbol compare;
#X obj 30 19415 symbol2any;
#X text 200 19415 converts symbol or string to message;
#X obj 30 19442 symbol2intlist;
#X text 200 19442 converts symbol to list of character codes;
#X obj 20 19469 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 19510 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19521 synth.bee3~;
#X text 200 19521 Hammond-oid organ FM synthesis instrument;
#X obj 30 19548 synth.birds~;
#X text 200 19548 bird singing generator;
#X obj 30 19575 synth.church_bell~;
#X text 200 19575 generic church bell modal model;
#X obj 30 19602 synth.dubdub~;
#X text 200 19602 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 19642 synth.dx7~;
#X text 200 19642 FAUST dx7 implementation;
#X obj 30 19669 synth.eguitar~;
#X text 200 19669 simple electric guitar model with steel strings;
#X obj 30 19696 synth.english_bell~;
#X text 200 19696 english church bell modal model;
#X obj 30 19723 synth.fgrain~;
#X text 200 19723 file granulator from STK;
#X obj 30 19750 synth.french_bell~;
#X text 200 19750 french church bell modal model;
#X obj 30 19777 synth.german_bell~;
#X text 200 19777 german church bell modal model;
#X obj 30 19804 synth.glass_harm~;
#X text 200 19804 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 19831 synth.glitch~;
#X text 200 19831 Glitch synthesizer by naivesound;
#X obj 30 19858 synth.harpsichord~;
#X text 200 19858 waveguide commuted harpsichord;
#X obj 30 19885 synth.kick~;
#X text 200 19885 low-kick synth from Guitarix project;
#X obj 30 19912 synth.ks~;
#X text 200 19912 Karplus-Strong string;
#X obj 30 19939 synth.marimba~;
#X text 200 19939 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 19979 synth.piano~;
#X text 200 19979 waveguide commuted piano;
#X obj 30 20006 synth.rhodey~;
#X text 200 20006 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 20033 synth.risset_arp~;
#X text 200 20033 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 20060 synth.risset_bell~;
#X text 200 20060 Jean Claude Risset's bell synth;
#X obj 30 20087 synth.risset_tone~;
#X text 200 20087 Jean Claude Risset's endless glissando;
#X obj 30 20114 synth.russian_bell~;
#X text 200 20114 russian church bell modal model;
#X obj 30 20141 synth.shakers~;
#X text 200 20141 various percussion sounds from STK library;
#X obj 30 20168 synth.sitar~;
#X text 200 20168 STK sitar;
#X obj 30 20195 synth.snare~;
#X text 200 20195 Snare drum synth from Guitarix project;
#X obj 30 20222 synth.standard_bell~;
#X text 200 20222 german church bell modal model;
#X obj 30 20249 synth.tube_bell~;
#X text 200 20249 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 20276 synth.wurley~;
#X text 200 20276 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 20303 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 20344 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20355 system.colorpanel;
#X text 200 20355 System color panel dialog popup;
#X obj 30 20382 system.cursor;
#X text 200 20382 Output cursor motion \, mousewheel and button clicks;
#X obj 30 20409 system.exec;
#X text 200 20409 run external command in separate process;
#X obj 30 20436 system.exit;
#X text 200 20436 quit PureData;
#X obj 30 20463 system.getenv;
#X text 200 20463 Get system environment variables;
#X obj 30 20490 system.hostname;
#X text 200 20490 outputs system hostname;
#X obj 30 20517 system.memsize;
#X text 200 20517 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 20557 system.memused;
#X text 200 20557 returns the process physical memory use - current
and peak;
#X obj 30 20584 system.screen_size;
#X text 200 20584 returns current screen size in pixels;
#X obj 20 20611 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 20652 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20663 tl.bang;
#X text 200 20663 Timeline bang (with possible delay);
#X obj 30 20693 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 20690 Timeline section;
#X obj 30 20715 tl.timeline;
#X text 200 20715 Timeline - event scheduler;
#X obj 30 20742 tl.toggle;
#X text 200 20742 Timeline bang;
#X obj 30 20769 tl.transport;
#X text 200 20769 Timeline transport control;
#X obj 20 20796 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 20837 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20851 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 20848 array view with cursor and selection;
#X obj 30 20876 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 20873 A bang... that's all;
#X obj 30 20901 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 20898 button widget;
#X obj 30 20926 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 20923 colorchooser widget;
#X obj 30 20951 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 20948 Display GUI object;
#X obj 30 20976 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 20973 GUI for turning DSP on/off;
#X obj 30 21001 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 20998 envelope editor widget;
#X obj 30 21026 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 21023 UI filter object calculator for biquad filter;
#X obj 30 21051 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 21048 UI filter object based on biquad filter;
#X obj 30 21076 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 21073 UI stereo gain control;
#X obj 30 21101 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 21098 UI gain control;
#X obj 30 21126 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 21123 simple icon with button capabilities;
#X obj 30 21151 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 21148 value increment/decrement;
#X obj 30 21176 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 21173 keyboard widget;
#X obj 30 21201 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 21198 knob widget;
#X obj 30 21226 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 21223 simple label widget;
#X obj 30 21251 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 21248 Hyperlink widget;
#X obj 30 21276 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 21273 The matrix of toggles has you.;
#X obj 30 21301 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 21298 Dropdown menu;
#X obj 30 21326 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 21323 Shows peak and rms signal level;
#X obj 30 21351 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 21348 incoming MIDI message viewport;
#X obj 30 21376 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 21373 filter mouse events from ui objects;
#X obj 30 21401 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 21398 routes mouse events from ui objects;
#X obj 30 21426 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 21423 counterpart of the vanilla [nbx];
#X obj 30 21451 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 21448 counterpart of the vanilla [nbx] for signal;
#X obj 30 21476 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 21473 signal plotter;
#X obj 30 21501 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 21498 2D slider in polar coordinates;
#X obj 30 21526 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 21523 Preset manager;
#X obj 30 21551 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 21548 counterpart of the vanilla radio toggle;
#X obj 30 21576 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 21573 range slider;
#X obj 30 21601 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 21598 Scope GUI object;
#X obj 30 21626 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 21623 counterpart of the vanilla slider;
#X obj 30 21651 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 21648 2D slider widget;
#X obj 30 21676 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 21673 Multiple slider widget;
#X obj 30 21701 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 21698 Spectroscope GUI object;
#X obj 30 21726 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 21723 displays a list of text buttons or text toggles;
#X obj 30 21751 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 21748 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 21773 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 21773 version: v0.9.4 \, license: GPL3;
#X obj 20 21801 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 21824 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 21788 msg 0;
#X obj 670 21823 switch~;
#X connect 1518 0 1519 0;