#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 30 116 data.bimap;
#X text 200 116 bidirectional map container;
#X obj 30 143 data.color;
#X text 200 143 Color datatype;
#X obj 30 170 data.copy;
#X text 200 170 make copy for any data types: MList \, Set etc...;
#X obj 30 197 data.dict;
#X text 200 197 dictionary container: store values by key;
#X obj 30 224 data.fifo;
#X text 200 224 First-In-First-Out (FIFO) queue data container;
#X obj 30 251 data.float;
#X text 200 251 robust float object;
#X obj 30 278 data.int;
#X text 200 278 robust int object;
#X obj 30 305 data.list;
#X text 200 305 list container;
#X obj 30 332 data.mlist;
#X text 200 332 multidimensional list container;
#X obj 30 359 data.set;
#X text 200 359 container that store unique elements;
#X obj 30 386 data.set2list;
#X text 200 386 converts set to list;
#X obj 30 413 dict.contains;
#X text 200 413 predicate to check if dict contains a keys;
#X obj 30 440 dict.each;
#X text 200 440 map each value in dict;
#X obj 30 467 dict.from_list;
#X text 200 467 creates dictionary from list;
#X obj 30 494 dict.get;
#X text 200 494 output dict values;
#X obj 30 521 dict.keys;
#X text 200 521 get list of dict keys;
#X obj 30 548 dict.pass;
#X text 200 548 passes specified keys in dict;
#X obj 30 575 dict.reject;
#X text 200 575 rejects specified keys from dict;
#X obj 30 602 dict.size;
#X text 200 602 dictionary size;
#X obj 30 629 dict.to_list;
#X text 200 629 converts dictionary to plain list;
#X obj 30 656 dict.values;
#X text 200 656 dictionary values as mlist;
#X obj 30 683 mlist.flatten;
#X text 200 683 flatten nested mlist;
#X obj 30 710 rtree.to_list;
#X text 200 710 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 737 set.contains;
#X text 200 737 check if specified element is in set;
#X obj 30 764 set.diff;
#X text 200 764 difference between two sets;
#X obj 30 791 set.equal;
#X text 200 791 checks if two sets are equal (contains same elements);
#X obj 30 818 set.intersect;
#X text 200 818 output intersection of given sets;
#X obj 30 845 set.size;
#X text 200 845 get number of elements in set;
#X obj 30 872 set.symdiff;
#X text 200 872 symmetric difference between two sets;
#X obj 30 899 set.union;
#X text 200 899 output union of given sets;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::data 20 20 0 20 -104026
-4096 0;
#X obj 1 926 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 936 library: ceammc;