// select.lexer.h generated by reflex 1.6.3 from select.l

#ifndef REFLEX_HEADER_H
#define REFLEX_HEADER_H
#define IN_HEADER 1

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::location
#define REFLEX_OPTION_YYSTYPE             ceammc::SelectParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc
#define REFLEX_OPTION_bison_cc_parser     SelectParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "select.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               SelectLexer
#define REFLEX_OPTION_namespace           ceammc
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "select.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::SelectParser::symbol_type(0)
#define REFLEX_OPTION_token_type          ceammc::SelectParser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "select.l"

    # include <string>
    # include <array>
    # include <stdexcept>

    # include "lex/select.parser.hpp"

    using token = ceammc::SelectParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {

class SelectLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 11 "select.l"

    public:
        enum MatchType {
            MATCH_EQUAL,
            MATCH_EPSILON,
            MATCH_RANGE_OO,
            MATCH_RANGE_CC,
            MATCH_RANGE_OC,
            MATCH_RANGE_CO,
            MATCH_SET,
            MATCH_LESS,
            MATCH_LESS_EQ,
            MATCH_GREATER,
            MATCH_GREATER_EQ
        };

        struct LexerAtom {
            std::string txt;
            bool is_float;
        };

        struct MatchData {
            ceammc::Atom atoms[16];
            size_t natoms = { 0 };
            MatchType type = { MATCH_EQUAL };

            MatchData(){}

            MatchData(double v) : natoms(1), type(MATCH_EQUAL) {
                atoms[0].setFloat(v, true);
            }

            MatchData(const std::string& s) : natoms(1), type(MATCH_EQUAL) {
                atoms[0].setSymbol(gensym(s.c_str()), true);
            }

            static MatchData epsilon(double a, double b) {
                MatchData res;
                res.natoms = 2;
                res.type = MATCH_EPSILON;
                res.atoms[0].setFloat(a, true);
                res.atoms[1].setFloat(b, true);
                return res;
            }

            static MatchData range(double a, double b, MatchType t) {
                MatchData res;
                res.natoms = 2;
                res.type = t;
                res.atoms[0].setFloat(a, true);
                res.atoms[1].setFloat(b, true);
                return res;
            }

            static MatchData compare(double x, MatchType t) {
                MatchData res;
                res.natoms = 1;
                res.type = t;
                res.atoms[0].setFloat(x, true);
                return res;
            }
        };

        void pushMatch(const MatchData& d)
        {
            if(nmatches_ < matches_.size())
                matches_[nmatches_++] = d;
        }

        void pushLexerAtom(const LexerAtom& a)
        {
            atoms_.push_back(a);
        }

        void popLexerAtoms()
        {
            if(atoms_.size() == 1 && atoms_[0].is_float)
                pushMatch(MatchData(std::strtod(atoms_[0].txt.c_str(), nullptr)));
            else {
                std::string res;
                for(auto& a: atoms_)
                    res += a.txt;

                pushMatch(MatchData(res));
            }

            atoms_.clear();
        }

        const MatchData& operator[](size_t idx) const {
            if(idx >= nmatches_)
                throw std::out_of_range("invalid index");

            return matches_[idx];
        }

        size_t numMatches() const { return nmatches_; }
        void clearMatches() { nmatches_ = 0; }
        void mergeMatch() {
            if(nmatches_ < 2)
                return;

            auto& m0 = matches_[nmatches_-2];
            const auto& m1 = matches_[nmatches_-1];
            for(size_t i = 0; i < m1.natoms; i++)
                m0.atoms[m0.natoms++] = m1.atoms[i];


            m0.type = MATCH_SET;
            nmatches_ -= 1;
        }

        void setErrorMsg(const std::string& str) { error_msg_ = str; }

    private:
        std::array<MatchData, 64> matches_;
        std::vector<LexerAtom> atoms_;
        size_t nmatches_ = {0};
        std::string error_msg_;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  SelectLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int RANGE = 1;
  static const int EPSILON = 2;
  virtual ceammc::SelectParser::symbol_type lex(void);
};

} // namespace ceammc

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#endif
