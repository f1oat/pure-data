#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot;
#X text 200 560 array data plotter;
#X obj 30 587 array.plot~;
#X text 200 587 plot signal on specified array;
#X obj 30 614 array.resample;
#X text 200 614 array resampler;
#X obj 30 641 array.rms;
#X text 200 641 calculates root mean square value for array;
#X obj 30 668 array.set;
#X text 200 668 set array content from list;
#X obj 30 695 array.stddev;
#X text 200 695 calculates standard deviation for array values;
#X obj 30 722 array.stretch;
#X text 200 722 array time-stretch \, pitch-shift or rate-change;
#X obj 30 749 array.sum;
#X text 200 749 calculates sum of array elements;
#X obj 30 776 array.sum2;
#X text 200 776 calculates sum of squares of array elements;
#X obj 30 803 array.variance;
#X text 200 803 calculates variance of array values;
#X obj 30 830 array.vplay;
#X text 200 830 simple array player for using with vline~;
#X obj 30 857 array.window;
#X text 200 857 fill array with window;
#X obj 30 884 plot.geomspace~;
#X text 200 884 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 924 plot.hist~;
#X text 200 924 calculate and output signal histogram;
#X obj 30 951 plot.linspace~;
#X text 200 951 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 991 plot.logspace~;
#X text 200 991 outputs numbers spaced evenly on a log scale;
#X obj 30 1018 plot.response~;
#X text 200 1018 output amp/phase freq response to impulse;
#X obj 20 1045 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1086 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1097 ceammc.search;
#X text 200 1097 ceammc library search object;
#X obj 30 1127 ui.link @title [function] @url function-help.pd;
#X text 200 1124 named function;
#X obj 30 1149 function.call;
#X text 200 1149 call named function;
#X obj 30 1176 gain~;
#X text 200 1176 multislot signal gain;
#X obj 30 1203 logger;
#X text 200 1203 advanced data logger;
#X obj 30 1230 matrix~;
#X text 200 1230 signal routing matrix;
#X obj 30 1257 metro.pattern;
#X text 200 1257 metro with rhythmic patterns;
#X obj 30 1284 metro.random;
#X text 200 1284 metro random bang with specified range;
#X obj 30 1311 metro.seq;
#X text 200 1311 metro sequencer;
#X obj 30 1338 mix~;
#X text 200 1338 multislot signal mixer;
#X obj 30 1365 nsig~;
#X text 200 1365 Mulitchannel converter from control to audio rate;
#X obj 30 1392 obj.props;
#X text 200 1392 property extractor;
#X obj 30 1419 radio;
#X text 200 1419 float index to outlet values as radio switch;
#X obj 30 1446 sync;
#X text 200 1446 value synchronization;
#X obj 30 1473 window;
#X text 200 1473 returns window value by given window position;
#X obj 30 1500 xdac~;
#X text 200 1500 dac~ with channel ranges;
#X obj 30 1527 xfade2~;
#X text 200 1527 multi stereo-signal crossfade;
#X obj 30 1554 xfade~;
#X text 200 1554 multi signal crossfade;
#X obj 20 1581 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1633 chaos.gbman0;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.gbman0~;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.jong;
#X text 200 1687 Peter de Jong attractor;
#X obj 30 1714 chaos.logistic;
#X text 200 1714 Logistic map chaotic generator;
#X obj 30 1741 chaos.std0;
#X text 200 1741 Standard map chaotic generator;
#X obj 30 1768 chaos.std0~;
#X text 200 1768 Standard map chaotic generator;
#X obj 20 1795 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1847 array.p2s;
#X text 200 1847 convert array phase [0\..1] to sample position;
#X obj 30 1874 array.s2p;
#X text 200 1874 convert sample position to phase range [0\..1];
#X obj 30 1901 conv.amp2dbfs;
#X text 200 1901 convert from amplitude to decibel full scale;
#X obj 30 1928 conv.amp2dbfs~;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.bits2bang;
#X text 200 1955 convert list of bits to bang events;
#X obj 30 1982 conv.bits2int;
#X text 200 1982 convert list of bits to integer;
#X obj 30 2009 conv.bits2note;
#X text 200 2009 convert list of bits to note events;
#X obj 30 2036 conv.bits2pos;
#X text 200 2036 convert list of bits to list of bit position;
#X obj 30 2063 conv.bpm2hz;
#X text 200 2063 converts BPM to frequency in herz;
#X obj 30 2090 conv.bpm2ms;
#X text 200 2090 convert frequency in BPM to period in milliseconds;
#X obj 30 2117 conv.bpm2sec;
#X text 200 2117 convert frequency in BPM to period in seconds;
#X obj 30 2144 conv.car2pol;
#X text 200 2144 convert cartesian coords to polar;
#X obj 30 2171 conv.cc2amp;
#X text 200 2171 convert from MIDI Control Change range;
#X obj 30 2198 conv.dbfs2amp;
#X text 200 2198 convert decibel full scale to amplitude;
#X obj 30 2225 conv.dbfs2amp~;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.degree2key;
#X text 200 2252 convert scale degree to key;
#X obj 30 2279 conv.hex2int;
#X text 200 2279 hex symbol to int value;
#X obj 30 2306 conv.int2bits;
#X text 200 2306 convert integer to list of bits;
#X obj 30 2333 conv.lin2curve;
#X text 200 2333 map linear to exponential range with 0 allowed.;
#X obj 30 2360 conv.lin2exp;
#X text 200 2360 maps linear range to exponential range;
#X obj 30 2387 conv.lin2lin;
#X text 200 2387 convert from one linear range to another;
#X obj 30 2414 conv.lin2lin~;
#X text 200 2414 convert from one linear range to another for signals;
#X obj 30 2441 conv.list2props;
#X text 200 2441 converts list to series of property messages;
#X obj 30 2468 conv.midi2freq;
#X text 200 2468 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2508 conv.ms2bpm;
#X text 200 2508 convert period in milliseconds to frequency in BPM;
#X obj 30 2535 conv.ms2samp;
#X text 200 2535 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2575 conv.ms2samp~;
#X text 200 2575 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2615 conv.phase2rad;
#X text 200 2615 convert phase value [0-1] to radians [0-2π];
#X obj 30 2642 conv.phase2rad~;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.pitch2midi;
#X text 200 2669 converts symbol pitch name to MIDI note number;
#X obj 30 2696 conv.pol2car;
#X text 200 2696 convert from polar coordinates to cartesian;
#X obj 30 2723 conv.rad2phase;
#X text 200 2723 convert radians value to phase;
#X obj 30 2750 conv.rad2phase~;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.samp2ms;
#X text 200 2777 convert samples to time according to samplerate;
#X obj 30 2804 conv.samp2ms~;
#X text 200 2804 convert samples to milliseconds according to samplerate;
#X obj 30 2831 conv.samp2sec;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.sec2bpm;
#X text 200 2858 convert period in seconds to frequency in BPM;
#X obj 30 2885 conv.sec2samp;
#X text 200 2885 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2925 conv.sec2str;
#X text 200 2925 converts float time in seconds to formated symbol
(or string);
#X obj 30 2952 conv.sig2float~;
#X text 200 2952 convert signal to floats;
#X obj 30 2979 conv.str2sec;
#X text 200 2979 converts formatted time to float value in seconds;
#X obj 20 3006 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3058 data.dict;
#X text 200 3058 dictionary container: store values by key;
#X obj 30 3085 data.fifo;
#X text 200 3085 First-In-First-Out (FIFO) queue data container;
#X obj 30 3112 data.float;
#X text 200 3112 robust float object;
#X obj 30 3139 data.int;
#X text 200 3139 robust int object;
#X obj 30 3166 data.list;
#X text 200 3166 list container;
#X obj 30 3193 data.mlist;
#X text 200 3193 multidimensional list container;
#X obj 30 3220 data.set;
#X text 200 3220 container that store unique elements;
#X obj 30 3247 data.set2list;
#X text 200 3247 converts set to list;
#X obj 30 3274 dict.contains;
#X text 200 3274 predicate to check if dict contains a keys;
#X obj 30 3301 dict.each;
#X text 200 3301 map each value in dict;
#X obj 30 3328 dict.from_list;
#X text 200 3328 creates dictionary from list;
#X obj 30 3355 dict.get;
#X text 200 3355 output dict values;
#X obj 30 3382 dict.keys;
#X text 200 3382 get list of dict keys;
#X obj 30 3409 dict.pass;
#X text 200 3409 passes specified keys in dict;
#X obj 30 3436 dict.reject;
#X text 200 3436 rejects specified keys from dict;
#X obj 30 3463 dict.size;
#X text 200 3463 dictionary size;
#X obj 30 3490 dict.to_list;
#X text 200 3490 converts dictionary to plain list;
#X obj 30 3517 dict.values;
#X text 200 3517 dictionary values as mlist;
#X obj 30 3544 mlist.flatten;
#X text 200 3544 flatten nested mlist;
#X obj 30 3571 rtree.to_list;
#X text 200 3571 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3598 set.contains;
#X text 200 3598 check if specified element is in set;
#X obj 30 3625 set.diff;
#X text 200 3625 difference between two sets;
#X obj 30 3652 set.equal;
#X text 200 3652 checks if two sets are equal (contains same elements);
#X obj 30 3679 set.intersect;
#X text 200 3679 output intersection of given sets;
#X obj 30 3706 set.size;
#X text 200 3706 get number of elements in set;
#X obj 30 3733 set.symdiff;
#X text 200 3733 symmetric difference between two sets;
#X obj 30 3760 set.union;
#X text 200 3760 output union of given sets;
#X obj 20 3787 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3828 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3839 dyn.comp2~;
#X text 200 3839 stereo dynamic range compressor;
#X obj 30 3866 dyn.comp~;
#X text 200 3866 mono dynamic range compressors;
#X obj 30 3893 dyn.gate2~;
#X text 200 3893 stereo signal gate;
#X obj 30 3920 dyn.gate~;
#X text 200 3920 mono signal gate;
#X obj 30 3947 dyn.limit2~;
#X text 200 3947 stereo 1176LN Peak Limiter;
#X obj 30 3974 dyn.limit~;
#X text 200 3974 mono 1176LN Peak Limiter;
#X obj 30 4001 dyn.softclip~;
#X text 200 4001 soft signal clip;
#X obj 20 4028 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4069 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4080 env.adsr~;
#X text 200 4080 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4107 env.ar~;
#X text 200 4107 Attack/Release envelope generator;
#X obj 30 4134 env.asr~;
#X text 200 4134 Attack/Sustain/Release envelope generator;
#X obj 30 4161 env.concat;
#X text 200 4161 Envelope concatenation;
#X obj 30 4188 env.follow~;
#X text 200 4188 Envelope follower with independent attack and release
times;
#X obj 30 4215 env.mix;
#X text 200 4215 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4255 env.smooth~;
#X text 200 4255 An envelope with an exponential attack and release;
#X obj 30 4282 env.tscale;
#X text 200 4282 Envelope time-scale;
#X obj 30 4309 env.tshift;
#X text 200 4309 Envelope time-shift (horizontal);
#X obj 30 4336 env.vscale;
#X text 200 4336 Envelope value-scale;
#X obj 30 4363 env2array;
#X text 200 4363 Renders envelope to specified array;
#X obj 30 4390 env2vline;
#X text 200 4390 Converts envelope to bunch of vline messages;
#X obj 30 4417 envelope;
#X text 200 4417 Envelope data type;
#X obj 30 4444 vline2env;
#X text 200 4444 Converts vline messages to env;
#X obj 20 4471 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4512 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4523 expand_env;
#X text 200 4523 Substitute environment variables in data stream;
#X obj 30 4550 flow.append;
#X text 200 4550 append message to flow stream;
#X obj 30 4577 flow.change;
#X text 200 4577 rejects redundant input values;
#X obj 30 4604 flow.count;
#X text 200 4604 control flow event counter;
#X obj 30 4631 flow.delay;
#X text 200 4631 enhanced version on vanilla delay object;
#X obj 30 4658 flow.demultiplex;
#X text 200 4658 control flow demultiplexer;
#X obj 30 4685 flow.demultiplex2~;
#X text 200 4685 audio stream stereo demultiplexer;
#X obj 30 4712 flow.demultiplex~;
#X text 200 4712 audio stream demultiplexer;
#X obj 30 4739 flow.dup;
#X text 200 4739 message duplicator;
#X obj 30 4766 flow.gate;
#X text 200 4766 control flow gate. [spigot] analog;
#X obj 30 4793 flow.greater;
#X text 200 4793 numeric stream router;
#X obj 30 4820 flow.greater_eq;
#X text 200 4820 numeric stream router;
#X obj 30 4847 flow.group;
#X text 200 4847 group input atoms in list of specified size;
#X obj 30 4874 flow.interval;
#X text 200 4874 measure time between flow events;
#X obj 30 4901 flow.less;
#X text 200 4901 numeric stream router \, like many [moses];
#X obj 30 4928 flow.less_eq;
#X text 200 4928 numeric stream router \, like many [moses];
#X obj 30 4955 flow.match;
#X text 200 4955 route data flow by regexp match;
#X obj 30 4982 flow.mem;
#X text 200 4982 store data flow in memory;
#X obj 30 5009 flow.multiplex;
#X text 200 5009 control flow multiplexer;
#X obj 30 5036 flow.multiplex2~;
#X text 200 5036 audio stream stereo multiplexer;
#X obj 30 5063 flow.multiplex~;
#X text 200 5063 audio stream multiplexer;
#X obj 30 5090 flow.once;
#X text 200 5090 one message pass thru;
#X obj 30 5117 flow.pack;
#X text 200 5117 flow pack;
#X obj 30 5144 flow.pass;
#X text 200 5144 pass specified values;
#X obj 30 5171 flow.pass_if;
#X text 200 5171 pass values that accepted by predicate object;
#X obj 30 5198 flow.pipe;
#X text 200 5198 enhanced version on vanilla pipe object;
#X obj 30 5225 flow.queue;
#X text 200 5225 multi-channel control flow sync queue (or FIFO);
#X obj 30 5252 flow.reject;
#X text 200 5252 reject specified values;
#X obj 30 5279 flow.reject_if;
#X text 200 5279 reject values by predicate;
#X obj 30 5306 flow.ring;
#X text 200 5306 dataflow ring buffer;
#X obj 30 5333 flow.route;
#X text 200 5333 advanced message router;
#X obj 30 5360 flow.select;
#X text 200 5360 vanilla flow on steroids;
#X obj 30 5387 flow.space;
#X text 200 5387 space in time messages received at the same logical
time;
#X obj 30 5414 flow.speedlim;
#X text 200 5414 control stream speed limiter;
#X obj 30 5441 flow.split;
#X text 200 5441 split data flow by external side-chain predicate;
#X obj 30 5468 flow.stack;
#X text 200 5468 any message stack;
#X obj 30 5495 flow.sync;
#X text 200 5495 bus with only hot inlets;
#X obj 30 5522 flow.sync_pack;
#X text 200 5522 flow pack with all hot inlets;
#X obj 30 5549 flow.tee~;
#X text 200 5549 separate audio and control streams;
#X obj 30 5576 replace;
#X text 200 5576 Replace atoms in data stream;
#X obj 30 5603 route.float;
#X text 200 5603 separate float messages from other types;
#X obj 20 5630 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5682 flt.biquad~;
#X text 200 5682 second order IIR filter.;
#X obj 30 5709 flt.bpf12~;
#X text 200 5709 Two pole band-pass butterworth filter;
#X obj 30 5736 flt.bpf24~;
#X text 200 5736 Four pole band-pass butterworth filter;
#X obj 30 5763 flt.c_apf;
#X text 200 5763 Allpass filter coefficient calculator for biquad;
#X obj 30 5790 flt.c_bpf~;
#X text 200 5790 BPF coefficient calculator for biquad filter;
#X obj 30 5817 flt.c_highshelf~;
#X text 200 5817 Highshelf filter coefficient calculator for biquad;
#X obj 30 5844 flt.c_hpf;
#X text 200 5844 HPF coefficient calculator for biquad filter;
#X obj 30 5871 flt.c_hpf~;
#X text 200 5871 HPF coefficient calculator for biquad filter;
#X obj 30 5898 flt.c_lowshelf~;
#X text 200 5898 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5925 flt.c_lpf;
#X text 200 5925 LPF coefficient calculator for biquad filter;
#X obj 30 5952 flt.c_lpf~;
#X text 200 5952 LPF coefficient calculator for biquad filter;
#X obj 30 5979 flt.c_notch;
#X text 200 5979 Notch filter coefficient calculator for biquad;
#X obj 30 6006 flt.c_notch~;
#X text 200 6006 Band-reject coefficient calculator for biquad filter;
#X obj 30 6033 flt.c_peak~;
#X text 200 6033 Peaking equalizer calculator for biquad;
#X obj 30 6060 flt.c_pole;
#X text 200 6060 One-pole coefficient calculator for biquad filter;
#X obj 30 6087 flt.dcblock2~;
#X text 200 6087 stereo DC blocker;
#X obj 30 6114 flt.dcblock~;
#X text 200 6114 mono DC blocker;
#X obj 30 6141 flt.eq10~;
#X text 200 6141 graphic 10 band equalizer;
#X obj 30 6168 flt.eq_peak_cq~;
#X text 200 6168 constant-Q second order peaking equalizer section;
#X obj 30 6195 flt.eq_peak~;
#X text 200 6195 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6250 flt.fb_comb~;
#X text 200 6250 feedback comb filter;
#X obj 30 6277 flt.ff_comb~;
#X text 200 6277 feed forward comb filter;
#X obj 30 6304 flt.freqz;
#X text 200 6304 compute the frequency response of a digital filter;
#X obj 30 6331 flt.freqz~;
#X text 200 6331 compute the frequency response of a digital filter;
#X obj 30 6358 flt.highshelf~;
#X text 200 6358 gain boost|cut above some frequency;
#X obj 30 6385 flt.hpf12~;
#X text 200 6385 High-pass second order Butterworth filter;
#X obj 30 6412 flt.hpf24~;
#X text 200 6412 High-pass fourth order Butterworth filter;
#X obj 30 6439 flt.lowshelf~;
#X text 200 6439 gain boost|cut below some frequency;
#X obj 30 6466 flt.lpf12~;
#X text 200 6466 Low-pass second order Butterworth filter;
#X obj 30 6493 flt.lpf24~;
#X text 200 6493 Low-pass fourth order Butterworth filter;
#X obj 30 6520 flt.median;
#X text 200 6520 Median control flow filter;
#X obj 30 6547 flt.moog_vcf~;
#X text 200 6547 Moog Voltage Controlled Filter;
#X obj 30 6574 flt.notch~;
#X text 200 6574 band-rejection filter;
#X obj 30 6601 flt.resonbp~;
#X text 200 6601 Simple resonant bandpass filter;
#X obj 20 6628 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6669 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6680 fx.bitdown~;
#X text 200 6680 bit downer and downsampler effect;
#X obj 30 6707 fx.chorus~;
#X text 200 6707 Chorus effect;
#X obj 30 6734 fx.distortion1~;
#X text 200 6734 distortion #1 from Guitarix effects set;
#X obj 30 6761 fx.distortion2~;
#X text 200 6761 distortion #2 from Guitarix effects set;
#X obj 30 6788 fx.distortion3~;
#X text 200 6788 simple distortion #3 from Guitarix effects set;
#X obj 30 6815 fx.distortion~;
#X text 200 6815 cubic nonlinearity distortion;
#X obj 30 6842 fx.drive~;
#X text 200 6842 Guitarix drive effect;
#X obj 30 6869 fx.drone_box~;
#X text 200 6869 mono sympathetic resonance generator;
#X obj 30 6896 fx.echo~;
#X text 200 6896 simple echo effect;
#X obj 30 6923 fx.flanger~;
#X text 200 6923 mono flanging effect;
#X obj 30 6950 fx.freeverb2~;
#X text 200 6950 freeverb2 - stereo version of freeverb;
#X obj 30 6977 fx.freeverb~;
#X text 200 6977 freeverb - common used open-source reverb;
#X obj 30 7004 fx.freqshift~;
#X text 200 7004 frequency shifter or single-sideband ring modulation;
#X obj 30 7031 fx.granulator~;
#X text 200 7031 simple input stream granulator;
#X obj 30 7058 fx.greyhole~;
#X text 200 7058 A complex echo-like effect;
#X obj 30 7085 fx.infrev~;
#X text 200 7085 port of Infinity VST plugin from airwindows;
#X obj 30 7112 fx.looper~;
#X text 200 7112 One track looper;
#X obj 30 7139 fx.pitchshift_s~;
#X text 200 7139 signal version of fx.pitchshift~;
#X obj 30 7166 fx.pitchshift~;
#X text 200 7166 simple pitch shifter based on 2 delay lines;
#X obj 30 7193 fx.sdelay~;
#X text 200 7193 smooth delay with a feedback control;
#X obj 30 7220 fx.vocoder~;
#X text 200 7220 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7260 fx.wahwah~;
#X text 200 7260 digitized CryBaby wah pedal;
#X obj 30 7287 fx.zita_rev1~;
#X text 200 7287 Zita stereo reverb;
#X obj 20 7314 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7355 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7366 global.dict;
#X text 200 7366 global named dict object;
#X obj 30 7393 global.float;
#X text 200 7393 global named float object;
#X obj 30 7420 global.int;
#X text 200 7420 global named integer object;
#X obj 30 7447 global.list;
#X text 200 7447 global named list object;
#X obj 30 7474 global.mlist;
#X text 200 7474 global named mlist object;
#X obj 30 7501 global.set;
#X text 200 7501 global named set object;
#X obj 20 7528 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7569 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7580 hw.apple_smc;
#X text 200 7580 query the system management control in Apples;
#X obj 30 7607 hw.apple_sms;
#X text 200 7607 query the sudden motion sensor in Apples;
#X obj 30 7634 hw.arduino;
#X text 200 7634 Arduino device;
#X obj 30 7661 hw.cpu_temp;
#X text 200 7661 get CPU temperature;
#X obj 30 7688 hw.display;
#X text 200 7688 get/set display properties;
#X obj 30 7715 hw.kbd_light;
#X text 200 7715 Get/set keyboard light on some devices;
#X obj 20 7742 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7783 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7794 lfo.+pulse~;
#X text 200 7794 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7821 lfo.+saw~;
#X text 200 7821 Positive unit-amplitude low frequency saw wave;
#X obj 30 7848 lfo.+square~;
#X text 200 7848 Positive low frequency square wave;
#X obj 30 7875 lfo.+tri~;
#X text 200 7875 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7902 lfo.impulse~;
#X text 200 7902 Unit-amplitude low-frequency impulse train;
#X obj 30 7929 lfo.pulse~;
#X text 200 7929 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7956 lfo.saw~;
#X text 200 7956 Full-range unit-amplitude low frequency saw;
#X obj 30 7983 lfo.square~;
#X text 200 7983 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8010 lfo.tri~;
#X text 200 8010 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8037 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8078 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8089 list.^at;
#X text 200 8089 on input index(es) outputs list element(s);
#X obj 30 8116 list.^contains;
#X text 200 8116 checks if input atom is found in the list;
#X obj 30 8143 list.^search;
#X text 200 8143 on input atom returns it index in list;
#X obj 30 8170 list.all_of;
#X text 200 8170 checks if all list atoms accepted by predicate;
#X obj 30 8197 list.any_of;
#X text 200 8197 checks if at least one list element is accepted by
predicate;
#X obj 30 8224 list.append;
#X text 200 8224 append atom or list to the end of input list;
#X obj 30 8251 list.apply_to;
#X text 200 8251 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8291 list.at;
#X text 200 8291 outputs list element(s) at specified index(es);
#X obj 30 8318 list.choice;
#X text 200 8318 outputs random element from list;
#X obj 30 8345 list.contains;
#X text 200 8345 checks if input list contains specified atoms;
#X obj 30 8372 list.count;
#X text 200 8372 output the number of items that equal to specified
value;
#X obj 30 8399 list.count_if;
#X text 200 8399 output the number of items that satisfy to external
predicate;
#X obj 30 8426 list.delta;
#X text 200 8426 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8466 list.distribution;
#X text 200 8466 list value distribution;
#X obj 30 8493 list.do;
#X text 200 8493 iterate and modify list contents via side-chain;
#X obj 30 8520 list.each;
#X text 200 8520 maps each list value via external side-chain;
#X obj 30 8547 list.enumerate;
#X text 200 8547 enumerates input list;
#X obj 30 8574 list.equal;
#X text 200 8574 checks if given lists are equal;
#X obj 30 8601 list.first;
#X text 200 8601 returns first list element;
#X obj 30 8628 list.gen;
#X text 200 8628 generates list of specified length via external generator;
#X obj 30 8655 list.histogram;
#X text 200 8655 outputs distribution histogram;
#X obj 30 8682 list.insert;
#X text 200 8682 insert atom or list to the specified position of input
list;
#X obj 30 8709 list.integrator;
#X text 200 8709 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8749 list.last;
#X text 200 8749 output last list element;
#X obj 30 8776 list.length;
#X text 200 8776 output the number of atoms in the list;
#X obj 30 8803 list.max;
#X text 200 8803 output largest element in the list;
#X obj 30 8830 list.mean;
#X text 200 8830 calculates average of list of floats;
#X obj 30 8857 list.min;
#X text 200 8857 returns smallest element in the list;
#X obj 30 8884 list.none_of;
#X text 200 8884 checks if none of list atoms is accepted by predicate;
#X obj 30 8911 list.normalize;
#X text 200 8911 normalizes float list values to get their sum = 1.0;
#X obj 30 8938 list.pass_if;
#X text 200 8938 leave only elements accepted by predicate;
#X obj 30 8965 list.prepend;
#X text 200 8965 prepend atom or list before input list;
#X obj 30 8992 list.product;
#X text 200 8992 calculates product of floats in list;
#X obj 30 9019 list.range;
#X text 200 9019 output list smallest and largest value;
#X obj 30 9046 list.reduce;
#X text 200 9046 apply function of two arguments cumulatively to the
list;
#X obj 30 9073 list.remove;
#X text 200 9073 remove list element(s) at specified positions;
#X obj 30 9100 list.remove_if;
#X text 200 9100 remove elements by predicate;
#X obj 30 9127 list.repack;
#X text 200 9127 repack list to specified size;
#X obj 30 9154 list.repeat;
#X text 200 9154 output new list by repeating input list specified
times;
#X obj 30 9181 list.resample;
#X text 200 9181 resample list with specified ratio;
#X obj 30 9208 list.resize;
#X text 200 9208 changes list size;
#X obj 30 9235 list.reverse;
#X text 200 9235 reverses the order of the elements in the list;
#X obj 30 9262 list.rldecode;
#X text 200 9262 Run-length list decoder (RLE);
#X obj 30 9289 list.rlencode;
#X text 200 9289 RLE (run-length encoding) for lists;
#X obj 30 9316 list.rotate;
#X text 200 9316 rotates list;
#X obj 30 9343 list.route;
#X text 200 9343 acts like [route] but for lists;
#X obj 30 9370 list.search;
#X text 200 9370 search specified items in input list;
#X obj 30 9397 list.separate;
#X text 200 9397 sends list elements one by one separately;
#X obj 30 9424 list.seq;
#X text 200 9424 numeric sequence list generator;
#X obj 30 9451 list.set;
#X text 200 9451 set list value at specified position;
#X obj 30 9478 list.shift;
#X text 200 9478 shifts the contents of the list with linear interpolation;
#X obj 30 9505 list.shuffle;
#X text 200 9505 randomly rearranges elements in list;
#X obj 30 9532 list.slice;
#X text 200 9532 extract sublist;
#X obj 30 9559 list.sort;
#X text 200 9559 sorts list values by ascending order;
#X obj 30 9586 list.sort_with;
#X text 200 9586 sort list with user defined side-chain;
#X obj 30 9613 list.split;
#X text 200 9613 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9653 list.stretch;
#X text 200 9653 stretches list - changes its size with linear interpolation;
#X obj 30 9680 list.sum;
#X text 200 9680 calculates sum of floats in list;
#X obj 30 9707 list.unique;
#X text 200 9707 removes duplicates from input list;
#X obj 30 9734 list.unpack;
#X text 200 9734 unpack list elements to separate outlets;
#X obj 30 9761 list.unzip;
#X text 200 9761 splits list to N lists \, each to separate output;
#X obj 30 9788 list.walk;
#X text 200 9788 Walks thru the list;
#X obj 30 9815 list.zip;
#X text 200 9815 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9870 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9911 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9922 live.capture~;
#X text 200 9922 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9962 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10003 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10014 local.dict;
#X text 200 10014 local named dict object;
#X obj 30 10041 local.float;
#X text 200 10041 canvas-scoped named float variable;
#X obj 30 10068 local.int;
#X text 200 10068 canvas-scoped named integer variable;
#X obj 30 10095 local.list;
#X text 200 10095 local named list object;
#X obj 30 10122 local.mlist;
#X text 200 10122 local named mlist object;
#X obj 30 10149 local.set;
#X text 200 10149 local named set object;
#X obj 20 10176 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10217 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10228 math.abs;
#X text 200 10228 absolute value function;
#X obj 30 10255 math.abs~;
#X text 200 10255 absolute value function for signals;
#X obj 30 10282 math.acos;
#X text 200 10282 arc cosine function;
#X obj 30 10309 math.acosh;
#X text 200 10309 inverse hyperbolic cosine function;
#X obj 30 10336 math.acosh~;
#X text 200 10336 hyperbolic arc cosine for signals;
#X obj 30 10363 math.acos~;
#X text 200 10363 arc cosine function for signals;
#X obj 30 10390 math.and;
#X text 200 10390 operation AND for multiple arguments;
#X obj 30 10417 math.approx;
#X text 200 10417 check if input value approximately equal to pattern;
#X obj 30 10444 math.asin;
#X text 200 10444 arc sine function;
#X obj 30 10471 math.asinh;
#X text 200 10471 inverse hyperbolic sine function;
#X obj 30 10498 math.asinh~;
#X text 200 10498 hyperbolic arc sine for signals;
#X obj 30 10525 math.asin~;
#X text 200 10525 arc sine for signals;
#X obj 30 10552 math.atan;
#X text 200 10552 arc tangent function;
#X obj 30 10579 math.atanh;
#X text 200 10579 inverse hyperbolic tangent function;
#X obj 30 10606 math.atanh~;
#X text 200 10606 hyperbolic arc tangent for signals;
#X obj 30 10633 math.atan~;
#X text 200 10633 arc tangent for signals;
#X obj 30 10660 math.cabs~;
#X text 200 10660 magnitude of a complex signals;
#X obj 30 10687 math.carg~;
#X text 200 10687 phase angle of a complex signals;
#X obj 30 10714 math.cbrt;
#X text 200 10714 cube root function;
#X obj 30 10741 math.cbrt~;
#X text 200 10741 cube root function for signals;
#X obj 30 10768 math.cdiv~;
#X text 200 10768 division of complex signals;
#X obj 30 10795 math.ceil;
#X text 200 10795 round to smallest integral value not less than input
value;
#X obj 30 10822 math.ceil~;
#X text 200 10822 round to smallest integral value not less than input
value;
#X obj 30 10849 math.cexp~;
#X text 200 10849 exponent of a complex signals;
#X obj 30 10876 math.cmul~;
#X text 200 10876 multiplication of complex signals;
#X obj 30 10903 math.cos;
#X text 200 10903 cosine function;
#X obj 30 10930 math.cosh;
#X text 200 10930 hyperbolic cosine function;
#X obj 30 10957 math.cosh~;
#X text 200 10957 hyperbolic cosine for signals;
#X obj 30 10984 math.cos~;
#X text 200 10984 cosine function;
#X obj 30 11011 math.div;
#X text 200 11011 division (on lists too);
#X obj 30 11038 math.e;
#X text 200 11038 mathematical constant \, base of the natural logarithm;
#X obj 30 11065 math.erf;
#X text 200 11065 error function;
#X obj 30 11092 math.erf~;
#X text 200 11092 error function for signals;
#X obj 30 11119 math.exp;
#X text 200 11119 exponential functions;
#X obj 30 11146 math.exp2;
#X text 200 11146 exponential functions;
#X obj 30 11173 math.exp2~;
#X text 200 11173 base-2 exponential for signal;
#X obj 30 11200 math.expr;
#X text 200 11200 dynamic [expr];
#X obj 30 11227 math.exp~;
#X text 200 11227 base-e exponential for signal;
#X obj 30 11254 math.floor;
#X text 200 11254 round to largest integral value not greater than
x;
#X obj 30 11281 math.floor~;
#X text 200 11281 round to largest integral value not greater than
x;
#X obj 30 11308 math.gamma;
#X text 200 11308 gamma function;
#X obj 30 11335 math.gamma~;
#X text 200 11335 gamma function for floating point signals;
#X obj 30 11362 math.gcd;
#X text 200 11362 calculate greatest common divisor;
#X obj 30 11389 math.inf;
#X text 200 11389 infinity value that cannot be represented accurately;
#X obj 30 11416 math.inf~;
#X text 200 11416 inifinity signal generator;
#X obj 30 11443 math.lcm;
#X text 200 11443 calculate least common multiple;
#X obj 30 11470 math.lgamma;
#X text 200 11470 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11497 math.lgamma~;
#X text 200 11497 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11537 math.log;
#X text 200 11537 natural logarithm;
#X obj 30 11564 math.log10;
#X text 200 11564 logarithm functions;
#X obj 30 11591 math.log10~;
#X text 200 11591 natural logarithm;
#X obj 30 11618 math.log2;
#X text 200 11618 logarithm functions;
#X obj 30 11645 math.log2~;
#X text 200 11645 base-2 logarithm;
#X obj 30 11672 math.log~;
#X text 200 11672 natural logarithm;
#X obj 30 11699 math.mul;
#X text 200 11699 multiplication (on lists too);
#X obj 30 11726 math.nan;
#X text 200 11726 Not a Number \, unrepresentable value;
#X obj 30 11753 math.nan~;
#X text 200 11753 signal NaN;
#X obj 30 11780 math.neg;
#X text 200 11780 negate function;
#X obj 30 11807 math.or;
#X text 200 11807 operation OR for multiple arguments;
#X obj 30 11834 math.pi;
#X text 200 11834 mathematical constant;
#X obj 30 11861 math.pi~;
#X text 200 11861 mathematical constant;
#X obj 30 11888 math.polyeval;
#X text 200 11888 evaluates the polynomial described by the coefficients
list;
#X obj 30 11915 math.reciprocal;
#X text 200 11915 calculate reciprocal number;
#X obj 30 11942 math.reciprocal~;
#X text 200 11942 calculate reciprocal number for signals;
#X obj 30 11969 math.round;
#X text 200 11969 round to integral value \, regardless of rounding
direction;
#X obj 30 11996 math.round~;
#X text 200 11996 signal round;
#X obj 30 12023 math.sign;
#X text 200 12023 sign function;
#X obj 30 12050 math.sin;
#X text 200 12050 sine function;
#X obj 30 12077 math.sinh;
#X text 200 12077 hyperbolic sine function;
#X obj 30 12104 math.sinh~;
#X text 200 12104 hyperbolic sine for signals;
#X obj 30 12131 math.sin~;
#X text 200 12131 sine function;
#X obj 30 12158 math.sqrt;
#X text 200 12158 square root function;
#X obj 30 12185 math.sqrt~;
#X text 200 12185 square root for signal;
#X obj 30 12212 math.squared;
#X text 200 12212 value square;
#X obj 30 12239 math.squared~;
#X text 200 12239 signal value square;
#X obj 30 12266 math.sync_add;
#X text 200 12266 sync addition;
#X obj 30 12293 math.sync_and;
#X text 200 12293 sync logical AND operation;
#X obj 30 12320 math.sync_div;
#X text 200 12320 sync division;
#X obj 30 12347 math.sync_eq;
#X text 200 12347 sync equal numbers check;
#X obj 30 12374 math.sync_ge;
#X text 200 12374 sync greater equal numbers compare;
#X obj 30 12401 math.sync_gt;
#X text 200 12401 sync greater then numbers compare;
#X obj 30 12428 math.sync_le;
#X text 200 12428 sync less equal numbers compare;
#X obj 30 12455 math.sync_lshift;
#X text 200 12455 sync signed bit left shift;
#X obj 30 12482 math.sync_lt;
#X text 200 12482 sync less then numbers compare;
#X obj 30 12509 math.sync_mod;
#X text 200 12509 sync remainder of modulo division (float or integer);
#X obj 30 12536 math.sync_mul;
#X text 200 12536 sync multiplication;
#X obj 30 12563 math.sync_ne;
#X text 200 12563 sync numbers for not equality;
#X obj 30 12590 math.sync_or;
#X text 200 12590 sync logical OR operation;
#X obj 30 12617 math.sync_rshift;
#X text 200 12617 sync signed bit right shift;
#X obj 30 12644 math.sync_sub;
#X text 200 12644 sync subtraction;
#X obj 30 12671 math.sync_xor;
#X text 200 12671 sync logical XOR operation;
#X obj 30 12698 math.tan;
#X text 200 12698 tangent function;
#X obj 30 12725 math.tanh;
#X text 200 12725 hyperbolic tangent function;
#X obj 30 12752 math.tanh~;
#X text 200 12752 hyperbolic tangent for signals;
#X obj 30 12779 math.tan~;
#X text 200 12779 tangent function;
#X obj 30 12806 math.trunc;
#X text 200 12806 truncate to integer value;
#X obj 30 12833 math.trunc~;
#X text 200 12833 truncate to integer value;
#X obj 20 12860 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12901 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12912 midi.cc;
#X text 200 12912 enhanced version of vanilla ctlin;
#X obj 30 12939 midi.clock;
#X text 200 12939 midi clock toolbox;
#X obj 30 12966 midi.ctl2str;
#X text 200 12966 convert Standard MIDI Controllers number to name;
#X obj 30 12993 midi.event2ctl;
#X text 200 12993 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13020 midi.event2note;
#X text 200 13020 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13047 midi.event2prg;
#X text 200 13047 convert MidiEvent message to midi program change
value;
#X obj 30 13074 midi.file;
#X text 200 13074 standard midi file SMF reader and writer;
#X obj 30 13101 midi.kbd;
#X text 200 13101 computer keyboard midi;
#X obj 30 13128 midi.key2str;
#X text 200 13128 convert key number to SPN name according to tonality;
#X obj 30 13155 midi.oct;
#X text 200 13155 midi octave transpose;
#X obj 30 13182 midi.prg2str;
#X text 200 13182 convert GM Instrument number to name (string or symbol);
#X obj 30 13209 midi.sustain;
#X text 200 13209 sustain pedal emulation;
#X obj 30 13236 midi.sysex;
#X text 200 13236 sysex input messages as list;
#X obj 30 13263 midi.track;
#X text 200 13263 extract track from MidiFile;
#X obj 30 13290 midi.tuning;
#X text 200 13290 apply tuning to midi messages;
#X obj 30 13317 midi.vramp;
#X text 200 13317 apply crescendo or diminuendo for midi message flow;
#X obj 30 13344 midi.vrand;
#X text 200 13344 midi velocity randomizer;
#X obj 20 13371 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13412 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13423 click~;
#X text 200 13423 Output single impulse on bang;
#X obj 30 13450 fluid~;
#X text 200 13450 FluidSynth SoundFont 2 player;
#X obj 30 13477 modplug~;
#X text 200 13477 MOD file player (using libmodplug);
#X obj 30 13504 speech.flite;
#X text 200 13504 render speech to array;
#X obj 20 13531 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13572 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13583 loadexpr;
#X text 200 13583 send message when patch loads;
#X obj 30 13610 msg;
#X text 200 13610 message constructor;
#X obj 30 13637 msg.after;
#X text 200 13637 send specified message after incoming message;
#X obj 30 13664 msg.onload;
#X text 200 13664 send message when patch loads;
#X obj 20 13691 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13732 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13743 net.host2ip;
#X text 200 13743 returns IP address by DNS name;
#X obj 20 13770 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13811 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13822 noise.baker;
#X text 200 13822 Part of a-chaos library;
#X obj 30 13849 noise.clifford;
#X text 200 13849 Part of a-chaos library;
#X obj 30 13876 noise.collatz;
#X text 200 13876 Part of a-chaos library;
#X obj 30 13903 noise.crackle~;
#X text 200 13903 sparse noise generator;
#X obj 30 13930 noise.duffing;
#X text 200 13930 Part of a-chaos library;
#X obj 30 13957 noise.ginger;
#X text 200 13957 Gingerbreadman map chaotic generator;
#X obj 30 13984 noise.henon;
#X text 200 13984 Part of a-chaos library;
#X obj 30 14011 noise.henon_heilles;
#X text 200 14011 Part of a-chaos library;
#X obj 30 14038 noise.henon_phase;
#X text 200 14038 Part of a-chaos library;
#X obj 30 14065 noise.henonf;
#X text 200 14065 Part of a-chaos library;
#X obj 30 14092 noise.ikeda;
#X text 200 14092 Part of a-chaos library;
#X obj 30 14119 noise.jong;
#X text 200 14119 Part of a-chaos library;
#X obj 30 14146 noise.lfreq0~;
#X text 200 14146 sampled/held noise (piecewise constant);
#X obj 30 14173 noise.lfreq~;
#X text 200 14173 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14200 noise.logistic;
#X text 200 14200 Part of a-chaos library;
#X obj 30 14227 noise.lorenz;
#X text 200 14227 Part of a-chaos library;
#X obj 30 14254 noise.lyapunov;
#X text 200 14254 Part of a-chaos library;
#X obj 30 14281 noise.navier_stokes;
#X text 200 14281 Part of a-chaos library;
#X obj 30 14308 noise.pink~;
#X text 200 14308 Pink noise generator;
#X obj 30 14335 noise.rossler;
#X text 200 14335 Part of a-chaos library;
#X obj 30 14362 noise.stein;
#X text 200 14362 Part of a-chaos library;
#X obj 30 14389 noise.torus;
#X text 200 14389 Part of a-chaos library;
#X obj 30 14416 noise.verhulst;
#X text 200 14416 Part of a-chaos library;
#X obj 30 14443 noise.white~;
#X text 200 14443 White noise generator;
#X obj 20 14470 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14511 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14522 osc.blit~;
#X text 200 14522 Bandlimited impulse train oscillator;
#X obj 30 14549 osc.impulse~;
#X text 200 14549 Bandlimited impulse train generator;
#X obj 30 14576 osc.pulse~;
#X text 200 14576 Bandlimited pulse train oscillator;
#X obj 30 14603 osc.saw4~;
#X text 200 14603 Bandlimited sawtooth wave;
#X obj 30 14630 osc.saw~;
#X text 200 14630 Alias-free sawtooth wave;
#X obj 30 14657 osc.sinfb~;
#X text 200 14657 Sine oscilator with feedback;
#X obj 30 14684 osc.sin~;
#X text 200 14684 Sine wave oscillator;
#X obj 30 14711 osc.square~;
#X text 200 14711 Bandlimited square wave oscillator;
#X obj 30 14738 osc.tri~;
#X text 200 14738 Bandlimited triangle wave oscillator;
#X obj 20 14765 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14806 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14817 canvas.current;
#X text 200 14817 verbose information about current canvas;
#X obj 30 14844 canvas.dir;
#X text 200 14844 current canvas directory;
#X obj 30 14871 canvas.name;
#X text 200 14871 current canvas name;
#X obj 30 14898 canvas.path;
#X text 200 14898 current canvas fullpath;
#X obj 30 14925 canvas.top;
#X text 200 14925 verbose information about top-level canvas;
#X obj 30 14952 patch.args;
#X text 200 14952 Get patch or subpatch arguments;
#X obj 30 14979 patch.deps;
#X text 200 14979 patch dependencies: used objects and abstractions;
#X obj 30 15006 patch.tree;
#X text 200 15006 patch tree;
#X obj 20 15033 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15074 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15085 path.basename;
#X text 200 15085 outputs filename portion of pathname;
#X obj 30 15112 path.dirname;
#X text 200 15112 outputs directory portion of pathname;
#X obj 30 15139 path.exists;
#X text 200 15139 checks if given path exists;
#X obj 30 15166 path.is_dir;
#X text 200 15166 check if path is directory;
#X obj 30 15193 path.lsdir;
#X text 200 15193 list directory contents;
#X obj 20 15220 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15261 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15272 is_any;
#X text 200 15272 checks if input data has *any* type;
#X obj 30 15299 is_bang;
#X text 200 15299 checks if input data has *bang* type;
#X obj 30 15326 is_data;
#X text 200 15326 checks if input data has *data* type;
#X obj 30 15353 is_dict;
#X text 200 15353 checks if input data has *dict* type;
#X obj 30 15380 is_even;
#X text 200 15380 checks if input number is even;
#X obj 30 15407 is_file;
#X text 200 15407 checks if file exists and accessible;
#X obj 30 15434 is_float;
#X text 200 15434 checks if input data has *float* type;
#X obj 30 15461 is_list;
#X text 200 15461 checks if input data has *list* type;
#X obj 30 15488 is_odd;
#X text 200 15488 checks if input number is odd;
#X obj 30 15515 is_pointer;
#X text 200 15515 checks if input data has *pointer* type;
#X obj 30 15542 is_symbol;
#X text 200 15542 checks if input data has *symbol* type;
#X obj 20 15569 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15610 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15621 preset.float;
#X text 200 15621 load/store float preset;
#X obj 30 15648 preset.list;
#X text 200 15648 load/store symbol preset;
#X obj 30 15675 preset.storage;
#X text 200 15675 preset storage control;
#X obj 30 15702 preset.symbol;
#X text 200 15702 load/store symbol preset;
#X obj 20 15729 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15770 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15781 patch.props;
#X text 200 15781 patch properties manager;
#X obj 30 15808 prop;
#X text 200 15808 get/set named property value for subpatch or abstraction;
#X obj 30 15835 prop.declare;
#X text 200 15835 declare named property for subpatch or abstraction;
#X obj 30 15862 prop.get;
#X text 200 15862 get property from connected object/subpatch/abstraction;
#X obj 30 15889 prop.get~;
#X text 200 15889 Property extractor from sound stream;
#X obj 30 15916 prop.join;
#X text 200 15916 join property to main data flow;
#X obj 30 15943 prop.set;
#X text 200 15943 set object property;
#X obj 30 15970 prop.split;
#X text 200 15970 separate properties from dataflow;
#X obj 20 15997 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16038 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16049 proto.firmata;
#X text 200 16049 Firmata Arduino protocol support;
#X obj 30 16076 proto.midi;
#X text 200 16076 raw midi encoder/parser;
#X obj 30 16103 proto.sp.alpaca;
#X text 200 16103 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16130 proto.xtouch_ext;
#X text 200 16130 Behringer XTouch Extender XMidi protocol;
#X obj 20 16157 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16198 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16209 random.atom;
#X text 200 16209 weighted atom generation from specified list;
#X obj 30 16236 random.discrete;
#X text 200 16236 random weighted integers on interval [0 \, n);
#X obj 30 16263 random.float;
#X text 200 16263 uniform random float generator in specified range;
#X obj 30 16290 random.gauss;
#X text 200 16290 gaussian random distribution;
#X obj 30 16317 random.int;
#X text 200 16317 uniform random integer generator in specified range;
#X obj 30 16344 random.linear;
#X text 200 16344 random linear distribution;
#X obj 30 16371 random.pw_const;
#X text 200 16371 piecewise constant random distribution;
#X obj 30 16398 random.pw_lin;
#X text 200 16398 piecewise linear random distribution;
#X obj 20 16425 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16466 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16477 seq.arp;
#X text 200 16477 sequence arpeggiator;
#X obj 30 16504 seq.bangs;
#X text 200 16504 bang sequencer;
#X obj 30 16531 seq.counter;
#X text 200 16531 modulo counter;
#X obj 30 16558 seq.matrix;
#X text 200 16558 sequencer control for ui.matrix;
#X obj 30 16585 seq.nbangs;
#X text 200 16585 output specified number of bang with time intervals;
#X obj 30 16612 seq.phasor;
#X text 200 16612 control rate phasor (saw) generator;
#X obj 30 16639 seq.toggles;
#X text 200 16639 toggle sequencer;
#X obj 30 16666 sequencer;
#X text 200 16666 basic sequence player;
#X obj 20 16693 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16734 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16745 snd.file;
#X text 200 16745 Sound file loader on steroids;
#X obj 20 16772 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 16813 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16824 hoa.2d.decoder~;
#X text 200 16824 hoa 2d decoder;
#X obj 30 16851 hoa.2d.encoder~;
#X text 200 16851 hoa 2d encoder;
#X obj 30 16878 hoa.2d.map~;
#X text 200 16878 a 2d ambisonic multisource spatializer;
#X obj 30 16905 hoa.2d.optim~;
#X text 200 16905 a 2D ambisonic optimization tool;
#X obj 30 16932 hoa.2d.projector~;
#X text 200 16932 a plane waves decomposer from circular harmonics
domain;
#X obj 30 16959 hoa.2d.recomposer~;
#X text 200 16959 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 16999 hoa.2d.rotate~;
#X text 200 16999 a 2D ambisonic sound field rotation;
#X obj 30 17026 hoa.2d.wider~;
#X text 200 17026 a 2d fractional ambisonic order simulator;
#X obj 30 17053 hoa.@process;
#X text 200 17053 process properties manager for hoa.process~;
#X obj 30 17080 hoa.in;
#X text 200 17080 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17107 hoa.in~;
#X text 200 17107 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17134 hoa.out;
#X text 200 17134 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17161 hoa.out~;
#X text 200 17161 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17188 hoa.process~;
#X text 200 17188 patcher loader for multichannel processing;
#X obj 30 17218 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17215 a 2d ambisonic harmonic scope;
#X obj 30 17240 pan.cos~;
#X text 200 17240 two channel equal power sine/cosine panner;
#X obj 30 17267 pan.linsig~;
#X text 200 17267 two channel linear panner with signal control;
#X obj 30 17294 pan.lin~;
#X text 200 17294 two channel linear panner;
#X obj 30 17321 pan.spread~;
#X text 200 17321 spreads input channels across the stereo field;
#X obj 30 17348 pan.sqrt~;
#X text 200 17348 two channel equal power square root panner;
#X obj 30 17375 spat.pan4~;
#X text 200 17375 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17402 spat.pan8~;
#X text 200 17402 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17429 spat.zita6x8~;
#X text 200 17429 spat with 6 inputs sources to 8 channel output;
#X obj 20 17456 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17497 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17508 string;
#X text 200 17508 string constructor;
#X obj 30 17535 string.contains;
#X text 200 17535 checks if string contains specified substring;
#X obj 30 17562 string.ends_with;
#X text 200 17562 checks if string ends with specified substring;
#X obj 30 17589 string.equal;
#X text 200 17589 check strings or symbols for equality;
#X obj 30 17616 string.format;
#X text 200 17616 formats string like printf.;
#X obj 30 17643 string.join;
#X text 200 17643 joins (concatenates) strings with separator;
#X obj 30 17670 string.length;
#X text 200 17670 number of characters in string (unicode supported);
#X obj 30 17697 string.match;
#X text 200 17697 check if string match regular expression;
#X obj 30 17724 string.remove;
#X text 200 17724 remove substring from input string;
#X obj 30 17751 string.replace;
#X text 200 17751 replace from one substring to another in input string;
#X obj 30 17778 string.split;
#X text 200 17778 split string by separator;
#X obj 30 17805 string.starts_with;
#X text 200 17805 checks if string starts with specified substring;
#X obj 30 17832 string.substr;
#X text 200 17832 extract substring from input string;
#X obj 30 17859 string2symbol;
#X text 200 17859 converts string to symbol;
#X obj 20 17886 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 17927 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17938 symbol.equal;
#X text 200 17938 check symbols for equality;
#X obj 30 17965 symbol.length;
#X text 200 17965 number of characters in symbol (unicode supported);
#X obj 30 17992 symbol.num_compare;
#X text 200 17992 numeric symbol compare;
#X obj 30 18019 symbol2any;
#X text 200 18019 converts symbol to message;
#X obj 30 18046 symbol2intlist;
#X text 200 18046 converts symbol to list of character codes;
#X obj 20 18073 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18114 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18125 synth.bee3~;
#X text 200 18125 Hammond-oid organ FM synthesis instrument;
#X obj 30 18152 synth.birds~;
#X text 200 18152 bird singing generator;
#X obj 30 18179 synth.church_bell~;
#X text 200 18179 generic church bell modal model;
#X obj 30 18206 synth.dubdub~;
#X text 200 18206 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18246 synth.dx7~;
#X text 200 18246 FAUST dx7 implementation;
#X obj 30 18273 synth.eguitar~;
#X text 200 18273 simple electric guitar model with steel strings;
#X obj 30 18300 synth.fgrain~;
#X text 200 18300 file granulator from STK;
#X obj 30 18327 synth.glitch~;
#X text 200 18327 Glitch synthesizer by naivesound;
#X obj 30 18354 synth.ks~;
#X text 200 18354 Karplus-Strong string;
#X obj 30 18381 synth.marimba~;
#X text 200 18381 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18421 synth.rhodey~;
#X text 200 18421 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18448 synth.risset_arp~;
#X text 200 18448 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18475 synth.risset_tone~;
#X text 200 18475 Jean Claude Risset's endless glissando;
#X obj 30 18502 synth.russian_bell~;
#X text 200 18502 russian church bell modal model;
#X obj 30 18529 synth.shakers~;
#X text 200 18529 various percussion sounds from STK library;
#X obj 30 18556 synth.sitar~;
#X text 200 18556 STK sitar;
#X obj 30 18583 synth.wurley~;
#X text 200 18583 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18610 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18651 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18662 system.colorpanel;
#X text 200 18662 System color panel dialog popup;
#X obj 30 18689 system.cursor;
#X text 200 18689 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 18716 system.exec;
#X text 200 18716 run external command in separate process;
#X obj 30 18743 system.exit;
#X text 200 18743 quit PureData;
#X obj 30 18770 system.getenv;
#X text 200 18770 Get system environment variables;
#X obj 30 18797 system.hostname;
#X text 200 18797 outputs system hostname;
#X obj 30 18824 system.memsize;
#X text 200 18824 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 18864 system.memused;
#X text 200 18864 returns the process physical memory use - current
and peak;
#X obj 30 18891 system.screen_size;
#X text 200 18891 returns current screen size in pixels;
#X obj 20 18918 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 18959 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18970 tl.bang;
#X text 200 18970 Timeline bang (with possible delay);
#X obj 30 19000 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 18997 Timeline section;
#X obj 30 19022 tl.timeline;
#X text 200 19022 Timeline - event scheduler;
#X obj 30 19049 tl.toggle;
#X text 200 19049 Timeline bang;
#X obj 30 19076 tl.transport;
#X text 200 19076 Timeline transport control;
#X obj 20 19103 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19144 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19158 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19155 array view with cursor and selection;
#X obj 30 19183 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19180 A bang... that's all;
#X obj 30 19208 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19205 button widget;
#X obj 30 19233 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19230 colorchooser widget;
#X obj 30 19258 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19255 Display GUI object;
#X obj 30 19283 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19280 GUI for turning DSP on/off;
#X obj 30 19308 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19305 envelope editor widget;
#X obj 30 19333 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19330 UI filter object based on biquad filter;
#X obj 30 19358 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19355 UI stereo gain control;
#X obj 30 19383 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19380 UI gain control;
#X obj 30 19408 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19405 simple icon with button capabilities;
#X obj 30 19433 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19430 value increment/decrement;
#X obj 30 19458 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19455 keyboard widget;
#X obj 30 19483 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19480 knob widget;
#X obj 30 19508 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19505 simple label widget;
#X obj 30 19533 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19530 Hyperlink widget;
#X obj 30 19558 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19555 The matrix of toggles has you.;
#X obj 30 19583 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19580 Dropdown menu;
#X obj 30 19608 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19605 Shows peak and rms signal level;
#X obj 30 19633 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19630 incoming MIDI message viewport;
#X obj 30 19658 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19655 filter mouse events from ui objects;
#X obj 30 19683 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19680 routes mouse events from ui objects;
#X obj 30 19708 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 19705 counterpart of the vanilla [nbx];
#X obj 30 19733 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 19730 counterpart of the vanilla [nbx] for signal;
#X obj 30 19758 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 19755 signal plotter;
#X obj 30 19783 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 19780 2D slider in polar coordinates;
#X obj 30 19808 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 19805 Preset manager;
#X obj 30 19833 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 19830 counterpart of the vanilla radio toggle;
#X obj 30 19858 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 19855 range slider;
#X obj 30 19883 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 19880 Scope GUI object;
#X obj 30 19908 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 19905 counterpart of the vanilla slider;
#X obj 30 19933 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 19930 2D slider widget;
#X obj 30 19958 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 19955 Multiple slider widget;
#X obj 30 19983 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 19980 Spectroscope GUI object;
#X obj 30 20008 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20005 displays a list of text buttons or text toggles;
#X obj 30 20033 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20030 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20055 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20055 version: v0.9.1 \, license: GPL3;
#X obj 20 20083 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20106 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20070 msg 0;
#X obj 670 20105 switch~;
#X connect 1394 0 1395 0;