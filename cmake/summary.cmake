include(TargetArch)
target_architecture(SUMMARY_TARGET_ARCH)

message(STATUS "===========================================")
message(STATUS "Configure summary:")
message(STATUS "===========================================")
if(APPLE)
message(STATUS "  MacOSX version       ${MACOSX_VERSION}")
endif()
message(STATUS "  Pd version:          ${PD_TEXT_VERSION_FULL}")
message(STATUS "  Tk version:          ${TK_VERSION} (WISH_VERSION=${WISH_VERSION})")
message(STATUS "  Distrib version:     ${CEAMMC_DISTRIB_VERSION}")
message(STATUS "  ceammc version:      ${CEAMMC_LIB_VERSION}")
message(STATUS "  C compiler:          ${CMAKE_C_COMPILER}")
message(STATUS "  C++ compiler:        ${CMAKE_CXX_COMPILER}")
message(STATUS "  Arch:                ${SUMMARY_TARGET_ARCH}")
if(WITH_DOUBLE_PRECISION)
message(STATUS "  float precision:     64 (double)")
else()
message(STATUS "  float precision:     32 (float)")
endif()
message(STATUS "  build type:          ${CMAKE_BUILD_TYPE}")
message(STATUS "  PD_INSTANCE:         ${WITH_PD_INSTANCE}")

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
message(STATUS "  CFLAGS:              ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message(STATUS "  CXXFLAGS:            ${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS}")
endif()

if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
message(STATUS "  CFLAGS:              ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message(STATUS "  CXXFLAGS:            ${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS}")
endif()

if(APPLE)
message(STATUS "  MacOSX sysroot:      ${CMAKE_OSX_SYSROOT}")
message(STATUS "  MacOSX min-version:  ${CMAKE_OSX_DEPLOYMENT_TARGET}")
endif()
message(STATUS "                                    ")
message(STATUS "  Audio:")
message(STATUS "       alsa:           ${WITH_ALSA} (WITH_ALSA=${WITH_ALSA})")
message(STATUS "       dummy:          ${WITH_DUMMY_AUDIO} (WITH_DUMMY_AUDIO=${WITH_DUMMY_AUDIO})")
message(STATUS "       jack:           ${WITH_JACK} (WITH_JACK=${WITH_JACK})")
message(STATUS "       portaudio:      ${WITH_PORTAUDIO} (WITH_PORTAUDIO=${WITH_PORTAUDIO})")
message(STATUS "       oss:            ${WITH_OSS} (WITH_OSS=${WITH_OSS})")

if(WIN32)
message(STATUS "       mmio:           ${WITH_MMIO} (WITH_MMIO=${WITH_MMIO})")
endif()

message(STATUS "  MIDI:")
message(STATUS "       alsa:           ${WITH_ALSA_MIDI} (WITH_ALSA_MIDI=${WITH_ALSA_MIDI})")
message(STATUS "       dummy:          ${WITH_DUMMY_MIDI} (WITH_DUMMY_MIDI=${WITH_DUMMY_MIDI})")
message(STATUS "       portmidi:       ${WITH_PORTMIDI} (WITH_PORTMIDI=${WITH_PORTMIDI})")
message(STATUS "       oss:            ${WITH_OSS} (WITH_OSS=${WITH_OSS})")
if(APPLE)
message(STATUS "       coremidi:       ${WITH_COREMIDI} (WITH_COREMIDI=${WITH_COREMIDI})")
endif()
message(STATUS "")
message(STATUS "  Libraries:")
message(STATUS "       Faust:          ${WITH_FAUST} (WITH_FAUST=${WITH_FAUST})")
message(STATUS "       FluidSynth:     ${WITH_FLUIDSYNTH} (WITH_FLUIDSYNTH=${WITH_FLUIDSYNTH})")
message(STATUS "       LeapMotion:     ${LEAPMOTION_FOUND}")
message(STATUS "       LuaJIT:         ${WITH_LUAJIT} (WITH_LUAJIT=${WITH_LUAJIT})")
message(STATUS "       RHVoice:        ${WITH_TTS_RHVOICE} (WITH_TTS_RHVOICE=${WITH_TTS_RHVOICE})")
message(STATUS "       Sfizz:          ${WITH_SFIZZ} (WITH_SFIZZ=${WITH_SFIZZ})")
message(STATUS "       artnet:         ${WITH_ARTNET} (WITH_ARTNET=${WITH_ARTNET})")
message(STATUS "       fftw3:          ${WITH_FFTW} (WITH_FFTW=${WITH_FFTW})")
message(STATUS "       flite:          ${WITH_TTS_FLITE} (WITH_TTS_FLITE=${WITH_TTS_FLITE})")
message(STATUS "       gamepad:        ${WITH_GAMEPAD} (WITH_GAMEPAD=${WITH_GAMEPAD})")
message(STATUS "       libsamplerate:  ${WITH_LIBSAMPLERATE} (WITH_LIBSAMPLERATE=${WITH_LIBSAMPLERATE})")
message(STATUS "       libsndfile:     ${LIBSNDFILE_FOUND}")
message(STATUS "       libusb:         ${LIBUSB_1_FOUND}")
message(STATUS "       ltc:            ${WITH_LTC} (WITH_LTC=${WITH_LTC})")
message(STATUS "       modplug:        ${WITH_MODPLUG} (WITH_MODPLUG=${WITH_MODPLUG})")
message(STATUS "       mqtt:           ${WITH_MQTT} (WITH_MQTT=${WITH_MQTT})")
message(STATUS "       telegram:       ${WITH_TELEGRAM} (WITH_TELEGRAM=${WITH_TELEGRAM})")
message(STATUS "       verovio:        ${WITH_VEROVIO} (WITH_VEROVIO=${WITH_VEROVIO})")
message(STATUS "       zeroconf:       ${WITH_ZEROCONF} (WITH_ZEROCONF=${WITH_ZEROCONF})")



message(STATUS "  3rd party externals:")
message(STATUS "       lyonpotpourri:  ${WITH_EXT_LYONPOTPOURRI} (WITH_EXT_LYONPOTPOURRI=${WITH_EXT_LYONPOTPOURRI})")
message(STATUS "       FFTease:        ${WITH_EXT_FFTEASE} (WITH_EXT_FFTEASE=${WITH_EXT_FFTEASE})")
message(STATUS "       [autotune~]:    ${WITH_EXT_AUTOTUNE} (WITH_EXT_AUTOTUNE=${WITH_EXT_AUTOTUNE})")
message(STATUS "       flext:          ${WITH_EXT_FLEXT} (WITH_EXT_FLEXT=${WITH_EXT_FLEXT})")
message(STATUS "       flext:vasp      ${WITH_FLEXT_VASP} (WITH_FLEXT_VASP=${WITH_FLEXT_VASP})")
message(STATUS "===========================================")
message(STATUS "Build info:")
message(STATUS "===========================================")
message(STATUS "  Coverage:            ${WITH_COVERAGE} (WITH_COVERAGE=${WITH_COVERAGE})")
message(STATUS "  Benchmark:           ${WITH_BENCHMARK} (WITH_BENCHMARK=${WITH_BENCHMARK})")
message(STATUS "  clang-tidy:          ${WITH_CLANG_TIDY} (WITH_CLANG_TIDY=${WITH_CLANG_TIDY})")
message(STATUS "  Experimental:        ${WITH_EXPERIMENTAL}")
message(STATUS "  Tests:               ${ENABLE_TESTS} (ENABLE_TESTS=${ENABLE_TESTS})")
message(STATUS "  Install prefix:      ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  External suffix:     ${PD_EXTERNAL_EXTENSION}")
if(PD_MACOSX_DMG)
message(STATUS "  Dmg:                 ${PD_MACOSX_DMG}")
endif()
if(CEAMMC_EXTERNAL_NAME)
message(STATUS "  External:            ${CEAMMC_EXTERNAL_NAME}")
endif()
if(LINUX_DEBIAN_PACKAGE_FILE_NAME)
message(STATUS "  deb:                 ${LINUX_DEBIAN_PACKAGE_FILE_NAME}")
endif()
message(STATUS "")
