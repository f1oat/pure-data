<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="seq.toggles">
        <title>seq.toggles</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>toggle sequencer</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>seq</category>
            <keywords>seq sequencer toggle pattern rhythm</keywords>
            <since>0.9.1</since>
            <aliases>
                <alias>seq.t</alias>
            </aliases>
        </meta>
        <info>
            <par>Output 1 on event start and 0 on event stop</par>
            <par>The event length is controlled via @length property. It can be fixed, percent or
            subtractive. Percent values are calculated from whole event duration. Positive values
            &gt;=0 treated as fixed event length. Values &lt;0 are calculated as
            EVENT_DUR-value</par>
            <par>• 'percent': @length 60% and @t 100ms - for event value '2', event duration is
            200ms, event length is 120ms</par>
            <par>• 'fixed': @length 10 or @length 10ms and @t 100ms - event any duration, event
            length is fixed: 10ms</par>
            <par>• 'subtract': @length -40 and @t 100ms - for event value '2', event duration is
            200ms, event length is 160 (200-40). For event value '1', event duration is 100ms,
            event length is 60 (100-40)</par>
        </info>
        <arguments>
            <argument name="P" type="list">sequencer pattern in beat duration units</argument>
        </arguments>
        <properties>
            <property name="@t" type="float" default="100" minvalue="1" maxvalue="20000"
            units="millisecond">time between beats. Unit values like 100ms, 240bpm or 60|4bpm also
            can be used</property>
            <property name="@p" type="list" default="">sequencer pattern in beat duration
            units</property>
            <property name="@r" type="int" minvalue="-1" default="1">number of whole sequence
            repeats. If -1: repeat infinitely</property>
            <property name="@inf" type="alias">alias to @r -1, repeats infinitely</property>
            <property name="@once" type="alias">alias to @r 1, play once</property>
            <property name="@dur" type="float" default="0" minvalue="0" units="millisecond">whole
            sequence duration. (Recalculates @t property accordingly)</property>
            <property name="@upbeat" type="float" default="0" minvalue="0">wait specified number of
            beats before sequence start</property>
            <property name="@length" type="float" default="75">event length. In case of float or
            float wuth 'ms' suffix - event length is fixed for any event duration. In case of V% -
            @length expected to be in 0..100 range and event length is percent of duration. In case
            of negative @length event duration is calculated as duration+@length, but not less then
            1</property>
            <property name="@i" type="int" access="readonly" default="0">current
            sequence iteration</property>
            <property name="@ri" type="int" access="readonly" default="0">current
            repeat iteration</property>
            <property name="@mode" type="symbol" enum="inc dec tri" default="inc">sequencer mode.
            'inc': from first to last, 'dec': from last to first, 'tri': from first to last, then
            back</property>
        </properties>
        <methods>
            <method name="start">start sequencer from current position</method>
            <method name="reset">reset all counters and stop</method>
            <method name="rewind">reset all counters without stopping</method>
            <method name="stop">stop sequencer</method>
            <method name="tick">output current sequence element and move to next</method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">reset sequence and repeat counters and start sequencer</xinfo>
            </inlet>
            <inlet>
                <xinfo on="list">set new pattern value</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>1 and 0</outlet>
            <outlet>[i IDX N( - sequence iteration, [ri IDX N( - repeat iteration, [ed MS( - event
            duration, [el MS( event length or [done( when done</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[B] [start([stop( [reset( [F]           [F]
|   |       |      |      |             |
|   |       |      |      [@length $1%( [@length $1ms(
|   |       |      |      |             |
|   |       |      |      |             |
[seq.toggles 3 1 2 1 1 @t 120ms @inf    ]
|                          ^|
[lop~ 50] [osc~ 1000]      [route done i ri ed el ]
|         |.               |   ^|   ^^|  ^^^| ^^^^|
[*~        ]               [B]  [F]  [F]  [F]   [F]
|
[ui.hgain~]                [ui.dsp~]
|\
[dac~]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
