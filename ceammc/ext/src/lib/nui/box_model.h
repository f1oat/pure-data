// this is autogenerated file, do not edit!
#ifndef BOX_H_
#define BOX_H_
// clang-format off

#include "nui/model.h"
#include "nui/style.h"
#include "m_pd.h"

#include <tuple>

namespace ceammc {
namespace ui {

class BoxData
    : public std::tuple<Size, HexColor, HexColor, HexColor, HexColor, bool, Xlets, Xlets, int> {
public:
    enum Fields {
        SIZE,
        BORDER_COLOR,
        FILL_COLOR,
        XLET_CONTROL_COLOR,
        XLET_SIGNAL_COLOR,
        SELECTED,
        INLETS,
        OUTLETS,
        STYLE_IDX,
    };
public:
    BoxData()
        : std::tuple<Size, HexColor, HexColor, HexColor, HexColor, bool, Xlets, Xlets, int>(Size(10, 10), colors::st_border, colors::st_fill, colors::st_xlet_ctl, colors::st_xlet_sig, false, Xlets(), Xlets(), 0) { }

    BoxData(int style)
        : BoxData() {
        setStyle(style);
        loadStyle(style);
    }

    // constants
    static HexColor selectColor() noexcept { return colors::blue; }

    // getters
    Size const& size() const noexcept { return std::get<SIZE>(*this); }
    HexColor const& borderColor() const noexcept { return std::get<BORDER_COLOR>(*this); }
    HexColor const& fillColor() const noexcept { return std::get<FILL_COLOR>(*this); }
    HexColor const& xletControlColor() const noexcept { return std::get<XLET_CONTROL_COLOR>(*this); }
    HexColor const& xletSignalColor() const noexcept { return std::get<XLET_SIGNAL_COLOR>(*this); }
    bool const& selected() const noexcept { return std::get<SELECTED>(*this); }
    Xlets const& inlets() const noexcept { return std::get<INLETS>(*this); }
    Xlets const& outlets() const noexcept { return std::get<OUTLETS>(*this); }
    int const& style() const noexcept { return std::get<STYLE_IDX>(*this); }

    // setters
    void setSize(Size v) { std::get<SIZE>(*this) = v; }
    void setBorderColor(HexColor v) { std::get<BORDER_COLOR>(*this) = v; }
    void setFillColor(HexColor v) { std::get<FILL_COLOR>(*this) = v; }
    void setXletControlColor(HexColor v) { std::get<XLET_CONTROL_COLOR>(*this) = v; }
    void setXletSignalColor(HexColor v) { std::get<XLET_SIGNAL_COLOR>(*this) = v; }
    void setSelected(bool v) { std::get<SELECTED>(*this) = v; }
    void setInlets(Xlets v) { std::get<INLETS>(*this) = v; }
    void setOutlets(Xlets v) { std::get<OUTLETS>(*this) = v; }
    void setStyle(int v) { std::get<STYLE_IDX>(*this) = v; }

    // refs
    Size& sizeRef() { return std::get<SIZE>(*this); }
    HexColor& borderColorRef() { return std::get<BORDER_COLOR>(*this); }
    HexColor& fillColorRef() { return std::get<FILL_COLOR>(*this); }
    HexColor& xletControlColorRef() { return std::get<XLET_CONTROL_COLOR>(*this); }
    HexColor& xletSignalColorRef() { return std::get<XLET_SIGNAL_COLOR>(*this); }
    bool& selectedRef() { return std::get<SELECTED>(*this); }
    Xlets& inletsRef() { return std::get<INLETS>(*this); }
    Xlets& outletsRef() { return std::get<OUTLETS>(*this); }
    int& styleRef() { return std::get<STYLE_IDX>(*this); }

    // style
    void loadStyle(int st) {
        using sc = StyleCollection;
        setBorderColor(sc::color(st, "box:border_color"_hash, colors::st_border));
        setFillColor(sc::color(st, "box:fill_color"_hash, colors::st_fill));
        setXletControlColor(sc::color(st, "box:xlet_control_color"_hash, colors::st_xlet_ctl));
        setXletSignalColor(sc::color(st, "box:xlet_signal_color"_hash, colors::st_xlet_sig));
    }
};

using BoxModel = ModelBase<BoxData>;

}
}

// clang-format on
#endif
