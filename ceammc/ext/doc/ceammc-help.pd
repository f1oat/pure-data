#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value or pattern;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.risset_rythm~;
#X text 200 803 Risset Rythm: accelerando or ritardando;
#X obj 30 830 array.rms;
#X text 200 830 calculates root mean square value for array;
#X obj 30 857 array.set;
#X text 200 857 set array content from list;
#X obj 30 884 array.stddev;
#X text 200 884 calculates standard deviation for array values;
#X obj 30 911 array.stretch;
#X text 200 911 array time-stretch \, pitch-shift or rate-change;
#X obj 30 938 array.sum;
#X text 200 938 calculates sum of array elements;
#X obj 30 965 array.sum2;
#X text 200 965 calculates sum of squares of array elements;
#X obj 30 992 array.variance;
#X text 200 992 calculates variance of array values;
#X obj 30 1019 array.vplay;
#X text 200 1019 simple array player for using with vline~;
#X obj 30 1046 array.window;
#X text 200 1046 fill array with window;
#X obj 30 1073 plot.geomspace~;
#X text 200 1073 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1113 plot.hist~;
#X text 200 1113 calculate and output signal histogram;
#X obj 30 1140 plot.linspace~;
#X text 200 1140 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1180 plot.logspace~;
#X text 200 1180 outputs numbers spaced evenly on a log scale;
#X obj 30 1207 plot.response~;
#X text 200 1207 output amp/phase freq response to impulse;
#X obj 20 1234 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1286 ceammc.search;
#X text 200 1286 ceammc library search object;
#X obj 30 1316 ui.link @title [function] @url function-help.pd;
#X text 200 1313 named function;
#X obj 30 1338 function.call;
#X text 200 1338 call named function;
#X obj 30 1365 gain~;
#X text 200 1365 multislot signal gain;
#X obj 30 1392 logger;
#X text 200 1392 advanced data logger;
#X obj 30 1419 matrix~;
#X text 200 1419 signal routing matrix;
#X obj 30 1446 metro.pattern;
#X text 200 1446 metro with rhythmic patterns;
#X obj 30 1473 metro.random;
#X text 200 1473 metro random bang with specified range;
#X obj 30 1500 metro.seq;
#X text 200 1500 metro sequencer;
#X obj 30 1527 mix~;
#X text 200 1527 multislot signal mixer;
#X obj 30 1554 nsig~;
#X text 200 1554 Mulitchannel converter from control to audio rate;
#X obj 30 1581 obj.props;
#X text 200 1581 property extractor;
#X obj 30 1608 radio;
#X text 200 1608 float index to outlet values as radio switch;
#X obj 30 1635 spring;
#X text 200 1635 float value "spring";
#X obj 30 1662 sync;
#X text 200 1662 value synchronization;
#X obj 30 1689 window;
#X text 200 1689 returns window value by given window position;
#X obj 30 1716 xdac~;
#X text 200 1716 dac~ with channel ranges;
#X obj 30 1743 xfade2~;
#X text 200 1743 multi stereo-signal crossfade;
#X obj 30 1770 xfade~;
#X text 200 1770 multi signal crossfade;
#X obj 30 1797 z~;
#X text 200 1797 sample delay;
#X obj 20 1824 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1865 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1876 chaos.gbman0;
#X text 200 1876 Gingerbreadman map chaotic generator;
#X obj 30 1903 chaos.gbman0~;
#X text 200 1903 Gingerbreadman map chaotic generator;
#X obj 30 1930 chaos.jong;
#X text 200 1930 Peter de Jong attractor;
#X obj 30 1957 chaos.logistic;
#X text 200 1957 Logistic map chaotic generator;
#X obj 30 1984 chaos.std0;
#X text 200 1984 Standard map chaotic generator;
#X obj 30 2011 chaos.std0~;
#X text 200 2011 Standard map chaotic generator;
#X obj 20 2038 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2079 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2090 array.p2s;
#X text 200 2090 convert array phase [0\..1] to sample position;
#X obj 30 2117 array.s2p;
#X text 200 2117 convert sample position to phase range [0\..1];
#X obj 30 2144 conv.amp2dbfs;
#X text 200 2144 convert from amplitude to decibel full scale;
#X obj 30 2171 conv.amp2dbfs~;
#X text 200 2171 convert from amplitude to decibel full scale;
#X obj 30 2198 conv.bits2bang;
#X text 200 2198 convert list of bits to bang events;
#X obj 30 2225 conv.bits2int;
#X text 200 2225 convert list of bits to integer;
#X obj 30 2252 conv.bits2note;
#X text 200 2252 convert list of bits to note events;
#X obj 30 2279 conv.bits2pos;
#X text 200 2279 convert list of bits to list of bit position;
#X obj 30 2306 conv.bpm2hz;
#X text 200 2306 converts BPM to frequency in herz;
#X obj 30 2333 conv.bpm2ms;
#X text 200 2333 convert frequency in BPM to period in milliseconds;
#X obj 30 2360 conv.bpm2sec;
#X text 200 2360 convert frequency in BPM to period in seconds;
#X obj 30 2387 conv.car2pol;
#X text 200 2387 convert cartesian coords to polar;
#X obj 30 2414 conv.cc2amp;
#X text 200 2414 convert from MIDI Control Change range;
#X obj 30 2441 conv.dbfs2amp;
#X text 200 2441 convert decibel full scale to amplitude;
#X obj 30 2468 conv.dbfs2amp~;
#X text 200 2468 convert decibel full scale to amplitude;
#X obj 30 2495 conv.degree2key;
#X text 200 2495 convert scale degree to key;
#X obj 30 2522 conv.edge2bang;
#X text 200 2522 edge detector for numeric stream;
#X obj 30 2549 conv.hex2int;
#X text 200 2549 hex symbol to int value;
#X obj 30 2576 conv.int2bits;
#X text 200 2576 convert integer to list of bits;
#X obj 30 2603 conv.lin2curve;
#X text 200 2603 map linear to exponential range with 0 allowed.;
#X obj 30 2630 conv.lin2exp;
#X text 200 2630 maps linear range to exponential range;
#X obj 30 2657 conv.lin2lin;
#X text 200 2657 convert from one linear range to another;
#X obj 30 2684 conv.lin2lin~;
#X text 200 2684 convert from one linear range to another for signals;
#X obj 30 2711 conv.list2props;
#X text 200 2711 converts list to series of property messages;
#X obj 30 2738 conv.midi2freq;
#X text 200 2738 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2778 conv.ms2bpm;
#X text 200 2778 convert period in milliseconds to frequency in BPM;
#X obj 30 2805 conv.ms2samp;
#X text 200 2805 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2845 conv.ms2samp~;
#X text 200 2845 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2885 conv.phase2rad;
#X text 200 2885 convert phase value [0-1] to radians [0-2π];
#X obj 30 2912 conv.phase2rad~;
#X text 200 2912 convert phase value [0-1] to radians [0-2π];
#X obj 30 2939 conv.pitch2midi;
#X text 200 2939 converts symbol pitch name to MIDI note number;
#X obj 30 2966 conv.pol2car;
#X text 200 2966 convert from polar coordinates to cartesian;
#X obj 30 2993 conv.rad2phase;
#X text 200 2993 convert radians value to phase;
#X obj 30 3020 conv.rad2phase~;
#X text 200 3020 convert radians value to phase;
#X obj 30 3047 conv.samp2ms;
#X text 200 3047 convert samples to time according to samplerate;
#X obj 30 3074 conv.samp2ms~;
#X text 200 3074 convert samples to milliseconds according to samplerate;
#X obj 30 3101 conv.samp2sec;
#X text 200 3101 convert samples to time according to samplerate;
#X obj 30 3128 conv.sec2bpm;
#X text 200 3128 convert period in seconds to frequency in BPM;
#X obj 30 3155 conv.sec2samp;
#X text 200 3155 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3195 conv.sec2str;
#X text 200 3195 converts float time in seconds to formated symbol
(or string);
#X obj 30 3222 conv.sig2float~;
#X text 200 3222 convert signal to floats;
#X obj 30 3249 conv.str2sec;
#X text 200 3249 converts formatted time to float value in seconds;
#X obj 30 3276 music.dur2time;
#X text 200 3276 convert duration list to time;
#X obj 30 3303 music.voice2midi;
#X text 200 3303 convert voice music list of midi pitches;
#X obj 20 3330 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3371 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3382 data.copy;
#X text 200 3382 make copy for any data types: MList \, Set etc...;
#X obj 30 3409 data.dict;
#X text 200 3409 dictionary container: store values by key;
#X obj 30 3436 data.fifo;
#X text 200 3436 First-In-First-Out (FIFO) queue data container;
#X obj 30 3463 data.float;
#X text 200 3463 robust float object;
#X obj 30 3490 data.int;
#X text 200 3490 robust int object;
#X obj 30 3517 data.list;
#X text 200 3517 list container;
#X obj 30 3544 data.mlist;
#X text 200 3544 multidimensional list container;
#X obj 30 3571 data.set;
#X text 200 3571 container that store unique elements;
#X obj 30 3598 data.set2list;
#X text 200 3598 converts set to list;
#X obj 30 3625 dict.contains;
#X text 200 3625 predicate to check if dict contains a keys;
#X obj 30 3652 dict.each;
#X text 200 3652 map each value in dict;
#X obj 30 3679 dict.from_list;
#X text 200 3679 creates dictionary from list;
#X obj 30 3706 dict.get;
#X text 200 3706 output dict values;
#X obj 30 3733 dict.keys;
#X text 200 3733 get list of dict keys;
#X obj 30 3760 dict.pass;
#X text 200 3760 passes specified keys in dict;
#X obj 30 3787 dict.reject;
#X text 200 3787 rejects specified keys from dict;
#X obj 30 3814 dict.size;
#X text 200 3814 dictionary size;
#X obj 30 3841 dict.to_list;
#X text 200 3841 converts dictionary to plain list;
#X obj 30 3868 dict.values;
#X text 200 3868 dictionary values as mlist;
#X obj 30 3895 mlist.flatten;
#X text 200 3895 flatten nested mlist;
#X obj 30 3922 rtree.to_list;
#X text 200 3922 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3949 set.contains;
#X text 200 3949 check if specified element is in set;
#X obj 30 3976 set.diff;
#X text 200 3976 difference between two sets;
#X obj 30 4003 set.equal;
#X text 200 4003 checks if two sets are equal (contains same elements);
#X obj 30 4030 set.intersect;
#X text 200 4030 output intersection of given sets;
#X obj 30 4057 set.size;
#X text 200 4057 get number of elements in set;
#X obj 30 4084 set.symdiff;
#X text 200 4084 symmetric difference between two sets;
#X obj 30 4111 set.union;
#X text 200 4111 output union of given sets;
#X obj 20 4138 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4179 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4190 dyn.comp2~;
#X text 200 4190 stereo dynamic range compressor;
#X obj 30 4217 dyn.comp~;
#X text 200 4217 mono dynamic range compressors;
#X obj 30 4244 dyn.gate2~;
#X text 200 4244 stereo signal gate;
#X obj 30 4271 dyn.gate~;
#X text 200 4271 mono signal gate;
#X obj 30 4298 dyn.limit2~;
#X text 200 4298 stereo 1176LN Peak Limiter;
#X obj 30 4325 dyn.limit~;
#X text 200 4325 mono 1176LN Peak Limiter;
#X obj 30 4352 dyn.softclip~;
#X text 200 4352 soft signal clip;
#X obj 20 4379 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4420 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4431 env.adsr~;
#X text 200 4431 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4458 env.ar~;
#X text 200 4458 Attack/Release envelope generator;
#X obj 30 4485 env.asr~;
#X text 200 4485 Attack/Sustain/Release envelope generator;
#X obj 30 4512 env.concat;
#X text 200 4512 Envelope concatenation;
#X obj 30 4539 env.follow~;
#X text 200 4539 Envelope follower with independent attack and release
times;
#X obj 30 4566 env.mix;
#X text 200 4566 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4606 env.smooth~;
#X text 200 4606 An envelope with an exponential attack and release;
#X obj 30 4633 env.tscale;
#X text 200 4633 Envelope time-scale;
#X obj 30 4660 env.tshift;
#X text 200 4660 Envelope time-shift (horizontal);
#X obj 30 4687 env.vscale;
#X text 200 4687 Envelope value-scale;
#X obj 30 4714 env2array;
#X text 200 4714 Renders envelope to specified array;
#X obj 30 4741 env2vline;
#X text 200 4741 Converts envelope to bunch of vline messages;
#X obj 30 4768 envelope;
#X text 200 4768 Envelope data type;
#X obj 30 4795 vline2env;
#X text 200 4795 Converts vline messages to env;
#X obj 20 4822 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4863 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4874 expand_env;
#X text 200 4874 Substitute environment variables in data stream;
#X obj 30 4901 flow.append;
#X text 200 4901 append message to flow stream;
#X obj 30 4928 flow.change;
#X text 200 4928 rejects redundant input values;
#X obj 30 4955 flow.count;
#X text 200 4955 control flow event counter;
#X obj 30 4982 flow.delay;
#X text 200 4982 enhanced version on vanilla delay object;
#X obj 30 5009 flow.demultiplex;
#X text 200 5009 control flow demultiplexer;
#X obj 30 5036 flow.demultiplex2~;
#X text 200 5036 audio stream stereo demultiplexer;
#X obj 30 5063 flow.demultiplex~;
#X text 200 5063 audio stream demultiplexer;
#X obj 30 5090 flow.dollar;
#X text 200 5090 data flow dollar converter;
#X obj 30 5117 flow.dup;
#X text 200 5117 message duplicator;
#X obj 30 5144 flow.float;
#X text 200 5144 pass floats;
#X obj 30 5171 flow.gate;
#X text 200 5171 control flow gate. [spigot] analog;
#X obj 30 5198 flow.greater;
#X text 200 5198 numeric stream router;
#X obj 30 5225 flow.greater_eq;
#X text 200 5225 numeric stream router;
#X obj 30 5252 flow.group;
#X text 200 5252 group input atoms in list of specified size;
#X obj 30 5279 flow.interval;
#X text 200 5279 measure time between flow events;
#X obj 30 5306 flow.less;
#X text 200 5306 numeric stream router \, like many [moses];
#X obj 30 5333 flow.less_eq;
#X text 200 5333 numeric stream router \, like many [moses];
#X obj 30 5360 flow.list2many;
#X text 200 5360 routes list element with message selectors;
#X obj 30 5387 flow.match;
#X text 200 5387 route data flow by regexp match;
#X obj 30 5414 flow.mem;
#X text 200 5414 store data flow in memory;
#X obj 30 5441 flow.multiplex;
#X text 200 5441 control flow multiplexer;
#X obj 30 5468 flow.multiplex2~;
#X text 200 5468 audio stream stereo multiplexer;
#X obj 30 5495 flow.multiplex~;
#X text 200 5495 audio stream multiplexer;
#X obj 30 5522 flow.once;
#X text 200 5522 one message pass thru;
#X obj 30 5549 flow.pack;
#X text 200 5549 flow pack;
#X obj 30 5576 flow.pass;
#X text 200 5576 pass specified values;
#X obj 30 5603 flow.pass_if;
#X text 200 5603 pass values that accepted by predicate object;
#X obj 30 5630 flow.pipe;
#X text 200 5630 enhanced version on vanilla pipe object;
#X obj 30 5657 flow.queue;
#X text 200 5657 multi-channel control flow sync queue (or FIFO);
#X obj 30 5684 flow.record;
#X text 200 5684 flow stream recorder/player;
#X obj 30 5711 flow.reject;
#X text 200 5711 reject specified values;
#X obj 30 5738 flow.reject_if;
#X text 200 5738 reject values by predicate;
#X obj 30 5765 flow.ring;
#X text 200 5765 dataflow ring buffer;
#X obj 30 5792 flow.route;
#X text 200 5792 advanced message router;
#X obj 30 5819 flow.select;
#X text 200 5819 vanilla flow on steroids;
#X obj 30 5846 flow.seqdelay;
#X text 200 5846 sequential delay/router for input flow;
#X obj 30 5873 flow.space;
#X text 200 5873 space in time messages received at the same logical
time;
#X obj 30 5900 flow.speedlim;
#X text 200 5900 control stream speed limiter;
#X obj 30 5927 flow.split;
#X text 200 5927 split data flow by external side-chain predicate;
#X obj 30 5954 flow.stack;
#X text 200 5954 any message stack;
#X obj 30 5981 flow.sync;
#X text 200 5981 bus with only hot inlets;
#X obj 30 6008 flow.sync_pack;
#X text 200 6008 flow pack with all hot inlets;
#X obj 30 6035 flow.tee~;
#X text 200 6035 separate audio and control streams;
#X obj 30 6062 replace;
#X text 200 6062 Replace atoms in data stream;
#X obj 30 6089 route.float;
#X text 200 6089 separate float messages from other types;
#X obj 30 6116 route.random;
#X text 200 6116 routes input flow to random outlet;
#X obj 20 6143 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6184 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6195 flt.a-weight;
#X text 200 6195 convert frequency to A-weight value;
#X obj 30 6222 flt.biquad~;
#X text 200 6222 second order IIR filter.;
#X obj 30 6249 flt.bpf12~;
#X text 200 6249 Two pole band-pass butterworth filter;
#X obj 30 6276 flt.bpf24~;
#X text 200 6276 Four pole band-pass butterworth filter;
#X obj 30 6303 flt.c_apf;
#X text 200 6303 Allpass filter coefficient calculator for biquad;
#X obj 30 6330 flt.c_bpf~;
#X text 200 6330 BPF coefficient calculator for biquad filter;
#X obj 30 6357 flt.c_highshelf~;
#X text 200 6357 Highshelf filter coefficient calculator for biquad;
#X obj 30 6384 flt.c_hpf;
#X text 200 6384 HPF coefficient calculator for biquad filter;
#X obj 30 6411 flt.c_hpf~;
#X text 200 6411 HPF coefficient calculator for biquad filter;
#X obj 30 6438 flt.c_lowshelf~;
#X text 200 6438 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6465 flt.c_lpf;
#X text 200 6465 LPF coefficient calculator for biquad filter;
#X obj 30 6492 flt.c_lpf~;
#X text 200 6492 LPF coefficient calculator for biquad filter;
#X obj 30 6519 flt.c_notch;
#X text 200 6519 Notch filter coefficient calculator for biquad;
#X obj 30 6546 flt.c_notch~;
#X text 200 6546 Band-reject coefficient calculator for biquad filter;
#X obj 30 6573 flt.c_peak~;
#X text 200 6573 Peaking equalizer calculator for biquad;
#X obj 30 6600 flt.c_pole;
#X text 200 6600 One-pole coefficient calculator for biquad filter;
#X obj 30 6627 flt.dcblock2~;
#X text 200 6627 stereo DC blocker;
#X obj 30 6654 flt.dcblock~;
#X text 200 6654 mono DC blocker;
#X obj 30 6681 flt.eq10~;
#X text 200 6681 graphic 10 band equalizer;
#X obj 30 6708 flt.eq_peak_cq~;
#X text 200 6708 constant-Q second order peaking equalizer section;
#X obj 30 6735 flt.eq_peak~;
#X text 200 6735 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6790 flt.fb_comb~;
#X text 200 6790 feedback comb filter;
#X obj 30 6817 flt.fbank5x1~;
#X text 200 6817 5 band one octave butterworth filterbank;
#X obj 30 6844 flt.ff_comb~;
#X text 200 6844 feed forward comb filter;
#X obj 30 6871 flt.freqz;
#X text 200 6871 compute the frequency response of a digital filter;
#X obj 30 6898 flt.freqz~;
#X text 200 6898 compute the frequency response of a digital filter;
#X obj 30 6925 flt.highshelf~;
#X text 200 6925 gain boost|cut above some frequency;
#X obj 30 6952 flt.hpf12~;
#X text 200 6952 High-pass second order Butterworth filter;
#X obj 30 6979 flt.hpf24~;
#X text 200 6979 High-pass fourth order Butterworth filter;
#X obj 30 7006 flt.lowshelf~;
#X text 200 7006 gain boost|cut below some frequency;
#X obj 30 7033 flt.lpf12~;
#X text 200 7033 Low-pass second order Butterworth filter;
#X obj 30 7060 flt.lpf24~;
#X text 200 7060 Low-pass fourth order Butterworth filter;
#X obj 30 7087 flt.median;
#X text 200 7087 Median control flow filter;
#X obj 30 7114 flt.moog_vcf~;
#X text 200 7114 Moog Voltage Controlled Filter;
#X obj 30 7141 flt.notch~;
#X text 200 7141 band-rejection filter;
#X obj 30 7168 flt.resonbp~;
#X text 200 7168 Simple resonant bandpass filter;
#X obj 20 7195 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7236 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7247 fx.bitdown~;
#X text 200 7247 bit downer and downsampler effect;
#X obj 30 7274 fx.chorus~;
#X text 200 7274 Chorus effect;
#X obj 30 7301 fx.distortion1~;
#X text 200 7301 distortion #1 from Guitarix effects set;
#X obj 30 7328 fx.distortion2~;
#X text 200 7328 distortion #2 from Guitarix effects set;
#X obj 30 7355 fx.distortion3~;
#X text 200 7355 simple distortion #3 from Guitarix effects set;
#X obj 30 7382 fx.distortion~;
#X text 200 7382 cubic nonlinearity distortion;
#X obj 30 7409 fx.drive~;
#X text 200 7409 Guitarix drive effect;
#X obj 30 7436 fx.drone_box~;
#X text 200 7436 mono sympathetic resonance generator;
#X obj 30 7463 fx.echo2~;
#X text 200 7463 stereo echo effect;
#X obj 30 7490 fx.echo~;
#X text 200 7490 simple echo effect;
#X obj 30 7517 fx.flanger~;
#X text 200 7517 mono flanging effect;
#X obj 30 7544 fx.freeverb2~;
#X text 200 7544 freeverb2 - stereo version of freeverb;
#X obj 30 7571 fx.freeverb~;
#X text 200 7571 freeverb - common used open-source reverb;
#X obj 30 7598 fx.freqshift~;
#X text 200 7598 frequency shifter or single-sideband ring modulation;
#X obj 30 7625 fx.granulator~;
#X text 200 7625 simple input stream granulator;
#X obj 30 7652 fx.greyhole~;
#X text 200 7652 A complex echo-like effect;
#X obj 30 7679 fx.infrev~;
#X text 200 7679 port of Infinity VST plugin from airwindows;
#X obj 30 7706 fx.looper~;
#X text 200 7706 One track looper;
#X obj 30 7733 fx.pitchshift_s~;
#X text 200 7733 signal version of fx.pitchshift~;
#X obj 30 7760 fx.pitchshift~;
#X text 200 7760 simple pitch shifter based on 2 delay lines;
#X obj 30 7787 fx.rb_pitchshift~;
#X text 200 7787 rubber band pitchshift;
#X obj 30 7814 fx.recho~;
#X text 200 7814 reversed echo effect;
#X obj 30 7841 fx.room~;
#X text 200 7841 Gardners room emulation algorithms;
#X obj 30 7868 fx.sdelay~;
#X text 200 7868 smooth delay with a feedback control;
#X obj 30 7895 fx.secho~;
#X text 200 7895 enchanced echo effect that does not click on delay
change;
#X obj 30 7922 fx.shimmer~;
#X text 200 7922 shimmer reverb effect effect;
#X obj 30 7949 fx.tapiir~;
#X text 200 7949 multi-tap delay;
#X obj 30 7976 fx.vocoder~;
#X text 200 7976 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8016 fx.wahwah~;
#X text 200 8016 digitized CryBaby wah pedal;
#X obj 30 8043 fx.zita_rev1~;
#X text 200 8043 Zita stereo reverb;
#X obj 20 8070 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8111 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8122 global.dict;
#X text 200 8122 global named dict object;
#X obj 30 8149 global.float;
#X text 200 8149 global named float object;
#X obj 30 8176 global.int;
#X text 200 8176 global named integer object;
#X obj 30 8203 global.list;
#X text 200 8203 global named list object;
#X obj 30 8230 global.mlist;
#X text 200 8230 global named mlist object;
#X obj 30 8257 global.set;
#X text 200 8257 global named set object;
#X obj 20 8284 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8325 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8336 hw.apple_smc;
#X text 200 8336 query the system management control in Apples;
#X obj 30 8363 hw.apple_sms;
#X text 200 8363 query the sudden motion sensor in Apples;
#X obj 30 8390 hw.arduino;
#X text 200 8390 Arduino device;
#X obj 30 8417 hw.cpu_temp;
#X text 200 8417 get CPU temperature;
#X obj 30 8444 hw.display;
#X text 200 8444 get/set display properties;
#X obj 30 8471 hw.kbd_light;
#X text 200 8471 Get/set keyboard light on some devices;
#X obj 30 8498 hw.serial;
#X text 200 8498 serial port device;
#X obj 20 8525 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8566 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8580 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8577 faust realtime compilation;
#X obj 30 8605 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8602 faust compiled ui object;
#X obj 20 8627 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8668 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8679 lfo.+pulse~;
#X text 200 8679 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8706 lfo.+saw~;
#X text 200 8706 Positive unit-amplitude low frequency saw wave;
#X obj 30 8733 lfo.+square~;
#X text 200 8733 Positive low frequency square wave;
#X obj 30 8760 lfo.+tri~;
#X text 200 8760 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8787 lfo.impulse~;
#X text 200 8787 Unit-amplitude low-frequency impulse train;
#X obj 30 8814 lfo.mosc~;
#X text 200 8814 multi-oscillator with various waveforms;
#X obj 30 8841 lfo.pulse~;
#X text 200 8841 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8868 lfo.saw~;
#X text 200 8868 Full-range unit-amplitude low frequency saw;
#X obj 30 8895 lfo.square~;
#X text 200 8895 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8922 lfo.tri~;
#X text 200 8922 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8949 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8990 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9001 list.^at;
#X text 200 9001 on input index(es) outputs list element(s);
#X obj 30 9028 list.^contains;
#X text 200 9028 checks if input atom is found in the list;
#X obj 30 9055 list.^search;
#X text 200 9055 on input atom returns it index in list;
#X obj 30 9082 list.all_of;
#X text 200 9082 checks if all list atoms accepted by predicate;
#X obj 30 9109 list.any_of;
#X text 200 9109 checks if at least one list element is accepted by
predicate;
#X obj 30 9136 list.append;
#X text 200 9136 append atom or list to the end of input list;
#X obj 30 9163 list.apply_to;
#X text 200 9163 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9203 list.at;
#X text 200 9203 outputs list element(s) at specified index(es);
#X obj 30 9230 list.choice;
#X text 200 9230 outputs random element from list;
#X obj 30 9257 list.contains;
#X text 200 9257 checks if input list contains specified atoms;
#X obj 30 9284 list.convolve;
#X text 200 9284 convolution for lists;
#X obj 30 9311 list.correlate;
#X text 200 9311 list cross-correlation;
#X obj 30 9338 list.count;
#X text 200 9338 output the number of items that equal to specified
value;
#X obj 30 9365 list.count_if;
#X text 200 9365 output the number of items that satisfy to external
predicate;
#X obj 30 9392 list.delta;
#X text 200 9392 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9432 list.distribution;
#X text 200 9432 list value distribution;
#X obj 30 9459 list.do;
#X text 200 9459 iterate and modify list contents via side-chain;
#X obj 30 9486 list.each;
#X text 200 9486 maps each list value via external side-chain;
#X obj 30 9513 list.enumerate;
#X text 200 9513 enumerates input list;
#X obj 30 9540 list.equal;
#X text 200 9540 checks if given lists are equal;
#X obj 30 9567 list.first;
#X text 200 9567 returns first list element;
#X obj 30 9594 list.gen;
#X text 200 9594 generates list of specified length via external generator;
#X obj 30 9621 list.histogram;
#X text 200 9621 outputs distribution histogram;
#X obj 30 9648 list.insert;
#X text 200 9648 insert atom or list to the specified position of input
list;
#X obj 30 9675 list.integrator;
#X text 200 9675 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9715 list.last;
#X text 200 9715 output last list element;
#X obj 30 9742 list.length;
#X text 200 9742 output the number of atoms in the list;
#X obj 30 9769 list.map;
#X text 200 9769 map list values by specified dictionary;
#X obj 30 9796 list.max;
#X text 200 9796 output largest element in the list;
#X obj 30 9823 list.mean;
#X text 200 9823 calculates average of list of floats;
#X obj 30 9850 list.min;
#X text 200 9850 returns smallest element in the list;
#X obj 30 9877 list.none_of;
#X text 200 9877 checks if none of list atoms is accepted by predicate;
#X obj 30 9904 list.normalize;
#X text 200 9904 normalizes float list values to get their sum = 1.0;
#X obj 30 9931 list.pass;
#X text 200 9931 leave in list only specified elements;
#X obj 30 9958 list.pass_if;
#X text 200 9958 leave only elements accepted by predicate;
#X obj 30 9985 list.prepend;
#X text 200 9985 prepend atom or list before input list;
#X obj 30 10012 list.product;
#X text 200 10012 calculates product of floats in list;
#X obj 30 10039 list.range;
#X text 200 10039 output list smallest and largest value;
#X obj 30 10066 list.reduce;
#X text 200 10066 apply function of two arguments cumulatively to the
list;
#X obj 30 10093 list.reject;
#X text 200 10093 remove specified element from list;
#X obj 30 10120 list.remove;
#X text 200 10120 remove list element(s) at specified positions;
#X obj 30 10147 list.remove_if;
#X text 200 10147 remove elements by predicate;
#X obj 30 10174 list.repack;
#X text 200 10174 repack list to specified size;
#X obj 30 10201 list.repeat;
#X text 200 10201 output new list by repeating input list specified
times;
#X obj 30 10228 list.resample;
#X text 200 10228 resample list with specified ratio;
#X obj 30 10255 list.resize;
#X text 200 10255 changes list size;
#X obj 30 10282 list.reverse;
#X text 200 10282 reverses the order of the elements in the list;
#X obj 30 10309 list.rldecode;
#X text 200 10309 Run-length list decoder (RLE);
#X obj 30 10336 list.rlencode;
#X text 200 10336 RLE (run-length encoding) for lists;
#X obj 30 10363 list.rotate;
#X text 200 10363 rotates list;
#X obj 30 10390 list.route;
#X text 200 10390 acts like [route] but for lists;
#X obj 30 10417 list.rundiff;
#X text 200 10417 running difference;
#X obj 30 10444 list.runsum;
#X text 200 10444 running sum;
#X obj 30 10471 list.search;
#X text 200 10471 search specified items in input list;
#X obj 30 10498 list.separate;
#X text 200 10498 sends list elements one by one separately;
#X obj 30 10525 list.seq;
#X text 200 10525 numeric sequence list generator;
#X obj 30 10552 list.set;
#X text 200 10552 set list value at specified position;
#X obj 30 10579 list.shift;
#X text 200 10579 shifts the contents of the list with linear interpolation;
#X obj 30 10606 list.shuffle;
#X text 200 10606 randomly rearranges elements in list;
#X obj 30 10633 list.slice;
#X text 200 10633 extract sublist;
#X obj 30 10660 list.sort;
#X text 200 10660 sorts list values by ascending order;
#X obj 30 10687 list.sort_with;
#X text 200 10687 sort list with user defined side-chain;
#X obj 30 10714 list.split;
#X text 200 10714 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 10754 list.stretch;
#X text 200 10754 stretches list - changes its size with linear interpolation;
#X obj 30 10781 list.sum;
#X text 200 10781 calculates sum of floats in list;
#X obj 30 10808 list.unique;
#X text 200 10808 removes duplicates from input list;
#X obj 30 10835 list.unpack;
#X text 200 10835 unpack list elements to separate outlets;
#X obj 30 10862 list.unzip;
#X text 200 10862 splits list to N lists \, each to separate output;
#X obj 30 10889 list.walk;
#X text 200 10889 Walks thru the list;
#X obj 30 10916 list.zip;
#X text 200 10916 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10971 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 11012 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11023 live.capture~;
#X text 200 11023 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11063 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 11104 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11115 local.dict;
#X text 200 11115 local named dict object;
#X obj 30 11142 local.float;
#X text 200 11142 canvas-scoped named float variable;
#X obj 30 11169 local.int;
#X text 200 11169 canvas-scoped named integer variable;
#X obj 30 11196 local.list;
#X text 200 11196 local named list object;
#X obj 30 11223 local.mlist;
#X text 200 11223 local named mlist object;
#X obj 30 11250 local.set;
#X text 200 11250 local named set object;
#X obj 20 11277 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11318 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11329 math.abs;
#X text 200 11329 absolute value function;
#X obj 30 11356 math.abs~;
#X text 200 11356 absolute value function for signals;
#X obj 30 11383 math.acos;
#X text 200 11383 arc cosine function;
#X obj 30 11410 math.acosh;
#X text 200 11410 inverse hyperbolic cosine function;
#X obj 30 11437 math.acosh~;
#X text 200 11437 hyperbolic arc cosine for signals;
#X obj 30 11464 math.acos~;
#X text 200 11464 arc cosine function for signals;
#X obj 30 11491 math.and;
#X text 200 11491 operation AND for multiple arguments;
#X obj 30 11518 math.approx;
#X text 200 11518 check if input value approximately equal to pattern;
#X obj 30 11545 math.asin;
#X text 200 11545 arc sine function;
#X obj 30 11572 math.asinh;
#X text 200 11572 inverse hyperbolic sine function;
#X obj 30 11599 math.asinh~;
#X text 200 11599 hyperbolic arc sine for signals;
#X obj 30 11626 math.asin~;
#X text 200 11626 arc sine for signals;
#X obj 30 11653 math.atan;
#X text 200 11653 arc tangent function;
#X obj 30 11680 math.atanh;
#X text 200 11680 inverse hyperbolic tangent function;
#X obj 30 11707 math.atanh~;
#X text 200 11707 hyperbolic arc tangent for signals;
#X obj 30 11734 math.atan~;
#X text 200 11734 arc tangent for signals;
#X obj 30 11761 math.binomial;
#X text 200 11761 binomial coefficient calculator;
#X obj 30 11788 math.cabs~;
#X text 200 11788 magnitude of a complex signals;
#X obj 30 11815 math.carg~;
#X text 200 11815 phase angle of a complex signals;
#X obj 30 11842 math.cbrt;
#X text 200 11842 cube root function;
#X obj 30 11869 math.cbrt~;
#X text 200 11869 cube root function for signals;
#X obj 30 11896 math.cdiv~;
#X text 200 11896 division of complex signals;
#X obj 30 11923 math.ceil;
#X text 200 11923 round to smallest integral value not less than input
value;
#X obj 30 11950 math.ceil~;
#X text 200 11950 round to smallest integral value not less than input
value;
#X obj 30 11977 math.cexp~;
#X text 200 11977 exponent of a complex signals;
#X obj 30 12004 math.cmul~;
#X text 200 12004 multiplication of complex signals;
#X obj 30 12031 math.cos;
#X text 200 12031 cosine function;
#X obj 30 12058 math.cosh;
#X text 200 12058 hyperbolic cosine function;
#X obj 30 12085 math.cosh~;
#X text 200 12085 hyperbolic cosine for signals;
#X obj 30 12112 math.cos~;
#X text 200 12112 cosine function;
#X obj 30 12139 math.div;
#X text 200 12139 division (on lists too);
#X obj 30 12166 math.e;
#X text 200 12166 mathematical constant \, base of the natural logarithm;
#X obj 30 12193 math.erf;
#X text 200 12193 error function;
#X obj 30 12220 math.erf~;
#X text 200 12220 error function for signals;
#X obj 30 12247 math.exp;
#X text 200 12247 exponential functions;
#X obj 30 12274 math.exp2;
#X text 200 12274 exponential functions;
#X obj 30 12301 math.exp2~;
#X text 200 12301 base-2 exponential for signal;
#X obj 30 12328 math.expr;
#X text 200 12328 dynamic [expr];
#X obj 30 12355 math.exp~;
#X text 200 12355 base-e exponential for signal;
#X obj 30 12382 math.floor;
#X text 200 12382 round to largest integral value not greater than
x;
#X obj 30 12409 math.floor~;
#X text 200 12409 round to largest integral value not greater than
x;
#X obj 30 12436 math.gamma;
#X text 200 12436 gamma function;
#X obj 30 12463 math.gamma~;
#X text 200 12463 gamma function for floating point signals;
#X obj 30 12490 math.gcd;
#X text 200 12490 calculate greatest common divisor;
#X obj 30 12517 math.inf;
#X text 200 12517 infinity value that cannot be represented accurately;
#X obj 30 12544 math.inf~;
#X text 200 12544 inifinity signal generator;
#X obj 30 12571 math.lcm;
#X text 200 12571 calculate least common multiple;
#X obj 30 12598 math.lgamma;
#X text 200 12598 natural logarithm of the absolute value of the gamma
function;
#X obj 30 12625 math.lgamma~;
#X text 200 12625 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 12665 math.log;
#X text 200 12665 natural logarithm;
#X obj 30 12692 math.log10;
#X text 200 12692 logarithm functions;
#X obj 30 12719 math.log10~;
#X text 200 12719 natural logarithm;
#X obj 30 12746 math.log2;
#X text 200 12746 logarithm functions;
#X obj 30 12773 math.log2~;
#X text 200 12773 base-2 logarithm;
#X obj 30 12800 math.log~;
#X text 200 12800 natural logarithm;
#X obj 30 12827 math.mul;
#X text 200 12827 multiplication (on lists too);
#X obj 30 12854 math.nan;
#X text 200 12854 Not a Number \, unrepresentable value;
#X obj 30 12881 math.nan~;
#X text 200 12881 signal NaN;
#X obj 30 12908 math.neg;
#X text 200 12908 negate function;
#X obj 30 12935 math.or;
#X text 200 12935 operation OR for multiple arguments;
#X obj 30 12962 math.pi;
#X text 200 12962 mathematical constant;
#X obj 30 12989 math.pi~;
#X text 200 12989 mathematical constant;
#X obj 30 13016 math.polyeval;
#X text 200 13016 evaluates the polynomial described by the coefficients
list;
#X obj 30 13043 math.reciprocal;
#X text 200 13043 calculate reciprocal number;
#X obj 30 13070 math.reciprocal~;
#X text 200 13070 calculate reciprocal number for signals;
#X obj 30 13097 math.round;
#X text 200 13097 round to integral value \, regardless of rounding
direction;
#X obj 30 13124 math.round~;
#X text 200 13124 signal round;
#X obj 30 13151 math.sign;
#X text 200 13151 sign function;
#X obj 30 13178 math.sin;
#X text 200 13178 sine function;
#X obj 30 13205 math.sinh;
#X text 200 13205 hyperbolic sine function;
#X obj 30 13232 math.sinh~;
#X text 200 13232 hyperbolic sine for signals;
#X obj 30 13259 math.sin~;
#X text 200 13259 sine function;
#X obj 30 13286 math.sqrt;
#X text 200 13286 square root function;
#X obj 30 13313 math.sqrt~;
#X text 200 13313 square root for signal;
#X obj 30 13340 math.squared;
#X text 200 13340 value square;
#X obj 30 13367 math.squared~;
#X text 200 13367 signal value square;
#X obj 30 13394 math.sync_add;
#X text 200 13394 sync addition;
#X obj 30 13421 math.sync_and;
#X text 200 13421 sync logical AND operation;
#X obj 30 13448 math.sync_div;
#X text 200 13448 sync division;
#X obj 30 13475 math.sync_eq;
#X text 200 13475 sync equal numbers check;
#X obj 30 13502 math.sync_ge;
#X text 200 13502 sync greater equal numbers compare;
#X obj 30 13529 math.sync_gt;
#X text 200 13529 sync greater then numbers compare;
#X obj 30 13556 math.sync_le;
#X text 200 13556 sync less equal numbers compare;
#X obj 30 13583 math.sync_lshift;
#X text 200 13583 sync signed bit left shift;
#X obj 30 13610 math.sync_lt;
#X text 200 13610 sync less then numbers compare;
#X obj 30 13637 math.sync_mod;
#X text 200 13637 sync remainder of modulo division (float or integer);
#X obj 30 13664 math.sync_mul;
#X text 200 13664 sync multiplication;
#X obj 30 13691 math.sync_ne;
#X text 200 13691 sync numbers for not equality;
#X obj 30 13718 math.sync_or;
#X text 200 13718 sync logical OR operation;
#X obj 30 13745 math.sync_rshift;
#X text 200 13745 sync signed bit right shift;
#X obj 30 13772 math.sync_sub;
#X text 200 13772 sync subtraction;
#X obj 30 13799 math.sync_xor;
#X text 200 13799 sync logical XOR operation;
#X obj 30 13826 math.tan;
#X text 200 13826 tangent function;
#X obj 30 13853 math.tanh;
#X text 200 13853 hyperbolic tangent function;
#X obj 30 13880 math.tanh~;
#X text 200 13880 hyperbolic tangent for signals;
#X obj 30 13907 math.tan~;
#X text 200 13907 tangent function;
#X obj 30 13934 math.trunc;
#X text 200 13934 truncate to integer value;
#X obj 30 13961 math.trunc~;
#X text 200 13961 truncate to integer value;
#X obj 20 13988 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14029 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14040 midi.cc;
#X text 200 14040 enhanced version of vanilla ctlin;
#X obj 30 14067 midi.clock;
#X text 200 14067 midi clock toolbox;
#X obj 30 14094 midi.ctl2str;
#X text 200 14094 convert Standard MIDI Controllers number to name;
#X obj 30 14121 midi.event2ctl;
#X text 200 14121 convert MidiEvent message to controller channel/value
pair;
#X obj 30 14148 midi.event2note;
#X text 200 14148 convert MidiEvent message to midi note/velocity pair;
#X obj 30 14175 midi.event2prg;
#X text 200 14175 convert MidiEvent message to midi program change
value;
#X obj 30 14202 midi.file;
#X text 200 14202 standard midi file SMF reader and writer;
#X obj 30 14229 midi.kbd;
#X text 200 14229 computer keyboard midi;
#X obj 30 14256 midi.key2str;
#X text 200 14256 convert key number to SPN name according to tonality;
#X obj 30 14283 midi.modus;
#X text 200 14283 snap/skip midi pitches according modus;
#X obj 30 14310 midi.oct;
#X text 200 14310 midi octave transpose;
#X obj 30 14337 midi.prg2str;
#X text 200 14337 convert GM Instrument number to name (string or symbol);
#X obj 30 14364 midi.split;
#X text 200 14364 midi note splitter;
#X obj 30 14391 midi.sustain;
#X text 200 14391 sustain pedal emulation;
#X obj 30 14418 midi.sysex;
#X text 200 14418 sysex input messages as list;
#X obj 30 14445 midi.track;
#X text 200 14445 extract track from MidiFile;
#X obj 30 14472 midi.tuning;
#X text 200 14472 apply tuning to midi messages;
#X obj 30 14499 midi.vramp;
#X text 200 14499 apply crescendo or diminuendo for midi message flow;
#X obj 30 14526 midi.vrand;
#X text 200 14526 midi velocity randomizer;
#X obj 20 14553 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 14594 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14605 click~;
#X text 200 14605 Output single impulse on bang;
#X obj 30 14632 fluid~;
#X text 200 14632 FluidSynth SoundFont 2 player;
#X obj 30 14659 modplug~;
#X text 200 14659 MOD file player (using libmodplug);
#X obj 30 14686 risset.gliss;
#X text 200 14686 Sheppard/Risset glissando calculator;
#X obj 30 14713 sfizz~;
#X text 200 14713 SFZ format sample player;
#X obj 30 14740 speech.flite;
#X text 200 14740 render speech to array;
#X obj 30 14767 speech.flite~;
#X text 200 14767 render speech to array;
#X obj 20 14794 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 14835 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14846 loadexpr;
#X text 200 14846 send message when patch loads;
#X obj 30 14873 msg;
#X text 200 14873 message constructor;
#X obj 30 14900 msg.after;
#X text 200 14900 send specified message after incoming message;
#X obj 30 14927 msg.onload;
#X text 200 14927 send message when patch loads;
#X obj 30 14954 msg.sched;
#X text 200 14954 message scheduler;
#X obj 20 14981 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 15022 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15033 net.host2ip;
#X text 200 15033 returns IP address by DNS name;
#X obj 30 15060 net.osc.send;
#X text 200 15060 OSC message sender;
#X obj 30 15087 net.osc.server;
#X text 200 15087 OSC server control;
#X obj 20 15114 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 15155 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15166 noise.baker;
#X text 200 15166 Part of a-chaos library;
#X obj 30 15193 noise.clifford;
#X text 200 15193 Part of a-chaos library;
#X obj 30 15220 noise.collatz;
#X text 200 15220 Part of a-chaos library;
#X obj 30 15247 noise.crackle~;
#X text 200 15247 sparse noise generator;
#X obj 30 15274 noise.duffing;
#X text 200 15274 Part of a-chaos library;
#X obj 30 15301 noise.ginger;
#X text 200 15301 Gingerbreadman map chaotic generator;
#X obj 30 15328 noise.henon;
#X text 200 15328 Part of a-chaos library;
#X obj 30 15355 noise.henon_heilles;
#X text 200 15355 Part of a-chaos library;
#X obj 30 15382 noise.henon_phase;
#X text 200 15382 Part of a-chaos library;
#X obj 30 15409 noise.henonf;
#X text 200 15409 Part of a-chaos library;
#X obj 30 15436 noise.ikeda;
#X text 200 15436 Part of a-chaos library;
#X obj 30 15463 noise.lfreq0~;
#X text 200 15463 sampled/held noise (piecewise constant);
#X obj 30 15490 noise.lfreq~;
#X text 200 15490 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 15517 noise.lorenz;
#X text 200 15517 Part of a-chaos library;
#X obj 30 15544 noise.lyapunov;
#X text 200 15544 Part of a-chaos library;
#X obj 30 15571 noise.navier_stokes;
#X text 200 15571 Part of a-chaos library;
#X obj 30 15598 noise.pink~;
#X text 200 15598 Pink noise generator;
#X obj 30 15625 noise.rossler;
#X text 200 15625 Part of a-chaos library;
#X obj 30 15652 noise.stein;
#X text 200 15652 Part of a-chaos library;
#X obj 30 15679 noise.torus;
#X text 200 15679 Part of a-chaos library;
#X obj 30 15706 noise.verhulst;
#X text 200 15706 Part of a-chaos library;
#X obj 30 15733 noise.white~;
#X text 200 15733 White noise generator;
#X obj 20 15760 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 15801 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15812 osc.blit~;
#X text 200 15812 Bandlimited impulse train oscillator;
#X obj 30 15839 osc.impulse~;
#X text 200 15839 Bandlimited impulse train generator;
#X obj 30 15866 osc.pulse~;
#X text 200 15866 Bandlimited pulse train oscillator;
#X obj 30 15893 osc.saw4~;
#X text 200 15893 Bandlimited sawtooth wave;
#X obj 30 15920 osc.saw~;
#X text 200 15920 Alias-free sawtooth wave;
#X obj 30 15947 osc.sinfb~;
#X text 200 15947 Sine oscilator with feedback;
#X obj 30 15974 osc.sin~;
#X text 200 15974 Sine wave oscillator;
#X obj 30 16001 osc.square~;
#X text 200 16001 Bandlimited square wave oscillator;
#X obj 30 16028 osc.tri~;
#X text 200 16028 Bandlimited triangle wave oscillator;
#X obj 20 16055 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 16096 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16107 canvas.current;
#X text 200 16107 verbose information about current canvas;
#X obj 30 16134 canvas.dir;
#X text 200 16134 current canvas directory;
#X obj 30 16161 canvas.name;
#X text 200 16161 current canvas name;
#X obj 30 16188 canvas.path;
#X text 200 16188 current canvas fullpath;
#X obj 30 16215 canvas.top;
#X text 200 16215 verbose information about top-level canvas;
#X obj 30 16242 patch.args;
#X text 200 16242 Get patch or subpatch arguments;
#X obj 30 16269 patch.deps;
#X text 200 16269 patch dependencies: used objects and abstractions;
#X obj 30 16296 patch.tree;
#X text 200 16296 patch tree;
#X obj 20 16323 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 16364 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16375 file.size;
#X text 200 16375 output file size;
#X obj 30 16402 path.basename;
#X text 200 16402 outputs filename portion of pathname;
#X obj 30 16429 path.dirname;
#X text 200 16429 outputs directory portion of pathname;
#X obj 30 16456 path.exists;
#X text 200 16456 checks if given path exists;
#X obj 30 16483 path.is_dir;
#X text 200 16483 check if path is directory;
#X obj 30 16510 path.lsdir;
#X text 200 16510 list directory contents;
#X obj 30 16537 path.normalize;
#X text 200 16537 normalize file paths;
#X obj 30 16564 path.search;
#X text 200 16564 file search;
#X obj 30 16591 path.split;
#X text 200 16591 file path split;
#X obj 20 16618 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 16659 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16670 is_any;
#X text 200 16670 checks if input data has *any* type;
#X obj 30 16697 is_bang;
#X text 200 16697 checks if input data has *bang* type;
#X obj 30 16724 is_data;
#X text 200 16724 checks if input data has *data* type;
#X obj 30 16751 is_dict;
#X text 200 16751 checks if input data has *dict* type;
#X obj 30 16778 is_even;
#X text 200 16778 checks if input number is even;
#X obj 30 16805 is_file;
#X text 200 16805 checks if file exists and accessible;
#X obj 30 16832 is_float;
#X text 200 16832 checks if input data has *float* type;
#X obj 30 16859 is_list;
#X text 200 16859 checks if input data has *list* type;
#X obj 30 16886 is_odd;
#X text 200 16886 checks if input number is odd;
#X obj 30 16913 is_pointer;
#X text 200 16913 checks if input data has *pointer* type;
#X obj 30 16940 is_symbol;
#X text 200 16940 checks if input data has *symbol* type;
#X obj 20 16967 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 17008 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17019 preset.float;
#X text 200 17019 load/store float preset;
#X obj 30 17046 preset.list;
#X text 200 17046 load/store symbol preset;
#X obj 30 17073 preset.storage;
#X text 200 17073 preset storage control;
#X obj 30 17100 preset.symbol;
#X text 200 17100 load/store symbol preset;
#X obj 20 17127 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 17168 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17179 patch.props;
#X text 200 17179 patch properties manager;
#X obj 30 17206 prop;
#X text 200 17206 get/set named property value for subpatch or abstraction;
#X obj 30 17233 prop.declare;
#X text 200 17233 declare named property for subpatch or abstraction;
#X obj 30 17260 prop.get;
#X text 200 17260 get property from connected object/subpatch/abstraction;
#X obj 30 17287 prop.get~;
#X text 200 17287 Property extractor from sound stream;
#X obj 30 17314 prop.join;
#X text 200 17314 join property to main data flow;
#X obj 30 17341 prop.random;
#X text 200 17341 property randomizer;
#X obj 30 17368 prop.set;
#X text 200 17368 set property for connected object/subpatch/abstraction;
#X obj 30 17395 prop.split;
#X text 200 17395 separate properties from dataflow;
#X obj 20 17422 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 17463 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17474 proto.firmata;
#X text 200 17474 Firmata Arduino protocol support;
#X obj 30 17501 proto.inscore;
#X text 200 17501 INScore message creator;
#X obj 30 17528 proto.midi;
#X text 200 17528 raw midi encoder/parser;
#X obj 30 17555 proto.midi.cc;
#X text 200 17555 raw midi CC encoder/parser;
#X obj 30 17582 proto.midi.sysex;
#X text 200 17582 raw midi SYSex encoder/parser;
#X obj 30 17609 proto.mpv;
#X text 200 17609 mpv video player control;
#X obj 30 17636 proto.sp.alpaca;
#X text 200 17636 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 17663 proto.whammy;
#X text 200 17663 Control for Digitech Whammy pedal;
#X obj 30 17690 proto.xtouch_ext;
#X text 200 17690 Behringer XTouch Extender XMidi protocol;
#X obj 20 17717 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 17758 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17769 random.atom;
#X text 200 17769 weighted atom generation from specified list;
#X obj 30 17796 random.discrete;
#X text 200 17796 random weighted integers on interval [0 \, n);
#X obj 30 17823 random.float;
#X text 200 17823 uniform random float generator in specified range;
#X obj 30 17850 random.gauss;
#X text 200 17850 gaussian random distribution;
#X obj 30 17877 random.int;
#X text 200 17877 uniform random integer generator in specified range;
#X obj 30 17904 random.linear;
#X text 200 17904 random linear distribution;
#X obj 30 17931 random.pw_const;
#X text 200 17931 piecewise constant random distribution;
#X obj 30 17958 random.pw_lin;
#X text 200 17958 piecewise linear random distribution;
#X obj 20 17985 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 18026 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18037 samp.time~;
#X text 200 18037 sample counter;
#X obj 20 18064 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 18105 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18116 seq.arp;
#X text 200 18116 sequence arpeggiator;
#X obj 30 18143 seq.bangs;
#X text 200 18143 bang sequencer;
#X obj 30 18170 seq.counter;
#X text 200 18170 sequencer counter;
#X obj 30 18197 seq.life;
#X text 200 18197 Conway gamw of life sequencer;
#X obj 30 18224 seq.matrix;
#X text 200 18224 sequencer control for ui.matrix;
#X obj 30 18251 seq.nbangs;
#X text 200 18251 output specified number of bang with time intervals;
#X obj 30 18278 seq.phasor;
#X text 200 18278 control rate phasor (saw) generator;
#X obj 30 18305 seq.toggles;
#X text 200 18305 toggle sequencer;
#X obj 30 18332 sequencer;
#X text 200 18332 basic sequence player;
#X obj 20 18359 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 18400 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18411 snd.file;
#X text 200 18411 Sound file loader on steroids;
#X obj 20 18438 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 18479 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18490 hoa.2d.decoder~;
#X text 200 18490 hoa 2d decoder;
#X obj 30 18517 hoa.2d.encoder~;
#X text 200 18517 hoa 2d encoder;
#X obj 30 18544 hoa.2d.map~;
#X text 200 18544 a 2d ambisonic multisource spatializer;
#X obj 30 18571 hoa.2d.optim~;
#X text 200 18571 a 2D ambisonic optimization tool;
#X obj 30 18598 hoa.2d.projector~;
#X text 200 18598 a plane waves decomposer from circular harmonics
domain;
#X obj 30 18625 hoa.2d.recomposer~;
#X text 200 18625 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 18665 hoa.2d.rotate~;
#X text 200 18665 a 2D ambisonic sound field rotation;
#X obj 30 18692 hoa.2d.wider~;
#X text 200 18692 a 2d fractional ambisonic order simulator;
#X obj 30 18719 hoa.@process;
#X text 200 18719 process properties manager for hoa.process~;
#X obj 30 18746 hoa.in;
#X text 200 18746 message inlet for a patcher loaded by hoa.process~;
#X obj 30 18773 hoa.in~;
#X text 200 18773 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18800 hoa.out;
#X text 200 18800 message outlet for a patcher loaded by hoa.process~;
#X obj 30 18827 hoa.out~;
#X text 200 18827 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18854 hoa.process~;
#X text 200 18854 patcher loader for multichannel processing;
#X obj 30 18884 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 18881 a 2d ambisonic harmonic scope;
#X obj 30 18906 pan.cos~;
#X text 200 18906 two channel equal power sine/cosine panner;
#X obj 30 18933 pan.linsig~;
#X text 200 18933 two channel linear panner with signal control;
#X obj 30 18960 pan.lin~;
#X text 200 18960 two channel linear panner;
#X obj 30 18987 pan.spread~;
#X text 200 18987 spreads input channels across the stereo field;
#X obj 30 19014 pan.sqrt~;
#X text 200 19014 two channel equal power square root panner;
#X obj 30 19041 spat.pan4~;
#X text 200 19041 GMEM SPAT: 4-outputs spatializer;
#X obj 30 19068 spat.pan8~;
#X text 200 19068 GMEM SPAT: 8-outputs spatializer;
#X obj 30 19095 spat.zita6x8~;
#X text 200 19095 spat with 6 inputs sources to 8 channel output;
#X obj 30 19122 spat.zita8~;
#X text 200 19122 8 channel reverb spatializer;
#X obj 20 19149 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 19190 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19201 string;
#X text 200 19201 string constructor;
#X obj 30 19228 string.contains;
#X text 200 19228 checks if string contains specified substring;
#X obj 30 19255 string.ends_with;
#X text 200 19255 checks if string ends with specified substring;
#X obj 30 19282 string.equal;
#X text 200 19282 check strings or symbols for equality;
#X obj 30 19309 string.format;
#X text 200 19309 formats string like printf.;
#X obj 30 19336 string.join;
#X text 200 19336 joins (concatenates) list to string with separator;
#X obj 30 19363 string.length;
#X text 200 19363 number of characters in string (unicode supported);
#X obj 30 19390 string.match;
#X text 200 19390 check if string match regular expression;
#X obj 30 19417 string.remove;
#X text 200 19417 remove substring from input string;
#X obj 30 19444 string.replace;
#X text 200 19444 replace from one substring to another in input string;
#X obj 30 19471 string.split;
#X text 200 19471 split string or symbol by separator;
#X obj 30 19498 string.starts_with;
#X text 200 19498 checks if string starts with specified substring;
#X obj 30 19525 string.substr;
#X text 200 19525 extract substring from input string;
#X obj 30 19552 string2symbol;
#X text 200 19552 converts string to symbol;
#X obj 20 19579 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 19620 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19631 symbol.equal;
#X text 200 19631 check symbols for equality;
#X obj 30 19658 symbol.length;
#X text 200 19658 number of characters in symbol (unicode supported);
#X obj 30 19685 symbol.num_compare;
#X text 200 19685 numeric symbol compare;
#X obj 30 19712 symbol2any;
#X text 200 19712 converts symbol or string to message;
#X obj 30 19739 symbol2intlist;
#X text 200 19739 converts symbol to list of character codes;
#X obj 20 19766 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 19807 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19818 synth.bee3~;
#X text 200 19818 Hammond-oid organ FM synthesis instrument;
#X obj 30 19845 synth.birds~;
#X text 200 19845 bird singing generator;
#X obj 30 19872 synth.church_bell~;
#X text 200 19872 generic church bell modal model;
#X obj 30 19899 synth.dubdub~;
#X text 200 19899 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 19939 synth.dx7~;
#X text 200 19939 FAUST dx7 implementation;
#X obj 30 19966 synth.eguitar~;
#X text 200 19966 simple electric guitar model with steel strings;
#X obj 30 19993 synth.english_bell~;
#X text 200 19993 english church bell modal model;
#X obj 30 20020 synth.fgrain~;
#X text 200 20020 file granulator from STK;
#X obj 30 20047 synth.french_bell~;
#X text 200 20047 french church bell modal model;
#X obj 30 20074 synth.german_bell~;
#X text 200 20074 german church bell modal model;
#X obj 30 20101 synth.glass_harm~;
#X text 200 20101 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 20128 synth.glitch~;
#X text 200 20128 Glitch synthesizer by naivesound;
#X obj 30 20155 synth.harpsichord~;
#X text 200 20155 waveguide commuted harpsichord;
#X obj 30 20182 synth.kick~;
#X text 200 20182 low-kick synth from Guitarix project;
#X obj 30 20209 synth.ks~;
#X text 200 20209 Karplus-Strong string;
#X obj 30 20236 synth.marimba~;
#X text 200 20236 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 20276 synth.piano~;
#X text 200 20276 waveguide commuted piano;
#X obj 30 20303 synth.rhodey~;
#X text 200 20303 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 20330 synth.risset_arp~;
#X text 200 20330 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 20357 synth.risset_bell~;
#X text 200 20357 Jean Claude Risset's bell synth;
#X obj 30 20384 synth.risset_tone~;
#X text 200 20384 Jean Claude Risset's endless glissando;
#X obj 30 20411 synth.russian_bell~;
#X text 200 20411 russian church bell modal model;
#X obj 30 20438 synth.shakers~;
#X text 200 20438 various percussion sounds from STK library;
#X obj 30 20465 synth.sitar~;
#X text 200 20465 STK sitar;
#X obj 30 20492 synth.snare~;
#X text 200 20492 Snare drum synth from Guitarix project;
#X obj 30 20519 synth.standard_bell~;
#X text 200 20519 german church bell modal model;
#X obj 30 20546 synth.tube_bell~;
#X text 200 20546 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 20573 synth.wurley~;
#X text 200 20573 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 20600 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 20641 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20652 system.colorpanel;
#X text 200 20652 System color panel dialog popup;
#X obj 30 20679 system.cursor;
#X text 200 20679 Output cursor motion \, mousewheel and button clicks;
#X obj 30 20706 system.exec;
#X text 200 20706 run external command in separate process;
#X obj 30 20733 system.exit;
#X text 200 20733 quit PureData;
#X obj 30 20760 system.getenv;
#X text 200 20760 Get system environment variables;
#X obj 30 20787 system.hostname;
#X text 200 20787 outputs system hostname;
#X obj 30 20814 system.memsize;
#X text 200 20814 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 20854 system.memused;
#X text 200 20854 returns the process physical memory use - current
and peak;
#X obj 30 20881 system.screen_size;
#X text 200 20881 returns current screen size in pixels;
#X obj 20 20908 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 20949 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20960 tl.bang;
#X text 200 20960 Timeline bang (with possible delay);
#X obj 30 20990 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 20987 Timeline section;
#X obj 30 21012 tl.timeline;
#X text 200 21012 Timeline - event scheduler;
#X obj 30 21039 tl.toggle;
#X text 200 21039 Timeline bang;
#X obj 30 21066 tl.transport;
#X text 200 21066 Timeline transport control;
#X obj 20 21093 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 21134 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21148 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 21145 array view with cursor and selection;
#X obj 30 21173 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 21170 A bang... that's all;
#X obj 30 21198 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 21195 button widget;
#X obj 30 21223 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 21220 colorchooser widget;
#X obj 30 21248 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 21245 Display GUI object;
#X obj 30 21273 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 21270 GUI for turning DSP on/off;
#X obj 30 21298 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 21295 envelope editor widget;
#X obj 30 21323 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 21320 UI filter object calculator for biquad filter;
#X obj 30 21348 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 21345 UI filter object based on biquad filter;
#X obj 30 21373 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 21370 UI stereo gain control;
#X obj 30 21398 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 21395 UI gain control;
#X obj 30 21423 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 21420 simple icon with button capabilities;
#X obj 30 21448 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 21445 value increment/decrement;
#X obj 30 21473 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 21470 keyboard widget;
#X obj 30 21498 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 21495 knob widget;
#X obj 30 21523 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 21520 simple label widget;
#X obj 30 21548 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 21545 Hyperlink widget;
#X obj 30 21573 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 21570 The matrix of toggles has you.;
#X obj 30 21598 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 21595 Dropdown menu;
#X obj 30 21623 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 21620 Shows peak and rms signal level;
#X obj 30 21648 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 21645 incoming MIDI message viewport;
#X obj 30 21673 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 21670 filter mouse events from ui objects;
#X obj 30 21698 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 21695 routes mouse events from ui objects;
#X obj 30 21723 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 21720 counterpart of the vanilla [nbx];
#X obj 30 21748 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 21745 counterpart of the vanilla [nbx] for signal;
#X obj 30 21773 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 21770 signal plotter;
#X obj 30 21798 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 21795 2D slider in polar coordinates;
#X obj 30 21823 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 21820 Preset manager;
#X obj 30 21848 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 21845 counterpart of the vanilla radio toggle;
#X obj 30 21873 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 21870 range slider;
#X obj 30 21898 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 21895 Scope GUI object;
#X obj 30 21923 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 21920 counterpart of the vanilla slider;
#X obj 30 21948 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 21945 2D slider widget;
#X obj 30 21973 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 21970 Multiple slider widget;
#X obj 30 21998 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 21995 Spectroscope GUI object;
#X obj 30 22023 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 22020 displays a list of text buttons or text toggles;
#X obj 30 22048 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 22045 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 22070 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 22070 version: v0.9.4 \, license: GPL3;
#X obj 20 22098 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 22121 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 22085 msg 0;
#X obj 670 22120 switch~;
#X connect 1540 0 1541 0;