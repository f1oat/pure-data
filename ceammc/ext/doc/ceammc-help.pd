#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 20 292 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 333 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 344 array.bpm;
#X text 200 344 BPM calculator;
#X obj 30 371 array.copy;
#X text 200 371 copy samples from one array to another;
#X obj 30 398 array.do;
#X text 200 398 iterate and modify array content via side-chain;
#X obj 30 425 array.each;
#X text 200 425 process each array elements via side-chain;
#X obj 30 452 array.fill;
#X text 200 452 fill array with single value or pattern;
#X obj 30 479 array.hist;
#X text 200 479 calculates array histogram;
#X obj 30 506 array.mean;
#X text 200 506 calculates array arithmetic mean value;
#X obj 30 533 array.minmax;
#X text 200 533 find array min and max element value;
#X obj 30 560 array.play~;
#X text 200 560 array player with variable speed and amplitude;
#X obj 30 587 array.plot;
#X text 200 587 array data plotter;
#X obj 30 614 array.plot~;
#X text 200 614 plot signal on specified array;
#X obj 30 641 array.resample;
#X text 200 641 array resampler;
#X obj 30 668 array.rms;
#X text 200 668 calculates root mean square value for array;
#X obj 30 695 array.set;
#X text 200 695 set array content from list;
#X obj 30 722 array.stddev;
#X text 200 722 calculates standard deviation for array values;
#X obj 30 749 array.stretch;
#X text 200 749 array time-stretch \, pitch-shift or rate-change;
#X obj 30 776 array.sum;
#X text 200 776 calculates sum of array elements;
#X obj 30 803 array.sum2;
#X text 200 803 calculates sum of squares of array elements;
#X obj 30 830 array.variance;
#X text 200 830 calculates variance of array values;
#X obj 30 857 array.vplay;
#X text 200 857 simple array player for using with vline~;
#X obj 30 884 array.window;
#X text 200 884 fill array with window;
#X obj 30 911 plot.geomspace~;
#X text 200 911 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 951 plot.hist~;
#X text 200 951 calculate and output signal histogram;
#X obj 30 978 plot.linspace~;
#X text 200 978 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1018 plot.logspace~;
#X text 200 1018 outputs numbers spaced evenly on a log scale;
#X obj 30 1045 plot.response~;
#X text 200 1045 output amp/phase freq response to impulse;
#X obj 20 1072 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1113 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1124 ceammc.search;
#X text 200 1124 ceammc library search object;
#X obj 30 1154 ui.link @title [function] @url function-help.pd;
#X text 200 1151 named function;
#X obj 30 1176 function.call;
#X text 200 1176 call named function;
#X obj 30 1203 gain~;
#X text 200 1203 multislot signal gain;
#X obj 30 1230 logger;
#X text 200 1230 advanced data logger;
#X obj 30 1257 matrix~;
#X text 200 1257 signal routing matrix;
#X obj 30 1284 metro.pattern;
#X text 200 1284 metro with rhythmic patterns;
#X obj 30 1311 metro.random;
#X text 200 1311 metro random bang with specified range;
#X obj 30 1338 metro.seq;
#X text 200 1338 metro sequencer;
#X obj 30 1365 mix~;
#X text 200 1365 multislot signal mixer;
#X obj 30 1392 nsig~;
#X text 200 1392 Mulitchannel converter from control to audio rate;
#X obj 30 1419 obj.props;
#X text 200 1419 property extractor;
#X obj 30 1446 radio;
#X text 200 1446 float index to outlet values as radio switch;
#X obj 30 1473 sync;
#X text 200 1473 value synchronization;
#X obj 30 1500 window;
#X text 200 1500 returns window value by given window position;
#X obj 30 1527 xdac~;
#X text 200 1527 dac~ with channel ranges;
#X obj 30 1554 xfade2~;
#X text 200 1554 multi stereo-signal crossfade;
#X obj 30 1581 xfade~;
#X text 200 1581 multi signal crossfade;
#X obj 20 1608 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1649 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1660 chaos.gbman0;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.gbman0~;
#X text 200 1687 Gingerbreadman map chaotic generator;
#X obj 30 1714 chaos.jong;
#X text 200 1714 Peter de Jong attractor;
#X obj 30 1741 chaos.logistic;
#X text 200 1741 Logistic map chaotic generator;
#X obj 30 1768 chaos.std0;
#X text 200 1768 Standard map chaotic generator;
#X obj 30 1795 chaos.std0~;
#X text 200 1795 Standard map chaotic generator;
#X obj 20 1822 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1863 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1874 array.p2s;
#X text 200 1874 convert array phase [0\..1] to sample position;
#X obj 30 1901 array.s2p;
#X text 200 1901 convert sample position to phase range [0\..1];
#X obj 30 1928 conv.amp2dbfs;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.amp2dbfs~;
#X text 200 1955 convert from amplitude to decibel full scale;
#X obj 30 1982 conv.bits2bang;
#X text 200 1982 convert list of bits to bang events;
#X obj 30 2009 conv.bits2int;
#X text 200 2009 convert list of bits to integer;
#X obj 30 2036 conv.bits2note;
#X text 200 2036 convert list of bits to note events;
#X obj 30 2063 conv.bits2pos;
#X text 200 2063 convert list of bits to list of bit position;
#X obj 30 2090 conv.bpm2hz;
#X text 200 2090 converts BPM to frequency in herz;
#X obj 30 2117 conv.bpm2ms;
#X text 200 2117 convert frequency in BPM to period in milliseconds;
#X obj 30 2144 conv.bpm2sec;
#X text 200 2144 convert frequency in BPM to period in seconds;
#X obj 30 2171 conv.car2pol;
#X text 200 2171 convert cartesian coords to polar;
#X obj 30 2198 conv.cc2amp;
#X text 200 2198 convert from MIDI Control Change range;
#X obj 30 2225 conv.dbfs2amp;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.dbfs2amp~;
#X text 200 2252 convert decibel full scale to amplitude;
#X obj 30 2279 conv.degree2key;
#X text 200 2279 convert scale degree to key;
#X obj 30 2306 conv.hex2int;
#X text 200 2306 hex symbol to int value;
#X obj 30 2333 conv.int2bits;
#X text 200 2333 convert integer to list of bits;
#X obj 30 2360 conv.lin2curve;
#X text 200 2360 map linear to exponential range with 0 allowed.;
#X obj 30 2387 conv.lin2exp;
#X text 200 2387 maps linear range to exponential range;
#X obj 30 2414 conv.lin2lin;
#X text 200 2414 convert from one linear range to another;
#X obj 30 2441 conv.lin2lin~;
#X text 200 2441 convert from one linear range to another for signals;
#X obj 30 2468 conv.list2props;
#X text 200 2468 converts list to series of property messages;
#X obj 30 2495 conv.midi2freq;
#X text 200 2495 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2535 conv.ms2bpm;
#X text 200 2535 convert period in milliseconds to frequency in BPM;
#X obj 30 2562 conv.ms2samp;
#X text 200 2562 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2602 conv.ms2samp~;
#X text 200 2602 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2642 conv.phase2rad;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.phase2rad~;
#X text 200 2669 convert phase value [0-1] to radians [0-2π];
#X obj 30 2696 conv.pitch2midi;
#X text 200 2696 converts symbol pitch name to MIDI note number;
#X obj 30 2723 conv.pol2car;
#X text 200 2723 convert from polar coordinates to cartesian;
#X obj 30 2750 conv.rad2phase;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.rad2phase~;
#X text 200 2777 convert radians value to phase;
#X obj 30 2804 conv.samp2ms;
#X text 200 2804 convert samples to time according to samplerate;
#X obj 30 2831 conv.samp2ms~;
#X text 200 2831 convert samples to milliseconds according to samplerate;
#X obj 30 2858 conv.samp2sec;
#X text 200 2858 convert samples to time according to samplerate;
#X obj 30 2885 conv.sec2bpm;
#X text 200 2885 convert period in seconds to frequency in BPM;
#X obj 30 2912 conv.sec2samp;
#X text 200 2912 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2952 conv.sec2str;
#X text 200 2952 converts float time in seconds to formated symbol
(or string);
#X obj 30 2979 conv.sig2float~;
#X text 200 2979 convert signal to floats;
#X obj 30 3006 conv.str2sec;
#X text 200 3006 converts formatted time to float value in seconds;
#X obj 20 3033 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3074 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3085 data.copy;
#X text 200 3085 make copy for any data types: MList \, Set etc...;
#X obj 30 3112 data.dict;
#X text 200 3112 dictionary container: store values by key;
#X obj 30 3139 data.fifo;
#X text 200 3139 First-In-First-Out (FIFO) queue data container;
#X obj 30 3166 data.float;
#X text 200 3166 robust float object;
#X obj 30 3193 data.int;
#X text 200 3193 robust int object;
#X obj 30 3220 data.list;
#X text 200 3220 list container;
#X obj 30 3247 data.mlist;
#X text 200 3247 multidimensional list container;
#X obj 30 3274 data.set;
#X text 200 3274 container that store unique elements;
#X obj 30 3301 data.set2list;
#X text 200 3301 converts set to list;
#X obj 30 3328 dict.contains;
#X text 200 3328 predicate to check if dict contains a keys;
#X obj 30 3355 dict.each;
#X text 200 3355 map each value in dict;
#X obj 30 3382 dict.from_list;
#X text 200 3382 creates dictionary from list;
#X obj 30 3409 dict.get;
#X text 200 3409 output dict values;
#X obj 30 3436 dict.keys;
#X text 200 3436 get list of dict keys;
#X obj 30 3463 dict.pass;
#X text 200 3463 passes specified keys in dict;
#X obj 30 3490 dict.reject;
#X text 200 3490 rejects specified keys from dict;
#X obj 30 3517 dict.size;
#X text 200 3517 dictionary size;
#X obj 30 3544 dict.to_list;
#X text 200 3544 converts dictionary to plain list;
#X obj 30 3571 dict.values;
#X text 200 3571 dictionary values as mlist;
#X obj 30 3598 mlist.flatten;
#X text 200 3598 flatten nested mlist;
#X obj 30 3625 rtree.to_list;
#X text 200 3625 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3652 set.contains;
#X text 200 3652 check if specified element is in set;
#X obj 30 3679 set.diff;
#X text 200 3679 difference between two sets;
#X obj 30 3706 set.equal;
#X text 200 3706 checks if two sets are equal (contains same elements);
#X obj 30 3733 set.intersect;
#X text 200 3733 output intersection of given sets;
#X obj 30 3760 set.size;
#X text 200 3760 get number of elements in set;
#X obj 30 3787 set.symdiff;
#X text 200 3787 symmetric difference between two sets;
#X obj 30 3814 set.union;
#X text 200 3814 output union of given sets;
#X obj 20 3841 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3882 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3893 dyn.comp2~;
#X text 200 3893 stereo dynamic range compressor;
#X obj 30 3920 dyn.comp~;
#X text 200 3920 mono dynamic range compressors;
#X obj 30 3947 dyn.gate2~;
#X text 200 3947 stereo signal gate;
#X obj 30 3974 dyn.gate~;
#X text 200 3974 mono signal gate;
#X obj 30 4001 dyn.limit2~;
#X text 200 4001 stereo 1176LN Peak Limiter;
#X obj 30 4028 dyn.limit~;
#X text 200 4028 mono 1176LN Peak Limiter;
#X obj 30 4055 dyn.softclip~;
#X text 200 4055 soft signal clip;
#X obj 20 4082 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4123 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4134 env.adsr~;
#X text 200 4134 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4161 env.ar~;
#X text 200 4161 Attack/Release envelope generator;
#X obj 30 4188 env.asr~;
#X text 200 4188 Attack/Sustain/Release envelope generator;
#X obj 30 4215 env.concat;
#X text 200 4215 Envelope concatenation;
#X obj 30 4242 env.follow~;
#X text 200 4242 Envelope follower with independent attack and release
times;
#X obj 30 4269 env.mix;
#X text 200 4269 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4309 env.smooth~;
#X text 200 4309 An envelope with an exponential attack and release;
#X obj 30 4336 env.tscale;
#X text 200 4336 Envelope time-scale;
#X obj 30 4363 env.tshift;
#X text 200 4363 Envelope time-shift (horizontal);
#X obj 30 4390 env.vscale;
#X text 200 4390 Envelope value-scale;
#X obj 30 4417 env2array;
#X text 200 4417 Renders envelope to specified array;
#X obj 30 4444 env2vline;
#X text 200 4444 Converts envelope to bunch of vline messages;
#X obj 30 4471 envelope;
#X text 200 4471 Envelope data type;
#X obj 30 4498 vline2env;
#X text 200 4498 Converts vline messages to env;
#X obj 20 4525 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4566 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4577 expand_env;
#X text 200 4577 Substitute environment variables in data stream;
#X obj 30 4604 flow.append;
#X text 200 4604 append message to flow stream;
#X obj 30 4631 flow.change;
#X text 200 4631 rejects redundant input values;
#X obj 30 4658 flow.count;
#X text 200 4658 control flow event counter;
#X obj 30 4685 flow.delay;
#X text 200 4685 enhanced version on vanilla delay object;
#X obj 30 4712 flow.demultiplex;
#X text 200 4712 control flow demultiplexer;
#X obj 30 4739 flow.demultiplex2~;
#X text 200 4739 audio stream stereo demultiplexer;
#X obj 30 4766 flow.demultiplex~;
#X text 200 4766 audio stream demultiplexer;
#X obj 30 4793 flow.dollar;
#X text 200 4793 data flow dollar converter;
#X obj 30 4820 flow.dup;
#X text 200 4820 message duplicator;
#X obj 30 4847 flow.gate;
#X text 200 4847 control flow gate. [spigot] analog;
#X obj 30 4874 flow.greater;
#X text 200 4874 numeric stream router;
#X obj 30 4901 flow.greater_eq;
#X text 200 4901 numeric stream router;
#X obj 30 4928 flow.group;
#X text 200 4928 group input atoms in list of specified size;
#X obj 30 4955 flow.interval;
#X text 200 4955 measure time between flow events;
#X obj 30 4982 flow.less;
#X text 200 4982 numeric stream router \, like many [moses];
#X obj 30 5009 flow.less_eq;
#X text 200 5009 numeric stream router \, like many [moses];
#X obj 30 5036 flow.list2many;
#X text 200 5036 routes list element with message selectors;
#X obj 30 5063 flow.match;
#X text 200 5063 route data flow by regexp match;
#X obj 30 5090 flow.mem;
#X text 200 5090 store data flow in memory;
#X obj 30 5117 flow.multiplex;
#X text 200 5117 control flow multiplexer;
#X obj 30 5144 flow.multiplex2~;
#X text 200 5144 audio stream stereo multiplexer;
#X obj 30 5171 flow.multiplex~;
#X text 200 5171 audio stream multiplexer;
#X obj 30 5198 flow.once;
#X text 200 5198 one message pass thru;
#X obj 30 5225 flow.pack;
#X text 200 5225 flow pack;
#X obj 30 5252 flow.pass;
#X text 200 5252 pass specified values;
#X obj 30 5279 flow.pass_if;
#X text 200 5279 pass values that accepted by predicate object;
#X obj 30 5306 flow.pipe;
#X text 200 5306 enhanced version on vanilla pipe object;
#X obj 30 5333 flow.queue;
#X text 200 5333 multi-channel control flow sync queue (or FIFO);
#X obj 30 5360 flow.reject;
#X text 200 5360 reject specified values;
#X obj 30 5387 flow.reject_if;
#X text 200 5387 reject values by predicate;
#X obj 30 5414 flow.ring;
#X text 200 5414 dataflow ring buffer;
#X obj 30 5441 flow.route;
#X text 200 5441 advanced message router;
#X obj 30 5468 flow.select;
#X text 200 5468 vanilla flow on steroids;
#X obj 30 5495 flow.space;
#X text 200 5495 space in time messages received at the same logical
time;
#X obj 30 5522 flow.speedlim;
#X text 200 5522 control stream speed limiter;
#X obj 30 5549 flow.split;
#X text 200 5549 split data flow by external side-chain predicate;
#X obj 30 5576 flow.stack;
#X text 200 5576 any message stack;
#X obj 30 5603 flow.sync;
#X text 200 5603 bus with only hot inlets;
#X obj 30 5630 flow.sync_pack;
#X text 200 5630 flow pack with all hot inlets;
#X obj 30 5657 flow.tee~;
#X text 200 5657 separate audio and control streams;
#X obj 30 5684 replace;
#X text 200 5684 Replace atoms in data stream;
#X obj 30 5711 route.float;
#X text 200 5711 separate float messages from other types;
#X obj 20 5738 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5779 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5790 flt.biquad~;
#X text 200 5790 second order IIR filter.;
#X obj 30 5817 flt.bpf12~;
#X text 200 5817 Two pole band-pass butterworth filter;
#X obj 30 5844 flt.bpf24~;
#X text 200 5844 Four pole band-pass butterworth filter;
#X obj 30 5871 flt.c_apf;
#X text 200 5871 Allpass filter coefficient calculator for biquad;
#X obj 30 5898 flt.c_bpf~;
#X text 200 5898 BPF coefficient calculator for biquad filter;
#X obj 30 5925 flt.c_highshelf~;
#X text 200 5925 Highshelf filter coefficient calculator for biquad;
#X obj 30 5952 flt.c_hpf;
#X text 200 5952 HPF coefficient calculator for biquad filter;
#X obj 30 5979 flt.c_hpf~;
#X text 200 5979 HPF coefficient calculator for biquad filter;
#X obj 30 6006 flt.c_lowshelf~;
#X text 200 6006 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6033 flt.c_lpf;
#X text 200 6033 LPF coefficient calculator for biquad filter;
#X obj 30 6060 flt.c_lpf~;
#X text 200 6060 LPF coefficient calculator for biquad filter;
#X obj 30 6087 flt.c_notch;
#X text 200 6087 Notch filter coefficient calculator for biquad;
#X obj 30 6114 flt.c_notch~;
#X text 200 6114 Band-reject coefficient calculator for biquad filter;
#X obj 30 6141 flt.c_peak~;
#X text 200 6141 Peaking equalizer calculator for biquad;
#X obj 30 6168 flt.c_pole;
#X text 200 6168 One-pole coefficient calculator for biquad filter;
#X obj 30 6195 flt.dcblock2~;
#X text 200 6195 stereo DC blocker;
#X obj 30 6222 flt.dcblock~;
#X text 200 6222 mono DC blocker;
#X obj 30 6249 flt.eq10~;
#X text 200 6249 graphic 10 band equalizer;
#X obj 30 6276 flt.eq_peak_cq~;
#X text 200 6276 constant-Q second order peaking equalizer section;
#X obj 30 6303 flt.eq_peak~;
#X text 200 6303 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6358 flt.fb_comb~;
#X text 200 6358 feedback comb filter;
#X obj 30 6385 flt.fbank5x1~;
#X text 200 6385 5 band one octave butterworth filterbank;
#X obj 30 6412 flt.ff_comb~;
#X text 200 6412 feed forward comb filter;
#X obj 30 6439 flt.freqz;
#X text 200 6439 compute the frequency response of a digital filter;
#X obj 30 6466 flt.freqz~;
#X text 200 6466 compute the frequency response of a digital filter;
#X obj 30 6493 flt.highshelf~;
#X text 200 6493 gain boost|cut above some frequency;
#X obj 30 6520 flt.hpf12~;
#X text 200 6520 High-pass second order Butterworth filter;
#X obj 30 6547 flt.hpf24~;
#X text 200 6547 High-pass fourth order Butterworth filter;
#X obj 30 6574 flt.lowshelf~;
#X text 200 6574 gain boost|cut below some frequency;
#X obj 30 6601 flt.lpf12~;
#X text 200 6601 Low-pass second order Butterworth filter;
#X obj 30 6628 flt.lpf24~;
#X text 200 6628 Low-pass fourth order Butterworth filter;
#X obj 30 6655 flt.median;
#X text 200 6655 Median control flow filter;
#X obj 30 6682 flt.moog_vcf~;
#X text 200 6682 Moog Voltage Controlled Filter;
#X obj 30 6709 flt.notch~;
#X text 200 6709 band-rejection filter;
#X obj 30 6736 flt.resonbp~;
#X text 200 6736 Simple resonant bandpass filter;
#X obj 20 6763 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6804 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6815 fx.bitdown~;
#X text 200 6815 bit downer and downsampler effect;
#X obj 30 6842 fx.chorus~;
#X text 200 6842 Chorus effect;
#X obj 30 6869 fx.distortion1~;
#X text 200 6869 distortion #1 from Guitarix effects set;
#X obj 30 6896 fx.distortion2~;
#X text 200 6896 distortion #2 from Guitarix effects set;
#X obj 30 6923 fx.distortion3~;
#X text 200 6923 simple distortion #3 from Guitarix effects set;
#X obj 30 6950 fx.distortion~;
#X text 200 6950 cubic nonlinearity distortion;
#X obj 30 6977 fx.drive~;
#X text 200 6977 Guitarix drive effect;
#X obj 30 7004 fx.drone_box~;
#X text 200 7004 mono sympathetic resonance generator;
#X obj 30 7031 fx.echo~;
#X text 200 7031 simple echo effect;
#X obj 30 7058 fx.flanger~;
#X text 200 7058 mono flanging effect;
#X obj 30 7085 fx.freeverb2~;
#X text 200 7085 freeverb2 - stereo version of freeverb;
#X obj 30 7112 fx.freeverb~;
#X text 200 7112 freeverb - common used open-source reverb;
#X obj 30 7139 fx.freqshift~;
#X text 200 7139 frequency shifter or single-sideband ring modulation;
#X obj 30 7166 fx.granulator~;
#X text 200 7166 simple input stream granulator;
#X obj 30 7193 fx.greyhole~;
#X text 200 7193 A complex echo-like effect;
#X obj 30 7220 fx.infrev~;
#X text 200 7220 port of Infinity VST plugin from airwindows;
#X obj 30 7247 fx.looper~;
#X text 200 7247 One track looper;
#X obj 30 7274 fx.pitchshift_s~;
#X text 200 7274 signal version of fx.pitchshift~;
#X obj 30 7301 fx.pitchshift~;
#X text 200 7301 simple pitch shifter based on 2 delay lines;
#X obj 30 7328 fx.recho~;
#X text 200 7328 reversed echo effect;
#X obj 30 7355 fx.sdelay~;
#X text 200 7355 smooth delay with a feedback control;
#X obj 30 7382 fx.vocoder~;
#X text 200 7382 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7422 fx.wahwah~;
#X text 200 7422 digitized CryBaby wah pedal;
#X obj 30 7449 fx.zita_rev1~;
#X text 200 7449 Zita stereo reverb;
#X obj 20 7476 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7517 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7528 global.dict;
#X text 200 7528 global named dict object;
#X obj 30 7555 global.float;
#X text 200 7555 global named float object;
#X obj 30 7582 global.int;
#X text 200 7582 global named integer object;
#X obj 30 7609 global.list;
#X text 200 7609 global named list object;
#X obj 30 7636 global.mlist;
#X text 200 7636 global named mlist object;
#X obj 30 7663 global.set;
#X text 200 7663 global named set object;
#X obj 20 7690 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7731 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7742 hw.apple_smc;
#X text 200 7742 query the system management control in Apples;
#X obj 30 7769 hw.apple_sms;
#X text 200 7769 query the sudden motion sensor in Apples;
#X obj 30 7796 hw.arduino;
#X text 200 7796 Arduino device;
#X obj 30 7823 hw.cpu_temp;
#X text 200 7823 get CPU temperature;
#X obj 30 7850 hw.display;
#X text 200 7850 get/set display properties;
#X obj 30 7877 hw.kbd_light;
#X text 200 7877 Get/set keyboard light on some devices;
#X obj 30 7904 hw.serial;
#X text 200 7904 serial port device;
#X obj 20 7931 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 7972 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7986 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 7983 faust realtime compilation;
#X obj 30 8011 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8008 faust compiled ui object;
#X obj 20 8033 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8074 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8085 lfo.+pulse~;
#X text 200 8085 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8112 lfo.+saw~;
#X text 200 8112 Positive unit-amplitude low frequency saw wave;
#X obj 30 8139 lfo.+square~;
#X text 200 8139 Positive low frequency square wave;
#X obj 30 8166 lfo.+tri~;
#X text 200 8166 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8193 lfo.impulse~;
#X text 200 8193 Unit-amplitude low-frequency impulse train;
#X obj 30 8220 lfo.mosc~;
#X text 200 8220 multi-oscillator with various waveforms;
#X obj 30 8247 lfo.pulse~;
#X text 200 8247 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8274 lfo.saw~;
#X text 200 8274 Full-range unit-amplitude low frequency saw;
#X obj 30 8301 lfo.square~;
#X text 200 8301 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8328 lfo.tri~;
#X text 200 8328 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8355 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8396 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8407 list.^at;
#X text 200 8407 on input index(es) outputs list element(s);
#X obj 30 8434 list.^contains;
#X text 200 8434 checks if input atom is found in the list;
#X obj 30 8461 list.^search;
#X text 200 8461 on input atom returns it index in list;
#X obj 30 8488 list.all_of;
#X text 200 8488 checks if all list atoms accepted by predicate;
#X obj 30 8515 list.any_of;
#X text 200 8515 checks if at least one list element is accepted by
predicate;
#X obj 30 8542 list.append;
#X text 200 8542 append atom or list to the end of input list;
#X obj 30 8569 list.apply_to;
#X text 200 8569 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8609 list.at;
#X text 200 8609 outputs list element(s) at specified index(es);
#X obj 30 8636 list.choice;
#X text 200 8636 outputs random element from list;
#X obj 30 8663 list.contains;
#X text 200 8663 checks if input list contains specified atoms;
#X obj 30 8690 list.count;
#X text 200 8690 output the number of items that equal to specified
value;
#X obj 30 8717 list.count_if;
#X text 200 8717 output the number of items that satisfy to external
predicate;
#X obj 30 8744 list.delta;
#X text 200 8744 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8784 list.distribution;
#X text 200 8784 list value distribution;
#X obj 30 8811 list.do;
#X text 200 8811 iterate and modify list contents via side-chain;
#X obj 30 8838 list.each;
#X text 200 8838 maps each list value via external side-chain;
#X obj 30 8865 list.enumerate;
#X text 200 8865 enumerates input list;
#X obj 30 8892 list.equal;
#X text 200 8892 checks if given lists are equal;
#X obj 30 8919 list.first;
#X text 200 8919 returns first list element;
#X obj 30 8946 list.gen;
#X text 200 8946 generates list of specified length via external generator;
#X obj 30 8973 list.histogram;
#X text 200 8973 outputs distribution histogram;
#X obj 30 9000 list.insert;
#X text 200 9000 insert atom or list to the specified position of input
list;
#X obj 30 9027 list.integrator;
#X text 200 9027 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9067 list.last;
#X text 200 9067 output last list element;
#X obj 30 9094 list.length;
#X text 200 9094 output the number of atoms in the list;
#X obj 30 9121 list.max;
#X text 200 9121 output largest element in the list;
#X obj 30 9148 list.mean;
#X text 200 9148 calculates average of list of floats;
#X obj 30 9175 list.min;
#X text 200 9175 returns smallest element in the list;
#X obj 30 9202 list.none_of;
#X text 200 9202 checks if none of list atoms is accepted by predicate;
#X obj 30 9229 list.normalize;
#X text 200 9229 normalizes float list values to get their sum = 1.0;
#X obj 30 9256 list.pass_if;
#X text 200 9256 leave only elements accepted by predicate;
#X obj 30 9283 list.prepend;
#X text 200 9283 prepend atom or list before input list;
#X obj 30 9310 list.product;
#X text 200 9310 calculates product of floats in list;
#X obj 30 9337 list.range;
#X text 200 9337 output list smallest and largest value;
#X obj 30 9364 list.reduce;
#X text 200 9364 apply function of two arguments cumulatively to the
list;
#X obj 30 9391 list.remove;
#X text 200 9391 remove list element(s) at specified positions;
#X obj 30 9418 list.remove_if;
#X text 200 9418 remove elements by predicate;
#X obj 30 9445 list.repack;
#X text 200 9445 repack list to specified size;
#X obj 30 9472 list.repeat;
#X text 200 9472 output new list by repeating input list specified
times;
#X obj 30 9499 list.resample;
#X text 200 9499 resample list with specified ratio;
#X obj 30 9526 list.resize;
#X text 200 9526 changes list size;
#X obj 30 9553 list.reverse;
#X text 200 9553 reverses the order of the elements in the list;
#X obj 30 9580 list.rldecode;
#X text 200 9580 Run-length list decoder (RLE);
#X obj 30 9607 list.rlencode;
#X text 200 9607 RLE (run-length encoding) for lists;
#X obj 30 9634 list.rotate;
#X text 200 9634 rotates list;
#X obj 30 9661 list.route;
#X text 200 9661 acts like [route] but for lists;
#X obj 30 9688 list.search;
#X text 200 9688 search specified items in input list;
#X obj 30 9715 list.separate;
#X text 200 9715 sends list elements one by one separately;
#X obj 30 9742 list.seq;
#X text 200 9742 numeric sequence list generator;
#X obj 30 9769 list.set;
#X text 200 9769 set list value at specified position;
#X obj 30 9796 list.shift;
#X text 200 9796 shifts the contents of the list with linear interpolation;
#X obj 30 9823 list.shuffle;
#X text 200 9823 randomly rearranges elements in list;
#X obj 30 9850 list.slice;
#X text 200 9850 extract sublist;
#X obj 30 9877 list.sort;
#X text 200 9877 sorts list values by ascending order;
#X obj 30 9904 list.sort_with;
#X text 200 9904 sort list with user defined side-chain;
#X obj 30 9931 list.split;
#X text 200 9931 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9971 list.stretch;
#X text 200 9971 stretches list - changes its size with linear interpolation;
#X obj 30 9998 list.sum;
#X text 200 9998 calculates sum of floats in list;
#X obj 30 10025 list.unique;
#X text 200 10025 removes duplicates from input list;
#X obj 30 10052 list.unpack;
#X text 200 10052 unpack list elements to separate outlets;
#X obj 30 10079 list.unzip;
#X text 200 10079 splits list to N lists \, each to separate output;
#X obj 30 10106 list.walk;
#X text 200 10106 Walks thru the list;
#X obj 30 10133 list.zip;
#X text 200 10133 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10188 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10229 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10240 live.capture~;
#X text 200 10240 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10280 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10321 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10332 local.dict;
#X text 200 10332 local named dict object;
#X obj 30 10359 local.float;
#X text 200 10359 canvas-scoped named float variable;
#X obj 30 10386 local.int;
#X text 200 10386 canvas-scoped named integer variable;
#X obj 30 10413 local.list;
#X text 200 10413 local named list object;
#X obj 30 10440 local.mlist;
#X text 200 10440 local named mlist object;
#X obj 30 10467 local.set;
#X text 200 10467 local named set object;
#X obj 20 10494 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10535 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10546 math.abs;
#X text 200 10546 absolute value function;
#X obj 30 10573 math.abs~;
#X text 200 10573 absolute value function for signals;
#X obj 30 10600 math.acos;
#X text 200 10600 arc cosine function;
#X obj 30 10627 math.acosh;
#X text 200 10627 inverse hyperbolic cosine function;
#X obj 30 10654 math.acosh~;
#X text 200 10654 hyperbolic arc cosine for signals;
#X obj 30 10681 math.acos~;
#X text 200 10681 arc cosine function for signals;
#X obj 30 10708 math.and;
#X text 200 10708 operation AND for multiple arguments;
#X obj 30 10735 math.approx;
#X text 200 10735 check if input value approximately equal to pattern;
#X obj 30 10762 math.asin;
#X text 200 10762 arc sine function;
#X obj 30 10789 math.asinh;
#X text 200 10789 inverse hyperbolic sine function;
#X obj 30 10816 math.asinh~;
#X text 200 10816 hyperbolic arc sine for signals;
#X obj 30 10843 math.asin~;
#X text 200 10843 arc sine for signals;
#X obj 30 10870 math.atan;
#X text 200 10870 arc tangent function;
#X obj 30 10897 math.atanh;
#X text 200 10897 inverse hyperbolic tangent function;
#X obj 30 10924 math.atanh~;
#X text 200 10924 hyperbolic arc tangent for signals;
#X obj 30 10951 math.atan~;
#X text 200 10951 arc tangent for signals;
#X obj 30 10978 math.cabs~;
#X text 200 10978 magnitude of a complex signals;
#X obj 30 11005 math.carg~;
#X text 200 11005 phase angle of a complex signals;
#X obj 30 11032 math.cbrt;
#X text 200 11032 cube root function;
#X obj 30 11059 math.cbrt~;
#X text 200 11059 cube root function for signals;
#X obj 30 11086 math.cdiv~;
#X text 200 11086 division of complex signals;
#X obj 30 11113 math.ceil;
#X text 200 11113 round to smallest integral value not less than input
value;
#X obj 30 11140 math.ceil~;
#X text 200 11140 round to smallest integral value not less than input
value;
#X obj 30 11167 math.cexp~;
#X text 200 11167 exponent of a complex signals;
#X obj 30 11194 math.cmul~;
#X text 200 11194 multiplication of complex signals;
#X obj 30 11221 math.cos;
#X text 200 11221 cosine function;
#X obj 30 11248 math.cosh;
#X text 200 11248 hyperbolic cosine function;
#X obj 30 11275 math.cosh~;
#X text 200 11275 hyperbolic cosine for signals;
#X obj 30 11302 math.cos~;
#X text 200 11302 cosine function;
#X obj 30 11329 math.div;
#X text 200 11329 division (on lists too);
#X obj 30 11356 math.e;
#X text 200 11356 mathematical constant \, base of the natural logarithm;
#X obj 30 11383 math.erf;
#X text 200 11383 error function;
#X obj 30 11410 math.erf~;
#X text 200 11410 error function for signals;
#X obj 30 11437 math.exp;
#X text 200 11437 exponential functions;
#X obj 30 11464 math.exp2;
#X text 200 11464 exponential functions;
#X obj 30 11491 math.exp2~;
#X text 200 11491 base-2 exponential for signal;
#X obj 30 11518 math.expr;
#X text 200 11518 dynamic [expr];
#X obj 30 11545 math.exp~;
#X text 200 11545 base-e exponential for signal;
#X obj 30 11572 math.floor;
#X text 200 11572 round to largest integral value not greater than
x;
#X obj 30 11599 math.floor~;
#X text 200 11599 round to largest integral value not greater than
x;
#X obj 30 11626 math.gamma;
#X text 200 11626 gamma function;
#X obj 30 11653 math.gamma~;
#X text 200 11653 gamma function for floating point signals;
#X obj 30 11680 math.gcd;
#X text 200 11680 calculate greatest common divisor;
#X obj 30 11707 math.inf;
#X text 200 11707 infinity value that cannot be represented accurately;
#X obj 30 11734 math.inf~;
#X text 200 11734 inifinity signal generator;
#X obj 30 11761 math.lcm;
#X text 200 11761 calculate least common multiple;
#X obj 30 11788 math.lgamma;
#X text 200 11788 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11815 math.lgamma~;
#X text 200 11815 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11855 math.log;
#X text 200 11855 natural logarithm;
#X obj 30 11882 math.log10;
#X text 200 11882 logarithm functions;
#X obj 30 11909 math.log10~;
#X text 200 11909 natural logarithm;
#X obj 30 11936 math.log2;
#X text 200 11936 logarithm functions;
#X obj 30 11963 math.log2~;
#X text 200 11963 base-2 logarithm;
#X obj 30 11990 math.log~;
#X text 200 11990 natural logarithm;
#X obj 30 12017 math.mul;
#X text 200 12017 multiplication (on lists too);
#X obj 30 12044 math.nan;
#X text 200 12044 Not a Number \, unrepresentable value;
#X obj 30 12071 math.nan~;
#X text 200 12071 signal NaN;
#X obj 30 12098 math.neg;
#X text 200 12098 negate function;
#X obj 30 12125 math.or;
#X text 200 12125 operation OR for multiple arguments;
#X obj 30 12152 math.pi;
#X text 200 12152 mathematical constant;
#X obj 30 12179 math.pi~;
#X text 200 12179 mathematical constant;
#X obj 30 12206 math.polyeval;
#X text 200 12206 evaluates the polynomial described by the coefficients
list;
#X obj 30 12233 math.reciprocal;
#X text 200 12233 calculate reciprocal number;
#X obj 30 12260 math.reciprocal~;
#X text 200 12260 calculate reciprocal number for signals;
#X obj 30 12287 math.round;
#X text 200 12287 round to integral value \, regardless of rounding
direction;
#X obj 30 12314 math.round~;
#X text 200 12314 signal round;
#X obj 30 12341 math.sign;
#X text 200 12341 sign function;
#X obj 30 12368 math.sin;
#X text 200 12368 sine function;
#X obj 30 12395 math.sinh;
#X text 200 12395 hyperbolic sine function;
#X obj 30 12422 math.sinh~;
#X text 200 12422 hyperbolic sine for signals;
#X obj 30 12449 math.sin~;
#X text 200 12449 sine function;
#X obj 30 12476 math.sqrt;
#X text 200 12476 square root function;
#X obj 30 12503 math.sqrt~;
#X text 200 12503 square root for signal;
#X obj 30 12530 math.squared;
#X text 200 12530 value square;
#X obj 30 12557 math.squared~;
#X text 200 12557 signal value square;
#X obj 30 12584 math.sync_add;
#X text 200 12584 sync addition;
#X obj 30 12611 math.sync_and;
#X text 200 12611 sync logical AND operation;
#X obj 30 12638 math.sync_div;
#X text 200 12638 sync division;
#X obj 30 12665 math.sync_eq;
#X text 200 12665 sync equal numbers check;
#X obj 30 12692 math.sync_ge;
#X text 200 12692 sync greater equal numbers compare;
#X obj 30 12719 math.sync_gt;
#X text 200 12719 sync greater then numbers compare;
#X obj 30 12746 math.sync_le;
#X text 200 12746 sync less equal numbers compare;
#X obj 30 12773 math.sync_lshift;
#X text 200 12773 sync signed bit left shift;
#X obj 30 12800 math.sync_lt;
#X text 200 12800 sync less then numbers compare;
#X obj 30 12827 math.sync_mod;
#X text 200 12827 sync remainder of modulo division (float or integer);
#X obj 30 12854 math.sync_mul;
#X text 200 12854 sync multiplication;
#X obj 30 12881 math.sync_ne;
#X text 200 12881 sync numbers for not equality;
#X obj 30 12908 math.sync_or;
#X text 200 12908 sync logical OR operation;
#X obj 30 12935 math.sync_rshift;
#X text 200 12935 sync signed bit right shift;
#X obj 30 12962 math.sync_sub;
#X text 200 12962 sync subtraction;
#X obj 30 12989 math.sync_xor;
#X text 200 12989 sync logical XOR operation;
#X obj 30 13016 math.tan;
#X text 200 13016 tangent function;
#X obj 30 13043 math.tanh;
#X text 200 13043 hyperbolic tangent function;
#X obj 30 13070 math.tanh~;
#X text 200 13070 hyperbolic tangent for signals;
#X obj 30 13097 math.tan~;
#X text 200 13097 tangent function;
#X obj 30 13124 math.trunc;
#X text 200 13124 truncate to integer value;
#X obj 30 13151 math.trunc~;
#X text 200 13151 truncate to integer value;
#X obj 20 13178 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13219 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13230 midi.cc;
#X text 200 13230 enhanced version of vanilla ctlin;
#X obj 30 13257 midi.clock;
#X text 200 13257 midi clock toolbox;
#X obj 30 13284 midi.ctl2str;
#X text 200 13284 convert Standard MIDI Controllers number to name;
#X obj 30 13311 midi.event2ctl;
#X text 200 13311 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13338 midi.event2note;
#X text 200 13338 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13365 midi.event2prg;
#X text 200 13365 convert MidiEvent message to midi program change
value;
#X obj 30 13392 midi.file;
#X text 200 13392 standard midi file SMF reader and writer;
#X obj 30 13419 midi.kbd;
#X text 200 13419 computer keyboard midi;
#X obj 30 13446 midi.key2str;
#X text 200 13446 convert key number to SPN name according to tonality;
#X obj 30 13473 midi.oct;
#X text 200 13473 midi octave transpose;
#X obj 30 13500 midi.prg2str;
#X text 200 13500 convert GM Instrument number to name (string or symbol);
#X obj 30 13527 midi.sustain;
#X text 200 13527 sustain pedal emulation;
#X obj 30 13554 midi.sysex;
#X text 200 13554 sysex input messages as list;
#X obj 30 13581 midi.track;
#X text 200 13581 extract track from MidiFile;
#X obj 30 13608 midi.tuning;
#X text 200 13608 apply tuning to midi messages;
#X obj 30 13635 midi.vramp;
#X text 200 13635 apply crescendo or diminuendo for midi message flow;
#X obj 30 13662 midi.vrand;
#X text 200 13662 midi velocity randomizer;
#X obj 20 13689 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13730 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13741 click~;
#X text 200 13741 Output single impulse on bang;
#X obj 30 13768 fluid~;
#X text 200 13768 FluidSynth SoundFont 2 player;
#X obj 30 13795 modplug~;
#X text 200 13795 MOD file player (using libmodplug);
#X obj 30 13822 speech.flite;
#X text 200 13822 render speech to array;
#X obj 30 13849 speech.flite~;
#X text 200 13849 render speech to array;
#X obj 20 13876 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13917 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13928 loadexpr;
#X text 200 13928 send message when patch loads;
#X obj 30 13955 msg;
#X text 200 13955 message constructor;
#X obj 30 13982 msg.after;
#X text 200 13982 send specified message after incoming message;
#X obj 30 14009 msg.onload;
#X text 200 14009 send message when patch loads;
#X obj 20 14036 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 14077 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14088 net.host2ip;
#X text 200 14088 returns IP address by DNS name;
#X obj 20 14115 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14156 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14167 noise.baker;
#X text 200 14167 Part of a-chaos library;
#X obj 30 14194 noise.clifford;
#X text 200 14194 Part of a-chaos library;
#X obj 30 14221 noise.collatz;
#X text 200 14221 Part of a-chaos library;
#X obj 30 14248 noise.crackle~;
#X text 200 14248 sparse noise generator;
#X obj 30 14275 noise.duffing;
#X text 200 14275 Part of a-chaos library;
#X obj 30 14302 noise.ginger;
#X text 200 14302 Gingerbreadman map chaotic generator;
#X obj 30 14329 noise.henon;
#X text 200 14329 Part of a-chaos library;
#X obj 30 14356 noise.henon_heilles;
#X text 200 14356 Part of a-chaos library;
#X obj 30 14383 noise.henon_phase;
#X text 200 14383 Part of a-chaos library;
#X obj 30 14410 noise.henonf;
#X text 200 14410 Part of a-chaos library;
#X obj 30 14437 noise.ikeda;
#X text 200 14437 Part of a-chaos library;
#X obj 30 14464 noise.lfreq0~;
#X text 200 14464 sampled/held noise (piecewise constant);
#X obj 30 14491 noise.lfreq~;
#X text 200 14491 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14518 noise.lorenz;
#X text 200 14518 Part of a-chaos library;
#X obj 30 14545 noise.lyapunov;
#X text 200 14545 Part of a-chaos library;
#X obj 30 14572 noise.navier_stokes;
#X text 200 14572 Part of a-chaos library;
#X obj 30 14599 noise.pink~;
#X text 200 14599 Pink noise generator;
#X obj 30 14626 noise.rossler;
#X text 200 14626 Part of a-chaos library;
#X obj 30 14653 noise.stein;
#X text 200 14653 Part of a-chaos library;
#X obj 30 14680 noise.torus;
#X text 200 14680 Part of a-chaos library;
#X obj 30 14707 noise.verhulst;
#X text 200 14707 Part of a-chaos library;
#X obj 30 14734 noise.white~;
#X text 200 14734 White noise generator;
#X obj 20 14761 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14802 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14813 osc.blit~;
#X text 200 14813 Bandlimited impulse train oscillator;
#X obj 30 14840 osc.impulse~;
#X text 200 14840 Bandlimited impulse train generator;
#X obj 30 14867 osc.pulse~;
#X text 200 14867 Bandlimited pulse train oscillator;
#X obj 30 14894 osc.saw4~;
#X text 200 14894 Bandlimited sawtooth wave;
#X obj 30 14921 osc.saw~;
#X text 200 14921 Alias-free sawtooth wave;
#X obj 30 14948 osc.sinfb~;
#X text 200 14948 Sine oscilator with feedback;
#X obj 30 14975 osc.sin~;
#X text 200 14975 Sine wave oscillator;
#X obj 30 15002 osc.square~;
#X text 200 15002 Bandlimited square wave oscillator;
#X obj 30 15029 osc.tri~;
#X text 200 15029 Bandlimited triangle wave oscillator;
#X obj 20 15056 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 15097 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15108 canvas.current;
#X text 200 15108 verbose information about current canvas;
#X obj 30 15135 canvas.dir;
#X text 200 15135 current canvas directory;
#X obj 30 15162 canvas.name;
#X text 200 15162 current canvas name;
#X obj 30 15189 canvas.path;
#X text 200 15189 current canvas fullpath;
#X obj 30 15216 canvas.top;
#X text 200 15216 verbose information about top-level canvas;
#X obj 30 15243 patch.args;
#X text 200 15243 Get patch or subpatch arguments;
#X obj 30 15270 patch.deps;
#X text 200 15270 patch dependencies: used objects and abstractions;
#X obj 30 15297 patch.tree;
#X text 200 15297 patch tree;
#X obj 20 15324 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15365 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15376 path.basename;
#X text 200 15376 outputs filename portion of pathname;
#X obj 30 15403 path.dirname;
#X text 200 15403 outputs directory portion of pathname;
#X obj 30 15430 path.exists;
#X text 200 15430 checks if given path exists;
#X obj 30 15457 path.is_dir;
#X text 200 15457 check if path is directory;
#X obj 30 15484 path.lsdir;
#X text 200 15484 list directory contents;
#X obj 20 15511 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15552 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15563 is_any;
#X text 200 15563 checks if input data has *any* type;
#X obj 30 15590 is_bang;
#X text 200 15590 checks if input data has *bang* type;
#X obj 30 15617 is_data;
#X text 200 15617 checks if input data has *data* type;
#X obj 30 15644 is_dict;
#X text 200 15644 checks if input data has *dict* type;
#X obj 30 15671 is_even;
#X text 200 15671 checks if input number is even;
#X obj 30 15698 is_file;
#X text 200 15698 checks if file exists and accessible;
#X obj 30 15725 is_float;
#X text 200 15725 checks if input data has *float* type;
#X obj 30 15752 is_list;
#X text 200 15752 checks if input data has *list* type;
#X obj 30 15779 is_odd;
#X text 200 15779 checks if input number is odd;
#X obj 30 15806 is_pointer;
#X text 200 15806 checks if input data has *pointer* type;
#X obj 30 15833 is_symbol;
#X text 200 15833 checks if input data has *symbol* type;
#X obj 20 15860 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15901 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15912 preset.float;
#X text 200 15912 load/store float preset;
#X obj 30 15939 preset.list;
#X text 200 15939 load/store symbol preset;
#X obj 30 15966 preset.storage;
#X text 200 15966 preset storage control;
#X obj 30 15993 preset.symbol;
#X text 200 15993 load/store symbol preset;
#X obj 20 16020 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 16061 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16072 patch.props;
#X text 200 16072 patch properties manager;
#X obj 30 16099 prop;
#X text 200 16099 get/set named property value for subpatch or abstraction;
#X obj 30 16126 prop.declare;
#X text 200 16126 declare named property for subpatch or abstraction;
#X obj 30 16153 prop.get;
#X text 200 16153 get property from connected object/subpatch/abstraction;
#X obj 30 16180 prop.get~;
#X text 200 16180 Property extractor from sound stream;
#X obj 30 16207 prop.join;
#X text 200 16207 join property to main data flow;
#X obj 30 16234 prop.set;
#X text 200 16234 set object property;
#X obj 30 16261 prop.split;
#X text 200 16261 separate properties from dataflow;
#X obj 20 16288 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16329 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16340 proto.firmata;
#X text 200 16340 Firmata Arduino protocol support;
#X obj 30 16367 proto.midi;
#X text 200 16367 raw midi encoder/parser;
#X obj 30 16394 proto.midi.cc;
#X text 200 16394 raw midi CC encoder/parser;
#X obj 30 16421 proto.mpv;
#X text 200 16421 mpv video player control;
#X obj 30 16448 proto.sp.alpaca;
#X text 200 16448 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16475 proto.xtouch_ext;
#X text 200 16475 Behringer XTouch Extender XMidi protocol;
#X obj 20 16502 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16543 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16554 random.atom;
#X text 200 16554 weighted atom generation from specified list;
#X obj 30 16581 random.discrete;
#X text 200 16581 random weighted integers on interval [0 \, n);
#X obj 30 16608 random.float;
#X text 200 16608 uniform random float generator in specified range;
#X obj 30 16635 random.gauss;
#X text 200 16635 gaussian random distribution;
#X obj 30 16662 random.int;
#X text 200 16662 uniform random integer generator in specified range;
#X obj 30 16689 random.linear;
#X text 200 16689 random linear distribution;
#X obj 30 16716 random.pw_const;
#X text 200 16716 piecewise constant random distribution;
#X obj 30 16743 random.pw_lin;
#X text 200 16743 piecewise linear random distribution;
#X obj 20 16770 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16811 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16822 seq.arp;
#X text 200 16822 sequence arpeggiator;
#X obj 30 16849 seq.bangs;
#X text 200 16849 bang sequencer;
#X obj 30 16876 seq.counter;
#X text 200 16876 sequencer counter;
#X obj 30 16903 seq.life;
#X text 200 16903 Conway gamw of life sequencer;
#X obj 30 16930 seq.matrix;
#X text 200 16930 sequencer control for ui.matrix;
#X obj 30 16957 seq.nbangs;
#X text 200 16957 output specified number of bang with time intervals;
#X obj 30 16984 seq.phasor;
#X text 200 16984 control rate phasor (saw) generator;
#X obj 30 17011 seq.toggles;
#X text 200 17011 toggle sequencer;
#X obj 30 17038 sequencer;
#X text 200 17038 basic sequence player;
#X obj 20 17065 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 17106 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17117 snd.file;
#X text 200 17117 Sound file loader on steroids;
#X obj 20 17144 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 17185 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17196 hoa.2d.decoder~;
#X text 200 17196 hoa 2d decoder;
#X obj 30 17223 hoa.2d.encoder~;
#X text 200 17223 hoa 2d encoder;
#X obj 30 17250 hoa.2d.map~;
#X text 200 17250 a 2d ambisonic multisource spatializer;
#X obj 30 17277 hoa.2d.optim~;
#X text 200 17277 a 2D ambisonic optimization tool;
#X obj 30 17304 hoa.2d.projector~;
#X text 200 17304 a plane waves decomposer from circular harmonics
domain;
#X obj 30 17331 hoa.2d.recomposer~;
#X text 200 17331 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 17371 hoa.2d.rotate~;
#X text 200 17371 a 2D ambisonic sound field rotation;
#X obj 30 17398 hoa.2d.wider~;
#X text 200 17398 a 2d fractional ambisonic order simulator;
#X obj 30 17425 hoa.@process;
#X text 200 17425 process properties manager for hoa.process~;
#X obj 30 17452 hoa.in;
#X text 200 17452 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17479 hoa.in~;
#X text 200 17479 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17506 hoa.out;
#X text 200 17506 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17533 hoa.out~;
#X text 200 17533 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17560 hoa.process~;
#X text 200 17560 patcher loader for multichannel processing;
#X obj 30 17590 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17587 a 2d ambisonic harmonic scope;
#X obj 30 17612 pan.cos~;
#X text 200 17612 two channel equal power sine/cosine panner;
#X obj 30 17639 pan.linsig~;
#X text 200 17639 two channel linear panner with signal control;
#X obj 30 17666 pan.lin~;
#X text 200 17666 two channel linear panner;
#X obj 30 17693 pan.spread~;
#X text 200 17693 spreads input channels across the stereo field;
#X obj 30 17720 pan.sqrt~;
#X text 200 17720 two channel equal power square root panner;
#X obj 30 17747 spat.pan4~;
#X text 200 17747 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17774 spat.pan8~;
#X text 200 17774 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17801 spat.zita6x8~;
#X text 200 17801 spat with 6 inputs sources to 8 channel output;
#X obj 20 17828 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17869 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17880 string;
#X text 200 17880 string constructor;
#X obj 30 17907 string.contains;
#X text 200 17907 checks if string contains specified substring;
#X obj 30 17934 string.ends_with;
#X text 200 17934 checks if string ends with specified substring;
#X obj 30 17961 string.equal;
#X text 200 17961 check strings or symbols for equality;
#X obj 30 17988 string.format;
#X text 200 17988 formats string like printf.;
#X obj 30 18015 string.join;
#X text 200 18015 joins (concatenates) strings with separator;
#X obj 30 18042 string.length;
#X text 200 18042 number of characters in string (unicode supported);
#X obj 30 18069 string.match;
#X text 200 18069 check if string match regular expression;
#X obj 30 18096 string.remove;
#X text 200 18096 remove substring from input string;
#X obj 30 18123 string.replace;
#X text 200 18123 replace from one substring to another in input string;
#X obj 30 18150 string.split;
#X text 200 18150 split string by separator;
#X obj 30 18177 string.starts_with;
#X text 200 18177 checks if string starts with specified substring;
#X obj 30 18204 string.substr;
#X text 200 18204 extract substring from input string;
#X obj 30 18231 string2symbol;
#X text 200 18231 converts string to symbol;
#X obj 20 18258 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18299 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18310 symbol.equal;
#X text 200 18310 check symbols for equality;
#X obj 30 18337 symbol.length;
#X text 200 18337 number of characters in symbol (unicode supported);
#X obj 30 18364 symbol.num_compare;
#X text 200 18364 numeric symbol compare;
#X obj 30 18391 symbol2any;
#X text 200 18391 converts symbol or string to message;
#X obj 30 18418 symbol2intlist;
#X text 200 18418 converts symbol to list of character codes;
#X obj 20 18445 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18486 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18497 synth.bee3~;
#X text 200 18497 Hammond-oid organ FM synthesis instrument;
#X obj 30 18524 synth.birds~;
#X text 200 18524 bird singing generator;
#X obj 30 18551 synth.church_bell~;
#X text 200 18551 generic church bell modal model;
#X obj 30 18578 synth.dubdub~;
#X text 200 18578 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18618 synth.dx7~;
#X text 200 18618 FAUST dx7 implementation;
#X obj 30 18645 synth.eguitar~;
#X text 200 18645 simple electric guitar model with steel strings;
#X obj 30 18672 synth.fgrain~;
#X text 200 18672 file granulator from STK;
#X obj 30 18699 synth.glass_harm~;
#X text 200 18699 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 18726 synth.glitch~;
#X text 200 18726 Glitch synthesizer by naivesound;
#X obj 30 18753 synth.harpsichord~;
#X text 200 18753 waveguide commuted harpsichord;
#X obj 30 18780 synth.ks~;
#X text 200 18780 Karplus-Strong string;
#X obj 30 18807 synth.marimba~;
#X text 200 18807 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18847 synth.piano~;
#X text 200 18847 waveguide commuted piano;
#X obj 30 18874 synth.rhodey~;
#X text 200 18874 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18901 synth.risset_arp~;
#X text 200 18901 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18928 synth.risset_tone~;
#X text 200 18928 Jean Claude Risset's endless glissando;
#X obj 30 18955 synth.russian_bell~;
#X text 200 18955 russian church bell modal model;
#X obj 30 18982 synth.shakers~;
#X text 200 18982 various percussion sounds from STK library;
#X obj 30 19009 synth.sitar~;
#X text 200 19009 STK sitar;
#X obj 30 19036 synth.wurley~;
#X text 200 19036 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 19063 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 19104 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19115 system.colorpanel;
#X text 200 19115 System color panel dialog popup;
#X obj 30 19142 system.cursor;
#X text 200 19142 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 19169 system.exec;
#X text 200 19169 run external command in separate process;
#X obj 30 19196 system.exit;
#X text 200 19196 quit PureData;
#X obj 30 19223 system.getenv;
#X text 200 19223 Get system environment variables;
#X obj 30 19250 system.hostname;
#X text 200 19250 outputs system hostname;
#X obj 30 19277 system.memsize;
#X text 200 19277 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 19317 system.memused;
#X text 200 19317 returns the process physical memory use - current
and peak;
#X obj 30 19344 system.screen_size;
#X text 200 19344 returns current screen size in pixels;
#X obj 20 19371 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 19412 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19423 tl.bang;
#X text 200 19423 Timeline bang (with possible delay);
#X obj 30 19453 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 19450 Timeline section;
#X obj 30 19475 tl.timeline;
#X text 200 19475 Timeline - event scheduler;
#X obj 30 19502 tl.toggle;
#X text 200 19502 Timeline bang;
#X obj 30 19529 tl.transport;
#X text 200 19529 Timeline transport control;
#X obj 20 19556 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19597 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19611 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19608 array view with cursor and selection;
#X obj 30 19636 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19633 A bang... that's all;
#X obj 30 19661 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19658 button widget;
#X obj 30 19686 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19683 colorchooser widget;
#X obj 30 19711 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19708 Display GUI object;
#X obj 30 19736 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19733 GUI for turning DSP on/off;
#X obj 30 19761 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19758 envelope editor widget;
#X obj 30 19786 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 19783 UI filter object calculator for biquad filter;
#X obj 30 19811 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19808 UI filter object based on biquad filter;
#X obj 30 19836 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19833 UI stereo gain control;
#X obj 30 19861 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19858 UI gain control;
#X obj 30 19886 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19883 simple icon with button capabilities;
#X obj 30 19911 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19908 value increment/decrement;
#X obj 30 19936 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19933 keyboard widget;
#X obj 30 19961 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19958 knob widget;
#X obj 30 19986 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19983 simple label widget;
#X obj 30 20011 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 20008 Hyperlink widget;
#X obj 30 20036 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 20033 The matrix of toggles has you.;
#X obj 30 20061 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 20058 Dropdown menu;
#X obj 30 20086 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 20083 Shows peak and rms signal level;
#X obj 30 20111 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 20108 incoming MIDI message viewport;
#X obj 30 20136 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 20133 filter mouse events from ui objects;
#X obj 30 20161 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 20158 routes mouse events from ui objects;
#X obj 30 20186 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 20183 counterpart of the vanilla [nbx];
#X obj 30 20211 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 20208 counterpart of the vanilla [nbx] for signal;
#X obj 30 20236 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 20233 signal plotter;
#X obj 30 20261 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 20258 2D slider in polar coordinates;
#X obj 30 20286 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 20283 Preset manager;
#X obj 30 20311 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 20308 counterpart of the vanilla radio toggle;
#X obj 30 20336 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 20333 range slider;
#X obj 30 20361 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 20358 Scope GUI object;
#X obj 30 20386 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 20383 counterpart of the vanilla slider;
#X obj 30 20411 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 20408 2D slider widget;
#X obj 30 20436 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 20433 Multiple slider widget;
#X obj 30 20461 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 20458 Spectroscope GUI object;
#X obj 30 20486 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20483 displays a list of text buttons or text toggles;
#X obj 30 20511 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20508 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20533 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20533 version: v0.9.3 \, license: GPL3;
#X obj 20 20561 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20584 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20548 msg 0;
#X obj 670 20583 switch~;
#X connect 1428 0 1429 0;