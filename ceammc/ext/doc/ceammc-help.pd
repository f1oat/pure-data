#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot;
#X text 200 560 array data plotter;
#X obj 30 587 array.plot~;
#X text 200 587 plot signal on specified array;
#X obj 30 614 array.resample;
#X text 200 614 array resampler;
#X obj 30 641 array.rms;
#X text 200 641 calculates root mean square value for array;
#X obj 30 668 array.set;
#X text 200 668 set array content from list;
#X obj 30 695 array.stddev;
#X text 200 695 calculates standard deviation for array values;
#X obj 30 722 array.stretch;
#X text 200 722 array time-stretch \, pitch-shift or rate-change;
#X obj 30 749 array.sum;
#X text 200 749 calculates sum of array elements;
#X obj 30 776 array.sum2;
#X text 200 776 calculates sum of squares of array elements;
#X obj 30 803 array.variance;
#X text 200 803 calculates variance of array values;
#X obj 30 830 array.vplay;
#X text 200 830 simple array player for using with vline~;
#X obj 30 857 array.window;
#X text 200 857 fill array with window;
#X obj 30 884 plot.geomspace~;
#X text 200 884 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 924 plot.hist~;
#X text 200 924 calculate and output signal histogram;
#X obj 30 951 plot.linspace~;
#X text 200 951 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 991 plot.logspace~;
#X text 200 991 outputs numbers spaced evenly on a log scale;
#X obj 30 1018 plot.response~;
#X text 200 1018 output amp/phase freq response to impulse;
#X obj 20 1045 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1086 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1097 ceammc.search;
#X text 200 1097 ceammc library search object;
#X obj 30 1127 ui.link @title [function] @url function-help.pd;
#X text 200 1124 named function;
#X obj 30 1149 function.call;
#X text 200 1149 call named function;
#X obj 30 1176 gain~;
#X text 200 1176 multislot signal gain;
#X obj 30 1203 logger;
#X text 200 1203 advanced data logger;
#X obj 30 1230 matrix~;
#X text 200 1230 signal routing matrix;
#X obj 30 1257 metro.pattern;
#X text 200 1257 metro with rhythmic patterns;
#X obj 30 1284 metro.random;
#X text 200 1284 metro random bang with specified range;
#X obj 30 1311 metro.seq;
#X text 200 1311 metro sequencer;
#X obj 30 1338 mix~;
#X text 200 1338 multislot signal mixer;
#X obj 30 1365 nsig~;
#X text 200 1365 Mulitchannel converter from control to audio rate;
#X obj 30 1392 obj.props;
#X text 200 1392 property extractor;
#X obj 30 1419 radio;
#X text 200 1419 float index to outlet values as radio switch;
#X obj 30 1446 sync;
#X text 200 1446 value synchronization;
#X obj 30 1473 window;
#X text 200 1473 returns window value by given window position;
#X obj 30 1500 xdac~;
#X text 200 1500 dac~ with channel ranges;
#X obj 30 1527 xfade2~;
#X text 200 1527 multi stereo-signal crossfade;
#X obj 30 1554 xfade~;
#X text 200 1554 multi signal crossfade;
#X obj 20 1581 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1633 chaos.gbman0;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.gbman0~;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.jong;
#X text 200 1687 Peter de Jong attractor;
#X obj 30 1714 chaos.logistic;
#X text 200 1714 Logistic map chaotic generator;
#X obj 30 1741 chaos.std0;
#X text 200 1741 Standard map chaotic generator;
#X obj 30 1768 chaos.std0~;
#X text 200 1768 Standard map chaotic generator;
#X obj 20 1795 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1847 array.p2s;
#X text 200 1847 convert array phase [0\..1] to sample position;
#X obj 30 1874 array.s2p;
#X text 200 1874 convert sample position to phase range [0\..1];
#X obj 30 1901 conv.amp2dbfs;
#X text 200 1901 convert from amplitude to decibel full scale;
#X obj 30 1928 conv.amp2dbfs~;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.bits2bang;
#X text 200 1955 convert list of bits to bang events;
#X obj 30 1982 conv.bits2int;
#X text 200 1982 convert list of bits to integer;
#X obj 30 2009 conv.bits2note;
#X text 200 2009 convert list of bits to note events;
#X obj 30 2036 conv.bits2pos;
#X text 200 2036 convert list of bits to list of bit position;
#X obj 30 2063 conv.bpm2hz;
#X text 200 2063 converts BPM to frequency in herz;
#X obj 30 2090 conv.bpm2ms;
#X text 200 2090 convert frequency in BPM to period in milliseconds;
#X obj 30 2117 conv.bpm2sec;
#X text 200 2117 convert frequency in BPM to period in seconds;
#X obj 30 2144 conv.car2pol;
#X text 200 2144 convert cartesian coords to polar;
#X obj 30 2171 conv.cc2amp;
#X text 200 2171 convert from MIDI Control Change range;
#X obj 30 2198 conv.dbfs2amp;
#X text 200 2198 convert decibel full scale to amplitude;
#X obj 30 2225 conv.dbfs2amp~;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.degree2key;
#X text 200 2252 convert scale degree to key;
#X obj 30 2279 conv.hex2int;
#X text 200 2279 hex symbol to int value;
#X obj 30 2306 conv.int2bits;
#X text 200 2306 convert integer to list of bits;
#X obj 30 2333 conv.lin2curve;
#X text 200 2333 map linear to exponential range with 0 allowed.;
#X obj 30 2360 conv.lin2exp;
#X text 200 2360 maps linear range to exponential range;
#X obj 30 2387 conv.lin2lin;
#X text 200 2387 convert from one linear range to another;
#X obj 30 2414 conv.lin2lin~;
#X text 200 2414 convert from one linear range to another for signals;
#X obj 30 2441 conv.list2props;
#X text 200 2441 converts list to series of property messages;
#X obj 30 2468 conv.midi2freq;
#X text 200 2468 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2508 conv.ms2bpm;
#X text 200 2508 convert period in milliseconds to frequency in BPM;
#X obj 30 2535 conv.ms2samp;
#X text 200 2535 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2575 conv.ms2samp~;
#X text 200 2575 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2615 conv.phase2rad;
#X text 200 2615 convert phase value [0-1] to radians [0-2π];
#X obj 30 2642 conv.phase2rad~;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.pitch2midi;
#X text 200 2669 converts symbol pitch name to MIDI note number;
#X obj 30 2696 conv.pol2car;
#X text 200 2696 convert from polar coordinates to cartesian;
#X obj 30 2723 conv.rad2phase;
#X text 200 2723 convert radians value to phase;
#X obj 30 2750 conv.rad2phase~;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.samp2ms;
#X text 200 2777 convert samples to time according to samplerate;
#X obj 30 2804 conv.samp2ms~;
#X text 200 2804 convert samples to milliseconds according to samplerate;
#X obj 30 2831 conv.samp2sec;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.sec2bpm;
#X text 200 2858 convert period in seconds to frequency in BPM;
#X obj 30 2885 conv.sec2samp;
#X text 200 2885 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2925 conv.sec2str;
#X text 200 2925 converts float time in seconds to formated symbol
(or string);
#X obj 30 2952 conv.sig2float~;
#X text 200 2952 convert signal to floats;
#X obj 30 2979 conv.str2sec;
#X text 200 2979 converts formatted time to float value in seconds;
#X obj 20 3006 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3058 data.copy;
#X text 200 3058 make copy for any data types: MList \, Set etc...;
#X obj 30 3085 data.dict;
#X text 200 3085 dictionary container: store values by key;
#X obj 30 3112 data.fifo;
#X text 200 3112 First-In-First-Out (FIFO) queue data container;
#X obj 30 3139 data.float;
#X text 200 3139 robust float object;
#X obj 30 3166 data.int;
#X text 200 3166 robust int object;
#X obj 30 3193 data.list;
#X text 200 3193 list container;
#X obj 30 3220 data.mlist;
#X text 200 3220 multidimensional list container;
#X obj 30 3247 data.set;
#X text 200 3247 container that store unique elements;
#X obj 30 3274 data.set2list;
#X text 200 3274 converts set to list;
#X obj 30 3301 dict.contains;
#X text 200 3301 predicate to check if dict contains a keys;
#X obj 30 3328 dict.each;
#X text 200 3328 map each value in dict;
#X obj 30 3355 dict.from_list;
#X text 200 3355 creates dictionary from list;
#X obj 30 3382 dict.get;
#X text 200 3382 output dict values;
#X obj 30 3409 dict.keys;
#X text 200 3409 get list of dict keys;
#X obj 30 3436 dict.pass;
#X text 200 3436 passes specified keys in dict;
#X obj 30 3463 dict.reject;
#X text 200 3463 rejects specified keys from dict;
#X obj 30 3490 dict.size;
#X text 200 3490 dictionary size;
#X obj 30 3517 dict.to_list;
#X text 200 3517 converts dictionary to plain list;
#X obj 30 3544 dict.values;
#X text 200 3544 dictionary values as mlist;
#X obj 30 3571 mlist.flatten;
#X text 200 3571 flatten nested mlist;
#X obj 30 3598 rtree.to_list;
#X text 200 3598 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3625 set.contains;
#X text 200 3625 check if specified element is in set;
#X obj 30 3652 set.diff;
#X text 200 3652 difference between two sets;
#X obj 30 3679 set.equal;
#X text 200 3679 checks if two sets are equal (contains same elements);
#X obj 30 3706 set.intersect;
#X text 200 3706 output intersection of given sets;
#X obj 30 3733 set.size;
#X text 200 3733 get number of elements in set;
#X obj 30 3760 set.symdiff;
#X text 200 3760 symmetric difference between two sets;
#X obj 30 3787 set.union;
#X text 200 3787 output union of given sets;
#X obj 20 3814 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3855 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3866 dyn.comp2~;
#X text 200 3866 stereo dynamic range compressor;
#X obj 30 3893 dyn.comp~;
#X text 200 3893 mono dynamic range compressors;
#X obj 30 3920 dyn.gate2~;
#X text 200 3920 stereo signal gate;
#X obj 30 3947 dyn.gate~;
#X text 200 3947 mono signal gate;
#X obj 30 3974 dyn.limit2~;
#X text 200 3974 stereo 1176LN Peak Limiter;
#X obj 30 4001 dyn.limit~;
#X text 200 4001 mono 1176LN Peak Limiter;
#X obj 30 4028 dyn.softclip~;
#X text 200 4028 soft signal clip;
#X obj 20 4055 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4096 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4107 env.adsr~;
#X text 200 4107 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4134 env.ar~;
#X text 200 4134 Attack/Release envelope generator;
#X obj 30 4161 env.asr~;
#X text 200 4161 Attack/Sustain/Release envelope generator;
#X obj 30 4188 env.concat;
#X text 200 4188 Envelope concatenation;
#X obj 30 4215 env.follow~;
#X text 200 4215 Envelope follower with independent attack and release
times;
#X obj 30 4242 env.mix;
#X text 200 4242 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4282 env.smooth~;
#X text 200 4282 An envelope with an exponential attack and release;
#X obj 30 4309 env.tscale;
#X text 200 4309 Envelope time-scale;
#X obj 30 4336 env.tshift;
#X text 200 4336 Envelope time-shift (horizontal);
#X obj 30 4363 env.vscale;
#X text 200 4363 Envelope value-scale;
#X obj 30 4390 env2array;
#X text 200 4390 Renders envelope to specified array;
#X obj 30 4417 env2vline;
#X text 200 4417 Converts envelope to bunch of vline messages;
#X obj 30 4444 envelope;
#X text 200 4444 Envelope data type;
#X obj 30 4471 vline2env;
#X text 200 4471 Converts vline messages to env;
#X obj 20 4498 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4550 expand_env;
#X text 200 4550 Substitute environment variables in data stream;
#X obj 30 4577 flow.append;
#X text 200 4577 append message to flow stream;
#X obj 30 4604 flow.change;
#X text 200 4604 rejects redundant input values;
#X obj 30 4631 flow.count;
#X text 200 4631 control flow event counter;
#X obj 30 4658 flow.delay;
#X text 200 4658 enhanced version on vanilla delay object;
#X obj 30 4685 flow.demultiplex;
#X text 200 4685 control flow demultiplexer;
#X obj 30 4712 flow.demultiplex2~;
#X text 200 4712 audio stream stereo demultiplexer;
#X obj 30 4739 flow.demultiplex~;
#X text 200 4739 audio stream demultiplexer;
#X obj 30 4766 flow.dup;
#X text 200 4766 message duplicator;
#X obj 30 4793 flow.gate;
#X text 200 4793 control flow gate. [spigot] analog;
#X obj 30 4820 flow.greater;
#X text 200 4820 numeric stream router;
#X obj 30 4847 flow.greater_eq;
#X text 200 4847 numeric stream router;
#X obj 30 4874 flow.group;
#X text 200 4874 group input atoms in list of specified size;
#X obj 30 4901 flow.interval;
#X text 200 4901 measure time between flow events;
#X obj 30 4928 flow.less;
#X text 200 4928 numeric stream router \, like many [moses];
#X obj 30 4955 flow.less_eq;
#X text 200 4955 numeric stream router \, like many [moses];
#X obj 30 4982 flow.list2many;
#X text 200 4982 routes list element with message selectors;
#X obj 30 5009 flow.match;
#X text 200 5009 route data flow by regexp match;
#X obj 30 5036 flow.mem;
#X text 200 5036 store data flow in memory;
#X obj 30 5063 flow.multiplex;
#X text 200 5063 control flow multiplexer;
#X obj 30 5090 flow.multiplex2~;
#X text 200 5090 audio stream stereo multiplexer;
#X obj 30 5117 flow.multiplex~;
#X text 200 5117 audio stream multiplexer;
#X obj 30 5144 flow.once;
#X text 200 5144 one message pass thru;
#X obj 30 5171 flow.pack;
#X text 200 5171 flow pack;
#X obj 30 5198 flow.pass;
#X text 200 5198 pass specified values;
#X obj 30 5225 flow.pass_if;
#X text 200 5225 pass values that accepted by predicate object;
#X obj 30 5252 flow.pipe;
#X text 200 5252 enhanced version on vanilla pipe object;
#X obj 30 5279 flow.queue;
#X text 200 5279 multi-channel control flow sync queue (or FIFO);
#X obj 30 5306 flow.reject;
#X text 200 5306 reject specified values;
#X obj 30 5333 flow.reject_if;
#X text 200 5333 reject values by predicate;
#X obj 30 5360 flow.ring;
#X text 200 5360 dataflow ring buffer;
#X obj 30 5387 flow.route;
#X text 200 5387 advanced message router;
#X obj 30 5414 flow.select;
#X text 200 5414 vanilla flow on steroids;
#X obj 30 5441 flow.space;
#X text 200 5441 space in time messages received at the same logical
time;
#X obj 30 5468 flow.speedlim;
#X text 200 5468 control stream speed limiter;
#X obj 30 5495 flow.split;
#X text 200 5495 split data flow by external side-chain predicate;
#X obj 30 5522 flow.stack;
#X text 200 5522 any message stack;
#X obj 30 5549 flow.sync;
#X text 200 5549 bus with only hot inlets;
#X obj 30 5576 flow.sync_pack;
#X text 200 5576 flow pack with all hot inlets;
#X obj 30 5603 flow.tee~;
#X text 200 5603 separate audio and control streams;
#X obj 30 5630 replace;
#X text 200 5630 Replace atoms in data stream;
#X obj 30 5657 route.float;
#X text 200 5657 separate float messages from other types;
#X obj 20 5684 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5725 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5736 flt.biquad~;
#X text 200 5736 second order IIR filter.;
#X obj 30 5763 flt.bpf12~;
#X text 200 5763 Two pole band-pass butterworth filter;
#X obj 30 5790 flt.bpf24~;
#X text 200 5790 Four pole band-pass butterworth filter;
#X obj 30 5817 flt.c_apf;
#X text 200 5817 Allpass filter coefficient calculator for biquad;
#X obj 30 5844 flt.c_bpf~;
#X text 200 5844 BPF coefficient calculator for biquad filter;
#X obj 30 5871 flt.c_highshelf~;
#X text 200 5871 Highshelf filter coefficient calculator for biquad;
#X obj 30 5898 flt.c_hpf;
#X text 200 5898 HPF coefficient calculator for biquad filter;
#X obj 30 5925 flt.c_hpf~;
#X text 200 5925 HPF coefficient calculator for biquad filter;
#X obj 30 5952 flt.c_lowshelf~;
#X text 200 5952 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5979 flt.c_lpf;
#X text 200 5979 LPF coefficient calculator for biquad filter;
#X obj 30 6006 flt.c_lpf~;
#X text 200 6006 LPF coefficient calculator for biquad filter;
#X obj 30 6033 flt.c_notch;
#X text 200 6033 Notch filter coefficient calculator for biquad;
#X obj 30 6060 flt.c_notch~;
#X text 200 6060 Band-reject coefficient calculator for biquad filter;
#X obj 30 6087 flt.c_peak~;
#X text 200 6087 Peaking equalizer calculator for biquad;
#X obj 30 6114 flt.c_pole;
#X text 200 6114 One-pole coefficient calculator for biquad filter;
#X obj 30 6141 flt.dcblock2~;
#X text 200 6141 stereo DC blocker;
#X obj 30 6168 flt.dcblock~;
#X text 200 6168 mono DC blocker;
#X obj 30 6195 flt.eq10~;
#X text 200 6195 graphic 10 band equalizer;
#X obj 30 6222 flt.eq_peak_cq~;
#X text 200 6222 constant-Q second order peaking equalizer section;
#X obj 30 6249 flt.eq_peak~;
#X text 200 6249 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6304 flt.fb_comb~;
#X text 200 6304 feedback comb filter;
#X obj 30 6331 flt.fbank5x1~;
#X text 200 6331 5 band one octave butterworth filterbank;
#X obj 30 6358 flt.ff_comb~;
#X text 200 6358 feed forward comb filter;
#X obj 30 6385 flt.freqz;
#X text 200 6385 compute the frequency response of a digital filter;
#X obj 30 6412 flt.freqz~;
#X text 200 6412 compute the frequency response of a digital filter;
#X obj 30 6439 flt.highshelf~;
#X text 200 6439 gain boost|cut above some frequency;
#X obj 30 6466 flt.hpf12~;
#X text 200 6466 High-pass second order Butterworth filter;
#X obj 30 6493 flt.hpf24~;
#X text 200 6493 High-pass fourth order Butterworth filter;
#X obj 30 6520 flt.lowshelf~;
#X text 200 6520 gain boost|cut below some frequency;
#X obj 30 6547 flt.lpf12~;
#X text 200 6547 Low-pass second order Butterworth filter;
#X obj 30 6574 flt.lpf24~;
#X text 200 6574 Low-pass fourth order Butterworth filter;
#X obj 30 6601 flt.median;
#X text 200 6601 Median control flow filter;
#X obj 30 6628 flt.moog_vcf~;
#X text 200 6628 Moog Voltage Controlled Filter;
#X obj 30 6655 flt.notch~;
#X text 200 6655 band-rejection filter;
#X obj 30 6682 flt.resonbp~;
#X text 200 6682 Simple resonant bandpass filter;
#X obj 20 6709 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6750 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6761 fx.bitdown~;
#X text 200 6761 bit downer and downsampler effect;
#X obj 30 6788 fx.chorus~;
#X text 200 6788 Chorus effect;
#X obj 30 6815 fx.distortion1~;
#X text 200 6815 distortion #1 from Guitarix effects set;
#X obj 30 6842 fx.distortion2~;
#X text 200 6842 distortion #2 from Guitarix effects set;
#X obj 30 6869 fx.distortion3~;
#X text 200 6869 simple distortion #3 from Guitarix effects set;
#X obj 30 6896 fx.distortion~;
#X text 200 6896 cubic nonlinearity distortion;
#X obj 30 6923 fx.drive~;
#X text 200 6923 Guitarix drive effect;
#X obj 30 6950 fx.drone_box~;
#X text 200 6950 mono sympathetic resonance generator;
#X obj 30 6977 fx.echo~;
#X text 200 6977 simple echo effect;
#X obj 30 7004 fx.flanger~;
#X text 200 7004 mono flanging effect;
#X obj 30 7031 fx.freeverb2~;
#X text 200 7031 freeverb2 - stereo version of freeverb;
#X obj 30 7058 fx.freeverb~;
#X text 200 7058 freeverb - common used open-source reverb;
#X obj 30 7085 fx.freqshift~;
#X text 200 7085 frequency shifter or single-sideband ring modulation;
#X obj 30 7112 fx.granulator~;
#X text 200 7112 simple input stream granulator;
#X obj 30 7139 fx.greyhole~;
#X text 200 7139 A complex echo-like effect;
#X obj 30 7166 fx.infrev~;
#X text 200 7166 port of Infinity VST plugin from airwindows;
#X obj 30 7193 fx.looper~;
#X text 200 7193 One track looper;
#X obj 30 7220 fx.pitchshift_s~;
#X text 200 7220 signal version of fx.pitchshift~;
#X obj 30 7247 fx.pitchshift~;
#X text 200 7247 simple pitch shifter based on 2 delay lines;
#X obj 30 7274 fx.sdelay~;
#X text 200 7274 smooth delay with a feedback control;
#X obj 30 7301 fx.vocoder~;
#X text 200 7301 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7341 fx.wahwah~;
#X text 200 7341 digitized CryBaby wah pedal;
#X obj 30 7368 fx.zita_rev1~;
#X text 200 7368 Zita stereo reverb;
#X obj 20 7395 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7436 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7447 global.dict;
#X text 200 7447 global named dict object;
#X obj 30 7474 global.float;
#X text 200 7474 global named float object;
#X obj 30 7501 global.int;
#X text 200 7501 global named integer object;
#X obj 30 7528 global.list;
#X text 200 7528 global named list object;
#X obj 30 7555 global.mlist;
#X text 200 7555 global named mlist object;
#X obj 30 7582 global.set;
#X text 200 7582 global named set object;
#X obj 20 7609 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7650 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7661 hw.apple_smc;
#X text 200 7661 query the system management control in Apples;
#X obj 30 7688 hw.apple_sms;
#X text 200 7688 query the sudden motion sensor in Apples;
#X obj 30 7715 hw.arduino;
#X text 200 7715 Arduino device;
#X obj 30 7742 hw.cpu_temp;
#X text 200 7742 get CPU temperature;
#X obj 30 7769 hw.display;
#X text 200 7769 get/set display properties;
#X obj 30 7796 hw.kbd_light;
#X text 200 7796 Get/set keyboard light on some devices;
#X obj 20 7823 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 7864 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7875 lang.faust~;
#X text 200 7875 faust realtime compilation;
#X obj 20 7902 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7943 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7954 lfo.+pulse~;
#X text 200 7954 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7981 lfo.+saw~;
#X text 200 7981 Positive unit-amplitude low frequency saw wave;
#X obj 30 8008 lfo.+square~;
#X text 200 8008 Positive low frequency square wave;
#X obj 30 8035 lfo.+tri~;
#X text 200 8035 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8062 lfo.impulse~;
#X text 200 8062 Unit-amplitude low-frequency impulse train;
#X obj 30 8089 lfo.pulse~;
#X text 200 8089 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8116 lfo.saw~;
#X text 200 8116 Full-range unit-amplitude low frequency saw;
#X obj 30 8143 lfo.square~;
#X text 200 8143 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8170 lfo.tri~;
#X text 200 8170 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8197 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8238 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8249 list.^at;
#X text 200 8249 on input index(es) outputs list element(s);
#X obj 30 8276 list.^contains;
#X text 200 8276 checks if input atom is found in the list;
#X obj 30 8303 list.^search;
#X text 200 8303 on input atom returns it index in list;
#X obj 30 8330 list.all_of;
#X text 200 8330 checks if all list atoms accepted by predicate;
#X obj 30 8357 list.any_of;
#X text 200 8357 checks if at least one list element is accepted by
predicate;
#X obj 30 8384 list.append;
#X text 200 8384 append atom or list to the end of input list;
#X obj 30 8411 list.apply_to;
#X text 200 8411 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8451 list.at;
#X text 200 8451 outputs list element(s) at specified index(es);
#X obj 30 8478 list.choice;
#X text 200 8478 outputs random element from list;
#X obj 30 8505 list.contains;
#X text 200 8505 checks if input list contains specified atoms;
#X obj 30 8532 list.count;
#X text 200 8532 output the number of items that equal to specified
value;
#X obj 30 8559 list.count_if;
#X text 200 8559 output the number of items that satisfy to external
predicate;
#X obj 30 8586 list.delta;
#X text 200 8586 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8626 list.distribution;
#X text 200 8626 list value distribution;
#X obj 30 8653 list.do;
#X text 200 8653 iterate and modify list contents via side-chain;
#X obj 30 8680 list.each;
#X text 200 8680 maps each list value via external side-chain;
#X obj 30 8707 list.enumerate;
#X text 200 8707 enumerates input list;
#X obj 30 8734 list.equal;
#X text 200 8734 checks if given lists are equal;
#X obj 30 8761 list.first;
#X text 200 8761 returns first list element;
#X obj 30 8788 list.gen;
#X text 200 8788 generates list of specified length via external generator;
#X obj 30 8815 list.histogram;
#X text 200 8815 outputs distribution histogram;
#X obj 30 8842 list.insert;
#X text 200 8842 insert atom or list to the specified position of input
list;
#X obj 30 8869 list.integrator;
#X text 200 8869 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8909 list.last;
#X text 200 8909 output last list element;
#X obj 30 8936 list.length;
#X text 200 8936 output the number of atoms in the list;
#X obj 30 8963 list.max;
#X text 200 8963 output largest element in the list;
#X obj 30 8990 list.mean;
#X text 200 8990 calculates average of list of floats;
#X obj 30 9017 list.min;
#X text 200 9017 returns smallest element in the list;
#X obj 30 9044 list.none_of;
#X text 200 9044 checks if none of list atoms is accepted by predicate;
#X obj 30 9071 list.normalize;
#X text 200 9071 normalizes float list values to get their sum = 1.0;
#X obj 30 9098 list.pass_if;
#X text 200 9098 leave only elements accepted by predicate;
#X obj 30 9125 list.prepend;
#X text 200 9125 prepend atom or list before input list;
#X obj 30 9152 list.product;
#X text 200 9152 calculates product of floats in list;
#X obj 30 9179 list.range;
#X text 200 9179 output list smallest and largest value;
#X obj 30 9206 list.reduce;
#X text 200 9206 apply function of two arguments cumulatively to the
list;
#X obj 30 9233 list.remove;
#X text 200 9233 remove list element(s) at specified positions;
#X obj 30 9260 list.remove_if;
#X text 200 9260 remove elements by predicate;
#X obj 30 9287 list.repack;
#X text 200 9287 repack list to specified size;
#X obj 30 9314 list.repeat;
#X text 200 9314 output new list by repeating input list specified
times;
#X obj 30 9341 list.resample;
#X text 200 9341 resample list with specified ratio;
#X obj 30 9368 list.resize;
#X text 200 9368 changes list size;
#X obj 30 9395 list.reverse;
#X text 200 9395 reverses the order of the elements in the list;
#X obj 30 9422 list.rldecode;
#X text 200 9422 Run-length list decoder (RLE);
#X obj 30 9449 list.rlencode;
#X text 200 9449 RLE (run-length encoding) for lists;
#X obj 30 9476 list.rotate;
#X text 200 9476 rotates list;
#X obj 30 9503 list.route;
#X text 200 9503 acts like [route] but for lists;
#X obj 30 9530 list.search;
#X text 200 9530 search specified items in input list;
#X obj 30 9557 list.separate;
#X text 200 9557 sends list elements one by one separately;
#X obj 30 9584 list.seq;
#X text 200 9584 numeric sequence list generator;
#X obj 30 9611 list.set;
#X text 200 9611 set list value at specified position;
#X obj 30 9638 list.shift;
#X text 200 9638 shifts the contents of the list with linear interpolation;
#X obj 30 9665 list.shuffle;
#X text 200 9665 randomly rearranges elements in list;
#X obj 30 9692 list.slice;
#X text 200 9692 extract sublist;
#X obj 30 9719 list.sort;
#X text 200 9719 sorts list values by ascending order;
#X obj 30 9746 list.sort_with;
#X text 200 9746 sort list with user defined side-chain;
#X obj 30 9773 list.split;
#X text 200 9773 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9813 list.stretch;
#X text 200 9813 stretches list - changes its size with linear interpolation;
#X obj 30 9840 list.sum;
#X text 200 9840 calculates sum of floats in list;
#X obj 30 9867 list.unique;
#X text 200 9867 removes duplicates from input list;
#X obj 30 9894 list.unpack;
#X text 200 9894 unpack list elements to separate outlets;
#X obj 30 9921 list.unzip;
#X text 200 9921 splits list to N lists \, each to separate output;
#X obj 30 9948 list.walk;
#X text 200 9948 Walks thru the list;
#X obj 30 9975 list.zip;
#X text 200 9975 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10030 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10071 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10082 live.capture~;
#X text 200 10082 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10122 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10163 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10174 local.dict;
#X text 200 10174 local named dict object;
#X obj 30 10201 local.float;
#X text 200 10201 canvas-scoped named float variable;
#X obj 30 10228 local.int;
#X text 200 10228 canvas-scoped named integer variable;
#X obj 30 10255 local.list;
#X text 200 10255 local named list object;
#X obj 30 10282 local.mlist;
#X text 200 10282 local named mlist object;
#X obj 30 10309 local.set;
#X text 200 10309 local named set object;
#X obj 20 10336 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10377 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10388 math.abs;
#X text 200 10388 absolute value function;
#X obj 30 10415 math.abs~;
#X text 200 10415 absolute value function for signals;
#X obj 30 10442 math.acos;
#X text 200 10442 arc cosine function;
#X obj 30 10469 math.acosh;
#X text 200 10469 inverse hyperbolic cosine function;
#X obj 30 10496 math.acosh~;
#X text 200 10496 hyperbolic arc cosine for signals;
#X obj 30 10523 math.acos~;
#X text 200 10523 arc cosine function for signals;
#X obj 30 10550 math.and;
#X text 200 10550 operation AND for multiple arguments;
#X obj 30 10577 math.approx;
#X text 200 10577 check if input value approximately equal to pattern;
#X obj 30 10604 math.asin;
#X text 200 10604 arc sine function;
#X obj 30 10631 math.asinh;
#X text 200 10631 inverse hyperbolic sine function;
#X obj 30 10658 math.asinh~;
#X text 200 10658 hyperbolic arc sine for signals;
#X obj 30 10685 math.asin~;
#X text 200 10685 arc sine for signals;
#X obj 30 10712 math.atan;
#X text 200 10712 arc tangent function;
#X obj 30 10739 math.atanh;
#X text 200 10739 inverse hyperbolic tangent function;
#X obj 30 10766 math.atanh~;
#X text 200 10766 hyperbolic arc tangent for signals;
#X obj 30 10793 math.atan~;
#X text 200 10793 arc tangent for signals;
#X obj 30 10820 math.cabs~;
#X text 200 10820 magnitude of a complex signals;
#X obj 30 10847 math.carg~;
#X text 200 10847 phase angle of a complex signals;
#X obj 30 10874 math.cbrt;
#X text 200 10874 cube root function;
#X obj 30 10901 math.cbrt~;
#X text 200 10901 cube root function for signals;
#X obj 30 10928 math.cdiv~;
#X text 200 10928 division of complex signals;
#X obj 30 10955 math.ceil;
#X text 200 10955 round to smallest integral value not less than input
value;
#X obj 30 10982 math.ceil~;
#X text 200 10982 round to smallest integral value not less than input
value;
#X obj 30 11009 math.cexp~;
#X text 200 11009 exponent of a complex signals;
#X obj 30 11036 math.cmul~;
#X text 200 11036 multiplication of complex signals;
#X obj 30 11063 math.cos;
#X text 200 11063 cosine function;
#X obj 30 11090 math.cosh;
#X text 200 11090 hyperbolic cosine function;
#X obj 30 11117 math.cosh~;
#X text 200 11117 hyperbolic cosine for signals;
#X obj 30 11144 math.cos~;
#X text 200 11144 cosine function;
#X obj 30 11171 math.div;
#X text 200 11171 division (on lists too);
#X obj 30 11198 math.e;
#X text 200 11198 mathematical constant \, base of the natural logarithm;
#X obj 30 11225 math.erf;
#X text 200 11225 error function;
#X obj 30 11252 math.erf~;
#X text 200 11252 error function for signals;
#X obj 30 11279 math.exp;
#X text 200 11279 exponential functions;
#X obj 30 11306 math.exp2;
#X text 200 11306 exponential functions;
#X obj 30 11333 math.exp2~;
#X text 200 11333 base-2 exponential for signal;
#X obj 30 11360 math.expr;
#X text 200 11360 dynamic [expr];
#X obj 30 11387 math.exp~;
#X text 200 11387 base-e exponential for signal;
#X obj 30 11414 math.floor;
#X text 200 11414 round to largest integral value not greater than
x;
#X obj 30 11441 math.floor~;
#X text 200 11441 round to largest integral value not greater than
x;
#X obj 30 11468 math.gamma;
#X text 200 11468 gamma function;
#X obj 30 11495 math.gamma~;
#X text 200 11495 gamma function for floating point signals;
#X obj 30 11522 math.gcd;
#X text 200 11522 calculate greatest common divisor;
#X obj 30 11549 math.inf;
#X text 200 11549 infinity value that cannot be represented accurately;
#X obj 30 11576 math.inf~;
#X text 200 11576 inifinity signal generator;
#X obj 30 11603 math.lcm;
#X text 200 11603 calculate least common multiple;
#X obj 30 11630 math.lgamma;
#X text 200 11630 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11657 math.lgamma~;
#X text 200 11657 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11697 math.log;
#X text 200 11697 natural logarithm;
#X obj 30 11724 math.log10;
#X text 200 11724 logarithm functions;
#X obj 30 11751 math.log10~;
#X text 200 11751 natural logarithm;
#X obj 30 11778 math.log2;
#X text 200 11778 logarithm functions;
#X obj 30 11805 math.log2~;
#X text 200 11805 base-2 logarithm;
#X obj 30 11832 math.log~;
#X text 200 11832 natural logarithm;
#X obj 30 11859 math.mul;
#X text 200 11859 multiplication (on lists too);
#X obj 30 11886 math.nan;
#X text 200 11886 Not a Number \, unrepresentable value;
#X obj 30 11913 math.nan~;
#X text 200 11913 signal NaN;
#X obj 30 11940 math.neg;
#X text 200 11940 negate function;
#X obj 30 11967 math.or;
#X text 200 11967 operation OR for multiple arguments;
#X obj 30 11994 math.pi;
#X text 200 11994 mathematical constant;
#X obj 30 12021 math.pi~;
#X text 200 12021 mathematical constant;
#X obj 30 12048 math.polyeval;
#X text 200 12048 evaluates the polynomial described by the coefficients
list;
#X obj 30 12075 math.reciprocal;
#X text 200 12075 calculate reciprocal number;
#X obj 30 12102 math.reciprocal~;
#X text 200 12102 calculate reciprocal number for signals;
#X obj 30 12129 math.round;
#X text 200 12129 round to integral value \, regardless of rounding
direction;
#X obj 30 12156 math.round~;
#X text 200 12156 signal round;
#X obj 30 12183 math.sign;
#X text 200 12183 sign function;
#X obj 30 12210 math.sin;
#X text 200 12210 sine function;
#X obj 30 12237 math.sinh;
#X text 200 12237 hyperbolic sine function;
#X obj 30 12264 math.sinh~;
#X text 200 12264 hyperbolic sine for signals;
#X obj 30 12291 math.sin~;
#X text 200 12291 sine function;
#X obj 30 12318 math.sqrt;
#X text 200 12318 square root function;
#X obj 30 12345 math.sqrt~;
#X text 200 12345 square root for signal;
#X obj 30 12372 math.squared;
#X text 200 12372 value square;
#X obj 30 12399 math.squared~;
#X text 200 12399 signal value square;
#X obj 30 12426 math.sync_add;
#X text 200 12426 sync addition;
#X obj 30 12453 math.sync_and;
#X text 200 12453 sync logical AND operation;
#X obj 30 12480 math.sync_div;
#X text 200 12480 sync division;
#X obj 30 12507 math.sync_eq;
#X text 200 12507 sync equal numbers check;
#X obj 30 12534 math.sync_ge;
#X text 200 12534 sync greater equal numbers compare;
#X obj 30 12561 math.sync_gt;
#X text 200 12561 sync greater then numbers compare;
#X obj 30 12588 math.sync_le;
#X text 200 12588 sync less equal numbers compare;
#X obj 30 12615 math.sync_lshift;
#X text 200 12615 sync signed bit left shift;
#X obj 30 12642 math.sync_lt;
#X text 200 12642 sync less then numbers compare;
#X obj 30 12669 math.sync_mod;
#X text 200 12669 sync remainder of modulo division (float or integer);
#X obj 30 12696 math.sync_mul;
#X text 200 12696 sync multiplication;
#X obj 30 12723 math.sync_ne;
#X text 200 12723 sync numbers for not equality;
#X obj 30 12750 math.sync_or;
#X text 200 12750 sync logical OR operation;
#X obj 30 12777 math.sync_rshift;
#X text 200 12777 sync signed bit right shift;
#X obj 30 12804 math.sync_sub;
#X text 200 12804 sync subtraction;
#X obj 30 12831 math.sync_xor;
#X text 200 12831 sync logical XOR operation;
#X obj 30 12858 math.tan;
#X text 200 12858 tangent function;
#X obj 30 12885 math.tanh;
#X text 200 12885 hyperbolic tangent function;
#X obj 30 12912 math.tanh~;
#X text 200 12912 hyperbolic tangent for signals;
#X obj 30 12939 math.tan~;
#X text 200 12939 tangent function;
#X obj 30 12966 math.trunc;
#X text 200 12966 truncate to integer value;
#X obj 30 12993 math.trunc~;
#X text 200 12993 truncate to integer value;
#X obj 20 13020 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13061 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13072 midi.cc;
#X text 200 13072 enhanced version of vanilla ctlin;
#X obj 30 13099 midi.clock;
#X text 200 13099 midi clock toolbox;
#X obj 30 13126 midi.ctl2str;
#X text 200 13126 convert Standard MIDI Controllers number to name;
#X obj 30 13153 midi.event2ctl;
#X text 200 13153 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13180 midi.event2note;
#X text 200 13180 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13207 midi.event2prg;
#X text 200 13207 convert MidiEvent message to midi program change
value;
#X obj 30 13234 midi.file;
#X text 200 13234 standard midi file SMF reader and writer;
#X obj 30 13261 midi.kbd;
#X text 200 13261 computer keyboard midi;
#X obj 30 13288 midi.key2str;
#X text 200 13288 convert key number to SPN name according to tonality;
#X obj 30 13315 midi.oct;
#X text 200 13315 midi octave transpose;
#X obj 30 13342 midi.prg2str;
#X text 200 13342 convert GM Instrument number to name (string or symbol);
#X obj 30 13369 midi.sustain;
#X text 200 13369 sustain pedal emulation;
#X obj 30 13396 midi.sysex;
#X text 200 13396 sysex input messages as list;
#X obj 30 13423 midi.track;
#X text 200 13423 extract track from MidiFile;
#X obj 30 13450 midi.tuning;
#X text 200 13450 apply tuning to midi messages;
#X obj 30 13477 midi.vramp;
#X text 200 13477 apply crescendo or diminuendo for midi message flow;
#X obj 30 13504 midi.vrand;
#X text 200 13504 midi velocity randomizer;
#X obj 20 13531 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13572 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13583 click~;
#X text 200 13583 Output single impulse on bang;
#X obj 30 13610 fluid~;
#X text 200 13610 FluidSynth SoundFont 2 player;
#X obj 30 13637 modplug~;
#X text 200 13637 MOD file player (using libmodplug);
#X obj 30 13664 speech.flite;
#X text 200 13664 render speech to array;
#X obj 20 13691 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13732 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13743 loadexpr;
#X text 200 13743 send message when patch loads;
#X obj 30 13770 msg;
#X text 200 13770 message constructor;
#X obj 30 13797 msg.after;
#X text 200 13797 send specified message after incoming message;
#X obj 30 13824 msg.onload;
#X text 200 13824 send message when patch loads;
#X obj 20 13851 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13892 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13903 net.host2ip;
#X text 200 13903 returns IP address by DNS name;
#X obj 20 13930 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13971 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13982 noise.baker;
#X text 200 13982 Part of a-chaos library;
#X obj 30 14009 noise.clifford;
#X text 200 14009 Part of a-chaos library;
#X obj 30 14036 noise.collatz;
#X text 200 14036 Part of a-chaos library;
#X obj 30 14063 noise.crackle~;
#X text 200 14063 sparse noise generator;
#X obj 30 14090 noise.duffing;
#X text 200 14090 Part of a-chaos library;
#X obj 30 14117 noise.ginger;
#X text 200 14117 Gingerbreadman map chaotic generator;
#X obj 30 14144 noise.henon;
#X text 200 14144 Part of a-chaos library;
#X obj 30 14171 noise.henon_heilles;
#X text 200 14171 Part of a-chaos library;
#X obj 30 14198 noise.henon_phase;
#X text 200 14198 Part of a-chaos library;
#X obj 30 14225 noise.henonf;
#X text 200 14225 Part of a-chaos library;
#X obj 30 14252 noise.ikeda;
#X text 200 14252 Part of a-chaos library;
#X obj 30 14279 noise.lfreq0~;
#X text 200 14279 sampled/held noise (piecewise constant);
#X obj 30 14306 noise.lfreq~;
#X text 200 14306 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14333 noise.lorenz;
#X text 200 14333 Part of a-chaos library;
#X obj 30 14360 noise.lyapunov;
#X text 200 14360 Part of a-chaos library;
#X obj 30 14387 noise.navier_stokes;
#X text 200 14387 Part of a-chaos library;
#X obj 30 14414 noise.pink~;
#X text 200 14414 Pink noise generator;
#X obj 30 14441 noise.rossler;
#X text 200 14441 Part of a-chaos library;
#X obj 30 14468 noise.stein;
#X text 200 14468 Part of a-chaos library;
#X obj 30 14495 noise.torus;
#X text 200 14495 Part of a-chaos library;
#X obj 30 14522 noise.verhulst;
#X text 200 14522 Part of a-chaos library;
#X obj 30 14549 noise.white~;
#X text 200 14549 White noise generator;
#X obj 20 14576 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14617 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14628 osc.blit~;
#X text 200 14628 Bandlimited impulse train oscillator;
#X obj 30 14655 osc.impulse~;
#X text 200 14655 Bandlimited impulse train generator;
#X obj 30 14682 osc.pulse~;
#X text 200 14682 Bandlimited pulse train oscillator;
#X obj 30 14709 osc.saw4~;
#X text 200 14709 Bandlimited sawtooth wave;
#X obj 30 14736 osc.saw~;
#X text 200 14736 Alias-free sawtooth wave;
#X obj 30 14763 osc.sinfb~;
#X text 200 14763 Sine oscilator with feedback;
#X obj 30 14790 osc.sin~;
#X text 200 14790 Sine wave oscillator;
#X obj 30 14817 osc.square~;
#X text 200 14817 Bandlimited square wave oscillator;
#X obj 30 14844 osc.tri~;
#X text 200 14844 Bandlimited triangle wave oscillator;
#X obj 20 14871 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14912 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14923 canvas.current;
#X text 200 14923 verbose information about current canvas;
#X obj 30 14950 canvas.dir;
#X text 200 14950 current canvas directory;
#X obj 30 14977 canvas.name;
#X text 200 14977 current canvas name;
#X obj 30 15004 canvas.path;
#X text 200 15004 current canvas fullpath;
#X obj 30 15031 canvas.top;
#X text 200 15031 verbose information about top-level canvas;
#X obj 30 15058 patch.args;
#X text 200 15058 Get patch or subpatch arguments;
#X obj 30 15085 patch.deps;
#X text 200 15085 patch dependencies: used objects and abstractions;
#X obj 30 15112 patch.tree;
#X text 200 15112 patch tree;
#X obj 20 15139 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15180 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15191 path.basename;
#X text 200 15191 outputs filename portion of pathname;
#X obj 30 15218 path.dirname;
#X text 200 15218 outputs directory portion of pathname;
#X obj 30 15245 path.exists;
#X text 200 15245 checks if given path exists;
#X obj 30 15272 path.is_dir;
#X text 200 15272 check if path is directory;
#X obj 30 15299 path.lsdir;
#X text 200 15299 list directory contents;
#X obj 20 15326 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15367 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15378 is_any;
#X text 200 15378 checks if input data has *any* type;
#X obj 30 15405 is_bang;
#X text 200 15405 checks if input data has *bang* type;
#X obj 30 15432 is_data;
#X text 200 15432 checks if input data has *data* type;
#X obj 30 15459 is_dict;
#X text 200 15459 checks if input data has *dict* type;
#X obj 30 15486 is_even;
#X text 200 15486 checks if input number is even;
#X obj 30 15513 is_file;
#X text 200 15513 checks if file exists and accessible;
#X obj 30 15540 is_float;
#X text 200 15540 checks if input data has *float* type;
#X obj 30 15567 is_list;
#X text 200 15567 checks if input data has *list* type;
#X obj 30 15594 is_odd;
#X text 200 15594 checks if input number is odd;
#X obj 30 15621 is_pointer;
#X text 200 15621 checks if input data has *pointer* type;
#X obj 30 15648 is_symbol;
#X text 200 15648 checks if input data has *symbol* type;
#X obj 20 15675 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15716 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15727 preset.float;
#X text 200 15727 load/store float preset;
#X obj 30 15754 preset.list;
#X text 200 15754 load/store symbol preset;
#X obj 30 15781 preset.storage;
#X text 200 15781 preset storage control;
#X obj 30 15808 preset.symbol;
#X text 200 15808 load/store symbol preset;
#X obj 20 15835 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15876 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15887 patch.props;
#X text 200 15887 patch properties manager;
#X obj 30 15914 prop;
#X text 200 15914 get/set named property value for subpatch or abstraction;
#X obj 30 15941 prop.declare;
#X text 200 15941 declare named property for subpatch or abstraction;
#X obj 30 15968 prop.get;
#X text 200 15968 get property from connected object/subpatch/abstraction;
#X obj 30 15995 prop.get~;
#X text 200 15995 Property extractor from sound stream;
#X obj 30 16022 prop.join;
#X text 200 16022 join property to main data flow;
#X obj 30 16049 prop.set;
#X text 200 16049 set object property;
#X obj 30 16076 prop.split;
#X text 200 16076 separate properties from dataflow;
#X obj 20 16103 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16144 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16155 proto.firmata;
#X text 200 16155 Firmata Arduino protocol support;
#X obj 30 16182 proto.midi;
#X text 200 16182 raw midi encoder/parser;
#X obj 30 16209 proto.sp.alpaca;
#X text 200 16209 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16236 proto.xtouch_ext;
#X text 200 16236 Behringer XTouch Extender XMidi protocol;
#X obj 20 16263 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16304 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16315 random.atom;
#X text 200 16315 weighted atom generation from specified list;
#X obj 30 16342 random.discrete;
#X text 200 16342 random weighted integers on interval [0 \, n);
#X obj 30 16369 random.float;
#X text 200 16369 uniform random float generator in specified range;
#X obj 30 16396 random.gauss;
#X text 200 16396 gaussian random distribution;
#X obj 30 16423 random.int;
#X text 200 16423 uniform random integer generator in specified range;
#X obj 30 16450 random.linear;
#X text 200 16450 random linear distribution;
#X obj 30 16477 random.pw_const;
#X text 200 16477 piecewise constant random distribution;
#X obj 30 16504 random.pw_lin;
#X text 200 16504 piecewise linear random distribution;
#X obj 20 16531 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16572 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16583 seq.arp;
#X text 200 16583 sequence arpeggiator;
#X obj 30 16610 seq.bangs;
#X text 200 16610 bang sequencer;
#X obj 30 16637 seq.counter;
#X text 200 16637 modulo counter;
#X obj 30 16664 seq.matrix;
#X text 200 16664 sequencer control for ui.matrix;
#X obj 30 16691 seq.nbangs;
#X text 200 16691 output specified number of bang with time intervals;
#X obj 30 16718 seq.phasor;
#X text 200 16718 control rate phasor (saw) generator;
#X obj 30 16745 seq.toggles;
#X text 200 16745 toggle sequencer;
#X obj 30 16772 sequencer;
#X text 200 16772 basic sequence player;
#X obj 20 16799 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16840 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16851 snd.file;
#X text 200 16851 Sound file loader on steroids;
#X obj 20 16878 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 16919 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16930 hoa.2d.decoder~;
#X text 200 16930 hoa 2d decoder;
#X obj 30 16957 hoa.2d.encoder~;
#X text 200 16957 hoa 2d encoder;
#X obj 30 16984 hoa.2d.map~;
#X text 200 16984 a 2d ambisonic multisource spatializer;
#X obj 30 17011 hoa.2d.optim~;
#X text 200 17011 a 2D ambisonic optimization tool;
#X obj 30 17038 hoa.2d.projector~;
#X text 200 17038 a plane waves decomposer from circular harmonics
domain;
#X obj 30 17065 hoa.2d.recomposer~;
#X text 200 17065 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 17105 hoa.2d.rotate~;
#X text 200 17105 a 2D ambisonic sound field rotation;
#X obj 30 17132 hoa.2d.wider~;
#X text 200 17132 a 2d fractional ambisonic order simulator;
#X obj 30 17159 hoa.@process;
#X text 200 17159 process properties manager for hoa.process~;
#X obj 30 17186 hoa.in;
#X text 200 17186 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17213 hoa.in~;
#X text 200 17213 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17240 hoa.out;
#X text 200 17240 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17267 hoa.out~;
#X text 200 17267 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17294 hoa.process~;
#X text 200 17294 patcher loader for multichannel processing;
#X obj 30 17324 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17321 a 2d ambisonic harmonic scope;
#X obj 30 17346 pan.cos~;
#X text 200 17346 two channel equal power sine/cosine panner;
#X obj 30 17373 pan.linsig~;
#X text 200 17373 two channel linear panner with signal control;
#X obj 30 17400 pan.lin~;
#X text 200 17400 two channel linear panner;
#X obj 30 17427 pan.spread~;
#X text 200 17427 spreads input channels across the stereo field;
#X obj 30 17454 pan.sqrt~;
#X text 200 17454 two channel equal power square root panner;
#X obj 30 17481 spat.pan4~;
#X text 200 17481 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17508 spat.pan8~;
#X text 200 17508 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17535 spat.zita6x8~;
#X text 200 17535 spat with 6 inputs sources to 8 channel output;
#X obj 20 17562 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17603 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17614 string;
#X text 200 17614 string constructor;
#X obj 30 17641 string.contains;
#X text 200 17641 checks if string contains specified substring;
#X obj 30 17668 string.ends_with;
#X text 200 17668 checks if string ends with specified substring;
#X obj 30 17695 string.equal;
#X text 200 17695 check strings or symbols for equality;
#X obj 30 17722 string.format;
#X text 200 17722 formats string like printf.;
#X obj 30 17749 string.join;
#X text 200 17749 joins (concatenates) strings with separator;
#X obj 30 17776 string.length;
#X text 200 17776 number of characters in string (unicode supported);
#X obj 30 17803 string.match;
#X text 200 17803 check if string match regular expression;
#X obj 30 17830 string.remove;
#X text 200 17830 remove substring from input string;
#X obj 30 17857 string.replace;
#X text 200 17857 replace from one substring to another in input string;
#X obj 30 17884 string.split;
#X text 200 17884 split string by separator;
#X obj 30 17911 string.starts_with;
#X text 200 17911 checks if string starts with specified substring;
#X obj 30 17938 string.substr;
#X text 200 17938 extract substring from input string;
#X obj 30 17965 string2symbol;
#X text 200 17965 converts string to symbol;
#X obj 20 17992 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18033 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18044 symbol.equal;
#X text 200 18044 check symbols for equality;
#X obj 30 18071 symbol.length;
#X text 200 18071 number of characters in symbol (unicode supported);
#X obj 30 18098 symbol.num_compare;
#X text 200 18098 numeric symbol compare;
#X obj 30 18125 symbol2any;
#X text 200 18125 converts symbol to message;
#X obj 30 18152 symbol2intlist;
#X text 200 18152 converts symbol to list of character codes;
#X obj 20 18179 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18220 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18231 synth.bee3~;
#X text 200 18231 Hammond-oid organ FM synthesis instrument;
#X obj 30 18258 synth.birds~;
#X text 200 18258 bird singing generator;
#X obj 30 18285 synth.church_bell~;
#X text 200 18285 generic church bell modal model;
#X obj 30 18312 synth.dubdub~;
#X text 200 18312 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18352 synth.dx7~;
#X text 200 18352 FAUST dx7 implementation;
#X obj 30 18379 synth.eguitar~;
#X text 200 18379 simple electric guitar model with steel strings;
#X obj 30 18406 synth.fgrain~;
#X text 200 18406 file granulator from STK;
#X obj 30 18433 synth.glass_harm~;
#X text 200 18433 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 18460 synth.glitch~;
#X text 200 18460 Glitch synthesizer by naivesound;
#X obj 30 18487 synth.harpsichord~;
#X text 200 18487 waveguide commuted harpsichord;
#X obj 30 18514 synth.ks~;
#X text 200 18514 Karplus-Strong string;
#X obj 30 18541 synth.marimba~;
#X text 200 18541 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18581 synth.piano~;
#X text 200 18581 waveguide commuted piano;
#X obj 30 18608 synth.rhodey~;
#X text 200 18608 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18635 synth.risset_arp~;
#X text 200 18635 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18662 synth.risset_tone~;
#X text 200 18662 Jean Claude Risset's endless glissando;
#X obj 30 18689 synth.russian_bell~;
#X text 200 18689 russian church bell modal model;
#X obj 30 18716 synth.shakers~;
#X text 200 18716 various percussion sounds from STK library;
#X obj 30 18743 synth.sitar~;
#X text 200 18743 STK sitar;
#X obj 30 18770 synth.wurley~;
#X text 200 18770 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18797 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18838 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18849 system.colorpanel;
#X text 200 18849 System color panel dialog popup;
#X obj 30 18876 system.cursor;
#X text 200 18876 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 18903 system.exec;
#X text 200 18903 run external command in separate process;
#X obj 30 18930 system.exit;
#X text 200 18930 quit PureData;
#X obj 30 18957 system.getenv;
#X text 200 18957 Get system environment variables;
#X obj 30 18984 system.hostname;
#X text 200 18984 outputs system hostname;
#X obj 30 19011 system.memsize;
#X text 200 19011 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 19051 system.memused;
#X text 200 19051 returns the process physical memory use - current
and peak;
#X obj 30 19078 system.screen_size;
#X text 200 19078 returns current screen size in pixels;
#X obj 20 19105 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 19146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19157 tl.bang;
#X text 200 19157 Timeline bang (with possible delay);
#X obj 30 19187 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 19184 Timeline section;
#X obj 30 19209 tl.timeline;
#X text 200 19209 Timeline - event scheduler;
#X obj 30 19236 tl.toggle;
#X text 200 19236 Timeline bang;
#X obj 30 19263 tl.transport;
#X text 200 19263 Timeline transport control;
#X obj 20 19290 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19331 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19345 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19342 array view with cursor and selection;
#X obj 30 19370 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19367 A bang... that's all;
#X obj 30 19395 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19392 button widget;
#X obj 30 19420 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19417 colorchooser widget;
#X obj 30 19445 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19442 Display GUI object;
#X obj 30 19470 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19467 GUI for turning DSP on/off;
#X obj 30 19495 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19492 envelope editor widget;
#X obj 30 19520 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 19517 UI filter object calculator for biquad filter;
#X obj 30 19545 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19542 UI filter object based on biquad filter;
#X obj 30 19570 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19567 UI stereo gain control;
#X obj 30 19595 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19592 UI gain control;
#X obj 30 19620 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19617 simple icon with button capabilities;
#X obj 30 19645 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19642 value increment/decrement;
#X obj 30 19670 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19667 keyboard widget;
#X obj 30 19695 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19692 knob widget;
#X obj 30 19720 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19717 simple label widget;
#X obj 30 19745 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19742 Hyperlink widget;
#X obj 30 19770 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19767 The matrix of toggles has you.;
#X obj 30 19795 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19792 Dropdown menu;
#X obj 30 19820 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19817 Shows peak and rms signal level;
#X obj 30 19845 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19842 incoming MIDI message viewport;
#X obj 30 19870 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19867 filter mouse events from ui objects;
#X obj 30 19895 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19892 routes mouse events from ui objects;
#X obj 30 19920 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 19917 counterpart of the vanilla [nbx];
#X obj 30 19945 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 19942 counterpart of the vanilla [nbx] for signal;
#X obj 30 19970 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 19967 signal plotter;
#X obj 30 19995 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 19992 2D slider in polar coordinates;
#X obj 30 20020 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 20017 Preset manager;
#X obj 30 20045 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 20042 counterpart of the vanilla radio toggle;
#X obj 30 20070 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 20067 range slider;
#X obj 30 20095 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 20092 Scope GUI object;
#X obj 30 20120 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 20117 counterpart of the vanilla slider;
#X obj 30 20145 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 20142 2D slider widget;
#X obj 30 20170 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 20167 Multiple slider widget;
#X obj 30 20195 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 20192 Spectroscope GUI object;
#X obj 30 20220 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20217 displays a list of text buttons or text toggles;
#X obj 30 20245 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20242 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20267 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20267 version: v0.9.2 \, license: GPL3;
#X obj 20 20295 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20318 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20282 msg 0;
#X obj 670 20317 switch~;
#X connect 1408 0 1409 0;