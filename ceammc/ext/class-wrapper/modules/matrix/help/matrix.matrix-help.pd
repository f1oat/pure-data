#N canvas 0 0 715 500 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title matrix @url matrix-help.pd;
#X obj 30 116 matrix.!=;
#X text 175 116 element-wise matrix not equal comparasion;
#X obj 30 143 matrix.<;
#X text 175 143 element-wise less then comparasion;
#X obj 30 170 matrix.<=;
#X text 175 170 element-wise less equal comparasion;
#X obj 30 197 matrix.==;
#X text 175 197 element-wise matrix equal comparasion;
#X obj 30 224 matrix.>;
#X text 175 224 element-wise greater then comparasion;
#X obj 30 251 matrix.>=;
#X text 175 251 element-wise greater equal comparasion;
#X obj 30 278 matrix.abs;
#X text 175 278 calc abs value for each matrix element;
#X obj 30 305 matrix.accu;
#X text 175 305 accumulate (sum) all elements of matrix;
#X obj 30 332 matrix.acos;
#X text 175 332 element-wise acrcosine;
#X obj 30 359 matrix.acosh;
#X text 175 359 element-wise hyperbolic acrcosine;
#X obj 30 386 matrix.add;
#X text 175 386 element-wise matrix addition;
#X obj 30 413 matrix.all;
#X text 175 413 check if all elements of the matrix are non-zero;
#X obj 30 440 matrix.all_col;
#X text 175 440 row with each element (0 or 1) indicating whether the
corresponding column has all non-zero elements;
#X obj 30 477 matrix.all_row;
#X text 175 477 column with each element (0 or 1) indicating whether
the corresponding row has all non-zero elements;
#X obj 30 514 matrix.any;
#X text 175 514 check if any elements of the matrix are non-zero;
#X obj 30 541 matrix.any_col;
#X text 175 541 row with each element (0 or 1) indicating whether the
corresponding column has any non-zero elements;
#X obj 30 578 matrix.any_row;
#X text 175 578 column with each element (0 or 1) indicating whether
the corresponding row has any non-zero elements;
#X obj 30 615 matrix.asin;
#X text 175 615 element-wise acrsine;
#X obj 30 642 matrix.asinh;
#X text 175 642 element-wise hyperbolic acrsine;
#X obj 30 669 matrix.at;
#X text 175 669 select matrix element at specified position;
#X obj 30 696 matrix.atan;
#X text 175 696 element-wise arctangent;
#X obj 30 723 matrix.atanh;
#X text 175 723 element-wise hyperbolic acrtangent;
#X obj 30 750 matrix.clip;
#X text 175 750 clip matrix value to range [min \, max];
#X obj 30 777 matrix.col;
#X text 175 777 create Matrix column with specified values;
#X obj 30 804 matrix.col_at;
#X text 175 804 get specified column;
#X obj 30 831 matrix.conv2;
#X text 175 831 2D matrix convolution;
#X obj 30 858 matrix.cos;
#X text 175 858 element-wise cosine;
#X obj 30 885 matrix.cosh;
#X text 175 885 element-wise hyperbolic cosine;
#X obj 30 912 matrix.det;
#X text 175 912 determinant of square matrix;
#X obj 30 939 matrix.diag;
#X text 175 939 get matrix diagonals;
#X obj 30 966 matrix.div;
#X text 175 966 element-wise matrix division;
#X obj 30 993 matrix.exp;
#X text 175 993 element-wise base-e exponent: e^x;
#X obj 30 1020 matrix.exp10;
#X text 175 1020 element-wise base-10 exponent: 10^x;
#X obj 30 1047 matrix.exp2;
#X text 175 1047 element-wise base-2 exponent: 2^x;
#X obj 30 1074 matrix.fill;
#X text 175 1074 fill input Matrix with value;
#X obj 30 1101 matrix.from_list;
#X text 175 1101 create Matrix from list values;
#X obj 30 1128 matrix.full;
#X text 175 1128 create Matrix filled with specified value;
#X obj 30 1155 matrix.hist;
#X text 175 1155 produce a matrix containing column histogram counts;
#X obj 30 1182 matrix.identity;
#X text 175 1182 create identity Matrix;
#X obj 30 1209 matrix.insert_col;
#X text 175 1209 insert vector at specified matrix column;
#X obj 30 1236 matrix.insert_row;
#X text 175 1236 insert vector at specified matrix row;
#X obj 30 1263 matrix.inverse;
#X text 175 1263 inverse square matrix;
#X obj 30 1290 matrix.linspace;
#X text 175 1290 generate row with linearly spaced N elements;
#X obj 30 1317 matrix.load;
#X text 175 1317 load matrix from CSV format;
#X obj 30 1344 matrix.logspace;
#X text 175 1344 generate row with N elements spaced logarithmically;
#X obj 30 1371 matrix.matmul;
#X text 175 1371 matrix product;
#X obj 30 1398 matrix.max;
#X text 175 1398 returns maximum in Matrix;
#X obj 30 1425 matrix.mean;
#X text 175 1425 mean matrix value;
#X obj 30 1452 matrix.mean_col;
#X text 175 1452 mean value for each matrix column;
#X obj 30 1479 matrix.mean_row;
#X text 175 1479 mean value for each matrix row;
#X obj 30 1506 matrix.median;
#X text 175 1506 median matrix value;
#X obj 30 1533 matrix.median_col;
#X text 175 1533 median matrix value for each column;
#X obj 30 1560 matrix.median_row;
#X text 175 1560 median matrix value for each row;
#X obj 30 1587 matrix.min;
#X text 175 1587 returns minimum value in Matrix;
#X obj 30 1614 matrix.mul;
#X text 175 1614 element-wise matrix multiplication;
#X obj 30 1641 matrix.ncols;
#X text 175 1641 return number of columns in Matrix;
#X obj 30 1668 matrix.new;
#X text 175 1668 Matrix data type;
#X obj 30 1695 matrix.nrows;
#X text 175 1695 return number of rows in Matrix;
#X obj 30 1722 matrix.ones;
#X text 175 1722 create Matrix with ones;
#X obj 30 1749 matrix.ones_like;
#X text 175 1749 create Matrix filled with ones with the same shape as
input;
#X obj 30 1776 matrix.randn;
#X text 175 1776 generates Matrix using Gaussian distribution with
zero mean and unit variance;
#X obj 30 1813 matrix.randu;
#X text 175 1813 generates Matrix with uniform distribution [0-1];
#X obj 30 1840 matrix.range;
#X text 175 1840 matrix range (difference between max and min);
#X obj 30 1867 matrix.range_col;
#X text 175 1867 matrix column range (difference between max and min);
#X obj 30 1894 matrix.range_row;
#X text 175 1894 matrix row range (difference between max and min);
#X obj 30 1921 matrix.rank;
#X text 175 1921 rank of the matrix;
#X obj 30 1948 matrix.remove_col;
#X text 175 1948 remove specified matrix column;
#X obj 30 1975 matrix.remove_row;
#X text 175 1975 remove specified matrix row;
#X obj 30 2002 matrix.replace;
#X text 175 2002 replace specific elements with a new value;
#X obj 30 2029 matrix.reshape;
#X text 175 2029 change size while keeping elements;
#X obj 30 2056 matrix.resize;
#X text 175 2056 change size while keeping elements and preserving
layout;
#X obj 30 2083 matrix.row;
#X text 175 2083 create Matrix row with specified values;
#X obj 30 2110 matrix.row_at;
#X text 175 2110 get specified row;
#X obj 30 2137 matrix.save;
#X text 175 2137 save matrix in CSV format;
#X obj 30 2164 matrix.shift_col;
#X text 175 2164 shift Matrix elements by N positions in each column;
#X obj 30 2191 matrix.shift_row;
#X text 175 2191 shift Matrix elements by N positions in each row;
#X obj 30 2218 matrix.sign;
#X text 175 2218 element-wise signum function;
#X obj 30 2245 matrix.sin;
#X text 175 2245 element-wise sine;
#X obj 30 2272 matrix.sinh;
#X text 175 2272 element-wise hyperbolic sine;
#X obj 30 2299 matrix.size;
#X text 175 2299 return Matrix size (rows \, columns);
#X obj 30 2326 matrix.solve;
#X text 175 2326 Solve a system of linear equations \, A*X = B \,
where X is unknown;
#X obj 30 2363 matrix.stddev;
#X text 175 2363 standart deviation for matrix values;
#X obj 30 2390 matrix.stddev_col;
#X text 175 2390 standart deviation matrix value for each column;
#X obj 30 2417 matrix.stddev_row;
#X text 175 2417 standart deviation matrix value for each row;
#X obj 30 2444 matrix.sub;
#X text 175 2444 element-wise matrix subtraction;
#X obj 30 2471 matrix.swap_cols;
#X text 175 2471 swaps specified columns in matrix;
#X obj 30 2498 matrix.swap_rows;
#X text 175 2498 swaps specified rows in matrix;
#X obj 30 2525 matrix.tan;
#X text 175 2525 element-wise tangent;
#X obj 30 2552 matrix.tanh;
#X text 175 2552 element-wise hyperbolic tangent;
#X obj 30 2579 matrix.to_list;
#X text 175 2579 convert Matrix to list;
#X obj 30 2606 matrix.transpose;
#X text 175 2606 transpose Matrix;
#X obj 30 2633 matrix.trunc_exp;
#X text 175 2633 element-wise base-e exponent \, truncated to avoid
infinity;
#X obj 30 2660 matrix.vectorise;
#X text 175 2660 generate a column vector or row vector from matrix;
#X obj 30 2687 matrix.zeros;
#X text 175 2687 create Matrix with zeros;
#X obj 30 2714 matrix.zeros_like;
#X text 175 2714 create Matrix filled with zeros with the same shape
as input;
#X obj 1 1 cnv 5 712 40 empty empty matrix::matrix 20 20 0 20 -104026
-4096 0;
#X obj 1 2751 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2761 library: matrix;