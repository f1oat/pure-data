#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 metro.pattern;
#X text 175 498 metro with rythmic patterns;
#X obj 30 525 metro.seq;
#X text 175 525 metro sequencer;
#X obj 30 552 window;
#X text 175 552 returns window value by given window position;
#X obj 20 579 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 620 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 631 array.p2s;
#X text 175 631 convert array phase [0\..1] to sample position;
#X obj 30 658 array.s2p;
#X text 175 658 convert array sample position to relative phase
position [0\..1];
#X obj 30 695 conv.amp2dbfs;
#X text 175 695 convert from amplitude to decibell full scale;
#X obj 30 722 conv.bpm2hz;
#X text 175 722 converts BPM to frequency in herz;
#X obj 30 749 conv.bpm2ms;
#X text 175 749 convert frequency in BPM to period in milliseconds;
#X obj 30 776 conv.bpm2sec;
#X text 175 776 convert frequency in BPM to period in seconds;
#X obj 30 803 conv.cc2amp;
#X text 175 803 convert from MIDI Control Change range;
#X obj 30 830 conv.lin2curve;
#X text 175 830 map linear to exponential range with 0 allowed.;
#X obj 30 857 conv.lin2exp;
#X text 175 857 maps linear range to exponential range;
#X obj 30 884 conv.lin2lin;
#X text 175 884 convert from one linear range to another;
#X obj 30 911 conv.pitch2midi;
#X text 175 911 converts symbol pitch name to MIDI note number;
#X obj 30 938 conv.samp2sec;
#X text 175 938 convert samples to time according to samplerate;
#X obj 30 965 conv.sec2samp;
#X text 175 965 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1002 conv.sec2str;
#X text 175 1002 converts float time in seconds to formated symbol (or
string);
#X obj 30 1039 conv.str2sec;
#X text 175 1039 converts formatted time to float value in seconds;
#X obj 20 1066 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1107 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1118 data.fifo;
#X text 175 1118 First-In-First-Out (FIFO) queue data container;
#X obj 30 1145 data.list;
#X text 175 1145 list container;
#X obj 30 1172 data.set;
#X text 175 1172 container that store unique elements;
#X obj 30 1199 data.set2list;
#X text 175 1199 converts set to list;
#X obj 30 1226 set.contains;
#X text 175 1226 check if specified element is in set;
#X obj 30 1253 set.diff;
#X text 175 1253 difference between two sets;
#X obj 30 1280 set.equal;
#X text 175 1280 checks if two sets are equal (contains same
elements);
#X obj 30 1307 set.intersect;
#X text 175 1307 output intersection of given sets;
#X obj 30 1334 set.size;
#X text 175 1334 get number of elements in set;
#X obj 30 1361 set.symdiff;
#X text 175 1361 symmetric difference between two sets;
#X obj 30 1388 set.union;
#X text 175 1388 output union of given sets;
#X obj 20 1415 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1456 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1467 dyn.comp2~;
#X text 175 1467 stereo dynamic range compressor;
#X obj 30 1494 dyn.comp~;
#X text 175 1494 mono dynamic range compressors;
#X obj 30 1521 dyn.gate2~;
#X text 175 1521 stereo signal gate;
#X obj 30 1548 dyn.gate~;
#X text 175 1548 mono signal gate;
#X obj 30 1575 dyn.limit2~;
#X text 175 1575 stereo 1176LN Peak Limiter;
#X obj 30 1602 dyn.limit~;
#X text 175 1602 mono 1176LN Peak Limiter;
#X obj 30 1629 dyn.softclip~;
#X text 175 1629 soft signal clip;
#X obj 20 1656 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1697 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1708 env.adsr~;
#X text 175 1708 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1735 env.ar~;
#X text 175 1735 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1772 env.asr~;
#X text 175 1772 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 1799 env.concat;
#X text 175 1799 Envelope concatenation;
#X obj 30 1826 env.follow~;
#X text 175 1826 Envelope follower with independent attack and release
times.;
#X obj 30 1863 env.mix;
#X text 175 1863 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 1900 env.smooth~;
#X text 175 1900 An envelope with an exponential attack and release;
#X obj 30 1927 env.tscale;
#X text 175 1927 Envelope time-scale;
#X obj 30 1954 env.tshift;
#X text 175 1954 Envelope time-shift (horizontal);
#X obj 30 1981 env.vscale;
#X text 175 1981 Envelope value-scale;
#X obj 30 2008 env2array;
#X text 175 2008 Renders envelope to specified array;
#X obj 30 2035 env2vline;
#X text 175 2035 Converts envelope to bunch of vline messages;
#X obj 30 2062 envelope;
#X text 175 2062 Envelope data type;
#X obj 20 2089 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2130 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2141 expand_env;
#X text 175 2141 Substitute enviroment variables in data stream;
#X obj 30 2168 flow.append;
#X text 175 2168 inject message into flow;
#X obj 30 2195 flow.change;
#X text 175 2195 rejects redundant input values;
#X obj 30 2222 flow.count;
#X text 175 2222 control flow event counter;
#X obj 30 2249 flow.demultiplex;
#X text 175 2249 control flow demultiplexer;
#X obj 30 2276 flow.gate;
#X text 175 2276 control flow gate. [spigot] analog;
#X obj 30 2303 flow.group;
#X text 175 2303 group data atoms in list of specified size;
#X obj 30 2330 flow.less;
#X text 175 2330 numeric stream router \, like many [moses];
#X obj 30 2357 flow.less_eq;
#X text 175 2357 numeric stream router \, like many [moses];
#X obj 30 2384 flow.multiplex;
#X text 175 2384 control flow multiplexer;
#X obj 30 2411 flow.pass;
#X text 175 2411 pass specified values;
#X obj 30 2438 flow.pass_if;
#X text 175 2438 pass values that accepted by predicate object;
#X obj 30 2465 flow.reject;
#X text 175 2465 reject specified values;
#X obj 30 2492 flow.reject_if;
#X text 175 2492 reject values by predicate;
#X obj 30 2519 flow.speedlim;
#X text 175 2519 control stream speed limitier;
#X obj 30 2546 flow.split;
#X text 175 2546 split data flow by external side-chain predicate;
#X obj 30 2573 flow.sync;
#X text 175 2573 bus with only hot inlets;
#X obj 30 2600 flow.tee~;
#X text 175 2600 separate audio and control streams;
#X obj 30 2627 replace;
#X text 175 2627 Replace atoms in data stream;
#X obj 20 2654 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2695 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2706 flt.biquad~;
#X text 175 2706 second order IIR filter.;
#X obj 30 2733 flt.bpf12~;
#X text 175 2733 Band-pass filter with 12/db per octave slope;
#X obj 30 2760 flt.bpf24~;
#X text 175 2760 Band-pass filter with 24/db per octave slope;
#X obj 30 2787 flt.c_bpf~;
#X text 175 2787 BPF coefficent calculator for biquad filter;
#X obj 30 2814 flt.c_highshelf~;
#X text 175 2814 Highshelf filter coefficent calculator for biquad;
#X obj 30 2841 flt.c_hpf~;
#X text 175 2841 HPF coefficent calculator for biquad filter;
#X obj 30 2868 flt.c_lowshelf~;
#X text 175 2868 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2895 flt.c_lpf~;
#X text 175 2895 LPF coefficent calculator for biquad filter;
#X obj 30 2922 flt.c_notch~;
#X text 175 2922 Band-reject coefficent calculator for biquad filter;
#X obj 30 2949 flt.c_peak~;
#X text 175 2949 Peaking equalizer calculator for biquad.;
#X obj 30 2976 flt.dcblock2~;
#X text 175 2976 stereo DC blocker;
#X obj 30 3003 flt.dcblock~;
#X text 175 3003 mono DC blocker;
#X obj 30 3030 flt.eq_peak_cq~;
#X text 175 3030 constant-Q second order peaking equalizer section;
#X obj 30 3057 flt.eq_peak~;
#X text 175 3057 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3108 flt.highshelf~;
#X text 175 3108 gain boost|cut above some frequency;
#X obj 30 3135 flt.hpf12~;
#X text 175 3135 High-pass filter with 12/db per octave slope;
#X obj 30 3162 flt.hpf24~;
#X text 175 3162 High-pass filter with 24/db per octave slope;
#X obj 30 3189 flt.lowshelf~;
#X text 175 3189 gain boost|cut below some frequency;
#X obj 30 3216 flt.lpf12~;
#X text 175 3216 Low-pass filter with 12/db per octave slope;
#X obj 30 3243 flt.lpf24~;
#X text 175 3243 Low-pass filter with 24/db per octave slope;
#X obj 30 3270 flt.moog_vcf~;
#X text 175 3270 Moog Voltage Controlled Filter;
#X obj 30 3297 flt.notch~;
#X text 175 3297 band-rejection filter;
#X obj 30 3324 flt.resonbp~;
#X text 175 3324 Simple resonant bandpass filter;
#X obj 20 3351 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 3392 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3403 fx.distortion~;
#X text 175 3403 cubic nonlinearity distortion;
#X obj 30 3430 fx.drone_box~;
#X text 175 3430 mono sympathetic resonance generator;
#X obj 30 3457 fx.echo~;
#X text 175 3457 simple echo effect;
#X obj 30 3484 fx.flanger~;
#X text 175 3484 mono flanging effect;
#X obj 30 3511 fx.freeverb2~;
#X text 175 3511 freeverb2 - stereo version of freeverb;
#X obj 30 3538 fx.freeverb~;
#X text 175 3538 freeverb - common used open-source reverb;
#X obj 30 3565 fx.freqshift~;
#X text 175 3565 frequency shifter or single-sideband ring modulation;
#X obj 30 3592 fx.greyhole~;
#X text 175 3592 A complex echo-like effect;
#X obj 30 3619 fx.looper~;
#X text 175 3619 One track looper;
#X obj 30 3646 fx.pitchshift~;
#X text 175 3646 simple pitch shifter based on 2 delay lines;
#X obj 30 3673 fx.sdelay~;
#X text 175 3673 smooth delay with a feedback control;
#X obj 30 3700 fx.wahwah~;
#X text 175 3700 digitized CryBaby wah pedal;
#X obj 30 3727 fx.zita_rev1~;
#X text 175 3727 Zita stereo reverb;
#X obj 20 3754 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3795 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3806 global.float;
#X text 175 3806 global named float object;
#X obj 30 3833 global.int;
#X text 175 3833 global named integer object;
#X obj 30 3860 global.list;
#X text 175 3860 global named list object;
#X obj 20 3887 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3928 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3939 hw.arduino;
#X text 175 3939 Arduino device;
#X obj 20 3966 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4007 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4018 lfo.impulse~;
#X text 175 4018 Unit-amplitude low-frequency impulse train;
#X obj 30 4045 lfo.pulse~;
#X text 175 4045 Unit-amplitude nonnegative low frequency pulse train
\,;
#X obj 30 4072 lfo.square~;
#X text 175 4072 Positive low frequence square wave;
#X obj 30 4099 lfo.tri~;
#X text 175 4099 Positive unit-amplitude low frequency triangle wave;
#X obj 20 4126 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 4167 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4178 list.all_of;
#X text 175 4178 checks if all list atoms accepted by predicate;
#X obj 30 4205 list.any_of;
#X text 175 4205 checks if at least one list element is accepted by
predicate;
#X obj 30 4242 list.apply_to;
#X text 175 4242 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 4279 list.at;
#X text 175 4279 returns list element(s) at given position(s);
#X obj 30 4306 list.choice;
#X text 175 4306 returns random element from list;
#X obj 30 4333 list.count;
#X text 175 4333 returns the number of items that equal to specified
value;
#X obj 30 4360 list.count_if;
#X text 175 4360 returns the number of items that satisfy to external
predicate.;
#X obj 30 4397 list.deinterleave;
#X text 175 4397 splits list to N lists \, each to separate output;
#X obj 30 4424 list.delta;
#X text 175 4424 returns the difference between the current list of
floats and the previous one.;
#X obj 30 4461 list.distribution;
#X text 175 4461 list value distribution;
#X obj 30 4488 list.do;
#X text 175 4488 iterate and modify list contents via side-chain;
#X obj 30 4515 list.each;
#X text 175 4515 maps each list value via external object(s);
#X obj 30 4542 list.enumerate;
#X text 175 4542 enumerates input list;
#X obj 30 4569 list.equal;
#X text 175 4569 checks if given lists are equal;
#X obj 30 4596 list.first;
#X text 175 4596 returns first list element;
#X obj 30 4623 list.gen;
#X text 175 4623 generates list of specified length via external
generator;
#X obj 30 4650 list.histogram;
#X text 175 4650 outputs distibution histogram;
#X obj 30 4677 list.integrator;
#X text 175 4677 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4714 list.interleave;
#X text 175 4714 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4765 list.last;
#X text 175 4765 returns last list element;
#X obj 30 4792 list.length;
#X text 175 4792 returns the number of atoms in the message;
#X obj 30 4819 list.max;
#X text 175 4819 returns largest element in the list;
#X obj 30 4846 list.mean;
#X text 175 4846 calculates average of list of floats;
#X obj 30 4873 list.min;
#X text 175 4873 returns smallest element in the list;
#X obj 30 4900 list.none_of;
#X text 175 4900 checks if none of list atoms is accepted by
predicate;
#X obj 30 4927 list.normalize;
#X text 175 4927 normalizes float list values to get their sum = 1.0;
#X obj 30 4954 list.pass_if;
#X text 175 4954 leave only elements accepted by predicate;
#X obj 30 4981 list.product;
#X text 175 4981 calculates product of floats in list;
#X obj 30 5008 list.range;
#X text 175 5008 returns list smallest and largest value;
#X obj 30 5035 list.reduce;
#X text 175 5035 apply function of two arguments cumulatively to the
list;
#X obj 30 5062 list.remove_if;
#X text 175 5062 remove elements by predicate;
#X obj 30 5089 list.repack;
#X text 175 5089 repack input list to specified size;
#X obj 30 5116 list.repeat;
#X text 175 5116 creates new list by repeating given list specified
times;
#X obj 30 5143 list.resize;
#X text 175 5143 changes list size;
#X obj 30 5170 list.reverse;
#X text 175 5170 reverses the order of the elements in the list;
#X obj 30 5197 list.rotate;
#X text 175 5197 rotates list left;
#X obj 30 5224 list.route;
#X text 175 5224 acts like [route] but for lists;
#X obj 30 5251 list.separate;
#X text 175 5251 sends list elements one by one separately;
#X obj 30 5278 list.seq;
#X text 175 5278 numeric sequence list generator;
#X obj 30 5305 list.shuffle;
#X text 175 5305 randomly rearranges elements in list;
#X obj 30 5332 list.slice;
#X text 175 5332 extract sublist;
#X obj 30 5359 list.sort;
#X text 175 5359 sorts list values by ascending order;
#X obj 30 5386 list.sort_with;
#X text 175 5386 sort list with user defined side-chain;
#X obj 30 5413 list.split;
#X text 175 5413 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 5450 list.sum;
#X text 175 5450 calculates sum of floats in list;
#X obj 30 5477 list.unique;
#X text 175 5477 sorts and removes duplicates from input list;
#X obj 30 5504 list.unpack;
#X text 175 5504 unpack list elements to separate outlets;
#X obj 30 5531 list.unwrap;
#X text 175 5531 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 5568 list.walk;
#X text 175 5568 Walks thru the list;
#X obj 30 5595 list.wrap;
#X text 175 5595 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 5646 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5687 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5698 live.capture~;
#X text 175 5698 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5735 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5776 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5787 local.float;
#X text 175 5787 canvas-scoped named float variable;
#X obj 30 5814 local.int;
#X text 175 5814 canvas-scoped named integer variable;
#X obj 30 5841 local.list;
#X text 175 5841 local named list object;
#X obj 20 5868 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5909 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5920 math.abs;
#X text 175 5920 absolute value function;
#X obj 30 5947 math.acos;
#X text 175 5947 arc cosine function;
#X obj 30 5974 math.acosh;
#X text 175 5974 inverse hyperbolic cosine function;
#X obj 30 6001 math.and;
#X text 175 6001 operation AND for multiple arguments;
#X obj 30 6028 math.approx;
#X text 175 6028 check if input value approximately equal to pattern;
#X obj 30 6055 math.asin;
#X text 175 6055 arc sine function;
#X obj 30 6082 math.asinh;
#X text 175 6082 inverse hyperbolic sine function;
#X obj 30 6109 math.atan;
#X text 175 6109 arc tangent function;
#X obj 30 6136 math.atanh;
#X text 175 6136 inverse hyperbolic tangent function;
#X obj 30 6163 math.cbrt;
#X text 175 6163 cube root function;
#X obj 30 6190 math.ceil;
#X text 175 6190 round to smallest integral value not less than input
value;
#X obj 30 6217 math.cos;
#X text 175 6217 cosine function;
#X obj 30 6244 math.cosh;
#X text 175 6244 hyperbolic cosine function;
#X obj 30 6271 math.e;
#X text 175 6271 mathematical constant \, base of the natural
logarithm;
#X obj 30 6298 math.exp;
#X text 175 6298 exponential functions;
#X obj 30 6325 math.exp2;
#X text 175 6325 exponential functions;
#X obj 30 6352 math.expr;
#X text 175 6352 dynamic [expr];
#X obj 30 6379 math.floor;
#X text 175 6379 round to largest integral value not greater than x;
#X obj 30 6406 math.gcd;
#X text 175 6406 calculate greatest common divisor;
#X obj 30 6433 math.inf;
#X text 175 6433 infinity value that cannot be represented accurately;
#X obj 30 6460 math.lcm;
#X text 175 6460 calculate least common multiple;
#X obj 30 6487 math.log;
#X text 175 6487 logarithm functions;
#X obj 30 6514 math.log10;
#X text 175 6514 logarithm functions;
#X obj 30 6541 math.log2;
#X text 175 6541 logarithm functions;
#X obj 30 6568 math.mul;
#X text 175 6568 multiplication (on lists too);
#X obj 30 6595 math.nan;
#X text 175 6595 Not a Number \, unrepresentable value;
#X obj 30 6622 math.neg;
#X text 175 6622 negate function;
#X obj 30 6649 math.or;
#X text 175 6649 operation OR for multiple arguments;
#X obj 30 6676 math.pi;
#X text 175 6676 mathematical constant;
#X obj 30 6703 math.reciprocal;
#X text 175 6703 calculate reciprocal number;
#X obj 30 6730 math.round;
#X text 175 6730 round to integral value \, regardless of rounding
direction;
#X obj 30 6757 math.round~;
#X text 175 6757 signal round;
#X obj 30 6784 math.sign;
#X text 175 6784 sign function;
#X obj 30 6811 math.sin;
#X text 175 6811 sine function;
#X obj 30 6838 math.sinh;
#X text 175 6838 hyperbolic sine function;
#X obj 30 6865 math.sqrt;
#X text 175 6865 square root function;
#X obj 30 6892 math.squared;
#X text 175 6892 value square;
#X obj 30 6919 math.tan;
#X text 175 6919 tangent function;
#X obj 30 6946 math.tanh;
#X text 175 6946 hyperbolic tangent function;
#X obj 30 6973 math.trunc;
#X text 175 6973 truncate to integer value;
#X obj 20 7000 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 7041 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7052 midi.ctl2str;
#X text 175 7052 convert Standard MIDI Controllers number to name;
#X obj 30 7079 midi.event2ctl;
#X text 175 7079 convert MidiEvent message to controller channel/value
pair;
#X obj 30 7106 midi.event2note;
#X text 175 7106 convert MidiEvent message to midi note/velocity pair;
#X obj 30 7133 midi.event2prg;
#X text 175 7133 convert MidiEvent message to midi program change
value;
#X obj 30 7160 midi.file;
#X text 175 7160 standard midi file SMF reader and writer;
#X obj 30 7187 midi.key2str;
#X text 175 7187 convert key number to SPN name according to tonality;
#X obj 30 7214 midi.prg2str;
#X text 175 7214 convert GM Instrument number to name (string or
symbol);
#X obj 30 7241 midi.track;
#X text 175 7241 extract track from MidiFile;
#X obj 20 7268 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 7309 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7320 click~;
#X text 175 7320 Output single impulse on bang;
#X obj 30 7347 modplug~;
#X text 175 7347 MOD file player (using libmodplug);
#X obj 20 7374 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 7415 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7426 msg;
#X text 175 7426 message constructor;
#X obj 20 7453 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 7494 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7505 noise.crackle~;
#X text 175 7505 sparse noise generator;
#X obj 30 7532 noise.lfreq0~;
#X text 175 7532 sampled/held noise (piecewise constant);
#X obj 30 7559 noise.lfreq~;
#X text 175 7559 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 7586 noise.pink~;
#X text 175 7586 Pink noise generator;
#X obj 30 7613 noise.white~;
#X text 175 7613 White noise generator;
#X obj 20 7640 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 7681 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7692 osc.impulse~;
#X text 175 7692 Bandlimited impulse train generator;
#X obj 30 7719 osc.pulse~;
#X text 175 7719 Bandlimited pulse train oscillator.;
#X obj 30 7746 osc.saw~;
#X text 175 7746 Bandlimited saw wave oscillator;
#X obj 30 7773 osc.sinfb~;
#X text 175 7773 sine oscilator with feedback;
#X obj 30 7800 osc.square~;
#X text 175 7800 Bandlimited square wave oscillator;
#X obj 30 7827 osc.tri~;
#X text 175 7827 Bandlimited triangle wave oscillator;
#X obj 20 7854 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 7895 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7906 canvas.current;
#X text 175 7906 verbose information about current canvas;
#X obj 30 7933 canvas.top;
#X text 175 7933 verbose information about top-level canvas;
#X obj 30 7960 patch.args;
#X text 175 7960 Get patch or subpatch arguments;
#X obj 20 7987 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 8028 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8039 path.basename;
#X text 175 8039 outputs filename portion of pathname;
#X obj 30 8066 path.dirname;
#X text 175 8066 outputs directory portion of pathname;
#X obj 30 8093 path.exists;
#X text 175 8093 checks if given path exists;
#X obj 30 8120 path.lsdir;
#X text 175 8120 list directory contents;
#X obj 20 8147 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 8188 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8199 is_any;
#X text 175 8199 checks if input data has *any* type;
#X obj 30 8226 is_bang;
#X text 175 8226 checks if input data has *bang* type;
#X obj 30 8253 is_even;
#X text 175 8253 checks if input number is even;
#X obj 30 8280 is_file;
#X text 175 8280 checks if file exists and accessible;
#X obj 30 8307 is_float;
#X text 175 8307 checks if input data has *float* type;
#X obj 30 8334 is_list;
#X text 175 8334 checks if input data has *list* type;
#X obj 30 8361 is_odd;
#X text 175 8361 checks if input number is odd;
#X obj 30 8388 is_pointer;
#X text 175 8388 checks if input data has *pointer* type;
#X obj 30 8415 is_symbol;
#X text 175 8415 checks if input data has *symbol* type;
#X obj 20 8442 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 8483 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8494 preset.float;
#X text 175 8494 load/store float preset;
#X obj 30 8521 preset.list;
#X text 175 8521 load/store symbol preset;
#X obj 30 8548 preset.storage;
#X text 175 8548 preset storage control;
#X obj 30 8575 preset.symbol;
#X text 175 8575 load/store symbol preset;
#X obj 20 8602 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 8643 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8654 prop.get;
#X text 175 8654 Property extractor;
#X obj 30 8681 prop.set;
#X text 175 8681 Property injector;
#X obj 20 8708 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 8749 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8760 proto.firmata;
#X text 175 8760 Firmata Arduino protocol support;
#X obj 20 8787 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 8828 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8839 random.discrete;
#X text 175 8839 random weighted integers on interval [0 \, n);
#X obj 30 8866 random.float;
#X text 175 8866 random float generator in specified range;
#X obj 30 8893 random.gauss;
#X text 175 8893 gaussian random distribution;
#X obj 30 8920 random.int;
#X text 175 8920 Random integer generator in specified range;
#X obj 30 8947 random.linear;
#X text 175 8947 random linear distribution;
#X obj 30 8974 random.pw_const;
#X text 175 8974 piecewise constant random distribution;
#X obj 30 9001 random.pw_lin;
#X text 175 9001 piecewise linear random distribution;
#X obj 20 9028 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 9069 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9080 snd.file;
#X text 175 9080 Sound file loader on steroids;
#X obj 20 9107 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 9148 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9159 pan.cos~;
#X text 175 9159 two channel equal power sine/cosine panner;
#X obj 30 9186 pan.lin~;
#X text 175 9186 two channel linear panner;
#X obj 30 9213 pan.spread~;
#X text 175 9213 spreads input channels across the stereo field;
#X obj 30 9240 pan.sqrt~;
#X text 175 9240 two channel equal power square root panner;
#X obj 30 9267 spat.pan4~;
#X text 175 9267 GMEM SPAT: 4-outputs spatializer;
#X obj 30 9294 spat.pan8~;
#X text 175 9294 GMEM SPAT: 8-outputs spatializer;
#X obj 20 9321 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 9362 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9373 string;
#X text 175 9373 string constructor;
#X obj 30 9400 string.contains;
#X text 175 9400 checks if given string contains specified substring;
#X obj 30 9427 string.ends_with;
#X text 175 9427 checks if given string ends with specified suffix;
#X obj 30 9454 string.equal;
#X text 175 9454 check strings for equality;
#X obj 30 9481 string.format;
#X text 175 9481 formats string like printf.;
#X obj 30 9508 string.join;
#X text 175 9508 joins (concatenates) strings with separator;
#X obj 30 9535 string.length;
#X text 175 9535 number of characters in string (unicode supported);
#X obj 30 9562 string.remove;
#X text 175 9562 remove substring from input string;
#X obj 30 9589 string.replace;
#X text 175 9589 replace from one substring to another in input
string;
#X obj 30 9616 string.split;
#X text 175 9616 split string by separator;
#X obj 30 9643 string.starts_with;
#X text 175 9643 checks if given string starts with specified prefix;
#X obj 30 9670 string.substr;
#X text 175 9670 extract substring from input string;
#X obj 30 9697 string2symbol;
#X text 175 9697 converts string to symbol;
#X obj 20 9724 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 9765 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9776 symbol.equal;
#X text 175 9776 check symbols for equality;
#X obj 30 9803 symbol.length;
#X text 175 9803 number of characters in symbol (unicode supported);
#X obj 30 9830 symbol.num_compare;
#X text 175 9830 numeric symbol compare;
#X obj 20 9857 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 9898 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9909 synth.birds~;
#X text 175 9909 bird singing generator;
#X obj 30 9936 synth.church_bell~;
#X text 175 9936 generic church bell modal model;
#X obj 30 9963 synth.dubdub~;
#X text 175 9963 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 10000 synth.eguitar~;
#X text 175 10000 simple electric guitar model with steel strings;
#X obj 30 10027 synth.ks~;
#X text 175 10027 Karplus-Strong string;
#X obj 30 10054 synth.marimba~;
#X text 175 10054 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 10091 synth.risset_arp~;
#X text 175 10091 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 10118 synth.risset_tone~;
#X text 175 10118 Jean Claude Risset's endless glissando;
#X obj 20 10145 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 10186 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10197 system.cursor;
#X text 175 10197 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 10234 system.getenv;
#X text 175 10234 Get system environment variables;
#X obj 30 10261 system.hostname;
#X text 175 10261 outputs system hostname;
#X obj 30 10288 system.memsize;
#X text 175 10288 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 10325 system.memused;
#X text 175 10325 returns the process physical memory use - current
and peak;
#X obj 30 10352 system.screen_size;
#X text 175 10352 returns current screen size in pixels;
#X obj 20 10379 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 10420 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10434 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 10431 Timeline bang;
#X obj 30 10457 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 10454 Timeline section;
#X obj 30 10477 tl.transport;
#X text 175 10477 Timeline transport control;
#X obj 30 10507 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 10504 A bang... that's all;
#X obj 30 10530 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 10527 colorchooser widget;
#X obj 30 10553 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 10550 Display GUI object;
#X obj 30 10576 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 10573 GUI for turning DSP on/off;
#X obj 30 10599 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 10596 envelope editor widget;
#X obj 30 10622 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 10619 UI gain control;
#X obj 30 10645 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 10642 simple icon with button capabilities;
#X obj 30 10668 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 10665 value increment/decrement;
#X obj 30 10691 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 10688 keyboard widget;
#X obj 30 10714 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 10711 knob widget;
#X obj 30 10737 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 10734 simple label widget;
#X obj 30 10760 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 10757 Hyperlink widget;
#X obj 30 10783 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 10780 The matrix of toggles has you.;
#X obj 30 10806 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 10803 Dropdown menu;
#X obj 30 10829 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 10826 Shows peak and rms signal level;
#X obj 30 10852 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 10849 counterpart of the vanilla [nbx];
#X obj 30 10875 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 10872 counterpart of the vanilla [nbx] for signal;
#X obj 30 10898 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 10895 Preset manager;
#X obj 30 10921 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 10918 counterpart of the vanilla radio toggle;
#X obj 30 10944 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 10941 rangle slider;
#X obj 30 10967 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 10964 Scope GUI object;
#X obj 30 10990 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 10987 counterpart of the vanilla slider;
#X obj 30 11013 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 11010 2D slider widget;
#X obj 30 11036 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 11033 Multiple slider widget;
#X obj 30 11059 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 11056 Spectroscope GUI object;
#X obj 30 11082 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 11079 displays a list of text buttons or text toggles;
#X obj 30 11105 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 11102 modern toggle widget;
#X obj 20 11125 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 11166 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11177 vector.distance;
#X text 175 11177 returns euclidean distance between two points;
#X obj 30 11204 vector.dot;
#X text 175 11204 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 11255 vector.length;
#X text 175 11255 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 11292 vector.normalize;
#X text 175 11292 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 11319 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 11319 version: v0.5 \, license: GPL3;
#X obj 20 11338 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;