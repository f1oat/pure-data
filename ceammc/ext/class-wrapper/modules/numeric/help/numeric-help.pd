#N canvas 0 0 760 555 12;
#X obj 20 50 cnv 5 79 31 empty empty complex 4 13 0 17 -262144 -49933
0;
#X obj 20 91 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 102 complex.!=;
#X text 200 102 not equal check;
#X obj 30 129 complex.==;
#X text 200 129 equal check;
#X obj 30 156 complex.abs;
#X text 200 156 the magnitude of a complex number;
#X obj 30 183 complex.add;
#X text 200 183 add two complex numbers;
#X obj 30 210 complex.arg;
#X text 200 210 the phase angle of the complex number x \, expressed
in radians;
#X obj 30 237 complex.conj;
#X text 200 237 the complex conjugate;
#X obj 30 264 complex.cos;
#X text 200 264 cosine of complex number;
#X obj 30 291 complex.div;
#X text 200 291 divide complex numbers;
#X obj 30 318 complex.exp;
#X text 200 318 complex base e exponential;
#X obj 30 345 complex.imag;
#X text 200 345 get imaginary part of complex number;
#X obj 30 372 complex.log;
#X text 200 372 complex natural logarithm with the branch cuts along
the negative real axis;
#X obj 30 412 complex.log10;
#X text 200 412 complex common logarithm with the branch cuts along
the negative real axis;
#X obj 30 452 complex.mul;
#X text 200 452 multiply complex numbers;
#X obj 30 479 complex.new;
#X text 200 479 Complex data;
#X obj 30 506 complex.norm;
#X text 200 506 the squared magnitude;
#X obj 30 533 complex.polar;
#X text 200 533 creates Complex number in polar coordinates;
#X obj 30 560 complex.pow;
#X text 200 560 complex power;
#X obj 30 587 complex.real;
#X text 200 587 get real part of complex number;
#X obj 30 614 complex.sin;
#X text 200 614 sine of complex number;
#X obj 30 641 complex.sqrt;
#X text 200 641 complex square root in the range of the right half-plane;
#X obj 30 668 complex.sub;
#X text 200 668 substruct complex numbers;
#X obj 30 695 complex.tan;
#X text 200 695 tangent of complex number;
#X obj 30 722 complex.to_list;
#X text 200 722 real and imaginary part as list;
#X obj 30 749 complex.unpack;
#X text 200 749 unpacks complex number to real and imaginary parts;
#X obj 20 776 cnv 5 87 31 empty empty rational 4 13 0 17 -262144
-49933 0;
#X obj 20 817 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 828 rational.!=;
#X text 200 828 not equal check;
#X obj 30 855 rational.==;
#X text 200 855 equal check;
#X obj 30 882 rational.abs;
#X text 200 882 abs absolute value;
#X obj 30 909 rational.add;
#X text 200 909 add two rational numbers;
#X obj 30 936 rational.div;
#X text 200 936 divide rational numbers;
#X obj 30 963 rational.from_float;
#X text 200 963 converts input float to rational with specified precision;
#X obj 30 990 rational.ge;
#X text 200 990 greater equal compare operator;
#X obj 30 1017 rational.gt;
#X text 200 1017 greater than compare operator;
#X obj 30 1044 rational.le;
#X text 200 1044 less equal compare operator;
#X obj 30 1071 rational.lt;
#X text 200 1071 less than compare operator;
#X obj 30 1098 rational.mul;
#X text 200 1098 multiply rational numbers;
#X obj 30 1125 rational.new;
#X text 200 1125 The Rational class;
#X obj 30 1152 rational.pow;
#X text 200 1152 rational power;
#X obj 30 1179 rational.reciprocal;
#X text 200 1179 reciprocal rational number;
#X obj 30 1206 rational.sub;
#X text 200 1206 substruct rational numbers;
#X obj 30 1233 rational.to_float;
#X text 200 1233 convert to float value;
#X obj 30 1260 rational.to_list;
#X text 200 1260 numerator and denominator part as list;
#X obj 30 1287 rational.unpack;
#X text 200 1287 unpacks rational number to numerator and denominator
parts;
#X obj 1 1 cnv 5 740 40 empty empty numeric 20 20 0 20 -104026 -4096
0;
#X obj 1 1314 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 1314 version: v0.1 \, license:;
#X obj 20 1342 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 1329 msg 0;
#X obj 670 1364 switch~;
#X connect 92 0 93 0;