// this is autogenerated file, do not edit manually!
#include "m_pd.h"
#ifndef __ui_filter_tcl_h
#define __ui_filter_tcl_h
namespace {
void ui_filter_tcl_output() {
	sys_vgui("%s", "namespace eval ui {\nnamespace eval filter {\nvariable db_min -24.0\nvariable db_max 24.0\nvariable db_range [expr $db_max - $db_min]\nvariable db_labels_short { -12 0 12 }\nvariable db_labels_long { -18 -12 -6 0 6 12 18 }\nvariable freq_min 10.0\nvariable freq_max 20000.0\nvariable freq_nyq 22050.0\nvariable freq_steps { 500 1000 2000 2500 5000 10000 }\nvariable fmin_log10 [expr log10($freq_min)]\nvariable fmax_log10 [expr log10($freq_max)]\nproc clip { v min max } {\nif {$v < $min} { return $min }\nif {$v > $max} { return $max }\nreturn $v\n}\nproc finite {x} {\nexpr {[string is double -strict $x] && $x == $x && $x + 1 != $x}\n}\n}\nproc filter_font { zoom } { return \"Helvetica [expr $zoom * 7] normal roman\" }\nproc filter_draw_hdb { c t w h zoom labels color txtcolor } {\nset ft [filter_font $zoom]\nset lx [expr $w - (2*$zoom)]\nset t0 [lindex $labels 0]\nforeach l $labels {\nset y [expr ($h/$::ui::filter::db_range)*$l + $h*0.5]\nif { $l == 0 } { set lc [::tk::Darken $color 80] } { set lc $color }\n$c create line ");
	sys_vgui("%s", "0 $y $w $y -fill $lc -width 1 -tag $t\nset txt [expr -$l]\nif { $l == 0 } { set txt {0db} }\nset tt [$c create text $lx $y -text $txt -anchor se -justify right \\\n-font $ft -fill $txtcolor -width 0 -tags $t]\nif { $l == $t0 } {\nset miny [expr 10*$zoom]\nlassign [$c bbox $tt] tx0 ty0 tx1 ty1\nif { $ty0 < $miny || $ty1 < $miny } { $c delete $tt }\n}\n}\n$c create text $lx 3 -text [expr int($::ui::filter::db_max)] -anchor ne -justify right \\\n-font $ft -fill $txtcolor -width 0 -tags $t\n$c create text $lx $h -text [expr int($::ui::filter::db_min)] -anchor se -justify right \\\n-font $ft -fill $txtcolor -width 0 -tags $t\n}\nproc complex_new {real imag} {\nreturn [list $real $imag]\n}\nproc complex_add {z1 z2} {\nset result {}\nforeach c $z1 d $z2 {\nlappend result [expr {$c+$d}]\n}\nreturn $result\n}\nproc complex_mul {z1 z2} {\nset result {}\nforeach {c1 d1} $z1 {break}\nforeach {c2 d2} $z2 {break}\nreturn [list [expr {$c1*$c2-$d1*$d2}] [expr {$c1*$d2+$c2*$d1}]]\n}\nproc complex_div {z1 z2} {\nset result {}\nforeach {c1 d1");
	sys_vgui("%s", "} $z1 {break}\nforeach {c2 d2} $z2 {break}\nset denom [expr {$c2*$c2+$d2*$d2}]\nreturn [list [expr {($c1*$c2+$d1*$d2)/$denom}] \\\n[expr {(-$c1*$d2+$c2*$d1)/$denom}]]\n}\nproc complex_mod {z1} {\nforeach {c d} $z1 {break}\nreturn [expr {hypot($c,$d)}]\n}\nproc complex_exp {z1} {\nforeach {c d} $z1 {break}\nreturn [list [expr {exp($c)*cos($d)}] [expr {exp($c)*sin($d)}]]\n}\nproc filter_jw { w k } {\nset n [llength $k]\nif { $n == 0 } { return [complex_new 0.0 0.0] }\nset a [complex_new [lindex $k 0] 0.0]\nfor { set j 1 } { $j < $n } { incr j } {\nset kn [lindex $k $j]\nset jw [complex_new 0.0 [expr -1.0*$j*$w]]\nset ejw [complex_mul [complex_new $kn 0.0] [complex_exp $jw]]\nset a [complex_add $a $ejw]\n}\nreturn $a\n}\nproc filter_freq_amp {w b a} {\nset z [complex_new 0.0 0.0]\nset ajw [filter_jw $w $a]\nif { $ajw == $z } { return 0.0 }\nset bjw [filter_jw $w $b]\nreturn [complex_mod [complex_div $bjw $ajw]]\n}\nproc filter_x_to_omega { x w scale } {\nset f 0\nif { $scale == \"lin\" } {\nset k [expr $::ui::filter::freq_max/$:");
	sys_vgui("%s", ":ui::filter::freq_nyq]\nset f [expr ($k*$x)/$w]\n} elseif { $scale == \"log\" } {\nset loga $filter::fmin_log10\nset logb $filter::fmax_log10\nset lrng [expr $logb-$loga]\nset px [expr (($lrng*$x)/$w) + $loga]\nset f [expr pow(10, $px)/$::ui::filter::freq_nyq]\n} elseif { $scale == \"rad\" } {\nset f [expr 1.0*$x/$w]\n}\nexpr 3.141592653589793 * $f\n}\nproc filter_x_to_herz { x w scale } {\nset f 0\nif { $scale == \"lin\" } {\nset x [filter::clip $x 0 $w]\nset f [expr $filter::freq_max * $x / $w]\n} elseif { $scale == \"log\" } {\nset loga $filter::fmin_log10\nset logb $filter::fmax_log10\nset lrng [expr $logb-$loga]\nset x [filter::clip $x 0 $w]\nset px [expr (1.0*$x/$w * $lrng) + $loga]\nset f [expr pow(10, $px)]\n}\nreturn $f\n}\nproc filter_draw_fresp { c t w h zoom color b0 b1 b2 a1 a2 scale } {\nset db_hstep [expr $h / $ui::filter::db_range]\nset pts {}\nfor { set x 0 } { $x < $w } { incr x } {\nset omega [filter_x_to_omega $x $w $scale]\nset wamp [filter_freq_amp $omega [list $b0 $b1 $b2] [list 1 $a1 $a2]]\nset dbamp [exp");
	sys_vgui("%s", "r 20 * log10($wamp)]\nset y [expr $h - (($dbamp * $db_hstep) + ($h*0.5))]\nif { ![filter::finite $y] } { set y [expr $w+10] }\nlappend pts $x $y\n}\n$c create line $pts -fill $color -width $zoom -tags $t\n}\nproc filter_draw_hgrid { c t w h zoom gridcolor txtcolor } {\nset min_line_space 20\nset n_long [llength $::ui::filter::db_labels_long]\nset n_short [llength $::ui::filter::db_labels_short]\nset space_long [expr $h/$n_long]\nset space_short [expr $h/$n_short]\nif { $space_long >= $min_line_space } {\nfilter_draw_hdb $c $t $w $h $zoom $::ui::filter::db_labels_long $gridcolor $txtcolor\n} else {\nfilter_draw_hdb $c $t $w $h $zoom $::ui::filter::db_labels_short $gridcolor $txtcolor\n}\n}\nproc filter_draw_vgrid { c t w h zoom gridcolor txtcolor scale } {\nif { $scale == \"lin\" } {\nset min_hstep [expr 30 * $zoom]\nset fstep 5000\nset hstep [expr $fstep / $::ui::filter::freq_max * $w]\nforeach f $::ui::filter::freq_steps {\nset hstep [expr ($f / $::ui::filter::freq_max) * $w]\nif { $hstep > $min_hstep } {\nset fste");
	sys_vgui("%s", "p $f\nbreak\n}\n}\nset nl [expr ($w/$hstep)]\nset ft [filter_font $zoom]\nfor { set i 1 } { $i < $nl } { incr i } {\nset x [expr $i * $hstep]\n$c create line $x 0 $x $h -width 1 -fill $gridcolor -tags $t\nset f [expr $i*$fstep]\nif { $f < 1000 } { set txt \"[expr int($f)]\" } { set txt \"[expr $f/1000.0]k\" }\nset tx [expr $x-(2*$zoom+1)]\n$c create text $tx $h -text $txt -anchor se -justify right \\\n-font $ft -fill $txtcolor -width 0 -tags $t\n}\n} elseif { $scale == \"log\" } {\nset loga [expr log10($::ui::filter::freq_min)]\nset logb [expr log10($::ui::filter::freq_max)]\nset lrng [expr $logb-$loga]\nset ft [filter_font $zoom]\nset txt_right -1\nset lcolor0 [::tk::Darken $gridcolor 80]\nset lcolor1 [::tk::Darken $gridcolor 120]\nfor { set i [expr int($loga)] } { $i <= $logb } { incr i } {\nset f0 [expr pow(10, $i)]\nset draw_txt 1\nset line_prev_x -1\nfor { set k 0 } { $k < 9 } { incr k } {\nset f [expr $f0*(1+$k)]\nset x [expr (log10($f)-$loga)/$lrng*$w]\nset too_close [expr $x-$line_prev_x < (2*$zoom)]\nif { $too_close ");
	sys_vgui("%s", "&& $k != 0 } { continue }\nset line_prev_x $x\nif { $k == 0 } { set lc $lcolor0 } { set lc $lcolor1 }\n$c create line $x 0 $x $h -width 1 -fill $lc -tags $t\nif { $x < $txt_right } { $c delete $tid }\nif { $f < 1000 } { set txt \"[expr int($f)]\" } { set txt \"[expr int($f/1000.0)]k\" }\nset tx [expr $x+(2*$zoom)]\nset tid [$c create text $tx $h -text $txt -anchor sw -justify left \\\n-font $ft -fill $txtcolor -width 0 -tags $t]\nlassign [$c bbox $tid] tx0 ty0 tx1 ty1\nset txt_right $tx1\n}\n}\n} elseif { $scale == \"rad\" } {\nset ft [filter_font $zoom]\nset labels { \"π/4\" \"π/2\" \"3π/4\" }\nset nl [llength $labels]\nfor { set i 0 } { $i < $nl } { incr i } {\nset x [expr ($i+1.0)/($nl+1.0)*$w]\n$c create line $x 0 $x $h -width 1 -fill $gridcolor -tags $t\nset txt [lindex $labels $i]\nset tx [expr $x-(2*$zoom+1)]\n$c create text $tx $h -text $txt -anchor se -justify right \\\n-font $ft -fill $txtcolor -width 0 -tags $t\n}\n}\n}\nproc filter_info_txt { freq q bw type units } {\nif { $type == \"notch\" || $type == \"peak\" || $type ");
	sys_vgui("%s", "== \"bpf\" || $type == \"bpfq\" } {\nreturn \"f=${freq}${units} Q=$q bw=$bw\"\n} else {\nreturn \"f=${freq}${units}\"\n}\n}\nproc filter_draw_handle { c t w h zoom color txtcolor bdcolor bgcolor scale x y q bw type } {\nset pad [expr 2*$zoom]\nset tx [expr $w/2]\nset ty [expr $pad]\nset ft [filter_font $zoom]\nif { $scale == \"rad\" } {\nset omega [filter_x_to_omega $x $w $scale]\nset omega [expr int($omega/3.1415926*100)/100.0]\nset bw [format \"%.2f\" $bw]\nset info [filter_info_txt $omega $q $bw $type \"π\"]\n} else {\nset bw [expr int($bw)]\nset freq [expr int([filter_x_to_herz $x $w $scale])]\nset info [filter_info_txt $freq $q $bw $type \"Hz\"]\n}\nset tid [$c create text $tx $ty -text $info -anchor n -justify center \\\n-font $ft -fill $txtcolor -width 0 -tags $t]\nlassign [$c bbox $tid] tx0 ty0 tx1 ty1\nset rx0 [expr $tx0-$pad]\nset rx1 [expr $tx1+$pad]\nset ry0 -1\nset ry1 [expr $ty1+$pad-1]\nset rid [$c create rectangle $rx0 $ry0 $rx1 $ry1 \\\n-outline $bdcolor -fill $bgcolor -width 1 -tags $t]\n$c raise $tid $rid\nset r [exp");
	sys_vgui("%s", "r 5*$zoom]\nset x [filter::clip $x 0 $w]\nset y [filter::clip $y 0 $h]\nset x0 [expr $x-$r]\nset y0 [expr $y-$r]\nset x1 [expr $x+$r]\nset y1 [expr $y+$r]\nset cc [::tk::Darken $color 75]\n$c create oval $x0 $y0 $x1 $y1 -fill $color -outline $cc -width 1 -tags $t\n}\nproc filter_update { cnv id w h zoom bgcolor gridcolor txtcolor plotcolor knobcolor b0 b1 b2 a1 a2 x y scale type q bw } {\nset c [::ceammc::ui::widget_canvas $cnv $id]\nset t [::ceammc::ui::widget_tag $id]\n$c delete $t\nfilter_draw_hgrid $c $t $w $h $zoom $gridcolor $txtcolor\nfilter_draw_vgrid $c $t $w $h $zoom $gridcolor $txtcolor $scale\nfilter_draw_fresp $c $t $w $h $zoom $plotcolor $b0 $b1 $b2 $a1 $a2 $scale\nfilter_draw_handle $c $t $w $h $zoom $knobcolor $txtcolor $gridcolor $bgcolor $scale $x $y $q $bw $type\n}\n}\n");
}
}
#endif // __ui_filter_tcl_h
