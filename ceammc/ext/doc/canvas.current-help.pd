#N canvas 0 0 715 555 12;
#X declare -lib ceammc;
#X obj 372 50 cnv 1 323 21 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 372 50 verbose information about current canvas;
#X obj 1 1 cnv 5 712 40 empty empty canvas.current 20 20 0 20 -104026
-4096 0;
#X obj 586 11 canvas.current;
#X msg 50 118 @name?;
#X msg 155 118 @dir?;
#X msg 261 118 @width?;
#X msg 69 147 @root?;
#X msg 174 147 @args?;
#X msg 280 147 @abstraction?;
#X msg 98 176 @x?;
#X msg 194 176 @y?;
#X msg 299 176 @height?;
#X obj 50 205 canvas.current;
#X obj 50 234 msg set;
#X msg 50 262 ;
#X obj 20 301 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 306 cnv 5 98 26 empty empty properties: 4 10 0 14 -262144
-49933 0;
#X msg 120 311 @name;
#X text 240 311 (readonly) Get canvas name. Type: symbol;
#X msg 120 338 @dir;
#X text 240 338 (readonly) Get canvas directory (only if top level or
abstraction). Type: symbol;
#X msg 120 375 @args;
#X text 240 375 (readonly) Get canvas creation arguments. Type: list;
#X msg 120 402 @root;
#X text 240 402 (readonly) Get 1 if canvas is top-level (window).
Type: int;
#X msg 120 429 @abstraction;
#X text 240 429 (readonly) Get 1 if canvas is abstraction. Type: int;
#X msg 120 456 @size;
#X text 240 456 (readonly) Get canvas dimensions. If root canvas
(window) return window size \, if subpatch return Graph on Parent
size. Type: list;
#X msg 120 507 @width;
#X text 240 507 (readonly) Get canvas width (window or GOP). Type:
int;
#X msg 120 534 @height;
#X text 240 534 (readonly) Get canvas height (window or GOP). Type:
int;
#X msg 120 561 @x;
#X text 240 561 (readonly) Get canvas x-pos (window or GOP). Type:
int;
#X msg 120 588 @y;
#X text 240 588 (readonly) Get canvas y-pos (window or GOP). Type:
int;
#X obj 20 625 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 630 cnv 5 64 26 empty empty inlets: 4 10 0 14 -262144 -49933
0;
#X text 120 635 1\.;
#X text 240 635 property request.;
#X obj 20 663 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 668 cnv 5 73 26 empty empty outlets: 4 10 0 14 -262144
-49933 0;
#X text 120 673 1\.;
#X text 240 673 property output;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 67 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 115 45 ::;
#X obj 131 48 ui.link @title patch @url ceammc.patch-help.pd;
#X obj 1 721 cnv 5 712 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 724 library: ceammc v0.5;
#X text 455 736 see also:;
#X obj 531 736 patch.args;
#X obj 618 736 canvas.top;
#N canvas 10 743 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.5;
#X text 10 54 object:;
#X text 120 54 canvas.current;
#X text 10 76 category:;
#X text 120 76 patch;
#X text 10 98 since:;
#X text 120 98 0.4;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3;
#X text 10 164 keywords:;
#X text 120 164 canvas;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 743 pd info;
#X connect 4 0 13 0;
#X connect 7 0 13 0;
#X connect 10 0 13 0;
#X connect 5 0 13 0;
#X connect 8 0 13 0;
#X connect 11 0 13 0;
#X connect 6 0 13 0;
#X connect 9 0 13 0;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;