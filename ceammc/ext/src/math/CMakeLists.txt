add_custom_target(ceammc_generate_math
    COMMAND ${CMAKE_SOURCE_DIR}/ceammc/py/generate_math.py
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

set(MATH_SOURCES math_expr.lex math_expr.y)
macro(ceammc_math_external name)
    list(APPEND MATH_C_SOURCES "math_${name}.c")
endmacro()

macro(ceammc_mathxx_external name)
    list(APPEND MATH_CXX_SOURCES "math_${name}.cpp")
endmacro()

list(APPEND MATH_CXX_SOURCES math_bool_op.cpp math_expr_ast.cpp math_sync_base.cpp math_sync_op.cpp)
list(APPEND MATH_C_SOURCES math_expr.tab.c lex.math_expr.c lex.math_expr.h)

# begin autogenerated
ceammc_math_external(abs)
ceammc_math_external(acos)
ceammc_math_external(acosh)
ceammc_math_external(asin)
ceammc_math_external(asinh)
ceammc_math_external(atan)
ceammc_math_external(atanh)
ceammc_math_external(cbrt)
ceammc_math_external(ceil)
ceammc_math_external(cos)
ceammc_math_external(cosh)
ceammc_math_external(exp)
ceammc_math_external(exp2)
ceammc_math_external(floor)
ceammc_math_external(log)
ceammc_math_external(log10)
ceammc_math_external(log2)
ceammc_math_external(round)
ceammc_math_external(sin)
ceammc_math_external(sinh)
ceammc_math_external(sqrt)
ceammc_math_external(tan)
ceammc_math_external(tanh)
ceammc_math_external(trunc)
# end autogenerated

#ceammc_math_external(pi)
ceammc_math_external(e)
ceammc_math_external(nan)
ceammc_math_external(inf)
ceammc_math_external(reciprocal)
ceammc_math_external(sign)
ceammc_math_external(neg)
ceammc_math_external(squared)
ceammc_mathxx_external(approx)
ceammc_mathxx_external(gcd)
ceammc_mathxx_external(lcm)
ceammc_mathxx_external(mul)
ceammc_mathxx_external(expr)

ceammc_mathxx_external(div)
ceammc_mathxx_external(and)
ceammc_mathxx_external(or)
ceammc_mathxx_external(pi)
ceammc_mathxx_external(prime)
ceammc_mathxx_external(polyeval)

ceammc_mathxx_external(cdiv_tilde)
ceammc_mathxx_external(cmul_tilde)
ceammc_mathxx_external(round_tilde)

add_library(ceammc_math STATIC mod_math.h mod_math.cpp ${MATH_C_SOURCES} ${MATH_CXX_SOURCES})

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    # gcc boost compile fix
    # set only for c++ source files
    foreach(_cpp ${MATH_CXX_SOURCES})
        set_source_files_properties(${_cpp} PROPERTIES COMPILE_FLAGS -fext-numeric-literals)
    endforeach()
endif()

if(UNIX)
    set_target_properties(ceammc_math PROPERTIES COMPILE_FLAGS "-fPIC")
endif()

if(BISON_FOUND AND FLEX_FOUND)
    add_custom_target(math_expr_gen
        COMMAND ${FLEX_EXECUTABLE} --header-file=lex.math_expr.h math_expr.lex
        COMMAND ${BISON_EXECUTABLE} -d math_expr.y
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
endif()
