<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="data.tree">
        <title>data.tree</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>JSON like structure for storing values</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>data</category>
            <keywords>data tree json</keywords>
            <since>0.9</since>
        </meta>
        <arguments>
            <argument name="X" type="any">tree syntax: like JSON, but with parenthesis instead of
            curly braces</argument>
        </arguments>
        <properties>
            <property name="@empty" readonly="true" enum="0 1" type="int">1 if tree is
            empty</property>
            <property name="@size" readonly="true" minvalue="0" type="int">number of elements in
            tree</property>
        </properties>
        <methods>
            <method name="at">
            <param name="IDX" type="int" minvalue="0">key</param>outputs tree list entry by given index.
            If not found output empty tree</method>
            <method name="key">
            <param name="KEY" type="symbol">key</param>outputs tree dict entry by given key.
            If not found output empty tree</method>
            <method name="clear">removes tree content, set string to empty string, list to empty
            list, float to 0, dict to empty dict</method>
            <method name="dict">
            <param name="KEY" type="symbol">key</param>
            <param name="VAL" type="atom">value</param>creates tree dictionary with specified key
            values and output. No parsing performed.</method>
            <method name="set_float">
            <param name="F" type="float" required="true">value</param>creates tree float with
            specified value. No output. No parsing performed.</method>
            <method name="set_symbol">
            <param name="S" type="symbol" required="true">value</param>creates tree symbol with
            specified value. No output. No parsing performed.</method>
            <method name="set_list">
            <param name="V" type="atom">key</param>creates tree list with specified values. No
            output. No parsing performed.</method>
            <method name="set_dict">
            <param name="KEY" type="symbol">key</param>
            <param name="VAL" type="atom">value</param>creates tree dictionary with specified key
            values. No output. No parsing performed.</method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">output tree</xinfo>
                <xinfo on="float">set tree to float and output</xinfo>
                <xinfo on="symbol">set tree to symbol and output, no parsing performed</xinfo>
                <xinfo on="list">set tree to list and output, no parsing performed</xinfo>
                <xinfo on="data:mlist">set new tree list content and output</xinfo>
                <xinfo on="data:tree">set new tree content and output</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>tree output</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[dict #a(         [at 1 #e(  [set, bang #g( [set \("a":100\), bang #k(

[dict a 1 b 2 #b( [key b #f( [set 1 2 3, bang #h( [set \["x"\,"y"\], bang #l(

[list #c(                    [set "a string", bang #i(

[list A B C 1 2 3 #d(        [set A_STRING, bang #j(

[bang( [clear, bang(
|      |
[data.tree ("a": 100\, "b": "A B C"\, "c": \[1\,2\,3\]\, "d": ("key": "value")) #z]
|
|
|
[ui.display @display_type=1]

[X a->z]
[X b->z]
[X c->z]
[X d->z]
[X e->z]
[X f->z]
[X g->z]
[X h->z]
[X i->z]
[X j->z]
[X k->z]
[X l->z]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
