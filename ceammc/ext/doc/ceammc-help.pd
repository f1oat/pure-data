#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in Centre of ElectroAcoustic Music of Moscow Conservatory
(CEAMMC).;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.tramp~;
#X text 200 965 triggered ramp generator for array;
#X obj 30 992 array.variance;
#X text 200 992 calculates variance of array values;
#X obj 30 1019 array.vplay;
#X text 200 1019 simple array player for using with vline~;
#X obj 30 1046 array.window;
#X text 200 1046 fill array with window;
#X obj 30 1073 plot.geomspace~;
#X text 200 1073 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1113 plot.hist~;
#X text 200 1113 calculate and output signal histogram;
#X obj 30 1140 plot.linspace~;
#X text 200 1140 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1180 plot.logspace~;
#X text 200 1180 outputs numbers spaced evenly on a log scale;
#X obj 30 1207 plot.response~;
#X text 200 1207 output amp/phase freq response to impulse;
#X obj 20 1234 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1286 ceammc.search;
#X text 200 1286 ceammc library search object;
#X obj 30 1313 chrono.datetime;
#X text 200 1313 output current date and time info;
#X obj 30 1343 ui.link @title [function] @url function-help.pd;
#X text 200 1340 named function;
#X obj 30 1365 function.call;
#X text 200 1365 call named function;
#X obj 30 1392 gain~;
#X text 200 1392 multislot signal gain;
#X obj 30 1419 gate~;
#X text 200 1419 multislot signal gate;
#X obj 30 1446 logger;
#X text 200 1446 advanced data logger;
#X obj 30 1473 matrix~;
#X text 200 1473 signal routing matrix;
#X obj 30 1500 merge~;
#X text 200 1500 parametrized signal merge;
#X obj 30 1527 metro.choice;
#X text 200 1527 metro with random choice from timeset;
#X obj 30 1554 metro.pattern;
#X text 200 1554 metro with rhythmic patterns;
#X obj 30 1581 metro.random;
#X text 200 1581 metro random bang with specified range;
#X obj 30 1608 metro.seq;
#X text 200 1608 metro sequencer;
#X obj 30 1635 metro.wchoice;
#X text 200 1635 metro with weighted random choice from timeset;
#X obj 30 1662 mix~;
#X text 200 1662 multislot signal mixer;
#X obj 30 1689 nsig~;
#X text 200 1689 Mulitchannel converter from control to audio rate;
#X obj 30 1716 obj.props;
#X text 200 1716 property extractor;
#X obj 30 1743 radio;
#X text 200 1743 float index to outlet values as radio switch;
#X obj 30 1770 split~;
#X text 200 1770 parametrized signal splitter;
#X obj 30 1797 spring;
#X text 200 1797 float value "spring";
#X obj 30 1824 sync;
#X text 200 1824 value synchronization;
#X obj 30 1851 window;
#X text 200 1851 returns window value by given window position;
#X obj 30 1878 xdac~;
#X text 200 1878 dac~ with channel ranges;
#X obj 30 1905 xfade2~;
#X text 200 1905 multi stereo-signal crossfade;
#X obj 30 1932 xfade~;
#X text 200 1932 multi signal crossfade;
#X obj 30 1959 z~;
#X text 200 1959 sample delay;
#X obj 20 1986 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 2027 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2038 chaos.gbman0;
#X text 200 2038 Gingerbreadman map chaotic generator;
#X obj 30 2065 chaos.gbman0~;
#X text 200 2065 Gingerbreadman map chaotic generator;
#X obj 30 2092 chaos.jong;
#X text 200 2092 Peter de Jong attractor;
#X obj 30 2119 chaos.logistic;
#X text 200 2119 Logistic map chaotic generator;
#X obj 30 2146 chaos.std0;
#X text 200 2146 Standard map chaotic generator;
#X obj 30 2173 chaos.std0~;
#X text 200 2173 Standard map chaotic generator;
#X obj 20 2200 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2241 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2252 array.p2s;
#X text 200 2252 convert array phase [0\..1] to sample position;
#X obj 30 2279 array.s2p;
#X text 200 2279 convert sample position to phase range [0\..1];
#X obj 30 2306 conv.amp2dbfs;
#X text 200 2306 convert from amplitude to decibel full scale;
#X obj 30 2333 conv.amp2dbfs~;
#X text 200 2333 convert from amplitude to decibel full scale;
#X obj 30 2360 conv.bar2ms;
#X text 200 2360 calculate bar and beat duration;
#X obj 30 2387 conv.bits2bang;
#X text 200 2387 convert list of bits to bang events;
#X obj 30 2414 conv.bits2int;
#X text 200 2414 convert list of bits to integer;
#X obj 30 2441 conv.bits2note;
#X text 200 2441 convert list of bits to note events;
#X obj 30 2468 conv.bits2pos;
#X text 200 2468 convert list of bits to list of bit position;
#X obj 30 2495 conv.bpm2hz;
#X text 200 2495 converts BPM to frequency in hertz;
#X obj 30 2522 conv.bpm2ms;
#X text 200 2522 convert frequency in BPM to period in milliseconds;
#X obj 30 2549 conv.bpm2sec;
#X text 200 2549 convert frequency in BPM to period in seconds;
#X obj 30 2576 conv.car2pol;
#X text 200 2576 convert cartesian coords to polar;
#X obj 30 2603 conv.cc2amp;
#X text 200 2603 convert from MIDI Control Change range;
#X obj 30 2630 conv.char2morse;
#X text 200 2630 convert character to morse code;
#X obj 30 2657 conv.color2rgba;
#X text 200 2657 convert named or hex color to separate RGBA values;
#X obj 30 2684 conv.dbfs2amp;
#X text 200 2684 convert decibel full scale to amplitude;
#X obj 30 2711 conv.dbfs2amp~;
#X text 200 2711 convert decibel full scale to amplitude;
#X obj 30 2738 conv.degree2key;
#X text 200 2738 convert scale degree to key;
#X obj 30 2765 conv.edge2bang;
#X text 200 2765 edge detector for numeric stream;
#X obj 30 2792 conv.hex2int;
#X text 200 2792 hex symbol to int value;
#X obj 30 2819 conv.int2bits;
#X text 200 2819 convert integer to list of bits;
#X obj 30 2846 conv.lin2curve;
#X text 200 2846 map linear to exponential range with 0 allowed.;
#X obj 30 2873 conv.lin2exp;
#X text 200 2873 maps linear range to exponential range;
#X obj 30 2900 conv.lin2lin;
#X text 200 2900 convert from one linear range to another;
#X obj 30 2927 conv.lin2lin~;
#X text 200 2927 convert from one linear range to another for signals;
#X obj 30 2954 conv.list2props;
#X text 200 2954 converts list to series of property messages;
#X obj 30 2981 conv.midi2freq;
#X text 200 2981 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 3021 conv.ms2bpm;
#X text 200 3021 convert period in milliseconds to frequency in BPM;
#X obj 30 3048 conv.ms2samp;
#X text 200 3048 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3088 conv.ms2samp~;
#X text 200 3088 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3128 conv.ms2str;
#X text 200 3128 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3168 conv.note2guido;
#X text 200 3168 convert MIDI note to Guido notation;
#X obj 30 3195 conv.phase2rad;
#X text 200 3195 convert phase value [0-1] to radians [0-2π];
#X obj 30 3222 conv.phase2rad~;
#X text 200 3222 convert phase value [0-1] to radians [0-2π];
#X obj 30 3249 conv.pitch2midi;
#X text 200 3249 converts symbol pitch name to MIDI note number;
#X obj 30 3276 conv.pol2car;
#X text 200 3276 convert from polar coordinates to cartesian;
#X obj 30 3303 conv.rad2phase;
#X text 200 3303 convert radians value to phase;
#X obj 30 3330 conv.rad2phase~;
#X text 200 3330 convert radians value to phase;
#X obj 30 3357 conv.rgb2hex;
#X text 200 3357 convert separate RGB values to hex color;
#X obj 30 3384 conv.samp2ms;
#X text 200 3384 convert samples to time according to samplerate;
#X obj 30 3411 conv.samp2ms~;
#X text 200 3411 convert samples to milliseconds according to samplerate;
#X obj 30 3438 conv.samp2sec;
#X text 200 3438 convert samples to time according to samplerate;
#X obj 30 3465 conv.sec2bpm;
#X text 200 3465 convert period in seconds to frequency in BPM;
#X obj 30 3492 conv.sec2samp;
#X text 200 3492 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3532 conv.sec2str;
#X text 200 3532 converts float time in seconds to formated symbol
(or string);
#X obj 30 3559 conv.semi2ratio;
#X text 200 3559 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3586 conv.sig2float~;
#X text 200 3586 convert signal to floats;
#X obj 30 3613 conv.str2sec;
#X text 200 3613 converts formatted time to float value in seconds;
#X obj 30 3640 music.dur2time;
#X text 200 3640 convert duration list to time;
#X obj 30 3667 music.voice2midi;
#X text 200 3667 convert voice music list of midi pitches;
#X obj 20 3694 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3735 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3746 color.mix;
#X text 200 3746 color mixer;
#X obj 30 3773 data.bimap;
#X text 200 3773 bidirectional map container;
#X obj 30 3800 data.color;
#X text 200 3800 Color datatype;
#X obj 30 3827 data.copy;
#X text 200 3827 make copy for any data types: MList \, Set etc...;
#X obj 30 3854 data.dict;
#X text 200 3854 dictionary container: store values by key;
#X obj 30 3881 data.fifo;
#X text 200 3881 First-In-First-Out (FIFO) queue data container;
#X obj 30 3908 data.float;
#X text 200 3908 robust float object;
#X obj 30 3935 data.int;
#X text 200 3935 robust int object;
#X obj 30 3962 data.list;
#X text 200 3962 list container;
#X obj 30 3989 data.mlist;
#X text 200 3989 multidimensional list container;
#X obj 30 4016 data.set;
#X text 200 4016 container that store unique elements;
#X obj 30 4043 data.set2list;
#X text 200 4043 converts set to list;
#X obj 30 4070 dict.contains;
#X text 200 4070 predicate to check if dict contains a keys;
#X obj 30 4097 dict.each;
#X text 200 4097 map each value in dict;
#X obj 30 4124 dict.from_list;
#X text 200 4124 creates dictionary from list;
#X obj 30 4151 dict.get;
#X text 200 4151 output dict values;
#X obj 30 4178 dict.keys;
#X text 200 4178 get list of dict keys;
#X obj 30 4205 dict.pass;
#X text 200 4205 passes specified keys in dict;
#X obj 30 4232 dict.reject;
#X text 200 4232 rejects specified keys from dict;
#X obj 30 4259 dict.size;
#X text 200 4259 dictionary size;
#X obj 30 4286 dict.to_list;
#X text 200 4286 converts dictionary to plain list;
#X obj 30 4313 dict.values;
#X text 200 4313 dictionary values as mlist;
#X obj 30 4340 global.bimap;
#X text 200 4340 Global visibility bidirectional map container;
#X obj 30 4367 local.bimap;
#X text 200 4367 local to patch bidirectional map container;
#X obj 30 4394 mlist.flatten;
#X text 200 4394 flatten nested mlist;
#X obj 30 4421 rtree.to_list;
#X text 200 4421 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4448 set.contains;
#X text 200 4448 check if specified element is in set;
#X obj 30 4475 set.diff;
#X text 200 4475 difference between two sets;
#X obj 30 4502 set.equal;
#X text 200 4502 checks if two sets are equal (contains same elements);
#X obj 30 4529 set.intersect;
#X text 200 4529 output intersection of given sets;
#X obj 30 4556 set.size;
#X text 200 4556 get number of elements in set;
#X obj 30 4583 set.symdiff;
#X text 200 4583 symmetric difference between two sets;
#X obj 30 4610 set.union;
#X text 200 4610 output union of given sets;
#X obj 20 4637 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4678 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4689 dyn.comp2~;
#X text 200 4689 stereo dynamic range compressor;
#X obj 30 4716 dyn.comp_peak2~;
#X text 200 4716 stereo peak feed forward compressor with channel linking;
#X obj 30 4743 dyn.comp_peak~;
#X text 200 4743 mono dynamic range peak feed forward compressor;
#X obj 30 4770 dyn.comp_up2~;
#X text 200 4770 stereo upward compressor with channel linking;
#X obj 30 4797 dyn.comp_up~;
#X text 200 4797 mono upward compressor;
#X obj 30 4824 dyn.comp~;
#X text 200 4824 mono dynamic range compressors;
#X obj 30 4851 dyn.expand2~;
#X text 200 4851 stereo dynamic range expander with channel linking;
#X obj 30 4878 dyn.expand~;
#X text 200 4878 mono dynamic range expander;
#X obj 30 4905 dyn.gate2~;
#X text 200 4905 stereo signal gate;
#X obj 30 4932 dyn.gate~;
#X text 200 4932 mono signal gate;
#X obj 30 4959 dyn.limit2~;
#X text 200 4959 stereo 1176LN Peak Limiter;
#X obj 30 4986 dyn.limit~;
#X text 200 4986 mono 1176LN Peak Limiter;
#X obj 30 5013 dyn.softclip~;
#X text 200 5013 soft signal clip;
#X obj 20 5040 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 5081 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5092 env.adsr~;
#X text 200 5092 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 5119 env.ar~;
#X text 200 5119 Attack/Release envelope generator;
#X obj 30 5146 env.asr~;
#X text 200 5146 Attack/Sustain/Release envelope generator;
#X obj 30 5173 env.concat;
#X text 200 5173 Envelope concatenation;
#X obj 30 5200 env.follow~;
#X text 200 5200 Envelope follower with independent attack and release
times;
#X obj 30 5227 env.mix;
#X text 200 5227 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5267 env.smooth~;
#X text 200 5267 An envelope with an exponential attack and release;
#X obj 30 5294 env.tscale;
#X text 200 5294 Envelope time-scale;
#X obj 30 5321 env.tshift;
#X text 200 5321 Envelope time-shift (horizontal);
#X obj 30 5348 env.vscale;
#X text 200 5348 Envelope value-scale;
#X obj 30 5375 env2array;
#X text 200 5375 Renders envelope to specified array;
#X obj 30 5402 env2vline;
#X text 200 5402 Converts envelope to bunch of vline messages;
#X obj 30 5429 envelope;
#X text 200 5429 Envelope data type;
#X obj 30 5456 vline2env;
#X text 200 5456 Converts vline messages to env;
#X obj 20 5483 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5524 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5535 expand_env;
#X text 200 5535 Substitute environment variables in data stream;
#X obj 30 5562 flow.append;
#X text 200 5562 append message to flow stream;
#X obj 30 5589 flow.change;
#X text 200 5589 rejects redundant input values;
#X obj 30 5616 flow.count;
#X text 200 5616 control flow event counter;
#X obj 30 5643 flow.delay;
#X text 200 5643 enhanced version on vanilla delay object;
#X obj 30 5670 flow.demultiplex;
#X text 200 5670 control flow demultiplexer;
#X obj 30 5697 flow.demultiplex2~;
#X text 200 5697 audio stream stereo demultiplexer;
#X obj 30 5724 flow.demultiplex~;
#X text 200 5724 audio stream demultiplexer;
#X obj 30 5751 flow.dollar;
#X text 200 5751 data flow dollar converter;
#X obj 30 5778 flow.dup;
#X text 200 5778 message duplicator;
#X obj 30 5805 flow.float;
#X text 200 5805 pass floats;
#X obj 30 5832 flow.gate;
#X text 200 5832 control flow gate. [spigot] analog;
#X obj 30 5859 flow.greater;
#X text 200 5859 numeric stream router;
#X obj 30 5886 flow.greater_eq;
#X text 200 5886 numeric stream router;
#X obj 30 5913 flow.group;
#X text 200 5913 group input atoms in list of specified size;
#X obj 30 5940 flow.interval;
#X text 200 5940 measure time between flow events;
#X obj 30 5967 flow.less;
#X text 200 5967 numeric stream router \, like many [moses];
#X obj 30 5994 flow.less_eq;
#X text 200 5994 numeric stream router \, like many [moses];
#X obj 30 6021 flow.list2many;
#X text 200 6021 routes list element with message selectors;
#X obj 30 6048 flow.match;
#X text 200 6048 route data flow by regexp match;
#X obj 30 6075 flow.mem;
#X text 200 6075 store data flow in memory;
#X obj 30 6102 flow.multiplex;
#X text 200 6102 control flow multiplexer;
#X obj 30 6129 flow.multiplex2~;
#X text 200 6129 audio stream stereo multiplexer;
#X obj 30 6156 flow.multiplex~;
#X text 200 6156 audio stream multiplexer;
#X obj 30 6183 flow.once;
#X text 200 6183 one message pass thru;
#X obj 30 6210 flow.pack;
#X text 200 6210 flow pack;
#X obj 30 6237 flow.pass;
#X text 200 6237 pass specified values;
#X obj 30 6264 flow.pass_if;
#X text 200 6264 pass values that accepted by predicate object;
#X obj 30 6291 flow.pipe;
#X text 200 6291 enhanced version on vanilla pipe object;
#X obj 30 6318 flow.prepend;
#X text 200 6318 prepend message before received one;
#X obj 30 6345 flow.queue;
#X text 200 6345 multi-channel control flow sync queue (or FIFO);
#X obj 30 6372 flow.record;
#X text 200 6372 flow stream recorder/player;
#X obj 30 6399 flow.reject;
#X text 200 6399 reject specified values;
#X obj 30 6426 flow.reject_if;
#X text 200 6426 reject values by predicate;
#X obj 30 6453 flow.ring;
#X text 200 6453 dataflow ring buffer;
#X obj 30 6480 flow.route;
#X text 200 6480 advanced message router;
#X obj 30 6507 flow.select;
#X text 200 6507 vanilla flow on steroids;
#X obj 30 6534 flow.seqdelay;
#X text 200 6534 sequential delay/router for input flow;
#X obj 30 6561 flow.space;
#X text 200 6561 space in time messages received at the same logical
time;
#X obj 30 6588 flow.speedlim;
#X text 200 6588 control stream speed limiter;
#X obj 30 6615 flow.split;
#X text 200 6615 split data flow by external side-chain predicate;
#X obj 30 6642 flow.stack;
#X text 200 6642 any message stack;
#X obj 30 6669 flow.sync;
#X text 200 6669 bus with only hot inlets;
#X obj 30 6696 flow.sync_pack;
#X text 200 6696 flow pack with all hot inlets;
#X obj 30 6723 flow.tee~;
#X text 200 6723 separate audio and control streams;
#X obj 30 6750 replace;
#X text 200 6750 Replace atoms in data stream;
#X obj 30 6777 route.any;
#X text 200 6777 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6804 route.bang;
#X text 200 6804 separate bang messages from other types;
#X obj 30 6831 route.cycle;
#X text 200 6831 cyclic message router;
#X obj 30 6858 route.float;
#X text 200 6858 separate float messages from other types;
#X obj 30 6885 route.list;
#X text 200 6885 separate list messages from other types;
#X obj 30 6912 route.prop;
#X text 200 6912 separate property messages from other types;
#X obj 30 6939 route.random;
#X text 200 6939 routes input flow to random outlet;
#X obj 30 6966 route.symbol;
#X text 200 6966 separate symbol messages from other types;
#X obj 20 6993 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 7034 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7045 flt.a-weight;
#X text 200 7045 convert frequency to A-weight value;
#X obj 30 7072 flt.biquad~;
#X text 200 7072 second order IIR filter.;
#X obj 30 7099 flt.bpf12~;
#X text 200 7099 Two pole band-pass butterworth filter;
#X obj 30 7126 flt.bpf24~;
#X text 200 7126 Four pole band-pass butterworth filter;
#X obj 30 7153 flt.c_apf;
#X text 200 7153 Allpass filter coefficient calculator for biquad;
#X obj 30 7180 flt.c_bpf~;
#X text 200 7180 BPF coefficient calculator for biquad filter;
#X obj 30 7207 flt.c_highshelf~;
#X text 200 7207 Highshelf filter coefficient calculator for biquad;
#X obj 30 7234 flt.c_hpf;
#X text 200 7234 HPF coefficient calculator for biquad filter;
#X obj 30 7261 flt.c_hpf~;
#X text 200 7261 HPF coefficient calculator for biquad filter;
#X obj 30 7288 flt.c_lowshelf~;
#X text 200 7288 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7315 flt.c_lpf;
#X text 200 7315 LPF coefficient calculator for biquad filter;
#X obj 30 7342 flt.c_lpf~;
#X text 200 7342 LPF coefficient calculator for biquad filter;
#X obj 30 7369 flt.c_notch;
#X text 200 7369 Notch filter coefficient calculator for biquad;
#X obj 30 7396 flt.c_notch~;
#X text 200 7396 Band-reject coefficient calculator for biquad filter;
#X obj 30 7423 flt.c_peak~;
#X text 200 7423 Peaking equalizer calculator for biquad;
#X obj 30 7450 flt.c_pole;
#X text 200 7450 One-pole coefficient calculator for biquad filter;
#X obj 30 7477 flt.dcblock2~;
#X text 200 7477 stereo DC blocker;
#X obj 30 7504 flt.dcblock~;
#X text 200 7504 mono DC blocker;
#X obj 30 7531 flt.eq10~;
#X text 200 7531 graphic 10 band equalizer;
#X obj 30 7558 flt.eq_peak_cq~;
#X text 200 7558 constant-Q second order peaking equalizer section;
#X obj 30 7585 flt.eq_peak~;
#X text 200 7585 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7640 flt.fb_comb~;
#X text 200 7640 feedback comb filter;
#X obj 30 7667 flt.fbank5x1~;
#X text 200 7667 5 band one octave butterworth filterbank;
#X obj 30 7694 flt.ff_comb~;
#X text 200 7694 feed forward comb filter;
#X obj 30 7721 flt.freqz;
#X text 200 7721 compute the frequency response of a digital filter;
#X obj 30 7748 flt.freqz~;
#X text 200 7748 compute the frequency response of a digital filter;
#X obj 30 7775 flt.highshelf~;
#X text 200 7775 gain boost|cut above some frequency;
#X obj 30 7802 flt.hpf12~;
#X text 200 7802 High-pass second order Butterworth filter;
#X obj 30 7829 flt.hpf24~;
#X text 200 7829 High-pass fourth order Butterworth filter;
#X obj 30 7856 flt.lowshelf~;
#X text 200 7856 gain boost|cut below some frequency;
#X obj 30 7883 flt.lpf12~;
#X text 200 7883 Low-pass second order Butterworth filter;
#X obj 30 7910 flt.lpf24~;
#X text 200 7910 Low-pass fourth order Butterworth filter;
#X obj 30 7937 flt.median;
#X text 200 7937 Median control flow filter;
#X obj 30 7964 flt.moog_vcf~;
#X text 200 7964 Moog Voltage Controlled Filter;
#X obj 30 7991 flt.notch~;
#X text 200 7991 band-rejection filter;
#X obj 30 8018 flt.resonbp~;
#X text 200 8018 Simple resonant bandpass filter;
#X obj 30 8045 flt.resonhp~;
#X text 200 8045 Simple resonant highpass filter;
#X obj 30 8072 flt.resonlp~;
#X text 200 8072 Simple resonant lowpass filter;
#X obj 20 8099 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 8140 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8151 fx.bitdown~;
#X text 200 8151 bit downer and downsampler effect;
#X obj 30 8178 fx.chorus~;
#X text 200 8178 Chorus effect;
#X obj 30 8205 fx.dattorro~;
#X text 200 8205 dattorro reverb;
#X obj 30 8232 fx.delay~;
#X text 200 8232 smooth delay with a feedback control;
#X obj 30 8259 fx.distortion1~;
#X text 200 8259 distortion #1 from Guitarix effects set;
#X obj 30 8286 fx.distortion2~;
#X text 200 8286 distortion #2 from Guitarix effects set;
#X obj 30 8313 fx.distortion3~;
#X text 200 8313 simple distortion #3 from Guitarix effects set;
#X obj 30 8340 fx.distortion~;
#X text 200 8340 cubic nonlinearity distortion;
#X obj 30 8367 fx.drive~;
#X text 200 8367 Guitarix drive effect;
#X obj 30 8394 fx.drone_box~;
#X text 200 8394 mono sympathetic resonance generator;
#X obj 30 8421 fx.echo2~;
#X text 200 8421 stereo echo effect;
#X obj 30 8448 fx.echo~;
#X text 200 8448 enhanced echo effect;
#X obj 30 8475 fx.flanger~;
#X text 200 8475 mono flanging effect;
#X obj 30 8502 fx.freeverb2~;
#X text 200 8502 freeverb2 - stereo version of freeverb;
#X obj 30 8529 fx.freeverb~;
#X text 200 8529 freeverb - common used open-source reverb;
#X obj 30 8556 fx.freqshift~;
#X text 200 8556 frequency shifter or single-sideband ring modulation;
#X obj 30 8583 fx.granulator~;
#X text 200 8583 simple input stream granulator;
#X obj 30 8610 fx.greyhole~;
#X text 200 8610 A complex echo-like effect;
#X obj 30 8637 fx.infrev~;
#X text 200 8637 port of Infinity VST plugin from airwindows;
#X obj 30 8664 fx.jcrev~;
#X text 200 8664 Schroeder quad reverberator from 1972;
#X obj 30 8691 fx.looper~;
#X text 200 8691 One track looper;
#X obj 30 8718 fx.overdrive~;
#X text 200 8718 overdrive effect;
#X obj 30 8745 fx.pitchshift_s~;
#X text 200 8745 signal version of fx.pitchshift~;
#X obj 30 8772 fx.pitchshift~;
#X text 200 8772 simple pitch shifter based on 2 delay lines;
#X obj 30 8799 fx.rb_pitchshift~;
#X text 200 8799 rubber band pitchshift;
#X obj 30 8826 fx.recho~;
#X text 200 8826 reversed echo effect;
#X obj 30 8853 fx.ringmod~;
#X text 200 8853 ring modulator effect;
#X obj 30 8880 fx.room~;
#X text 200 8880 Gardners room emulation algorithms;
#X obj 30 8907 fx.satrev~;
#X text 200 8907 Schroeder reverberator from 1971;
#X obj 30 8934 fx.scramble~;
#X text 200 8934 scramble delayed sound fragments;
#X obj 30 8961 fx.shimmer~;
#X text 200 8961 shimmer reverb effect effect;
#X obj 30 8988 fx.stutter~;
#X text 200 8988 stutter effect;
#X obj 30 9015 fx.tapiir~;
#X text 200 9015 multi-tap delay;
#X obj 30 9042 fx.tremolo~;
#X text 200 9042 tremolo effect from guitarix project;
#X obj 30 9069 fx.vocoder~;
#X text 200 9069 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 9109 fx.wahwah~;
#X text 200 9109 digitized CryBaby wah pedal;
#X obj 30 9136 fx.zita_rev1~;
#X text 200 9136 Zita stereo reverb;
#X obj 20 9163 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 9204 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9215 global.dict;
#X text 200 9215 global named dict object;
#X obj 30 9242 global.float;
#X text 200 9242 global named float object;
#X obj 30 9269 global.int;
#X text 200 9269 global named integer object;
#X obj 30 9296 global.list;
#X text 200 9296 global named list object;
#X obj 30 9323 global.mlist;
#X text 200 9323 global named mlist object;
#X obj 30 9350 global.set;
#X text 200 9350 global named set object;
#X obj 20 9377 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 9418 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9429 hw.apple_smc;
#X text 200 9429 query the system management control in Apples;
#X obj 30 9456 hw.apple_sms;
#X text 200 9456 query the sudden motion sensor in Apples;
#X obj 30 9483 hw.arduino;
#X text 200 9483 Arduino device;
#X obj 30 9510 hw.cpu_temp;
#X text 200 9510 get CPU temperature;
#X obj 30 9537 hw.display;
#X text 200 9537 get/set display properties;
#X obj 30 9564 hw.kbd_light;
#X text 200 9564 Get/set keyboard light on some devices;
#X obj 30 9591 hw.motu.avb;
#X text 200 9591 controls Motu AVB devices over http requests;
#X obj 30 9618 hw.serial;
#X text 200 9618 serial port device;
#X obj 20 9645 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9686 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9700 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9697 faust realtime compilation;
#X obj 30 9722 lang.lua;
#X text 200 9722 Lua JIT language bindings;
#X obj 30 9752 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9749 faust compiled ui object;
#X obj 20 9774 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9815 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9826 lfo.+pulse~;
#X text 200 9826 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9853 lfo.+saw~;
#X text 200 9853 Positive unit-amplitude low frequency saw wave;
#X obj 30 9880 lfo.+square~;
#X text 200 9880 Positive low frequency square wave;
#X obj 30 9907 lfo.+tri~;
#X text 200 9907 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9934 lfo.impulse~;
#X text 200 9934 Unit-amplitude low-frequency impulse train;
#X obj 30 9961 lfo.mosc~;
#X text 200 9961 multi-oscillator with various waveforms;
#X obj 30 9988 lfo.pulse~;
#X text 200 9988 Full-range unit-amplitude low frequency pulse train;
#X obj 30 10015 lfo.saw~;
#X text 200 10015 Full-range unit-amplitude low frequency saw;
#X obj 30 10042 lfo.square~;
#X text 200 10042 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 10069 lfo.tri~;
#X text 200 10069 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 10096 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 10137 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10148 list.^at;
#X text 200 10148 on input index(es) outputs list element(s);
#X obj 30 10175 list.^contains;
#X text 200 10175 checks if input atom is found in the list;
#X obj 30 10202 list.^search;
#X text 200 10202 on input atom returns it index in list;
#X obj 30 10229 list.all_of;
#X text 200 10229 checks if all list atoms accepted by predicate;
#X obj 30 10256 list.any_of;
#X text 200 10256 checks if at least one list element is accepted by
predicate;
#X obj 30 10283 list.append;
#X text 200 10283 append atom or list to the end of input list;
#X obj 30 10310 list.apply_to;
#X text 200 10310 modifies list value at specified position \, filtering
it via external object;
#X obj 30 10350 list.at;
#X text 200 10350 outputs list element(s) at specified index(es);
#X obj 30 10377 list.choice;
#X text 200 10377 outputs random element from list;
#X obj 30 10404 list.contains;
#X text 200 10404 checks if input list contains specified atoms;
#X obj 30 10431 list.convolve;
#X text 200 10431 convolution for lists;
#X obj 30 10458 list.correlate;
#X text 200 10458 list cross-correlation;
#X obj 30 10485 list.count;
#X text 200 10485 output the number of items that equal to specified
value;
#X obj 30 10512 list.count_if;
#X text 200 10512 output the number of items that satisfy to external
predicate;
#X obj 30 10539 list.delta;
#X text 200 10539 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10579 list.distribution;
#X text 200 10579 list value distribution;
#X obj 30 10606 list.do;
#X text 200 10606 iterate and modify list contents via side-chain;
#X obj 30 10633 list.each;
#X text 200 10633 maps each list value via external side-chain;
#X obj 30 10660 list.enumerate;
#X text 200 10660 enumerates input list;
#X obj 30 10687 list.equal;
#X text 200 10687 checks if given lists are equal;
#X obj 30 10714 list.first;
#X text 200 10714 returns first list element;
#X obj 30 10741 list.gen;
#X text 200 10741 generates list of specified length via external generator;
#X obj 30 10768 list.histogram;
#X text 200 10768 outputs distribution histogram;
#X obj 30 10795 list.insert;
#X text 200 10795 insert atom or list to the specified position of
input list;
#X obj 30 10822 list.integrator;
#X text 200 10822 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10862 list.last;
#X text 200 10862 output last list element;
#X obj 30 10889 list.length;
#X text 200 10889 output the number of atoms in the list;
#X obj 30 10916 list.map;
#X text 200 10916 map list values by specified dictionary;
#X obj 30 10943 list.max;
#X text 200 10943 output largest element in the list;
#X obj 30 10970 list.mean;
#X text 200 10970 calculates average of list of floats;
#X obj 30 10997 list.min;
#X text 200 10997 returns smallest element in the list;
#X obj 30 11024 list.none_of;
#X text 200 11024 checks if none of list atoms is accepted by predicate;
#X obj 30 11051 list.normalize;
#X text 200 11051 normalizes float list values to get their sum = 1.0;
#X obj 30 11078 list.pass;
#X text 200 11078 leave in list only specified elements;
#X obj 30 11105 list.pass_if;
#X text 200 11105 leave only elements accepted by predicate;
#X obj 30 11132 list.prepend;
#X text 200 11132 prepend atom or list before input list;
#X obj 30 11159 list.product;
#X text 200 11159 calculates product of floats in list;
#X obj 30 11186 list.range;
#X text 200 11186 output list smallest and largest value;
#X obj 30 11213 list.reduce;
#X text 200 11213 apply function of two arguments cumulatively to the
list;
#X obj 30 11240 list.reject;
#X text 200 11240 remove specified element from list;
#X obj 30 11267 list.remove;
#X text 200 11267 remove list element(s) at specified positions;
#X obj 30 11294 list.remove_if;
#X text 200 11294 remove elements by predicate;
#X obj 30 11321 list.repack;
#X text 200 11321 repack list to specified size;
#X obj 30 11348 list.repeat;
#X text 200 11348 output new list by repeating input list specified
times;
#X obj 30 11375 list.resample;
#X text 200 11375 resample list with specified ratio;
#X obj 30 11402 list.resize;
#X text 200 11402 changes list size;
#X obj 30 11429 list.reverse;
#X text 200 11429 reverses the order of the elements in the list;
#X obj 30 11456 list.rldecode;
#X text 200 11456 Run-length list decoder (RLE);
#X obj 30 11483 list.rlencode;
#X text 200 11483 RLE (run-length encoding) for lists;
#X obj 30 11510 list.rotate;
#X text 200 11510 rotates list;
#X obj 30 11537 list.route;
#X text 200 11537 acts like [route] but for lists;
#X obj 30 11564 list.rundiff;
#X text 200 11564 running difference;
#X obj 30 11591 list.runsum;
#X text 200 11591 running sum;
#X obj 30 11618 list.search;
#X text 200 11618 search specified items in input list;
#X obj 30 11645 list.separate;
#X text 200 11645 sends list elements one by one separately;
#X obj 30 11672 list.seq;
#X text 200 11672 numeric sequence list generator;
#X obj 30 11699 list.set;
#X text 200 11699 set list value at specified position;
#X obj 30 11726 list.shift;
#X text 200 11726 shifts the contents of the list with linear interpolation;
#X obj 30 11753 list.shuffle;
#X text 200 11753 randomly rearranges elements in list;
#X obj 30 11780 list.slice;
#X text 200 11780 extract sublist;
#X obj 30 11807 list.sort;
#X text 200 11807 sorts list values by ascending order;
#X obj 30 11834 list.sort_with;
#X text 200 11834 sort list with user defined side-chain;
#X obj 30 11861 list.split;
#X text 200 11861 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11901 list.stretch;
#X text 200 11901 stretches list - changes its size with linear interpolation;
#X obj 30 11928 list.sum;
#X text 200 11928 calculates sum of floats in list;
#X obj 30 11955 list.unique;
#X text 200 11955 removes duplicates from input list;
#X obj 30 11982 list.unpack;
#X text 200 11982 unpack list elements to separate outlets;
#X obj 30 12009 list.unzip;
#X text 200 12009 splits list to N lists \, each to separate output;
#X obj 30 12036 list.walk;
#X text 200 12036 Walks thru the list;
#X obj 30 12063 list.zip;
#X text 200 12063 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 12118 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 12159 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12170 live.capture~;
#X text 200 12170 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 12210 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 12251 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12262 local.dict;
#X text 200 12262 local named dict object;
#X obj 30 12289 local.float;
#X text 200 12289 canvas-scoped named float variable;
#X obj 30 12316 local.int;
#X text 200 12316 canvas-scoped named integer variable;
#X obj 30 12343 local.list;
#X text 200 12343 local named list object;
#X obj 30 12370 local.mlist;
#X text 200 12370 local named mlist object;
#X obj 30 12397 local.set;
#X text 200 12397 local named set object;
#X obj 20 12424 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 12465 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12476 math.abs;
#X text 200 12476 absolute value function;
#X obj 30 12503 math.abs~;
#X text 200 12503 absolute value function for signals;
#X obj 30 12530 math.acos;
#X text 200 12530 arc cosine function;
#X obj 30 12557 math.acosh;
#X text 200 12557 inverse hyperbolic cosine function;
#X obj 30 12584 math.acosh~;
#X text 200 12584 hyperbolic arc cosine for signals;
#X obj 30 12611 math.acos~;
#X text 200 12611 arc cosine function for signals;
#X obj 30 12638 math.and;
#X text 200 12638 operation AND for multiple arguments;
#X obj 30 12665 math.approx;
#X text 200 12665 check if input value approximately equal to pattern;
#X obj 30 12692 math.asin;
#X text 200 12692 arc sine function;
#X obj 30 12719 math.asinh;
#X text 200 12719 inverse hyperbolic sine function;
#X obj 30 12746 math.asinh~;
#X text 200 12746 hyperbolic arc sine for signals;
#X obj 30 12773 math.asin~;
#X text 200 12773 arc sine for signals;
#X obj 30 12800 math.atan;
#X text 200 12800 arc tangent function;
#X obj 30 12827 math.atanh;
#X text 200 12827 inverse hyperbolic tangent function;
#X obj 30 12854 math.atanh~;
#X text 200 12854 hyperbolic arc tangent for signals;
#X obj 30 12881 math.atan~;
#X text 200 12881 arc tangent for signals;
#X obj 30 12908 math.binomial;
#X text 200 12908 binomial coefficient calculator;
#X obj 30 12935 math.cabs~;
#X text 200 12935 magnitude of a complex signals;
#X obj 30 12962 math.carg~;
#X text 200 12962 phase angle of a complex signals;
#X obj 30 12989 math.cbrt;
#X text 200 12989 cube root function;
#X obj 30 13016 math.cbrt~;
#X text 200 13016 cube root function for signals;
#X obj 30 13043 math.cdiv~;
#X text 200 13043 division of complex signals;
#X obj 30 13070 math.ceil;
#X text 200 13070 round to smallest integral value not less than input
value;
#X obj 30 13097 math.ceil~;
#X text 200 13097 round to smallest integral value not less than input
value;
#X obj 30 13124 math.cexp~;
#X text 200 13124 exponent of a complex signals;
#X obj 30 13151 math.cmul~;
#X text 200 13151 multiplication of complex signals;
#X obj 30 13178 math.cos;
#X text 200 13178 cosine function;
#X obj 30 13205 math.cosh;
#X text 200 13205 hyperbolic cosine function;
#X obj 30 13232 math.cosh~;
#X text 200 13232 hyperbolic cosine for signals;
#X obj 30 13259 math.cos~;
#X text 200 13259 cosine function;
#X obj 30 13286 math.div;
#X text 200 13286 division (on lists too);
#X obj 30 13313 math.e;
#X text 200 13313 mathematical constant \, base of the natural logarithm;
#X obj 30 13340 math.erf;
#X text 200 13340 error function;
#X obj 30 13367 math.erf~;
#X text 200 13367 error function for signals;
#X obj 30 13394 math.exp;
#X text 200 13394 exponential functions;
#X obj 30 13421 math.exp2;
#X text 200 13421 exponential functions;
#X obj 30 13448 math.exp2~;
#X text 200 13448 base-2 exponential for signal;
#X obj 30 13475 math.expr;
#X text 200 13475 dynamic [expr];
#X obj 30 13502 math.exp~;
#X text 200 13502 base-e exponential for signal;
#X obj 30 13529 math.floor;
#X text 200 13529 round to largest integral value not greater than
x;
#X obj 30 13556 math.floor~;
#X text 200 13556 round to largest integral value not greater than
x;
#X obj 30 13583 math.gamma;
#X text 200 13583 gamma function;
#X obj 30 13610 math.gamma~;
#X text 200 13610 gamma function for floating point signals;
#X obj 30 13637 math.gcd;
#X text 200 13637 calculate greatest common divisor;
#X obj 30 13664 math.inf;
#X text 200 13664 infinity value that cannot be represented accurately;
#X obj 30 13691 math.inf~;
#X text 200 13691 inifinity signal generator;
#X obj 30 13718 math.lcm;
#X text 200 13718 calculate least common multiple;
#X obj 30 13745 math.lgamma;
#X text 200 13745 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13772 math.lgamma~;
#X text 200 13772 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13812 math.log;
#X text 200 13812 natural logarithm;
#X obj 30 13839 math.log10;
#X text 200 13839 logarithm functions;
#X obj 30 13866 math.log10~;
#X text 200 13866 natural logarithm;
#X obj 30 13893 math.log2;
#X text 200 13893 logarithm functions;
#X obj 30 13920 math.log2~;
#X text 200 13920 base-2 logarithm;
#X obj 30 13947 math.log~;
#X text 200 13947 natural logarithm;
#X obj 30 13974 math.mul;
#X text 200 13974 multiplication (on lists too);
#X obj 30 14001 math.nan;
#X text 200 14001 Not a Number \, unrepresentable value;
#X obj 30 14028 math.nan~;
#X text 200 14028 signal NaN;
#X obj 30 14055 math.neg;
#X text 200 14055 negate function;
#X obj 30 14082 math.or;
#X text 200 14082 operation OR for multiple arguments;
#X obj 30 14109 math.pi;
#X text 200 14109 mathematical constant;
#X obj 30 14136 math.pi~;
#X text 200 14136 mathematical constant;
#X obj 30 14163 math.polyeval;
#X text 200 14163 evaluates the polynomial described by the coefficients
list;
#X obj 30 14190 math.reciprocal;
#X text 200 14190 calculate reciprocal number;
#X obj 30 14217 math.reciprocal~;
#X text 200 14217 calculate reciprocal number for signals;
#X obj 30 14244 math.round;
#X text 200 14244 round to integral value \, regardless of rounding
direction;
#X obj 30 14271 math.round~;
#X text 200 14271 signal round;
#X obj 30 14298 math.sign;
#X text 200 14298 sign function;
#X obj 30 14325 math.sin;
#X text 200 14325 sine function;
#X obj 30 14352 math.sinh;
#X text 200 14352 hyperbolic sine function;
#X obj 30 14379 math.sinh~;
#X text 200 14379 hyperbolic sine for signals;
#X obj 30 14406 math.sin~;
#X text 200 14406 sine function;
#X obj 30 14433 math.sqrt;
#X text 200 14433 square root function;
#X obj 30 14460 math.sqrt~;
#X text 200 14460 square root for signal;
#X obj 30 14487 math.squared;
#X text 200 14487 value square;
#X obj 30 14514 math.squared~;
#X text 200 14514 signal value square;
#X obj 30 14541 math.sync_add;
#X text 200 14541 sync addition;
#X obj 30 14568 math.sync_and;
#X text 200 14568 sync logical AND operation;
#X obj 30 14595 math.sync_div;
#X text 200 14595 sync division;
#X obj 30 14622 math.sync_eq;
#X text 200 14622 sync equal numbers check;
#X obj 30 14649 math.sync_ge;
#X text 200 14649 sync greater equal numbers compare;
#X obj 30 14676 math.sync_gt;
#X text 200 14676 sync greater then numbers compare;
#X obj 30 14703 math.sync_le;
#X text 200 14703 sync less equal numbers compare;
#X obj 30 14730 math.sync_lshift;
#X text 200 14730 sync signed bit left shift;
#X obj 30 14757 math.sync_lt;
#X text 200 14757 sync less then numbers compare;
#X obj 30 14784 math.sync_mod;
#X text 200 14784 sync remainder of modulo division (float or integer);
#X obj 30 14811 math.sync_mul;
#X text 200 14811 sync multiplication;
#X obj 30 14838 math.sync_ne;
#X text 200 14838 sync numbers for not equality;
#X obj 30 14865 math.sync_or;
#X text 200 14865 sync logical OR operation;
#X obj 30 14892 math.sync_rshift;
#X text 200 14892 sync signed bit right shift;
#X obj 30 14919 math.sync_sub;
#X text 200 14919 sync subtraction;
#X obj 30 14946 math.sync_xor;
#X text 200 14946 sync logical XOR operation;
#X obj 30 14973 math.tan;
#X text 200 14973 tangent function;
#X obj 30 15000 math.tanh;
#X text 200 15000 hyperbolic tangent function;
#X obj 30 15027 math.tanh~;
#X text 200 15027 hyperbolic tangent for signals;
#X obj 30 15054 math.tan~;
#X text 200 15054 tangent function;
#X obj 30 15081 math.trunc;
#X text 200 15081 truncate to integer value;
#X obj 30 15108 math.trunc~;
#X text 200 15108 truncate to integer value;
#X obj 20 15135 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 15176 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15187 midi.arp;
#X text 200 15187 MIDI arpeggiator;
#X obj 30 15214 midi.cc;
#X text 200 15214 enhanced version of vanilla ctlin;
#X obj 30 15241 midi.clock;
#X text 200 15241 midi clock toolbox;
#X obj 30 15268 midi.ctl2str;
#X text 200 15268 convert Standard MIDI Controllers number to name;
#X obj 30 15295 midi.event2ctl;
#X text 200 15295 convert MidiEvent message to controller channel/value
pair;
#X obj 30 15322 midi.event2note;
#X text 200 15322 convert MidiEvent message to midi note/velocity pair;
#X obj 30 15349 midi.event2prg;
#X text 200 15349 convert MidiEvent message to midi program change
value;
#X obj 30 15376 midi.file;
#X text 200 15376 standard midi file SMF reader and writer;
#X obj 30 15403 midi.kbd;
#X text 200 15403 computer keyboard midi;
#X obj 30 15430 midi.key2str;
#X text 200 15430 convert key number to SPN name according to tonality;
#X obj 30 15457 midi.modus;
#X text 200 15457 snap/skip midi pitches according modus;
#X obj 30 15484 midi.note.pass;
#X text 200 15484 midi note pass by expression;
#X obj 30 15511 midi.oct;
#X text 200 15511 midi octave transpose;
#X obj 30 15538 midi.prg2str;
#X text 200 15538 convert GM Instrument number to name (string or symbol);
#X obj 30 15565 midi.split;
#X text 200 15565 midi note splitter;
#X obj 30 15592 midi.sustain;
#X text 200 15592 sustain pedal emulation;
#X obj 30 15619 midi.sysex;
#X text 200 15619 sysex input messages as list;
#X obj 30 15646 midi.track;
#X text 200 15646 extract track from MidiFile;
#X obj 30 15673 midi.tuning;
#X text 200 15673 apply tuning to midi messages;
#X obj 30 15700 midi.vramp;
#X text 200 15700 apply crescendo or diminuendo for midi message flow;
#X obj 30 15727 midi.vrand;
#X text 200 15727 midi velocity randomizer;
#X obj 20 15754 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 15795 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15806 click~;
#X text 200 15806 Output single impulse on bang;
#X obj 30 15833 fluid~;
#X text 200 15833 FluidSynth SoundFont 2 player;
#X obj 30 15860 modplug~;
#X text 200 15860 MOD file player (using libmodplug);
#X obj 30 15887 qrcode;
#X text 200 15887 QR code generator;
#X obj 30 15914 risset.gliss;
#X text 200 15914 Sheppard/Risset glissando calculator;
#X obj 30 15941 sfizz~;
#X text 200 15941 SFZ format sample player;
#X obj 30 15968 speech.flite;
#X text 200 15968 render speech to array;
#X obj 30 15995 speech.flite~;
#X text 200 15995 render speech to array;
#X obj 30 16022 speech.rhvoice~;
#X text 200 16022 RHVoice text to speech synthesis;
#X obj 20 16049 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 16090 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16101 loadexpr;
#X text 200 16101 send message when patch loads;
#X obj 30 16128 msg;
#X text 200 16128 message constructor;
#X obj 30 16155 msg.after;
#X text 200 16155 send specified message after incoming message;
#X obj 30 16182 msg.onclose;
#X text 200 16182 send message when patch closes;
#X obj 30 16209 msg.onload;
#X text 200 16209 send message when patch loads;
#X obj 30 16236 msg.sched;
#X text 200 16236 message scheduler;
#X obj 20 16263 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 16304 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16315 rhythm.euclid;
#X text 200 16315 euclid pattern generator;
#X obj 30 16342 rhythm.hexbeat;
#X text 200 16342 hexbeat pattern generator;
#X obj 30 16369 rhythm.lsystem;
#X text 200 16369 L-system pattern generator;
#X obj 20 16396 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 16437 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16448 net.artnet.send;
#X text 200 16448 ArtNet DMX message sender;
#X obj 30 16475 net.host2ip;
#X text 200 16475 returns IP address by DNS name;
#X obj 30 16502 net.http.send;
#X text 200 16502 HTTP request sender;
#X obj 30 16529 net.osc.receive;
#X text 200 16529 OSC message listener;
#X obj 30 16556 net.osc.send;
#X text 200 16556 OSC message sender;
#X obj 30 16583 net.osc.server;
#X text 200 16583 OSC server control;
#X obj 20 16610 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 16651 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16662 noise.baker;
#X text 200 16662 Part of a-chaos library;
#X obj 30 16689 noise.clifford;
#X text 200 16689 clifford attractor;
#X obj 30 16716 noise.collatz;
#X text 200 16716 collatz conjecture output;
#X obj 30 16743 noise.colored~;
#X text 200 16743 colored noise generator with an arbitrary spectral
roll;
#X obj 30 16770 noise.crackle~;
#X text 200 16770 sparse noise generator;
#X obj 30 16797 noise.duffing;
#X text 200 16797 duffing attractor;
#X obj 30 16824 noise.ginger;
#X text 200 16824 Gingerbreadman map chaotic generator;
#X obj 30 16851 noise.henon;
#X text 200 16851 henon attractor;
#X obj 30 16878 noise.henon_heilles;
#X text 200 16878 Hénon–Heiles_system;
#X obj 30 16905 noise.henon_phase;
#X text 200 16905 henon phase Ddagrams;
#X obj 30 16932 noise.henonf;
#X text 200 16932 Henon phase;
#X obj 30 16959 noise.ikeda;
#X text 200 16959 Ikeda attractor;
#X obj 30 16986 noise.lfreq0~;
#X text 200 16986 sampled/held noise (piecewise constant);
#X obj 30 17013 noise.lfreq~;
#X text 200 17013 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 17040 noise.lorenz;
#X text 200 17040 Lorenz chaos;
#X obj 30 17067 noise.lyapunov;
#X text 200 17067 lyapunov random attractor;
#X obj 30 17094 noise.navier_stokes;
#X text 200 17094 navier-stokes diff equations;
#X obj 30 17121 noise.pink~;
#X text 200 17121 Pink noise generator;
#X obj 30 17148 noise.rossler;
#X text 200 17148 Rössler attractor;
#X obj 30 17175 noise.stein;
#X text 200 17175 Stein distribution;
#X obj 30 17202 noise.torus;
#X text 200 17202 torus attractor;
#X obj 30 17229 noise.verhulst;
#X text 200 17229 verhulst distribution;
#X obj 30 17256 noise.white~;
#X text 200 17256 White noise generator;
#X obj 20 17283 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 17324 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17335 osc.blit~;
#X text 200 17335 Bandlimited impulse train oscillator;
#X obj 30 17362 osc.impulse~;
#X text 200 17362 Bandlimited impulse train generator;
#X obj 30 17389 osc.pulse~;
#X text 200 17389 Bandlimited pulse train oscillator;
#X obj 30 17416 osc.saw4~;
#X text 200 17416 Bandlimited sawtooth wave;
#X obj 30 17443 osc.saw~;
#X text 200 17443 Alias-free sawtooth wave;
#X obj 30 17470 osc.sinfb~;
#X text 200 17470 Sine oscilator with feedback;
#X obj 30 17497 osc.sin~;
#X text 200 17497 Sine wave oscillator;
#X obj 30 17524 osc.square~;
#X text 200 17524 Bandlimited square wave oscillator;
#X obj 30 17551 osc.tri~;
#X text 200 17551 Bandlimited triangle wave oscillator;
#X obj 20 17578 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 17619 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17630 canvas.active;
#X text 200 17630 checks if canvas window is on top and active;
#X obj 30 17657 canvas.current;
#X text 200 17657 verbose information about current canvas;
#X obj 30 17684 canvas.dir;
#X text 200 17684 current canvas directory;
#X obj 30 17711 canvas.name;
#X text 200 17711 current canvas name;
#X obj 30 17738 canvas.path;
#X text 200 17738 current canvas fullpath;
#X obj 30 17765 canvas.top;
#X text 200 17765 verbose information about top-level canvas;
#X obj 30 17792 patch.args;
#X text 200 17792 Get patch or subpatch arguments;
#X obj 30 17819 patch.deps;
#X text 200 17819 patch dependencies: used objects and abstractions;
#X obj 30 17846 patch.tree;
#X text 200 17846 patch tree;
#X obj 20 17873 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 17914 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17925 file.size;
#X text 200 17925 output file size;
#X obj 30 17952 path.basename;
#X text 200 17952 outputs filename portion of pathname;
#X obj 30 17979 path.dirname;
#X text 200 17979 outputs directory portion of pathname;
#X obj 30 18006 path.exists;
#X text 200 18006 checks if given path exists;
#X obj 30 18033 path.file;
#X text 200 18033 file input/output;
#X obj 30 18060 path.is_dir;
#X text 200 18060 check if path is directory;
#X obj 30 18087 path.lsdir;
#X text 200 18087 list directory contents;
#X obj 30 18114 path.monitor;
#X text 200 18114 filesystem event monitor;
#X obj 30 18141 path.normalize;
#X text 200 18141 normalize file paths;
#X obj 30 18168 path.pattern;
#X text 200 18168 pattern filename generator;
#X obj 30 18195 path.search;
#X text 200 18195 file search;
#X obj 30 18222 path.split;
#X text 200 18222 file path split;
#X obj 20 18249 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 18290 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18301 is_any;
#X text 200 18301 checks if input data has *any* type;
#X obj 30 18328 is_bang;
#X text 200 18328 checks if input data has *bang* type;
#X obj 30 18355 is_data;
#X text 200 18355 checks if input data has *data* type;
#X obj 30 18382 is_dict;
#X text 200 18382 checks if input data has *dict* type;
#X obj 30 18409 is_even;
#X text 200 18409 checks if input number is even;
#X obj 30 18436 is_file;
#X text 200 18436 checks if file exists and accessible;
#X obj 30 18463 is_float;
#X text 200 18463 checks if input data has *float* type;
#X obj 30 18490 is_list;
#X text 200 18490 checks if input data has *list* type;
#X obj 30 18517 is_odd;
#X text 200 18517 checks if input number is odd;
#X obj 30 18544 is_pointer;
#X text 200 18544 checks if input data has *pointer* type;
#X obj 30 18571 is_prop;
#X text 200 18571 checks if input message is *property* message;
#X obj 30 18598 is_symbol;
#X text 200 18598 checks if input data has *symbol* type;
#X obj 20 18625 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 18666 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18677 preset.float;
#X text 200 18677 load/store float preset;
#X obj 30 18704 preset.list;
#X text 200 18704 load/store symbol preset;
#X obj 30 18731 preset.storage;
#X text 200 18731 preset storage control;
#X obj 30 18758 preset.symbol;
#X text 200 18758 load/store symbol preset;
#X obj 20 18785 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 18826 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18837 patch.props;
#X text 200 18837 patch properties manager;
#X obj 30 18864 prop;
#X text 200 18864 get/set named property value for subpatch or abstraction;
#X obj 30 18891 prop.declare;
#X text 200 18891 declare named property for subpatch or abstraction;
#X obj 30 18918 prop.get;
#X text 200 18918 get property from connected object/subpatch/abstraction;
#X obj 30 18945 prop.get~;
#X text 200 18945 Property extractor from sound stream;
#X obj 30 18972 prop.join;
#X text 200 18972 join property to main data flow;
#X obj 30 18999 prop.random;
#X text 200 18999 property randomizer;
#X obj 30 19026 prop.set;
#X text 200 19026 set property for connected object/subpatch/abstraction;
#X obj 30 19053 prop.split;
#X text 200 19053 separate properties from dataflow;
#X obj 20 19080 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 19121 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19132 proto.feelworld;
#X text 200 19132 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 19159 proto.firmata;
#X text 200 19159 Firmata Arduino protocol support;
#X obj 30 19186 proto.inscore;
#X text 200 19186 INScore message creator;
#X obj 30 19213 proto.ltc.in~;
#X text 200 19213 LTC decoder;
#X obj 30 19240 proto.ltc.out~;
#X text 200 19240 LTC encoder;
#X obj 30 19267 proto.midi;
#X text 200 19267 raw midi encoder/parser;
#X obj 30 19294 proto.midi.cc;
#X text 200 19294 raw midi CC encoder/parser;
#X obj 30 19321 proto.midi.sysex;
#X text 200 19321 raw midi SYSex encoder/parser;
#X obj 30 19348 proto.moppy;
#X text 200 19348 protocol for Musical flOPPY controller;
#X obj 30 19375 proto.morse;
#X text 200 19375 Morse encoder;
#X obj 30 19402 proto.mpv;
#X text 200 19402 mpv video player control;
#X obj 30 19429 proto.sp.alpaca;
#X text 200 19429 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 19456 proto.vlc;
#X text 200 19456 VLC video player control over HTTP;
#X obj 30 19483 proto.whammy;
#X text 200 19483 Control for Digitech Whammy pedal;
#X obj 30 19510 proto.xtouch_ext;
#X text 200 19510 Behringer XTouch Extender XMidi protocol;
#X obj 20 19537 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 19578 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19589 random.atom;
#X text 200 19589 weighted atom generation from specified list;
#X obj 30 19616 random.discrete;
#X text 200 19616 random weighted integers on interval [0 \, n);
#X obj 30 19643 random.float;
#X text 200 19643 uniform random float generator in specified range;
#X obj 30 19670 random.gauss;
#X text 200 19670 gaussian random distribution;
#X obj 30 19697 random.int;
#X text 200 19697 uniform random integer generator in specified range;
#X obj 30 19724 random.linear;
#X text 200 19724 random linear distribution;
#X obj 30 19751 random.pw_const;
#X text 200 19751 piecewise constant random distribution;
#X obj 30 19778 random.pw_lin;
#X text 200 19778 piecewise linear random distribution;
#X obj 20 19805 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 19846 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19857 samp.time~;
#X text 200 19857 sample counter;
#X obj 20 19884 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 19925 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19936 seq.arp;
#X text 200 19936 sequence arpeggiator;
#X obj 30 19963 seq.bangs;
#X text 200 19963 bang sequencer;
#X obj 30 19990 seq.counter;
#X text 200 19990 sequencer counter;
#X obj 30 20017 seq.life;
#X text 200 20017 Conway gamw of life sequencer;
#X obj 30 20044 seq.matrix;
#X text 200 20044 sequencer control for ui.matrix;
#X obj 30 20071 seq.nbangs;
#X text 200 20071 output specified number of bang with time intervals;
#X obj 30 20098 seq.phasor;
#X text 200 20098 control rate phasor (saw) generator;
#X obj 30 20125 seq.toggles;
#X text 200 20125 toggle sequencer;
#X obj 30 20152 sequencer;
#X text 200 20152 basic sequence player;
#X obj 20 20179 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 20220 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20231 snd.file;
#X text 200 20231 Sound file loader on steroids;
#X obj 20 20258 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 20299 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20310 hoa.2d.decoder~;
#X text 200 20310 hoa 2d decoder;
#X obj 30 20337 hoa.2d.encoder~;
#X text 200 20337 hoa 2d encoder;
#X obj 30 20364 hoa.2d.map~;
#X text 200 20364 a 2d ambisonic multisource spatializer;
#X obj 30 20391 hoa.2d.optim~;
#X text 200 20391 a 2D ambisonic optimization tool;
#X obj 30 20418 hoa.2d.projector~;
#X text 200 20418 a plane waves decomposer from circular harmonics
domain;
#X obj 30 20445 hoa.2d.recomposer~;
#X text 200 20445 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 20485 hoa.2d.rotate~;
#X text 200 20485 a 2D ambisonic sound field rotation;
#X obj 30 20512 hoa.2d.wider~;
#X text 200 20512 a 2d fractional ambisonic order simulator;
#X obj 30 20539 hoa.@process;
#X text 200 20539 process properties manager for hoa.process~;
#X obj 30 20566 hoa.in;
#X text 200 20566 message inlet for a patcher loaded by hoa.process~;
#X obj 30 20593 hoa.in~;
#X text 200 20593 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20620 hoa.out;
#X text 200 20620 message outlet for a patcher loaded by hoa.process~;
#X obj 30 20647 hoa.out~;
#X text 200 20647 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20674 hoa.process~;
#X text 200 20674 patcher loader for multichannel processing;
#X obj 30 20704 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 20701 a 2d ambisonic harmonic scope;
#X obj 30 20726 pan.cos~;
#X text 200 20726 two channel equal power sine/cosine panner;
#X obj 30 20753 pan.linsig~;
#X text 200 20753 two channel linear panner with signal control;
#X obj 30 20780 pan.lin~;
#X text 200 20780 two channel linear panner;
#X obj 30 20807 pan.spread~;
#X text 200 20807 spreads input channels across the stereo field;
#X obj 30 20834 pan.sqrt~;
#X text 200 20834 two channel equal power square root panner;
#X obj 30 20861 spat.pan4~;
#X text 200 20861 GMEM SPAT: 4-outputs spatializer;
#X obj 30 20888 spat.pan8~;
#X text 200 20888 GMEM SPAT: 8-outputs spatializer;
#X obj 30 20915 spat.zita6x8~;
#X text 200 20915 spat with 6 inputs sources to 8 channel output;
#X obj 30 20942 spat.zita8~;
#X text 200 20942 8 channel reverb spatializer;
#X obj 20 20969 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 21010 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21021 string;
#X text 200 21021 string constructor;
#X obj 30 21048 string.contains;
#X text 200 21048 checks if string contains specified substring;
#X obj 30 21075 string.ends_with;
#X text 200 21075 checks if string ends with specified substring;
#X obj 30 21102 string.equal;
#X text 200 21102 check strings or symbols for equality;
#X obj 30 21129 string.format;
#X text 200 21129 formats string like printf.;
#X obj 30 21156 string.join;
#X text 200 21156 joins (concatenates) list to string with separator;
#X obj 30 21183 string.length;
#X text 200 21183 number of characters in string (unicode supported);
#X obj 30 21210 string.match;
#X text 200 21210 check if string match regular expression;
#X obj 30 21237 string.remove;
#X text 200 21237 remove substring from input string;
#X obj 30 21264 string.replace;
#X text 200 21264 replace from one substring to another in input string;
#X obj 30 21291 string.split;
#X text 200 21291 split string or symbol by separator;
#X obj 30 21318 string.starts_with;
#X text 200 21318 checks if string starts with specified substring;
#X obj 30 21345 string.substr;
#X text 200 21345 extract substring from input string;
#X obj 30 21372 string2symbol;
#X text 200 21372 converts string to symbol;
#X obj 20 21399 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 21440 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21451 symbol.equal;
#X text 200 21451 check symbols for equality;
#X obj 30 21478 symbol.length;
#X text 200 21478 number of characters in symbol (unicode supported);
#X obj 30 21505 symbol.num_compare;
#X text 200 21505 numeric symbol compare;
#X obj 30 21532 symbol2any;
#X text 200 21532 converts symbol or string to message;
#X obj 30 21559 symbol2intlist;
#X text 200 21559 converts symbol to list of character codes;
#X obj 20 21586 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 21627 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21638 noise.chua~;
#X text 200 21638 Chua's diode circuit;
#X obj 30 21665 synth.bee3~;
#X text 200 21665 Hammond-oid organ FM synthesis instrument;
#X obj 30 21692 synth.birds~;
#X text 200 21692 bird singing generator;
#X obj 30 21719 synth.church_bell~;
#X text 200 21719 generic church bell modal model;
#X obj 30 21746 synth.clap~;
#X text 200 21746 clap synth from faust libraries;
#X obj 30 21773 synth.dubdub~;
#X text 200 21773 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 21813 synth.dx7~;
#X text 200 21813 FAUST dx7 implementation;
#X obj 30 21840 synth.eguitar~;
#X text 200 21840 simple electric guitar model with steel strings;
#X obj 30 21867 synth.english_bell~;
#X text 200 21867 english church bell modal model;
#X obj 30 21894 synth.fgrain~;
#X text 200 21894 file granulator from STK;
#X obj 30 21921 synth.french_bell~;
#X text 200 21921 french church bell modal model;
#X obj 30 21948 synth.german_bell~;
#X text 200 21948 german church bell modal model;
#X obj 30 21975 synth.glass_harm~;
#X text 200 21975 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 22002 synth.glitch~;
#X text 200 22002 Glitch synthesizer by naivesound;
#X obj 30 22029 synth.harpsichord~;
#X text 200 22029 waveguide commuted harpsichord;
#X obj 30 22056 synth.hat~;
#X text 200 22056 hi-hat synth from faust librariest;
#X obj 30 22083 synth.kick2~;
#X text 200 22083 low-kick synth from faust librariest;
#X obj 30 22110 synth.kick~;
#X text 200 22110 low-kick synth from Guitarix project;
#X obj 30 22137 synth.ks~;
#X text 200 22137 Karplus-Strong string;
#X obj 30 22164 synth.marimba~;
#X text 200 22164 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 22204 synth.metro~;
#X text 200 22204 ready to use metronome synth;
#X obj 30 22231 synth.piano~;
#X text 200 22231 waveguide commuted piano;
#X obj 30 22258 synth.rhodey~;
#X text 200 22258 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 22285 synth.risset_arp~;
#X text 200 22285 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 22312 synth.risset_bell~;
#X text 200 22312 Jean Claude Risset's bell synth;
#X obj 30 22339 synth.risset_tone~;
#X text 200 22339 Jean Claude Risset's endless glissando;
#X obj 30 22366 synth.russian_bell~;
#X text 200 22366 russian church bell modal model;
#X obj 30 22393 synth.shakers~;
#X text 200 22393 various percussion sounds from STK library;
#X obj 30 22420 synth.sitar~;
#X text 200 22420 STK sitar;
#X obj 30 22447 synth.snare~;
#X text 200 22447 Snare drum synth from Guitarix project;
#X obj 30 22474 synth.standard_bell~;
#X text 200 22474 german church bell modal model;
#X obj 30 22501 synth.tube_bell~;
#X text 200 22501 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 22528 synth.voice_fofc~;
#X text 200 22528 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 22555 synth.voice_fofs~;
#X text 200 22555 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 22582 synth.wurley~;
#X text 200 22582 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 22609 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 22650 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22661 system.colorpanel;
#X text 200 22661 System color panel dialog popup;
#X obj 30 22688 system.cursor;
#X text 200 22688 Output cursor motion \, mousewheel and button clicks;
#X obj 30 22715 system.exec;
#X text 200 22715 run external command in separate process;
#X obj 30 22742 system.exit;
#X text 200 22742 quit PureData;
#X obj 30 22769 system.getenv;
#X text 200 22769 Get system environment variables;
#X obj 30 22796 system.hostname;
#X text 200 22796 outputs system hostname;
#X obj 30 22823 system.memsize;
#X text 200 22823 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 22863 system.memused;
#X text 200 22863 returns the process physical memory use - current
and peak;
#X obj 30 22890 system.screen_size;
#X text 200 22890 returns current screen size in pixels;
#X obj 20 22917 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 22958 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22969 tl.bang;
#X text 200 22969 Timeline bang (with possible delay);
#X obj 30 22999 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 22996 Timeline section;
#X obj 30 23021 tl.timeline;
#X text 200 23021 Timeline - event scheduler;
#X obj 30 23048 tl.toggle;
#X text 200 23048 Timeline bang;
#X obj 30 23075 tl.transport;
#X text 200 23075 Timeline transport control;
#X obj 20 23102 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 23143 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23157 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 23154 array view with cursor and selection;
#X obj 30 23182 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 23179 A bang... that's all;
#X obj 30 23207 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 23204 button widget;
#X obj 30 23232 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 23229 colorchooser widget;
#X obj 30 23257 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 23254 Display GUI object;
#X obj 30 23282 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 23279 GUI for turning DSP on/off;
#X obj 30 23307 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 23304 envelope editor widget;
#X obj 30 23332 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 23329 UI filter object calculator for biquad filter;
#X obj 30 23357 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 23354 UI filter object based on biquad filter;
#X obj 30 23382 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 23379 UI stereo gain control;
#X obj 30 23407 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 23404 UI gain control;
#X obj 30 23432 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 23429 simple icon with button capabilities;
#X obj 30 23457 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 23454 value increment/decrement;
#X obj 30 23482 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 23479 keyboard widget;
#X obj 30 23507 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 23504 knob widget;
#X obj 30 23532 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 23529 simple label widget;
#X obj 30 23557 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 23554 black and white bitmap display;
#X obj 30 23582 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 23579 Hyperlink widget;
#X obj 30 23607 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 23604 The matrix of toggles has you.;
#X obj 30 23632 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 23629 Dropdown menu;
#X obj 30 23657 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 23654 Shows peak and rms signal level;
#X obj 30 23682 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 23679 incoming MIDI message viewport;
#X obj 30 23707 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 23704 filter mouse events from ui objects;
#X obj 30 23732 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 23729 routes mouse events from ui objects;
#X obj 30 23757 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 23754 counterpart of the vanilla [nbx];
#X obj 30 23782 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 23779 counterpart of the vanilla [nbx] for signal;
#X obj 30 23807 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 23804 signal plotter;
#X obj 30 23832 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 23829 2D slider in polar coordinates;
#X obj 30 23857 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 23854 Preset manager;
#X obj 30 23882 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 23879 counterpart of the vanilla radio toggle;
#X obj 30 23907 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 23904 range slider;
#X obj 30 23932 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 23929 Scope GUI object;
#X obj 30 23957 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 23954 counterpart of the vanilla slider;
#X obj 30 23982 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 23979 2D slider widget;
#X obj 30 24007 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 24004 Multiple slider widget;
#X obj 30 24032 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 24029 Spectroscope GUI object;
#X obj 30 24057 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 24054 displays a list of text buttons or text toggles;
#X obj 30 24082 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 24079 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 24104 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 24104 version: v0.9.6 \, license: GPL3;
#X obj 20 24132 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 24155 ui.link @title Generated with pddoc v0.7 @url
http://github.com/uliss/pddoc;
#X obj 670 24119 loadmsg 0;
#X obj 670 24154 switch~;
#X connect 1688 0 1689 0;