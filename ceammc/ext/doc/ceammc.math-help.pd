#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 376 50 cnv 1 364 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 376 50 math objects. can operate with list of numbers.;
#X obj 30 116 math.abs;
#X text 200 116 absolute value function;
#X obj 30 143 math.abs~;
#X text 200 143 absolute value function for signals;
#X obj 30 170 math.acos;
#X text 200 170 arc cosine function;
#X obj 30 197 math.acosh;
#X text 200 197 inverse hyperbolic cosine function;
#X obj 30 224 math.acos~;
#X text 200 224 arc cosine function for signals;
#X obj 30 251 math.and;
#X text 200 251 operation AND for multiple arguments;
#X obj 30 278 math.approx;
#X text 200 278 check if input value approximately equal to pattern;
#X obj 30 305 math.asin;
#X text 200 305 arc sine function;
#X obj 30 332 math.asinh;
#X text 200 332 inverse hyperbolic sine function;
#X obj 30 359 math.atan;
#X text 200 359 arc tangent function;
#X obj 30 386 math.atanh;
#X text 200 386 inverse hyperbolic tangent function;
#X obj 30 413 math.cabs~;
#X text 200 413 magnitude of a complex signals;
#X obj 30 440 math.carg~;
#X text 200 440 phase angle of a complex signals;
#X obj 30 467 math.cbrt;
#X text 200 467 cube root function;
#X obj 30 494 math.cdiv~;
#X text 200 494 division of complex signals;
#X obj 30 521 math.ceil;
#X text 200 521 round to smallest integral value not less than input
value;
#X obj 30 548 math.cmul~;
#X text 200 548 multiplication of complex signals;
#X obj 30 575 math.cos;
#X text 200 575 cosine function;
#X obj 30 602 math.cosh;
#X text 200 602 hyperbolic cosine function;
#X obj 30 629 math.div;
#X text 200 629 division (on lists too);
#X obj 30 656 math.e;
#X text 200 656 mathematical constant \, base of the natural logarithm;
#X obj 30 683 math.exp;
#X text 200 683 exponential functions;
#X obj 30 710 math.exp2;
#X text 200 710 exponential functions;
#X obj 30 737 math.exp2~;
#X text 200 737 base-2 exponential for signal;
#X obj 30 764 math.expr;
#X text 200 764 dynamic [expr];
#X obj 30 791 math.floor;
#X text 200 791 round to largest integral value not greater than x;
#X obj 30 818 math.gcd;
#X text 200 818 calculate greatest common divisor;
#X obj 30 845 math.inf;
#X text 200 845 infinity value that cannot be represented accurately;
#X obj 30 872 math.lcm;
#X text 200 872 calculate least common multiple;
#X obj 30 899 math.log;
#X text 200 899 logarithm functions;
#X obj 30 926 math.log10;
#X text 200 926 logarithm functions;
#X obj 30 953 math.log2;
#X text 200 953 logarithm functions;
#X obj 30 980 math.mul;
#X text 200 980 multiplication (on lists too);
#X obj 30 1007 math.nan;
#X text 200 1007 Not a Number \, unrepresentable value;
#X obj 30 1034 math.neg;
#X text 200 1034 negate function;
#X obj 30 1061 math.or;
#X text 200 1061 operation OR for multiple arguments;
#X obj 30 1088 math.pi;
#X text 200 1088 mathematical constant;
#X obj 30 1115 math.pi~;
#X text 200 1115 mathematical constant;
#X obj 30 1142 math.polyeval;
#X text 200 1142 evaluates the polynomial described by the coefficients
list;
#X obj 30 1169 math.reciprocal;
#X text 200 1169 calculate reciprocal number;
#X obj 30 1196 math.reciprocal~;
#X text 200 1196 calculate reciprocal number for signals;
#X obj 30 1223 math.round;
#X text 200 1223 round to integral value \, regardless of rounding
direction;
#X obj 30 1250 math.round~;
#X text 200 1250 signal round;
#X obj 30 1277 math.sign;
#X text 200 1277 sign function;
#X obj 30 1304 math.sin;
#X text 200 1304 sine function;
#X obj 30 1331 math.sinh;
#X text 200 1331 hyperbolic sine function;
#X obj 30 1358 math.sqrt;
#X text 200 1358 square root function;
#X obj 30 1385 math.squared;
#X text 200 1385 value square;
#X obj 30 1412 math.squared~;
#X text 200 1412 signal value square;
#X obj 30 1439 math.sync_add;
#X text 200 1439 sync addition;
#X obj 30 1466 math.sync_and;
#X text 200 1466 sync logical AND operation;
#X obj 30 1493 math.sync_div;
#X text 200 1493 sync division;
#X obj 30 1520 math.sync_eq;
#X text 200 1520 sync equal numbers check;
#X obj 30 1547 math.sync_ge;
#X text 200 1547 sync greater equal numbers compare;
#X obj 30 1574 math.sync_gt;
#X text 200 1574 sync greater then numbers compare;
#X obj 30 1601 math.sync_le;
#X text 200 1601 sync less equal numbers compare;
#X obj 30 1628 math.sync_lt;
#X text 200 1628 sync less then numbers compare;
#X obj 30 1655 math.sync_mod;
#X text 200 1655 sync remainder of modulo division (float or integer);
#X obj 30 1682 math.sync_mul;
#X text 200 1682 sync multiplication;
#X obj 30 1709 math.sync_ne;
#X text 200 1709 sync numbers for not equality;
#X obj 30 1736 math.sync_or;
#X text 200 1736 sync logical OR operation;
#X obj 30 1763 math.sync_sub;
#X text 200 1763 sync subtraction;
#X obj 30 1790 math.sync_xor;
#X text 200 1790 sync logical XOR operation;
#X obj 30 1817 math.tan;
#X text 200 1817 tangent function;
#X obj 30 1844 math.tanh;
#X text 200 1844 hyperbolic tangent function;
#X obj 30 1871 math.trunc;
#X text 200 1871 truncate to integer value;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::math 20 20 0 20 -104026
-4096 0;
#X obj 1 1898 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 1908 library: ceammc;