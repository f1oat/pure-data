// this is autogenerated file, do not edit!
#ifndef LABEL_H_
#define LABEL_H_
// clang-format off

#include "nui/model.h"
#include "nui/style.h"
#include "m_pd.h"

#include <tuple>

namespace ceammc {
namespace ui {

enum LabelDataFields {
    LABEL_DATA_TEXT,
    LABEL_DATA_TOOLTIP,
    LABEL_DATA_COLOR,
    LABEL_DATA_FONT,
    LABEL_DATA_STYLE_IDX,
};

class LabelData
    : public std::tuple<t_symbol*, t_symbol*, HexColor, Font, int> {
public:
    LabelData()
        : std::tuple<t_symbol*, t_symbol*, HexColor, Font, int>(&s_, &s_, colors::st_text, Font(), 0) { }

    LabelData(int style)
        : LabelData() {
        setStyle(style);
        loadStyle(style);
    }


    // getters
    t_symbol* text() const noexcept { return std::get<LABEL_DATA_TEXT>(*this); }
    t_symbol* tooltip() const noexcept { return std::get<LABEL_DATA_TOOLTIP>(*this); }
    HexColor color() const noexcept { return std::get<LABEL_DATA_COLOR>(*this); }
    Font font() const noexcept { return std::get<LABEL_DATA_FONT>(*this); }
    int style() const noexcept { return std::get<LABEL_DATA_STYLE_IDX>(*this); }

    // setters
    void setText(t_symbol* v) { std::get<LABEL_DATA_TEXT>(*this) = v; }
    void setTooltip(t_symbol* v) { std::get<LABEL_DATA_TOOLTIP>(*this) = v; }
    void setColor(HexColor v) { std::get<LABEL_DATA_COLOR>(*this) = v; }
    void setFont(Font v) { std::get<LABEL_DATA_FONT>(*this) = v; }
    void setStyle(int v) { std::get<LABEL_DATA_STYLE_IDX>(*this) = v; }

    // style
    void loadStyle(int st) {
        using sc = StyleCollection;
        setColor(sc::color(st, "label:color"_hash, colors::st_text));
        setFont(sc::font(st, "label:font"_hash, Font()));
    }
};

using LabelModel = ModelBase<LabelData>;

}
}

// clang-format on
#endif
