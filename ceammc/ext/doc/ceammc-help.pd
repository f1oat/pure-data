#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.seq;
#X text 200 880 metro sequencer;
#X obj 30 907 mix~;
#X text 200 907 multislot signal mixer;
#X obj 30 934 obj.props;
#X text 200 934 property extractor;
#X obj 30 961 radio;
#X text 200 961 float index to outlet values as radio switch;
#X obj 30 988 window;
#X text 200 988 returns window value by given window position;
#X obj 30 1015 xfade2~;
#X text 200 1015 multi stereo-signal crossfade;
#X obj 30 1042 xfade~;
#X text 200 1042 multi signal crossfade;
#X obj 20 1069 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1110 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1121 array.p2s;
#X text 200 1121 convert array phase [0\..1] to sample position;
#X obj 30 1148 array.s2p;
#X text 200 1148 convert array sample position to relative phase position
[0\..1];
#X obj 30 1188 conv.amp2dbfs;
#X text 200 1188 convert from amplitude to decibel full scale;
#X obj 30 1215 conv.bpm2hz;
#X text 200 1215 converts BPM to frequency in herz;
#X obj 30 1242 conv.bpm2ms;
#X text 200 1242 convert frequency in BPM to period in milliseconds;
#X obj 30 1269 conv.bpm2sec;
#X text 200 1269 convert frequency in BPM to period in seconds;
#X obj 30 1296 conv.cc2amp;
#X text 200 1296 convert from MIDI Control Change range;
#X obj 30 1323 conv.dbfs2amp;
#X text 200 1323 convert decibel full scale to amplitude;
#X obj 30 1350 conv.lin2curve;
#X text 200 1350 map linear to exponential range with 0 allowed.;
#X obj 30 1377 conv.lin2exp;
#X text 200 1377 maps linear range to exponential range;
#X obj 30 1404 conv.lin2lin;
#X text 200 1404 convert from one linear range to another;
#X obj 30 1431 conv.list2props;
#X text 200 1431 converts list to series of property messages;
#X obj 30 1458 conv.midi2freq;
#X text 200 1458 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1498 conv.pitch2midi;
#X text 200 1498 converts symbol pitch name to MIDI note number;
#X obj 30 1525 conv.samp2sec;
#X text 200 1525 convert samples to time according to samplerate;
#X obj 30 1552 conv.sec2samp;
#X text 200 1552 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1592 conv.sec2str;
#X text 200 1592 converts float time in seconds to formated symbol
(or string);
#X obj 30 1619 conv.str2sec;
#X text 200 1619 converts formatted time to float value in seconds;
#X obj 20 1646 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1687 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1698 data.dict;
#X text 200 1698 dictionary container: store values by key;
#X obj 30 1725 data.fifo;
#X text 200 1725 First-In-First-Out (FIFO) queue data container;
#X obj 30 1752 data.float;
#X text 200 1752 robust float object;
#X obj 30 1779 data.int;
#X text 200 1779 robust int object;
#X obj 30 1806 data.list;
#X text 200 1806 list container;
#X obj 30 1833 data.mlist;
#X text 200 1833 multidimensional list container;
#X obj 30 1860 data.set;
#X text 200 1860 container that store unique elements;
#X obj 30 1887 data.set2list;
#X text 200 1887 converts set to list;
#X obj 30 1914 dict.contains;
#X text 200 1914 predicate to check dict contains key;
#X obj 30 1941 dict.each;
#X text 200 1941 map each value in dict;
#X obj 30 1968 dict.from_list;
#X text 200 1968 creates dictionary from list;
#X obj 30 1995 dict.get;
#X text 200 1995 on input dict outputs value to corresponding key outlet;
#X obj 30 2022 dict.keys;
#X text 200 2022 get list of dict keys;
#X obj 30 2049 dict.pass;
#X text 200 2049 passes specified keys in dict;
#X obj 30 2076 dict.reject;
#X text 200 2076 rejects specified keys from dict;
#X obj 30 2103 dict.size;
#X text 200 2103 dictionary size;
#X obj 30 2130 dict.to_list;
#X text 200 2130 converts dictionary to plain list;
#X obj 30 2157 dict.values;
#X text 200 2157 dictionary values as mlist;
#X obj 30 2184 mlist.flatten;
#X text 200 2184 flatten nested mlist;
#X obj 30 2211 set.contains;
#X text 200 2211 check if specified element is in set;
#X obj 30 2238 set.diff;
#X text 200 2238 difference between two sets;
#X obj 30 2265 set.equal;
#X text 200 2265 checks if two sets are equal (contains same elements);
#X obj 30 2292 set.intersect;
#X text 200 2292 output intersection of given sets;
#X obj 30 2319 set.size;
#X text 200 2319 get number of elements in set;
#X obj 30 2346 set.symdiff;
#X text 200 2346 symmetric difference between two sets;
#X obj 30 2373 set.union;
#X text 200 2373 output union of given sets;
#X obj 20 2400 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2441 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2452 dyn.comp2~;
#X text 200 2452 stereo dynamic range compressor;
#X obj 30 2479 dyn.comp~;
#X text 200 2479 mono dynamic range compressors;
#X obj 30 2506 dyn.gate2~;
#X text 200 2506 stereo signal gate;
#X obj 30 2533 dyn.gate~;
#X text 200 2533 mono signal gate;
#X obj 30 2560 dyn.limit2~;
#X text 200 2560 stereo 1176LN Peak Limiter;
#X obj 30 2587 dyn.limit~;
#X text 200 2587 mono 1176LN Peak Limiter;
#X obj 30 2614 dyn.softclip~;
#X text 200 2614 soft signal clip;
#X obj 20 2641 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2682 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2693 env.adsr~;
#X text 200 2693 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2720 env.ar~;
#X text 200 2720 Attack/Release envelope generator;
#X obj 30 2747 env.asr~;
#X text 200 2747 Attack/Sustain/Release envelope generator;
#X obj 30 2774 env.concat;
#X text 200 2774 Envelope concatenation;
#X obj 30 2801 env.follow~;
#X text 200 2801 Envelope follower with independent attack and release
times;
#X obj 30 2828 env.mix;
#X text 200 2828 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2868 env.smooth~;
#X text 200 2868 An envelope with an exponential attack and release;
#X obj 30 2895 env.tscale;
#X text 200 2895 Envelope time-scale;
#X obj 30 2922 env.tshift;
#X text 200 2922 Envelope time-shift (horizontal);
#X obj 30 2949 env.vscale;
#X text 200 2949 Envelope value-scale;
#X obj 30 2976 env2array;
#X text 200 2976 Renders envelope to specified array;
#X obj 30 3003 env2vline;
#X text 200 3003 Converts envelope to bunch of vline messages;
#X obj 30 3030 envelope;
#X text 200 3030 Envelope data type;
#X obj 30 3057 vline2env;
#X text 200 3057 Converts vline messages to env;
#X obj 20 3084 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3125 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3136 expand_env;
#X text 200 3136 Substitute enviroment variables in data stream;
#X obj 30 3163 flow.append;
#X text 200 3163 inject message into flow;
#X obj 30 3190 flow.change;
#X text 200 3190 rejects redundant input values;
#X obj 30 3217 flow.count;
#X text 200 3217 control flow event counter;
#X obj 30 3244 flow.demultiplex;
#X text 200 3244 control flow demultiplexer;
#X obj 30 3271 flow.demultiplex2~;
#X text 200 3271 audio stream stereo demultiplexer;
#X obj 30 3298 flow.demultiplex~;
#X text 200 3298 audio stream demultiplexer;
#X obj 30 3325 flow.gate;
#X text 200 3325 control flow gate. [spigot] analog;
#X obj 30 3352 flow.group;
#X text 200 3352 group data atoms in list of specified size;
#X obj 30 3379 flow.interval;
#X text 200 3379 measure time between flow events;
#X obj 30 3406 flow.less;
#X text 200 3406 numeric stream router \, like many [moses];
#X obj 30 3433 flow.less_eq;
#X text 200 3433 numeric stream router \, like many [moses];
#X obj 30 3460 flow.multiplex;
#X text 200 3460 control flow multiplexer;
#X obj 30 3487 flow.multiplex2~;
#X text 200 3487 audio stream stereo multiplexer;
#X obj 30 3514 flow.multiplex~;
#X text 200 3514 audio stream multiplexer;
#X obj 30 3541 flow.once;
#X text 200 3541 one message pass thru;
#X obj 30 3568 flow.pass;
#X text 200 3568 pass specified values;
#X obj 30 3595 flow.pass_if;
#X text 200 3595 pass values that accepted by predicate object;
#X obj 30 3622 flow.reject;
#X text 200 3622 reject specified values;
#X obj 30 3649 flow.reject_if;
#X text 200 3649 reject values by predicate;
#X obj 30 3676 flow.route;
#X text 200 3676 advanced message router;
#X obj 30 3703 flow.speedlim;
#X text 200 3703 control stream speed limiter;
#X obj 30 3730 flow.split;
#X text 200 3730 split data flow by external side-chain predicate;
#X obj 30 3757 flow.sync;
#X text 200 3757 bus with only hot inlets;
#X obj 30 3784 flow.tee~;
#X text 200 3784 separate audio and control streams;
#X obj 30 3811 replace;
#X text 200 3811 Replace atoms in data stream;
#X obj 20 3838 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3879 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3890 flt.biquad~;
#X text 200 3890 second order IIR filter.;
#X obj 30 3917 flt.bpf12~;
#X text 200 3917 Band-pass filter with 12/db per octave slope;
#X obj 30 3944 flt.bpf24~;
#X text 200 3944 Band-pass filter with 24/db per octave slope;
#X obj 30 3971 flt.c_bpf~;
#X text 200 3971 BPF coefficient calculator for biquad filter;
#X obj 30 3998 flt.c_highshelf~;
#X text 200 3998 Highshelf filter coefficient calculator for biquad;
#X obj 30 4025 flt.c_hpf~;
#X text 200 4025 HPF coefficient calculator for biquad filter;
#X obj 30 4052 flt.c_lowshelf~;
#X text 200 4052 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4079 flt.c_lpf~;
#X text 200 4079 LPF coefficient calculator for biquad filter;
#X obj 30 4106 flt.c_notch~;
#X text 200 4106 Band-reject coefficient calculator for biquad filter;
#X obj 30 4133 flt.c_peak~;
#X text 200 4133 Peaking equalizer calculator for biquad;
#X obj 30 4160 flt.dcblock2~;
#X text 200 4160 stereo DC blocker;
#X obj 30 4187 flt.dcblock~;
#X text 200 4187 mono DC blocker;
#X obj 30 4214 flt.eq10~;
#X text 200 4214 graphic 10 band equalizer;
#X obj 30 4241 flt.eq_peak_cq~;
#X text 200 4241 constant-Q second order peaking equalizer section;
#X obj 30 4268 flt.eq_peak~;
#X text 200 4268 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4323 flt.highshelf~;
#X text 200 4323 gain boost|cut above some frequency;
#X obj 30 4350 flt.hpf12~;
#X text 200 4350 High-pass filter with 12/db per octave slope;
#X obj 30 4377 flt.hpf24~;
#X text 200 4377 High-pass filter with 24/db per octave slope;
#X obj 30 4404 flt.lowshelf~;
#X text 200 4404 gain boost|cut below some frequency;
#X obj 30 4431 flt.lpf12~;
#X text 200 4431 Low-pass filter with 12/db per octave slope;
#X obj 30 4458 flt.lpf24~;
#X text 200 4458 Low-pass filter with 24/db per octave slope;
#X obj 30 4485 flt.median;
#X text 200 4485 Median control flow filter;
#X obj 30 4512 flt.moog_vcf~;
#X text 200 4512 Moog Voltage Controlled Filter;
#X obj 30 4539 flt.notch~;
#X text 200 4539 band-rejection filter;
#X obj 30 4566 flt.resonbp~;
#X text 200 4566 Simple resonant bandpass filter;
#X obj 20 4593 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4634 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4645 fx.bitdown~;
#X text 200 4645 bit downer and downsampler effect;
#X obj 30 4672 fx.chorus~;
#X text 200 4672 Chorus effect;
#X obj 30 4699 fx.distortion1~;
#X text 200 4699 distortion #1 from Guitarix effects set;
#X obj 30 4726 fx.distortion2~;
#X text 200 4726 distortion #2 from Guitarix effects set;
#X obj 30 4753 fx.distortion3~;
#X text 200 4753 simple distortion #3 from Guitarix effects set;
#X obj 30 4780 fx.distortion~;
#X text 200 4780 cubic nonlinearity distortion;
#X obj 30 4807 fx.drive~;
#X text 200 4807 Guitarix drive effect;
#X obj 30 4834 fx.drone_box~;
#X text 200 4834 mono sympathetic resonance generator;
#X obj 30 4861 fx.echo~;
#X text 200 4861 simple echo effect;
#X obj 30 4888 fx.flanger~;
#X text 200 4888 mono flanging effect;
#X obj 30 4915 fx.freeverb2~;
#X text 200 4915 freeverb2 - stereo version of freeverb;
#X obj 30 4942 fx.freeverb~;
#X text 200 4942 freeverb - common used open-source reverb;
#X obj 30 4969 fx.freqshift~;
#X text 200 4969 frequency shifter or single-sideband ring modulation;
#X obj 30 4996 fx.granulator~;
#X text 200 4996 simple input stream granulator;
#X obj 30 5023 fx.greyhole~;
#X text 200 5023 A complex echo-like effect;
#X obj 30 5050 fx.looper~;
#X text 200 5050 One track looper;
#X obj 30 5077 fx.pitchshift~;
#X text 200 5077 simple pitch shifter based on 2 delay lines;
#X obj 30 5104 fx.sdelay~;
#X text 200 5104 smooth delay with a feedback control;
#X obj 30 5131 fx.vocoder~;
#X text 200 5131 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5171 fx.wahwah~;
#X text 200 5171 digitized CryBaby wah pedal;
#X obj 30 5198 fx.zita_rev1~;
#X text 200 5198 Zita stereo reverb;
#X obj 20 5225 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5266 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5277 global.dict;
#X text 200 5277 global named dict object;
#X obj 30 5304 global.float;
#X text 200 5304 global named float object;
#X obj 30 5331 global.int;
#X text 200 5331 global named integer object;
#X obj 30 5358 global.list;
#X text 200 5358 global named list object;
#X obj 30 5385 global.mlist;
#X text 200 5385 global named mlist object;
#X obj 30 5412 global.set;
#X text 200 5412 global named set object;
#X obj 20 5439 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5480 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5491 hw.apple_smc;
#X text 200 5491 query the system management control in Apples;
#X obj 30 5518 hw.apple_sms;
#X text 200 5518 query the sudden motion sensor in Apples;
#X obj 30 5545 hw.arduino;
#X text 200 5545 Arduino device;
#X obj 30 5572 hw.cpu_temp;
#X text 200 5572 get CPU temperature;
#X obj 30 5599 hw.display;
#X text 200 5599 get/set display properties;
#X obj 30 5626 hw.kbd_light;
#X text 200 5626 Get/set keyboard light on some devices;
#X obj 20 5653 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5694 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5705 lfo.+pulse~;
#X text 200 5705 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5732 lfo.+saw~;
#X text 200 5732 Positive unit-amplitude low frequency saw wave;
#X obj 30 5759 lfo.+square~;
#X text 200 5759 Positive low frequency square wave;
#X obj 30 5786 lfo.+tri~;
#X text 200 5786 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5813 lfo.impulse~;
#X text 200 5813 Unit-amplitude low-frequency impulse train;
#X obj 30 5840 lfo.pulse~;
#X text 200 5840 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5867 lfo.saw~;
#X text 200 5867 Full-range unit-amplitude low frequency saw;
#X obj 30 5894 lfo.square~;
#X text 200 5894 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5921 lfo.tri~;
#X text 200 5921 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5948 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5989 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6000 list.^at;
#X text 200 6000 on input index(es) outputs list element(s);
#X obj 30 6027 list.^contains;
#X text 200 6027 on input atom or list checks if specified list contains
it;
#X obj 30 6054 list.^search;
#X text 200 6054 on input atom returns it index in list;
#X obj 30 6081 list.all_of;
#X text 200 6081 checks if all list atoms accepted by predicate;
#X obj 30 6108 list.any_of;
#X text 200 6108 checks if at least one list element is accepted by
predicate;
#X obj 30 6135 list.append;
#X text 200 6135 append atom or list to the end of input list;
#X obj 30 6162 list.apply_to;
#X text 200 6162 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6202 list.at;
#X text 200 6202 on input list outputs element(s) at specified index(es);
#X obj 30 6229 list.choice;
#X text 200 6229 returns random element from list;
#X obj 30 6256 list.contains;
#X text 200 6256 on input list checks if it contains specified subsequence;
#X obj 30 6283 list.count;
#X text 200 6283 returns the number of items that equal to specified
value;
#X obj 30 6310 list.count_if;
#X text 200 6310 returns the number of items that satisfy to external
predicate.;
#X obj 30 6350 list.delta;
#X text 200 6350 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6390 list.distribution;
#X text 200 6390 list value distribution;
#X obj 30 6417 list.do;
#X text 200 6417 iterate and modify list contents via side-chain;
#X obj 30 6444 list.each;
#X text 200 6444 maps each list value via external object(s);
#X obj 30 6471 list.enumerate;
#X text 200 6471 enumerates input list;
#X obj 30 6498 list.equal;
#X text 200 6498 checks if given lists are equal;
#X obj 30 6525 list.first;
#X text 200 6525 returns first list element;
#X obj 30 6552 list.gen;
#X text 200 6552 generates list of specified length via external generator;
#X obj 30 6579 list.histogram;
#X text 200 6579 outputs distribution histogram;
#X obj 30 6606 list.insert;
#X text 200 6606 insert atom or list to the specified position of input
list;
#X obj 30 6633 list.integrator;
#X text 200 6633 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 6673 list.last;
#X text 200 6673 returns last list element;
#X obj 30 6700 list.length;
#X text 200 6700 returns the number of atoms in the list;
#X obj 30 6727 list.max;
#X text 200 6727 returns largest element in the list;
#X obj 30 6754 list.mean;
#X text 200 6754 calculates average of list of floats;
#X obj 30 6781 list.min;
#X text 200 6781 returns smallest element in the list;
#X obj 30 6808 list.none_of;
#X text 200 6808 checks if none of list atoms is accepted by predicate;
#X obj 30 6835 list.normalize;
#X text 200 6835 normalizes float list values to get their sum = 1.0;
#X obj 30 6862 list.pass_if;
#X text 200 6862 leave only elements accepted by predicate;
#X obj 30 6889 list.prepend;
#X text 200 6889 prepend atom or list before input list;
#X obj 30 6916 list.product;
#X text 200 6916 calculates product of floats in list;
#X obj 30 6943 list.range;
#X text 200 6943 returns list smallest and largest value;
#X obj 30 6970 list.reduce;
#X text 200 6970 apply function of two arguments cumulatively to the
list;
#X obj 30 6997 list.remove;
#X text 200 6997 on input list remove element(s) at specified positions;
#X obj 30 7024 list.remove_if;
#X text 200 7024 remove elements by predicate;
#X obj 30 7051 list.repack;
#X text 200 7051 repack input list to specified size;
#X obj 30 7078 list.repeat;
#X text 200 7078 creates new list by repeating given list specified
times;
#X obj 30 7105 list.resize;
#X text 200 7105 changes list size;
#X obj 30 7132 list.reverse;
#X text 200 7132 reverses the order of the elements in the list;
#X obj 30 7159 list.rldecode;
#X text 200 7159 Run-length list decoder (RLE);
#X obj 30 7186 list.rlencode;
#X text 200 7186 RLE (run-length encoding) for lists;
#X obj 30 7213 list.rotate;
#X text 200 7213 rotates list;
#X obj 30 7240 list.route;
#X text 200 7240 acts like [route] but for lists;
#X obj 30 7267 list.search;
#X text 200 7267 search specified items in input list;
#X obj 30 7294 list.separate;
#X text 200 7294 sends list elements one by one separately;
#X obj 30 7321 list.seq;
#X text 200 7321 numeric sequence list generator;
#X obj 30 7348 list.set;
#X text 200 7348 on input list set value at specified position;
#X obj 30 7375 list.shift;
#X text 200 7375 shifts the contents of the list with linear interpolation;
#X obj 30 7402 list.shuffle;
#X text 200 7402 randomly rearranges elements in list;
#X obj 30 7429 list.slice;
#X text 200 7429 extract sublist;
#X obj 30 7456 list.sort;
#X text 200 7456 sorts list values by ascending order;
#X obj 30 7483 list.sort_with;
#X text 200 7483 sort list with user defined side-chain;
#X obj 30 7510 list.split;
#X text 200 7510 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7550 list.stretch;
#X text 200 7550 stretches list - chenges its size with linear interpolation.;
#X obj 30 7577 list.sum;
#X text 200 7577 calculates sum of floats in list;
#X obj 30 7604 list.unique;
#X text 200 7604 removes duplicates from input list;
#X obj 30 7631 list.unpack;
#X text 200 7631 unpack list elements to separate outlets;
#X obj 30 7658 list.unzip;
#X text 200 7658 splits list to N lists \, each to separate output;
#X obj 30 7685 list.walk;
#X text 200 7685 Walks thru the list;
#X obj 30 7712 list.zip;
#X text 200 7712 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 7767 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7808 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7819 live.capture~;
#X text 200 7819 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7859 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7900 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7911 local.dict;
#X text 200 7911 local named dict object;
#X obj 30 7938 local.float;
#X text 200 7938 canvas-scoped named float variable;
#X obj 30 7965 local.int;
#X text 200 7965 canvas-scoped named integer variable;
#X obj 30 7992 local.list;
#X text 200 7992 local named list object;
#X obj 30 8019 local.mlist;
#X text 200 8019 local named mlist object;
#X obj 30 8046 local.set;
#X text 200 8046 local named set object;
#X obj 20 8073 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8114 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8125 math.abs;
#X text 200 8125 absolute value function;
#X obj 30 8152 math.acos;
#X text 200 8152 arc cosine function;
#X obj 30 8179 math.acosh;
#X text 200 8179 inverse hyperbolic cosine function;
#X obj 30 8206 math.and;
#X text 200 8206 operation AND for multiple arguments;
#X obj 30 8233 math.approx;
#X text 200 8233 check if input value approximately equal to pattern;
#X obj 30 8260 math.asin;
#X text 200 8260 arc sine function;
#X obj 30 8287 math.asinh;
#X text 200 8287 inverse hyperbolic sine function;
#X obj 30 8314 math.atan;
#X text 200 8314 arc tangent function;
#X obj 30 8341 math.atanh;
#X text 200 8341 inverse hyperbolic tangent function;
#X obj 30 8368 math.cbrt;
#X text 200 8368 cube root function;
#X obj 30 8395 math.cdiv~;
#X text 200 8395 division of complex signals;
#X obj 30 8422 math.ceil;
#X text 200 8422 round to smallest integral value not less than input
value;
#X obj 30 8449 math.cmul~;
#X text 200 8449 multiplication of complex signals;
#X obj 30 8476 math.cos;
#X text 200 8476 cosine function;
#X obj 30 8503 math.cosh;
#X text 200 8503 hyperbolic cosine function;
#X obj 30 8530 math.div;
#X text 200 8530 division (on lists too);
#X obj 30 8557 math.e;
#X text 200 8557 mathematical constant \, base of the natural logarithm;
#X obj 30 8584 math.exp;
#X text 200 8584 exponential functions;
#X obj 30 8611 math.exp2;
#X text 200 8611 exponential functions;
#X obj 30 8638 math.expr;
#X text 200 8638 dynamic [expr];
#X obj 30 8665 math.floor;
#X text 200 8665 round to largest integral value not greater than x;
#X obj 30 8692 math.gcd;
#X text 200 8692 calculate greatest common divisor;
#X obj 30 8719 math.inf;
#X text 200 8719 infinity value that cannot be represented accurately;
#X obj 30 8746 math.lcm;
#X text 200 8746 calculate least common multiple;
#X obj 30 8773 math.log;
#X text 200 8773 logarithm functions;
#X obj 30 8800 math.log10;
#X text 200 8800 logarithm functions;
#X obj 30 8827 math.log2;
#X text 200 8827 logarithm functions;
#X obj 30 8854 math.mul;
#X text 200 8854 multiplication (on lists too);
#X obj 30 8881 math.nan;
#X text 200 8881 Not a Number \, unrepresentable value;
#X obj 30 8908 math.neg;
#X text 200 8908 negate function;
#X obj 30 8935 math.or;
#X text 200 8935 operation OR for multiple arguments;
#X obj 30 8962 math.pi;
#X text 200 8962 mathematical constant;
#X obj 30 8989 math.polyeval;
#X text 200 8989 evaluates the polynomial described by the coefficients
list;
#X obj 30 9016 math.reciprocal;
#X text 200 9016 calculate reciprocal number;
#X obj 30 9043 math.round;
#X text 200 9043 round to integral value \, regardless of rounding
direction;
#X obj 30 9070 math.round~;
#X text 200 9070 signal round;
#X obj 30 9097 math.sign;
#X text 200 9097 sign function;
#X obj 30 9124 math.sin;
#X text 200 9124 sine function;
#X obj 30 9151 math.sinh;
#X text 200 9151 hyperbolic sine function;
#X obj 30 9178 math.sqrt;
#X text 200 9178 square root function;
#X obj 30 9205 math.squared;
#X text 200 9205 value square;
#X obj 30 9232 math.tan;
#X text 200 9232 tangent function;
#X obj 30 9259 math.tanh;
#X text 200 9259 hyperbolic tangent function;
#X obj 30 9286 math.trunc;
#X text 200 9286 truncate to integer value;
#X obj 20 9313 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 9354 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9365 midi.ctl2str;
#X text 200 9365 convert Standard MIDI Controllers number to name;
#X obj 30 9392 midi.event2ctl;
#X text 200 9392 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9419 midi.event2note;
#X text 200 9419 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9446 midi.event2prg;
#X text 200 9446 convert MidiEvent message to midi program change value;
#X obj 30 9473 midi.file;
#X text 200 9473 standard midi file SMF reader and writer;
#X obj 30 9500 midi.key2str;
#X text 200 9500 convert key number to SPN name according to tonality;
#X obj 30 9527 midi.prg2str;
#X text 200 9527 convert GM Instrument number to name (string or symbol);
#X obj 30 9554 midi.track;
#X text 200 9554 extract track from MidiFile;
#X obj 20 9581 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9633 click~;
#X text 200 9633 Output single impulse on bang;
#X obj 30 9660 fluid~;
#X text 200 9660 FluidSynth SoundFont 2 player;
#X obj 30 9687 modplug~;
#X text 200 9687 MOD file player (using libmodplug);
#X obj 30 9714 speech.flite;
#X text 200 9714 render speech to array;
#X obj 20 9741 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9782 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9793 msg;
#X text 200 9793 message constructor;
#X obj 30 9820 msg.after;
#X text 200 9820 send specified message after incoming message;
#X obj 30 9847 msg.onload;
#X text 200 9847 send message when patch loads;
#X obj 20 9874 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9915 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9926 net.host2ip;
#X text 200 9926 returns IP address by DNS name;
#X obj 20 9953 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9994 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10005 noise.crackle~;
#X text 200 10005 sparse noise generator;
#X obj 30 10032 noise.lfreq0~;
#X text 200 10032 sampled/held noise (piecewise constant);
#X obj 30 10059 noise.lfreq~;
#X text 200 10059 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10086 noise.pink~;
#X text 200 10086 Pink noise generator;
#X obj 30 10113 noise.white~;
#X text 200 10113 White noise generator;
#X obj 20 10140 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10181 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10192 osc.blit~;
#X text 200 10192 Bandlimited impulse train oscillator;
#X obj 30 10219 osc.impulse~;
#X text 200 10219 Bandlimited impulse train generator;
#X obj 30 10246 osc.pulse~;
#X text 200 10246 Bandlimited pulse train oscillator;
#X obj 30 10273 osc.saw4~;
#X text 200 10273 Bandlimited sawtooth wave;
#X obj 30 10300 osc.saw~;
#X text 200 10300 Alias-free sawtooth wave;
#X obj 30 10327 osc.sinfb~;
#X text 200 10327 Sine oscilator with feedback;
#X obj 30 10354 osc.sin~;
#X text 200 10354 Sine wave oscillator;
#X obj 30 10381 osc.square~;
#X text 200 10381 Bandlimited square wave oscillator;
#X obj 30 10408 osc.tri~;
#X text 200 10408 Bandlimited triangle wave oscillator;
#X obj 20 10435 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10476 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10487 canvas.current;
#X text 200 10487 verbose information about current canvas;
#X obj 30 10514 canvas.top;
#X text 200 10514 verbose information about top-level canvas;
#X obj 30 10541 patch.args;
#X text 200 10541 Get patch or subpatch arguments;
#X obj 20 10568 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10609 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10620 path.basename;
#X text 200 10620 outputs filename portion of pathname;
#X obj 30 10647 path.dirname;
#X text 200 10647 outputs directory portion of pathname;
#X obj 30 10674 path.exists;
#X text 200 10674 checks if given path exists;
#X obj 30 10701 path.lsdir;
#X text 200 10701 list directory contents;
#X obj 20 10728 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10769 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10780 is_any;
#X text 200 10780 checks if input data has *any* type;
#X obj 30 10807 is_bang;
#X text 200 10807 checks if input data has *bang* type;
#X obj 30 10834 is_data;
#X text 200 10834 checks if input data has *data* type;
#X obj 30 10861 is_dict;
#X text 200 10861 checks if input data has *dict* type;
#X obj 30 10888 is_even;
#X text 200 10888 checks if input number is even;
#X obj 30 10915 is_file;
#X text 200 10915 checks if file exists and accessible;
#X obj 30 10942 is_float;
#X text 200 10942 checks if input data has *float* type;
#X obj 30 10969 is_list;
#X text 200 10969 checks if input data has *list* type;
#X obj 30 10996 is_odd;
#X text 200 10996 checks if input number is odd;
#X obj 30 11023 is_pointer;
#X text 200 11023 checks if input data has *pointer* type;
#X obj 30 11050 is_symbol;
#X text 200 11050 checks if input data has *symbol* type;
#X obj 20 11077 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11118 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11129 preset.float;
#X text 200 11129 load/store float preset;
#X obj 30 11156 preset.list;
#X text 200 11156 load/store symbol preset;
#X obj 30 11183 preset.storage;
#X text 200 11183 preset storage control;
#X obj 30 11210 preset.symbol;
#X text 200 11210 load/store symbol preset;
#X obj 20 11237 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 11278 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11289 patch.props;
#X text 200 11289 patch properties manager;
#X obj 30 11316 prop;
#X text 200 11316 get/set named property value for subpatch or abstraction;
#X obj 30 11343 prop.declare;
#X text 200 11343 declare named property for subpatch or abstraction;
#X obj 30 11370 prop.get;
#X text 200 11370 Property extractor;
#X obj 30 11397 prop.get~;
#X text 200 11397 Property extractor from sound stream;
#X obj 30 11424 prop.set;
#X text 200 11424 Property injector;
#X obj 20 11451 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11492 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11503 proto.firmata;
#X text 200 11503 Firmata Arduino protocol support;
#X obj 20 11530 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11571 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11582 random.discrete;
#X text 200 11582 random weighted integers on interval [0 \, n);
#X obj 30 11609 random.float;
#X text 200 11609 random float generator in specified range;
#X obj 30 11636 random.gauss;
#X text 200 11636 gaussian random distribution;
#X obj 30 11663 random.int;
#X text 200 11663 Random integer generator in specified range;
#X obj 30 11690 random.linear;
#X text 200 11690 random linear distribution;
#X obj 30 11717 random.pw_const;
#X text 200 11717 piecewise constant random distribution;
#X obj 30 11744 random.pw_lin;
#X text 200 11744 piecewise linear random distribution;
#X obj 20 11771 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11812 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11823 snd.file;
#X text 200 11823 Sound file loader on steroids;
#X obj 20 11850 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11891 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11902 pan.cos~;
#X text 200 11902 two channel equal power sine/cosine panner;
#X obj 30 11929 pan.linsig~;
#X text 200 11929 two channel linear panner with signal control;
#X obj 30 11956 pan.lin~;
#X text 200 11956 two channel linear panner;
#X obj 30 11983 pan.spread~;
#X text 200 11983 spreads input channels across the stereo field;
#X obj 30 12010 pan.sqrt~;
#X text 200 12010 two channel equal power square root panner;
#X obj 30 12037 spat.pan4~;
#X text 200 12037 GMEM SPAT: 4-outputs spatializer;
#X obj 30 12064 spat.pan8~;
#X text 200 12064 GMEM SPAT: 8-outputs spatializer;
#X obj 20 12091 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 12132 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12143 string;
#X text 200 12143 string constructor;
#X obj 30 12170 string.contains;
#X text 200 12170 checks if given string contains specified substring;
#X obj 30 12197 string.ends_with;
#X text 200 12197 checks if given string ends with specified suffix;
#X obj 30 12224 string.equal;
#X text 200 12224 check strings for equality;
#X obj 30 12251 string.format;
#X text 200 12251 formats string like printf.;
#X obj 30 12278 string.join;
#X text 200 12278 joins (concatenates) strings with separator;
#X obj 30 12305 string.length;
#X text 200 12305 number of characters in string (unicode supported);
#X obj 30 12332 string.match;
#X text 200 12332 check if string match regular expression;
#X obj 30 12359 string.remove;
#X text 200 12359 remove substring from input string;
#X obj 30 12386 string.replace;
#X text 200 12386 replace from one substring to another in input string;
#X obj 30 12413 string.split;
#X text 200 12413 split string by separator;
#X obj 30 12440 string.starts_with;
#X text 200 12440 checks if given string starts with specified prefix;
#X obj 30 12467 string.substr;
#X text 200 12467 extract substring from input string;
#X obj 30 12494 string2symbol;
#X text 200 12494 converts string to symbol;
#X obj 20 12521 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12562 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12573 symbol.equal;
#X text 200 12573 check symbols for equality;
#X obj 30 12600 symbol.length;
#X text 200 12600 number of characters in symbol (unicode supported);
#X obj 30 12627 symbol.num_compare;
#X text 200 12627 numeric symbol compare;
#X obj 20 12654 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12695 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12706 synth.bee3~;
#X text 200 12706 Hammond-oid organ FM synthesis instrument;
#X obj 30 12733 synth.birds~;
#X text 200 12733 bird singing generator;
#X obj 30 12760 synth.church_bell~;
#X text 200 12760 generic church bell modal model;
#X obj 30 12787 synth.dubdub~;
#X text 200 12787 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 12827 synth.eguitar~;
#X text 200 12827 simple electric guitar model with steel strings;
#X obj 30 12854 synth.fgrain~;
#X text 200 12854 file granulator from STK;
#X obj 30 12881 synth.ks~;
#X text 200 12881 Karplus-Strong string;
#X obj 30 12908 synth.marimba~;
#X text 200 12908 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12948 synth.rhodey~;
#X text 200 12948 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 12975 synth.risset_arp~;
#X text 200 12975 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 13002 synth.risset_tone~;
#X text 200 13002 Jean Claude Risset's endless glissando;
#X obj 30 13029 synth.shakers~;
#X text 200 13029 various percussion sounds from STK library;
#X obj 30 13056 synth.wurley~;
#X text 200 13056 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 13083 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 13124 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13135 system.cursor;
#X text 200 13135 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 13175 system.getenv;
#X text 200 13175 Get system environment variables;
#X obj 30 13202 system.hostname;
#X text 200 13202 outputs system hostname;
#X obj 30 13229 system.memsize;
#X text 200 13229 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 13269 system.memused;
#X text 200 13269 returns the process physical memory use - current
and peak;
#X obj 30 13296 system.screen_size;
#X text 200 13296 returns current screen size in pixels;
#X obj 30 13323 system.shell;
#X text 200 13323 run external command in separate process;
#X obj 20 13350 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 13391 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13402 tl.bang;
#X text 200 13402 Timeline bang (with possible delay);
#X obj 30 13432 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 13429 Timeline section;
#X obj 30 13454 tl.timeline;
#X text 200 13454 Timeline - event scheduler;
#X obj 30 13481 tl.toggle;
#X text 200 13481 Timeline bang;
#X obj 30 13508 tl.transport;
#X text 200 13508 Timeline transport control;
#X obj 20 13535 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13576 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13590 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 13587 array view with cursor and selection;
#X obj 30 13615 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 13612 A bang... that's all;
#X obj 30 13640 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 13637 colorchooser widget;
#X obj 30 13665 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 13662 Display GUI object;
#X obj 30 13690 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 13687 GUI for turning DSP on/off;
#X obj 30 13715 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 13712 envelope editor widget;
#X obj 30 13740 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 13737 UI stereo gain control;
#X obj 30 13765 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 13762 UI gain control;
#X obj 30 13790 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 13787 simple icon with button capabilities;
#X obj 30 13815 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 13812 value increment/decrement;
#X obj 30 13840 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 13837 keyboard widget;
#X obj 30 13865 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 13862 knob widget;
#X obj 30 13890 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 13887 simple label widget;
#X obj 30 13915 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 13912 Hyperlink widget;
#X obj 30 13940 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 13937 The matrix of toggles has you.;
#X obj 30 13965 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 13962 Dropdown menu;
#X obj 30 13990 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 13987 Shows peak and rms signal level;
#X obj 30 14015 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 14012 counterpart of the vanilla [nbx];
#X obj 30 14040 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 14037 counterpart of the vanilla [nbx] for signal;
#X obj 30 14065 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 14062 Preset manager;
#X obj 30 14090 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 14087 counterpart of the vanilla radio toggle;
#X obj 30 14115 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 14112 range slider;
#X obj 30 14140 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 14137 Scope GUI object;
#X obj 30 14165 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 14162 counterpart of the vanilla slider;
#X obj 30 14190 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 14187 2D slider widget;
#X obj 30 14215 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 14212 Multiple slider widget;
#X obj 30 14240 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 14237 Spectroscope GUI object;
#X obj 30 14265 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 14262 displays a list of text buttons or text toggles;
#X obj 30 14290 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 14287 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 14312 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 14312 version: v0.7.1 \, license: GPL3;
#X obj 20 14333 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;