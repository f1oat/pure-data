#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 an.pitchtrack~;
#X text 200 153 pitch tracker;
#X obj 20 180 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 221 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 array.bpm;
#X text 200 232 BPM calculator;
#X obj 30 259 array.copy;
#X text 200 259 copy samples from one array to another;
#X obj 30 286 array.do;
#X text 200 286 iterate and modify array content via side-chain;
#X obj 30 313 array.each;
#X text 200 313 process each array elements via side-chain;
#X obj 30 340 array.fill;
#X text 200 340 fill array with single value or pattern;
#X obj 30 367 array.hist;
#X text 200 367 calculates array histogram;
#X obj 30 394 array.mean;
#X text 200 394 calculates array arithmetic mean value;
#X obj 30 421 array.minmax;
#X text 200 421 find array min and max element value;
#X obj 30 448 array.rms;
#X text 200 448 calculates root mean square value for array;
#X obj 30 475 array.set;
#X text 200 475 set array content from list;
#X obj 30 502 array.stddev;
#X text 200 502 calculates standard deviation for array values;
#X obj 30 529 array.stretch;
#X text 200 529 array time-stretch \, pitch-shift or rate-change;
#X obj 30 556 array.sum;
#X text 200 556 calculates sum of array elements;
#X obj 30 583 array.sum2;
#X text 200 583 calculates sum of squares of array elements;
#X obj 30 610 array.variance;
#X text 200 610 calculates variance of array values;
#X obj 30 637 array.vplay;
#X text 200 637 simple array player for using with vline~;
#X obj 30 664 array.window;
#X text 200 664 fill array with window;
#X obj 20 691 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 732 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 746 ui.link @title [function] @url function-help.pd;
#X text 200 743 named function;
#X obj 30 766 function.call;
#X text 200 766 call named function;
#X obj 30 793 gain~;
#X text 200 793 multislot signal gain;
#X obj 30 820 matrix~;
#X text 200 820 signal routing matrix;
#X obj 30 847 metro.pattern;
#X text 200 847 metro with rhythmic patterns;
#X obj 30 874 metro.seq;
#X text 200 874 metro sequencer;
#X obj 30 901 mix~;
#X text 200 901 multislot signal mixer;
#X obj 30 928 obj.props;
#X text 200 928 property extractor;
#X obj 30 955 radio;
#X text 200 955 float index to outlet values as radio switch;
#X obj 30 982 window;
#X text 200 982 returns window value by given window position;
#X obj 30 1009 xfade2~;
#X text 200 1009 multi stereo-signal crossfade;
#X obj 30 1036 xfade~;
#X text 200 1036 multi signal crossfade;
#X obj 20 1063 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1104 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1115 array.p2s;
#X text 200 1115 convert array phase [0\..1] to sample position;
#X obj 30 1142 array.s2p;
#X text 200 1142 convert array sample position to relative phase
position [0\..1];
#X obj 30 1179 conv.amp2dbfs;
#X text 200 1179 convert from amplitude to decibel full scale;
#X obj 30 1206 conv.bpm2hz;
#X text 200 1206 converts BPM to frequency in herz;
#X obj 30 1233 conv.bpm2ms;
#X text 200 1233 convert frequency in BPM to period in milliseconds;
#X obj 30 1260 conv.bpm2sec;
#X text 200 1260 convert frequency in BPM to period in seconds;
#X obj 30 1287 conv.cc2amp;
#X text 200 1287 convert from MIDI Control Change range;
#X obj 30 1314 conv.dbfs2amp;
#X text 200 1314 convert decibel full scale to amplitude;
#X obj 30 1341 conv.lin2curve;
#X text 200 1341 map linear to exponential range with 0 allowed.;
#X obj 30 1368 conv.lin2exp;
#X text 200 1368 maps linear range to exponential range;
#X obj 30 1395 conv.lin2lin;
#X text 200 1395 convert from one linear range to another;
#X obj 30 1422 conv.list2props;
#X text 200 1422 converts list to series of property messages;
#X obj 30 1449 conv.midi2freq;
#X text 200 1449 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1486 conv.pitch2midi;
#X text 200 1486 converts symbol pitch name to MIDI note number;
#X obj 30 1513 conv.samp2sec;
#X text 200 1513 convert samples to time according to samplerate;
#X obj 30 1540 conv.sec2samp;
#X text 200 1540 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1577 conv.sec2str;
#X text 200 1577 converts float time in seconds to formated symbol (or
string);
#X obj 30 1614 conv.str2sec;
#X text 200 1614 converts formatted time to float value in seconds;
#X obj 20 1641 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1682 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1693 data.dict;
#X text 200 1693 dictionary container: store values by key;
#X obj 30 1720 data.fifo;
#X text 200 1720 First-In-First-Out (FIFO) queue data container;
#X obj 30 1747 data.float;
#X text 200 1747 robust float object;
#X obj 30 1774 data.int;
#X text 200 1774 robust int object;
#X obj 30 1801 data.list;
#X text 200 1801 list container;
#X obj 30 1828 data.mlist;
#X text 200 1828 multidimensional list container;
#X obj 30 1855 data.set;
#X text 200 1855 container that store unique elements;
#X obj 30 1882 data.set2list;
#X text 200 1882 converts set to list;
#X obj 30 1909 dict.contains;
#X text 200 1909 predicate to check dict contains key;
#X obj 30 1936 dict.each;
#X text 200 1936 map each value in dict;
#X obj 30 1963 dict.from_list;
#X text 200 1963 creates dictionary from list;
#X obj 30 1990 dict.get;
#X text 200 1990 on input dict outputs value to corresponding key
outlet;
#X obj 30 2017 dict.keys;
#X text 200 2017 get list of dict keys;
#X obj 30 2044 dict.pass;
#X text 200 2044 passes specified keys in dict;
#X obj 30 2071 dict.reject;
#X text 200 2071 rejects specified keys from dict;
#X obj 30 2098 dict.size;
#X text 200 2098 dictionary size;
#X obj 30 2125 dict.to_list;
#X text 200 2125 converts dictionary to plain list;
#X obj 30 2152 dict.values;
#X text 200 2152 dictionary values as mlist;
#X obj 30 2179 mlist.flatten;
#X text 200 2179 flatten nested mlist;
#X obj 30 2206 set.contains;
#X text 200 2206 check if specified element is in set;
#X obj 30 2233 set.diff;
#X text 200 2233 difference between two sets;
#X obj 30 2260 set.equal;
#X text 200 2260 checks if two sets are equal (contains same
elements);
#X obj 30 2287 set.intersect;
#X text 200 2287 output intersection of given sets;
#X obj 30 2314 set.size;
#X text 200 2314 get number of elements in set;
#X obj 30 2341 set.symdiff;
#X text 200 2341 symmetric difference between two sets;
#X obj 30 2368 set.union;
#X text 200 2368 output union of given sets;
#X obj 20 2395 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2436 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2447 dyn.comp2~;
#X text 200 2447 stereo dynamic range compressor;
#X obj 30 2474 dyn.comp~;
#X text 200 2474 mono dynamic range compressors;
#X obj 30 2501 dyn.gate2~;
#X text 200 2501 stereo signal gate;
#X obj 30 2528 dyn.gate~;
#X text 200 2528 mono signal gate;
#X obj 30 2555 dyn.limit2~;
#X text 200 2555 stereo 1176LN Peak Limiter;
#X obj 30 2582 dyn.limit~;
#X text 200 2582 mono 1176LN Peak Limiter;
#X obj 30 2609 dyn.softclip~;
#X text 200 2609 soft signal clip;
#X obj 20 2636 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2677 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2688 env.adsr~;
#X text 200 2688 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2715 env.ar~;
#X text 200 2715 Attack/Release envelope generator;
#X obj 30 2742 env.asr~;
#X text 200 2742 Attack/Sustain/Release envelope generator;
#X obj 30 2769 env.concat;
#X text 200 2769 Envelope concatenation;
#X obj 30 2796 env.follow~;
#X text 200 2796 Envelope follower with independent attack and release
times;
#X obj 30 2823 env.mix;
#X text 200 2823 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2860 env.smooth~;
#X text 200 2860 An envelope with an exponential attack and release;
#X obj 30 2887 env.tscale;
#X text 200 2887 Envelope time-scale;
#X obj 30 2914 env.tshift;
#X text 200 2914 Envelope time-shift (horizontal);
#X obj 30 2941 env.vscale;
#X text 200 2941 Envelope value-scale;
#X obj 30 2968 env2array;
#X text 200 2968 Renders envelope to specified array;
#X obj 30 2995 env2vline;
#X text 200 2995 Converts envelope to bunch of vline messages;
#X obj 30 3022 envelope;
#X text 200 3022 Envelope data type;
#X obj 30 3049 vline2env;
#X text 200 3049 Converts vline messages to env;
#X obj 20 3076 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3117 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3128 expand_env;
#X text 200 3128 Substitute enviroment variables in data stream;
#X obj 30 3155 flow.append;
#X text 200 3155 inject message into flow;
#X obj 30 3182 flow.change;
#X text 200 3182 rejects redundant input values;
#X obj 30 3209 flow.count;
#X text 200 3209 control flow event counter;
#X obj 30 3236 flow.demultiplex;
#X text 200 3236 control flow demultiplexer;
#X obj 30 3263 flow.demultiplex2~;
#X text 200 3263 audio stream stereo demultiplexer;
#X obj 30 3290 flow.demultiplex~;
#X text 200 3290 audio stream demultiplexer;
#X obj 30 3317 flow.gate;
#X text 200 3317 control flow gate. [spigot] analog;
#X obj 30 3344 flow.group;
#X text 200 3344 group data atoms in list of specified size;
#X obj 30 3371 flow.interval;
#X text 200 3371 measure time between flow events;
#X obj 30 3398 flow.less;
#X text 200 3398 numeric stream router \, like many [moses];
#X obj 30 3425 flow.less_eq;
#X text 200 3425 numeric stream router \, like many [moses];
#X obj 30 3452 flow.multiplex;
#X text 200 3452 control flow multiplexer;
#X obj 30 3479 flow.multiplex2~;
#X text 200 3479 audio stream stereo multiplexer;
#X obj 30 3506 flow.multiplex~;
#X text 200 3506 audio stream multiplexer;
#X obj 30 3533 flow.once;
#X text 200 3533 one message pass thru;
#X obj 30 3560 flow.pass;
#X text 200 3560 pass specified values;
#X obj 30 3587 flow.pass_if;
#X text 200 3587 pass values that accepted by predicate object;
#X obj 30 3614 flow.reject;
#X text 200 3614 reject specified values;
#X obj 30 3641 flow.reject_if;
#X text 200 3641 reject values by predicate;
#X obj 30 3668 flow.route;
#X text 200 3668 advanced message router;
#X obj 30 3695 flow.speedlim;
#X text 200 3695 control stream speed limiter;
#X obj 30 3722 flow.split;
#X text 200 3722 split data flow by external side-chain predicate;
#X obj 30 3749 flow.sync;
#X text 200 3749 bus with only hot inlets;
#X obj 30 3776 flow.tee~;
#X text 200 3776 separate audio and control streams;
#X obj 30 3803 replace;
#X text 200 3803 Replace atoms in data stream;
#X obj 20 3830 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3871 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3882 flt.biquad~;
#X text 200 3882 second order IIR filter.;
#X obj 30 3909 flt.bpf12~;
#X text 200 3909 Band-pass filter with 12/db per octave slope;
#X obj 30 3936 flt.bpf24~;
#X text 200 3936 Band-pass filter with 24/db per octave slope;
#X obj 30 3963 flt.c_bpf~;
#X text 200 3963 BPF coefficient calculator for biquad filter;
#X obj 30 3990 flt.c_highshelf~;
#X text 200 3990 Highshelf filter coefficient calculator for biquad;
#X obj 30 4017 flt.c_hpf~;
#X text 200 4017 HPF coefficient calculator for biquad filter;
#X obj 30 4044 flt.c_lowshelf~;
#X text 200 4044 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4071 flt.c_lpf~;
#X text 200 4071 LPF coefficient calculator for biquad filter;
#X obj 30 4098 flt.c_notch~;
#X text 200 4098 Band-reject coefficient calculator for biquad filter;
#X obj 30 4125 flt.c_peak~;
#X text 200 4125 Peaking equalizer calculator for biquad;
#X obj 30 4152 flt.dcblock2~;
#X text 200 4152 stereo DC blocker;
#X obj 30 4179 flt.dcblock~;
#X text 200 4179 mono DC blocker;
#X obj 30 4206 flt.eq10~;
#X text 200 4206 graphic 10 band equalizer;
#X obj 30 4233 flt.eq_peak_cq~;
#X text 200 4233 constant-Q second order peaking equalizer section;
#X obj 30 4260 flt.eq_peak~;
#X text 200 4260 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 4311 flt.highshelf~;
#X text 200 4311 gain boost|cut above some frequency;
#X obj 30 4338 flt.hpf12~;
#X text 200 4338 High-pass filter with 12/db per octave slope;
#X obj 30 4365 flt.hpf24~;
#X text 200 4365 High-pass filter with 24/db per octave slope;
#X obj 30 4392 flt.lowshelf~;
#X text 200 4392 gain boost|cut below some frequency;
#X obj 30 4419 flt.lpf12~;
#X text 200 4419 Low-pass filter with 12/db per octave slope;
#X obj 30 4446 flt.lpf24~;
#X text 200 4446 Low-pass filter with 24/db per octave slope;
#X obj 30 4473 flt.median;
#X text 200 4473 Median control flow filter;
#X obj 30 4500 flt.moog_vcf~;
#X text 200 4500 Moog Voltage Controlled Filter;
#X obj 30 4527 flt.notch~;
#X text 200 4527 band-rejection filter;
#X obj 30 4554 flt.resonbp~;
#X text 200 4554 Simple resonant bandpass filter;
#X obj 20 4581 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4633 fx.bitdown~;
#X text 200 4633 bit downer and downsampler effect;
#X obj 30 4660 fx.chorus~;
#X text 200 4660 Chorus effect;
#X obj 30 4687 fx.distortion~;
#X text 200 4687 cubic nonlinearity distortion;
#X obj 30 4714 fx.drive~;
#X text 200 4714 Guitarix drive effect;
#X obj 30 4741 fx.drone_box~;
#X text 200 4741 mono sympathetic resonance generator;
#X obj 30 4768 fx.echo~;
#X text 200 4768 simple echo effect;
#X obj 30 4795 fx.flanger~;
#X text 200 4795 mono flanging effect;
#X obj 30 4822 fx.freeverb2~;
#X text 200 4822 freeverb2 - stereo version of freeverb;
#X obj 30 4849 fx.freeverb~;
#X text 200 4849 freeverb - common used open-source reverb;
#X obj 30 4876 fx.freqshift~;
#X text 200 4876 frequency shifter or single-sideband ring modulation;
#X obj 30 4903 fx.granulator~;
#X text 200 4903 simple input stream granulator;
#X obj 30 4930 fx.greyhole~;
#X text 200 4930 A complex echo-like effect;
#X obj 30 4957 fx.looper~;
#X text 200 4957 One track looper;
#X obj 30 4984 fx.pitchshift~;
#X text 200 4984 simple pitch shifter based on 2 delay lines;
#X obj 30 5011 fx.sdelay~;
#X text 200 5011 smooth delay with a feedback control;
#X obj 30 5038 fx.vocoder~;
#X text 200 5038 very simple vocoder where the spectrum of the
modulation signal is analyzed using a 32-band filter bank;
#X obj 30 5075 fx.wahwah~;
#X text 200 5075 digitized CryBaby wah pedal;
#X obj 30 5102 fx.zita_rev1~;
#X text 200 5102 Zita stereo reverb;
#X obj 20 5129 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5170 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5181 global.dict;
#X text 200 5181 global named dict object;
#X obj 30 5208 global.float;
#X text 200 5208 global named float object;
#X obj 30 5235 global.int;
#X text 200 5235 global named integer object;
#X obj 30 5262 global.list;
#X text 200 5262 global named list object;
#X obj 30 5289 global.mlist;
#X text 200 5289 global named mlist object;
#X obj 30 5316 global.set;
#X text 200 5316 global named set object;
#X obj 20 5343 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5384 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5395 hw.apple_smc;
#X text 200 5395 query the system management control in Apples;
#X obj 30 5422 hw.apple_sms;
#X text 200 5422 query the sudden motion sensor in Apples;
#X obj 30 5449 hw.arduino;
#X text 200 5449 Arduino device;
#X obj 30 5476 hw.cpu_temp;
#X text 200 5476 get CPU temperature;
#X obj 30 5503 hw.display;
#X text 200 5503 get/set display properties;
#X obj 30 5530 hw.kbd_light;
#X text 200 5530 Get/set keyboard light on some devices;
#X obj 20 5557 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5598 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5609 lfo.+pulse~;
#X text 200 5609 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5636 lfo.+saw~;
#X text 200 5636 Positive unit-amplitude low frequency saw wave;
#X obj 30 5663 lfo.+square~;
#X text 200 5663 Positive low frequency square wave;
#X obj 30 5690 lfo.+tri~;
#X text 200 5690 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5717 lfo.impulse~;
#X text 200 5717 Unit-amplitude low-frequency impulse train;
#X obj 30 5744 lfo.pulse~;
#X text 200 5744 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5771 lfo.saw~;
#X text 200 5771 Full-range unit-amplitude low frequency saw;
#X obj 30 5798 lfo.square~;
#X text 200 5798 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5825 lfo.tri~;
#X text 200 5825 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5852 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5893 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5904 list.^at;
#X text 200 5904 on input index(es) outputs list element(s);
#X obj 30 5931 list.^contains;
#X text 200 5931 on input atom or list checks if specified list
contains it;
#X obj 30 5958 list.^search;
#X text 200 5958 on input atom returns it index in list;
#X obj 30 5985 list.all_of;
#X text 200 5985 checks if all list atoms accepted by predicate;
#X obj 30 6012 list.any_of;
#X text 200 6012 checks if at least one list element is accepted by
predicate;
#X obj 30 6049 list.append;
#X text 200 6049 append atom or list to the end of input list;
#X obj 30 6076 list.apply_to;
#X text 200 6076 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 6113 list.at;
#X text 200 6113 on input list outputs element(s) at specified
index(es);
#X obj 30 6140 list.choice;
#X text 200 6140 returns random element from list;
#X obj 30 6167 list.contains;
#X text 200 6167 on input list checks if it contains specified
subsequence;
#X obj 30 6194 list.count;
#X text 200 6194 returns the number of items that equal to specified
value;
#X obj 30 6221 list.count_if;
#X text 200 6221 returns the number of items that satisfy to external
predicate.;
#X obj 30 6258 list.delta;
#X text 200 6258 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6295 list.distribution;
#X text 200 6295 list value distribution;
#X obj 30 6322 list.do;
#X text 200 6322 iterate and modify list contents via side-chain;
#X obj 30 6349 list.each;
#X text 200 6349 maps each list value via external object(s);
#X obj 30 6376 list.enumerate;
#X text 200 6376 enumerates input list;
#X obj 30 6403 list.equal;
#X text 200 6403 checks if given lists are equal;
#X obj 30 6430 list.first;
#X text 200 6430 returns first list element;
#X obj 30 6457 list.gen;
#X text 200 6457 generates list of specified length via external
generator;
#X obj 30 6484 list.histogram;
#X text 200 6484 outputs distribution histogram;
#X obj 30 6511 list.insert;
#X text 200 6511 insert atom or list to the specified position of
input list;
#X obj 30 6538 list.integrator;
#X text 200 6538 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 6575 list.last;
#X text 200 6575 returns last list element;
#X obj 30 6602 list.length;
#X text 200 6602 returns the number of atoms in the list;
#X obj 30 6629 list.max;
#X text 200 6629 returns largest element in the list;
#X obj 30 6656 list.mean;
#X text 200 6656 calculates average of list of floats;
#X obj 30 6683 list.min;
#X text 200 6683 returns smallest element in the list;
#X obj 30 6710 list.none_of;
#X text 200 6710 checks if none of list atoms is accepted by
predicate;
#X obj 30 6737 list.normalize;
#X text 200 6737 normalizes float list values to get their sum = 1.0;
#X obj 30 6764 list.pass_if;
#X text 200 6764 leave only elements accepted by predicate;
#X obj 30 6791 list.prepend;
#X text 200 6791 prepend atom or list before input list;
#X obj 30 6818 list.product;
#X text 200 6818 calculates product of floats in list;
#X obj 30 6845 list.range;
#X text 200 6845 returns list smallest and largest value;
#X obj 30 6872 list.reduce;
#X text 200 6872 apply function of two arguments cumulatively to the
list;
#X obj 30 6899 list.remove;
#X text 200 6899 on input list remove element(s) at specified
positions;
#X obj 30 6926 list.remove_if;
#X text 200 6926 remove elements by predicate;
#X obj 30 6953 list.repack;
#X text 200 6953 repack input list to specified size;
#X obj 30 6980 list.repeat;
#X text 200 6980 creates new list by repeating given list specified
times;
#X obj 30 7007 list.resize;
#X text 200 7007 changes list size;
#X obj 30 7034 list.reverse;
#X text 200 7034 reverses the order of the elements in the list;
#X obj 30 7061 list.rldecode;
#X text 200 7061 Run-length list decoder (RLE);
#X obj 30 7088 list.rlencode;
#X text 200 7088 RLE (run-length encoding) for lists;
#X obj 30 7115 list.rotate;
#X text 200 7115 rotates list;
#X obj 30 7142 list.route;
#X text 200 7142 acts like [route] but for lists;
#X obj 30 7169 list.search;
#X text 200 7169 search specified items in input list;
#X obj 30 7196 list.separate;
#X text 200 7196 sends list elements one by one separately;
#X obj 30 7223 list.seq;
#X text 200 7223 numeric sequence list generator;
#X obj 30 7250 list.set;
#X text 200 7250 on input list set value at specified position;
#X obj 30 7277 list.shift;
#X text 200 7277 shifts the contents of the list with linear
interpolation;
#X obj 30 7304 list.shuffle;
#X text 200 7304 randomly rearranges elements in list;
#X obj 30 7331 list.slice;
#X text 200 7331 extract sublist;
#X obj 30 7358 list.sort;
#X text 200 7358 sorts list values by ascending order;
#X obj 30 7385 list.sort_with;
#X text 200 7385 sort list with user defined side-chain;
#X obj 30 7412 list.split;
#X text 200 7412 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7449 list.stretch;
#X text 200 7449 stretches list - chenges its size with linear
interpolation.;
#X obj 30 7486 list.sum;
#X text 200 7486 calculates sum of floats in list;
#X obj 30 7513 list.unique;
#X text 200 7513 removes duplicates from input list;
#X obj 30 7540 list.unpack;
#X text 200 7540 unpack list elements to separate outlets;
#X obj 30 7567 list.unzip;
#X text 200 7567 splits list to N lists \, each to separate output;
#X obj 30 7594 list.walk;
#X text 200 7594 Walks thru the list;
#X obj 30 7621 list.zip;
#X text 200 7621 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7672 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7713 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7724 live.capture~;
#X text 200 7724 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7761 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7802 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7813 local.dict;
#X text 200 7813 local named dict object;
#X obj 30 7840 local.float;
#X text 200 7840 canvas-scoped named float variable;
#X obj 30 7867 local.int;
#X text 200 7867 canvas-scoped named integer variable;
#X obj 30 7894 local.list;
#X text 200 7894 local named list object;
#X obj 30 7921 local.mlist;
#X text 200 7921 local named mlist object;
#X obj 30 7948 local.set;
#X text 200 7948 local named set object;
#X obj 20 7975 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8016 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8027 math.abs;
#X text 200 8027 absolute value function;
#X obj 30 8054 math.acos;
#X text 200 8054 arc cosine function;
#X obj 30 8081 math.acosh;
#X text 200 8081 inverse hyperbolic cosine function;
#X obj 30 8108 math.and;
#X text 200 8108 operation AND for multiple arguments;
#X obj 30 8135 math.approx;
#X text 200 8135 check if input value approximately equal to pattern;
#X obj 30 8162 math.asin;
#X text 200 8162 arc sine function;
#X obj 30 8189 math.asinh;
#X text 200 8189 inverse hyperbolic sine function;
#X obj 30 8216 math.atan;
#X text 200 8216 arc tangent function;
#X obj 30 8243 math.atanh;
#X text 200 8243 inverse hyperbolic tangent function;
#X obj 30 8270 math.cbrt;
#X text 200 8270 cube root function;
#X obj 30 8297 math.cdiv~;
#X text 200 8297 division of complex signals;
#X obj 30 8324 math.ceil;
#X text 200 8324 round to smallest integral value not less than input
value;
#X obj 30 8351 math.cmul~;
#X text 200 8351 multiplication of complex signals;
#X obj 30 8378 math.cos;
#X text 200 8378 cosine function;
#X obj 30 8405 math.cosh;
#X text 200 8405 hyperbolic cosine function;
#X obj 30 8432 math.div;
#X text 200 8432 division (on lists too);
#X obj 30 8459 math.e;
#X text 200 8459 mathematical constant \, base of the natural
logarithm;
#X obj 30 8486 math.exp;
#X text 200 8486 exponential functions;
#X obj 30 8513 math.exp2;
#X text 200 8513 exponential functions;
#X obj 30 8540 math.expr;
#X text 200 8540 dynamic [expr];
#X obj 30 8567 math.floor;
#X text 200 8567 round to largest integral value not greater than x;
#X obj 30 8594 math.gcd;
#X text 200 8594 calculate greatest common divisor;
#X obj 30 8621 math.inf;
#X text 200 8621 infinity value that cannot be represented accurately;
#X obj 30 8648 math.lcm;
#X text 200 8648 calculate least common multiple;
#X obj 30 8675 math.log;
#X text 200 8675 logarithm functions;
#X obj 30 8702 math.log10;
#X text 200 8702 logarithm functions;
#X obj 30 8729 math.log2;
#X text 200 8729 logarithm functions;
#X obj 30 8756 math.mul;
#X text 200 8756 multiplication (on lists too);
#X obj 30 8783 math.nan;
#X text 200 8783 Not a Number \, unrepresentable value;
#X obj 30 8810 math.neg;
#X text 200 8810 negate function;
#X obj 30 8837 math.or;
#X text 200 8837 operation OR for multiple arguments;
#X obj 30 8864 math.pi;
#X text 200 8864 mathematical constant;
#X obj 30 8891 math.polyeval;
#X text 200 8891 evaluates the polynomial described by the
coefficients list;
#X obj 30 8918 math.reciprocal;
#X text 200 8918 calculate reciprocal number;
#X obj 30 8945 math.round;
#X text 200 8945 round to integral value \, regardless of rounding
direction;
#X obj 30 8972 math.round~;
#X text 200 8972 signal round;
#X obj 30 8999 math.sign;
#X text 200 8999 sign function;
#X obj 30 9026 math.sin;
#X text 200 9026 sine function;
#X obj 30 9053 math.sinh;
#X text 200 9053 hyperbolic sine function;
#X obj 30 9080 math.sqrt;
#X text 200 9080 square root function;
#X obj 30 9107 math.squared;
#X text 200 9107 value square;
#X obj 30 9134 math.tan;
#X text 200 9134 tangent function;
#X obj 30 9161 math.tanh;
#X text 200 9161 hyperbolic tangent function;
#X obj 30 9188 math.trunc;
#X text 200 9188 truncate to integer value;
#X obj 20 9215 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 9256 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9267 midi.ctl2str;
#X text 200 9267 convert Standard MIDI Controllers number to name;
#X obj 30 9294 midi.event2ctl;
#X text 200 9294 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9321 midi.event2note;
#X text 200 9321 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9348 midi.event2prg;
#X text 200 9348 convert MidiEvent message to midi program change
value;
#X obj 30 9375 midi.file;
#X text 200 9375 standard midi file SMF reader and writer;
#X obj 30 9402 midi.key2str;
#X text 200 9402 convert key number to SPN name according to tonality;
#X obj 30 9429 midi.prg2str;
#X text 200 9429 convert GM Instrument number to name (string or
symbol);
#X obj 30 9456 midi.track;
#X text 200 9456 extract track from MidiFile;
#X obj 20 9483 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9524 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9535 click~;
#X text 200 9535 Output single impulse on bang;
#X obj 30 9562 fluid~;
#X text 200 9562 FluidSynth SoundFont 2 player;
#X obj 30 9589 modplug~;
#X text 200 9589 MOD file player (using libmodplug);
#X obj 30 9616 speech.flite;
#X text 200 9616 render speech to array;
#X obj 20 9643 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9684 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9695 msg;
#X text 200 9695 message constructor;
#X obj 30 9722 msg.after;
#X text 200 9722 send specified message after incoming message;
#X obj 30 9749 msg.onload;
#X text 200 9749 send message when patch loads;
#X obj 20 9776 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9817 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9828 net.host2ip;
#X text 200 9828 returns IP address by DNS name;
#X obj 20 9855 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9896 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9907 noise.crackle~;
#X text 200 9907 sparse noise generator;
#X obj 30 9934 noise.lfreq0~;
#X text 200 9934 sampled/held noise (piecewise constant);
#X obj 30 9961 noise.lfreq~;
#X text 200 9961 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9988 noise.pink~;
#X text 200 9988 Pink noise generator;
#X obj 30 10015 noise.white~;
#X text 200 10015 White noise generator;
#X obj 20 10042 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10083 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10094 osc.blit~;
#X text 200 10094 Bandlimited impulse train oscillator;
#X obj 30 10121 osc.impulse~;
#X text 200 10121 Bandlimited impulse train generator;
#X obj 30 10148 osc.pulse~;
#X text 200 10148 Bandlimited pulse train oscillator;
#X obj 30 10175 osc.saw4~;
#X text 200 10175 Bandlimited sawtooth wave;
#X obj 30 10202 osc.saw~;
#X text 200 10202 Alias-free sawtooth wave;
#X obj 30 10229 osc.sinfb~;
#X text 200 10229 Sine oscilator with feedback;
#X obj 30 10256 osc.sin~;
#X text 200 10256 Sine wave oscillator;
#X obj 30 10283 osc.square~;
#X text 200 10283 Bandlimited square wave oscillator;
#X obj 30 10310 osc.tri~;
#X text 200 10310 Bandlimited triangle wave oscillator;
#X obj 20 10337 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10378 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10389 canvas.current;
#X text 200 10389 verbose information about current canvas;
#X obj 30 10416 canvas.top;
#X text 200 10416 verbose information about top-level canvas;
#X obj 30 10443 patch.args;
#X text 200 10443 Get patch or subpatch arguments;
#X obj 20 10470 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10511 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10522 path.basename;
#X text 200 10522 outputs filename portion of pathname;
#X obj 30 10549 path.dirname;
#X text 200 10549 outputs directory portion of pathname;
#X obj 30 10576 path.exists;
#X text 200 10576 checks if given path exists;
#X obj 30 10603 path.lsdir;
#X text 200 10603 list directory contents;
#X obj 20 10630 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10682 is_any;
#X text 200 10682 checks if input data has *any* type;
#X obj 30 10709 is_bang;
#X text 200 10709 checks if input data has *bang* type;
#X obj 30 10736 is_data;
#X text 200 10736 checks if input data has *data* type;
#X obj 30 10763 is_dict;
#X text 200 10763 checks if input data has *dict* type;
#X obj 30 10790 is_even;
#X text 200 10790 checks if input number is even;
#X obj 30 10817 is_file;
#X text 200 10817 checks if file exists and accessible;
#X obj 30 10844 is_float;
#X text 200 10844 checks if input data has *float* type;
#X obj 30 10871 is_list;
#X text 200 10871 checks if input data has *list* type;
#X obj 30 10898 is_odd;
#X text 200 10898 checks if input number is odd;
#X obj 30 10925 is_pointer;
#X text 200 10925 checks if input data has *pointer* type;
#X obj 30 10952 is_symbol;
#X text 200 10952 checks if input data has *symbol* type;
#X obj 20 10979 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11020 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11031 preset.float;
#X text 200 11031 load/store float preset;
#X obj 30 11058 preset.list;
#X text 200 11058 load/store symbol preset;
#X obj 30 11085 preset.storage;
#X text 200 11085 preset storage control;
#X obj 30 11112 preset.symbol;
#X text 200 11112 load/store symbol preset;
#X obj 20 11139 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 11180 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11191 patch.props;
#X text 200 11191 patch properties manager;
#X obj 30 11218 prop;
#X text 200 11218 get/set named property value for subpatch or
abstraction;
#X obj 30 11245 prop.declare;
#X text 200 11245 declare named property for subpatch or abstraction;
#X obj 30 11272 prop.get;
#X text 200 11272 Property extractor;
#X obj 30 11299 prop.get~;
#X text 200 11299 Property extractor from sound stream;
#X obj 30 11326 prop.set;
#X text 200 11326 Property injector;
#X obj 20 11353 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11394 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11405 proto.firmata;
#X text 200 11405 Firmata Arduino protocol support;
#X obj 20 11432 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11473 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11484 random.discrete;
#X text 200 11484 random weighted integers on interval [0 \, n);
#X obj 30 11511 random.float;
#X text 200 11511 random float generator in specified range;
#X obj 30 11538 random.gauss;
#X text 200 11538 gaussian random distribution;
#X obj 30 11565 random.int;
#X text 200 11565 Random integer generator in specified range;
#X obj 30 11592 random.linear;
#X text 200 11592 random linear distribution;
#X obj 30 11619 random.pw_const;
#X text 200 11619 piecewise constant random distribution;
#X obj 30 11646 random.pw_lin;
#X text 200 11646 piecewise linear random distribution;
#X obj 20 11673 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11714 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11725 snd.file;
#X text 200 11725 Sound file loader on steroids;
#X obj 20 11752 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11793 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11804 pan.cos~;
#X text 200 11804 two channel equal power sine/cosine panner;
#X obj 30 11831 pan.linsig~;
#X text 200 11831 two channel linear panner with signal control;
#X obj 30 11858 pan.lin~;
#X text 200 11858 two channel linear panner;
#X obj 30 11885 pan.spread~;
#X text 200 11885 spreads input channels across the stereo field;
#X obj 30 11912 pan.sqrt~;
#X text 200 11912 two channel equal power square root panner;
#X obj 30 11939 spat.pan4~;
#X text 200 11939 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11966 spat.pan8~;
#X text 200 11966 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11993 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 12034 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12045 string;
#X text 200 12045 string constructor;
#X obj 30 12072 string.contains;
#X text 200 12072 checks if given string contains specified substring;
#X obj 30 12099 string.ends_with;
#X text 200 12099 checks if given string ends with specified suffix;
#X obj 30 12126 string.equal;
#X text 200 12126 check strings for equality;
#X obj 30 12153 string.format;
#X text 200 12153 formats string like printf.;
#X obj 30 12180 string.join;
#X text 200 12180 joins (concatenates) strings with separator;
#X obj 30 12207 string.length;
#X text 200 12207 number of characters in string (unicode supported);
#X obj 30 12234 string.remove;
#X text 200 12234 remove substring from input string;
#X obj 30 12261 string.replace;
#X text 200 12261 replace from one substring to another in input
string;
#X obj 30 12288 string.split;
#X text 200 12288 split string by separator;
#X obj 30 12315 string.starts_with;
#X text 200 12315 checks if given string starts with specified prefix;
#X obj 30 12342 string.substr;
#X text 200 12342 extract substring from input string;
#X obj 30 12369 string2symbol;
#X text 200 12369 converts string to symbol;
#X obj 20 12396 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12437 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12448 symbol.equal;
#X text 200 12448 check symbols for equality;
#X obj 30 12475 symbol.length;
#X text 200 12475 number of characters in symbol (unicode supported);
#X obj 30 12502 symbol.num_compare;
#X text 200 12502 numeric symbol compare;
#X obj 20 12529 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12570 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12581 synth.bee3~;
#X text 200 12581 Hammond-oid organ FM synthesis instrument;
#X obj 30 12608 synth.birds~;
#X text 200 12608 bird singing generator;
#X obj 30 12635 synth.church_bell~;
#X text 200 12635 generic church bell modal model;
#X obj 30 12662 synth.dubdub~;
#X text 200 12662 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12699 synth.eguitar~;
#X text 200 12699 simple electric guitar model with steel strings;
#X obj 30 12726 synth.fgrain~;
#X text 200 12726 file granulator from STK;
#X obj 30 12753 synth.ks~;
#X text 200 12753 Karplus-Strong string;
#X obj 30 12780 synth.marimba~;
#X text 200 12780 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12817 synth.rhodey~;
#X text 200 12817 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12844 synth.risset_arp~;
#X text 200 12844 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12871 synth.risset_tone~;
#X text 200 12871 Jean Claude Risset's endless glissando;
#X obj 30 12898 synth.shakers~;
#X text 200 12898 various percussion sounds from STK library;
#X obj 30 12925 synth.wurley~;
#X text 200 12925 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12952 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12993 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13004 system.cursor;
#X text 200 13004 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 13041 system.getenv;
#X text 200 13041 Get system environment variables;
#X obj 30 13068 system.hostname;
#X text 200 13068 outputs system hostname;
#X obj 30 13095 system.memsize;
#X text 200 13095 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 13132 system.memused;
#X text 200 13132 returns the process physical memory use - current
and peak;
#X obj 30 13159 system.screen_size;
#X text 200 13159 returns current screen size in pixels;
#X obj 30 13186 system.shell;
#X text 200 13186 run external command in separate process;
#X obj 20 13213 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 13254 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13265 tl.bang;
#X text 200 13265 Timeline bang (with possible delay);
#X obj 30 13295 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 13292 Timeline section;
#X obj 30 13315 tl.timeline;
#X text 200 13315 Timeline - event scheduler;
#X obj 30 13342 tl.toggle;
#X text 200 13342 Timeline bang;
#X obj 30 13369 tl.transport;
#X text 200 13369 Timeline transport control;
#X obj 20 13396 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13437 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13451 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 13448 array view with cursor and selection;
#X obj 30 13474 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 13471 A bang... that's all;
#X obj 30 13497 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 13494 colorchooser widget;
#X obj 30 13520 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 13517 Display GUI object;
#X obj 30 13543 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 13540 GUI for turning DSP on/off;
#X obj 30 13566 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 13563 envelope editor widget;
#X obj 30 13589 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 13586 UI stereo gain control;
#X obj 30 13612 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 13609 UI gain control;
#X obj 30 13635 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 13632 simple icon with button capabilities;
#X obj 30 13658 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 13655 value increment/decrement;
#X obj 30 13681 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 13678 keyboard widget;
#X obj 30 13704 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 13701 knob widget;
#X obj 30 13727 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 13724 simple label widget;
#X obj 30 13750 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 13747 Hyperlink widget;
#X obj 30 13773 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 13770 The matrix of toggles has you.;
#X obj 30 13796 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 13793 Dropdown menu;
#X obj 30 13819 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 13816 Shows peak and rms signal level;
#X obj 30 13842 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 13839 counterpart of the vanilla [nbx];
#X obj 30 13865 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 13862 counterpart of the vanilla [nbx] for signal;
#X obj 30 13888 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 13885 Preset manager;
#X obj 30 13911 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 13908 counterpart of the vanilla radio toggle;
#X obj 30 13934 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 13931 range slider;
#X obj 30 13957 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 13954 Scope GUI object;
#X obj 30 13980 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 13977 counterpart of the vanilla slider;
#X obj 30 14003 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 14000 2D slider widget;
#X obj 30 14026 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 14023 Multiple slider widget;
#X obj 30 14049 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 14046 Spectroscope GUI object;
#X obj 30 14072 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 14069 displays a list of text buttons or text toggles;
#X obj 30 14095 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 14092 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 14115 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 14115 version: v0.7.1 \, license: GPL3;
#X obj 20 14134 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;