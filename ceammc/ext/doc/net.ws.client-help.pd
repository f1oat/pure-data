#N canvas 0 0 785 555 12;
#X declare -lib ceammc;
#X obj 636 50 cnv 1 129 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 636 50 Websocket client;
#X obj 1 1 cnv 5 765 40 empty empty net.ws.client 20 20 0 20 -104026
-4096 0;
#X obj 646 11 net.ws.client;
#X text 50 118 you can start testing websocket server with command:
'websocat -s 9000 -t -v';
#X msg 50 162 connect ws://localhost:8000;
#X msg 69 190 close;
#X msg 194 190 write MSG1;
#X msg 69 219 ping;
#X msg 194 219 write MSG2;
#X msg 69 248 latency;
#X msg 194 248 flush;
#X msg 69 277 send MESSAGE;
#X msg 213 277 send_json 1 2 A;
#X obj 50 320 net.ws.client;
#X obj 50 349 t a a;
#X obj 50 378 print;
#X obj 88 406 ui.dt;
#X obj 20 455 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 460 cnv 5 98 26 empty empty properties: 4 10 0 14 -262144
-49933 0;
#X msg 110 495 @mode;
#X text 245 495 Get/Set parsing mode for incoming messages. If 'fudi'
- interpret incoming websocket data as Pd messages \, if 'sym' - always
interpret as symbols \, 'data' - parse ceammc data \, 'json' - convert
json values to ceammc data. Type: symbol. Default value: fudi. Allowed
values: data \, fudi \, json \, sym.;
#X obj 20 592 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 597 cnv 5 73 26 empty empty methods: 4 10 0 14 -262144
-49933 0;
#X msg 110 632 close;
#X text 245 632 gracefully close connection (with websocket handshake).;
#X msg 110 659 connect;
#X text 245 659 connect to websocket server. Arguments are:;
#X obj 255 682 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 682 URL: url - ws://HOST:PORT/ \, for ex.: ws://127.0.0.1:9000/path.
Type: symbol.;
#X msg 110 722 flush;
#X text 245 722 flush output stream: sends all buffered messages.;
#X msg 110 749 latency;
#X text 245 749 measure rountrip latency. Outputs: latency TIME_MSEC.;
#X msg 110 776 ping;
#X text 245 776 send ping message to server (on server answer outputs:
pong DATA). Arguments are:;
#X obj 255 814 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 814 [DATA]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 839 send;
#X text 245 839 send as text message. Arguments are:;
#X obj 255 862 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 862 [ARGS]: arguments. Type: list.;
#X msg 110 887 send_binary;
#X text 245 887 send as binary bytes. Arguments are:;
#X obj 255 910 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 910 [ARGS]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 935 send_json;
#X text 245 935 send as encoded json. Arguments are:;
#X obj 255 958 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 958 [ARGS]: arguments. Type: list.;
#X msg 110 983 write;
#X text 245 983 write as text message to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1021 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1021 [ARGS]: arguments. Type: list.;
#X msg 110 1046 write_binary;
#X text 245 1046 write as binary bytes to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1084 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1084 [ARGS]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 1109 write_json;
#X text 245 1109 write as encoded json to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1147 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1147 [ARGS]: arguments. Type: list.;
#X obj 20 1182 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1187 cnv 5 64 26 empty empty inlets: 4 10 0 14 -262144
-49933 0;
#X text 110 1188 1\.;
#X text 245 1188 message input.;
#X obj 20 1218 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1223 cnv 5 73 26 empty empty outlets: 4 10 0 14 -262144
-49933 0;
#X text 110 1224 1\.;
#X text 245 1224 output messages: latency \, ping \, text \, binary
\, closed \, connected.;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 67 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 115 45 ::;
#X obj 131 48 ui.link @title net @url ceammc.net-help.pd;
#X obj 1 1289 cnv 5 765 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 1292 library: ceammc v0.9.7;
#X text 572 1304 see also:;
#X obj 646 1304 net.ws.server;
#N canvas 10 1311 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.9.7;
#X text 10 54 object:;
#X text 120 54 net.ws.client;
#X text 10 76 category:;
#X text 120 76 net;
#X text 10 98 since:;
#X text 120 98 0.9.8;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3 or later;
#X text 10 164 keywords:;
#X text 120 164 osc \, net \, send;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pd-ceammc @url
https://github.com/uliss/pd-ceammc;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 1311 pd info;
#X connect 5 0 14 0;
#X connect 12 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 15 1 17 0;
#X connect 6 0 14 0;
#X connect 8 0 14 0;
#X connect 10 0 14 0;
#X connect 7 0 14 0;
#X connect 9 0 14 0;
#X connect 11 0 14 0;
#X connect 13 0 14 0;