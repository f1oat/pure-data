// this is autogenerated file, do not edit manually!
#include "m_pd.h"
#ifndef __ui_sliders_tcl_h
#define __ui_sliders_tcl_h
namespace {
void ui_sliders_tcl_output() {
	sys_vgui("%s", "namespace eval ::ui {\nnamespace eval sliders {\nvariable lbl_font_size 7\nvariable lbl_font_family \"Helvetica\"\n}\nproc sliders_label_font {zoom} {\nreturn \"$sliders::lbl_font_family [expr $sliders::lbl_font_size*$zoom] normal roman\"\n}\nproc sliders_delete {cnv id} {\nset c [::ceammc::ui::widget_canvas $cnv $id]\nset t [::ceammc::ui::widget_tag $id]\n$c delete $t\n}\nproc sliders_draw_labels {cnv id w h zoom color lmin lmax} {\nset c [::ceammc::ui::widget_canvas $cnv $id]\nset f [sliders_label_font $zoom]\nset t [::ceammc::ui::widget_tag $id]\nset off [expr 3 * $zoom]\nset x0 $off\nset y0 $off\nset x1 $off\nset y1 [expr $h-$off]\n$c create text $x1 $y1 -text $lmin -anchor sw -justify left -font $f -fill $color -width 0 -tags $t\n$c create text $x0 $y0 -text $lmax -anchor nw -justify left -font $f -fill $color -width 0 -tags $t\n}\nproc sliders_draw_lines {cnv id w h zoom color} {\nset c [::ceammc::ui::widget_canvas $cnv $id]\nset f [sliders_label_font $zoom]\nset t [::ceammc::ui::widget_tag $id]\nif {$w > $h} {\ns");
	sys_vgui("%s", "et x0 0\nset y0 [expr $h/2]\nset x1 $w\nset y1 $y0\n} else {\nset x0 [expr $w/2]\nset y0 0\nset x1 $x0\nset y1 $h\n}\nset line_color [::tk::Darken $color 70]\n$c create line $x0 $y0 $x1 $y1 -fill $line_color -width $zoom -capstyle butt -tags $t\n}\nproc sliders_draw_vbar {c t w h zoom color i bar} {\nset v [expr $bar / 999.0]\nif { $v < 0 } { set v 0 }\nif { $v > 1 } { set v 1 }\nset x0 [expr $i*$w]\nset y0 [expr (1-$v)*$h]\nset x1 [expr ($i+1)*$w]\nset y1 $h\nif {$w > 1 } {\nset oc [::tk::Darken $color 110]\n} else {\nset oc {}\n}\n$c create rectangle $x0 $y0 $x1 $y1 -fill $color -outline $oc -width 1 -tags $t\nset handle_color [::tk::Darken $color 70]\n$c create line $x0 $y0 $x1 $y0 -fill $handle_color -width [expr 2*$zoom] -capstyle butt -tags $t\n}\nproc sliders_draw_hbar {c t w h zoom color i bar} {\nset v [expr $bar / 999.0]\nif { $v < 0 } { set v 0 }\nif { $v > 1 } { set v 1 }\nset x0 0\nset y0 [expr $i*$h]\nset x1 [expr $v*$w]\nset y1 [expr ($i+1)*$h]\nif {$w > 1 } {\nset oc [::tk::Darken $color 110]\n} else {\nset oc {");
	sys_vgui("%s", "}\n}\n$c create rectangle $x0 $y0 $x1 $y1 -fill $color -outline $oc -width 1 -tags $t\nset handle_color [::tk::Darken $color 70]\n$c create line $x1 $y0 $x1 $y1 -fill $handle_color -width [expr 2*$zoom] -capstyle butt -tags $t\n}\nproc sliders_draw_bars {cnv id w h zoom bar_color active_color vert active args} {\nset c [::ceammc::ui::widget_canvas $cnv $id]\nset t [::ceammc::ui::widget_tag $id]\nset n [llength $args]\nif { $n == 0 } { return }\nif { $vert == 0 } {\nset bar_w [expr $w / ($n+0.0)]\nfor { set i 0 } { $i < $n } { incr i } {\nif { $active == $i } { continue }\nset bar [lindex $args $i]\nsliders_draw_vbar $c $t $bar_w $h $zoom $bar_color $i $bar\n}\nif { $active >= 0 && $active < [llength $args] } {\nset bar [lindex $args $active]\nsliders_draw_vbar $c $t $bar_w $h $zoom $active_color $active $bar\n}\n} else {\nset bar_h [expr $h / ($n+0.0)]\nfor { set i 0 } { $i < $n } { incr i } {\nif { $active == $i } { continue }\nset bar [lindex $args $i]\nsliders_draw_hbar $c $t $w $bar_h $zoom $bar_color $i $bar\n");
	sys_vgui("%s", "}\nif { $active >= 0 && $active < [llength $args] } {\nset bar [lindex $args $active]\nsliders_draw_hbar $c $t $w $bar_h $zoom $active_color $active $bar\n}\n}\n}\n}\n");
}
}
#endif // __ui_sliders_tcl_h
