#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot;
#X text 200 560 array data plotter;
#X obj 30 587 array.plot~;
#X text 200 587 plot signal on specified array;
#X obj 30 614 array.resample;
#X text 200 614 array resampler;
#X obj 30 641 array.rms;
#X text 200 641 calculates root mean square value for array;
#X obj 30 668 array.set;
#X text 200 668 set array content from list;
#X obj 30 695 array.stddev;
#X text 200 695 calculates standard deviation for array values;
#X obj 30 722 array.stretch;
#X text 200 722 array time-stretch \, pitch-shift or rate-change;
#X obj 30 749 array.sum;
#X text 200 749 calculates sum of array elements;
#X obj 30 776 array.sum2;
#X text 200 776 calculates sum of squares of array elements;
#X obj 30 803 array.variance;
#X text 200 803 calculates variance of array values;
#X obj 30 830 array.vplay;
#X text 200 830 simple array player for using with vline~;
#X obj 30 857 array.window;
#X text 200 857 fill array with window;
#X obj 30 884 plot.geomspace~;
#X text 200 884 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 924 plot.hist~;
#X text 200 924 calculate and output signal histogram;
#X obj 30 951 plot.linspace~;
#X text 200 951 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 991 plot.logspace~;
#X text 200 991 outputs numbers spaced evenly on a log scale;
#X obj 30 1018 plot.response~;
#X text 200 1018 output amp/phase freq response to impulse;
#X obj 20 1045 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1086 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1097 ceammc.search;
#X text 200 1097 ceammc library search object;
#X obj 30 1127 ui.link @title [function] @url function-help.pd;
#X text 200 1124 named function;
#X obj 30 1149 function.call;
#X text 200 1149 call named function;
#X obj 30 1176 gain~;
#X text 200 1176 multislot signal gain;
#X obj 30 1203 logger;
#X text 200 1203 advanced data logger;
#X obj 30 1230 matrix~;
#X text 200 1230 signal routing matrix;
#X obj 30 1257 metro.pattern;
#X text 200 1257 metro with rhythmic patterns;
#X obj 30 1284 metro.random;
#X text 200 1284 metro random bang with specified range;
#X obj 30 1311 metro.seq;
#X text 200 1311 metro sequencer;
#X obj 30 1338 mix~;
#X text 200 1338 multislot signal mixer;
#X obj 30 1365 nsig~;
#X text 200 1365 Mulitchannel converter from control to audio rate;
#X obj 30 1392 obj.props;
#X text 200 1392 property extractor;
#X obj 30 1419 radio;
#X text 200 1419 float index to outlet values as radio switch;
#X obj 30 1446 sync;
#X text 200 1446 value synchronization;
#X obj 30 1473 window;
#X text 200 1473 returns window value by given window position;
#X obj 30 1500 xdac~;
#X text 200 1500 dac~ with channel ranges;
#X obj 30 1527 xfade2~;
#X text 200 1527 multi stereo-signal crossfade;
#X obj 30 1554 xfade~;
#X text 200 1554 multi signal crossfade;
#X obj 20 1581 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1633 chaos.gbman0;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.gbman0~;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.jong;
#X text 200 1687 Peter de Jong attractor;
#X obj 30 1714 chaos.logistic;
#X text 200 1714 Logistic map chaotic generator;
#X obj 30 1741 chaos.std0;
#X text 200 1741 Standard map chaotic generator;
#X obj 30 1768 chaos.std0~;
#X text 200 1768 Standard map chaotic generator;
#X obj 20 1795 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1847 array.p2s;
#X text 200 1847 convert array phase [0\..1] to sample position;
#X obj 30 1874 array.s2p;
#X text 200 1874 convert sample position to phase range [0\..1];
#X obj 30 1901 conv.amp2dbfs;
#X text 200 1901 convert from amplitude to decibel full scale;
#X obj 30 1928 conv.amp2dbfs~;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.bits2bang;
#X text 200 1955 convert list of bits to bang events;
#X obj 30 1982 conv.bits2int;
#X text 200 1982 convert list of bits to integer;
#X obj 30 2009 conv.bits2note;
#X text 200 2009 convert list of bits to note events;
#X obj 30 2036 conv.bits2pos;
#X text 200 2036 convert list of bits to list of bit position;
#X obj 30 2063 conv.bpm2hz;
#X text 200 2063 converts BPM to frequency in herz;
#X obj 30 2090 conv.bpm2ms;
#X text 200 2090 convert frequency in BPM to period in milliseconds;
#X obj 30 2117 conv.bpm2sec;
#X text 200 2117 convert frequency in BPM to period in seconds;
#X obj 30 2144 conv.car2pol;
#X text 200 2144 convert cartesian coords to polar;
#X obj 30 2171 conv.cc2amp;
#X text 200 2171 convert from MIDI Control Change range;
#X obj 30 2198 conv.dbfs2amp;
#X text 200 2198 convert decibel full scale to amplitude;
#X obj 30 2225 conv.dbfs2amp~;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.degree2key;
#X text 200 2252 convert scale degree to key;
#X obj 30 2279 conv.hex2int;
#X text 200 2279 hex symbol to int value;
#X obj 30 2306 conv.int2bits;
#X text 200 2306 convert integer to list of bits;
#X obj 30 2333 conv.lin2curve;
#X text 200 2333 map linear to exponential range with 0 allowed.;
#X obj 30 2360 conv.lin2exp;
#X text 200 2360 maps linear range to exponential range;
#X obj 30 2387 conv.lin2lin;
#X text 200 2387 convert from one linear range to another;
#X obj 30 2414 conv.lin2lin~;
#X text 200 2414 convert from one linear range to another for signals;
#X obj 30 2441 conv.list2props;
#X text 200 2441 converts list to series of property messages;
#X obj 30 2468 conv.midi2freq;
#X text 200 2468 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2508 conv.ms2bpm;
#X text 200 2508 convert period in milliseconds to frequency in BPM;
#X obj 30 2535 conv.ms2samp;
#X text 200 2535 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2575 conv.ms2samp~;
#X text 200 2575 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2615 conv.phase2rad;
#X text 200 2615 convert phase value [0-1] to radians [0-2π];
#X obj 30 2642 conv.phase2rad~;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.pitch2midi;
#X text 200 2669 converts symbol pitch name to MIDI note number;
#X obj 30 2696 conv.pol2car;
#X text 200 2696 convert from polar coordinates to cartesian;
#X obj 30 2723 conv.rad2phase;
#X text 200 2723 convert radians value to phase;
#X obj 30 2750 conv.rad2phase~;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.samp2ms;
#X text 200 2777 convert samples to time according to samplerate;
#X obj 30 2804 conv.samp2ms~;
#X text 200 2804 convert samples to milliseconds according to samplerate;
#X obj 30 2831 conv.samp2sec;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.sec2bpm;
#X text 200 2858 convert period in seconds to frequency in BPM;
#X obj 30 2885 conv.sec2samp;
#X text 200 2885 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2925 conv.sec2str;
#X text 200 2925 converts float time in seconds to formated symbol
(or string);
#X obj 30 2952 conv.sig2float~;
#X text 200 2952 convert signal to floats;
#X obj 30 2979 conv.str2sec;
#X text 200 2979 converts formatted time to float value in seconds;
#X obj 20 3006 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3058 data.copy;
#X text 200 3058 make copy for any data types: MList \, Set etc...;
#X obj 30 3085 data.dict;
#X text 200 3085 dictionary container: store values by key;
#X obj 30 3112 data.fifo;
#X text 200 3112 First-In-First-Out (FIFO) queue data container;
#X obj 30 3139 data.float;
#X text 200 3139 robust float object;
#X obj 30 3166 data.int;
#X text 200 3166 robust int object;
#X obj 30 3193 data.list;
#X text 200 3193 list container;
#X obj 30 3220 data.mlist;
#X text 200 3220 multidimensional list container;
#X obj 30 3247 data.set;
#X text 200 3247 container that store unique elements;
#X obj 30 3274 data.set2list;
#X text 200 3274 converts set to list;
#X obj 30 3301 dict.contains;
#X text 200 3301 predicate to check if dict contains a keys;
#X obj 30 3328 dict.each;
#X text 200 3328 map each value in dict;
#X obj 30 3355 dict.from_list;
#X text 200 3355 creates dictionary from list;
#X obj 30 3382 dict.get;
#X text 200 3382 output dict values;
#X obj 30 3409 dict.keys;
#X text 200 3409 get list of dict keys;
#X obj 30 3436 dict.pass;
#X text 200 3436 passes specified keys in dict;
#X obj 30 3463 dict.reject;
#X text 200 3463 rejects specified keys from dict;
#X obj 30 3490 dict.size;
#X text 200 3490 dictionary size;
#X obj 30 3517 dict.to_list;
#X text 200 3517 converts dictionary to plain list;
#X obj 30 3544 dict.values;
#X text 200 3544 dictionary values as mlist;
#X obj 30 3571 mlist.flatten;
#X text 200 3571 flatten nested mlist;
#X obj 30 3598 rtree.to_list;
#X text 200 3598 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3625 set.contains;
#X text 200 3625 check if specified element is in set;
#X obj 30 3652 set.diff;
#X text 200 3652 difference between two sets;
#X obj 30 3679 set.equal;
#X text 200 3679 checks if two sets are equal (contains same elements);
#X obj 30 3706 set.intersect;
#X text 200 3706 output intersection of given sets;
#X obj 30 3733 set.size;
#X text 200 3733 get number of elements in set;
#X obj 30 3760 set.symdiff;
#X text 200 3760 symmetric difference between two sets;
#X obj 30 3787 set.union;
#X text 200 3787 output union of given sets;
#X obj 20 3814 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3855 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3866 dyn.comp2~;
#X text 200 3866 stereo dynamic range compressor;
#X obj 30 3893 dyn.comp~;
#X text 200 3893 mono dynamic range compressors;
#X obj 30 3920 dyn.gate2~;
#X text 200 3920 stereo signal gate;
#X obj 30 3947 dyn.gate~;
#X text 200 3947 mono signal gate;
#X obj 30 3974 dyn.limit2~;
#X text 200 3974 stereo 1176LN Peak Limiter;
#X obj 30 4001 dyn.limit~;
#X text 200 4001 mono 1176LN Peak Limiter;
#X obj 30 4028 dyn.softclip~;
#X text 200 4028 soft signal clip;
#X obj 20 4055 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4096 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4107 env.adsr~;
#X text 200 4107 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4134 env.ar~;
#X text 200 4134 Attack/Release envelope generator;
#X obj 30 4161 env.asr~;
#X text 200 4161 Attack/Sustain/Release envelope generator;
#X obj 30 4188 env.concat;
#X text 200 4188 Envelope concatenation;
#X obj 30 4215 env.follow~;
#X text 200 4215 Envelope follower with independent attack and release
times;
#X obj 30 4242 env.mix;
#X text 200 4242 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4282 env.smooth~;
#X text 200 4282 An envelope with an exponential attack and release;
#X obj 30 4309 env.tscale;
#X text 200 4309 Envelope time-scale;
#X obj 30 4336 env.tshift;
#X text 200 4336 Envelope time-shift (horizontal);
#X obj 30 4363 env.vscale;
#X text 200 4363 Envelope value-scale;
#X obj 30 4390 env2array;
#X text 200 4390 Renders envelope to specified array;
#X obj 30 4417 env2vline;
#X text 200 4417 Converts envelope to bunch of vline messages;
#X obj 30 4444 envelope;
#X text 200 4444 Envelope data type;
#X obj 30 4471 vline2env;
#X text 200 4471 Converts vline messages to env;
#X obj 20 4498 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4550 expand_env;
#X text 200 4550 Substitute environment variables in data stream;
#X obj 30 4577 flow.append;
#X text 200 4577 append message to flow stream;
#X obj 30 4604 flow.change;
#X text 200 4604 rejects redundant input values;
#X obj 30 4631 flow.count;
#X text 200 4631 control flow event counter;
#X obj 30 4658 flow.delay;
#X text 200 4658 enhanced version on vanilla delay object;
#X obj 30 4685 flow.demultiplex;
#X text 200 4685 control flow demultiplexer;
#X obj 30 4712 flow.demultiplex2~;
#X text 200 4712 audio stream stereo demultiplexer;
#X obj 30 4739 flow.demultiplex~;
#X text 200 4739 audio stream demultiplexer;
#X obj 30 4766 flow.dup;
#X text 200 4766 message duplicator;
#X obj 30 4793 flow.gate;
#X text 200 4793 control flow gate. [spigot] analog;
#X obj 30 4820 flow.greater;
#X text 200 4820 numeric stream router;
#X obj 30 4847 flow.greater_eq;
#X text 200 4847 numeric stream router;
#X obj 30 4874 flow.group;
#X text 200 4874 group input atoms in list of specified size;
#X obj 30 4901 flow.interval;
#X text 200 4901 measure time between flow events;
#X obj 30 4928 flow.less;
#X text 200 4928 numeric stream router \, like many [moses];
#X obj 30 4955 flow.less_eq;
#X text 200 4955 numeric stream router \, like many [moses];
#X obj 30 4982 flow.list2many;
#X text 200 4982 routes list element with message selectors;
#X obj 30 5009 flow.match;
#X text 200 5009 route data flow by regexp match;
#X obj 30 5036 flow.mem;
#X text 200 5036 store data flow in memory;
#X obj 30 5063 flow.multiplex;
#X text 200 5063 control flow multiplexer;
#X obj 30 5090 flow.multiplex2~;
#X text 200 5090 audio stream stereo multiplexer;
#X obj 30 5117 flow.multiplex~;
#X text 200 5117 audio stream multiplexer;
#X obj 30 5144 flow.once;
#X text 200 5144 one message pass thru;
#X obj 30 5171 flow.pack;
#X text 200 5171 flow pack;
#X obj 30 5198 flow.pass;
#X text 200 5198 pass specified values;
#X obj 30 5225 flow.pass_if;
#X text 200 5225 pass values that accepted by predicate object;
#X obj 30 5252 flow.pipe;
#X text 200 5252 enhanced version on vanilla pipe object;
#X obj 30 5279 flow.queue;
#X text 200 5279 multi-channel control flow sync queue (or FIFO);
#X obj 30 5306 flow.reject;
#X text 200 5306 reject specified values;
#X obj 30 5333 flow.reject_if;
#X text 200 5333 reject values by predicate;
#X obj 30 5360 flow.ring;
#X text 200 5360 dataflow ring buffer;
#X obj 30 5387 flow.route;
#X text 200 5387 advanced message router;
#X obj 30 5414 flow.select;
#X text 200 5414 vanilla flow on steroids;
#X obj 30 5441 flow.space;
#X text 200 5441 space in time messages received at the same logical
time;
#X obj 30 5468 flow.speedlim;
#X text 200 5468 control stream speed limiter;
#X obj 30 5495 flow.split;
#X text 200 5495 split data flow by external side-chain predicate;
#X obj 30 5522 flow.stack;
#X text 200 5522 any message stack;
#X obj 30 5549 flow.sync;
#X text 200 5549 bus with only hot inlets;
#X obj 30 5576 flow.sync_pack;
#X text 200 5576 flow pack with all hot inlets;
#X obj 30 5603 flow.tee~;
#X text 200 5603 separate audio and control streams;
#X obj 30 5630 replace;
#X text 200 5630 Replace atoms in data stream;
#X obj 30 5657 route.float;
#X text 200 5657 separate float messages from other types;
#X obj 20 5684 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5725 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5736 flt.biquad~;
#X text 200 5736 second order IIR filter.;
#X obj 30 5763 flt.bpf12~;
#X text 200 5763 Two pole band-pass butterworth filter;
#X obj 30 5790 flt.bpf24~;
#X text 200 5790 Four pole band-pass butterworth filter;
#X obj 30 5817 flt.c_apf;
#X text 200 5817 Allpass filter coefficient calculator for biquad;
#X obj 30 5844 flt.c_bpf~;
#X text 200 5844 BPF coefficient calculator for biquad filter;
#X obj 30 5871 flt.c_highshelf~;
#X text 200 5871 Highshelf filter coefficient calculator for biquad;
#X obj 30 5898 flt.c_hpf;
#X text 200 5898 HPF coefficient calculator for biquad filter;
#X obj 30 5925 flt.c_hpf~;
#X text 200 5925 HPF coefficient calculator for biquad filter;
#X obj 30 5952 flt.c_lowshelf~;
#X text 200 5952 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5979 flt.c_lpf;
#X text 200 5979 LPF coefficient calculator for biquad filter;
#X obj 30 6006 flt.c_lpf~;
#X text 200 6006 LPF coefficient calculator for biquad filter;
#X obj 30 6033 flt.c_notch;
#X text 200 6033 Notch filter coefficient calculator for biquad;
#X obj 30 6060 flt.c_notch~;
#X text 200 6060 Band-reject coefficient calculator for biquad filter;
#X obj 30 6087 flt.c_peak~;
#X text 200 6087 Peaking equalizer calculator for biquad;
#X obj 30 6114 flt.c_pole;
#X text 200 6114 One-pole coefficient calculator for biquad filter;
#X obj 30 6141 flt.dcblock2~;
#X text 200 6141 stereo DC blocker;
#X obj 30 6168 flt.dcblock~;
#X text 200 6168 mono DC blocker;
#X obj 30 6195 flt.eq10~;
#X text 200 6195 graphic 10 band equalizer;
#X obj 30 6222 flt.eq_peak_cq~;
#X text 200 6222 constant-Q second order peaking equalizer section;
#X obj 30 6249 flt.eq_peak~;
#X text 200 6249 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6304 flt.fb_comb~;
#X text 200 6304 feedback comb filter;
#X obj 30 6331 flt.fbank5x1~;
#X text 200 6331 5 band one octave butterworth filterbank;
#X obj 30 6358 flt.ff_comb~;
#X text 200 6358 feed forward comb filter;
#X obj 30 6385 flt.freqz;
#X text 200 6385 compute the frequency response of a digital filter;
#X obj 30 6412 flt.freqz~;
#X text 200 6412 compute the frequency response of a digital filter;
#X obj 30 6439 flt.highshelf~;
#X text 200 6439 gain boost|cut above some frequency;
#X obj 30 6466 flt.hpf12~;
#X text 200 6466 High-pass second order Butterworth filter;
#X obj 30 6493 flt.hpf24~;
#X text 200 6493 High-pass fourth order Butterworth filter;
#X obj 30 6520 flt.lowshelf~;
#X text 200 6520 gain boost|cut below some frequency;
#X obj 30 6547 flt.lpf12~;
#X text 200 6547 Low-pass second order Butterworth filter;
#X obj 30 6574 flt.lpf24~;
#X text 200 6574 Low-pass fourth order Butterworth filter;
#X obj 30 6601 flt.median;
#X text 200 6601 Median control flow filter;
#X obj 30 6628 flt.moog_vcf~;
#X text 200 6628 Moog Voltage Controlled Filter;
#X obj 30 6655 flt.notch~;
#X text 200 6655 band-rejection filter;
#X obj 30 6682 flt.resonbp~;
#X text 200 6682 Simple resonant bandpass filter;
#X obj 20 6709 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6750 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6761 fx.bitdown~;
#X text 200 6761 bit downer and downsampler effect;
#X obj 30 6788 fx.chorus~;
#X text 200 6788 Chorus effect;
#X obj 30 6815 fx.distortion1~;
#X text 200 6815 distortion #1 from Guitarix effects set;
#X obj 30 6842 fx.distortion2~;
#X text 200 6842 distortion #2 from Guitarix effects set;
#X obj 30 6869 fx.distortion3~;
#X text 200 6869 simple distortion #3 from Guitarix effects set;
#X obj 30 6896 fx.distortion~;
#X text 200 6896 cubic nonlinearity distortion;
#X obj 30 6923 fx.drive~;
#X text 200 6923 Guitarix drive effect;
#X obj 30 6950 fx.drone_box~;
#X text 200 6950 mono sympathetic resonance generator;
#X obj 30 6977 fx.echo~;
#X text 200 6977 simple echo effect;
#X obj 30 7004 fx.flanger~;
#X text 200 7004 mono flanging effect;
#X obj 30 7031 fx.freeverb2~;
#X text 200 7031 freeverb2 - stereo version of freeverb;
#X obj 30 7058 fx.freeverb~;
#X text 200 7058 freeverb - common used open-source reverb;
#X obj 30 7085 fx.freqshift~;
#X text 200 7085 frequency shifter or single-sideband ring modulation;
#X obj 30 7112 fx.granulator~;
#X text 200 7112 simple input stream granulator;
#X obj 30 7139 fx.greyhole~;
#X text 200 7139 A complex echo-like effect;
#X obj 30 7166 fx.infrev~;
#X text 200 7166 port of Infinity VST plugin from airwindows;
#X obj 30 7193 fx.looper~;
#X text 200 7193 One track looper;
#X obj 30 7220 fx.pitchshift_s~;
#X text 200 7220 signal version of fx.pitchshift~;
#X obj 30 7247 fx.pitchshift~;
#X text 200 7247 simple pitch shifter based on 2 delay lines;
#X obj 30 7274 fx.sdelay~;
#X text 200 7274 smooth delay with a feedback control;
#X obj 30 7301 fx.vocoder~;
#X text 200 7301 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7341 fx.wahwah~;
#X text 200 7341 digitized CryBaby wah pedal;
#X obj 30 7368 fx.zita_rev1~;
#X text 200 7368 Zita stereo reverb;
#X obj 20 7395 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7436 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7447 global.dict;
#X text 200 7447 global named dict object;
#X obj 30 7474 global.float;
#X text 200 7474 global named float object;
#X obj 30 7501 global.int;
#X text 200 7501 global named integer object;
#X obj 30 7528 global.list;
#X text 200 7528 global named list object;
#X obj 30 7555 global.mlist;
#X text 200 7555 global named mlist object;
#X obj 30 7582 global.set;
#X text 200 7582 global named set object;
#X obj 20 7609 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7650 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7661 hw.apple_smc;
#X text 200 7661 query the system management control in Apples;
#X obj 30 7688 hw.apple_sms;
#X text 200 7688 query the sudden motion sensor in Apples;
#X obj 30 7715 hw.arduino;
#X text 200 7715 Arduino device;
#X obj 30 7742 hw.cpu_temp;
#X text 200 7742 get CPU temperature;
#X obj 30 7769 hw.display;
#X text 200 7769 get/set display properties;
#X obj 30 7796 hw.kbd_light;
#X text 200 7796 Get/set keyboard light on some devices;
#X obj 30 7823 hw.serial;
#X text 200 7823 serial port device;
#X obj 20 7850 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 7891 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7902 lang.faust~;
#X text 200 7902 faust realtime compilation;
#X obj 30 7932 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 7929 faust compiled ui object;
#X obj 20 7954 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7995 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8006 lfo.+pulse~;
#X text 200 8006 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8033 lfo.+saw~;
#X text 200 8033 Positive unit-amplitude low frequency saw wave;
#X obj 30 8060 lfo.+square~;
#X text 200 8060 Positive low frequency square wave;
#X obj 30 8087 lfo.+tri~;
#X text 200 8087 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8114 lfo.impulse~;
#X text 200 8114 Unit-amplitude low-frequency impulse train;
#X obj 30 8141 lfo.pulse~;
#X text 200 8141 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8168 lfo.saw~;
#X text 200 8168 Full-range unit-amplitude low frequency saw;
#X obj 30 8195 lfo.square~;
#X text 200 8195 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8222 lfo.tri~;
#X text 200 8222 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8249 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8290 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8301 list.^at;
#X text 200 8301 on input index(es) outputs list element(s);
#X obj 30 8328 list.^contains;
#X text 200 8328 checks if input atom is found in the list;
#X obj 30 8355 list.^search;
#X text 200 8355 on input atom returns it index in list;
#X obj 30 8382 list.all_of;
#X text 200 8382 checks if all list atoms accepted by predicate;
#X obj 30 8409 list.any_of;
#X text 200 8409 checks if at least one list element is accepted by
predicate;
#X obj 30 8436 list.append;
#X text 200 8436 append atom or list to the end of input list;
#X obj 30 8463 list.apply_to;
#X text 200 8463 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8503 list.at;
#X text 200 8503 outputs list element(s) at specified index(es);
#X obj 30 8530 list.choice;
#X text 200 8530 outputs random element from list;
#X obj 30 8557 list.contains;
#X text 200 8557 checks if input list contains specified atoms;
#X obj 30 8584 list.count;
#X text 200 8584 output the number of items that equal to specified
value;
#X obj 30 8611 list.count_if;
#X text 200 8611 output the number of items that satisfy to external
predicate;
#X obj 30 8638 list.delta;
#X text 200 8638 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8678 list.distribution;
#X text 200 8678 list value distribution;
#X obj 30 8705 list.do;
#X text 200 8705 iterate and modify list contents via side-chain;
#X obj 30 8732 list.each;
#X text 200 8732 maps each list value via external side-chain;
#X obj 30 8759 list.enumerate;
#X text 200 8759 enumerates input list;
#X obj 30 8786 list.equal;
#X text 200 8786 checks if given lists are equal;
#X obj 30 8813 list.first;
#X text 200 8813 returns first list element;
#X obj 30 8840 list.gen;
#X text 200 8840 generates list of specified length via external generator;
#X obj 30 8867 list.histogram;
#X text 200 8867 outputs distribution histogram;
#X obj 30 8894 list.insert;
#X text 200 8894 insert atom or list to the specified position of input
list;
#X obj 30 8921 list.integrator;
#X text 200 8921 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8961 list.last;
#X text 200 8961 output last list element;
#X obj 30 8988 list.length;
#X text 200 8988 output the number of atoms in the list;
#X obj 30 9015 list.max;
#X text 200 9015 output largest element in the list;
#X obj 30 9042 list.mean;
#X text 200 9042 calculates average of list of floats;
#X obj 30 9069 list.min;
#X text 200 9069 returns smallest element in the list;
#X obj 30 9096 list.none_of;
#X text 200 9096 checks if none of list atoms is accepted by predicate;
#X obj 30 9123 list.normalize;
#X text 200 9123 normalizes float list values to get their sum = 1.0;
#X obj 30 9150 list.pass_if;
#X text 200 9150 leave only elements accepted by predicate;
#X obj 30 9177 list.prepend;
#X text 200 9177 prepend atom or list before input list;
#X obj 30 9204 list.product;
#X text 200 9204 calculates product of floats in list;
#X obj 30 9231 list.range;
#X text 200 9231 output list smallest and largest value;
#X obj 30 9258 list.reduce;
#X text 200 9258 apply function of two arguments cumulatively to the
list;
#X obj 30 9285 list.remove;
#X text 200 9285 remove list element(s) at specified positions;
#X obj 30 9312 list.remove_if;
#X text 200 9312 remove elements by predicate;
#X obj 30 9339 list.repack;
#X text 200 9339 repack list to specified size;
#X obj 30 9366 list.repeat;
#X text 200 9366 output new list by repeating input list specified
times;
#X obj 30 9393 list.resample;
#X text 200 9393 resample list with specified ratio;
#X obj 30 9420 list.resize;
#X text 200 9420 changes list size;
#X obj 30 9447 list.reverse;
#X text 200 9447 reverses the order of the elements in the list;
#X obj 30 9474 list.rldecode;
#X text 200 9474 Run-length list decoder (RLE);
#X obj 30 9501 list.rlencode;
#X text 200 9501 RLE (run-length encoding) for lists;
#X obj 30 9528 list.rotate;
#X text 200 9528 rotates list;
#X obj 30 9555 list.route;
#X text 200 9555 acts like [route] but for lists;
#X obj 30 9582 list.search;
#X text 200 9582 search specified items in input list;
#X obj 30 9609 list.separate;
#X text 200 9609 sends list elements one by one separately;
#X obj 30 9636 list.seq;
#X text 200 9636 numeric sequence list generator;
#X obj 30 9663 list.set;
#X text 200 9663 set list value at specified position;
#X obj 30 9690 list.shift;
#X text 200 9690 shifts the contents of the list with linear interpolation;
#X obj 30 9717 list.shuffle;
#X text 200 9717 randomly rearranges elements in list;
#X obj 30 9744 list.slice;
#X text 200 9744 extract sublist;
#X obj 30 9771 list.sort;
#X text 200 9771 sorts list values by ascending order;
#X obj 30 9798 list.sort_with;
#X text 200 9798 sort list with user defined side-chain;
#X obj 30 9825 list.split;
#X text 200 9825 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9865 list.stretch;
#X text 200 9865 stretches list - changes its size with linear interpolation;
#X obj 30 9892 list.sum;
#X text 200 9892 calculates sum of floats in list;
#X obj 30 9919 list.unique;
#X text 200 9919 removes duplicates from input list;
#X obj 30 9946 list.unpack;
#X text 200 9946 unpack list elements to separate outlets;
#X obj 30 9973 list.unzip;
#X text 200 9973 splits list to N lists \, each to separate output;
#X obj 30 10000 list.walk;
#X text 200 10000 Walks thru the list;
#X obj 30 10027 list.zip;
#X text 200 10027 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10082 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10123 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10134 live.capture~;
#X text 200 10134 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10174 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10215 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10226 local.dict;
#X text 200 10226 local named dict object;
#X obj 30 10253 local.float;
#X text 200 10253 canvas-scoped named float variable;
#X obj 30 10280 local.int;
#X text 200 10280 canvas-scoped named integer variable;
#X obj 30 10307 local.list;
#X text 200 10307 local named list object;
#X obj 30 10334 local.mlist;
#X text 200 10334 local named mlist object;
#X obj 30 10361 local.set;
#X text 200 10361 local named set object;
#X obj 20 10388 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10429 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10440 math.abs;
#X text 200 10440 absolute value function;
#X obj 30 10467 math.abs~;
#X text 200 10467 absolute value function for signals;
#X obj 30 10494 math.acos;
#X text 200 10494 arc cosine function;
#X obj 30 10521 math.acosh;
#X text 200 10521 inverse hyperbolic cosine function;
#X obj 30 10548 math.acosh~;
#X text 200 10548 hyperbolic arc cosine for signals;
#X obj 30 10575 math.acos~;
#X text 200 10575 arc cosine function for signals;
#X obj 30 10602 math.and;
#X text 200 10602 operation AND for multiple arguments;
#X obj 30 10629 math.approx;
#X text 200 10629 check if input value approximately equal to pattern;
#X obj 30 10656 math.asin;
#X text 200 10656 arc sine function;
#X obj 30 10683 math.asinh;
#X text 200 10683 inverse hyperbolic sine function;
#X obj 30 10710 math.asinh~;
#X text 200 10710 hyperbolic arc sine for signals;
#X obj 30 10737 math.asin~;
#X text 200 10737 arc sine for signals;
#X obj 30 10764 math.atan;
#X text 200 10764 arc tangent function;
#X obj 30 10791 math.atanh;
#X text 200 10791 inverse hyperbolic tangent function;
#X obj 30 10818 math.atanh~;
#X text 200 10818 hyperbolic arc tangent for signals;
#X obj 30 10845 math.atan~;
#X text 200 10845 arc tangent for signals;
#X obj 30 10872 math.cabs~;
#X text 200 10872 magnitude of a complex signals;
#X obj 30 10899 math.carg~;
#X text 200 10899 phase angle of a complex signals;
#X obj 30 10926 math.cbrt;
#X text 200 10926 cube root function;
#X obj 30 10953 math.cbrt~;
#X text 200 10953 cube root function for signals;
#X obj 30 10980 math.cdiv~;
#X text 200 10980 division of complex signals;
#X obj 30 11007 math.ceil;
#X text 200 11007 round to smallest integral value not less than input
value;
#X obj 30 11034 math.ceil~;
#X text 200 11034 round to smallest integral value not less than input
value;
#X obj 30 11061 math.cexp~;
#X text 200 11061 exponent of a complex signals;
#X obj 30 11088 math.cmul~;
#X text 200 11088 multiplication of complex signals;
#X obj 30 11115 math.cos;
#X text 200 11115 cosine function;
#X obj 30 11142 math.cosh;
#X text 200 11142 hyperbolic cosine function;
#X obj 30 11169 math.cosh~;
#X text 200 11169 hyperbolic cosine for signals;
#X obj 30 11196 math.cos~;
#X text 200 11196 cosine function;
#X obj 30 11223 math.div;
#X text 200 11223 division (on lists too);
#X obj 30 11250 math.e;
#X text 200 11250 mathematical constant \, base of the natural logarithm;
#X obj 30 11277 math.erf;
#X text 200 11277 error function;
#X obj 30 11304 math.erf~;
#X text 200 11304 error function for signals;
#X obj 30 11331 math.exp;
#X text 200 11331 exponential functions;
#X obj 30 11358 math.exp2;
#X text 200 11358 exponential functions;
#X obj 30 11385 math.exp2~;
#X text 200 11385 base-2 exponential for signal;
#X obj 30 11412 math.expr;
#X text 200 11412 dynamic [expr];
#X obj 30 11439 math.exp~;
#X text 200 11439 base-e exponential for signal;
#X obj 30 11466 math.floor;
#X text 200 11466 round to largest integral value not greater than
x;
#X obj 30 11493 math.floor~;
#X text 200 11493 round to largest integral value not greater than
x;
#X obj 30 11520 math.gamma;
#X text 200 11520 gamma function;
#X obj 30 11547 math.gamma~;
#X text 200 11547 gamma function for floating point signals;
#X obj 30 11574 math.gcd;
#X text 200 11574 calculate greatest common divisor;
#X obj 30 11601 math.inf;
#X text 200 11601 infinity value that cannot be represented accurately;
#X obj 30 11628 math.inf~;
#X text 200 11628 inifinity signal generator;
#X obj 30 11655 math.lcm;
#X text 200 11655 calculate least common multiple;
#X obj 30 11682 math.lgamma;
#X text 200 11682 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11709 math.lgamma~;
#X text 200 11709 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11749 math.log;
#X text 200 11749 natural logarithm;
#X obj 30 11776 math.log10;
#X text 200 11776 logarithm functions;
#X obj 30 11803 math.log10~;
#X text 200 11803 natural logarithm;
#X obj 30 11830 math.log2;
#X text 200 11830 logarithm functions;
#X obj 30 11857 math.log2~;
#X text 200 11857 base-2 logarithm;
#X obj 30 11884 math.log~;
#X text 200 11884 natural logarithm;
#X obj 30 11911 math.mul;
#X text 200 11911 multiplication (on lists too);
#X obj 30 11938 math.nan;
#X text 200 11938 Not a Number \, unrepresentable value;
#X obj 30 11965 math.nan~;
#X text 200 11965 signal NaN;
#X obj 30 11992 math.neg;
#X text 200 11992 negate function;
#X obj 30 12019 math.or;
#X text 200 12019 operation OR for multiple arguments;
#X obj 30 12046 math.pi;
#X text 200 12046 mathematical constant;
#X obj 30 12073 math.pi~;
#X text 200 12073 mathematical constant;
#X obj 30 12100 math.polyeval;
#X text 200 12100 evaluates the polynomial described by the coefficients
list;
#X obj 30 12127 math.reciprocal;
#X text 200 12127 calculate reciprocal number;
#X obj 30 12154 math.reciprocal~;
#X text 200 12154 calculate reciprocal number for signals;
#X obj 30 12181 math.round;
#X text 200 12181 round to integral value \, regardless of rounding
direction;
#X obj 30 12208 math.round~;
#X text 200 12208 signal round;
#X obj 30 12235 math.sign;
#X text 200 12235 sign function;
#X obj 30 12262 math.sin;
#X text 200 12262 sine function;
#X obj 30 12289 math.sinh;
#X text 200 12289 hyperbolic sine function;
#X obj 30 12316 math.sinh~;
#X text 200 12316 hyperbolic sine for signals;
#X obj 30 12343 math.sin~;
#X text 200 12343 sine function;
#X obj 30 12370 math.sqrt;
#X text 200 12370 square root function;
#X obj 30 12397 math.sqrt~;
#X text 200 12397 square root for signal;
#X obj 30 12424 math.squared;
#X text 200 12424 value square;
#X obj 30 12451 math.squared~;
#X text 200 12451 signal value square;
#X obj 30 12478 math.sync_add;
#X text 200 12478 sync addition;
#X obj 30 12505 math.sync_and;
#X text 200 12505 sync logical AND operation;
#X obj 30 12532 math.sync_div;
#X text 200 12532 sync division;
#X obj 30 12559 math.sync_eq;
#X text 200 12559 sync equal numbers check;
#X obj 30 12586 math.sync_ge;
#X text 200 12586 sync greater equal numbers compare;
#X obj 30 12613 math.sync_gt;
#X text 200 12613 sync greater then numbers compare;
#X obj 30 12640 math.sync_le;
#X text 200 12640 sync less equal numbers compare;
#X obj 30 12667 math.sync_lshift;
#X text 200 12667 sync signed bit left shift;
#X obj 30 12694 math.sync_lt;
#X text 200 12694 sync less then numbers compare;
#X obj 30 12721 math.sync_mod;
#X text 200 12721 sync remainder of modulo division (float or integer);
#X obj 30 12748 math.sync_mul;
#X text 200 12748 sync multiplication;
#X obj 30 12775 math.sync_ne;
#X text 200 12775 sync numbers for not equality;
#X obj 30 12802 math.sync_or;
#X text 200 12802 sync logical OR operation;
#X obj 30 12829 math.sync_rshift;
#X text 200 12829 sync signed bit right shift;
#X obj 30 12856 math.sync_sub;
#X text 200 12856 sync subtraction;
#X obj 30 12883 math.sync_xor;
#X text 200 12883 sync logical XOR operation;
#X obj 30 12910 math.tan;
#X text 200 12910 tangent function;
#X obj 30 12937 math.tanh;
#X text 200 12937 hyperbolic tangent function;
#X obj 30 12964 math.tanh~;
#X text 200 12964 hyperbolic tangent for signals;
#X obj 30 12991 math.tan~;
#X text 200 12991 tangent function;
#X obj 30 13018 math.trunc;
#X text 200 13018 truncate to integer value;
#X obj 30 13045 math.trunc~;
#X text 200 13045 truncate to integer value;
#X obj 20 13072 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13113 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13124 midi.cc;
#X text 200 13124 enhanced version of vanilla ctlin;
#X obj 30 13151 midi.clock;
#X text 200 13151 midi clock toolbox;
#X obj 30 13178 midi.ctl2str;
#X text 200 13178 convert Standard MIDI Controllers number to name;
#X obj 30 13205 midi.event2ctl;
#X text 200 13205 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13232 midi.event2note;
#X text 200 13232 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13259 midi.event2prg;
#X text 200 13259 convert MidiEvent message to midi program change
value;
#X obj 30 13286 midi.file;
#X text 200 13286 standard midi file SMF reader and writer;
#X obj 30 13313 midi.kbd;
#X text 200 13313 computer keyboard midi;
#X obj 30 13340 midi.key2str;
#X text 200 13340 convert key number to SPN name according to tonality;
#X obj 30 13367 midi.oct;
#X text 200 13367 midi octave transpose;
#X obj 30 13394 midi.prg2str;
#X text 200 13394 convert GM Instrument number to name (string or symbol);
#X obj 30 13421 midi.sustain;
#X text 200 13421 sustain pedal emulation;
#X obj 30 13448 midi.sysex;
#X text 200 13448 sysex input messages as list;
#X obj 30 13475 midi.track;
#X text 200 13475 extract track from MidiFile;
#X obj 30 13502 midi.tuning;
#X text 200 13502 apply tuning to midi messages;
#X obj 30 13529 midi.vramp;
#X text 200 13529 apply crescendo or diminuendo for midi message flow;
#X obj 30 13556 midi.vrand;
#X text 200 13556 midi velocity randomizer;
#X obj 20 13583 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13624 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13635 click~;
#X text 200 13635 Output single impulse on bang;
#X obj 30 13662 fluid~;
#X text 200 13662 FluidSynth SoundFont 2 player;
#X obj 30 13689 modplug~;
#X text 200 13689 MOD file player (using libmodplug);
#X obj 30 13716 speech.flite;
#X text 200 13716 render speech to array;
#X obj 30 13743 speech.flite~;
#X text 200 13743 render speech to array;
#X obj 20 13770 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13811 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13822 loadexpr;
#X text 200 13822 send message when patch loads;
#X obj 30 13849 msg;
#X text 200 13849 message constructor;
#X obj 30 13876 msg.after;
#X text 200 13876 send specified message after incoming message;
#X obj 30 13903 msg.onload;
#X text 200 13903 send message when patch loads;
#X obj 20 13930 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13971 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13982 net.host2ip;
#X text 200 13982 returns IP address by DNS name;
#X obj 20 14009 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14050 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14061 noise.baker;
#X text 200 14061 Part of a-chaos library;
#X obj 30 14088 noise.clifford;
#X text 200 14088 Part of a-chaos library;
#X obj 30 14115 noise.collatz;
#X text 200 14115 Part of a-chaos library;
#X obj 30 14142 noise.crackle~;
#X text 200 14142 sparse noise generator;
#X obj 30 14169 noise.duffing;
#X text 200 14169 Part of a-chaos library;
#X obj 30 14196 noise.ginger;
#X text 200 14196 Gingerbreadman map chaotic generator;
#X obj 30 14223 noise.henon;
#X text 200 14223 Part of a-chaos library;
#X obj 30 14250 noise.henon_heilles;
#X text 200 14250 Part of a-chaos library;
#X obj 30 14277 noise.henon_phase;
#X text 200 14277 Part of a-chaos library;
#X obj 30 14304 noise.henonf;
#X text 200 14304 Part of a-chaos library;
#X obj 30 14331 noise.ikeda;
#X text 200 14331 Part of a-chaos library;
#X obj 30 14358 noise.lfreq0~;
#X text 200 14358 sampled/held noise (piecewise constant);
#X obj 30 14385 noise.lfreq~;
#X text 200 14385 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14412 noise.lorenz;
#X text 200 14412 Part of a-chaos library;
#X obj 30 14439 noise.lyapunov;
#X text 200 14439 Part of a-chaos library;
#X obj 30 14466 noise.navier_stokes;
#X text 200 14466 Part of a-chaos library;
#X obj 30 14493 noise.pink~;
#X text 200 14493 Pink noise generator;
#X obj 30 14520 noise.rossler;
#X text 200 14520 Part of a-chaos library;
#X obj 30 14547 noise.stein;
#X text 200 14547 Part of a-chaos library;
#X obj 30 14574 noise.torus;
#X text 200 14574 Part of a-chaos library;
#X obj 30 14601 noise.verhulst;
#X text 200 14601 Part of a-chaos library;
#X obj 30 14628 noise.white~;
#X text 200 14628 White noise generator;
#X obj 20 14655 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14696 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14707 osc.blit~;
#X text 200 14707 Bandlimited impulse train oscillator;
#X obj 30 14734 osc.impulse~;
#X text 200 14734 Bandlimited impulse train generator;
#X obj 30 14761 osc.pulse~;
#X text 200 14761 Bandlimited pulse train oscillator;
#X obj 30 14788 osc.saw4~;
#X text 200 14788 Bandlimited sawtooth wave;
#X obj 30 14815 osc.saw~;
#X text 200 14815 Alias-free sawtooth wave;
#X obj 30 14842 osc.sinfb~;
#X text 200 14842 Sine oscilator with feedback;
#X obj 30 14869 osc.sin~;
#X text 200 14869 Sine wave oscillator;
#X obj 30 14896 osc.square~;
#X text 200 14896 Bandlimited square wave oscillator;
#X obj 30 14923 osc.tri~;
#X text 200 14923 Bandlimited triangle wave oscillator;
#X obj 20 14950 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14991 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15002 canvas.current;
#X text 200 15002 verbose information about current canvas;
#X obj 30 15029 canvas.dir;
#X text 200 15029 current canvas directory;
#X obj 30 15056 canvas.name;
#X text 200 15056 current canvas name;
#X obj 30 15083 canvas.path;
#X text 200 15083 current canvas fullpath;
#X obj 30 15110 canvas.top;
#X text 200 15110 verbose information about top-level canvas;
#X obj 30 15137 patch.args;
#X text 200 15137 Get patch or subpatch arguments;
#X obj 30 15164 patch.deps;
#X text 200 15164 patch dependencies: used objects and abstractions;
#X obj 30 15191 patch.tree;
#X text 200 15191 patch tree;
#X obj 20 15218 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15270 path.basename;
#X text 200 15270 outputs filename portion of pathname;
#X obj 30 15297 path.dirname;
#X text 200 15297 outputs directory portion of pathname;
#X obj 30 15324 path.exists;
#X text 200 15324 checks if given path exists;
#X obj 30 15351 path.is_dir;
#X text 200 15351 check if path is directory;
#X obj 30 15378 path.lsdir;
#X text 200 15378 list directory contents;
#X obj 20 15405 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15446 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15457 is_any;
#X text 200 15457 checks if input data has *any* type;
#X obj 30 15484 is_bang;
#X text 200 15484 checks if input data has *bang* type;
#X obj 30 15511 is_data;
#X text 200 15511 checks if input data has *data* type;
#X obj 30 15538 is_dict;
#X text 200 15538 checks if input data has *dict* type;
#X obj 30 15565 is_even;
#X text 200 15565 checks if input number is even;
#X obj 30 15592 is_file;
#X text 200 15592 checks if file exists and accessible;
#X obj 30 15619 is_float;
#X text 200 15619 checks if input data has *float* type;
#X obj 30 15646 is_list;
#X text 200 15646 checks if input data has *list* type;
#X obj 30 15673 is_odd;
#X text 200 15673 checks if input number is odd;
#X obj 30 15700 is_pointer;
#X text 200 15700 checks if input data has *pointer* type;
#X obj 30 15727 is_symbol;
#X text 200 15727 checks if input data has *symbol* type;
#X obj 20 15754 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15795 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15806 preset.float;
#X text 200 15806 load/store float preset;
#X obj 30 15833 preset.list;
#X text 200 15833 load/store symbol preset;
#X obj 30 15860 preset.storage;
#X text 200 15860 preset storage control;
#X obj 30 15887 preset.symbol;
#X text 200 15887 load/store symbol preset;
#X obj 20 15914 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15955 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15966 patch.props;
#X text 200 15966 patch properties manager;
#X obj 30 15993 prop;
#X text 200 15993 get/set named property value for subpatch or abstraction;
#X obj 30 16020 prop.declare;
#X text 200 16020 declare named property for subpatch or abstraction;
#X obj 30 16047 prop.get;
#X text 200 16047 get property from connected object/subpatch/abstraction;
#X obj 30 16074 prop.get~;
#X text 200 16074 Property extractor from sound stream;
#X obj 30 16101 prop.join;
#X text 200 16101 join property to main data flow;
#X obj 30 16128 prop.set;
#X text 200 16128 set object property;
#X obj 30 16155 prop.split;
#X text 200 16155 separate properties from dataflow;
#X obj 20 16182 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16223 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16234 proto.firmata;
#X text 200 16234 Firmata Arduino protocol support;
#X obj 30 16261 proto.midi;
#X text 200 16261 raw midi encoder/parser;
#X obj 30 16288 proto.sp.alpaca;
#X text 200 16288 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16315 proto.xtouch_ext;
#X text 200 16315 Behringer XTouch Extender XMidi protocol;
#X obj 20 16342 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16383 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16394 random.atom;
#X text 200 16394 weighted atom generation from specified list;
#X obj 30 16421 random.discrete;
#X text 200 16421 random weighted integers on interval [0 \, n);
#X obj 30 16448 random.float;
#X text 200 16448 uniform random float generator in specified range;
#X obj 30 16475 random.gauss;
#X text 200 16475 gaussian random distribution;
#X obj 30 16502 random.int;
#X text 200 16502 uniform random integer generator in specified range;
#X obj 30 16529 random.linear;
#X text 200 16529 random linear distribution;
#X obj 30 16556 random.pw_const;
#X text 200 16556 piecewise constant random distribution;
#X obj 30 16583 random.pw_lin;
#X text 200 16583 piecewise linear random distribution;
#X obj 20 16610 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16651 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16662 seq.arp;
#X text 200 16662 sequence arpeggiator;
#X obj 30 16689 seq.bangs;
#X text 200 16689 bang sequencer;
#X obj 30 16716 seq.counter;
#X text 200 16716 modulo counter;
#X obj 30 16743 seq.life;
#X text 200 16743 Conway gamw of life sequencer;
#X obj 30 16770 seq.matrix;
#X text 200 16770 sequencer control for ui.matrix;
#X obj 30 16797 seq.nbangs;
#X text 200 16797 output specified number of bang with time intervals;
#X obj 30 16824 seq.phasor;
#X text 200 16824 control rate phasor (saw) generator;
#X obj 30 16851 seq.toggles;
#X text 200 16851 toggle sequencer;
#X obj 30 16878 sequencer;
#X text 200 16878 basic sequence player;
#X obj 20 16905 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16946 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16957 snd.file;
#X text 200 16957 Sound file loader on steroids;
#X obj 20 16984 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 17025 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17036 hoa.2d.decoder~;
#X text 200 17036 hoa 2d decoder;
#X obj 30 17063 hoa.2d.encoder~;
#X text 200 17063 hoa 2d encoder;
#X obj 30 17090 hoa.2d.map~;
#X text 200 17090 a 2d ambisonic multisource spatializer;
#X obj 30 17117 hoa.2d.optim~;
#X text 200 17117 a 2D ambisonic optimization tool;
#X obj 30 17144 hoa.2d.projector~;
#X text 200 17144 a plane waves decomposer from circular harmonics
domain;
#X obj 30 17171 hoa.2d.recomposer~;
#X text 200 17171 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 17211 hoa.2d.rotate~;
#X text 200 17211 a 2D ambisonic sound field rotation;
#X obj 30 17238 hoa.2d.wider~;
#X text 200 17238 a 2d fractional ambisonic order simulator;
#X obj 30 17265 hoa.@process;
#X text 200 17265 process properties manager for hoa.process~;
#X obj 30 17292 hoa.in;
#X text 200 17292 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17319 hoa.in~;
#X text 200 17319 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17346 hoa.out;
#X text 200 17346 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17373 hoa.out~;
#X text 200 17373 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17400 hoa.process~;
#X text 200 17400 patcher loader for multichannel processing;
#X obj 30 17430 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17427 a 2d ambisonic harmonic scope;
#X obj 30 17452 pan.cos~;
#X text 200 17452 two channel equal power sine/cosine panner;
#X obj 30 17479 pan.linsig~;
#X text 200 17479 two channel linear panner with signal control;
#X obj 30 17506 pan.lin~;
#X text 200 17506 two channel linear panner;
#X obj 30 17533 pan.spread~;
#X text 200 17533 spreads input channels across the stereo field;
#X obj 30 17560 pan.sqrt~;
#X text 200 17560 two channel equal power square root panner;
#X obj 30 17587 spat.pan4~;
#X text 200 17587 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17614 spat.pan8~;
#X text 200 17614 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17641 spat.zita6x8~;
#X text 200 17641 spat with 6 inputs sources to 8 channel output;
#X obj 20 17668 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17709 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17720 string;
#X text 200 17720 string constructor;
#X obj 30 17747 string.contains;
#X text 200 17747 checks if string contains specified substring;
#X obj 30 17774 string.ends_with;
#X text 200 17774 checks if string ends with specified substring;
#X obj 30 17801 string.equal;
#X text 200 17801 check strings or symbols for equality;
#X obj 30 17828 string.format;
#X text 200 17828 formats string like printf.;
#X obj 30 17855 string.join;
#X text 200 17855 joins (concatenates) strings with separator;
#X obj 30 17882 string.length;
#X text 200 17882 number of characters in string (unicode supported);
#X obj 30 17909 string.match;
#X text 200 17909 check if string match regular expression;
#X obj 30 17936 string.remove;
#X text 200 17936 remove substring from input string;
#X obj 30 17963 string.replace;
#X text 200 17963 replace from one substring to another in input string;
#X obj 30 17990 string.split;
#X text 200 17990 split string by separator;
#X obj 30 18017 string.starts_with;
#X text 200 18017 checks if string starts with specified substring;
#X obj 30 18044 string.substr;
#X text 200 18044 extract substring from input string;
#X obj 30 18071 string2symbol;
#X text 200 18071 converts string to symbol;
#X obj 20 18098 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18139 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18150 symbol.equal;
#X text 200 18150 check symbols for equality;
#X obj 30 18177 symbol.length;
#X text 200 18177 number of characters in symbol (unicode supported);
#X obj 30 18204 symbol.num_compare;
#X text 200 18204 numeric symbol compare;
#X obj 30 18231 symbol2any;
#X text 200 18231 converts symbol to message;
#X obj 30 18258 symbol2intlist;
#X text 200 18258 converts symbol to list of character codes;
#X obj 20 18285 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18326 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18337 synth.bee3~;
#X text 200 18337 Hammond-oid organ FM synthesis instrument;
#X obj 30 18364 synth.birds~;
#X text 200 18364 bird singing generator;
#X obj 30 18391 synth.church_bell~;
#X text 200 18391 generic church bell modal model;
#X obj 30 18418 synth.dubdub~;
#X text 200 18418 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18458 synth.dx7~;
#X text 200 18458 FAUST dx7 implementation;
#X obj 30 18485 synth.eguitar~;
#X text 200 18485 simple electric guitar model with steel strings;
#X obj 30 18512 synth.fgrain~;
#X text 200 18512 file granulator from STK;
#X obj 30 18539 synth.glass_harm~;
#X text 200 18539 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 18566 synth.glitch~;
#X text 200 18566 Glitch synthesizer by naivesound;
#X obj 30 18593 synth.harpsichord~;
#X text 200 18593 waveguide commuted harpsichord;
#X obj 30 18620 synth.ks~;
#X text 200 18620 Karplus-Strong string;
#X obj 30 18647 synth.marimba~;
#X text 200 18647 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18687 synth.piano~;
#X text 200 18687 waveguide commuted piano;
#X obj 30 18714 synth.rhodey~;
#X text 200 18714 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18741 synth.risset_arp~;
#X text 200 18741 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18768 synth.risset_tone~;
#X text 200 18768 Jean Claude Risset's endless glissando;
#X obj 30 18795 synth.russian_bell~;
#X text 200 18795 russian church bell modal model;
#X obj 30 18822 synth.shakers~;
#X text 200 18822 various percussion sounds from STK library;
#X obj 30 18849 synth.sitar~;
#X text 200 18849 STK sitar;
#X obj 30 18876 synth.wurley~;
#X text 200 18876 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18903 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18944 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18955 system.colorpanel;
#X text 200 18955 System color panel dialog popup;
#X obj 30 18982 system.cursor;
#X text 200 18982 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 19009 system.exec;
#X text 200 19009 run external command in separate process;
#X obj 30 19036 system.exit;
#X text 200 19036 quit PureData;
#X obj 30 19063 system.getenv;
#X text 200 19063 Get system environment variables;
#X obj 30 19090 system.hostname;
#X text 200 19090 outputs system hostname;
#X obj 30 19117 system.memsize;
#X text 200 19117 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 19157 system.memused;
#X text 200 19157 returns the process physical memory use - current
and peak;
#X obj 30 19184 system.screen_size;
#X text 200 19184 returns current screen size in pixels;
#X obj 20 19211 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 19252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19263 tl.bang;
#X text 200 19263 Timeline bang (with possible delay);
#X obj 30 19293 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 19290 Timeline section;
#X obj 30 19315 tl.timeline;
#X text 200 19315 Timeline - event scheduler;
#X obj 30 19342 tl.toggle;
#X text 200 19342 Timeline bang;
#X obj 30 19369 tl.transport;
#X text 200 19369 Timeline transport control;
#X obj 20 19396 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19437 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19451 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19448 array view with cursor and selection;
#X obj 30 19476 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19473 A bang... that's all;
#X obj 30 19501 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19498 button widget;
#X obj 30 19526 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19523 colorchooser widget;
#X obj 30 19551 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19548 Display GUI object;
#X obj 30 19576 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19573 GUI for turning DSP on/off;
#X obj 30 19601 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19598 envelope editor widget;
#X obj 30 19626 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 19623 UI filter object calculator for biquad filter;
#X obj 30 19651 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19648 UI filter object based on biquad filter;
#X obj 30 19676 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19673 UI stereo gain control;
#X obj 30 19701 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19698 UI gain control;
#X obj 30 19726 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19723 simple icon with button capabilities;
#X obj 30 19751 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19748 value increment/decrement;
#X obj 30 19776 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19773 keyboard widget;
#X obj 30 19801 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19798 knob widget;
#X obj 30 19826 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19823 simple label widget;
#X obj 30 19851 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19848 Hyperlink widget;
#X obj 30 19876 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19873 The matrix of toggles has you.;
#X obj 30 19901 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19898 Dropdown menu;
#X obj 30 19926 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19923 Shows peak and rms signal level;
#X obj 30 19951 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19948 incoming MIDI message viewport;
#X obj 30 19976 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19973 filter mouse events from ui objects;
#X obj 30 20001 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19998 routes mouse events from ui objects;
#X obj 30 20026 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 20023 counterpart of the vanilla [nbx];
#X obj 30 20051 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 20048 counterpart of the vanilla [nbx] for signal;
#X obj 30 20076 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 20073 signal plotter;
#X obj 30 20101 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 20098 2D slider in polar coordinates;
#X obj 30 20126 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 20123 Preset manager;
#X obj 30 20151 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 20148 counterpart of the vanilla radio toggle;
#X obj 30 20176 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 20173 range slider;
#X obj 30 20201 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 20198 Scope GUI object;
#X obj 30 20226 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 20223 counterpart of the vanilla slider;
#X obj 30 20251 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 20248 2D slider widget;
#X obj 30 20276 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 20273 Multiple slider widget;
#X obj 30 20301 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 20298 Spectroscope GUI object;
#X obj 30 20326 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20323 displays a list of text buttons or text toggles;
#X obj 30 20351 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20348 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20373 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20373 version: v0.9.2 \, license: GPL3;
#X obj 20 20401 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20424 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20388 msg 0;
#X obj 670 20423 switch~;
#X connect 1416 0 1417 0;