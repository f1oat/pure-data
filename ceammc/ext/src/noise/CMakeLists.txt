set(NOISE_SOURCES mod_noise.h mod_noise.cpp)

macro(ceammc_noise_extension name)
    list(APPEND NOISE_SOURCES "noise_${name}.c")
endmacro()

macro(ceammc_faust_noise_extension name)
    list(APPEND NOISE_SOURCES "noise_${name}.cpp")
    ceammc_faust_gen(noise ${name})
endmacro()

macro(ceammc_faust_noise_obj name)
    list(APPEND NOISE_SOURCES "noise_${name}.cpp")
    ceammc_faust_gen_obj(noise ${name} JSON)
endmacro()

ceammc_noise_extension(baker)
ceammc_noise_extension(clifford)
ceammc_noise_extension(collatz)
ceammc_noise_extension(duffing)
#ceammc_noise_extension(fibonacci)
ceammc_noise_extension(ginger)
ceammc_noise_extension(henon)
ceammc_noise_extension(henonf)
ceammc_noise_extension(henon_heilles)
ceammc_noise_extension(henon_phase)
ceammc_noise_extension(ikeda)
ceammc_noise_extension(jong)
ceammc_noise_extension(logistic)
ceammc_noise_extension(lorenz)
ceammc_noise_extension(lyapunov)
ceammc_noise_extension(navier_stokes)
ceammc_noise_extension(rossler)
ceammc_noise_extension(stein)
ceammc_noise_extension(torus)
ceammc_noise_extension(verhulst)

ceammc_faust_noise_obj(crackle)
ceammc_faust_noise_obj(lfreq)
ceammc_faust_noise_obj(lfreq0)
ceammc_faust_noise_obj(pink)
ceammc_faust_noise_obj(white)

list(APPEND NOISE_SOURCES chaos_standard.cpp chaos_gbman.cpp)

add_library(ceammc_noise STATIC ${NOISE_SOURCES})
target_include_directories(ceammc_noise PUBLIC ${PROJECT_SOURCE_DIR}/src)
target_compile_definitions(ceammc_noise PUBLIC "FAUST_MACRO")
