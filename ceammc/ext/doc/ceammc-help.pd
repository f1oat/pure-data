#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 30 776 plot.geomspace~;
#X text 200 776 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 816 plot.linspace~;
#X text 200 816 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 20 856 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 911 ui.link @title [function] @url function-help.pd;
#X text 200 908 named function;
#X obj 30 933 function.call;
#X text 200 933 call named function;
#X obj 30 960 gain~;
#X text 200 960 multislot signal gain;
#X obj 30 987 matrix~;
#X text 200 987 signal routing matrix;
#X obj 30 1014 metro.pattern;
#X text 200 1014 metro with rhythmic patterns;
#X obj 30 1041 metro.random;
#X text 200 1041 metro random bang with specified range;
#X obj 30 1068 metro.seq;
#X text 200 1068 metro sequencer;
#X obj 30 1095 mix~;
#X text 200 1095 multislot signal mixer;
#X obj 30 1122 obj.props;
#X text 200 1122 property extractor;
#X obj 30 1149 radio;
#X text 200 1149 float index to outlet values as radio switch;
#X obj 30 1176 window;
#X text 200 1176 returns window value by given window position;
#X obj 30 1203 xdac~;
#X text 200 1203 dac~ with channel ranges;
#X obj 30 1230 xfade2~;
#X text 200 1230 multi stereo-signal crossfade;
#X obj 30 1257 xfade~;
#X text 200 1257 multi signal crossfade;
#X obj 20 1284 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1325 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1336 chaos.gbman0;
#X text 200 1336 Gingerbreadman map chaotic generator;
#X obj 30 1363 chaos.gbman0~;
#X text 200 1363 Gingerbreadman map chaotic generator;
#X obj 20 1390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1442 array.p2s;
#X text 200 1442 convert array phase [0\..1] to sample position;
#X obj 30 1469 array.s2p;
#X text 200 1469 convert array sample position to relative phase position
[0\..1];
#X obj 30 1509 conv.amp2dbfs;
#X text 200 1509 convert from amplitude to decibel full scale;
#X obj 30 1536 conv.amp2dbfs~;
#X text 200 1536 convert from amplitude to decibel full scale;
#X obj 30 1563 conv.bpm2hz;
#X text 200 1563 converts BPM to frequency in herz;
#X obj 30 1590 conv.bpm2ms;
#X text 200 1590 convert frequency in BPM to period in milliseconds;
#X obj 30 1617 conv.bpm2sec;
#X text 200 1617 convert frequency in BPM to period in seconds;
#X obj 30 1644 conv.car2pol;
#X text 200 1644 convert cartesian coords to polar;
#X obj 30 1671 conv.cc2amp;
#X text 200 1671 convert from MIDI Control Change range;
#X obj 30 1698 conv.dbfs2amp;
#X text 200 1698 convert decibel full scale to amplitude;
#X obj 30 1725 conv.lin2curve;
#X text 200 1725 map linear to exponential range with 0 allowed.;
#X obj 30 1752 conv.lin2exp;
#X text 200 1752 maps linear range to exponential range;
#X obj 30 1779 conv.lin2lin;
#X text 200 1779 convert from one linear range to another;
#X obj 30 1806 conv.lin2lin~;
#X text 200 1806 convert from one linear range to another for signals;
#X obj 30 1833 conv.list2props;
#X text 200 1833 converts list to series of property messages;
#X obj 30 1860 conv.midi2freq;
#X text 200 1860 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1900 conv.ms2samp;
#X text 200 1900 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 1940 conv.phase2rad;
#X text 200 1940 convert phase value [0-1] to radians [0-2π];
#X obj 30 1967 conv.phase2rad~;
#X text 200 1967 convert phase value [0-1] to radians [0-2π];
#X obj 30 1994 conv.pitch2midi;
#X text 200 1994 converts symbol pitch name to MIDI note number;
#X obj 30 2021 conv.pol2car;
#X text 200 2021 convert from polar coordinates to cartesian;
#X obj 30 2048 conv.rad2phase;
#X text 200 2048 convert radians value to phase;
#X obj 30 2075 conv.rad2phase~;
#X text 200 2075 convert radians value to phase;
#X obj 30 2102 conv.samp2ms;
#X text 200 2102 convert samples to time according to samplerate;
#X obj 30 2129 conv.samp2ms~;
#X text 200 2129 convert samples to milliseconds according to samplerate;
#X obj 30 2156 conv.samp2sec;
#X text 200 2156 convert samples to time according to samplerate;
#X obj 30 2183 conv.sec2samp;
#X text 200 2183 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2223 conv.sec2str;
#X text 200 2223 converts float time in seconds to formated symbol
(or string);
#X obj 30 2250 conv.str2sec;
#X text 200 2250 converts formatted time to float value in seconds;
#X obj 20 2277 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2318 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2329 data.dict;
#X text 200 2329 dictionary container: store values by key;
#X obj 30 2356 data.fifo;
#X text 200 2356 First-In-First-Out (FIFO) queue data container;
#X obj 30 2383 data.float;
#X text 200 2383 robust float object;
#X obj 30 2410 data.int;
#X text 200 2410 robust int object;
#X obj 30 2437 data.list;
#X text 200 2437 list container;
#X obj 30 2464 data.mlist;
#X text 200 2464 multidimensional list container;
#X obj 30 2491 data.set;
#X text 200 2491 container that store unique elements;
#X obj 30 2518 data.set2list;
#X text 200 2518 converts set to list;
#X obj 30 2545 dict.contains;
#X text 200 2545 predicate to check if dict contains a keys;
#X obj 30 2572 dict.each;
#X text 200 2572 map each value in dict;
#X obj 30 2599 dict.from_list;
#X text 200 2599 creates dictionary from list;
#X obj 30 2626 dict.get;
#X text 200 2626 output dict values;
#X obj 30 2653 dict.keys;
#X text 200 2653 get list of dict keys;
#X obj 30 2680 dict.pass;
#X text 200 2680 passes specified keys in dict;
#X obj 30 2707 dict.reject;
#X text 200 2707 rejects specified keys from dict;
#X obj 30 2734 dict.size;
#X text 200 2734 dictionary size;
#X obj 30 2761 dict.to_list;
#X text 200 2761 converts dictionary to plain list;
#X obj 30 2788 dict.values;
#X text 200 2788 dictionary values as mlist;
#X obj 30 2815 mlist.flatten;
#X text 200 2815 flatten nested mlist;
#X obj 30 2842 set.contains;
#X text 200 2842 check if specified element is in set;
#X obj 30 2869 set.diff;
#X text 200 2869 difference between two sets;
#X obj 30 2896 set.equal;
#X text 200 2896 checks if two sets are equal (contains same elements);
#X obj 30 2923 set.intersect;
#X text 200 2923 output intersection of given sets;
#X obj 30 2950 set.size;
#X text 200 2950 get number of elements in set;
#X obj 30 2977 set.symdiff;
#X text 200 2977 symmetric difference between two sets;
#X obj 30 3004 set.union;
#X text 200 3004 output union of given sets;
#X obj 20 3031 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3072 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3083 dyn.comp2~;
#X text 200 3083 stereo dynamic range compressor;
#X obj 30 3110 dyn.comp~;
#X text 200 3110 mono dynamic range compressors;
#X obj 30 3137 dyn.gate2~;
#X text 200 3137 stereo signal gate;
#X obj 30 3164 dyn.gate~;
#X text 200 3164 mono signal gate;
#X obj 30 3191 dyn.limit2~;
#X text 200 3191 stereo 1176LN Peak Limiter;
#X obj 30 3218 dyn.limit~;
#X text 200 3218 mono 1176LN Peak Limiter;
#X obj 30 3245 dyn.softclip~;
#X text 200 3245 soft signal clip;
#X obj 20 3272 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3313 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3324 env.adsr~;
#X text 200 3324 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3351 env.ar~;
#X text 200 3351 Attack/Release envelope generator;
#X obj 30 3378 env.asr~;
#X text 200 3378 Attack/Sustain/Release envelope generator;
#X obj 30 3405 env.concat;
#X text 200 3405 Envelope concatenation;
#X obj 30 3432 env.follow~;
#X text 200 3432 Envelope follower with independent attack and release
times;
#X obj 30 3459 env.mix;
#X text 200 3459 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3499 env.smooth~;
#X text 200 3499 An envelope with an exponential attack and release;
#X obj 30 3526 env.tscale;
#X text 200 3526 Envelope time-scale;
#X obj 30 3553 env.tshift;
#X text 200 3553 Envelope time-shift (horizontal);
#X obj 30 3580 env.vscale;
#X text 200 3580 Envelope value-scale;
#X obj 30 3607 env2array;
#X text 200 3607 Renders envelope to specified array;
#X obj 30 3634 env2vline;
#X text 200 3634 Converts envelope to bunch of vline messages;
#X obj 30 3661 envelope;
#X text 200 3661 Envelope data type;
#X obj 30 3688 vline2env;
#X text 200 3688 Converts vline messages to env;
#X obj 20 3715 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3756 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3767 expand_env;
#X text 200 3767 Substitute enviroment variables in data stream;
#X obj 30 3794 flow.append;
#X text 200 3794 inject message into flow;
#X obj 30 3821 flow.change;
#X text 200 3821 rejects redundant input values;
#X obj 30 3848 flow.count;
#X text 200 3848 control flow event counter;
#X obj 30 3875 flow.demultiplex;
#X text 200 3875 control flow demultiplexer;
#X obj 30 3902 flow.demultiplex2~;
#X text 200 3902 audio stream stereo demultiplexer;
#X obj 30 3929 flow.demultiplex~;
#X text 200 3929 audio stream demultiplexer;
#X obj 30 3956 flow.gate;
#X text 200 3956 control flow gate. [spigot] analog;
#X obj 30 3983 flow.greater;
#X text 200 3983 numeric stream router;
#X obj 30 4010 flow.group;
#X text 200 4010 group data atoms in list of specified size;
#X obj 30 4037 flow.interval;
#X text 200 4037 measure time between flow events;
#X obj 30 4064 flow.less;
#X text 200 4064 numeric stream router \, like many [moses];
#X obj 30 4091 flow.less_eq;
#X text 200 4091 numeric stream router \, like many [moses];
#X obj 30 4118 flow.match;
#X text 200 4118 route data flow by regexp match;
#X obj 30 4145 flow.multiplex;
#X text 200 4145 control flow multiplexer;
#X obj 30 4172 flow.multiplex2~;
#X text 200 4172 audio stream stereo multiplexer;
#X obj 30 4199 flow.multiplex~;
#X text 200 4199 audio stream multiplexer;
#X obj 30 4226 flow.once;
#X text 200 4226 one message pass thru;
#X obj 30 4253 flow.pack;
#X text 200 4253 flow pack;
#X obj 30 4280 flow.pass;
#X text 200 4280 pass specified values;
#X obj 30 4307 flow.pass_if;
#X text 200 4307 pass values that accepted by predicate object;
#X obj 30 4334 flow.reject;
#X text 200 4334 reject specified values;
#X obj 30 4361 flow.reject_if;
#X text 200 4361 reject values by predicate;
#X obj 30 4388 flow.route;
#X text 200 4388 advanced message router;
#X obj 30 4415 flow.speedlim;
#X text 200 4415 control stream speed limiter;
#X obj 30 4442 flow.split;
#X text 200 4442 split data flow by external side-chain predicate;
#X obj 30 4469 flow.sync;
#X text 200 4469 bus with only hot inlets;
#X obj 30 4496 flow.sync_pack;
#X text 200 4496 flow pack with all hot inlets;
#X obj 30 4523 flow.tee~;
#X text 200 4523 separate audio and control streams;
#X obj 30 4550 replace;
#X text 200 4550 Replace atoms in data stream;
#X obj 20 4577 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4618 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4629 flt.biquad~;
#X text 200 4629 second order IIR filter.;
#X obj 30 4656 flt.bpf12~;
#X text 200 4656 Band-pass filter with 12/db per octave slope;
#X obj 30 4683 flt.bpf24~;
#X text 200 4683 Band-pass filter with 24/db per octave slope;
#X obj 30 4710 flt.c_bpf~;
#X text 200 4710 BPF coefficient calculator for biquad filter;
#X obj 30 4737 flt.c_highshelf~;
#X text 200 4737 Highshelf filter coefficient calculator for biquad;
#X obj 30 4764 flt.c_hpf~;
#X text 200 4764 HPF coefficient calculator for biquad filter;
#X obj 30 4791 flt.c_lowshelf~;
#X text 200 4791 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4818 flt.c_lpf~;
#X text 200 4818 LPF coefficient calculator for biquad filter;
#X obj 30 4845 flt.c_notch~;
#X text 200 4845 Band-reject coefficient calculator for biquad filter;
#X obj 30 4872 flt.c_peak~;
#X text 200 4872 Peaking equalizer calculator for biquad;
#X obj 30 4899 flt.dcblock2~;
#X text 200 4899 stereo DC blocker;
#X obj 30 4926 flt.dcblock~;
#X text 200 4926 mono DC blocker;
#X obj 30 4953 flt.eq10~;
#X text 200 4953 graphic 10 band equalizer;
#X obj 30 4980 flt.eq_peak_cq~;
#X text 200 4980 constant-Q second order peaking equalizer section;
#X obj 30 5007 flt.eq_peak~;
#X text 200 5007 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5062 flt.freqz~;
#X text 200 5062 compute the frequency response of a digital filter;
#X obj 30 5089 flt.highshelf~;
#X text 200 5089 gain boost|cut above some frequency;
#X obj 30 5116 flt.hpf12~;
#X text 200 5116 High-pass filter with 12/db per octave slope;
#X obj 30 5143 flt.hpf24~;
#X text 200 5143 High-pass filter with 24/db per octave slope;
#X obj 30 5170 flt.lowshelf~;
#X text 200 5170 gain boost|cut below some frequency;
#X obj 30 5197 flt.lpf12~;
#X text 200 5197 Low-pass filter with 12/db per octave slope;
#X obj 30 5224 flt.lpf24~;
#X text 200 5224 Low-pass filter with 24/db per octave slope;
#X obj 30 5251 flt.median;
#X text 200 5251 Median control flow filter;
#X obj 30 5278 flt.moog_vcf~;
#X text 200 5278 Moog Voltage Controlled Filter;
#X obj 30 5305 flt.notch~;
#X text 200 5305 band-rejection filter;
#X obj 30 5332 flt.resonbp~;
#X text 200 5332 Simple resonant bandpass filter;
#X obj 20 5359 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5400 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5411 fx.bitdown~;
#X text 200 5411 bit downer and downsampler effect;
#X obj 30 5438 fx.chorus~;
#X text 200 5438 Chorus effect;
#X obj 30 5465 fx.distortion1~;
#X text 200 5465 distortion #1 from Guitarix effects set;
#X obj 30 5492 fx.distortion2~;
#X text 200 5492 distortion #2 from Guitarix effects set;
#X obj 30 5519 fx.distortion3~;
#X text 200 5519 simple distortion #3 from Guitarix effects set;
#X obj 30 5546 fx.distortion~;
#X text 200 5546 cubic nonlinearity distortion;
#X obj 30 5573 fx.drive~;
#X text 200 5573 Guitarix drive effect;
#X obj 30 5600 fx.drone_box~;
#X text 200 5600 mono sympathetic resonance generator;
#X obj 30 5627 fx.echo~;
#X text 200 5627 simple echo effect;
#X obj 30 5654 fx.flanger~;
#X text 200 5654 mono flanging effect;
#X obj 30 5681 fx.freeverb2~;
#X text 200 5681 freeverb2 - stereo version of freeverb;
#X obj 30 5708 fx.freeverb~;
#X text 200 5708 freeverb - common used open-source reverb;
#X obj 30 5735 fx.freqshift~;
#X text 200 5735 frequency shifter or single-sideband ring modulation;
#X obj 30 5762 fx.granulator~;
#X text 200 5762 simple input stream granulator;
#X obj 30 5789 fx.greyhole~;
#X text 200 5789 A complex echo-like effect;
#X obj 30 5816 fx.looper~;
#X text 200 5816 One track looper;
#X obj 30 5843 fx.pitchshift~;
#X text 200 5843 simple pitch shifter based on 2 delay lines;
#X obj 30 5870 fx.sdelay~;
#X text 200 5870 smooth delay with a feedback control;
#X obj 30 5897 fx.vocoder~;
#X text 200 5897 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5937 fx.wahwah~;
#X text 200 5937 digitized CryBaby wah pedal;
#X obj 30 5964 fx.zita_rev1~;
#X text 200 5964 Zita stereo reverb;
#X obj 20 5991 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6032 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6043 global.dict;
#X text 200 6043 global named dict object;
#X obj 30 6070 global.float;
#X text 200 6070 global named float object;
#X obj 30 6097 global.int;
#X text 200 6097 global named integer object;
#X obj 30 6124 global.list;
#X text 200 6124 global named list object;
#X obj 30 6151 global.mlist;
#X text 200 6151 global named mlist object;
#X obj 30 6178 global.set;
#X text 200 6178 global named set object;
#X obj 20 6205 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6246 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6257 hw.apple_smc;
#X text 200 6257 query the system management control in Apples;
#X obj 30 6284 hw.apple_sms;
#X text 200 6284 query the sudden motion sensor in Apples;
#X obj 30 6311 hw.arduino;
#X text 200 6311 Arduino device;
#X obj 30 6338 hw.cpu_temp;
#X text 200 6338 get CPU temperature;
#X obj 30 6365 hw.display;
#X text 200 6365 get/set display properties;
#X obj 30 6392 hw.kbd_light;
#X text 200 6392 Get/set keyboard light on some devices;
#X obj 20 6419 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6460 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6471 lfo.+pulse~;
#X text 200 6471 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6498 lfo.+saw~;
#X text 200 6498 Positive unit-amplitude low frequency saw wave;
#X obj 30 6525 lfo.+square~;
#X text 200 6525 Positive low frequency square wave;
#X obj 30 6552 lfo.+tri~;
#X text 200 6552 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6579 lfo.impulse~;
#X text 200 6579 Unit-amplitude low-frequency impulse train;
#X obj 30 6606 lfo.pulse~;
#X text 200 6606 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6633 lfo.saw~;
#X text 200 6633 Full-range unit-amplitude low frequency saw;
#X obj 30 6660 lfo.square~;
#X text 200 6660 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6687 lfo.tri~;
#X text 200 6687 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6714 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6755 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6766 list.^at;
#X text 200 6766 on input index(es) outputs list element(s);
#X obj 30 6793 list.^contains;
#X text 200 6793 on input atom or list checks if specified list contains
it;
#X obj 30 6820 list.^search;
#X text 200 6820 on input atom returns it index in list;
#X obj 30 6847 list.all_of;
#X text 200 6847 checks if all list atoms accepted by predicate;
#X obj 30 6874 list.any_of;
#X text 200 6874 checks if at least one list element is accepted by
predicate;
#X obj 30 6901 list.append;
#X text 200 6901 append atom or list to the end of input list;
#X obj 30 6928 list.apply_to;
#X text 200 6928 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6968 list.at;
#X text 200 6968 on input list outputs element(s) at specified index(es);
#X obj 30 6995 list.choice;
#X text 200 6995 returns random element from list;
#X obj 30 7022 list.contains;
#X text 200 7022 checks if input list contains specified atoms;
#X obj 30 7049 list.count;
#X text 200 7049 returns the number of items that equal to specified
value;
#X obj 30 7076 list.count_if;
#X text 200 7076 returns the number of items that satisfy to external
predicate.;
#X obj 30 7116 list.delta;
#X text 200 7116 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7156 list.distribution;
#X text 200 7156 list value distribution;
#X obj 30 7183 list.do;
#X text 200 7183 iterate and modify list contents via side-chain;
#X obj 30 7210 list.each;
#X text 200 7210 maps each list value via external object(s);
#X obj 30 7237 list.enumerate;
#X text 200 7237 enumerates input list;
#X obj 30 7264 list.equal;
#X text 200 7264 checks if given lists are equal;
#X obj 30 7291 list.first;
#X text 200 7291 returns first list element;
#X obj 30 7318 list.gen;
#X text 200 7318 generates list of specified length via external generator;
#X obj 30 7345 list.histogram;
#X text 200 7345 outputs distribution histogram;
#X obj 30 7372 list.insert;
#X text 200 7372 insert atom or list to the specified position of input
list;
#X obj 30 7399 list.integrator;
#X text 200 7399 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7439 list.last;
#X text 200 7439 returns last list element;
#X obj 30 7466 list.length;
#X text 200 7466 returns the number of atoms in the list;
#X obj 30 7493 list.max;
#X text 200 7493 returns largest element in the list;
#X obj 30 7520 list.mean;
#X text 200 7520 calculates average of list of floats;
#X obj 30 7547 list.min;
#X text 200 7547 returns smallest element in the list;
#X obj 30 7574 list.none_of;
#X text 200 7574 checks if none of list atoms is accepted by predicate;
#X obj 30 7601 list.normalize;
#X text 200 7601 normalizes float list values to get their sum = 1.0;
#X obj 30 7628 list.pass_if;
#X text 200 7628 leave only elements accepted by predicate;
#X obj 30 7655 list.prepend;
#X text 200 7655 prepend atom or list before input list;
#X obj 30 7682 list.product;
#X text 200 7682 calculates product of floats in list;
#X obj 30 7709 list.range;
#X text 200 7709 returns list smallest and largest value;
#X obj 30 7736 list.reduce;
#X text 200 7736 apply function of two arguments cumulatively to the
list;
#X obj 30 7763 list.remove;
#X text 200 7763 on input list remove element(s) at specified positions;
#X obj 30 7790 list.remove_if;
#X text 200 7790 remove elements by predicate;
#X obj 30 7817 list.repack;
#X text 200 7817 repack input list to specified size;
#X obj 30 7844 list.repeat;
#X text 200 7844 creates new list by repeating given list specified
times;
#X obj 30 7871 list.resample;
#X text 200 7871 resample list with specified ratio;
#X obj 30 7898 list.resize;
#X text 200 7898 changes list size;
#X obj 30 7925 list.reverse;
#X text 200 7925 reverses the order of the elements in the list;
#X obj 30 7952 list.rldecode;
#X text 200 7952 Run-length list decoder (RLE);
#X obj 30 7979 list.rlencode;
#X text 200 7979 RLE (run-length encoding) for lists;
#X obj 30 8006 list.rotate;
#X text 200 8006 rotates list;
#X obj 30 8033 list.route;
#X text 200 8033 acts like [route] but for lists;
#X obj 30 8060 list.search;
#X text 200 8060 search specified items in input list;
#X obj 30 8087 list.separate;
#X text 200 8087 sends list elements one by one separately;
#X obj 30 8114 list.seq;
#X text 200 8114 numeric sequence list generator;
#X obj 30 8141 list.set;
#X text 200 8141 on input list set value at specified position;
#X obj 30 8168 list.shift;
#X text 200 8168 shifts the contents of the list with linear interpolation;
#X obj 30 8195 list.shuffle;
#X text 200 8195 randomly rearranges elements in list;
#X obj 30 8222 list.slice;
#X text 200 8222 extract sublist;
#X obj 30 8249 list.sort;
#X text 200 8249 sorts list values by ascending order;
#X obj 30 8276 list.sort_with;
#X text 200 8276 sort list with user defined side-chain;
#X obj 30 8303 list.split;
#X text 200 8303 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8343 list.stretch;
#X text 200 8343 stretches list - changes its size with linear interpolation;
#X obj 30 8370 list.sum;
#X text 200 8370 calculates sum of floats in list;
#X obj 30 8397 list.unique;
#X text 200 8397 removes duplicates from input list;
#X obj 30 8424 list.unpack;
#X text 200 8424 unpack list elements to separate outlets;
#X obj 30 8451 list.unzip;
#X text 200 8451 splits list to N lists \, each to separate output;
#X obj 30 8478 list.walk;
#X text 200 8478 Walks thru the list;
#X obj 30 8505 list.zip;
#X text 200 8505 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8560 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8601 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8612 live.capture~;
#X text 200 8612 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8652 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8693 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8704 local.dict;
#X text 200 8704 local named dict object;
#X obj 30 8731 local.float;
#X text 200 8731 canvas-scoped named float variable;
#X obj 30 8758 local.int;
#X text 200 8758 canvas-scoped named integer variable;
#X obj 30 8785 local.list;
#X text 200 8785 local named list object;
#X obj 30 8812 local.mlist;
#X text 200 8812 local named mlist object;
#X obj 30 8839 local.set;
#X text 200 8839 local named set object;
#X obj 20 8866 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8907 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8918 math.abs;
#X text 200 8918 absolute value function;
#X obj 30 8945 math.abs~;
#X text 200 8945 absolute value function for signals;
#X obj 30 8972 math.acos;
#X text 200 8972 arc cosine function;
#X obj 30 8999 math.acosh;
#X text 200 8999 inverse hyperbolic cosine function;
#X obj 30 9026 math.acos~;
#X text 200 9026 arc cosine function for signals;
#X obj 30 9053 math.and;
#X text 200 9053 operation AND for multiple arguments;
#X obj 30 9080 math.approx;
#X text 200 9080 check if input value approximately equal to pattern;
#X obj 30 9107 math.asin;
#X text 200 9107 arc sine function;
#X obj 30 9134 math.asinh;
#X text 200 9134 inverse hyperbolic sine function;
#X obj 30 9161 math.atan;
#X text 200 9161 arc tangent function;
#X obj 30 9188 math.atanh;
#X text 200 9188 inverse hyperbolic tangent function;
#X obj 30 9215 math.cabs~;
#X text 200 9215 magnitude of a complex signals;
#X obj 30 9242 math.carg~;
#X text 200 9242 phase angle of a complex signals;
#X obj 30 9269 math.cbrt;
#X text 200 9269 cube root function;
#X obj 30 9296 math.cdiv~;
#X text 200 9296 division of complex signals;
#X obj 30 9323 math.ceil;
#X text 200 9323 round to smallest integral value not less than input
value;
#X obj 30 9350 math.ceil~;
#X text 200 9350 round to smallest integral value not less than input
value;
#X obj 30 9377 math.cexp~;
#X text 200 9377 exponent of a complex signals;
#X obj 30 9404 math.cmul~;
#X text 200 9404 multiplication of complex signals;
#X obj 30 9431 math.cos;
#X text 200 9431 cosine function;
#X obj 30 9458 math.cosh;
#X text 200 9458 hyperbolic cosine function;
#X obj 30 9485 math.cos~;
#X text 200 9485 cosine function;
#X obj 30 9512 math.div;
#X text 200 9512 division (on lists too);
#X obj 30 9539 math.e;
#X text 200 9539 mathematical constant \, base of the natural logarithm;
#X obj 30 9566 math.erf~;
#X text 200 9566 error function for signals;
#X obj 30 9593 math.exp;
#X text 200 9593 exponential functions;
#X obj 30 9620 math.exp2;
#X text 200 9620 exponential functions;
#X obj 30 9647 math.exp2~;
#X text 200 9647 base-2 exponential for signal;
#X obj 30 9674 math.expr;
#X text 200 9674 dynamic [expr];
#X obj 30 9701 math.floor;
#X text 200 9701 round to largest integral value not greater than x;
#X obj 30 9728 math.floor~;
#X text 200 9728 round to largest integral value not greater than x;
#X obj 30 9755 math.gamma;
#X text 200 9755 gamma function;
#X obj 30 9782 math.gamma~;
#X text 200 9782 gamma function for floating point signals;
#X obj 30 9809 math.gcd;
#X text 200 9809 calculate greatest common divisor;
#X obj 30 9836 math.inf;
#X text 200 9836 infinity value that cannot be represented accurately;
#X obj 30 9863 math.lcm;
#X text 200 9863 calculate least common multiple;
#X obj 30 9890 math.lgamma;
#X text 200 9890 natural logarithm of the absolute value of the gamma
function;
#X obj 30 9917 math.lgamma~;
#X text 200 9917 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 9957 math.log;
#X text 200 9957 logarithm functions;
#X obj 30 9984 math.log10;
#X text 200 9984 logarithm functions;
#X obj 30 10011 math.log2;
#X text 200 10011 logarithm functions;
#X obj 30 10038 math.mul;
#X text 200 10038 multiplication (on lists too);
#X obj 30 10065 math.nan;
#X text 200 10065 Not a Number \, unrepresentable value;
#X obj 30 10092 math.neg;
#X text 200 10092 negate function;
#X obj 30 10119 math.or;
#X text 200 10119 operation OR for multiple arguments;
#X obj 30 10146 math.pi;
#X text 200 10146 mathematical constant;
#X obj 30 10173 math.pi~;
#X text 200 10173 mathematical constant;
#X obj 30 10200 math.polyeval;
#X text 200 10200 evaluates the polynomial described by the coefficients
list;
#X obj 30 10227 math.reciprocal;
#X text 200 10227 calculate reciprocal number;
#X obj 30 10254 math.reciprocal~;
#X text 200 10254 calculate reciprocal number for signals;
#X obj 30 10281 math.round;
#X text 200 10281 round to integral value \, regardless of rounding
direction;
#X obj 30 10308 math.round~;
#X text 200 10308 signal round;
#X obj 30 10335 math.sign;
#X text 200 10335 sign function;
#X obj 30 10362 math.sin;
#X text 200 10362 sine function;
#X obj 30 10389 math.sinh;
#X text 200 10389 hyperbolic sine function;
#X obj 30 10416 math.sin~;
#X text 200 10416 sine function;
#X obj 30 10443 math.sqrt;
#X text 200 10443 square root function;
#X obj 30 10470 math.squared;
#X text 200 10470 value square;
#X obj 30 10497 math.squared~;
#X text 200 10497 signal value square;
#X obj 30 10524 math.sync_add;
#X text 200 10524 sync addition;
#X obj 30 10551 math.sync_and;
#X text 200 10551 sync logical AND operation;
#X obj 30 10578 math.sync_div;
#X text 200 10578 sync division;
#X obj 30 10605 math.sync_eq;
#X text 200 10605 sync equal numbers check;
#X obj 30 10632 math.sync_ge;
#X text 200 10632 sync greater equal numbers compare;
#X obj 30 10659 math.sync_gt;
#X text 200 10659 sync greater then numbers compare;
#X obj 30 10686 math.sync_le;
#X text 200 10686 sync less equal numbers compare;
#X obj 30 10713 math.sync_lt;
#X text 200 10713 sync less then numbers compare;
#X obj 30 10740 math.sync_mod;
#X text 200 10740 sync remainder of modulo division (float or integer);
#X obj 30 10767 math.sync_mul;
#X text 200 10767 sync multiplication;
#X obj 30 10794 math.sync_ne;
#X text 200 10794 sync numbers for not equality;
#X obj 30 10821 math.sync_or;
#X text 200 10821 sync logical OR operation;
#X obj 30 10848 math.sync_sub;
#X text 200 10848 sync subtraction;
#X obj 30 10875 math.sync_xor;
#X text 200 10875 sync logical XOR operation;
#X obj 30 10902 math.tan;
#X text 200 10902 tangent function;
#X obj 30 10929 math.tanh;
#X text 200 10929 hyperbolic tangent function;
#X obj 30 10956 math.trunc;
#X text 200 10956 truncate to integer value;
#X obj 20 10983 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 11024 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11035 midi.ctl2str;
#X text 200 11035 convert Standard MIDI Controllers number to name;
#X obj 30 11062 midi.event2ctl;
#X text 200 11062 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11089 midi.event2note;
#X text 200 11089 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11116 midi.event2prg;
#X text 200 11116 convert MidiEvent message to midi program change
value;
#X obj 30 11143 midi.file;
#X text 200 11143 standard midi file SMF reader and writer;
#X obj 30 11170 midi.key2str;
#X text 200 11170 convert key number to SPN name according to tonality;
#X obj 30 11197 midi.prg2str;
#X text 200 11197 convert GM Instrument number to name (string or symbol);
#X obj 30 11224 midi.track;
#X text 200 11224 extract track from MidiFile;
#X obj 20 11251 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 11292 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11303 click~;
#X text 200 11303 Output single impulse on bang;
#X obj 30 11330 fluid~;
#X text 200 11330 FluidSynth SoundFont 2 player;
#X obj 30 11357 modplug~;
#X text 200 11357 MOD file player (using libmodplug);
#X obj 30 11384 speech.flite;
#X text 200 11384 render speech to array;
#X obj 20 11411 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 11452 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11463 msg;
#X text 200 11463 message constructor;
#X obj 30 11490 msg.after;
#X text 200 11490 send specified message after incoming message;
#X obj 30 11517 msg.onload;
#X text 200 11517 send message when patch loads;
#X obj 20 11544 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 11585 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11596 net.host2ip;
#X text 200 11596 returns IP address by DNS name;
#X obj 20 11623 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 11664 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11675 noise.crackle~;
#X text 200 11675 sparse noise generator;
#X obj 30 11702 noise.lfreq0~;
#X text 200 11702 sampled/held noise (piecewise constant);
#X obj 30 11729 noise.lfreq~;
#X text 200 11729 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 11756 noise.pink~;
#X text 200 11756 Pink noise generator;
#X obj 30 11783 noise.white~;
#X text 200 11783 White noise generator;
#X obj 20 11810 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 11851 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11862 osc.blit~;
#X text 200 11862 Bandlimited impulse train oscillator;
#X obj 30 11889 osc.impulse~;
#X text 200 11889 Bandlimited impulse train generator;
#X obj 30 11916 osc.pulse~;
#X text 200 11916 Bandlimited pulse train oscillator;
#X obj 30 11943 osc.saw4~;
#X text 200 11943 Bandlimited sawtooth wave;
#X obj 30 11970 osc.saw~;
#X text 200 11970 Alias-free sawtooth wave;
#X obj 30 11997 osc.sinfb~;
#X text 200 11997 Sine oscilator with feedback;
#X obj 30 12024 osc.sin~;
#X text 200 12024 Sine wave oscillator;
#X obj 30 12051 osc.square~;
#X text 200 12051 Bandlimited square wave oscillator;
#X obj 30 12078 osc.tri~;
#X text 200 12078 Bandlimited triangle wave oscillator;
#X obj 20 12105 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12157 canvas.current;
#X text 200 12157 verbose information about current canvas;
#X obj 30 12184 canvas.dir;
#X text 200 12184 current canvas directory;
#X obj 30 12211 canvas.name;
#X text 200 12211 current canvas name;
#X obj 30 12238 canvas.path;
#X text 200 12238 current canvas fullpath;
#X obj 30 12265 canvas.top;
#X text 200 12265 verbose information about top-level canvas;
#X obj 30 12292 patch.args;
#X text 200 12292 Get patch or subpatch arguments;
#X obj 20 12319 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 12360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12371 path.basename;
#X text 200 12371 outputs filename portion of pathname;
#X obj 30 12398 path.dirname;
#X text 200 12398 outputs directory portion of pathname;
#X obj 30 12425 path.exists;
#X text 200 12425 checks if given path exists;
#X obj 30 12452 path.is_dir;
#X text 200 12452 check if path is directory;
#X obj 30 12479 path.lsdir;
#X text 200 12479 list directory contents;
#X obj 20 12506 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 12547 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12558 is_any;
#X text 200 12558 checks if input data has *any* type;
#X obj 30 12585 is_bang;
#X text 200 12585 checks if input data has *bang* type;
#X obj 30 12612 is_data;
#X text 200 12612 checks if input data has *data* type;
#X obj 30 12639 is_dict;
#X text 200 12639 checks if input data has *dict* type;
#X obj 30 12666 is_even;
#X text 200 12666 checks if input number is even;
#X obj 30 12693 is_file;
#X text 200 12693 checks if file exists and accessible;
#X obj 30 12720 is_float;
#X text 200 12720 checks if input data has *float* type;
#X obj 30 12747 is_list;
#X text 200 12747 checks if input data has *list* type;
#X obj 30 12774 is_odd;
#X text 200 12774 checks if input number is odd;
#X obj 30 12801 is_pointer;
#X text 200 12801 checks if input data has *pointer* type;
#X obj 30 12828 is_symbol;
#X text 200 12828 checks if input data has *symbol* type;
#X obj 20 12855 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 12896 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12907 preset.float;
#X text 200 12907 load/store float preset;
#X obj 30 12934 preset.list;
#X text 200 12934 load/store symbol preset;
#X obj 30 12961 preset.storage;
#X text 200 12961 preset storage control;
#X obj 30 12988 preset.symbol;
#X text 200 12988 load/store symbol preset;
#X obj 20 13015 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 13056 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13067 patch.props;
#X text 200 13067 patch properties manager;
#X obj 30 13094 prop;
#X text 200 13094 get/set named property value for subpatch or abstraction;
#X obj 30 13121 prop.declare;
#X text 200 13121 declare named property for subpatch or abstraction;
#X obj 30 13148 prop.get;
#X text 200 13148 Property extractor;
#X obj 30 13175 prop.get~;
#X text 200 13175 Property extractor from sound stream;
#X obj 30 13202 prop.set;
#X text 200 13202 Property injector;
#X obj 20 13229 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 13270 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13281 proto.firmata;
#X text 200 13281 Firmata Arduino protocol support;
#X obj 30 13308 proto.sp.alpaca;
#X text 200 13308 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 13335 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 13376 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13387 random.discrete;
#X text 200 13387 random weighted integers on interval [0 \, n);
#X obj 30 13414 random.float;
#X text 200 13414 random float generator in specified range;
#X obj 30 13441 random.gauss;
#X text 200 13441 gaussian random distribution;
#X obj 30 13468 random.int;
#X text 200 13468 Random integer generator in specified range;
#X obj 30 13495 random.linear;
#X text 200 13495 random linear distribution;
#X obj 30 13522 random.pw_const;
#X text 200 13522 piecewise constant random distribution;
#X obj 30 13549 random.pw_lin;
#X text 200 13549 piecewise linear random distribution;
#X obj 20 13576 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 13617 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13628 snd.file;
#X text 200 13628 Sound file loader on steroids;
#X obj 20 13655 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 13696 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13707 hoa.2d.decoder~;
#X text 200 13707 hoa 2d decoder;
#X obj 30 13734 hoa.2d.encoder~;
#X text 200 13734 hoa 2d encoder;
#X obj 30 13761 hoa.2d.map~;
#X text 200 13761 a 2d ambisonic multisource spatializer;
#X obj 30 13788 hoa.2d.optim~;
#X text 200 13788 a 2D ambisonic optimization tool;
#X obj 30 13815 hoa.2d.projector~;
#X text 200 13815 a plane waves decomposer from circular harmonics
domain;
#X obj 30 13842 hoa.2d.recomposer~;
#X text 200 13842 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 13882 hoa.2d.rotate~;
#X text 200 13882 a 2D ambisonic sound field rotation;
#X obj 30 13909 hoa.2d.wider~;
#X text 200 13909 a 2d fractional ambisonic order simulator;
#X obj 30 13936 hoa.@process;
#X text 200 13936 process properties manager for hoa.process~;
#X obj 30 13963 hoa.in;
#X text 200 13963 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13990 hoa.in~;
#X text 200 13990 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14017 hoa.out;
#X text 200 14017 message outlet for a patcher loaded by hoa.process~;
#X obj 30 14044 hoa.out~;
#X text 200 14044 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14071 hoa.process~;
#X text 200 14071 patcher loader for multichannel processing;
#X obj 30 14101 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 14098 a 2d ambisonic harmonic scope;
#X obj 30 14123 pan.cos~;
#X text 200 14123 two channel equal power sine/cosine panner;
#X obj 30 14150 pan.linsig~;
#X text 200 14150 two channel linear panner with signal control;
#X obj 30 14177 pan.lin~;
#X text 200 14177 two channel linear panner;
#X obj 30 14204 pan.spread~;
#X text 200 14204 spreads input channels across the stereo field;
#X obj 30 14231 pan.sqrt~;
#X text 200 14231 two channel equal power square root panner;
#X obj 30 14258 spat.pan4~;
#X text 200 14258 GMEM SPAT: 4-outputs spatializer;
#X obj 30 14285 spat.pan8~;
#X text 200 14285 GMEM SPAT: 8-outputs spatializer;
#X obj 20 14312 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 14353 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14364 string;
#X text 200 14364 string constructor;
#X obj 30 14391 string.contains;
#X text 200 14391 checks if given string contains specified substring;
#X obj 30 14418 string.ends_with;
#X text 200 14418 checks if given string ends with specified suffix;
#X obj 30 14445 string.equal;
#X text 200 14445 check strings for equality;
#X obj 30 14472 string.format;
#X text 200 14472 formats string like printf.;
#X obj 30 14499 string.join;
#X text 200 14499 joins (concatenates) strings with separator;
#X obj 30 14526 string.length;
#X text 200 14526 number of characters in string (unicode supported);
#X obj 30 14553 string.match;
#X text 200 14553 check if string match regular expression;
#X obj 30 14580 string.remove;
#X text 200 14580 remove substring from input string;
#X obj 30 14607 string.replace;
#X text 200 14607 replace from one substring to another in input string;
#X obj 30 14634 string.split;
#X text 200 14634 split string by separator;
#X obj 30 14661 string.starts_with;
#X text 200 14661 checks if given string starts with specified prefix;
#X obj 30 14688 string.substr;
#X text 200 14688 extract substring from input string;
#X obj 30 14715 string2symbol;
#X text 200 14715 converts string to symbol;
#X obj 20 14742 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 14783 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14794 symbol.equal;
#X text 200 14794 check symbols for equality;
#X obj 30 14821 symbol.length;
#X text 200 14821 number of characters in symbol (unicode supported);
#X obj 30 14848 symbol.num_compare;
#X text 200 14848 numeric symbol compare;
#X obj 20 14875 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14916 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14927 synth.bee3~;
#X text 200 14927 Hammond-oid organ FM synthesis instrument;
#X obj 30 14954 synth.birds~;
#X text 200 14954 bird singing generator;
#X obj 30 14981 synth.church_bell~;
#X text 200 14981 generic church bell modal model;
#X obj 30 15008 synth.dubdub~;
#X text 200 15008 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 15048 synth.eguitar~;
#X text 200 15048 simple electric guitar model with steel strings;
#X obj 30 15075 synth.fgrain~;
#X text 200 15075 file granulator from STK;
#X obj 30 15102 synth.ks~;
#X text 200 15102 Karplus-Strong string;
#X obj 30 15129 synth.marimba~;
#X text 200 15129 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 15169 synth.rhodey~;
#X text 200 15169 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 15196 synth.risset_arp~;
#X text 200 15196 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 15223 synth.risset_tone~;
#X text 200 15223 Jean Claude Risset's endless glissando;
#X obj 30 15250 synth.shakers~;
#X text 200 15250 various percussion sounds from STK library;
#X obj 30 15277 synth.wurley~;
#X text 200 15277 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 15304 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 15345 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15356 system.colorpanel;
#X text 200 15356 System color panel dialog popup;
#X obj 30 15383 system.cursor;
#X text 200 15383 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 15410 system.getenv;
#X text 200 15410 Get system environment variables;
#X obj 30 15437 system.hostname;
#X text 200 15437 outputs system hostname;
#X obj 30 15464 system.memsize;
#X text 200 15464 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 15504 system.memused;
#X text 200 15504 returns the process physical memory use - current
and peak;
#X obj 30 15531 system.screen_size;
#X text 200 15531 returns current screen size in pixels;
#X obj 30 15558 system.shell;
#X text 200 15558 run external command in separate process;
#X obj 20 15585 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 15626 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15637 tl.bang;
#X text 200 15637 Timeline bang (with possible delay);
#X obj 30 15667 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 15664 Timeline section;
#X obj 30 15689 tl.timeline;
#X text 200 15689 Timeline - event scheduler;
#X obj 30 15716 tl.toggle;
#X text 200 15716 Timeline bang;
#X obj 30 15743 tl.transport;
#X text 200 15743 Timeline transport control;
#X obj 20 15770 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 15811 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15825 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 15822 array view with cursor and selection;
#X obj 30 15850 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 15847 A bang... that's all;
#X obj 30 15875 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 15872 colorchooser widget;
#X obj 30 15900 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 15897 Display GUI object;
#X obj 30 15925 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15922 GUI for turning DSP on/off;
#X obj 30 15950 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15947 envelope editor widget;
#X obj 30 15975 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15972 UI stereo gain control;
#X obj 30 16000 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15997 UI gain control;
#X obj 30 16025 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 16022 simple icon with button capabilities;
#X obj 30 16050 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 16047 value increment/decrement;
#X obj 30 16075 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 16072 keyboard widget;
#X obj 30 16100 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 16097 knob widget;
#X obj 30 16125 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 16122 simple label widget;
#X obj 30 16150 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 16147 Hyperlink widget;
#X obj 30 16175 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 16172 The matrix of toggles has you.;
#X obj 30 16200 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 16197 Dropdown menu;
#X obj 30 16225 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 16222 Shows peak and rms signal level;
#X obj 30 16250 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 16247 filter mouse events from ui objects;
#X obj 30 16275 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 16272 routes mouse events from ui objects;
#X obj 30 16300 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 16297 counterpart of the vanilla [nbx];
#X obj 30 16325 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 16322 counterpart of the vanilla [nbx] for signal;
#X obj 30 16350 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 16347 signal plotter;
#X obj 30 16375 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 16372 2D slider in polar coordinates;
#X obj 30 16400 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 16397 Preset manager;
#X obj 30 16425 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 16422 counterpart of the vanilla radio toggle;
#X obj 30 16450 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 16447 range slider;
#X obj 30 16475 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 16472 Scope GUI object;
#X obj 30 16500 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 16497 counterpart of the vanilla slider;
#X obj 30 16525 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 16522 2D slider widget;
#X obj 30 16550 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 16547 Multiple slider widget;
#X obj 30 16575 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 16572 Spectroscope GUI object;
#X obj 30 16600 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 16597 displays a list of text buttons or text toggles;
#X obj 30 16625 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 16622 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 16647 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 16647 version: v0.8.0 \, license: GPL3;
#X obj 20 16668 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;