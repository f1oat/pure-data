<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="flow.match">
        <title>flow.match</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>route data flow by regexp match</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>flow</category>
            <keywords>regexp</keywords>
            <since>0.7.1</since>
            <also>
                <see>string.match</see>
            </also>
        </meta>
        <info>
            <par>Use backtick ` instead of backslash in regexp syntax</par>
            <par>if you want to match property - use double quotes in arg list: "@prop+"</par>
            <a href="https://github.com/google/re2">Regexp library: RE2</a>
        </info>
        <arguments>
            <argument name="PATTERNS" type="list" required="true">list of regular
            expressions</argument>
        </arguments>
        <properties>
            <property name="@patterns" type="list">list of regular expressions</property>
            <property name="@cut" type="int" default="0" enum="0 1">cut or pass message
            selector</property>
        </properties>
        <inlets dynamic="true">
            <inlet number="1">
                <xinfo on="any">input message</xinfo>
                <xinfo on="symbol">input symbol</xinfo>
                <xinfo on="data:string">input symbol</xinfo>
            </inlet>
            <inlet number="2">
                <xinfo on="symbol">set first regexp</xinfo>
            </inlet>
            <inlet number="...">
                <xinfo on="symbol">set ... regexp</xinfo>
            </inlet>
            <inlet number="n+1">
                <xinfo on="symbol">set n-th regexp</xinfo>
            </inlet>
        </inlets>
        <outlets dynamic="true">
            <outlet number="1">output match to first regexp</outlet>
            <outlet number="...">output match to ... regexp</outlet>
            <outlet number="n">output match to n-th regexp</outlet>
            <outlet number="n+1">unmatched output</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[amp2( [amp3( [freq0( [freq1( [unmatched(     [F]
|      |      |       |       |               |
|      |      |       |       |               [@prop $1(
|      |      |       |       |               |
[symbol                       ]               [flow.match "@p.+"]
|                                             |
[S digits=16] [freq3 X( [amp4 Y(              [ui.dt]
|             |         |
|             |         |
[flow.match freq`d amp`d]
|          ^|        ^^|
|           |          |
[ui.dt]     [ui.dt]    [ui.dt]

[flow.match.syntax]
]]>
            </pdascii>
            <pdascii id="syntax">
<![CDATA[
/***general***/

/*`  - escape symbol (instead of \\) */
/*(( - open curly braces (not allowed character in Pd)*/
/*)) - close curly braces (not allowed character in Pd)*/

/***kinds of single-character expressions***/

/*any character:           */       /*.*/
/*character class:         */       /*[xyz]*/
/*negated character class: */       /*[^xyz]*/
/*Perl character class:    */       /*`d*/
/*negated Perl character class: */  /*`D*/

/***composites***/

/*xy  */            /*x followed by y   */
/*x|y */            /*x or y (prefer x) */

/***repetitions***/

/*x*       */       /*zero or more x, prefer more         */
/*x+       */       /*one or more x, prefer more          */
/*x?       */       /*zero or one x, prefer one           */
/*x((n`.m))*/       /*n or n+1 or ... or m x, prefer more */
/*x((n`.)) */       /*n or more x, prefer more            */
/*x((n))   */       /*exactly n x                         */
/*x*?      */       /*zero or more x, prefer fewer        */
/*x+?      */       /*one or more x, prefer fewer         */
/*x??      */       /*zero or one x, prefer zero          */

/***empty strings***/

/*^        */       /*at beginning of text                                                   */
/*$        */       /*at end of text (like `z)                                               */
/*`A       */       /*at beginning of text                                                   */
/*`b       */       /*at ASCII word boundary (`w on one side and `W, `A, or `z on the other) */

/*`B       */       /*not at ASCII word boundary                                             */
/*`z       */       /*at end of text                                                         */

/***escape sequences***/

/*`*           */   /*literal *, for any punctuation character * */
/*`123         */   /*octal character code (up to three digits)  */
/*`x7F         */   /*hex character code (exactly two digits)    */
/*`x((10FFFF)) */   /*hex character code*/

/***perl character classes (all ASCII-only)***/

/*`d */             /*digits (≡ [0-9])                           */
/*`D */             /*not digits (≡ [^0-9])                      */
/*`s */             /*whitespace                                 */
/*`S */             /*not whitespace                             */
/*`w */             /*word characters (≡ [0-9A-Za-z_])           */
/*`W */             /*not word characters (≡ [^0-9A-Za-z_])      */
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
