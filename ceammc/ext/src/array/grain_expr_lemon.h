/* This file is automatically generated by Lemon from input grammar
** source file "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y". */
/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
/************ Begin %include sections from the grammar ************************/
#line 5 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"

union grain_expr_t {
    double val;
    t_symbol* sym;

    grain_expr_t() = default;
    grain_expr_t(double v) : val(v) {}
    grain_expr_t(t_symbol* s) : sym(s) {}
};
#line 39 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
#ifndef TK_PLUS
#define TK_PLUS                            1
#define TK_DIVIDE                          2
#define TK_TIMES                           3
#define TK_POW                             4
#define TK_MOD                             5
#define TK_MINUS                           6
#define TK_PROP_AMP                        7
#define TK_PROP_AT                         8
#define TK_PROP_LEN                        9
#define TK_PROP_SPEED                     10
#define TK_PROP_TIME_BEFORE               11
#define TK_PROP_TIME_AFTER                12
#define TK_PROP_PAN                       13
#define TK_PROP_REPEATS                   14
#define TK_ONDONE                         15
#define TK_HANN                           16
#define TK_RECT                           17
#define TK_TRI                            18
#define TK_TRPZ                           19
#define TK_OPENP                          20
#define TK_DOUBLE                         21
#define TK_CLOSEP                         22
#define TK_PROP_TAG                       23
#define TK_SYMBOL                         24
#define TK_PROP_INTERP                    25
#define TK_PROP_WINDOW                    26
#define TK_MODULATE                       27
#define TK_OVERFLOW                       28
#define TK_CLIP                           29
#define TK_FOLD                           30
#define TK_WRAP                           31
#define TK_NONE                           32
#define TK_LINEAR                         33
#define TK_CUBIC                          34
#define TK_MODE                           35
#define TK_FN_SQRT                        36
#define TK_SIN                            37
#define TK_SAW                            38
#define TK_SQR                            39
#define TK_DOTS                           40
#define TK_CONST_AMP                      41
#define TK_CONST_AT                       42
#define TK_CONST_LEN                      43
#define TK_CONST_PAN                      44
#define TK_CONST_SPEED                    45
#define TK_CONST_TIME_BEFORE              46
#define TK_CONST_TIME_AFTER               47
#define TK_CONST_SR                       48
#define TK_CONST_BS                       49
#define TK_CONST_ASIZE                    50
#define TK_CONST_NITER                    51
#define TK_CONST_NBLOCK                   52
#define TK_CONST_NSAMP                    53
#define TK_CONST_GIDX                     54
#define TK_ASSIGN_ADD                     55
#define TK_ASSIGN_SUB                     56
#define TK_ASSIGN_MUL                     57
#define TK_ASSIGN_SET                     58
#define TK_FN_ABS                         59
#define TK_FN_COS                         60
#define TK_FN_TAN                         61
#define TK_FN_ACOS                        62
#define TK_FN_ASIN                        63
#define TK_FN_ATAN                        64
#define TK_FN_CEIL                        65
#define TK_FN_FLOOR                       66
#define TK_FN_ROUND                       67
#define TK_FN_LOG                         68
#define TK_FN_LOG10                       69
#define TK_FN_LOG2                        70
#define TK_FN_FRAC                        71
#define TK_COMMA                          72
#define TK_FN_URAND                       73
#define TK_CHOICE                         74
#define TK_SAMP                           75
#define TK_MSEC                           76
#define TK_SEC                            77
#endif
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    parse_grain_exprTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is parse_grain_exprTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    parse_grain_exprARG_SDECL     A static variable declaration for the %extra_argument
**    parse_grain_exprARG_PDECL     A parameter declaration for the %extra_argument
**    parse_grain_exprARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    parse_grain_exprARG_STORE     Code to store %extra_argument into yypParser
**    parse_grain_exprARG_FETCH     Code to extract %extra_argument from yypParser
**    parse_grain_exprCTX_*         As parse_grain_exprARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 96
#define YYACTIONTYPE unsigned short int
#define parse_grain_exprTOKENTYPE grain_expr_t
typedef union {
  int yyinit;
  parse_grain_exprTOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 16
#endif
#define parse_grain_exprARG_SDECL ceammc::GrainExprParser *p;
#define parse_grain_exprARG_PDECL ,ceammc::GrainExprParser *p
#define parse_grain_exprARG_PARAM ,p
#define parse_grain_exprARG_FETCH ceammc::GrainExprParser *p=yypParser->p;
#define parse_grain_exprARG_STORE yypParser->p=p;
#define parse_grain_exprCTX_SDECL
#define parse_grain_exprCTX_PDECL
#define parse_grain_exprCTX_PARAM
#define parse_grain_exprCTX_FETCH
#define parse_grain_exprCTX_STORE
#define YYNSTATE             112
#define YYNRULE              104
#define YYNRULE_WITH_ACTION  90
#define YYNTOKEN             78
#define YY_MAX_SHIFT         111
#define YY_MIN_SHIFTREDUCE   203
#define YY_MAX_SHIFTREDUCE   306
#define YY_ERROR_ACTION      307
#define YY_ACCEPT_ACTION     308
#define YY_NO_ACTION         309
#define YY_MIN_REDUCE        310
#define YY_MAX_REDUCE        413
/************* End control #defines *******************************************/
#define YY_NLOOKAHEAD ((int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])))

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (585)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   308,    1,   46,   48,  412,    1,   40,   48,    1,    1,
 /*    10 */    36,   30,   32,   28,   26,   34,  402,  403,   51,   84,
 /*    20 */     6,   77,   51,   30,   32,   28,   26,   34,  211,   90,
 /*    30 */    91,   95,  234,  223,  224,  225,  109,  108,  384,   80,
 /*    40 */     2,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*    50 */   244,  245,  246,  247,  248,  220,  221,  222,  326,  110,
 /*    60 */   107,  106,  105,  104,  103,  102,  101,  100,   99,   98,
 /*    70 */    97,   96,   40,   94,   93,  203,  204,  205,  206,  207,
 /*    80 */   208,   39,  210,   79,  406,   41,    6,   77,  271,   41,
 /*    90 */    78,  111,   37,   44,   42,   90,   91,   95,  212,  213,
 /*   100 */   214,   83,  109,  108,  383,   43,  216,  235,  236,  237,
 /*   110 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*   120 */   248,  290,  291,  292,   81,  110,  107,  106,  105,  104,
 /*   130 */   103,  102,  101,  100,   99,   98,   97,   96,   40,   94,
 /*   140 */    93,   46,  226,  227,  408,   53,  228,  408,  408,   53,
 /*   150 */    82,    4,    6,   77,   36,   30,   32,   28,   26,   34,
 /*   160 */    34,   90,   91,   95,  249,  250,  251,  252,  109,  108,
 /*   170 */     9,   11,   92,  235,  236,  237,  238,  239,  240,  241,
 /*   180 */   242,  243,  244,  245,  246,  247,  248,  274,  275,  217,
 /*   190 */   289,  110,  107,  106,  105,  104,  103,  102,  101,  100,
 /*   200 */    99,   98,   97,   96,   54,   94,   93,   38,   54,    3,
 /*   210 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*   220 */   245,  246,  247,  248,  400,    7,   52,   15,  407,   16,
 /*   230 */    52,  203,  204,  205,  206,  207,  208,   39,  210,   36,
 /*   240 */    30,   32,   28,   26,   34,   17,  309,  111,   55,   44,
 /*   250 */    42,   56,   55,   57,   18,   56,  231,   57,   36,   30,
 /*   260 */    32,   28,   26,   34,   36,   30,   32,   28,   26,   34,
 /*   270 */    47,  278,   19,   20,   47,  229,  230,  232,   21,  279,
 /*   280 */    58,  309,   59,  309,   58,  272,   59,   36,   30,   32,
 /*   290 */    28,   26,   34,   36,   30,   32,   28,   26,   34,   36,
 /*   300 */    30,   32,   28,   26,   34,   49,   50,   60,  269,   49,
 /*   310 */    50,   60,   61,   22,  268,   62,   61,  309,  309,   62,
 /*   320 */   233,   45,   36,   30,   32,   28,   26,   34,   63,   10,
 /*   330 */    64,   23,   63,   24,   64,   12,   25,   36,   30,   32,
 /*   340 */    28,   26,   34,   27,   36,   30,   32,   28,   26,   34,
 /*   350 */    65,   66,   29,   67,   65,   66,   68,   67,   13,   69,
 /*   360 */    68,    5,   31,   69,   14,  280,   36,   30,   32,   28,
 /*   370 */    26,   34,   36,   30,   32,   28,   26,   34,   36,   30,
 /*   380 */    32,   28,   26,   34,   89,   70,   88,  306,   89,   70,
 /*   390 */    88,   71,   87,  281,   72,   71,   87,  309,   72,  273,
 /*   400 */    33,   36,   30,   32,   28,   26,   34,   35,    8,  309,
 /*   410 */    36,   30,   32,   28,   26,   34,   36,   30,   32,   28,
 /*   420 */    26,   34,  270,   36,   30,   32,   28,   26,   34,   86,
 /*   430 */    73,  267,  309,   86,   73,   85,   74,  266,   76,   85,
 /*   440 */    74,   75,   76,  309,  265,   75,   36,   30,   32,   28,
 /*   450 */    26,   34,   36,   30,   32,   28,   26,   34,   36,   30,
 /*   460 */    32,   28,   26,   34,  309,  309,  309,  264,  309,  309,
 /*   470 */   309,  309,  309,  263,  309,  309,  309,  309,  309,  262,
 /*   480 */   309,   36,   30,   32,   28,   26,   34,   36,   30,   32,
 /*   490 */    28,   26,   34,   36,   30,   32,   28,   26,   34,  309,
 /*   500 */   309,  309,  261,  309,  309,  309,  309,  309,  260,  309,
 /*   510 */   309,  309,  309,  309,  259,  309,   36,   30,   32,   28,
 /*   520 */    26,   34,   36,   30,   32,   28,   26,   34,   36,   30,
 /*   530 */    32,   28,   26,   34,  309,  309,  309,  258,  309,  309,
 /*   540 */   309,  309,  309,  257,  309,  309,  309,  309,  309,  256,
 /*   550 */   309,   36,   30,   32,   28,   26,   34,   36,   30,   32,
 /*   560 */    28,   26,   34,   36,   30,   32,   28,   26,   34,  309,
 /*   570 */   309,  309,  255,  309,  309,  309,  309,  309,  254,  309,
 /*   580 */   309,  309,  309,  309,  253,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    78,   79,   80,   89,   93,   83,    6,   93,   86,   87,
 /*    10 */     1,    2,    3,    4,    5,    6,   84,   85,   89,   92,
 /*    20 */    20,   21,   93,    2,    3,    4,    5,    6,   15,   29,
 /*    30 */    30,   31,   32,   32,   33,   34,   36,   37,   94,   95,
 /*    40 */    27,   41,   42,   43,   44,   45,   46,   47,   48,   49,
 /*    50 */    50,   51,   52,   53,   54,   29,   30,   31,   82,   59,
 /*    60 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*    70 */    70,   71,    6,   73,   74,    7,    8,    9,   10,   11,
 /*    80 */    12,   13,   14,   28,   90,   89,   20,   21,   22,   93,
 /*    90 */    35,   23,   88,   25,   26,   29,   30,   31,   16,   17,
 /*   100 */    18,   19,   36,   37,   94,   81,   22,   41,   42,   43,
 /*   110 */    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*   120 */    54,   75,   76,   77,   21,   59,   60,   61,   62,   63,
 /*   130 */    64,   65,   66,   67,   68,   69,   70,   71,    6,   73,
 /*   140 */    74,   80,   32,   33,   83,   89,   36,   86,   87,   93,
 /*   150 */    20,   20,   20,   21,    1,    2,    3,    4,    5,    6,
 /*   160 */     6,   29,   30,   31,   55,   56,   57,   58,   36,   37,
 /*   170 */    20,   20,    6,   41,   42,   43,   44,   45,   46,   47,
 /*   180 */    48,   49,   50,   51,   52,   53,   54,   21,   21,   24,
 /*   190 */    21,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   200 */    68,   69,   70,   71,   89,   73,   74,   20,   93,   20,
 /*   210 */    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
 /*   220 */    51,   52,   53,   54,    0,   72,   89,   20,   91,   20,
 /*   230 */    93,    7,    8,    9,   10,   11,   12,   13,   14,    1,
 /*   240 */     2,    3,    4,    5,    6,   20,   96,   23,   89,   25,
 /*   250 */    26,   89,   93,   89,   20,   93,   18,   93,    1,    2,
 /*   260 */     3,    4,    5,    6,    1,    2,    3,    4,    5,    6,
 /*   270 */    89,   22,   20,   20,   93,   37,   38,   39,   20,   22,
 /*   280 */    89,   96,   89,   96,   93,   22,   93,    1,    2,    3,
 /*   290 */     4,    5,    6,    1,    2,    3,    4,    5,    6,    1,
 /*   300 */     2,    3,    4,    5,    6,   89,   89,   89,   22,   93,
 /*   310 */    93,   93,   89,   20,   22,   89,   93,   96,   96,   93,
 /*   320 */    22,   72,    1,    2,    3,    4,    5,    6,   89,   72,
 /*   330 */    89,   20,   93,   20,   93,   72,   20,    1,    2,    3,
 /*   340 */     4,    5,    6,   20,    1,    2,    3,    4,    5,    6,
 /*   350 */    89,   89,   20,   89,   93,   93,   89,   93,   72,   89,
 /*   360 */    93,   40,   20,   93,   72,   22,    1,    2,    3,    4,
 /*   370 */     5,    6,    1,    2,    3,    4,    5,    6,    1,    2,
 /*   380 */     3,    4,    5,    6,   89,   89,   89,   22,   93,   93,
 /*   390 */    93,   89,   89,   22,   89,   93,   93,   96,   93,   22,
 /*   400 */    20,    1,    2,    3,    4,    5,    6,   20,   72,   96,
 /*   410 */     1,    2,    3,    4,    5,    6,    1,    2,    3,    4,
 /*   420 */     5,    6,   22,    1,    2,    3,    4,    5,    6,   89,
 /*   430 */    89,   22,   96,   93,   93,   89,   89,   22,   89,   93,
 /*   440 */    93,   89,   93,   96,   22,   93,    1,    2,    3,    4,
 /*   450 */     5,    6,    1,    2,    3,    4,    5,    6,    1,    2,
 /*   460 */     3,    4,    5,    6,   96,   96,   96,   22,   96,   96,
 /*   470 */    96,   96,   96,   22,   96,   96,   96,   96,   96,   22,
 /*   480 */    96,    1,    2,    3,    4,    5,    6,    1,    2,    3,
 /*   490 */     4,    5,    6,    1,    2,    3,    4,    5,    6,   96,
 /*   500 */    96,   96,   22,   96,   96,   96,   96,   96,   22,   96,
 /*   510 */    96,   96,   96,   96,   22,   96,    1,    2,    3,    4,
 /*   520 */     5,    6,    1,    2,    3,    4,    5,    6,    1,    2,
 /*   530 */     3,    4,    5,    6,   96,   96,   96,   22,   96,   96,
 /*   540 */    96,   96,   96,   22,   96,   96,   96,   96,   96,   22,
 /*   550 */    96,    1,    2,    3,    4,    5,    6,    1,    2,    3,
 /*   560 */     4,    5,    6,    1,    2,    3,    4,    5,    6,   96,
 /*   570 */    96,   96,   22,   96,   96,   96,   96,   96,   22,   96,
 /*   580 */    96,   96,   96,   96,   22,   96,   96,   96,   96,   96,
 /*   590 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*   600 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*   610 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*   620 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*   630 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*   640 */    96,   96,   78,   78,   78,   78,   78,   78,   78,   78,
 /*   650 */    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
 /*   660 */    78,   78,   78,
};
#define YY_SHIFT_COUNT    (111)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (562)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */    68,  224,    0,   66,  132,  132,  132,  132,  132,  132,
 /*    10 */   132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
 /*    20 */   132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
 /*    30 */   132,  132,  132,  132,  132,  132,  132,  132,  166,   55,
 /*    40 */   169,  238,   82,  109,    1,  166,   13,  257,  263,  286,
 /*    50 */   292,  298,  321,  365,  371,  153,  336,  343,  377,  400,
 /*    60 */   409,  415,  422,  445,  451,  457,  480,  486,  492,  515,
 /*    70 */   521,  527,  550,  556,  562,    9,   21,   46,  110,   26,
 /*    80 */   249,   84,  103,  130,  131,  154,  154,  154,  154,  154,
 /*    90 */   150,  151,  167,  187,  189,  207,  209,  225,  234,  252,
 /*   100 */   253,  258,  293,  311,  313,  316,  323,  332,  342,  380,
 /*   110 */   387,  165,
};
#define YY_REDUCE_COUNT (46)
#define YY_REDUCE_MIN   (-89)
#define YY_REDUCE_MAX   (352)
static const short yy_reduce_ofst[] = {
 /*     0 */   -78,   61,  137,  -86,  -71,   -4,   56,  115,  159,  162,
 /*    10 */   164,  181,  191,  193,  216,  217,  218,  223,  226,  239,
 /*    20 */   241,  261,  262,  264,  267,  270,  295,  296,  297,  302,
 /*    30 */   303,  305,  340,  341,  346,  347,  349,  352,  -56,  -68,
 /*    40 */   -89,  -73,  -24,    4,   -6,   10,   24,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*    10 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*    20 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*    30 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  316,
 /*    40 */   307,  307,  307,  410,  307,  307,  401,  307,  307,  307,
 /*    50 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*    60 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*    70 */   307,  307,  307,  307,  307,  325,  389,  395,  307,  307,
 /*    80 */   307,  307,  307,  322,  307,  390,  391,  392,  393,  394,
 /*    90 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*   100 */   307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 /*   110 */   307,  307,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  parse_grain_exprARG_SDECL                /* A place to hold %extra_argument */
  parse_grain_exprCTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
#include <assert.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void parse_grain_exprTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  /*    0 */ "$",
  /*    1 */ "PLUS",
  /*    2 */ "DIVIDE",
  /*    3 */ "TIMES",
  /*    4 */ "POW",
  /*    5 */ "MOD",
  /*    6 */ "MINUS",
  /*    7 */ "PROP_AMP",
  /*    8 */ "PROP_AT",
  /*    9 */ "PROP_LEN",
  /*   10 */ "PROP_SPEED",
  /*   11 */ "PROP_TIME_BEFORE",
  /*   12 */ "PROP_TIME_AFTER",
  /*   13 */ "PROP_PAN",
  /*   14 */ "PROP_REPEATS",
  /*   15 */ "ONDONE",
  /*   16 */ "HANN",
  /*   17 */ "RECT",
  /*   18 */ "TRI",
  /*   19 */ "TRPZ",
  /*   20 */ "OPENP",
  /*   21 */ "DOUBLE",
  /*   22 */ "CLOSEP",
  /*   23 */ "PROP_TAG",
  /*   24 */ "SYMBOL",
  /*   25 */ "PROP_INTERP",
  /*   26 */ "PROP_WINDOW",
  /*   27 */ "MODULATE",
  /*   28 */ "OVERFLOW",
  /*   29 */ "CLIP",
  /*   30 */ "FOLD",
  /*   31 */ "WRAP",
  /*   32 */ "NONE",
  /*   33 */ "LINEAR",
  /*   34 */ "CUBIC",
  /*   35 */ "MODE",
  /*   36 */ "FN_SQRT",
  /*   37 */ "SIN",
  /*   38 */ "SAW",
  /*   39 */ "SQR",
  /*   40 */ "DOTS",
  /*   41 */ "CONST_AMP",
  /*   42 */ "CONST_AT",
  /*   43 */ "CONST_LEN",
  /*   44 */ "CONST_PAN",
  /*   45 */ "CONST_SPEED",
  /*   46 */ "CONST_TIME_BEFORE",
  /*   47 */ "CONST_TIME_AFTER",
  /*   48 */ "CONST_SR",
  /*   49 */ "CONST_BS",
  /*   50 */ "CONST_ASIZE",
  /*   51 */ "CONST_NITER",
  /*   52 */ "CONST_NBLOCK",
  /*   53 */ "CONST_NSAMP",
  /*   54 */ "CONST_GIDX",
  /*   55 */ "ASSIGN_ADD",
  /*   56 */ "ASSIGN_SUB",
  /*   57 */ "ASSIGN_MUL",
  /*   58 */ "ASSIGN_SET",
  /*   59 */ "FN_ABS",
  /*   60 */ "FN_COS",
  /*   61 */ "FN_TAN",
  /*   62 */ "FN_ACOS",
  /*   63 */ "FN_ASIN",
  /*   64 */ "FN_ATAN",
  /*   65 */ "FN_CEIL",
  /*   66 */ "FN_FLOOR",
  /*   67 */ "FN_ROUND",
  /*   68 */ "FN_LOG",
  /*   69 */ "FN_LOG10",
  /*   70 */ "FN_LOG2",
  /*   71 */ "FN_FRAC",
  /*   72 */ "COMMA",
  /*   73 */ "FN_URAND",
  /*   74 */ "CHOICE",
  /*   75 */ "SAMP",
  /*   76 */ "MSEC",
  /*   77 */ "SEC",
  /*   78 */ "program",
  /*   79 */ "prop_list",
  /*   80 */ "prop",
  /*   81 */ "ondone",
  /*   82 */ "wintype",
  /*   83 */ "prop_pan",
  /*   84 */ "overflow",
  /*   85 */ "mode",
  /*   86 */ "prop_tag",
  /*   87 */ "prop_expr",
  /*   88 */ "assign",
  /*   89 */ "expr",
  /*   90 */ "interp",
  /*   91 */ "modulate",
  /*   92 */ "waveform1",
  /*   93 */ "vars",
  /*   94 */ "number",
  /*   95 */ "num_vargs",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "prop ::= PROP_AMP",
 /*   1 */ "prop ::= PROP_AT",
 /*   2 */ "prop ::= PROP_LEN",
 /*   3 */ "prop ::= PROP_SPEED",
 /*   4 */ "prop ::= PROP_TIME_BEFORE",
 /*   5 */ "prop ::= PROP_TIME_AFTER",
 /*   6 */ "prop ::= PROP_PAN",
 /*   7 */ "prop ::= PROP_REPEATS",
 /*   8 */ "ondone ::= ONDONE",
 /*   9 */ "wintype ::= HANN",
 /*  10 */ "wintype ::= RECT",
 /*  11 */ "wintype ::= TRI",
 /*  12 */ "wintype ::= TRPZ",
 /*  13 */ "wintype ::= TRPZ OPENP DOUBLE CLOSEP",
 /*  14 */ "prop_tag ::= PROP_TAG SYMBOL",
 /*  15 */ "prop_expr ::= prop ondone assign expr",
 /*  16 */ "prop_expr ::= PROP_WINDOW wintype",
 /*  17 */ "overflow ::= OVERFLOW CLIP",
 /*  18 */ "overflow ::= OVERFLOW FOLD",
 /*  19 */ "overflow ::= OVERFLOW WRAP",
 /*  20 */ "interp ::= NONE",
 /*  21 */ "interp ::= LINEAR",
 /*  22 */ "interp ::= CUBIC",
 /*  23 */ "mode ::= MODE NONE",
 /*  24 */ "mode ::= MODE LINEAR",
 /*  25 */ "mode ::= MODE FN_SQRT",
 /*  26 */ "waveform1 ::= SIN",
 /*  27 */ "waveform1 ::= SAW",
 /*  28 */ "waveform1 ::= TRI",
 /*  29 */ "waveform1 ::= SQR",
 /*  30 */ "modulate ::= expr DOTS expr waveform1 OPENP expr CLOSEP",
 /*  31 */ "modulate ::= NONE",
 /*  32 */ "vars ::= CONST_AMP",
 /*  33 */ "vars ::= CONST_AT",
 /*  34 */ "vars ::= CONST_LEN",
 /*  35 */ "vars ::= CONST_PAN",
 /*  36 */ "vars ::= CONST_SPEED",
 /*  37 */ "vars ::= CONST_TIME_BEFORE",
 /*  38 */ "vars ::= CONST_TIME_AFTER",
 /*  39 */ "vars ::= CONST_SR",
 /*  40 */ "vars ::= CONST_BS",
 /*  41 */ "vars ::= CONST_ASIZE",
 /*  42 */ "vars ::= CONST_NITER",
 /*  43 */ "vars ::= CONST_NBLOCK",
 /*  44 */ "vars ::= CONST_NSAMP",
 /*  45 */ "vars ::= CONST_GIDX",
 /*  46 */ "assign ::= ASSIGN_ADD",
 /*  47 */ "assign ::= ASSIGN_SUB",
 /*  48 */ "assign ::= ASSIGN_MUL",
 /*  49 */ "assign ::= ASSIGN_SET",
 /*  50 */ "expr ::= FN_ABS OPENP expr CLOSEP",
 /*  51 */ "expr ::= FN_SQRT OPENP expr CLOSEP",
 /*  52 */ "expr ::= SIN OPENP expr CLOSEP",
 /*  53 */ "expr ::= FN_COS OPENP expr CLOSEP",
 /*  54 */ "expr ::= FN_TAN OPENP expr CLOSEP",
 /*  55 */ "expr ::= FN_ACOS OPENP expr CLOSEP",
 /*  56 */ "expr ::= FN_ASIN OPENP expr CLOSEP",
 /*  57 */ "expr ::= FN_ATAN OPENP expr CLOSEP",
 /*  58 */ "expr ::= FN_CEIL OPENP expr CLOSEP",
 /*  59 */ "expr ::= FN_FLOOR OPENP expr CLOSEP",
 /*  60 */ "expr ::= FN_ROUND OPENP expr CLOSEP",
 /*  61 */ "expr ::= FN_LOG OPENP expr CLOSEP",
 /*  62 */ "expr ::= FN_LOG10 OPENP expr CLOSEP",
 /*  63 */ "expr ::= FN_LOG2 OPENP expr CLOSEP",
 /*  64 */ "expr ::= FN_FRAC OPENP expr CLOSEP",
 /*  65 */ "expr ::= WRAP OPENP expr CLOSEP",
 /*  66 */ "expr ::= WRAP OPENP expr COMMA expr CLOSEP",
 /*  67 */ "expr ::= WRAP OPENP expr COMMA expr COMMA expr CLOSEP",
 /*  68 */ "expr ::= FN_URAND OPENP CLOSEP",
 /*  69 */ "expr ::= FN_URAND OPENP expr CLOSEP",
 /*  70 */ "expr ::= FN_URAND OPENP expr COMMA expr CLOSEP",
 /*  71 */ "number ::= DOUBLE",
 /*  72 */ "number ::= MINUS DOUBLE",
 /*  73 */ "num_vargs ::= num_vargs COMMA number",
 /*  74 */ "num_vargs ::= number",
 /*  75 */ "expr ::= CHOICE OPENP num_vargs CLOSEP",
 /*  76 */ "expr ::= FOLD OPENP expr CLOSEP",
 /*  77 */ "expr ::= FOLD OPENP expr COMMA expr CLOSEP",
 /*  78 */ "expr ::= CLIP OPENP expr COMMA expr COMMA expr CLOSEP",
 /*  79 */ "expr ::= expr PLUS expr",
 /*  80 */ "expr ::= expr MINUS expr",
 /*  81 */ "expr ::= expr TIMES expr",
 /*  82 */ "expr ::= expr DIVIDE expr",
 /*  83 */ "expr ::= expr POW expr",
 /*  84 */ "expr ::= expr MOD expr",
 /*  85 */ "expr ::= DOUBLE",
 /*  86 */ "expr ::= MINUS DOUBLE",
 /*  87 */ "expr ::= DOUBLE SAMP",
 /*  88 */ "expr ::= DOUBLE MSEC",
 /*  89 */ "expr ::= DOUBLE SEC",
 /*  90 */ "program ::= prop_list",
 /*  91 */ "ondone ::=",
 /*  92 */ "prop_pan ::= PROP_PAN overflow",
 /*  93 */ "prop_pan ::= PROP_PAN mode",
 /*  94 */ "prop_expr ::= prop_pan",
 /*  95 */ "prop_expr ::= prop_tag",
 /*  96 */ "prop_expr ::= PROP_INTERP interp",
 /*  97 */ "prop_expr ::= prop MODULATE modulate",
 /*  98 */ "prop_list ::= prop_list prop_expr",
 /*  99 */ "prop_list ::= prop_expr",
 /* 100 */ "assign ::=",
 /* 101 */ "expr ::= vars",
 /* 102 */ "expr ::= MINUS vars",
 /* 103 */ "expr ::= OPENP expr CLOSEP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to parse_grain_exprAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void parse_grain_exprInit(void *yypRawParser parse_grain_exprCTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  parse_grain_exprCTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef parse_grain_expr_ENGINEALWAYSONSTACK
/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to parse_grain_expr and parse_grain_exprFree.
*/
void *parse_grain_exprAlloc(void *(*mallocProc)(YYMALLOCARGTYPE) parse_grain_exprCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    parse_grain_exprCTX_STORE
    parse_grain_exprInit(yypParser parse_grain_exprCTX_PARAM);
  }
  return (void*)yypParser;
}
#endif /* parse_grain_expr_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  parse_grain_exprARG_FETCH
  parse_grain_exprCTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void parse_grain_exprFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef parse_grain_expr_ENGINEALWAYSONSTACK
/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void parse_grain_exprFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  parse_grain_exprFinalize(p);
  (*freeProc)(p);
}
#endif /* parse_grain_expr_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int parse_grain_exprStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int parse_grain_exprCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i<=YY_ACTTAB_COUNT );
    assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    assert( i<(int)YY_NLOOKAHEAD );
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );
      iFallback = yyFallback[iLookAhead];
      if( iFallback!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );
        if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   parse_grain_exprARG_FETCH
   parse_grain_exprCTX_FETCH
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
#line 39 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"

    p->setErrorMsg("stack overflow");
#line 1105 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
/******** End %stack_overflow code ********************************************/
   parse_grain_exprARG_STORE /* Suppress warning about unused %extra_argument var */
   parse_grain_exprCTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  parse_grain_exprTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
static const YYCODETYPE yyRuleInfoLhs[] = {
    80,  /* (0) prop ::= PROP_AMP */
    80,  /* (1) prop ::= PROP_AT */
    80,  /* (2) prop ::= PROP_LEN */
    80,  /* (3) prop ::= PROP_SPEED */
    80,  /* (4) prop ::= PROP_TIME_BEFORE */
    80,  /* (5) prop ::= PROP_TIME_AFTER */
    80,  /* (6) prop ::= PROP_PAN */
    80,  /* (7) prop ::= PROP_REPEATS */
    81,  /* (8) ondone ::= ONDONE */
    82,  /* (9) wintype ::= HANN */
    82,  /* (10) wintype ::= RECT */
    82,  /* (11) wintype ::= TRI */
    82,  /* (12) wintype ::= TRPZ */
    82,  /* (13) wintype ::= TRPZ OPENP DOUBLE CLOSEP */
    86,  /* (14) prop_tag ::= PROP_TAG SYMBOL */
    87,  /* (15) prop_expr ::= prop ondone assign expr */
    87,  /* (16) prop_expr ::= PROP_WINDOW wintype */
    84,  /* (17) overflow ::= OVERFLOW CLIP */
    84,  /* (18) overflow ::= OVERFLOW FOLD */
    84,  /* (19) overflow ::= OVERFLOW WRAP */
    90,  /* (20) interp ::= NONE */
    90,  /* (21) interp ::= LINEAR */
    90,  /* (22) interp ::= CUBIC */
    85,  /* (23) mode ::= MODE NONE */
    85,  /* (24) mode ::= MODE LINEAR */
    85,  /* (25) mode ::= MODE FN_SQRT */
    92,  /* (26) waveform1 ::= SIN */
    92,  /* (27) waveform1 ::= SAW */
    92,  /* (28) waveform1 ::= TRI */
    92,  /* (29) waveform1 ::= SQR */
    91,  /* (30) modulate ::= expr DOTS expr waveform1 OPENP expr CLOSEP */
    91,  /* (31) modulate ::= NONE */
    93,  /* (32) vars ::= CONST_AMP */
    93,  /* (33) vars ::= CONST_AT */
    93,  /* (34) vars ::= CONST_LEN */
    93,  /* (35) vars ::= CONST_PAN */
    93,  /* (36) vars ::= CONST_SPEED */
    93,  /* (37) vars ::= CONST_TIME_BEFORE */
    93,  /* (38) vars ::= CONST_TIME_AFTER */
    93,  /* (39) vars ::= CONST_SR */
    93,  /* (40) vars ::= CONST_BS */
    93,  /* (41) vars ::= CONST_ASIZE */
    93,  /* (42) vars ::= CONST_NITER */
    93,  /* (43) vars ::= CONST_NBLOCK */
    93,  /* (44) vars ::= CONST_NSAMP */
    93,  /* (45) vars ::= CONST_GIDX */
    88,  /* (46) assign ::= ASSIGN_ADD */
    88,  /* (47) assign ::= ASSIGN_SUB */
    88,  /* (48) assign ::= ASSIGN_MUL */
    88,  /* (49) assign ::= ASSIGN_SET */
    89,  /* (50) expr ::= FN_ABS OPENP expr CLOSEP */
    89,  /* (51) expr ::= FN_SQRT OPENP expr CLOSEP */
    89,  /* (52) expr ::= SIN OPENP expr CLOSEP */
    89,  /* (53) expr ::= FN_COS OPENP expr CLOSEP */
    89,  /* (54) expr ::= FN_TAN OPENP expr CLOSEP */
    89,  /* (55) expr ::= FN_ACOS OPENP expr CLOSEP */
    89,  /* (56) expr ::= FN_ASIN OPENP expr CLOSEP */
    89,  /* (57) expr ::= FN_ATAN OPENP expr CLOSEP */
    89,  /* (58) expr ::= FN_CEIL OPENP expr CLOSEP */
    89,  /* (59) expr ::= FN_FLOOR OPENP expr CLOSEP */
    89,  /* (60) expr ::= FN_ROUND OPENP expr CLOSEP */
    89,  /* (61) expr ::= FN_LOG OPENP expr CLOSEP */
    89,  /* (62) expr ::= FN_LOG10 OPENP expr CLOSEP */
    89,  /* (63) expr ::= FN_LOG2 OPENP expr CLOSEP */
    89,  /* (64) expr ::= FN_FRAC OPENP expr CLOSEP */
    89,  /* (65) expr ::= WRAP OPENP expr CLOSEP */
    89,  /* (66) expr ::= WRAP OPENP expr COMMA expr CLOSEP */
    89,  /* (67) expr ::= WRAP OPENP expr COMMA expr COMMA expr CLOSEP */
    89,  /* (68) expr ::= FN_URAND OPENP CLOSEP */
    89,  /* (69) expr ::= FN_URAND OPENP expr CLOSEP */
    89,  /* (70) expr ::= FN_URAND OPENP expr COMMA expr CLOSEP */
    94,  /* (71) number ::= DOUBLE */
    94,  /* (72) number ::= MINUS DOUBLE */
    95,  /* (73) num_vargs ::= num_vargs COMMA number */
    95,  /* (74) num_vargs ::= number */
    89,  /* (75) expr ::= CHOICE OPENP num_vargs CLOSEP */
    89,  /* (76) expr ::= FOLD OPENP expr CLOSEP */
    89,  /* (77) expr ::= FOLD OPENP expr COMMA expr CLOSEP */
    89,  /* (78) expr ::= CLIP OPENP expr COMMA expr COMMA expr CLOSEP */
    89,  /* (79) expr ::= expr PLUS expr */
    89,  /* (80) expr ::= expr MINUS expr */
    89,  /* (81) expr ::= expr TIMES expr */
    89,  /* (82) expr ::= expr DIVIDE expr */
    89,  /* (83) expr ::= expr POW expr */
    89,  /* (84) expr ::= expr MOD expr */
    89,  /* (85) expr ::= DOUBLE */
    89,  /* (86) expr ::= MINUS DOUBLE */
    89,  /* (87) expr ::= DOUBLE SAMP */
    89,  /* (88) expr ::= DOUBLE MSEC */
    89,  /* (89) expr ::= DOUBLE SEC */
    78,  /* (90) program ::= prop_list */
    81,  /* (91) ondone ::= */
    83,  /* (92) prop_pan ::= PROP_PAN overflow */
    83,  /* (93) prop_pan ::= PROP_PAN mode */
    87,  /* (94) prop_expr ::= prop_pan */
    87,  /* (95) prop_expr ::= prop_tag */
    87,  /* (96) prop_expr ::= PROP_INTERP interp */
    87,  /* (97) prop_expr ::= prop MODULATE modulate */
    79,  /* (98) prop_list ::= prop_list prop_expr */
    79,  /* (99) prop_list ::= prop_expr */
    88,  /* (100) assign ::= */
    89,  /* (101) expr ::= vars */
    89,  /* (102) expr ::= MINUS vars */
    89,  /* (103) expr ::= OPENP expr CLOSEP */
};

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
static const signed char yyRuleInfoNRhs[] = {
   -1,  /* (0) prop ::= PROP_AMP */
   -1,  /* (1) prop ::= PROP_AT */
   -1,  /* (2) prop ::= PROP_LEN */
   -1,  /* (3) prop ::= PROP_SPEED */
   -1,  /* (4) prop ::= PROP_TIME_BEFORE */
   -1,  /* (5) prop ::= PROP_TIME_AFTER */
   -1,  /* (6) prop ::= PROP_PAN */
   -1,  /* (7) prop ::= PROP_REPEATS */
   -1,  /* (8) ondone ::= ONDONE */
   -1,  /* (9) wintype ::= HANN */
   -1,  /* (10) wintype ::= RECT */
   -1,  /* (11) wintype ::= TRI */
   -1,  /* (12) wintype ::= TRPZ */
   -4,  /* (13) wintype ::= TRPZ OPENP DOUBLE CLOSEP */
   -2,  /* (14) prop_tag ::= PROP_TAG SYMBOL */
   -4,  /* (15) prop_expr ::= prop ondone assign expr */
   -2,  /* (16) prop_expr ::= PROP_WINDOW wintype */
   -2,  /* (17) overflow ::= OVERFLOW CLIP */
   -2,  /* (18) overflow ::= OVERFLOW FOLD */
   -2,  /* (19) overflow ::= OVERFLOW WRAP */
   -1,  /* (20) interp ::= NONE */
   -1,  /* (21) interp ::= LINEAR */
   -1,  /* (22) interp ::= CUBIC */
   -2,  /* (23) mode ::= MODE NONE */
   -2,  /* (24) mode ::= MODE LINEAR */
   -2,  /* (25) mode ::= MODE FN_SQRT */
   -1,  /* (26) waveform1 ::= SIN */
   -1,  /* (27) waveform1 ::= SAW */
   -1,  /* (28) waveform1 ::= TRI */
   -1,  /* (29) waveform1 ::= SQR */
   -7,  /* (30) modulate ::= expr DOTS expr waveform1 OPENP expr CLOSEP */
   -1,  /* (31) modulate ::= NONE */
   -1,  /* (32) vars ::= CONST_AMP */
   -1,  /* (33) vars ::= CONST_AT */
   -1,  /* (34) vars ::= CONST_LEN */
   -1,  /* (35) vars ::= CONST_PAN */
   -1,  /* (36) vars ::= CONST_SPEED */
   -1,  /* (37) vars ::= CONST_TIME_BEFORE */
   -1,  /* (38) vars ::= CONST_TIME_AFTER */
   -1,  /* (39) vars ::= CONST_SR */
   -1,  /* (40) vars ::= CONST_BS */
   -1,  /* (41) vars ::= CONST_ASIZE */
   -1,  /* (42) vars ::= CONST_NITER */
   -1,  /* (43) vars ::= CONST_NBLOCK */
   -1,  /* (44) vars ::= CONST_NSAMP */
   -1,  /* (45) vars ::= CONST_GIDX */
   -1,  /* (46) assign ::= ASSIGN_ADD */
   -1,  /* (47) assign ::= ASSIGN_SUB */
   -1,  /* (48) assign ::= ASSIGN_MUL */
   -1,  /* (49) assign ::= ASSIGN_SET */
   -4,  /* (50) expr ::= FN_ABS OPENP expr CLOSEP */
   -4,  /* (51) expr ::= FN_SQRT OPENP expr CLOSEP */
   -4,  /* (52) expr ::= SIN OPENP expr CLOSEP */
   -4,  /* (53) expr ::= FN_COS OPENP expr CLOSEP */
   -4,  /* (54) expr ::= FN_TAN OPENP expr CLOSEP */
   -4,  /* (55) expr ::= FN_ACOS OPENP expr CLOSEP */
   -4,  /* (56) expr ::= FN_ASIN OPENP expr CLOSEP */
   -4,  /* (57) expr ::= FN_ATAN OPENP expr CLOSEP */
   -4,  /* (58) expr ::= FN_CEIL OPENP expr CLOSEP */
   -4,  /* (59) expr ::= FN_FLOOR OPENP expr CLOSEP */
   -4,  /* (60) expr ::= FN_ROUND OPENP expr CLOSEP */
   -4,  /* (61) expr ::= FN_LOG OPENP expr CLOSEP */
   -4,  /* (62) expr ::= FN_LOG10 OPENP expr CLOSEP */
   -4,  /* (63) expr ::= FN_LOG2 OPENP expr CLOSEP */
   -4,  /* (64) expr ::= FN_FRAC OPENP expr CLOSEP */
   -4,  /* (65) expr ::= WRAP OPENP expr CLOSEP */
   -6,  /* (66) expr ::= WRAP OPENP expr COMMA expr CLOSEP */
   -8,  /* (67) expr ::= WRAP OPENP expr COMMA expr COMMA expr CLOSEP */
   -3,  /* (68) expr ::= FN_URAND OPENP CLOSEP */
   -4,  /* (69) expr ::= FN_URAND OPENP expr CLOSEP */
   -6,  /* (70) expr ::= FN_URAND OPENP expr COMMA expr CLOSEP */
   -1,  /* (71) number ::= DOUBLE */
   -2,  /* (72) number ::= MINUS DOUBLE */
   -3,  /* (73) num_vargs ::= num_vargs COMMA number */
   -1,  /* (74) num_vargs ::= number */
   -4,  /* (75) expr ::= CHOICE OPENP num_vargs CLOSEP */
   -4,  /* (76) expr ::= FOLD OPENP expr CLOSEP */
   -6,  /* (77) expr ::= FOLD OPENP expr COMMA expr CLOSEP */
   -8,  /* (78) expr ::= CLIP OPENP expr COMMA expr COMMA expr CLOSEP */
   -3,  /* (79) expr ::= expr PLUS expr */
   -3,  /* (80) expr ::= expr MINUS expr */
   -3,  /* (81) expr ::= expr TIMES expr */
   -3,  /* (82) expr ::= expr DIVIDE expr */
   -3,  /* (83) expr ::= expr POW expr */
   -3,  /* (84) expr ::= expr MOD expr */
   -1,  /* (85) expr ::= DOUBLE */
   -2,  /* (86) expr ::= MINUS DOUBLE */
   -2,  /* (87) expr ::= DOUBLE SAMP */
   -2,  /* (88) expr ::= DOUBLE MSEC */
   -2,  /* (89) expr ::= DOUBLE SEC */
   -1,  /* (90) program ::= prop_list */
    0,  /* (91) ondone ::= */
   -2,  /* (92) prop_pan ::= PROP_PAN overflow */
   -2,  /* (93) prop_pan ::= PROP_PAN mode */
   -1,  /* (94) prop_expr ::= prop_pan */
   -1,  /* (95) prop_expr ::= prop_tag */
   -2,  /* (96) prop_expr ::= PROP_INTERP interp */
   -3,  /* (97) prop_expr ::= prop MODULATE modulate */
   -2,  /* (98) prop_list ::= prop_list prop_expr */
   -1,  /* (99) prop_list ::= prop_expr */
    0,  /* (100) assign ::= */
   -1,  /* (101) expr ::= vars */
   -2,  /* (102) expr ::= MINUS vars */
   -3,  /* (103) expr ::= OPENP expr CLOSEP */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  parse_grain_exprTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  parse_grain_exprCTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  YYACTIONTYPE yyact;             /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  parse_grain_exprARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* prop ::= PROP_AMP */
#line 47 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_AMP); }
#line 1434 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 1: /* prop ::= PROP_AT */
#line 48 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_AT); }
#line 1439 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 2: /* prop ::= PROP_LEN */
#line 49 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_LENGTH); }
#line 1444 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 3: /* prop ::= PROP_SPEED */
#line 50 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_SPEED); }
#line 1449 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 4: /* prop ::= PROP_TIME_BEFORE */
#line 51 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_TIME_BEFORE); }
#line 1454 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 5: /* prop ::= PROP_TIME_AFTER */
#line 52 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_TIME_AFTER); }
#line 1459 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 6: /* prop ::= PROP_PAN */
#line 53 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_PAN); }
#line 1464 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 7: /* prop ::= PROP_REPEATS */
#line 54 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_REPEATS); }
#line 1469 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 8: /* ondone ::= ONDONE */
#line 56 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setCalcMoment(ceammc::GRAIN_CALC_ONDONE); }
#line 1474 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 9: /* wintype ::= HANN */
#line 59 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0.val = ceammc::GRAIN_WIN_HANN; }
#line 1479 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 10: /* wintype ::= RECT */
#line 60 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0.val = ceammc::GRAIN_WIN_RECT; }
#line 1484 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 11: /* wintype ::= TRI */
#line 61 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0.val = ceammc::GRAIN_WIN_TRI; }
#line 1489 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 12: /* wintype ::= TRPZ */
#line 62 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0.val = ceammc::GRAIN_WIN_TRPZ; }
#line 1494 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 13: /* wintype ::= TRPZ OPENP DOUBLE CLOSEP */
#line 64 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[-3].minor.yy0.val = ceammc::GRAIN_WIN_TRPZ; }
#line 1499 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 14: /* prop_tag ::= PROP_TAG SYMBOL */
#line 69 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->startProp(ceammc::GRAIN_PROP_TAG); p->saveGrainTag(yymsp[0].minor.yy0.sym); }
#line 1504 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 15: /* prop_expr ::= prop ondone assign expr */
#line 72 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{
    switch (p->calcMoment()) {
    case ceammc::GRAIN_CALC_ONDONE:
        p->setOnDone();
    break;
    case ceammc::GRAIN_CALC_ONCE:
    default:
        if (!p->byteCodeEval()) {
            std::cerr << "eval failed: " << p->byteCode() << std::endl;
        }
    break;
    }
}
#line 1521 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 16: /* prop_expr ::= PROP_WINDOW wintype */
#line 88 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setWinType(static_cast<ceammc::GrainWindowType>(yymsp[0].minor.yy0.val)); }
#line 1526 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 17: /* overflow ::= OVERFLOW CLIP */
#line 94 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanOverflow(ceammc::GRAIN_PROP_OVERFLOW_CLIP); }
#line 1531 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 18: /* overflow ::= OVERFLOW FOLD */
#line 95 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanOverflow(ceammc::GRAIN_PROP_OVERFLOW_FOLD); }
#line 1536 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 19: /* overflow ::= OVERFLOW WRAP */
#line 96 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanOverflow(ceammc::GRAIN_PROP_OVERFLOW_WRAP); }
#line 1541 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 20: /* interp ::= NONE */
#line 98 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setInterp(ceammc::GRAIN_INTERP_NONE); }
#line 1546 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 21: /* interp ::= LINEAR */
#line 99 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setInterp(ceammc::GRAIN_INTERP_LINEAR); }
#line 1551 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 22: /* interp ::= CUBIC */
#line 100 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setInterp(ceammc::GRAIN_INTERP_CUBIC); }
#line 1556 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 23: /* mode ::= MODE NONE */
#line 102 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanMode(ceammc::GRAIN_PAN_NONE); }
#line 1561 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 24: /* mode ::= MODE LINEAR */
#line 103 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanMode(ceammc::GRAIN_PAN_LINEAR); }
#line 1566 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 25: /* mode ::= MODE FN_SQRT */
#line 104 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setPanMode(ceammc::GRAIN_PAN_SQRT); }
#line 1571 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 26: /* waveform1 ::= SIN */
#line 106 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0 = ceammc::GRAIN_MOD_SIN; }
#line 1576 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 27: /* waveform1 ::= SAW */
#line 107 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0 = ceammc::GRAIN_MOD_SAW; }
#line 1581 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 28: /* waveform1 ::= TRI */
#line 108 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0 = ceammc::GRAIN_MOD_TRI; }
#line 1586 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 29: /* waveform1 ::= SQR */
#line 109 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[0].minor.yy0 = ceammc::GRAIN_MOD_SQR; }
#line 1591 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 30: /* modulate ::= expr DOTS expr waveform1 OPENP expr CLOSEP */
#line 112 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setModulation(yymsp[-6].minor.yy0.val, yymsp[-4].minor.yy0.val, (ceammc::GrainModulation)yymsp[-3].minor.yy0.val, yymsp[-1].minor.yy0.val); }
#line 1596 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 31: /* modulate ::= NONE */
#line 113 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setModulation(0, 0, ceammc::GRAIN_MOD_NONE, 0); }
#line 1601 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 32: /* vars ::= CONST_AMP */
#line 116 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST0); }
#line 1606 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 33: /* vars ::= CONST_AT */
#line 117 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST1); }
#line 1611 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 34: /* vars ::= CONST_LEN */
#line 118 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST2); }
#line 1616 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 35: /* vars ::= CONST_PAN */
#line 119 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST3); }
#line 1621 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 36: /* vars ::= CONST_SPEED */
#line 120 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST4); }
#line 1626 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 37: /* vars ::= CONST_TIME_BEFORE */
#line 121 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST5); }
#line 1631 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 38: /* vars ::= CONST_TIME_AFTER */
#line 122 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST13); }
#line 1636 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 39: /* vars ::= CONST_SR */
#line 124 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST6); }
#line 1641 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 40: /* vars ::= CONST_BS */
#line 125 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST7); }
#line 1646 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 41: /* vars ::= CONST_ASIZE */
#line 126 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST8); }
#line 1651 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 42: /* vars ::= CONST_NITER */
#line 127 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST9); }
#line 1656 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 43: /* vars ::= CONST_NBLOCK */
#line 128 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST10); }
#line 1661 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 44: /* vars ::= CONST_NSAMP */
#line 129 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST11); }
#line 1666 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 45: /* vars ::= CONST_GIDX */
#line 130 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CONST12); }
#line 1671 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 46: /* assign ::= ASSIGN_ADD */
#line 132 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setAssignType(ceammc::BC_ASSIGN_ADD); }
#line 1676 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 47: /* assign ::= ASSIGN_SUB */
#line 133 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setAssignType(ceammc::BC_ASSIGN_SUB); }
#line 1681 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 48: /* assign ::= ASSIGN_MUL */
#line 134 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setAssignType(ceammc::BC_ASSIGN_MUL); }
#line 1686 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 49: /* assign ::= ASSIGN_SET */
#line 135 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->setAssignType(ceammc::BC_ASSIGN_SET); }
#line 1691 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 50: /* expr ::= FN_ABS OPENP expr CLOSEP */
#line 141 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ABS); }
#line 1696 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 51: /* expr ::= FN_SQRT OPENP expr CLOSEP */
#line 142 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_SQRT); }
#line 1701 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 52: /* expr ::= SIN OPENP expr CLOSEP */
#line 143 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_SIN); }
#line 1706 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 53: /* expr ::= FN_COS OPENP expr CLOSEP */
#line 144 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_COS); }
#line 1711 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 54: /* expr ::= FN_TAN OPENP expr CLOSEP */
#line 145 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_TAN); }
#line 1716 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 55: /* expr ::= FN_ACOS OPENP expr CLOSEP */
#line 146 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ACOS); }
#line 1721 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 56: /* expr ::= FN_ASIN OPENP expr CLOSEP */
#line 147 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ASIN); }
#line 1726 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 57: /* expr ::= FN_ATAN OPENP expr CLOSEP */
#line 148 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ATAN); }
#line 1731 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 58: /* expr ::= FN_CEIL OPENP expr CLOSEP */
#line 149 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CEIL); }
#line 1736 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 59: /* expr ::= FN_FLOOR OPENP expr CLOSEP */
#line 150 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_FLOOR); }
#line 1741 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 60: /* expr ::= FN_ROUND OPENP expr CLOSEP */
#line 151 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ROUND); }
#line 1746 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 61: /* expr ::= FN_LOG OPENP expr CLOSEP */
#line 152 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_LOG); }
#line 1751 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 62: /* expr ::= FN_LOG10 OPENP expr CLOSEP */
#line 153 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_LOG10); }
#line 1756 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 63: /* expr ::= FN_LOG2 OPENP expr CLOSEP */
#line 154 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_LOG2); }
#line 1761 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 64: /* expr ::= FN_FRAC OPENP expr CLOSEP */
#line 155 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_FRAC); }
#line 1766 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 65: /* expr ::= WRAP OPENP expr CLOSEP */
#line 157 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_WRAP0); }
#line 1771 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 66: /* expr ::= WRAP OPENP expr COMMA expr CLOSEP */
#line 159 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_WRAP1); }
#line 1776 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 67: /* expr ::= WRAP OPENP expr COMMA expr COMMA expr CLOSEP */
#line 161 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_WRAP2); }
#line 1781 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 68: /* expr ::= FN_URAND OPENP CLOSEP */
#line 163 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_URAND0); }
#line 1786 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 69: /* expr ::= FN_URAND OPENP expr CLOSEP */
#line 164 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_URAND1); }
#line 1791 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 70: /* expr ::= FN_URAND OPENP expr COMMA expr CLOSEP */
#line 166 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_URAND2); }
#line 1796 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 71: /* number ::= DOUBLE */
      case 85: /* expr ::= DOUBLE */ yytestcase(yyruleno==85);
#line 168 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yylhsminor.yy0 = yymsp[0].minor.yy0; p->bcPushValue(yymsp[0].minor.yy0.val); }
#line 1802 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 72: /* number ::= MINUS DOUBLE */
      case 86: /* expr ::= MINUS DOUBLE */ yytestcase(yyruleno==86);
#line 169 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ yymsp[-1].minor.yy0.val = -yymsp[0].minor.yy0.val; p->bcPushValue(-yymsp[0].minor.yy0.val); }
#line 1809 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 73: /* num_vargs ::= num_vargs COMMA number */
      case 74: /* num_vargs ::= number */ yytestcase(yyruleno==74);
#line 171 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcVarArg(); }
#line 1815 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 75: /* expr ::= CHOICE OPENP num_vargs CLOSEP */
#line 174 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushVarArgs(); p->bcPushCode(ceammc::OP_CHOICE); }
#line 1820 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 76: /* expr ::= FOLD OPENP expr CLOSEP */
#line 176 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_FOLD0); }
#line 1825 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 77: /* expr ::= FOLD OPENP expr COMMA expr CLOSEP */
#line 178 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_FOLD1); }
#line 1830 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 78: /* expr ::= CLIP OPENP expr COMMA expr COMMA expr CLOSEP */
#line 182 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_CLIP); }
#line 1835 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 79: /* expr ::= expr PLUS expr */
#line 185 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_ADD); }
#line 1840 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 80: /* expr ::= expr MINUS expr */
#line 186 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_SUB); }
#line 1845 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 81: /* expr ::= expr TIMES expr */
#line 187 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_MUL); }
#line 1850 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 82: /* expr ::= expr DIVIDE expr */
#line 188 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_DIV); }
#line 1855 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 83: /* expr ::= expr POW expr */
#line 189 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_POW); }
#line 1860 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 84: /* expr ::= expr MOD expr */
#line 190 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushCode(ceammc::OP_MOD); }
#line 1865 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 87: /* expr ::= DOUBLE SAMP */
#line 193 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushValue(yymsp[-1].minor.yy0.val); }
#line 1870 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 88: /* expr ::= DOUBLE MSEC */
#line 194 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushValue((sys_getsr() / 1000.0) * yymsp[-1].minor.yy0.val); }
#line 1875 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      case 89: /* expr ::= DOUBLE SEC */
#line 195 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
{ p->bcPushValue(sys_getsr() * yymsp[-1].minor.yy0.val); }
#line 1880 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
        break;
      default:
      /* (90) program ::= prop_list */ yytestcase(yyruleno==90);
      /* (91) ondone ::= */ yytestcase(yyruleno==91);
      /* (92) prop_pan ::= PROP_PAN overflow */ yytestcase(yyruleno==92);
      /* (93) prop_pan ::= PROP_PAN mode */ yytestcase(yyruleno==93);
      /* (94) prop_expr ::= prop_pan (OPTIMIZED OUT) */ assert(yyruleno!=94);
      /* (95) prop_expr ::= prop_tag (OPTIMIZED OUT) */ assert(yyruleno!=95);
      /* (96) prop_expr ::= PROP_INTERP interp */ yytestcase(yyruleno==96);
      /* (97) prop_expr ::= prop MODULATE modulate */ yytestcase(yyruleno==97);
      /* (98) prop_list ::= prop_list prop_expr */ yytestcase(yyruleno==98);
      /* (99) prop_list ::= prop_expr (OPTIMIZED OUT) */ assert(yyruleno!=99);
      /* (100) assign ::= */ yytestcase(yyruleno==100);
      /* (101) expr ::= vars (OPTIMIZED OUT) */ assert(yyruleno!=101);
      /* (102) expr ::= MINUS vars */ yytestcase(yyruleno==102);
      /* (103) expr ::= OPENP expr CLOSEP */ yytestcase(yyruleno==103);
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  parse_grain_exprARG_FETCH
  parse_grain_exprCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
#line 35 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"

    p->setErrorMsg("parse failure");
#line 1941 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
/************ End %parse_failure code *****************************************/
  parse_grain_exprARG_STORE /* Suppress warning about unused %extra_argument variable */
  parse_grain_exprCTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  parse_grain_exprTOKENTYPE yyminor         /* The minor type of the error token */
){
  parse_grain_exprARG_FETCH
  parse_grain_exprCTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 22 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"

    p->setErrorMsg("syntax error");
    const int N = sizeof(yyTokenName) / sizeof(yyTokenName[0]);
    for (int i = 0; i < N; i++) {
        int a = yy_find_shift_action((YYCODETYPE)i, yypParser->yytos->stateno);
        if (a < YYNSTATE + YYNRULE) {
            std::cerr << "possible token: " << yyTokenName[i] << "\n";
        }
    }
#line 1970 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
/************ End %syntax_error code ******************************************/
  parse_grain_exprARG_STORE /* Suppress warning about unused %extra_argument variable */
  parse_grain_exprCTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  parse_grain_exprARG_FETCH
  parse_grain_exprCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
#line 33 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.y"
 
#line 1998 "/Users/serge/work/music/pure-data/ceammc/ext/src/array/grain_expr.c"
/*********** End %parse_accept code *******************************************/
  parse_grain_exprARG_STORE /* Suppress warning about unused %extra_argument variable */
  parse_grain_exprCTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "parse_grain_exprAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void parse_grain_expr(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  parse_grain_exprTOKENTYPE yyminor       /* The value for the token */
  parse_grain_exprARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  parse_grain_exprCTX_FETCH
  parse_grain_exprARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#ifndef NDEBUG
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  while(1){ /* Exit by "break" */
    assert( yypParser->yytos>=yypParser->yystack );
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action((YYCODETYPE)yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      unsigned int yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
      assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );
#ifndef NDEBUG
      if( yyTraceFILE ){
        int yysize = yyRuleInfoNRhs[yyruleno];
        if( yysize ){
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
            yyTracePrompt,
            yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action",
            yypParser->yytos[yysize].stateno);
        }else{
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
            yyTracePrompt, yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action");
        }
      }
#endif /* NDEBUG */

      /* Check that the stack is large enough to grow by a single entry
      ** if the RHS of the rule is empty.  This ensures that there is room
      ** enough on the stack to push the LHS value */
      if( yyRuleInfoNRhs[yyruleno]==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
        if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
          yypParser->yyhwm++;
          assert( yypParser->yyhwm ==
                  (int)(yypParser->yytos - yypParser->yystack));
        }
#endif
#if YYSTACKDEPTH>0 
        if( yypParser->yytos>=yypParser->yystackEnd ){
          yyStackOverflow(yypParser);
          break;
        }
#else
        if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
          if( yyGrowStack(yypParser) ){
            yyStackOverflow(yypParser);
            break;
          }
        }
#endif
      }
      yyact = yy_reduce(yypParser,yyruleno,yymajor,yyminor parse_grain_exprCTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,(YYCODETYPE)yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) > YY_MAX_SHIFTREDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
int parse_grain_exprFallback(int iToken){
#ifdef YYFALLBACK
  assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );
  return yyFallback[iToken];
#else
  (void)iToken;
  return 0;
#endif
}
