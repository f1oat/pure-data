#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 matrix~;
#X text 175 525 signal routing matrix;
#X obj 30 552 metro.pattern;
#X text 175 552 metro with rhythmic patterns;
#X obj 30 579 metro.seq;
#X text 175 579 metro sequencer;
#X obj 30 606 mix~;
#X text 175 606 multislot signal mixer;
#X obj 30 633 radio;
#X text 175 633 float index to outlet values as radio switch;
#X obj 30 660 window;
#X text 175 660 returns window value by given window position;
#X obj 30 687 xfade2~;
#X text 175 687 multi stereo-signal crossfade;
#X obj 30 714 xfade~;
#X text 175 714 multi signal crossfade;
#X obj 20 741 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 782 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 793 array.p2s;
#X text 175 793 convert array phase [0\..1] to sample position;
#X obj 30 820 array.s2p;
#X text 175 820 convert array sample position to relative phase
position [0\..1];
#X obj 30 857 conv.amp2dbfs;
#X text 175 857 convert from amplitude to decibel full scale;
#X obj 30 884 conv.bpm2hz;
#X text 175 884 converts BPM to frequency in herz;
#X obj 30 911 conv.bpm2ms;
#X text 175 911 convert frequency in BPM to period in milliseconds;
#X obj 30 938 conv.bpm2sec;
#X text 175 938 convert frequency in BPM to period in seconds;
#X obj 30 965 conv.cc2amp;
#X text 175 965 convert from MIDI Control Change range;
#X obj 30 992 conv.dbfs2amp;
#X text 175 992 convert decibel full scale to amplitude;
#X obj 30 1019 conv.lin2curve;
#X text 175 1019 map linear to exponential range with 0 allowed.;
#X obj 30 1046 conv.lin2exp;
#X text 175 1046 maps linear range to exponential range;
#X obj 30 1073 conv.lin2lin;
#X text 175 1073 convert from one linear range to another;
#X obj 30 1100 conv.midi2freq;
#X text 175 1100 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1137 conv.pitch2midi;
#X text 175 1137 converts symbol pitch name to MIDI note number;
#X obj 30 1164 conv.samp2sec;
#X text 175 1164 convert samples to time according to samplerate;
#X obj 30 1191 conv.sec2samp;
#X text 175 1191 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1228 conv.sec2str;
#X text 175 1228 converts float time in seconds to formated symbol (or
string);
#X obj 30 1265 conv.str2sec;
#X text 175 1265 converts formatted time to float value in seconds;
#X obj 20 1292 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1333 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1344 data.dict;
#X text 175 1344 dictionary container: store values by key;
#X obj 30 1371 data.fifo;
#X text 175 1371 First-In-First-Out (FIFO) queue data container;
#X obj 30 1398 data.float;
#X text 175 1398 robust float object;
#X obj 30 1425 data.int;
#X text 175 1425 robust int object;
#X obj 30 1452 data.list;
#X text 175 1452 list container;
#X obj 30 1479 data.mlist;
#X text 175 1479 multidimensional list container;
#X obj 30 1506 data.set;
#X text 175 1506 container that store unique elements;
#X obj 30 1533 data.set2list;
#X text 175 1533 converts set to list;
#X obj 30 1560 dict.contains;
#X text 175 1560 predicate to check dict contains key;
#X obj 30 1587 dict.get;
#X text 175 1587 on input dict outputs value to corresponding key
outlet;
#X obj 30 1614 dict.keys;
#X text 175 1614 get list of dict keys;
#X obj 30 1641 dict.size;
#X text 175 1641 dictionary size;
#X obj 30 1668 dict.values;
#X text 175 1668 dictionary values as mlist;
#X obj 30 1695 mlist.flatten;
#X text 175 1695 flatten nested mlist;
#X obj 30 1722 set.contains;
#X text 175 1722 check if specified element is in set;
#X obj 30 1749 set.diff;
#X text 175 1749 difference between two sets;
#X obj 30 1776 set.equal;
#X text 175 1776 checks if two sets are equal (contains same
elements);
#X obj 30 1803 set.intersect;
#X text 175 1803 output intersection of given sets;
#X obj 30 1830 set.size;
#X text 175 1830 get number of elements in set;
#X obj 30 1857 set.symdiff;
#X text 175 1857 symmetric difference between two sets;
#X obj 30 1884 set.union;
#X text 175 1884 output union of given sets;
#X obj 20 1911 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1952 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1963 dyn.comp2~;
#X text 175 1963 stereo dynamic range compressor;
#X obj 30 1990 dyn.comp~;
#X text 175 1990 mono dynamic range compressors;
#X obj 30 2017 dyn.gate2~;
#X text 175 2017 stereo signal gate;
#X obj 30 2044 dyn.gate~;
#X text 175 2044 mono signal gate;
#X obj 30 2071 dyn.limit2~;
#X text 175 2071 stereo 1176LN Peak Limiter;
#X obj 30 2098 dyn.limit~;
#X text 175 2098 mono 1176LN Peak Limiter;
#X obj 30 2125 dyn.softclip~;
#X text 175 2125 soft signal clip;
#X obj 20 2152 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2204 env.adsr~;
#X text 175 2204 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2231 env.ar~;
#X text 175 2231 Attack/Release envelope generator;
#X obj 30 2258 env.asr~;
#X text 175 2258 Attack/Sustain/Release envelope generator;
#X obj 30 2285 env.concat;
#X text 175 2285 Envelope concatenation;
#X obj 30 2312 env.follow~;
#X text 175 2312 Envelope follower with independent attack and release
times.;
#X obj 30 2349 env.mix;
#X text 175 2349 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2386 env.smooth~;
#X text 175 2386 An envelope with an exponential attack and release;
#X obj 30 2413 env.tscale;
#X text 175 2413 Envelope time-scale;
#X obj 30 2440 env.tshift;
#X text 175 2440 Envelope time-shift (horizontal);
#X obj 30 2467 env.vscale;
#X text 175 2467 Envelope value-scale;
#X obj 30 2494 env2array;
#X text 175 2494 Renders envelope to specified array;
#X obj 30 2521 env2vline;
#X text 175 2521 Converts envelope to bunch of vline messages;
#X obj 30 2548 envelope;
#X text 175 2548 Envelope data type;
#X obj 30 2575 vline2env;
#X text 175 2575 Converts vline messages to env;
#X obj 20 2602 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2643 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2654 expand_env;
#X text 175 2654 Substitute enviroment variables in data stream;
#X obj 30 2681 flow.append;
#X text 175 2681 inject message into flow;
#X obj 30 2708 flow.change;
#X text 175 2708 rejects redundant input values;
#X obj 30 2735 flow.count;
#X text 175 2735 control flow event counter;
#X obj 30 2762 flow.demultiplex;
#X text 175 2762 control flow demultiplexer;
#X obj 30 2789 flow.demultiplex2~;
#X text 175 2789 audio stream stereo demultiplexer;
#X obj 30 2816 flow.demultiplex~;
#X text 175 2816 audio stream demultiplexer;
#X obj 30 2843 flow.gate;
#X text 175 2843 control flow gate. [spigot] analog;
#X obj 30 2870 flow.group;
#X text 175 2870 group data atoms in list of specified size;
#X obj 30 2897 flow.interval;
#X text 175 2897 measure time between flow events;
#X obj 30 2924 flow.less;
#X text 175 2924 numeric stream router \, like many [moses];
#X obj 30 2951 flow.less_eq;
#X text 175 2951 numeric stream router \, like many [moses];
#X obj 30 2978 flow.multiplex;
#X text 175 2978 control flow multiplexer;
#X obj 30 3005 flow.multiplex2~;
#X text 175 3005 audio stream stereo multiplexer;
#X obj 30 3032 flow.multiplex~;
#X text 175 3032 audio stream multiplexer;
#X obj 30 3059 flow.once;
#X text 175 3059 one message pass thru;
#X obj 30 3086 flow.pass;
#X text 175 3086 pass specified values;
#X obj 30 3113 flow.pass_if;
#X text 175 3113 pass values that accepted by predicate object;
#X obj 30 3140 flow.reject;
#X text 175 3140 reject specified values;
#X obj 30 3167 flow.reject_if;
#X text 175 3167 reject values by predicate;
#X obj 30 3194 flow.route;
#X text 175 3194 advanced message router;
#X obj 30 3221 flow.speedlim;
#X text 175 3221 control stream speed limiter;
#X obj 30 3248 flow.split;
#X text 175 3248 split data flow by external side-chain predicate;
#X obj 30 3275 flow.sync;
#X text 175 3275 bus with only hot inlets;
#X obj 30 3302 flow.tee~;
#X text 175 3302 separate audio and control streams;
#X obj 30 3329 replace;
#X text 175 3329 Replace atoms in data stream;
#X obj 20 3356 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3397 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3408 flt.biquad~;
#X text 175 3408 second order IIR filter.;
#X obj 30 3435 flt.bpf12~;
#X text 175 3435 Band-pass filter with 12/db per octave slope;
#X obj 30 3462 flt.bpf24~;
#X text 175 3462 Band-pass filter with 24/db per octave slope;
#X obj 30 3489 flt.c_bpf~;
#X text 175 3489 BPF coefficient calculator for biquad filter;
#X obj 30 3516 flt.c_highshelf~;
#X text 175 3516 Highshelf filter coefficient calculator for biquad;
#X obj 30 3543 flt.c_hpf~;
#X text 175 3543 HPF coefficient calculator for biquad filter;
#X obj 30 3570 flt.c_lowshelf~;
#X text 175 3570 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3597 flt.c_lpf~;
#X text 175 3597 LPF coefficient calculator for biquad filter;
#X obj 30 3624 flt.c_notch~;
#X text 175 3624 Band-reject coefficient calculator for biquad filter;
#X obj 30 3651 flt.c_peak~;
#X text 175 3651 Peaking equalizer calculator for biquad;
#X obj 30 3678 flt.dcblock2~;
#X text 175 3678 stereo DC blocker;
#X obj 30 3705 flt.dcblock~;
#X text 175 3705 mono DC blocker;
#X obj 30 3732 flt.eq10~;
#X text 175 3732 graphic 10 band equalizer;
#X obj 30 3759 flt.eq_peak_cq~;
#X text 175 3759 constant-Q second order peaking equalizer section;
#X obj 30 3786 flt.eq_peak~;
#X text 175 3786 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3837 flt.highshelf~;
#X text 175 3837 gain boost|cut above some frequency;
#X obj 30 3864 flt.hpf12~;
#X text 175 3864 High-pass filter with 12/db per octave slope;
#X obj 30 3891 flt.hpf24~;
#X text 175 3891 High-pass filter with 24/db per octave slope;
#X obj 30 3918 flt.lowshelf~;
#X text 175 3918 gain boost|cut below some frequency;
#X obj 30 3945 flt.lpf12~;
#X text 175 3945 Low-pass filter with 12/db per octave slope;
#X obj 30 3972 flt.lpf24~;
#X text 175 3972 Low-pass filter with 24/db per octave slope;
#X obj 30 3999 flt.moog_vcf~;
#X text 175 3999 Moog Voltage Controlled Filter;
#X obj 30 4026 flt.notch~;
#X text 175 4026 band-rejection filter;
#X obj 30 4053 flt.resonbp~;
#X text 175 4053 Simple resonant bandpass filter;
#X obj 20 4080 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4121 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4132 fx.bitdown~;
#X text 175 4132 bit downer and downsampler effect;
#X obj 30 4159 fx.chorus~;
#X text 175 4159 Chorus effect;
#X obj 30 4186 fx.distortion~;
#X text 175 4186 cubic nonlinearity distortion;
#X obj 30 4213 fx.drone_box~;
#X text 175 4213 mono sympathetic resonance generator;
#X obj 30 4240 fx.echo~;
#X text 175 4240 simple echo effect;
#X obj 30 4267 fx.flanger~;
#X text 175 4267 mono flanging effect;
#X obj 30 4294 fx.freeverb2~;
#X text 175 4294 freeverb2 - stereo version of freeverb;
#X obj 30 4321 fx.freeverb~;
#X text 175 4321 freeverb - common used open-source reverb;
#X obj 30 4348 fx.freqshift~;
#X text 175 4348 frequency shifter or single-sideband ring modulation;
#X obj 30 4375 fx.greyhole~;
#X text 175 4375 A complex echo-like effect;
#X obj 30 4402 fx.looper~;
#X text 175 4402 One track looper;
#X obj 30 4429 fx.pitchshift~;
#X text 175 4429 simple pitch shifter based on 2 delay lines;
#X obj 30 4456 fx.sdelay~;
#X text 175 4456 smooth delay with a feedback control;
#X obj 30 4483 fx.wahwah~;
#X text 175 4483 digitized CryBaby wah pedal;
#X obj 30 4510 fx.zita_rev1~;
#X text 175 4510 Zita stereo reverb;
#X obj 20 4537 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4578 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4589 global.dict;
#X text 175 4589 global named dict object;
#X obj 30 4616 global.float;
#X text 175 4616 global named float object;
#X obj 30 4643 global.int;
#X text 175 4643 global named integer object;
#X obj 30 4670 global.list;
#X text 175 4670 global named list object;
#X obj 30 4697 global.mlist;
#X text 175 4697 global named mlist object;
#X obj 30 4724 global.set;
#X text 175 4724 global named set object;
#X obj 20 4751 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 4792 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4803 hw.arduino;
#X text 175 4803 Arduino device;
#X obj 20 4830 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4871 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4882 lfo.+pulse~;
#X text 175 4882 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 4909 lfo.+saw~;
#X text 175 4909 Positive unit-amplitude low frequency saw wave;
#X obj 30 4936 lfo.+square~;
#X text 175 4936 Positive low frequency square wave;
#X obj 30 4963 lfo.+tri~;
#X text 175 4963 Positive unit-amplitude low frequency triangle wave;
#X obj 30 4990 lfo.impulse~;
#X text 175 4990 Unit-amplitude low-frequency impulse train;
#X obj 30 5017 lfo.pulse~;
#X text 175 5017 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5044 lfo.saw~;
#X text 175 5044 Full-range unit-amplitude low frequency saw;
#X obj 30 5071 lfo.square~;
#X text 175 5071 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5098 lfo.tri~;
#X text 175 5098 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5125 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5166 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5177 list.^at;
#X text 175 5177 on input index(es) outputs list element(s);
#X obj 30 5204 list.^contains;
#X text 175 5204 on input atom or list checks if specified list
contains it;
#X obj 30 5231 list.^search;
#X text 175 5231 on input atom returns it index in list;
#X obj 30 5258 list.all_of;
#X text 175 5258 checks if all list atoms accepted by predicate;
#X obj 30 5285 list.any_of;
#X text 175 5285 checks if at least one list element is accepted by
predicate;
#X obj 30 5322 list.append;
#X text 175 5322 append atom or list to the end of input list;
#X obj 30 5349 list.apply_to;
#X text 175 5349 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5386 list.at;
#X text 175 5386 on input list outputs element(s) at specified
index(es);
#X obj 30 5413 list.choice;
#X text 175 5413 returns random element from list;
#X obj 30 5440 list.contains;
#X text 175 5440 on input list checks if it contains specified
subsequence;
#X obj 30 5467 list.count;
#X text 175 5467 returns the number of items that equal to specified
value;
#X obj 30 5494 list.count_if;
#X text 175 5494 returns the number of items that satisfy to external
predicate.;
#X obj 30 5531 list.delta;
#X text 175 5531 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5568 list.distribution;
#X text 175 5568 list value distribution;
#X obj 30 5595 list.do;
#X text 175 5595 iterate and modify list contents via side-chain;
#X obj 30 5622 list.each;
#X text 175 5622 maps each list value via external object(s);
#X obj 30 5649 list.enumerate;
#X text 175 5649 enumerates input list;
#X obj 30 5676 list.equal;
#X text 175 5676 checks if given lists are equal;
#X obj 30 5703 list.first;
#X text 175 5703 returns first list element;
#X obj 30 5730 list.gen;
#X text 175 5730 generates list of specified length via external
generator;
#X obj 30 5757 list.histogram;
#X text 175 5757 outputs distribution histogram;
#X obj 30 5784 list.insert;
#X text 175 5784 insert atom or list to the specified position of
input list;
#X obj 30 5811 list.integrator;
#X text 175 5811 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 5848 list.last;
#X text 175 5848 returns last list element;
#X obj 30 5875 list.length;
#X text 175 5875 returns the number of atoms in the list;
#X obj 30 5902 list.max;
#X text 175 5902 returns largest element in the list;
#X obj 30 5929 list.mean;
#X text 175 5929 calculates average of list of floats;
#X obj 30 5956 list.min;
#X text 175 5956 returns smallest element in the list;
#X obj 30 5983 list.none_of;
#X text 175 5983 checks if none of list atoms is accepted by
predicate;
#X obj 30 6010 list.normalize;
#X text 175 6010 normalizes float list values to get their sum = 1.0;
#X obj 30 6037 list.pass_if;
#X text 175 6037 leave only elements accepted by predicate;
#X obj 30 6064 list.prepend;
#X text 175 6064 prepend atom or list before input list;
#X obj 30 6091 list.product;
#X text 175 6091 calculates product of floats in list;
#X obj 30 6118 list.range;
#X text 175 6118 returns list smallest and largest value;
#X obj 30 6145 list.reduce;
#X text 175 6145 apply function of two arguments cumulatively to the
list;
#X obj 30 6172 list.remove;
#X text 175 6172 on input list remove element(s) at specified
positions;
#X obj 30 6199 list.remove_if;
#X text 175 6199 remove elements by predicate;
#X obj 30 6226 list.repack;
#X text 175 6226 repack input list to specified size;
#X obj 30 6253 list.repeat;
#X text 175 6253 creates new list by repeating given list specified
times;
#X obj 30 6280 list.resize;
#X text 175 6280 changes list size;
#X obj 30 6307 list.reverse;
#X text 175 6307 reverses the order of the elements in the list;
#X obj 30 6334 list.rldecode;
#X text 175 6334 Run-length list decoder (RLE);
#X obj 30 6361 list.rlencode;
#X text 175 6361 RLE (run-length encoding) for lists;
#X obj 30 6388 list.rotate;
#X text 175 6388 rotates list;
#X obj 30 6415 list.route;
#X text 175 6415 acts like [route] but for lists;
#X obj 30 6442 list.search;
#X text 175 6442 search specified items in input list;
#X obj 30 6469 list.separate;
#X text 175 6469 sends list elements one by one separately;
#X obj 30 6496 list.seq;
#X text 175 6496 numeric sequence list generator;
#X obj 30 6523 list.set;
#X text 175 6523 on input list set value at specified position;
#X obj 30 6550 list.shift;
#X text 175 6550 shifts the contents of the list with linear
interpolation;
#X obj 30 6577 list.shuffle;
#X text 175 6577 randomly rearranges elements in list;
#X obj 30 6604 list.slice;
#X text 175 6604 extract sublist;
#X obj 30 6631 list.sort;
#X text 175 6631 sorts list values by ascending order;
#X obj 30 6658 list.sort_with;
#X text 175 6658 sort list with user defined side-chain;
#X obj 30 6685 list.split;
#X text 175 6685 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 6722 list.stretch;
#X text 175 6722 stretches list - chenges its size with linear
interpolation.;
#X obj 30 6759 list.sum;
#X text 175 6759 calculates sum of floats in list;
#X obj 30 6786 list.unique;
#X text 175 6786 removes duplicates from input list;
#X obj 30 6813 list.unpack;
#X text 175 6813 unpack list elements to separate outlets;
#X obj 30 6840 list.unzip;
#X text 175 6840 splits list to N lists \, each to separate output;
#X obj 30 6867 list.walk;
#X text 175 6867 Walks thru the list;
#X obj 30 6894 list.zip;
#X text 175 6894 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 6945 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 6986 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6997 live.capture~;
#X text 175 6997 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7034 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7075 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7086 local.dict;
#X text 175 7086 local named dict object;
#X obj 30 7113 local.float;
#X text 175 7113 canvas-scoped named float variable;
#X obj 30 7140 local.int;
#X text 175 7140 canvas-scoped named integer variable;
#X obj 30 7167 local.list;
#X text 175 7167 local named list object;
#X obj 30 7194 local.mlist;
#X text 175 7194 local named mlist object;
#X obj 30 7221 local.set;
#X text 175 7221 local named set object;
#X obj 20 7248 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7289 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7300 math.abs;
#X text 175 7300 absolute value function;
#X obj 30 7327 math.acos;
#X text 175 7327 arc cosine function;
#X obj 30 7354 math.acosh;
#X text 175 7354 inverse hyperbolic cosine function;
#X obj 30 7381 math.and;
#X text 175 7381 operation AND for multiple arguments;
#X obj 30 7408 math.approx;
#X text 175 7408 check if input value approximately equal to pattern;
#X obj 30 7435 math.asin;
#X text 175 7435 arc sine function;
#X obj 30 7462 math.asinh;
#X text 175 7462 inverse hyperbolic sine function;
#X obj 30 7489 math.atan;
#X text 175 7489 arc tangent function;
#X obj 30 7516 math.atanh;
#X text 175 7516 inverse hyperbolic tangent function;
#X obj 30 7543 math.cbrt;
#X text 175 7543 cube root function;
#X obj 30 7570 math.ceil;
#X text 175 7570 round to smallest integral value not less than input
value;
#X obj 30 7597 math.cos;
#X text 175 7597 cosine function;
#X obj 30 7624 math.cosh;
#X text 175 7624 hyperbolic cosine function;
#X obj 30 7651 math.div;
#X text 175 7651 division (on lists too);
#X obj 30 7678 math.e;
#X text 175 7678 mathematical constant \, base of the natural
logarithm;
#X obj 30 7705 math.exp;
#X text 175 7705 exponential functions;
#X obj 30 7732 math.exp2;
#X text 175 7732 exponential functions;
#X obj 30 7759 math.expr;
#X text 175 7759 dynamic [expr];
#X obj 30 7786 math.floor;
#X text 175 7786 round to largest integral value not greater than x;
#X obj 30 7813 math.gcd;
#X text 175 7813 calculate greatest common divisor;
#X obj 30 7840 math.inf;
#X text 175 7840 infinity value that cannot be represented accurately;
#X obj 30 7867 math.lcm;
#X text 175 7867 calculate least common multiple;
#X obj 30 7894 math.log;
#X text 175 7894 logarithm functions;
#X obj 30 7921 math.log10;
#X text 175 7921 logarithm functions;
#X obj 30 7948 math.log2;
#X text 175 7948 logarithm functions;
#X obj 30 7975 math.mul;
#X text 175 7975 multiplication (on lists too);
#X obj 30 8002 math.nan;
#X text 175 8002 Not a Number \, unrepresentable value;
#X obj 30 8029 math.neg;
#X text 175 8029 negate function;
#X obj 30 8056 math.or;
#X text 175 8056 operation OR for multiple arguments;
#X obj 30 8083 math.pi;
#X text 175 8083 mathematical constant;
#X obj 30 8110 math.polyeval;
#X text 175 8110 evaluates the polynomial described by the
coefficients list;
#X obj 30 8137 math.reciprocal;
#X text 175 8137 calculate reciprocal number;
#X obj 30 8164 math.round;
#X text 175 8164 round to integral value \, regardless of rounding
direction;
#X obj 30 8191 math.round~;
#X text 175 8191 signal round;
#X obj 30 8218 math.sign;
#X text 175 8218 sign function;
#X obj 30 8245 math.sin;
#X text 175 8245 sine function;
#X obj 30 8272 math.sinh;
#X text 175 8272 hyperbolic sine function;
#X obj 30 8299 math.sqrt;
#X text 175 8299 square root function;
#X obj 30 8326 math.squared;
#X text 175 8326 value square;
#X obj 30 8353 math.tan;
#X text 175 8353 tangent function;
#X obj 30 8380 math.tanh;
#X text 175 8380 hyperbolic tangent function;
#X obj 30 8407 math.trunc;
#X text 175 8407 truncate to integer value;
#X obj 20 8434 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8475 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8486 midi.ctl2str;
#X text 175 8486 convert Standard MIDI Controllers number to name;
#X obj 30 8513 midi.event2ctl;
#X text 175 8513 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8540 midi.event2note;
#X text 175 8540 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8567 midi.event2prg;
#X text 175 8567 convert MidiEvent message to midi program change
value;
#X obj 30 8594 midi.file;
#X text 175 8594 standard midi file SMF reader and writer;
#X obj 30 8621 midi.key2str;
#X text 175 8621 convert key number to SPN name according to tonality;
#X obj 30 8648 midi.prg2str;
#X text 175 8648 convert GM Instrument number to name (string or
symbol);
#X obj 30 8675 midi.track;
#X text 175 8675 extract track from MidiFile;
#X obj 20 8702 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 8743 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8754 click~;
#X text 175 8754 Output single impulse on bang;
#X obj 30 8781 fluid~;
#X text 175 8781 FluidSynth SoundFont 2 player;
#X obj 30 8808 modplug~;
#X text 175 8808 MOD file player (using libmodplug);
#X obj 30 8835 speech.flite;
#X text 175 8835 render speech to array;
#X obj 20 8862 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 8903 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8914 msg;
#X text 175 8914 message constructor;
#X obj 30 8941 msg.after;
#X text 175 8941 send specified message after incoming message;
#X obj 30 8968 msg.onload;
#X text 175 8968 send message when patch loads;
#X obj 20 8995 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9036 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9047 net.host2ip;
#X text 175 9047 returns IP address by DNS name;
#X obj 20 9074 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9115 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9126 noise.crackle~;
#X text 175 9126 sparse noise generator;
#X obj 30 9153 noise.lfreq0~;
#X text 175 9153 sampled/held noise (piecewise constant);
#X obj 30 9180 noise.lfreq~;
#X text 175 9180 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9207 noise.pink~;
#X text 175 9207 Pink noise generator;
#X obj 30 9234 noise.white~;
#X text 175 9234 White noise generator;
#X obj 20 9261 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9302 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9313 osc.blit~;
#X text 175 9313 Bandlimited impulse train oscillator;
#X obj 30 9340 osc.impulse~;
#X text 175 9340 Bandlimited impulse train generator;
#X obj 30 9367 osc.pulse~;
#X text 175 9367 Bandlimited pulse train oscillator;
#X obj 30 9394 osc.saw4~;
#X text 175 9394 Bandlimited sawtooth wave;
#X obj 30 9421 osc.saw~;
#X text 175 9421 Alias-free sawtooth wave;
#X obj 30 9448 osc.sinfb~;
#X text 175 9448 Sine oscilator with feedback;
#X obj 30 9475 osc.sin~;
#X text 175 9475 Sine wave oscillator;
#X obj 30 9502 osc.square~;
#X text 175 9502 Bandlimited square wave oscillator;
#X obj 30 9529 osc.tri~;
#X text 175 9529 Bandlimited triangle wave oscillator;
#X obj 20 9556 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 9597 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9608 canvas.current;
#X text 175 9608 verbose information about current canvas;
#X obj 30 9635 canvas.top;
#X text 175 9635 verbose information about top-level canvas;
#X obj 30 9662 patch.args;
#X text 175 9662 Get patch or subpatch arguments;
#X obj 20 9689 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 9730 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9741 path.basename;
#X text 175 9741 outputs filename portion of pathname;
#X obj 30 9768 path.dirname;
#X text 175 9768 outputs directory portion of pathname;
#X obj 30 9795 path.exists;
#X text 175 9795 checks if given path exists;
#X obj 30 9822 path.lsdir;
#X text 175 9822 list directory contents;
#X obj 20 9849 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 9890 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9901 is_any;
#X text 175 9901 checks if input data has *any* type;
#X obj 30 9928 is_bang;
#X text 175 9928 checks if input data has *bang* type;
#X obj 30 9955 is_data;
#X text 175 9955 checks if input data has *data* type;
#X obj 30 9982 is_even;
#X text 175 9982 checks if input number is even;
#X obj 30 10009 is_file;
#X text 175 10009 checks if file exists and accessible;
#X obj 30 10036 is_float;
#X text 175 10036 checks if input data has *float* type;
#X obj 30 10063 is_list;
#X text 175 10063 checks if input data has *list* type;
#X obj 30 10090 is_odd;
#X text 175 10090 checks if input number is odd;
#X obj 30 10117 is_pointer;
#X text 175 10117 checks if input data has *pointer* type;
#X obj 30 10144 is_symbol;
#X text 175 10144 checks if input data has *symbol* type;
#X obj 20 10171 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10212 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10223 preset.float;
#X text 175 10223 load/store float preset;
#X obj 30 10250 preset.list;
#X text 175 10250 load/store symbol preset;
#X obj 30 10277 preset.storage;
#X text 175 10277 preset storage control;
#X obj 30 10304 preset.symbol;
#X text 175 10304 load/store symbol preset;
#X obj 20 10331 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10372 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10383 prop.get;
#X text 175 10383 Property extractor;
#X obj 30 10410 prop.get~;
#X text 175 10410 Property extractor from sound stream;
#X obj 30 10437 prop.set;
#X text 175 10437 Property injector;
#X obj 20 10464 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 10505 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10516 proto.firmata;
#X text 175 10516 Firmata Arduino protocol support;
#X obj 20 10543 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 10584 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10595 random.discrete;
#X text 175 10595 random weighted integers on interval [0 \, n);
#X obj 30 10622 random.float;
#X text 175 10622 random float generator in specified range;
#X obj 30 10649 random.gauss;
#X text 175 10649 gaussian random distribution;
#X obj 30 10676 random.int;
#X text 175 10676 Random integer generator in specified range;
#X obj 30 10703 random.linear;
#X text 175 10703 random linear distribution;
#X obj 30 10730 random.pw_const;
#X text 175 10730 piecewise constant random distribution;
#X obj 30 10757 random.pw_lin;
#X text 175 10757 piecewise linear random distribution;
#X obj 20 10784 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 10825 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10836 snd.file;
#X text 175 10836 Sound file loader on steroids;
#X obj 20 10863 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 10904 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10915 pan.cos~;
#X text 175 10915 two channel equal power sine/cosine panner;
#X obj 30 10942 pan.linsig~;
#X text 175 10942 two channel linear panner with signal control;
#X obj 30 10969 pan.lin~;
#X text 175 10969 two channel linear panner;
#X obj 30 10996 pan.spread~;
#X text 175 10996 spreads input channels across the stereo field;
#X obj 30 11023 pan.sqrt~;
#X text 175 11023 two channel equal power square root panner;
#X obj 30 11050 spat.pan4~;
#X text 175 11050 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11077 spat.pan8~;
#X text 175 11077 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11104 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11145 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11156 string;
#X text 175 11156 string constructor;
#X obj 30 11183 string.contains;
#X text 175 11183 checks if given string contains specified substring;
#X obj 30 11210 string.ends_with;
#X text 175 11210 checks if given string ends with specified suffix;
#X obj 30 11237 string.equal;
#X text 175 11237 check strings for equality;
#X obj 30 11264 string.format;
#X text 175 11264 formats string like printf.;
#X obj 30 11291 string.join;
#X text 175 11291 joins (concatenates) strings with separator;
#X obj 30 11318 string.length;
#X text 175 11318 number of characters in string (unicode supported);
#X obj 30 11345 string.remove;
#X text 175 11345 remove substring from input string;
#X obj 30 11372 string.replace;
#X text 175 11372 replace from one substring to another in input
string;
#X obj 30 11399 string.split;
#X text 175 11399 split string by separator;
#X obj 30 11426 string.starts_with;
#X text 175 11426 checks if given string starts with specified prefix;
#X obj 30 11453 string.substr;
#X text 175 11453 extract substring from input string;
#X obj 30 11480 string2symbol;
#X text 175 11480 converts string to symbol;
#X obj 20 11507 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 11548 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11559 symbol.equal;
#X text 175 11559 check symbols for equality;
#X obj 30 11586 symbol.length;
#X text 175 11586 number of characters in symbol (unicode supported);
#X obj 30 11613 symbol.num_compare;
#X text 175 11613 numeric symbol compare;
#X obj 20 11640 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 11681 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11692 synth.bee3~;
#X text 175 11692 Hammond-oid organ FM synthesis instrument;
#X obj 30 11719 synth.birds~;
#X text 175 11719 bird singing generator;
#X obj 30 11746 synth.church_bell~;
#X text 175 11746 generic church bell modal model;
#X obj 30 11773 synth.dubdub~;
#X text 175 11773 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 11810 synth.eguitar~;
#X text 175 11810 simple electric guitar model with steel strings;
#X obj 30 11837 synth.fgrain~;
#X text 175 11837 file granulator from STK;
#X obj 30 11864 synth.ks~;
#X text 175 11864 Karplus-Strong string;
#X obj 30 11891 synth.marimba~;
#X text 175 11891 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 11928 synth.rhodey~;
#X text 175 11928 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 11955 synth.risset_arp~;
#X text 175 11955 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 11982 synth.risset_tone~;
#X text 175 11982 Jean Claude Risset's endless glissando;
#X obj 30 12009 synth.shakers~;
#X text 175 12009 various percussion sounds from STK library;
#X obj 30 12036 synth.wurley~;
#X text 175 12036 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12063 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12104 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12115 system.cursor;
#X text 175 12115 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12152 system.getenv;
#X text 175 12152 Get system environment variables;
#X obj 30 12179 system.hostname;
#X text 175 12179 outputs system hostname;
#X obj 30 12206 system.memsize;
#X text 175 12206 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12243 system.memused;
#X text 175 12243 returns the process physical memory use - current
and peak;
#X obj 30 12270 system.screen_size;
#X text 175 12270 returns current screen size in pixels;
#X obj 30 12297 system.shell;
#X text 175 12297 run external command in separate process;
#X obj 20 12324 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12365 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12376 tl.bang;
#X text 175 12376 Timeline bang (with possible delay);
#X obj 30 12406 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12403 Timeline section;
#X obj 30 12426 tl.timeline;
#X text 175 12426 Timeline - event scheduler;
#X obj 30 12453 tl.toggle;
#X text 175 12453 Timeline bang;
#X obj 30 12480 tl.transport;
#X text 175 12480 Timeline transport control;
#X obj 20 12507 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 12548 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12562 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 12559 array view with cursor and selection;
#X obj 30 12585 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 12582 A bang... that's all;
#X obj 30 12608 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 12605 colorchooser widget;
#X obj 30 12631 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 12628 Display GUI object;
#X obj 30 12654 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 12651 GUI for turning DSP on/off;
#X obj 30 12677 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 12674 envelope editor widget;
#X obj 30 12700 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 12697 UI gain control;
#X obj 30 12723 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 12720 simple icon with button capabilities;
#X obj 30 12746 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 12743 value increment/decrement;
#X obj 30 12769 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 12766 keyboard widget;
#X obj 30 12792 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 12789 knob widget;
#X obj 30 12815 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 12812 simple label widget;
#X obj 30 12838 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 12835 Hyperlink widget;
#X obj 30 12861 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 12858 The matrix of toggles has you.;
#X obj 30 12884 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 12881 Dropdown menu;
#X obj 30 12907 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 12904 Shows peak and rms signal level;
#X obj 30 12930 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 12927 counterpart of the vanilla [nbx];
#X obj 30 12953 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 12950 counterpart of the vanilla [nbx] for signal;
#X obj 30 12976 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 12973 Preset manager;
#X obj 30 12999 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 12996 counterpart of the vanilla radio toggle;
#X obj 30 13022 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 13019 range slider;
#X obj 30 13045 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 13042 Scope GUI object;
#X obj 30 13068 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 13065 counterpart of the vanilla slider;
#X obj 30 13091 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 13088 2D slider widget;
#X obj 30 13114 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 13111 Multiple slider widget;
#X obj 30 13137 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 13134 Spectroscope GUI object;
#X obj 30 13160 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 13157 displays a list of text buttons or text toggles;
#X obj 30 13183 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13180 modern toggle widget;
#X obj 20 13203 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 13244 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13255 vector.distance;
#X text 175 13255 returns euclidean distance between two points;
#X obj 30 13282 vector.dot;
#X text 175 13282 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 13333 vector.length;
#X text 175 13333 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 13370 vector.normalize;
#X text 175 13370 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13397 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13397 version: v0.6 \, license: GPL3;
#X obj 20 13416 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;