#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.seq;
#X text 200 880 metro sequencer;
#X obj 30 907 mix~;
#X text 200 907 multislot signal mixer;
#X obj 30 934 obj.props;
#X text 200 934 property extractor;
#X obj 30 961 radio;
#X text 200 961 float index to outlet values as radio switch;
#X obj 30 988 window;
#X text 200 988 returns window value by given window position;
#X obj 30 1015 xfade2~;
#X text 200 1015 multi stereo-signal crossfade;
#X obj 30 1042 xfade~;
#X text 200 1042 multi signal crossfade;
#X obj 20 1069 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1110 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1121 array.p2s;
#X text 200 1121 convert array phase [0\..1] to sample position;
#X obj 30 1148 array.s2p;
#X text 200 1148 convert array sample position to relative phase position
[0\..1];
#X obj 30 1188 conv.amp2dbfs;
#X text 200 1188 convert from amplitude to decibel full scale;
#X obj 30 1215 conv.bpm2hz;
#X text 200 1215 converts BPM to frequency in herz;
#X obj 30 1242 conv.bpm2ms;
#X text 200 1242 convert frequency in BPM to period in milliseconds;
#X obj 30 1269 conv.bpm2sec;
#X text 200 1269 convert frequency in BPM to period in seconds;
#X obj 30 1296 conv.cc2amp;
#X text 200 1296 convert from MIDI Control Change range;
#X obj 30 1323 conv.dbfs2amp;
#X text 200 1323 convert decibel full scale to amplitude;
#X obj 30 1350 conv.lin2curve;
#X text 200 1350 map linear to exponential range with 0 allowed.;
#X obj 30 1377 conv.lin2exp;
#X text 200 1377 maps linear range to exponential range;
#X obj 30 1404 conv.lin2lin;
#X text 200 1404 convert from one linear range to another;
#X obj 30 1431 conv.list2props;
#X text 200 1431 converts list to series of property messages;
#X obj 30 1458 conv.midi2freq;
#X text 200 1458 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1498 conv.pitch2midi;
#X text 200 1498 converts symbol pitch name to MIDI note number;
#X obj 30 1525 conv.samp2sec;
#X text 200 1525 convert samples to time according to samplerate;
#X obj 30 1552 conv.sec2samp;
#X text 200 1552 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1592 conv.sec2str;
#X text 200 1592 converts float time in seconds to formated symbol
(or string);
#X obj 30 1619 conv.str2sec;
#X text 200 1619 converts formatted time to float value in seconds;
#X obj 20 1646 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1687 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1698 data.dict;
#X text 200 1698 dictionary container: store values by key;
#X obj 30 1725 data.fifo;
#X text 200 1725 First-In-First-Out (FIFO) queue data container;
#X obj 30 1752 data.float;
#X text 200 1752 robust float object;
#X obj 30 1779 data.int;
#X text 200 1779 robust int object;
#X obj 30 1806 data.list;
#X text 200 1806 list container;
#X obj 30 1833 data.mlist;
#X text 200 1833 multidimensional list container;
#X obj 30 1860 data.set;
#X text 200 1860 container that store unique elements;
#X obj 30 1887 data.set2list;
#X text 200 1887 converts set to list;
#X obj 30 1914 dict.contains;
#X text 200 1914 predicate to check dict contains key;
#X obj 30 1941 dict.each;
#X text 200 1941 map each value in dict;
#X obj 30 1968 dict.from_list;
#X text 200 1968 creates dictionary from list;
#X obj 30 1995 dict.get;
#X text 200 1995 on input dict outputs value to corresponding key outlet;
#X obj 30 2022 dict.keys;
#X text 200 2022 get list of dict keys;
#X obj 30 2049 dict.pass;
#X text 200 2049 passes specified keys in dict;
#X obj 30 2076 dict.reject;
#X text 200 2076 rejects specified keys from dict;
#X obj 30 2103 dict.size;
#X text 200 2103 dictionary size;
#X obj 30 2130 dict.to_list;
#X text 200 2130 converts dictionary to plain list;
#X obj 30 2157 dict.values;
#X text 200 2157 dictionary values as mlist;
#X obj 30 2184 mlist.flatten;
#X text 200 2184 flatten nested mlist;
#X obj 30 2211 set.contains;
#X text 200 2211 check if specified element is in set;
#X obj 30 2238 set.diff;
#X text 200 2238 difference between two sets;
#X obj 30 2265 set.equal;
#X text 200 2265 checks if two sets are equal (contains same elements);
#X obj 30 2292 set.intersect;
#X text 200 2292 output intersection of given sets;
#X obj 30 2319 set.size;
#X text 200 2319 get number of elements in set;
#X obj 30 2346 set.symdiff;
#X text 200 2346 symmetric difference between two sets;
#X obj 30 2373 set.union;
#X text 200 2373 output union of given sets;
#X obj 20 2400 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2441 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2452 dyn.comp2~;
#X text 200 2452 stereo dynamic range compressor;
#X obj 30 2479 dyn.comp~;
#X text 200 2479 mono dynamic range compressors;
#X obj 30 2506 dyn.gate2~;
#X text 200 2506 stereo signal gate;
#X obj 30 2533 dyn.gate~;
#X text 200 2533 mono signal gate;
#X obj 30 2560 dyn.limit2~;
#X text 200 2560 stereo 1176LN Peak Limiter;
#X obj 30 2587 dyn.limit~;
#X text 200 2587 mono 1176LN Peak Limiter;
#X obj 30 2614 dyn.softclip~;
#X text 200 2614 soft signal clip;
#X obj 20 2641 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2682 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2693 env.adsr~;
#X text 200 2693 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2720 env.ar~;
#X text 200 2720 Attack/Release envelope generator;
#X obj 30 2747 env.asr~;
#X text 200 2747 Attack/Sustain/Release envelope generator;
#X obj 30 2774 env.concat;
#X text 200 2774 Envelope concatenation;
#X obj 30 2801 env.follow~;
#X text 200 2801 Envelope follower with independent attack and release
times;
#X obj 30 2828 env.mix;
#X text 200 2828 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2868 env.smooth~;
#X text 200 2868 An envelope with an exponential attack and release;
#X obj 30 2895 env.tscale;
#X text 200 2895 Envelope time-scale;
#X obj 30 2922 env.tshift;
#X text 200 2922 Envelope time-shift (horizontal);
#X obj 30 2949 env.vscale;
#X text 200 2949 Envelope value-scale;
#X obj 30 2976 env2array;
#X text 200 2976 Renders envelope to specified array;
#X obj 30 3003 env2vline;
#X text 200 3003 Converts envelope to bunch of vline messages;
#X obj 30 3030 envelope;
#X text 200 3030 Envelope data type;
#X obj 30 3057 vline2env;
#X text 200 3057 Converts vline messages to env;
#X obj 20 3084 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3125 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3136 expand_env;
#X text 200 3136 Substitute enviroment variables in data stream;
#X obj 30 3163 flow.append;
#X text 200 3163 inject message into flow;
#X obj 30 3190 flow.change;
#X text 200 3190 rejects redundant input values;
#X obj 30 3217 flow.count;
#X text 200 3217 control flow event counter;
#X obj 30 3244 flow.demultiplex;
#X text 200 3244 control flow demultiplexer;
#X obj 30 3271 flow.demultiplex2~;
#X text 200 3271 audio stream stereo demultiplexer;
#X obj 30 3298 flow.demultiplex~;
#X text 200 3298 audio stream demultiplexer;
#X obj 30 3325 flow.gate;
#X text 200 3325 control flow gate. [spigot] analog;
#X obj 30 3352 flow.group;
#X text 200 3352 group data atoms in list of specified size;
#X obj 30 3379 flow.interval;
#X text 200 3379 measure time between flow events;
#X obj 30 3406 flow.less;
#X text 200 3406 numeric stream router \, like many [moses];
#X obj 30 3433 flow.less_eq;
#X text 200 3433 numeric stream router \, like many [moses];
#X obj 30 3460 flow.multiplex;
#X text 200 3460 control flow multiplexer;
#X obj 30 3487 flow.multiplex2~;
#X text 200 3487 audio stream stereo multiplexer;
#X obj 30 3514 flow.multiplex~;
#X text 200 3514 audio stream multiplexer;
#X obj 30 3541 flow.once;
#X text 200 3541 one message pass thru;
#X obj 30 3568 flow.pass;
#X text 200 3568 pass specified values;
#X obj 30 3595 flow.pass_if;
#X text 200 3595 pass values that accepted by predicate object;
#X obj 30 3622 flow.reject;
#X text 200 3622 reject specified values;
#X obj 30 3649 flow.reject_if;
#X text 200 3649 reject values by predicate;
#X obj 30 3676 flow.route;
#X text 200 3676 advanced message router;
#X obj 30 3703 flow.speedlim;
#X text 200 3703 control stream speed limiter;
#X obj 30 3730 flow.split;
#X text 200 3730 split data flow by external side-chain predicate;
#X obj 30 3757 flow.sync;
#X text 200 3757 bus with only hot inlets;
#X obj 30 3784 flow.tee~;
#X text 200 3784 separate audio and control streams;
#X obj 30 3811 replace;
#X text 200 3811 Replace atoms in data stream;
#X obj 20 3838 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3879 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3890 flt.biquad~;
#X text 200 3890 second order IIR filter.;
#X obj 30 3917 flt.bpf12~;
#X text 200 3917 Band-pass filter with 12/db per octave slope;
#X obj 30 3944 flt.bpf24~;
#X text 200 3944 Band-pass filter with 24/db per octave slope;
#X obj 30 3971 flt.c_bpf~;
#X text 200 3971 BPF coefficient calculator for biquad filter;
#X obj 30 3998 flt.c_highshelf~;
#X text 200 3998 Highshelf filter coefficient calculator for biquad;
#X obj 30 4025 flt.c_hpf~;
#X text 200 4025 HPF coefficient calculator for biquad filter;
#X obj 30 4052 flt.c_lowshelf~;
#X text 200 4052 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4079 flt.c_lpf~;
#X text 200 4079 LPF coefficient calculator for biquad filter;
#X obj 30 4106 flt.c_notch~;
#X text 200 4106 Band-reject coefficient calculator for biquad filter;
#X obj 30 4133 flt.c_peak~;
#X text 200 4133 Peaking equalizer calculator for biquad;
#X obj 30 4160 flt.dcblock2~;
#X text 200 4160 stereo DC blocker;
#X obj 30 4187 flt.dcblock~;
#X text 200 4187 mono DC blocker;
#X obj 30 4214 flt.eq10~;
#X text 200 4214 graphic 10 band equalizer;
#X obj 30 4241 flt.eq_peak_cq~;
#X text 200 4241 constant-Q second order peaking equalizer section;
#X obj 30 4268 flt.eq_peak~;
#X text 200 4268 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4323 flt.highshelf~;
#X text 200 4323 gain boost|cut above some frequency;
#X obj 30 4350 flt.hpf12~;
#X text 200 4350 High-pass filter with 12/db per octave slope;
#X obj 30 4377 flt.hpf24~;
#X text 200 4377 High-pass filter with 24/db per octave slope;
#X obj 30 4404 flt.lowshelf~;
#X text 200 4404 gain boost|cut below some frequency;
#X obj 30 4431 flt.lpf12~;
#X text 200 4431 Low-pass filter with 12/db per octave slope;
#X obj 30 4458 flt.lpf24~;
#X text 200 4458 Low-pass filter with 24/db per octave slope;
#X obj 30 4485 flt.median;
#X text 200 4485 Median control flow filter;
#X obj 30 4512 flt.moog_vcf~;
#X text 200 4512 Moog Voltage Controlled Filter;
#X obj 30 4539 flt.notch~;
#X text 200 4539 band-rejection filter;
#X obj 30 4566 flt.resonbp~;
#X text 200 4566 Simple resonant bandpass filter;
#X obj 20 4593 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4634 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4645 fx.bitdown~;
#X text 200 4645 bit downer and downsampler effect;
#X obj 30 4672 fx.chorus~;
#X text 200 4672 Chorus effect;
#X obj 30 4699 fx.distortion~;
#X text 200 4699 cubic nonlinearity distortion;
#X obj 30 4726 fx.drive~;
#X text 200 4726 Guitarix drive effect;
#X obj 30 4753 fx.drone_box~;
#X text 200 4753 mono sympathetic resonance generator;
#X obj 30 4780 fx.echo~;
#X text 200 4780 simple echo effect;
#X obj 30 4807 fx.flanger~;
#X text 200 4807 mono flanging effect;
#X obj 30 4834 fx.freeverb2~;
#X text 200 4834 freeverb2 - stereo version of freeverb;
#X obj 30 4861 fx.freeverb~;
#X text 200 4861 freeverb - common used open-source reverb;
#X obj 30 4888 fx.freqshift~;
#X text 200 4888 frequency shifter or single-sideband ring modulation;
#X obj 30 4915 fx.granulator~;
#X text 200 4915 simple input stream granulator;
#X obj 30 4942 fx.greyhole~;
#X text 200 4942 A complex echo-like effect;
#X obj 30 4969 fx.looper~;
#X text 200 4969 One track looper;
#X obj 30 4996 fx.pitchshift~;
#X text 200 4996 simple pitch shifter based on 2 delay lines;
#X obj 30 5023 fx.sdelay~;
#X text 200 5023 smooth delay with a feedback control;
#X obj 30 5050 fx.vocoder~;
#X text 200 5050 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5090 fx.wahwah~;
#X text 200 5090 digitized CryBaby wah pedal;
#X obj 30 5117 fx.zita_rev1~;
#X text 200 5117 Zita stereo reverb;
#X obj 20 5144 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5185 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5196 global.dict;
#X text 200 5196 global named dict object;
#X obj 30 5223 global.float;
#X text 200 5223 global named float object;
#X obj 30 5250 global.int;
#X text 200 5250 global named integer object;
#X obj 30 5277 global.list;
#X text 200 5277 global named list object;
#X obj 30 5304 global.mlist;
#X text 200 5304 global named mlist object;
#X obj 30 5331 global.set;
#X text 200 5331 global named set object;
#X obj 20 5358 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5399 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5410 hw.apple_smc;
#X text 200 5410 query the system management control in Apples;
#X obj 30 5437 hw.apple_sms;
#X text 200 5437 query the sudden motion sensor in Apples;
#X obj 30 5464 hw.arduino;
#X text 200 5464 Arduino device;
#X obj 30 5491 hw.cpu_temp;
#X text 200 5491 get CPU temperature;
#X obj 30 5518 hw.display;
#X text 200 5518 get/set display properties;
#X obj 30 5545 hw.kbd_light;
#X text 200 5545 Get/set keyboard light on some devices;
#X obj 20 5572 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5613 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5624 lfo.+pulse~;
#X text 200 5624 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5651 lfo.+saw~;
#X text 200 5651 Positive unit-amplitude low frequency saw wave;
#X obj 30 5678 lfo.+square~;
#X text 200 5678 Positive low frequency square wave;
#X obj 30 5705 lfo.+tri~;
#X text 200 5705 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5732 lfo.impulse~;
#X text 200 5732 Unit-amplitude low-frequency impulse train;
#X obj 30 5759 lfo.pulse~;
#X text 200 5759 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5786 lfo.saw~;
#X text 200 5786 Full-range unit-amplitude low frequency saw;
#X obj 30 5813 lfo.square~;
#X text 200 5813 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5840 lfo.tri~;
#X text 200 5840 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5867 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5908 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5919 list.^at;
#X text 200 5919 on input index(es) outputs list element(s);
#X obj 30 5946 list.^contains;
#X text 200 5946 on input atom or list checks if specified list contains
it;
#X obj 30 5973 list.^search;
#X text 200 5973 on input atom returns it index in list;
#X obj 30 6000 list.all_of;
#X text 200 6000 checks if all list atoms accepted by predicate;
#X obj 30 6027 list.any_of;
#X text 200 6027 checks if at least one list element is accepted by
predicate;
#X obj 30 6054 list.append;
#X text 200 6054 append atom or list to the end of input list;
#X obj 30 6081 list.apply_to;
#X text 200 6081 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6121 list.at;
#X text 200 6121 on input list outputs element(s) at specified index(es);
#X obj 30 6148 list.choice;
#X text 200 6148 returns random element from list;
#X obj 30 6175 list.contains;
#X text 200 6175 on input list checks if it contains specified subsequence;
#X obj 30 6202 list.count;
#X text 200 6202 returns the number of items that equal to specified
value;
#X obj 30 6229 list.count_if;
#X text 200 6229 returns the number of items that satisfy to external
predicate.;
#X obj 30 6269 list.delta;
#X text 200 6269 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6309 list.distribution;
#X text 200 6309 list value distribution;
#X obj 30 6336 list.do;
#X text 200 6336 iterate and modify list contents via side-chain;
#X obj 30 6363 list.each;
#X text 200 6363 maps each list value via external object(s);
#X obj 30 6390 list.enumerate;
#X text 200 6390 enumerates input list;
#X obj 30 6417 list.equal;
#X text 200 6417 checks if given lists are equal;
#X obj 30 6444 list.first;
#X text 200 6444 returns first list element;
#X obj 30 6471 list.gen;
#X text 200 6471 generates list of specified length via external generator;
#X obj 30 6498 list.histogram;
#X text 200 6498 outputs distribution histogram;
#X obj 30 6525 list.insert;
#X text 200 6525 insert atom or list to the specified position of input
list;
#X obj 30 6552 list.integrator;
#X text 200 6552 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 6592 list.last;
#X text 200 6592 returns last list element;
#X obj 30 6619 list.length;
#X text 200 6619 returns the number of atoms in the list;
#X obj 30 6646 list.max;
#X text 200 6646 returns largest element in the list;
#X obj 30 6673 list.mean;
#X text 200 6673 calculates average of list of floats;
#X obj 30 6700 list.min;
#X text 200 6700 returns smallest element in the list;
#X obj 30 6727 list.none_of;
#X text 200 6727 checks if none of list atoms is accepted by predicate;
#X obj 30 6754 list.normalize;
#X text 200 6754 normalizes float list values to get their sum = 1.0;
#X obj 30 6781 list.pass_if;
#X text 200 6781 leave only elements accepted by predicate;
#X obj 30 6808 list.prepend;
#X text 200 6808 prepend atom or list before input list;
#X obj 30 6835 list.product;
#X text 200 6835 calculates product of floats in list;
#X obj 30 6862 list.range;
#X text 200 6862 returns list smallest and largest value;
#X obj 30 6889 list.reduce;
#X text 200 6889 apply function of two arguments cumulatively to the
list;
#X obj 30 6916 list.remove;
#X text 200 6916 on input list remove element(s) at specified positions;
#X obj 30 6943 list.remove_if;
#X text 200 6943 remove elements by predicate;
#X obj 30 6970 list.repack;
#X text 200 6970 repack input list to specified size;
#X obj 30 6997 list.repeat;
#X text 200 6997 creates new list by repeating given list specified
times;
#X obj 30 7024 list.resize;
#X text 200 7024 changes list size;
#X obj 30 7051 list.reverse;
#X text 200 7051 reverses the order of the elements in the list;
#X obj 30 7078 list.rldecode;
#X text 200 7078 Run-length list decoder (RLE);
#X obj 30 7105 list.rlencode;
#X text 200 7105 RLE (run-length encoding) for lists;
#X obj 30 7132 list.rotate;
#X text 200 7132 rotates list;
#X obj 30 7159 list.route;
#X text 200 7159 acts like [route] but for lists;
#X obj 30 7186 list.search;
#X text 200 7186 search specified items in input list;
#X obj 30 7213 list.separate;
#X text 200 7213 sends list elements one by one separately;
#X obj 30 7240 list.seq;
#X text 200 7240 numeric sequence list generator;
#X obj 30 7267 list.set;
#X text 200 7267 on input list set value at specified position;
#X obj 30 7294 list.shift;
#X text 200 7294 shifts the contents of the list with linear interpolation;
#X obj 30 7321 list.shuffle;
#X text 200 7321 randomly rearranges elements in list;
#X obj 30 7348 list.slice;
#X text 200 7348 extract sublist;
#X obj 30 7375 list.sort;
#X text 200 7375 sorts list values by ascending order;
#X obj 30 7402 list.sort_with;
#X text 200 7402 sort list with user defined side-chain;
#X obj 30 7429 list.split;
#X text 200 7429 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7469 list.stretch;
#X text 200 7469 stretches list - chenges its size with linear interpolation.;
#X obj 30 7496 list.sum;
#X text 200 7496 calculates sum of floats in list;
#X obj 30 7523 list.unique;
#X text 200 7523 removes duplicates from input list;
#X obj 30 7550 list.unpack;
#X text 200 7550 unpack list elements to separate outlets;
#X obj 30 7577 list.unzip;
#X text 200 7577 splits list to N lists \, each to separate output;
#X obj 30 7604 list.walk;
#X text 200 7604 Walks thru the list;
#X obj 30 7631 list.zip;
#X text 200 7631 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 7686 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7727 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7738 live.capture~;
#X text 200 7738 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7778 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7819 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7830 local.dict;
#X text 200 7830 local named dict object;
#X obj 30 7857 local.float;
#X text 200 7857 canvas-scoped named float variable;
#X obj 30 7884 local.int;
#X text 200 7884 canvas-scoped named integer variable;
#X obj 30 7911 local.list;
#X text 200 7911 local named list object;
#X obj 30 7938 local.mlist;
#X text 200 7938 local named mlist object;
#X obj 30 7965 local.set;
#X text 200 7965 local named set object;
#X obj 20 7992 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8033 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8044 math.abs;
#X text 200 8044 absolute value function;
#X obj 30 8071 math.acos;
#X text 200 8071 arc cosine function;
#X obj 30 8098 math.acosh;
#X text 200 8098 inverse hyperbolic cosine function;
#X obj 30 8125 math.and;
#X text 200 8125 operation AND for multiple arguments;
#X obj 30 8152 math.approx;
#X text 200 8152 check if input value approximately equal to pattern;
#X obj 30 8179 math.asin;
#X text 200 8179 arc sine function;
#X obj 30 8206 math.asinh;
#X text 200 8206 inverse hyperbolic sine function;
#X obj 30 8233 math.atan;
#X text 200 8233 arc tangent function;
#X obj 30 8260 math.atanh;
#X text 200 8260 inverse hyperbolic tangent function;
#X obj 30 8287 math.cbrt;
#X text 200 8287 cube root function;
#X obj 30 8314 math.cdiv~;
#X text 200 8314 division of complex signals;
#X obj 30 8341 math.ceil;
#X text 200 8341 round to smallest integral value not less than input
value;
#X obj 30 8368 math.cmul~;
#X text 200 8368 multiplication of complex signals;
#X obj 30 8395 math.cos;
#X text 200 8395 cosine function;
#X obj 30 8422 math.cosh;
#X text 200 8422 hyperbolic cosine function;
#X obj 30 8449 math.div;
#X text 200 8449 division (on lists too);
#X obj 30 8476 math.e;
#X text 200 8476 mathematical constant \, base of the natural logarithm;
#X obj 30 8503 math.exp;
#X text 200 8503 exponential functions;
#X obj 30 8530 math.exp2;
#X text 200 8530 exponential functions;
#X obj 30 8557 math.expr;
#X text 200 8557 dynamic [expr];
#X obj 30 8584 math.floor;
#X text 200 8584 round to largest integral value not greater than x;
#X obj 30 8611 math.gcd;
#X text 200 8611 calculate greatest common divisor;
#X obj 30 8638 math.inf;
#X text 200 8638 infinity value that cannot be represented accurately;
#X obj 30 8665 math.lcm;
#X text 200 8665 calculate least common multiple;
#X obj 30 8692 math.log;
#X text 200 8692 logarithm functions;
#X obj 30 8719 math.log10;
#X text 200 8719 logarithm functions;
#X obj 30 8746 math.log2;
#X text 200 8746 logarithm functions;
#X obj 30 8773 math.mul;
#X text 200 8773 multiplication (on lists too);
#X obj 30 8800 math.nan;
#X text 200 8800 Not a Number \, unrepresentable value;
#X obj 30 8827 math.neg;
#X text 200 8827 negate function;
#X obj 30 8854 math.or;
#X text 200 8854 operation OR for multiple arguments;
#X obj 30 8881 math.pi;
#X text 200 8881 mathematical constant;
#X obj 30 8908 math.polyeval;
#X text 200 8908 evaluates the polynomial described by the coefficients
list;
#X obj 30 8935 math.reciprocal;
#X text 200 8935 calculate reciprocal number;
#X obj 30 8962 math.round;
#X text 200 8962 round to integral value \, regardless of rounding
direction;
#X obj 30 8989 math.round~;
#X text 200 8989 signal round;
#X obj 30 9016 math.sign;
#X text 200 9016 sign function;
#X obj 30 9043 math.sin;
#X text 200 9043 sine function;
#X obj 30 9070 math.sinh;
#X text 200 9070 hyperbolic sine function;
#X obj 30 9097 math.sqrt;
#X text 200 9097 square root function;
#X obj 30 9124 math.squared;
#X text 200 9124 value square;
#X obj 30 9151 math.tan;
#X text 200 9151 tangent function;
#X obj 30 9178 math.tanh;
#X text 200 9178 hyperbolic tangent function;
#X obj 30 9205 math.trunc;
#X text 200 9205 truncate to integer value;
#X obj 20 9232 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 9273 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9284 midi.ctl2str;
#X text 200 9284 convert Standard MIDI Controllers number to name;
#X obj 30 9311 midi.event2ctl;
#X text 200 9311 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9338 midi.event2note;
#X text 200 9338 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9365 midi.event2prg;
#X text 200 9365 convert MidiEvent message to midi program change value;
#X obj 30 9392 midi.file;
#X text 200 9392 standard midi file SMF reader and writer;
#X obj 30 9419 midi.key2str;
#X text 200 9419 convert key number to SPN name according to tonality;
#X obj 30 9446 midi.prg2str;
#X text 200 9446 convert GM Instrument number to name (string or symbol);
#X obj 30 9473 midi.track;
#X text 200 9473 extract track from MidiFile;
#X obj 20 9500 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9541 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9552 click~;
#X text 200 9552 Output single impulse on bang;
#X obj 30 9579 fluid~;
#X text 200 9579 FluidSynth SoundFont 2 player;
#X obj 30 9606 modplug~;
#X text 200 9606 MOD file player (using libmodplug);
#X obj 30 9633 speech.flite;
#X text 200 9633 render speech to array;
#X obj 20 9660 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9701 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9712 msg;
#X text 200 9712 message constructor;
#X obj 30 9739 msg.after;
#X text 200 9739 send specified message after incoming message;
#X obj 30 9766 msg.onload;
#X text 200 9766 send message when patch loads;
#X obj 20 9793 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9834 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9845 net.host2ip;
#X text 200 9845 returns IP address by DNS name;
#X obj 20 9872 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9913 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9924 noise.crackle~;
#X text 200 9924 sparse noise generator;
#X obj 30 9951 noise.lfreq0~;
#X text 200 9951 sampled/held noise (piecewise constant);
#X obj 30 9978 noise.lfreq~;
#X text 200 9978 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10005 noise.pink~;
#X text 200 10005 Pink noise generator;
#X obj 30 10032 noise.white~;
#X text 200 10032 White noise generator;
#X obj 20 10059 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10100 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10111 osc.blit~;
#X text 200 10111 Bandlimited impulse train oscillator;
#X obj 30 10138 osc.impulse~;
#X text 200 10138 Bandlimited impulse train generator;
#X obj 30 10165 osc.pulse~;
#X text 200 10165 Bandlimited pulse train oscillator;
#X obj 30 10192 osc.saw4~;
#X text 200 10192 Bandlimited sawtooth wave;
#X obj 30 10219 osc.saw~;
#X text 200 10219 Alias-free sawtooth wave;
#X obj 30 10246 osc.sinfb~;
#X text 200 10246 Sine oscilator with feedback;
#X obj 30 10273 osc.sin~;
#X text 200 10273 Sine wave oscillator;
#X obj 30 10300 osc.square~;
#X text 200 10300 Bandlimited square wave oscillator;
#X obj 30 10327 osc.tri~;
#X text 200 10327 Bandlimited triangle wave oscillator;
#X obj 20 10354 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10395 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10406 canvas.current;
#X text 200 10406 verbose information about current canvas;
#X obj 30 10433 canvas.top;
#X text 200 10433 verbose information about top-level canvas;
#X obj 30 10460 patch.args;
#X text 200 10460 Get patch or subpatch arguments;
#X obj 20 10487 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10528 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10539 path.basename;
#X text 200 10539 outputs filename portion of pathname;
#X obj 30 10566 path.dirname;
#X text 200 10566 outputs directory portion of pathname;
#X obj 30 10593 path.exists;
#X text 200 10593 checks if given path exists;
#X obj 30 10620 path.lsdir;
#X text 200 10620 list directory contents;
#X obj 20 10647 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10688 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10699 is_any;
#X text 200 10699 checks if input data has *any* type;
#X obj 30 10726 is_bang;
#X text 200 10726 checks if input data has *bang* type;
#X obj 30 10753 is_data;
#X text 200 10753 checks if input data has *data* type;
#X obj 30 10780 is_dict;
#X text 200 10780 checks if input data has *dict* type;
#X obj 30 10807 is_even;
#X text 200 10807 checks if input number is even;
#X obj 30 10834 is_file;
#X text 200 10834 checks if file exists and accessible;
#X obj 30 10861 is_float;
#X text 200 10861 checks if input data has *float* type;
#X obj 30 10888 is_list;
#X text 200 10888 checks if input data has *list* type;
#X obj 30 10915 is_odd;
#X text 200 10915 checks if input number is odd;
#X obj 30 10942 is_pointer;
#X text 200 10942 checks if input data has *pointer* type;
#X obj 30 10969 is_symbol;
#X text 200 10969 checks if input data has *symbol* type;
#X obj 20 10996 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11037 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11048 preset.float;
#X text 200 11048 load/store float preset;
#X obj 30 11075 preset.list;
#X text 200 11075 load/store symbol preset;
#X obj 30 11102 preset.storage;
#X text 200 11102 preset storage control;
#X obj 30 11129 preset.symbol;
#X text 200 11129 load/store symbol preset;
#X obj 20 11156 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 11197 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11208 patch.props;
#X text 200 11208 patch properties manager;
#X obj 30 11235 prop;
#X text 200 11235 get/set named property value for subpatch or abstraction;
#X obj 30 11262 prop.declare;
#X text 200 11262 declare named property for subpatch or abstraction;
#X obj 30 11289 prop.get;
#X text 200 11289 Property extractor;
#X obj 30 11316 prop.get~;
#X text 200 11316 Property extractor from sound stream;
#X obj 30 11343 prop.set;
#X text 200 11343 Property injector;
#X obj 20 11370 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11411 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11422 proto.firmata;
#X text 200 11422 Firmata Arduino protocol support;
#X obj 20 11449 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11490 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11501 random.discrete;
#X text 200 11501 random weighted integers on interval [0 \, n);
#X obj 30 11528 random.float;
#X text 200 11528 random float generator in specified range;
#X obj 30 11555 random.gauss;
#X text 200 11555 gaussian random distribution;
#X obj 30 11582 random.int;
#X text 200 11582 Random integer generator in specified range;
#X obj 30 11609 random.linear;
#X text 200 11609 random linear distribution;
#X obj 30 11636 random.pw_const;
#X text 200 11636 piecewise constant random distribution;
#X obj 30 11663 random.pw_lin;
#X text 200 11663 piecewise linear random distribution;
#X obj 20 11690 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11731 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11742 snd.file;
#X text 200 11742 Sound file loader on steroids;
#X obj 20 11769 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11810 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11821 pan.cos~;
#X text 200 11821 two channel equal power sine/cosine panner;
#X obj 30 11848 pan.linsig~;
#X text 200 11848 two channel linear panner with signal control;
#X obj 30 11875 pan.lin~;
#X text 200 11875 two channel linear panner;
#X obj 30 11902 pan.spread~;
#X text 200 11902 spreads input channels across the stereo field;
#X obj 30 11929 pan.sqrt~;
#X text 200 11929 two channel equal power square root panner;
#X obj 30 11956 spat.pan4~;
#X text 200 11956 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11983 spat.pan8~;
#X text 200 11983 GMEM SPAT: 8-outputs spatializer;
#X obj 20 12010 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 12051 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12062 string;
#X text 200 12062 string constructor;
#X obj 30 12089 string.contains;
#X text 200 12089 checks if given string contains specified substring;
#X obj 30 12116 string.ends_with;
#X text 200 12116 checks if given string ends with specified suffix;
#X obj 30 12143 string.equal;
#X text 200 12143 check strings for equality;
#X obj 30 12170 string.format;
#X text 200 12170 formats string like printf.;
#X obj 30 12197 string.join;
#X text 200 12197 joins (concatenates) strings with separator;
#X obj 30 12224 string.length;
#X text 200 12224 number of characters in string (unicode supported);
#X obj 30 12251 string.match;
#X text 200 12251 check if string match regular expression;
#X obj 30 12278 string.remove;
#X text 200 12278 remove substring from input string;
#X obj 30 12305 string.replace;
#X text 200 12305 replace from one substring to another in input string;
#X obj 30 12332 string.split;
#X text 200 12332 split string by separator;
#X obj 30 12359 string.starts_with;
#X text 200 12359 checks if given string starts with specified prefix;
#X obj 30 12386 string.substr;
#X text 200 12386 extract substring from input string;
#X obj 30 12413 string2symbol;
#X text 200 12413 converts string to symbol;
#X obj 20 12440 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12481 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12492 symbol.equal;
#X text 200 12492 check symbols for equality;
#X obj 30 12519 symbol.length;
#X text 200 12519 number of characters in symbol (unicode supported);
#X obj 30 12546 symbol.num_compare;
#X text 200 12546 numeric symbol compare;
#X obj 20 12573 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12614 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12625 synth.bee3~;
#X text 200 12625 Hammond-oid organ FM synthesis instrument;
#X obj 30 12652 synth.birds~;
#X text 200 12652 bird singing generator;
#X obj 30 12679 synth.church_bell~;
#X text 200 12679 generic church bell modal model;
#X obj 30 12706 synth.dubdub~;
#X text 200 12706 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 12746 synth.eguitar~;
#X text 200 12746 simple electric guitar model with steel strings;
#X obj 30 12773 synth.fgrain~;
#X text 200 12773 file granulator from STK;
#X obj 30 12800 synth.ks~;
#X text 200 12800 Karplus-Strong string;
#X obj 30 12827 synth.marimba~;
#X text 200 12827 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12867 synth.rhodey~;
#X text 200 12867 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 12894 synth.risset_arp~;
#X text 200 12894 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12921 synth.risset_tone~;
#X text 200 12921 Jean Claude Risset's endless glissando;
#X obj 30 12948 synth.shakers~;
#X text 200 12948 various percussion sounds from STK library;
#X obj 30 12975 synth.wurley~;
#X text 200 12975 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 13002 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 13043 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13054 system.cursor;
#X text 200 13054 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 13094 system.getenv;
#X text 200 13094 Get system environment variables;
#X obj 30 13121 system.hostname;
#X text 200 13121 outputs system hostname;
#X obj 30 13148 system.memsize;
#X text 200 13148 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 13188 system.memused;
#X text 200 13188 returns the process physical memory use - current
and peak;
#X obj 30 13215 system.screen_size;
#X text 200 13215 returns current screen size in pixels;
#X obj 30 13242 system.shell;
#X text 200 13242 run external command in separate process;
#X obj 20 13269 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 13310 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13321 tl.bang;
#X text 200 13321 Timeline bang (with possible delay);
#X obj 30 13351 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 13348 Timeline section;
#X obj 30 13373 tl.timeline;
#X text 200 13373 Timeline - event scheduler;
#X obj 30 13400 tl.toggle;
#X text 200 13400 Timeline bang;
#X obj 30 13427 tl.transport;
#X text 200 13427 Timeline transport control;
#X obj 20 13454 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13495 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13509 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 13506 array view with cursor and selection;
#X obj 30 13534 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 13531 A bang... that's all;
#X obj 30 13559 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 13556 colorchooser widget;
#X obj 30 13584 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 13581 Display GUI object;
#X obj 30 13609 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 13606 GUI for turning DSP on/off;
#X obj 30 13634 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 13631 envelope editor widget;
#X obj 30 13659 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 13656 UI stereo gain control;
#X obj 30 13684 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 13681 UI gain control;
#X obj 30 13709 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 13706 simple icon with button capabilities;
#X obj 30 13734 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 13731 value increment/decrement;
#X obj 30 13759 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 13756 keyboard widget;
#X obj 30 13784 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 13781 knob widget;
#X obj 30 13809 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 13806 simple label widget;
#X obj 30 13834 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 13831 Hyperlink widget;
#X obj 30 13859 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 13856 The matrix of toggles has you.;
#X obj 30 13884 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 13881 Dropdown menu;
#X obj 30 13909 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 13906 Shows peak and rms signal level;
#X obj 30 13934 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 13931 counterpart of the vanilla [nbx];
#X obj 30 13959 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 13956 counterpart of the vanilla [nbx] for signal;
#X obj 30 13984 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 13981 Preset manager;
#X obj 30 14009 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 14006 counterpart of the vanilla radio toggle;
#X obj 30 14034 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 14031 range slider;
#X obj 30 14059 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 14056 Scope GUI object;
#X obj 30 14084 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 14081 counterpart of the vanilla slider;
#X obj 30 14109 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 14106 2D slider widget;
#X obj 30 14134 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 14131 Multiple slider widget;
#X obj 30 14159 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 14156 Spectroscope GUI object;
#X obj 30 14184 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 14181 displays a list of text buttons or text toggles;
#X obj 30 14209 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 14206 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 14231 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 14231 version: v0.7.1 \, license: GPL3;
#X obj 20 14252 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;