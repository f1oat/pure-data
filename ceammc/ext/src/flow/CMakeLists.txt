set(FLOW_SOURCES mod_flow.h mod_flow.cpp)

macro(ceammc_flow_extension name)
    list(APPEND FLOW_SOURCES "flow_${name}.cpp")
endmacro()

ceammc_flow_extension(change)
ceammc_flow_extension(compare_base)
ceammc_flow_extension(count)
ceammc_flow_extension(delay)
ceammc_flow_extension(demultiplex)
ceammc_flow_extension(demultiplex2_tilde)
ceammc_flow_extension(demultiplex_tilde)
ceammc_flow_extension(dup)
ceammc_flow_extension(gate)
ceammc_flow_extension(greater)
ceammc_flow_extension(greater_eq)
ceammc_flow_extension(group)
ceammc_flow_extension(interval)
ceammc_flow_extension(less)
ceammc_flow_extension(less_eq)
ceammc_flow_extension(ring)
ceammc_flow_extension(loop)
ceammc_flow_extension(match)
ceammc_flow_extension(mem)
ceammc_flow_extension(multiplex)
ceammc_flow_extension(multiplex2_tilde)
ceammc_flow_extension(multiplex_tilde)
ceammc_flow_extension(once)
ceammc_flow_extension(pack)
ceammc_flow_extension(pass)
ceammc_flow_extension(pass_if)
ceammc_flow_extension(pipe)
ceammc_flow_extension(queue)
ceammc_flow_extension(reject)
ceammc_flow_extension(reject_if)
ceammc_flow_extension(route)
ceammc_flow_extension(space)
ceammc_flow_extension(speedlim)
ceammc_flow_extension(split)
ceammc_flow_extension(stack)
ceammc_flow_extension(sync)
ceammc_flow_extension(sync_pack)
ceammc_flow_extension(tee_tilde)

add_library(ceammc_flow STATIC ${FLOW_SOURCES})

target_include_directories(ceammc_flow PUBLIC ${PROJECT_SOURCE_DIR}/src)
target_include_directories(ceammc_flow PRIVATE $<TARGET_PROPERTY:re2,INCLUDE_DIRECTORIES>)
target_include_directories(ceammc_flow PRIVATE $<TARGET_PROPERTY:fmt,INCLUDE_DIRECTORIES>)

target_link_libraries(ceammc_flow PRIVATE ceammc_base) # for function calls
target_link_libraries(ceammc_flow PRIVATE re2)
