# include "parser_color.h"
# include "ragel_common.h"
# include "parser_numeric.h"
# include "ceammc_convert.h"
# include "ceammc_random.h"

# include <cstdint>
# include <cstring>

namespace ceammc {
namespace parser {

// for autogenerated ragel internals
struct ColorRagelData {
    int r { 0 };
    int g { 0 };
    int b { 0 };
    int a { 0 };
    int x { 0 };
    void setHex(std::uint32_t c) {
        r = (c & 0xFF0000) >> 16;
        g = (c & 0x00FF00) >> 8;
        b = c & 0x0000FF;
    }
    void setLighter(int perc) {
        perc = clip<int, 0, 100>(perc);
        r += perc * (255 - r) / 100;
        g += perc * (255 - g) / 100;
        b += perc * (255 - b) / 100;
    }
    void setDarker(int perc) {
        perc = clip<int, 0, 100>(perc);
        r += perc * (-r) / 100;
        g += perc * (-g) / 100;
        b += perc * (-b) / 100;
    }
    void setRandom() {
        random::RandomGen gen;
        r = gen.gen_uniform_int(0, 255);
        g = gen.gen_uniform_int(0, 255);
        b = gen.gen_uniform_int(0, 255);
    }
};

RgbHexFullMatch::RgbHexFullMatch()
{
    reset();
}

void RgbHexFullMatch::reset()
{
    color_ = {};
}

bool RgbHexFullMatch::parse(const Atom& a)
{
    if (a.isSymbol())
        return parse(a.asT<t_symbol*>()->s_name);
    else
        return false;
}

size_t RgbHexFullMatch::parse(const AtomListView& lv, SmallColorVec& out)
{
    const size_t N = lv.size();

    for (size_t i = 0; i < N; i++) {
        const auto& a = lv[i];
        if (!parse(a))
            return i;

        out.push_back(asInt());
    }

    return N;
}

bool RgbHexFullMatch::parse(const char* str)
{
    auto len = strlen(str);
    if (len == 4)
        return parseShort(str, len);
    else if(len == 7)
        return parseFull(str, len);
    else
        return false;
}

%%{
    machine color;
    include color_rgb_hex "ragel_color.rl";

    main := color_rgb;
    write data;
}%%

bool RgbHexFullMatch::parseFull(const char* str, size_t len)
{
    int cs = 0;
    const char* p = str;
    const char* pe = p + len;
    const char* eof = pe;
    ColorRagelData color;
    AtomCategory ragel_cat {CAT_UNKNOWN};
    AtomType ragel_type    {TYPE_UNKNOWN};

    reset();

    %% write init;
    %% write exec;

    const auto ok = cs >= %%{ write first_final; }%%;
    if(ok) {
        color_.r = color.r;
        color_.g = color.g;
        color_.b = color.b;
    }

    return ok;
}

%%{
    machine rgb_color_short;
    include color_rgb_hex_short "ragel_color.rl";

    main := color_rgb;
    write data;
}%%

bool RgbHexFullMatch::parseShort(const char* str, size_t length)
{
    int cs = 0;
    const char* p = str;
    const char* pe = p + length;
    const char* eof = pe;
    ColorRagelData color;
    AtomCategory ragel_cat {CAT_UNKNOWN};
    AtomType ragel_type    {TYPE_UNKNOWN};

    reset();

    %% write init;
    %% write exec;

    const auto ok = cs >= %%{ write first_final; }%%;
    if(ok) {
        color_.r = color.r | (color.r << 4);
        color_.g = color.g | (color.g << 4);
        color_.b = color.b | (color.b << 4);
    }

    return ok;

    return false;
}

RgbaHexFullMatch::RgbaHexFullMatch()
{
    reset();
}

void RgbaHexFullMatch::reset()
{
    color_ = {};
}

bool RgbaHexFullMatch::parse(const Atom& a)
{
    if (a.isSymbol())
        return parse(a.asT<t_symbol*>()->s_name);
    else
        return false;
}

bool RgbaHexFullMatch::parse(const char* str, size_t len)
{
    if (len == 4 || len == 5)
        return parseShort(str, len);
    else if(len == 7 || len == 9)
        return parseFull(str, len);
    else
        return false;
}

bool RgbaHexFullMatch::parse(const char* str)
{
    return parse(str, strlen(str));
}

%%{
    machine rgba_color;
    include color_rgba_hex "ragel_color.rl";

    main := color_rgba;
    write data;
}%%

bool RgbaHexFullMatch::parseFull(const char* str, size_t length)
{
    int cs = 0;
    const char* p = str;
    const char* pe = p + length;
    const char* eof = pe;
    ColorRagelData color;
    color.a = 0xff;
    AtomCategory ragel_cat {CAT_UNKNOWN};
    AtomType ragel_type = {TYPE_UNKNOWN};

    reset();

    %% write init;
    %% write exec;

    const auto ok = cs >= %%{ write first_final; }%%;
    if(ok) {
        color_.r = color.r;
        color_.g = color.g;
        color_.b = color.b;
        color_.a = color.a;
    }

    return ok;
}

%%{
    machine rgba_color_short;
    include color_rgba_hex_short "ragel_color.rl";

    main := color_rgba_short;
    write data;
}%%

bool RgbaHexFullMatch::parseShort(const char* str, size_t length)
{
    int cs = 0;
    const char* p = str;
    const char* pe = p + length;
    const char* eof = pe;
    ColorRagelData color;
    color.a = 0xff;
    AtomCategory ragel_cat {CAT_UNKNOWN};
    AtomType ragel_type = {TYPE_UNKNOWN};

    reset();

    %% write init;
    %% write exec;

    const auto ok = cs >= %%{ write first_final; }%%;
    if(ok) {
        color_.r = color.r | (color.r << 4);
        color_.g = color.g | (color.g << 4);
        color_.b = color.b | (color.b << 4);
        color_.a = color.a | (color.a << 4);
    }

    return ok;
}

ColorFullMatch::ColorFullMatch()
{
    reset();
}

void ColorFullMatch::reset()
{
    color_ = {};
}

bool ColorFullMatch::parse(const Atom& a)
{
    if (a.isSymbol())
        return parse(a.asT<t_symbol*>()->s_name);
    else
        return false;
}

%%{
    machine named_color;
    include color_named "ragel_color.rl";

    main := color_named;
    write data;
}%%

bool ColorFullMatch::parse(const char* str, size_t len)
{
    if (len == 0)
        return false;

    if (str[0] == '#') {
        RgbaHexFullMatch p;
        if (p.parse(str)) {
            color_ = p.color();
            return true;
        } else {
            return false;
        }
    } else {
        int cs = 0;
        const char* p = str;
        const char* pe = p + strlen(str);
        const char* eof = pe;
        ColorRagelData color;
        DECLARE_RAGEL_COMMON_VARS;
        DECLARE_RAGEL_NUMERIC_VARS;

        reset();

        %% write init;
        %% write exec;

        const auto ok = cs >= %%{ write first_final; }%%;
        if (ok) {
            color_.r = color.r;
            color_.g = color.g;
            color_.b = color.b;
            color_.a = 0xff;
        }

        return ok;
    }
}

bool ColorFullMatch::parse(const char* str)
{
    return parse(str, strlen(str));
}

}
}


