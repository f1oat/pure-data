#N canvas 0 0 760 555 12;
#X obj 20 50 cnv 5 69 31 empty empty matrix 4 13 0 17 -262144 -49933
0;
#X obj 20 91 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 102 matrix.abs;
#X text 200 102 calc abs value for each matrix element;
#X obj 30 129 matrix.accu;
#X text 200 129 accumulate (sum) all elements of matrix;
#X obj 30 156 matrix.acos;
#X text 200 156 element-wise acrcosine;
#X obj 30 183 matrix.acosh;
#X text 200 183 element-wise hyperbolic acrcosine;
#X obj 30 210 matrix.add;
#X text 200 210 element-wise matrix addition;
#X obj 30 237 matrix.all;
#X text 200 237 check if all elements of the matrix are non-zero;
#X obj 30 264 matrix.all_col;
#X text 200 264 row with each element (0 or 1) indicating whether the
corresponding column has all non-zero elements;
#X obj 30 304 matrix.all_row;
#X text 200 304 column with each element (0 or 1) indicating whether
the corresponding row has all non-zero elements;
#X obj 30 344 matrix.any;
#X text 200 344 check if any elements of the matrix are non-zero;
#X obj 30 371 matrix.any_col;
#X text 200 371 row with each element (0 or 1) indicating whether the
corresponding column has any non-zero elements;
#X obj 30 411 matrix.any_row;
#X text 200 411 column with each element (0 or 1) indicating whether
the corresponding row has any non-zero elements;
#X obj 30 451 matrix.asin;
#X text 200 451 element-wise acrsine;
#X obj 30 478 matrix.asinh;
#X text 200 478 element-wise hyperbolic acrsine;
#X obj 30 505 matrix.at;
#X text 200 505 select matrix element at specified position;
#X obj 30 532 matrix.atan;
#X text 200 532 element-wise arctangent;
#X obj 30 559 matrix.atanh;
#X text 200 559 element-wise hyperbolic acrtangent;
#X obj 30 586 matrix.clip;
#X text 200 586 clip matrix value to range [min \, max];
#X obj 30 613 matrix.col;
#X text 200 613 create Matrix column with specified values;
#X obj 30 640 matrix.col_at;
#X text 200 640 get specified column;
#X obj 30 667 matrix.conv2;
#X text 200 667 2D matrix convolution;
#X obj 30 694 matrix.cos;
#X text 200 694 element-wise cosine;
#X obj 30 721 matrix.cosh;
#X text 200 721 element-wise hyperbolic cosine;
#X obj 30 748 matrix.det;
#X text 200 748 determinant of square matrix;
#X obj 30 775 matrix.diag;
#X text 200 775 get matrix diagonals;
#X obj 30 802 matrix.div;
#X text 200 802 element-wise matrix division;
#X obj 30 829 matrix.eq;
#X text 200 829 element-wise matrix equal comparasion;
#X obj 30 856 matrix.exp;
#X text 200 856 element-wise base-e exponent: e^x;
#X obj 30 883 matrix.exp10;
#X text 200 883 element-wise base-10 exponent: 10^x;
#X obj 30 910 matrix.exp2;
#X text 200 910 element-wise base-2 exponent: 2^x;
#X obj 30 937 matrix.fill;
#X text 200 937 fill input Matrix with value;
#X obj 30 964 matrix.from_list;
#X text 200 964 create Matrix from list values;
#X obj 30 991 matrix.full;
#X text 200 991 create Matrix filled with specified value;
#X obj 30 1018 matrix.ge;
#X text 200 1018 element-wise greater equal comparasion;
#X obj 30 1045 matrix.gt;
#X text 200 1045 element-wise greater then comparasion;
#X obj 30 1072 matrix.hist;
#X text 200 1072 produce a matrix containing column histogram counts;
#X obj 30 1099 matrix.identity;
#X text 200 1099 create identity Matrix;
#X obj 30 1126 matrix.insert_col;
#X text 200 1126 insert vector at specified matrix column;
#X obj 30 1153 matrix.insert_row;
#X text 200 1153 insert vector at specified matrix row;
#X obj 30 1180 matrix.inverse;
#X text 200 1180 inverse square matrix;
#X obj 30 1207 matrix.le;
#X text 200 1207 element-wise less equal comparasion;
#X obj 30 1234 matrix.linspace;
#X text 200 1234 generate row with linearly spaced N elements;
#X obj 30 1261 matrix.load;
#X text 200 1261 load matrix from CSV format;
#X obj 30 1288 matrix.logspace;
#X text 200 1288 generate row with N elements spaced logarithmically;
#X obj 30 1315 matrix.lt;
#X text 200 1315 element-wise less then comparasion;
#X obj 30 1342 matrix.matmul;
#X text 200 1342 matrix product;
#X obj 30 1369 matrix.max;
#X text 200 1369 returns maximum in Matrix;
#X obj 30 1396 matrix.mean;
#X text 200 1396 mean matrix value;
#X obj 30 1423 matrix.mean_col;
#X text 200 1423 mean value for each matrix column;
#X obj 30 1450 matrix.mean_row;
#X text 200 1450 mean value for each matrix row;
#X obj 30 1477 matrix.median;
#X text 200 1477 median matrix value;
#X obj 30 1504 matrix.median_col;
#X text 200 1504 median matrix value for each column;
#X obj 30 1531 matrix.median_row;
#X text 200 1531 median matrix value for each row;
#X obj 30 1558 matrix.min;
#X text 200 1558 returns minimum value in Matrix;
#X obj 30 1585 matrix.mul;
#X text 200 1585 element-wise matrix multiplication;
#X obj 30 1612 matrix.ncols;
#X text 200 1612 return number of columns in Matrix;
#X obj 30 1639 matrix.ne;
#X text 200 1639 element-wise matrix not equal comparasion;
#X obj 30 1666 matrix.new;
#X text 200 1666 Matrix data type;
#X obj 30 1693 matrix.nrows;
#X text 200 1693 return number of rows in Matrix;
#X obj 30 1720 matrix.ones;
#X text 200 1720 create Matrix with ones;
#X obj 30 1747 matrix.ones_like;
#X text 200 1747 create Matrix filled with ones with the same shape
as input;
#X obj 30 1774 matrix.randn;
#X text 200 1774 generates Matrix using Gaussian distribution with
zero mean and unit variance;
#X obj 30 1814 matrix.randu;
#X text 200 1814 generates Matrix with uniform distribution [0-1];
#X obj 30 1841 matrix.range;
#X text 200 1841 matrix range (difference between max and min);
#X obj 30 1868 matrix.range_col;
#X text 200 1868 matrix column range (difference between max and min);
#X obj 30 1895 matrix.range_row;
#X text 200 1895 matrix row range (difference between max and min);
#X obj 30 1922 matrix.rank;
#X text 200 1922 rank of the matrix;
#X obj 30 1949 matrix.remove_col;
#X text 200 1949 remove specified matrix column;
#X obj 30 1976 matrix.remove_row;
#X text 200 1976 remove specified matrix row;
#X obj 30 2003 matrix.replace;
#X text 200 2003 replace specific elements with a new value;
#X obj 30 2030 matrix.reshape;
#X text 200 2030 change size while keeping elements;
#X obj 30 2057 matrix.resize;
#X text 200 2057 change size while keeping elements and preserving
layout;
#X obj 30 2084 matrix.row;
#X text 200 2084 create Matrix row with specified values;
#X obj 30 2111 matrix.row_at;
#X text 200 2111 get specified row;
#X obj 30 2138 matrix.save;
#X text 200 2138 save matrix in CSV format;
#X obj 30 2165 matrix.shift_col;
#X text 200 2165 shift Matrix elements by N positions in each column;
#X obj 30 2192 matrix.shift_row;
#X text 200 2192 shift Matrix elements by N positions in each row;
#X obj 30 2219 matrix.sign;
#X text 200 2219 element-wise signum function;
#X obj 30 2246 matrix.sin;
#X text 200 2246 element-wise sine;
#X obj 30 2273 matrix.sinh;
#X text 200 2273 element-wise hyperbolic sine;
#X obj 30 2300 matrix.size;
#X text 200 2300 return Matrix size (rows \, columns);
#X obj 30 2327 matrix.solve;
#X text 200 2327 Solve a system of linear equations \, A*X = B \, where
X is unknown;
#X obj 30 2367 matrix.stddev;
#X text 200 2367 standart deviation for matrix values;
#X obj 30 2394 matrix.stddev_col;
#X text 200 2394 standart deviation matrix value for each column;
#X obj 30 2421 matrix.stddev_row;
#X text 200 2421 standart deviation matrix value for each row;
#X obj 30 2448 matrix.sub;
#X text 200 2448 element-wise matrix subtraction;
#X obj 30 2475 matrix.swap_cols;
#X text 200 2475 swaps specified columns in matrix;
#X obj 30 2502 matrix.swap_rows;
#X text 200 2502 swaps specified rows in matrix;
#X obj 30 2529 matrix.tan;
#X text 200 2529 element-wise tangent;
#X obj 30 2556 matrix.tanh;
#X text 200 2556 element-wise hyperbolic tangent;
#X obj 30 2583 matrix.to_list;
#X text 200 2583 convert Matrix to list;
#X obj 30 2610 matrix.transpose;
#X text 200 2610 transpose Matrix;
#X obj 30 2637 matrix.trunc_exp;
#X text 200 2637 element-wise base-e exponent \, truncated to avoid
infinity;
#X obj 30 2664 matrix.vectorise;
#X text 200 2664 generate a column vector or row vector from matrix;
#X obj 30 2691 matrix.zeros;
#X text 200 2691 create Matrix with zeros;
#X obj 30 2718 matrix.zeros_like;
#X text 200 2718 create Matrix filled with zeros with the same shape
as input;
#X obj 1 1 cnv 5 740 40 empty empty matrix 20 20 0 20 -104026 -4096 0;
#X obj 1 2745 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2745 version: v0.1 \, license:;
#X obj 20 2773 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 2760 msg 0;
#X obj 670 2795 switch~;
#X connect 196 0 197 0;