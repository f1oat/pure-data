// array_loader.lexer.h generated by reflex 3.0.1 from array_loader.l

#ifndef REFLEX_ARRAY_LOADER_LEXER_H
#define REFLEX_ARRAY_LOADER_LEXER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::al::location
#define REFLEX_OPTION_YYSTYPE             ceammc::al::ArrayLoaderParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc::al
#define REFLEX_OPTION_bison_cc_parser     ArrayLoaderParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "array_loader.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               ArrayLoaderLexer
#define REFLEX_OPTION_namespace           ceammc::al
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "array_loader.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::al::ArrayLoaderParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ceammc::al::ArrayLoaderParser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "array_loader.l"

    # include <string>

    # include "lex/array_loader.parser.hpp"

    using token = ceammc::al::ArrayLoaderParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace al {

class ArrayLoaderLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 9 "array_loader.l"

    private:
        size_t output_indent_ = {0};

    public:
        /** return string for output indent */
        inline std::string indent(size_t n = 0, char c = ' ') const {
            return std::string(output_indent_ + n, c);
        }

        /** set debug output indent */
        inline void setOutputIndent(size_t n) { output_indent_ = n; }

        static const std::vector<std::string>& options() {
            static const std::vector<std::string> opts = {
                "[@ch | @chan | @channel | @channels <value>...]",
                "[@b | @begin <value>]",
                "([@e | @end <value>] | [@l | @len | @length <value>])",
                "[@aoff | @aoffset | @array_offset <value>]",
                "[@r | @resize]",
                "[@g | @gain <value>]",
                "[@n | @norm | @normalize]",
                "[@resample <value>]"
            };

            return opts;
        }

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  ArrayLoaderLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int ARRAY = 1;
  static const int PATTERN = 2;
  static const int OPTIONS = 3;
  static const int SMPTE = 4;
  static const int RANGE = 5;
  std::string filename;
  virtual ceammc::al::location location(void)
  {
    ceammc::al::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ceammc::al::ArrayLoaderParser::symbol_type lex(void);
};

} // namespace ceammc
} // namespace al

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#endif
