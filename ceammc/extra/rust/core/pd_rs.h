#ifndef ceammc_rust_core_h
#define ceammc_rust_core_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>
#include <stddef.h>
struct ceammc_rs_mdns;
struct ceammc_rs_mdns_service_info;

enum class ceammc_rs_mdns_rc {
  Ok,
  NullService,
  ServiceError,
  InvalidServiceType,
  Utf8Error,
  BrowseFailed,
  InvalidStringPointer,
  SetOptionError,
};

struct ceammc_rs_mdns_txt_property {
  const char *key;
  const char *value;
};

struct ceammc_rs_mdns_service_info {
  /// service port
  uint16_t port;
  /// service name
  const char *fullname;
  /// service hostname
  const char *hostname;
  /// service type, for ex.: _osc._udp.local.
  const char *rtype;
  /// number of service ip addresses
  size_t ip_count;
  /// pointer to array of ip addresses
  const char *const *ip;
  /// number of txt properties
  size_t txt_prop_count;
  /// pointer to array of txt properties
  const ceammc_rs_mdns_txt_property *txt_props;
};


extern "C" {

/// browse mdns services on the network
/// @param mdns - point to mdns handle
/// @param service_type - MDNS service type to search, for ex.: '_http._tcp.local.'.
///        If '.local.' suffix if omitted it will be auto-added.
/// @param timeout - search timeout in seconds
/// @param cb - callback called each time a new service found
/// @param user_data - pointer to user data
/// @return mdns_rc::Ok on success and other codes on error
ceammc_rs_mdns_rc ceammc_rs_mdns_browse(ceammc_rs_mdns *mdns,
                                        const char *service_type,
                                        uint64_t timeout,
                                        void (*cb)(void*, const ceammc_rs_mdns_service_info*),
                                        void *user_data);

/// create new MDNS service handler
/// @return pointer to MDNS service or NULL on error
ceammc_rs_mdns *ceammc_rs_mdns_create();

/// enable/disable network interfaces to search for mdns services
/// @param mdns - pointer to mdns struct
/// @param name - network interface name, for example:
///  - '*', 'all' (all network interfaces)
///  - 'ipv4' (all ip v4 interfaces)
///  - 'ipv6' (all ip v6 interfaces)
///  - '127.0.0.1' etc (interface ip address)
///  - 'lo0', 'eth1' (interface name)
///
/// @note '!' can't be added to disable interface, for ex.: '!ipv6'
/// @return mdns_rc::Ok on success or other codes on error
ceammc_rs_mdns_rc ceammc_rs_mdns_enable_iface(ceammc_rs_mdns *mdns, const char *name);

/// free mdns handler
/// @param mdns - pointer to mdns struct created with ceammc_rs_mdns_create()
void ceammc_rs_mdns_free(ceammc_rs_mdns *mdns);

/// converts error code to string
/// @param rc - pointer to mdns struct created with ceammc_rs_mdns_create()
/// @return pointer to error string
const char *ceammc_rs_mdns_strerr(ceammc_rs_mdns_rc rc);

} // extern "C"

#endif // ceammc_rust_core_h
