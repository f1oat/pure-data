#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 matrix~;
#X text 175 525 signal routing matrix;
#X obj 30 552 metro.pattern;
#X text 175 552 metro with rhythmic patterns;
#X obj 30 579 metro.seq;
#X text 175 579 metro sequencer;
#X obj 30 606 mix~;
#X text 175 606 multislot signal mixer;
#X obj 30 633 radio;
#X text 175 633 float index to outlet values as radio switch;
#X obj 30 660 window;
#X text 175 660 returns window value by given window position;
#X obj 30 687 xfade2~;
#X text 175 687 multi stereo-signal crossfade;
#X obj 30 714 xfade~;
#X text 175 714 multi signal crossfade;
#X obj 20 741 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 782 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 793 array.p2s;
#X text 175 793 convert array phase [0\..1] to sample position;
#X obj 30 820 array.s2p;
#X text 175 820 convert array sample position to relative phase
position [0\..1];
#X obj 30 857 conv.amp2dbfs;
#X text 175 857 convert from amplitude to decibel full scale;
#X obj 30 884 conv.bpm2hz;
#X text 175 884 converts BPM to frequency in herz;
#X obj 30 911 conv.bpm2ms;
#X text 175 911 convert frequency in BPM to period in milliseconds;
#X obj 30 938 conv.bpm2sec;
#X text 175 938 convert frequency in BPM to period in seconds;
#X obj 30 965 conv.cc2amp;
#X text 175 965 convert from MIDI Control Change range;
#X obj 30 992 conv.dbfs2amp;
#X text 175 992 convert decibel full scale to amplitude;
#X obj 30 1019 conv.lin2curve;
#X text 175 1019 map linear to exponential range with 0 allowed.;
#X obj 30 1046 conv.lin2exp;
#X text 175 1046 maps linear range to exponential range;
#X obj 30 1073 conv.lin2lin;
#X text 175 1073 convert from one linear range to another;
#X obj 30 1100 conv.midi2freq;
#X text 175 1100 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1137 conv.pitch2midi;
#X text 175 1137 converts symbol pitch name to MIDI note number;
#X obj 30 1164 conv.samp2sec;
#X text 175 1164 convert samples to time according to samplerate;
#X obj 30 1191 conv.sec2samp;
#X text 175 1191 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1228 conv.sec2str;
#X text 175 1228 converts float time in seconds to formated symbol (or
string);
#X obj 30 1265 conv.str2sec;
#X text 175 1265 converts formatted time to float value in seconds;
#X obj 20 1292 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1333 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1344 data.dict;
#X text 175 1344 dictionary container: store values by key;
#X obj 30 1371 data.fifo;
#X text 175 1371 First-In-First-Out (FIFO) queue data container;
#X obj 30 1398 data.float;
#X text 175 1398 robust float object;
#X obj 30 1425 data.int;
#X text 175 1425 robust int object;
#X obj 30 1452 data.list;
#X text 175 1452 list container;
#X obj 30 1479 data.mlist;
#X text 175 1479 multidimensional list container;
#X obj 30 1506 data.set;
#X text 175 1506 container that store unique elements;
#X obj 30 1533 data.set2list;
#X text 175 1533 converts set to list;
#X obj 30 1560 dict.contains;
#X text 175 1560 predicate to check dict contains key;
#X obj 30 1587 dict.get;
#X text 175 1587 on input dict outputs value to corresponding key
outlet;
#X obj 30 1614 dict.keys;
#X text 175 1614 get list of dict keys;
#X obj 30 1641 dict.size;
#X text 175 1641 dictionary size;
#X obj 30 1668 dict.values;
#X text 175 1668 dictionary values as mlist;
#X obj 30 1695 mlist.flatten;
#X text 175 1695 flatten nested mlist;
#X obj 30 1722 set.contains;
#X text 175 1722 check if specified element is in set;
#X obj 30 1749 set.diff;
#X text 175 1749 difference between two sets;
#X obj 30 1776 set.equal;
#X text 175 1776 checks if two sets are equal (contains same
elements);
#X obj 30 1803 set.intersect;
#X text 175 1803 output intersection of given sets;
#X obj 30 1830 set.size;
#X text 175 1830 get number of elements in set;
#X obj 30 1857 set.symdiff;
#X text 175 1857 symmetric difference between two sets;
#X obj 30 1884 set.union;
#X text 175 1884 output union of given sets;
#X obj 20 1911 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1952 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1963 dyn.comp2~;
#X text 175 1963 stereo dynamic range compressor;
#X obj 30 1990 dyn.comp~;
#X text 175 1990 mono dynamic range compressors;
#X obj 30 2017 dyn.gate2~;
#X text 175 2017 stereo signal gate;
#X obj 30 2044 dyn.gate~;
#X text 175 2044 mono signal gate;
#X obj 30 2071 dyn.limit2~;
#X text 175 2071 stereo 1176LN Peak Limiter;
#X obj 30 2098 dyn.limit~;
#X text 175 2098 mono 1176LN Peak Limiter;
#X obj 30 2125 dyn.softclip~;
#X text 175 2125 soft signal clip;
#X obj 20 2152 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2204 env.adsr~;
#X text 175 2204 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2231 env.ar~;
#X text 175 2231 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 2268 env.asr~;
#X text 175 2268 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 2295 env.concat;
#X text 175 2295 Envelope concatenation;
#X obj 30 2322 env.follow~;
#X text 175 2322 Envelope follower with independent attack and release
times.;
#X obj 30 2359 env.mix;
#X text 175 2359 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2396 env.smooth~;
#X text 175 2396 An envelope with an exponential attack and release;
#X obj 30 2423 env.tscale;
#X text 175 2423 Envelope time-scale;
#X obj 30 2450 env.tshift;
#X text 175 2450 Envelope time-shift (horizontal);
#X obj 30 2477 env.vscale;
#X text 175 2477 Envelope value-scale;
#X obj 30 2504 env2array;
#X text 175 2504 Renders envelope to specified array;
#X obj 30 2531 env2vline;
#X text 175 2531 Converts envelope to bunch of vline messages;
#X obj 30 2558 envelope;
#X text 175 2558 Envelope data type;
#X obj 30 2585 vline2env;
#X text 175 2585 Converts vline messages to env;
#X obj 20 2612 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2653 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2664 expand_env;
#X text 175 2664 Substitute enviroment variables in data stream;
#X obj 30 2691 flow.append;
#X text 175 2691 inject message into flow;
#X obj 30 2718 flow.change;
#X text 175 2718 rejects redundant input values;
#X obj 30 2745 flow.count;
#X text 175 2745 control flow event counter;
#X obj 30 2772 flow.demultiplex;
#X text 175 2772 control flow demultiplexer;
#X obj 30 2799 flow.demultiplex2~;
#X text 175 2799 audio stream stereo demultiplexer;
#X obj 30 2826 flow.demultiplex~;
#X text 175 2826 audio stream demultiplexer;
#X obj 30 2853 flow.gate;
#X text 175 2853 control flow gate. [spigot] analog;
#X obj 30 2880 flow.group;
#X text 175 2880 group data atoms in list of specified size;
#X obj 30 2907 flow.interval;
#X text 175 2907 measure time between flow events;
#X obj 30 2934 flow.less;
#X text 175 2934 numeric stream router \, like many [moses];
#X obj 30 2961 flow.less_eq;
#X text 175 2961 numeric stream router \, like many [moses];
#X obj 30 2988 flow.multiplex;
#X text 175 2988 control flow multiplexer;
#X obj 30 3015 flow.multiplex2~;
#X text 175 3015 audio stream stereo multiplexer;
#X obj 30 3042 flow.multiplex~;
#X text 175 3042 audio stream multiplexer;
#X obj 30 3069 flow.once;
#X text 175 3069 one message pass thru;
#X obj 30 3096 flow.pass;
#X text 175 3096 pass specified values;
#X obj 30 3123 flow.pass_if;
#X text 175 3123 pass values that accepted by predicate object;
#X obj 30 3150 flow.reject;
#X text 175 3150 reject specified values;
#X obj 30 3177 flow.reject_if;
#X text 175 3177 reject values by predicate;
#X obj 30 3204 flow.route;
#X text 175 3204 advanced message router;
#X obj 30 3231 flow.speedlim;
#X text 175 3231 control stream speed limiter;
#X obj 30 3258 flow.split;
#X text 175 3258 split data flow by external side-chain predicate;
#X obj 30 3285 flow.sync;
#X text 175 3285 bus with only hot inlets;
#X obj 30 3312 flow.tee~;
#X text 175 3312 separate audio and control streams;
#X obj 30 3339 replace;
#X text 175 3339 Replace atoms in data stream;
#X obj 20 3366 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3407 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3418 flt.biquad~;
#X text 175 3418 second order IIR filter.;
#X obj 30 3445 flt.bpf12~;
#X text 175 3445 Band-pass filter with 12/db per octave slope;
#X obj 30 3472 flt.bpf24~;
#X text 175 3472 Band-pass filter with 24/db per octave slope;
#X obj 30 3499 flt.c_bpf~;
#X text 175 3499 BPF coefficient calculator for biquad filter;
#X obj 30 3526 flt.c_highshelf~;
#X text 175 3526 Highshelf filter coefficient calculator for biquad;
#X obj 30 3553 flt.c_hpf~;
#X text 175 3553 HPF coefficient calculator for biquad filter;
#X obj 30 3580 flt.c_lowshelf~;
#X text 175 3580 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3607 flt.c_lpf~;
#X text 175 3607 LPF coefficient calculator for biquad filter;
#X obj 30 3634 flt.c_notch~;
#X text 175 3634 Band-reject coefficient calculator for biquad filter;
#X obj 30 3661 flt.c_peak~;
#X text 175 3661 Peaking equalizer calculator for biquad;
#X obj 30 3688 flt.dcblock2~;
#X text 175 3688 stereo DC blocker;
#X obj 30 3715 flt.dcblock~;
#X text 175 3715 mono DC blocker;
#X obj 30 3742 flt.eq_peak_cq~;
#X text 175 3742 constant-Q second order peaking equalizer section;
#X obj 30 3769 flt.eq_peak~;
#X text 175 3769 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3820 flt.highshelf~;
#X text 175 3820 gain boost|cut above some frequency;
#X obj 30 3847 flt.hpf12~;
#X text 175 3847 High-pass filter with 12/db per octave slope;
#X obj 30 3874 flt.hpf24~;
#X text 175 3874 High-pass filter with 24/db per octave slope;
#X obj 30 3901 flt.lowshelf~;
#X text 175 3901 gain boost|cut below some frequency;
#X obj 30 3928 flt.lpf12~;
#X text 175 3928 Low-pass filter with 12/db per octave slope;
#X obj 30 3955 flt.lpf24~;
#X text 175 3955 Low-pass filter with 24/db per octave slope;
#X obj 30 3982 flt.moog_vcf~;
#X text 175 3982 Moog Voltage Controlled Filter;
#X obj 30 4009 flt.notch~;
#X text 175 4009 band-rejection filter;
#X obj 30 4036 flt.resonbp~;
#X text 175 4036 Simple resonant bandpass filter;
#X obj 20 4063 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4104 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4115 fx.distortion~;
#X text 175 4115 cubic nonlinearity distortion;
#X obj 30 4142 fx.drone_box~;
#X text 175 4142 mono sympathetic resonance generator;
#X obj 30 4169 fx.echo~;
#X text 175 4169 simple echo effect;
#X obj 30 4196 fx.flanger~;
#X text 175 4196 mono flanging effect;
#X obj 30 4223 fx.freeverb2~;
#X text 175 4223 freeverb2 - stereo version of freeverb;
#X obj 30 4250 fx.freeverb~;
#X text 175 4250 freeverb - common used open-source reverb;
#X obj 30 4277 fx.freqshift~;
#X text 175 4277 frequency shifter or single-sideband ring modulation;
#X obj 30 4304 fx.greyhole~;
#X text 175 4304 A complex echo-like effect;
#X obj 30 4331 fx.looper~;
#X text 175 4331 One track looper;
#X obj 30 4358 fx.pitchshift~;
#X text 175 4358 simple pitch shifter based on 2 delay lines;
#X obj 30 4385 fx.sdelay~;
#X text 175 4385 smooth delay with a feedback control;
#X obj 30 4412 fx.wahwah~;
#X text 175 4412 digitized CryBaby wah pedal;
#X obj 30 4439 fx.zita_rev1~;
#X text 175 4439 Zita stereo reverb;
#X obj 20 4466 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4507 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4518 global.dict;
#X text 175 4518 global named dict object;
#X obj 30 4545 global.float;
#X text 175 4545 global named float object;
#X obj 30 4572 global.int;
#X text 175 4572 global named integer object;
#X obj 30 4599 global.list;
#X text 175 4599 global named list object;
#X obj 30 4626 global.mlist;
#X text 175 4626 global named mlist object;
#X obj 30 4653 global.set;
#X text 175 4653 global named set object;
#X obj 20 4680 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 4721 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4732 hw.arduino;
#X text 175 4732 Arduino device;
#X obj 20 4759 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4800 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4811 lfo.+square~;
#X text 175 4811 Positive low frequency square wave;
#X obj 30 4838 lfo.+tri~;
#X text 175 4838 Positive unit-amplitude low frequency triangle wave;
#X obj 30 4865 lfo.impulse~;
#X text 175 4865 Unit-amplitude low-frequency impulse train;
#X obj 30 4892 lfo.pulse~;
#X text 175 4892 Full-range unit-amplitude low frequency pulse train;
#X obj 30 4919 lfo.square~;
#X text 175 4919 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 4946 lfo.tri~;
#X text 175 4946 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 4973 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5014 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5025 list.^at;
#X text 175 5025 on input index(es) outputs list element(s);
#X obj 30 5052 list.^contains;
#X text 175 5052 on input atom or list checks if specified list
contains it;
#X obj 30 5079 list.^search;
#X text 175 5079 on input atom returns it index in list;
#X obj 30 5106 list.all_of;
#X text 175 5106 checks if all list atoms accepted by predicate;
#X obj 30 5133 list.any_of;
#X text 175 5133 checks if at least one list element is accepted by
predicate;
#X obj 30 5170 list.append;
#X text 175 5170 append atom or list to the end of input list;
#X obj 30 5197 list.apply_to;
#X text 175 5197 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5234 list.at;
#X text 175 5234 on input list outputs element(s) at specified
index(es);
#X obj 30 5261 list.choice;
#X text 175 5261 returns random element from list;
#X obj 30 5288 list.contains;
#X text 175 5288 on input list checks if it contains specified
subsequence;
#X obj 30 5315 list.count;
#X text 175 5315 returns the number of items that equal to specified
value;
#X obj 30 5342 list.count_if;
#X text 175 5342 returns the number of items that satisfy to external
predicate.;
#X obj 30 5379 list.delta;
#X text 175 5379 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5416 list.distribution;
#X text 175 5416 list value distribution;
#X obj 30 5443 list.do;
#X text 175 5443 iterate and modify list contents via side-chain;
#X obj 30 5470 list.each;
#X text 175 5470 maps each list value via external object(s);
#X obj 30 5497 list.enumerate;
#X text 175 5497 enumerates input list;
#X obj 30 5524 list.equal;
#X text 175 5524 checks if given lists are equal;
#X obj 30 5551 list.first;
#X text 175 5551 returns first list element;
#X obj 30 5578 list.gen;
#X text 175 5578 generates list of specified length via external
generator;
#X obj 30 5605 list.histogram;
#X text 175 5605 outputs distribution histogram;
#X obj 30 5632 list.insert;
#X text 175 5632 insert atom or list to the specified position of
input list;
#X obj 30 5659 list.integrator;
#X text 175 5659 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 5696 list.last;
#X text 175 5696 returns last list element;
#X obj 30 5723 list.length;
#X text 175 5723 returns the number of atoms in the list;
#X obj 30 5750 list.max;
#X text 175 5750 returns largest element in the list;
#X obj 30 5777 list.mean;
#X text 175 5777 calculates average of list of floats;
#X obj 30 5804 list.min;
#X text 175 5804 returns smallest element in the list;
#X obj 30 5831 list.none_of;
#X text 175 5831 checks if none of list atoms is accepted by
predicate;
#X obj 30 5858 list.normalize;
#X text 175 5858 normalizes float list values to get their sum = 1.0;
#X obj 30 5885 list.pass_if;
#X text 175 5885 leave only elements accepted by predicate;
#X obj 30 5912 list.prepend;
#X text 175 5912 prepend atom or list before input list;
#X obj 30 5939 list.product;
#X text 175 5939 calculates product of floats in list;
#X obj 30 5966 list.range;
#X text 175 5966 returns list smallest and largest value;
#X obj 30 5993 list.reduce;
#X text 175 5993 apply function of two arguments cumulatively to the
list;
#X obj 30 6020 list.remove;
#X text 175 6020 on input list remove element(s) at specified
positions;
#X obj 30 6047 list.remove_if;
#X text 175 6047 remove elements by predicate;
#X obj 30 6074 list.repack;
#X text 175 6074 repack input list to specified size;
#X obj 30 6101 list.repeat;
#X text 175 6101 creates new list by repeating given list specified
times;
#X obj 30 6128 list.resize;
#X text 175 6128 changes list size;
#X obj 30 6155 list.reverse;
#X text 175 6155 reverses the order of the elements in the list;
#X obj 30 6182 list.rldecode;
#X text 175 6182 Run-length list decoder (RLE);
#X obj 30 6209 list.rlencode;
#X text 175 6209 RLE (run-length encoding) for lists;
#X obj 30 6236 list.rotate;
#X text 175 6236 rotates list;
#X obj 30 6263 list.route;
#X text 175 6263 acts like [route] but for lists;
#X obj 30 6290 list.search;
#X text 175 6290 search specified items in input list;
#X obj 30 6317 list.separate;
#X text 175 6317 sends list elements one by one separately;
#X obj 30 6344 list.seq;
#X text 175 6344 numeric sequence list generator;
#X obj 30 6371 list.set;
#X text 175 6371 on input list set value at specified position;
#X obj 30 6398 list.shift;
#X text 175 6398 shifts the contents of the list with linear
interpolation;
#X obj 30 6425 list.shuffle;
#X text 175 6425 randomly rearranges elements in list;
#X obj 30 6452 list.slice;
#X text 175 6452 extract sublist;
#X obj 30 6479 list.sort;
#X text 175 6479 sorts list values by ascending order;
#X obj 30 6506 list.sort_with;
#X text 175 6506 sort list with user defined side-chain;
#X obj 30 6533 list.split;
#X text 175 6533 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 6570 list.stretch;
#X text 175 6570 stretches list - chenges its size with linear
interpolation.;
#X obj 30 6607 list.sum;
#X text 175 6607 calculates sum of floats in list;
#X obj 30 6634 list.unique;
#X text 175 6634 removes duplicates from input list;
#X obj 30 6661 list.unpack;
#X text 175 6661 unpack list elements to separate outlets;
#X obj 30 6688 list.unzip;
#X text 175 6688 splits list to N lists \, each to separate output;
#X obj 30 6715 list.walk;
#X text 175 6715 Walks thru the list;
#X obj 30 6742 list.zip;
#X text 175 6742 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 6793 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 6834 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6845 live.capture~;
#X text 175 6845 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 6882 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 6923 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6934 local.dict;
#X text 175 6934 local named dict object;
#X obj 30 6961 local.float;
#X text 175 6961 canvas-scoped named float variable;
#X obj 30 6988 local.int;
#X text 175 6988 canvas-scoped named integer variable;
#X obj 30 7015 local.list;
#X text 175 7015 local named list object;
#X obj 30 7042 local.mlist;
#X text 175 7042 local named mlist object;
#X obj 30 7069 local.set;
#X text 175 7069 local named set object;
#X obj 20 7096 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7137 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7148 math.abs;
#X text 175 7148 absolute value function;
#X obj 30 7175 math.acos;
#X text 175 7175 arc cosine function;
#X obj 30 7202 math.acosh;
#X text 175 7202 inverse hyperbolic cosine function;
#X obj 30 7229 math.and;
#X text 175 7229 operation AND for multiple arguments;
#X obj 30 7256 math.approx;
#X text 175 7256 check if input value approximately equal to pattern;
#X obj 30 7283 math.asin;
#X text 175 7283 arc sine function;
#X obj 30 7310 math.asinh;
#X text 175 7310 inverse hyperbolic sine function;
#X obj 30 7337 math.atan;
#X text 175 7337 arc tangent function;
#X obj 30 7364 math.atanh;
#X text 175 7364 inverse hyperbolic tangent function;
#X obj 30 7391 math.cbrt;
#X text 175 7391 cube root function;
#X obj 30 7418 math.ceil;
#X text 175 7418 round to smallest integral value not less than input
value;
#X obj 30 7445 math.cos;
#X text 175 7445 cosine function;
#X obj 30 7472 math.cosh;
#X text 175 7472 hyperbolic cosine function;
#X obj 30 7499 math.div;
#X text 175 7499 division (on lists too);
#X obj 30 7526 math.e;
#X text 175 7526 mathematical constant \, base of the natural
logarithm;
#X obj 30 7553 math.exp;
#X text 175 7553 exponential functions;
#X obj 30 7580 math.exp2;
#X text 175 7580 exponential functions;
#X obj 30 7607 math.expr;
#X text 175 7607 dynamic [expr];
#X obj 30 7634 math.floor;
#X text 175 7634 round to largest integral value not greater than x;
#X obj 30 7661 math.gcd;
#X text 175 7661 calculate greatest common divisor;
#X obj 30 7688 math.inf;
#X text 175 7688 infinity value that cannot be represented accurately;
#X obj 30 7715 math.lcm;
#X text 175 7715 calculate least common multiple;
#X obj 30 7742 math.log;
#X text 175 7742 logarithm functions;
#X obj 30 7769 math.log10;
#X text 175 7769 logarithm functions;
#X obj 30 7796 math.log2;
#X text 175 7796 logarithm functions;
#X obj 30 7823 math.mul;
#X text 175 7823 multiplication (on lists too);
#X obj 30 7850 math.nan;
#X text 175 7850 Not a Number \, unrepresentable value;
#X obj 30 7877 math.neg;
#X text 175 7877 negate function;
#X obj 30 7904 math.or;
#X text 175 7904 operation OR for multiple arguments;
#X obj 30 7931 math.pi;
#X text 175 7931 mathematical constant;
#X obj 30 7958 math.polyeval;
#X text 175 7958 evaluates the polynomial described by the
coefficients list;
#X obj 30 7985 math.reciprocal;
#X text 175 7985 calculate reciprocal number;
#X obj 30 8012 math.round;
#X text 175 8012 round to integral value \, regardless of rounding
direction;
#X obj 30 8039 math.round~;
#X text 175 8039 signal round;
#X obj 30 8066 math.sign;
#X text 175 8066 sign function;
#X obj 30 8093 math.sin;
#X text 175 8093 sine function;
#X obj 30 8120 math.sinh;
#X text 175 8120 hyperbolic sine function;
#X obj 30 8147 math.sqrt;
#X text 175 8147 square root function;
#X obj 30 8174 math.squared;
#X text 175 8174 value square;
#X obj 30 8201 math.tan;
#X text 175 8201 tangent function;
#X obj 30 8228 math.tanh;
#X text 175 8228 hyperbolic tangent function;
#X obj 30 8255 math.trunc;
#X text 175 8255 truncate to integer value;
#X obj 20 8282 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8323 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8334 midi.ctl2str;
#X text 175 8334 convert Standard MIDI Controllers number to name;
#X obj 30 8361 midi.event2ctl;
#X text 175 8361 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8388 midi.event2note;
#X text 175 8388 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8415 midi.event2prg;
#X text 175 8415 convert MidiEvent message to midi program change
value;
#X obj 30 8442 midi.file;
#X text 175 8442 standard midi file SMF reader and writer;
#X obj 30 8469 midi.key2str;
#X text 175 8469 convert key number to SPN name according to tonality;
#X obj 30 8496 midi.prg2str;
#X text 175 8496 convert GM Instrument number to name (string or
symbol);
#X obj 30 8523 midi.track;
#X text 175 8523 extract track from MidiFile;
#X obj 20 8550 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 8591 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8602 click~;
#X text 175 8602 Output single impulse on bang;
#X obj 30 8629 fluid~;
#X text 175 8629 FluidSynth SoundFont 2 player;
#X obj 30 8656 modplug~;
#X text 175 8656 MOD file player (using libmodplug);
#X obj 30 8683 speech.flite;
#X text 175 8683 render speech to array;
#X obj 20 8710 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 8751 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8762 msg;
#X text 175 8762 message constructor;
#X obj 30 8789 msg.onload;
#X text 175 8789 send message when patch loads;
#X obj 20 8816 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 8857 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8868 net.host2ip;
#X text 175 8868 returns IP address by DNS name;
#X obj 20 8895 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 8936 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8947 noise.crackle~;
#X text 175 8947 sparse noise generator;
#X obj 30 8974 noise.lfreq0~;
#X text 175 8974 sampled/held noise (piecewise constant);
#X obj 30 9001 noise.lfreq~;
#X text 175 9001 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9028 noise.pink~;
#X text 175 9028 Pink noise generator;
#X obj 30 9055 noise.white~;
#X text 175 9055 White noise generator;
#X obj 20 9082 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9123 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9134 osc.blit~;
#X text 175 9134 Bandlimited impulse train oscillator;
#X obj 30 9161 osc.impulse~;
#X text 175 9161 Bandlimited impulse train generator;
#X obj 30 9188 osc.pulse~;
#X text 175 9188 Bandlimited pulse train oscillator;
#X obj 30 9215 osc.saw4~;
#X text 175 9215 Bandlimited sawtooth wave;
#X obj 30 9242 osc.saw~;
#X text 175 9242 Alias-free sawtooth wave;
#X obj 30 9269 osc.sinfb~;
#X text 175 9269 Sine oscilator with feedback;
#X obj 30 9296 osc.sin~;
#X text 175 9296 Sine wave oscillator;
#X obj 30 9323 osc.square~;
#X text 175 9323 Bandlimited square wave oscillator;
#X obj 30 9350 osc.tri~;
#X text 175 9350 Bandlimited triangle wave oscillator;
#X obj 20 9377 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 9418 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9429 canvas.current;
#X text 175 9429 verbose information about current canvas;
#X obj 30 9456 canvas.top;
#X text 175 9456 verbose information about top-level canvas;
#X obj 30 9483 patch.args;
#X text 175 9483 Get patch or subpatch arguments;
#X obj 20 9510 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 9551 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9562 path.basename;
#X text 175 9562 outputs filename portion of pathname;
#X obj 30 9589 path.dirname;
#X text 175 9589 outputs directory portion of pathname;
#X obj 30 9616 path.exists;
#X text 175 9616 checks if given path exists;
#X obj 30 9643 path.lsdir;
#X text 175 9643 list directory contents;
#X obj 20 9670 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 9711 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9722 is_any;
#X text 175 9722 checks if input data has *any* type;
#X obj 30 9749 is_bang;
#X text 175 9749 checks if input data has *bang* type;
#X obj 30 9776 is_data;
#X text 175 9776 checks if input data has *data* type;
#X obj 30 9803 is_even;
#X text 175 9803 checks if input number is even;
#X obj 30 9830 is_file;
#X text 175 9830 checks if file exists and accessible;
#X obj 30 9857 is_float;
#X text 175 9857 checks if input data has *float* type;
#X obj 30 9884 is_list;
#X text 175 9884 checks if input data has *list* type;
#X obj 30 9911 is_odd;
#X text 175 9911 checks if input number is odd;
#X obj 30 9938 is_pointer;
#X text 175 9938 checks if input data has *pointer* type;
#X obj 30 9965 is_symbol;
#X text 175 9965 checks if input data has *symbol* type;
#X obj 20 9992 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 10033 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10044 preset.float;
#X text 175 10044 load/store float preset;
#X obj 30 10071 preset.list;
#X text 175 10071 load/store symbol preset;
#X obj 30 10098 preset.storage;
#X text 175 10098 preset storage control;
#X obj 30 10125 preset.symbol;
#X text 175 10125 load/store symbol preset;
#X obj 20 10152 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10204 prop.get;
#X text 175 10204 Property extractor;
#X obj 30 10231 prop.get~;
#X text 175 10231 Property extractor from sound stream;
#X obj 30 10258 prop.set;
#X text 175 10258 Property injector;
#X obj 20 10285 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 10326 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10337 proto.firmata;
#X text 175 10337 Firmata Arduino protocol support;
#X obj 20 10364 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 10405 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10416 random.discrete;
#X text 175 10416 random weighted integers on interval [0 \, n);
#X obj 30 10443 random.float;
#X text 175 10443 random float generator in specified range;
#X obj 30 10470 random.gauss;
#X text 175 10470 gaussian random distribution;
#X obj 30 10497 random.int;
#X text 175 10497 Random integer generator in specified range;
#X obj 30 10524 random.linear;
#X text 175 10524 random linear distribution;
#X obj 30 10551 random.pw_const;
#X text 175 10551 piecewise constant random distribution;
#X obj 30 10578 random.pw_lin;
#X text 175 10578 piecewise linear random distribution;
#X obj 20 10605 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 10646 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10657 snd.file;
#X text 175 10657 Sound file loader on steroids;
#X obj 20 10684 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 10725 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10736 pan.cos~;
#X text 175 10736 two channel equal power sine/cosine panner;
#X obj 30 10763 pan.linsig~;
#X text 175 10763 two channel linear panner with signal control;
#X obj 30 10790 pan.lin~;
#X text 175 10790 two channel linear panner;
#X obj 30 10817 pan.spread~;
#X text 175 10817 spreads input channels across the stereo field;
#X obj 30 10844 pan.sqrt~;
#X text 175 10844 two channel equal power square root panner;
#X obj 30 10871 spat.pan4~;
#X text 175 10871 GMEM SPAT: 4-outputs spatializer;
#X obj 30 10898 spat.pan8~;
#X text 175 10898 GMEM SPAT: 8-outputs spatializer;
#X obj 20 10925 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 10966 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10977 string;
#X text 175 10977 string constructor;
#X obj 30 11004 string.contains;
#X text 175 11004 checks if given string contains specified substring;
#X obj 30 11031 string.ends_with;
#X text 175 11031 checks if given string ends with specified suffix;
#X obj 30 11058 string.equal;
#X text 175 11058 check strings for equality;
#X obj 30 11085 string.format;
#X text 175 11085 formats string like printf.;
#X obj 30 11112 string.join;
#X text 175 11112 joins (concatenates) strings with separator;
#X obj 30 11139 string.length;
#X text 175 11139 number of characters in string (unicode supported);
#X obj 30 11166 string.remove;
#X text 175 11166 remove substring from input string;
#X obj 30 11193 string.replace;
#X text 175 11193 replace from one substring to another in input
string;
#X obj 30 11220 string.split;
#X text 175 11220 split string by separator;
#X obj 30 11247 string.starts_with;
#X text 175 11247 checks if given string starts with specified prefix;
#X obj 30 11274 string.substr;
#X text 175 11274 extract substring from input string;
#X obj 30 11301 string2symbol;
#X text 175 11301 converts string to symbol;
#X obj 20 11328 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 11369 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11380 symbol.equal;
#X text 175 11380 check symbols for equality;
#X obj 30 11407 symbol.length;
#X text 175 11407 number of characters in symbol (unicode supported);
#X obj 30 11434 symbol.num_compare;
#X text 175 11434 numeric symbol compare;
#X obj 20 11461 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 11502 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11513 synth.bee3~;
#X text 175 11513 Hammond-oid organ FM synthesis instrument;
#X obj 30 11540 synth.birds~;
#X text 175 11540 bird singing generator;
#X obj 30 11567 synth.church_bell~;
#X text 175 11567 generic church bell modal model;
#X obj 30 11594 synth.dubdub~;
#X text 175 11594 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 11631 synth.eguitar~;
#X text 175 11631 simple electric guitar model with steel strings;
#X obj 30 11658 synth.fgrain~;
#X text 175 11658 file granulator from STK;
#X obj 30 11685 synth.ks~;
#X text 175 11685 Karplus-Strong string;
#X obj 30 11712 synth.marimba~;
#X text 175 11712 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 11749 synth.rhodey~;
#X text 175 11749 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 11776 synth.risset_arp~;
#X text 175 11776 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 11803 synth.risset_tone~;
#X text 175 11803 Jean Claude Risset's endless glissando;
#X obj 30 11830 synth.shakers~;
#X text 175 11830 various percussion sounds from STK library;
#X obj 30 11857 synth.wurley~;
#X text 175 11857 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 11884 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 11925 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11936 system.cursor;
#X text 175 11936 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 11973 system.getenv;
#X text 175 11973 Get system environment variables;
#X obj 30 12000 system.hostname;
#X text 175 12000 outputs system hostname;
#X obj 30 12027 system.memsize;
#X text 175 12027 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12064 system.memused;
#X text 175 12064 returns the process physical memory use - current
and peak;
#X obj 30 12091 system.screen_size;
#X text 175 12091 returns current screen size in pixels;
#X obj 30 12118 system.shell;
#X text 175 12118 run external command in separate process;
#X obj 20 12145 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12186 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12197 tl.bang;
#X text 175 12197 Timeline bang (with possible delay);
#X obj 30 12227 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12224 Timeline section;
#X obj 30 12247 tl.timeline;
#X text 175 12247 Timeline - event scheduler;
#X obj 30 12274 tl.toggle;
#X text 175 12274 Timeline bang;
#X obj 30 12301 tl.transport;
#X text 175 12301 Timeline transport control;
#X obj 20 12328 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 12369 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12383 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 12380 array view with cursor and selection;
#X obj 30 12406 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 12403 A bang... that's all;
#X obj 30 12429 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 12426 colorchooser widget;
#X obj 30 12452 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 12449 Display GUI object;
#X obj 30 12475 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 12472 GUI for turning DSP on/off;
#X obj 30 12498 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 12495 envelope editor widget;
#X obj 30 12521 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 12518 UI gain control;
#X obj 30 12544 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 12541 simple icon with button capabilities;
#X obj 30 12567 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 12564 value increment/decrement;
#X obj 30 12590 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 12587 keyboard widget;
#X obj 30 12613 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 12610 knob widget;
#X obj 30 12636 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 12633 simple label widget;
#X obj 30 12659 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 12656 Hyperlink widget;
#X obj 30 12682 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 12679 The matrix of toggles has you.;
#X obj 30 12705 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 12702 Dropdown menu;
#X obj 30 12728 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 12725 Shows peak and rms signal level;
#X obj 30 12751 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 12748 counterpart of the vanilla [nbx];
#X obj 30 12774 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 12771 counterpart of the vanilla [nbx] for signal;
#X obj 30 12797 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 12794 Preset manager;
#X obj 30 12820 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 12817 counterpart of the vanilla radio toggle;
#X obj 30 12843 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 12840 range slider;
#X obj 30 12866 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 12863 Scope GUI object;
#X obj 30 12889 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 12886 counterpart of the vanilla slider;
#X obj 30 12912 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 12909 2D slider widget;
#X obj 30 12935 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 12932 Multiple slider widget;
#X obj 30 12958 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 12955 Spectroscope GUI object;
#X obj 30 12981 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 12978 displays a list of text buttons or text toggles;
#X obj 30 13004 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13001 modern toggle widget;
#X obj 20 13024 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 13065 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13076 vector.distance;
#X text 175 13076 returns euclidean distance between two points;
#X obj 30 13103 vector.dot;
#X text 175 13103 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 13154 vector.length;
#X text 175 13154 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 13191 vector.normalize;
#X text 175 13191 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13218 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13218 version: v0.6 \, license: GPL3;
#X obj 20 13237 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;