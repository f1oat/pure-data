#N canvas 0 0 785 555 12;
#X declare -lib ceammc;
#X obj 622 50 cnv 1 143 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 622 50 Envelope data type;
#X obj 1 1 cnv 5 765 40 empty empty envelope 20 20 0 20 -104026 -4096
0;
#X obj 403 11 ceammc/envelope;
#X obj 537 11 ceammc/env;
#X obj 635 11 env;
#X obj 682 11 envelope;
#X obj 210 80 cnv 1 555 190 empty empty empty 17 7 0 10 -257983 -1 0;
#X text 215 80 Data type for sound envelope. Contains points specified
by time and value. Points could have stop property - to execute oly
part of envelope and stop on this point. So multisegment envelopes
could be created;
#X text 215 150 Point also has segment type property \, that defines
following segment curve - it could be *step* \, *line* (default) or
*exp* (exponential);
#X text 215 205 Exponential segment also has curve property: if 0 -
(linear) <0 (concave \, negatively curved) >0 (convex \, positively
curved);
#X msg 50 298 ar 100 200 \, bang;
#X msg 232 298 exp 0 30 -2 1 100 -4 0 40 4 0.5 30 2 0 \, bang;
#X msg 69 327 adsr 10 30 60 150 \, bang;
#X msg 318 327 line 0.1 40 0.9 20 0.3 60 0 \, bang;
#X msg 88 356 ear 10 -2 60 -2 \, bang;
#X msg 318 356 sigmoid 0 40 14 1 100 8 0 \, bang;
#X msg 107 385 eadsr 20 -5 70 -12 30 100 -7 \, bang;
#X msg 462 385 sin2 0 80 1 80 0 \, bang;
#X obj 50 414 envelope;
#X obj 50 442 env->array env_arr;
#N canvas 0 22 450 300 (subpatch) 0;
#X array env_arr 100 float 1;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X coords 0 1 100 0 400 100 1;
#X restore 50 485 graph;
#X obj 20 617 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 622 cnv 5 90 26 empty empty arguments: 4 10 0 14 -262144
-49933 0;
#X text 110 657 1\.;
#X text 150 657 list;
#X obj 246 658 cnv 1 39 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 657 adsr: ADSR envelope: attack(ms) \, decay(ms) \, sustain(%)
\, release(ms).;
#X text 110 692 2\.;
#X text 150 692 list;
#X obj 246 693 cnv 1 31 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 692 asr: ASR envelope: attack(ms) \, release(ms) - with
sustain stop point.;
#X text 110 727 3\.;
#X text 150 727 list;
#X obj 246 728 cnv 1 24 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 727 ar: AR envelope: attack(ms) \, release(ms).;
#X text 110 747 4\.;
#X text 150 747 list;
#X obj 246 748 cnv 1 47 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 747 eadsr: exponential ADSR envelope: attack(ms) \, attack_curve
\, decay(ms) \, decay_curve \, sustain(%) \, release(ms) \, release_curve.;
#X text 110 797 5\.;
#X text 150 797 list;
#X obj 246 798 cnv 1 39 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 797 easr: exponential ASR envelope: attack(ms) \, attack_curve
\, release(ms) \, release_curve - with sustain stop point.;
#X text 110 832 6\.;
#X text 150 832 list;
#X obj 246 833 cnv 1 31 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 832 ear: exponential ASR envelope: attack(ms) \, attack_curve
\, release(ms) \, release_curve - no sustain point.;
#X obj 20 877 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 882 cnv 5 98 26 empty empty properties: 4 10 0 14 -262144
-49933 0;
#X msg 110 917 @length;
#X text 245 917 (readonly) Get total envelope time length. Type: float.
Units: ms. Default value: 0\. Min value: 0\.;
#X msg 110 959 @npoints;
#X text 245 959 (readonly) Get number of points. Type: int. Default
value: 0\. Min value: 0\.;
#X msg 110 1001 @points;
#X text 245 1001 (readonly) Get list of point times (ms). Type: list.;
#X msg 110 1030 @stops;
#X text 245 1030 (readonly) Get list of stop points. Type: list.;
#X msg 110 1059 @values;
#X text 245 1059 (readonly) Get list of point values. Type: list.;
#X obj 20 1098 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1103 cnv 5 73 26 empty empty methods: 4 10 0 14 -262144
-49933 0;
#X msg 110 1138 add_point;
#X text 245 1138 add envelope point. Arguments are:;
#X obj 255 1161 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1161 MS: point time. Type: float. Min value: 0\.;
#X obj 255 1184 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1184 VALUE: point value. Type: float.;
#X obj 255 1207 cnv 1 85 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1207 [IS_STOP=0]: is stop point. Type: int. Allowed values:
0 \, 1\.;
#X obj 255 1230 cnv 1 85 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1230 [TYPE=line]: segment type: step \, linear \, exponential
\, sin^2 or sigmoid curve. Type: symbol. Allowed values: step \, line
\, exp \, sin2 \, sigmoid.;
#X obj 255 1283 cnv 1 70 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1283 [CURVE=1]: exponential curve degree: 0 (linear) <0
(concave \, negatively curved) >0 (convex \, positively curved). Type:
float.;
#X msg 110 1338 add_seg;
#X text 245 1338 add segment to the end of envelope. On empty envelope
adds start point at 0ms and 0 value. Arguments are:;
#X obj 255 1376 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1376 TYPE: segment type. Type: symbol. Allowed values:
step \, line \, sin2 \, exp \, sigmoid.;
#X obj 255 1414 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1414 MS: segment length. Type: float.;
#X obj 255 1437 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1437 VALUE: end segment value. Type: float.;
#X obj 255 1460 cnv 1 70 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1460 [CURVE=0]: curve (for exp and sigmoid type). Type:
float.;
#X msg 110 1485 adsr;
#X text 245 1485 creates ADSR envelope with one stop point. Arguments
are:;
#X obj 255 1508 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1508 MS: attack time. Type: float. Min value: 0\.;
#X obj 255 1531 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1531 MS: decay time. Type: float. Min value: 0\.;
#X obj 255 1554 cnv 1 15 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1554 %: sustain level. Type: float. Range: 0\...100\.;
#X obj 255 1577 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1577 MS: release time. Type: float. Min value: 0\.;
#X msg 110 1602 ar;
#X text 245 1602 creates AR envelope without stop points. Arguments
are:;
#X obj 255 1625 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1625 MS: attack time. Type: float. Min value: 0\.;
#X obj 255 1648 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1648 MS: release time. Type: float. Min value: 0\.;
#X msg 110 1673 asr;
#X text 245 1673 creates ASR envelope with one stop point. Arguments
are:;
#X obj 255 1696 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1696 MS: attack time. Type: float. Min value: 0\.;
#X obj 255 1719 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1719 MS: release time. Type: float. Min value: 0\.;
#X msg 110 1744 clear;
#X text 245 1744 remove all envelope points.;
#X msg 110 1771 eadsr;
#X text 245 1771 creates exponential ADSR envelope with one stop point.
Arguments are:;
#X obj 255 1809 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1809 MS: attack time. Type: float. Min value: 0\.;
#X obj 255 1832 cnv 1 98 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1832 ATTACK_CURVE: attack segment curve. Type: float.;
#X obj 255 1855 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1855 MS: decay time. Type: float. Min value: 0\.;
#X obj 255 1878 cnv 1 90 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1878 DECAY_CURVE: decay segment curve. Type: float.;
#X obj 255 1901 cnv 1 15 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1901 %: sustain level. Type: float. Range: 0\...100\.;
#X obj 255 1924 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1924 MS: release time. Type: float. Min value: 0\.;
#X obj 255 1947 cnv 1 105 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1947 RELEASE_CURVE: release segment curve. Type: float.;
#X msg 110 1972 ear;
#X text 245 1972 creates exponential AR envelope without stop points.
Arguments are:;
#X obj 255 2010 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2010 MS: attack time. Type: float.;
#X obj 255 2033 cnv 1 98 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2033 ATTACK_CURVE: attack segment curve. Type: float.;
#X obj 255 2056 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2056 MS: release time. Type: float.;
#X obj 255 2079 cnv 1 105 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2079 RELEASE_CURVE: release segment curve. Type: float.;
#X msg 110 2104 easr;
#X text 245 2104 creates exponential AR envelope with one stop point.
Arguments are:;
#X obj 255 2142 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2142 MS: attack time. Type: float. Min value: 0\.;
#X obj 255 2165 cnv 1 98 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2165 ATTACK_CURVE: attack segment curve. Type: float.;
#X obj 255 2188 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2188 MS: release time. Type: float. Min value: 0\.;
#X obj 255 2211 cnv 1 105 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2211 RELEASE_CURVE: release segment curve. Type: float.;
#X msg 110 2236 exp;
#X text 245 2236 creates exponential-segmented envelope with arbitrary
number of segments. Arguments are:;
#X obj 255 2274 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2274 VAL0: begin value. Type: float.;
#X obj 255 2297 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2297 MS: line length. Type: float. Min value: 1\.;
#X obj 255 2320 cnv 1 52 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2320 CURVE0: segment curve. Type: float.;
#X obj 255 2343 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2343 VAL1: value. Type: float.;
#X obj 255 2366 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2366 [LEN1]: segment length. Type: float.;
#X obj 255 2389 cnv 1 62 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2389 [CURVE1]: segment curve. Type: float.;
#X obj 255 2412 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2412 [VAL2]: value. Type: float.;
#X msg 110 2437 line;
#X text 245 2437 creates line-segmented envelope with arbitrary number
of segments. Arguments are:;
#X obj 255 2475 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2475 VAL0: begin value. Type: float.;
#X obj 255 2498 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2498 MS: line length. Type: float. Min value: 1\.;
#X obj 255 2521 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2521 VAL1: value. Type: float.;
#X obj 255 2544 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2544 [LEN1]: segment length. Type: float.;
#X obj 255 2567 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2567 [VAL2]: value. Type: float.;
#X msg 110 2592 remove_point;
#X text 245 2592 remove envelope point by specified time. Arguments
are:;
#X obj 255 2615 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2615 IDX: point index. Type: int. Min value: 0\.;
#X msg 110 2640 set_point;
#X text 245 2640 set point time and value. Arguments are:;
#X obj 255 2663 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2663 IDX: point index. Type: int. Min value: 0\.;
#X obj 255 2686 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2686 MS: point time. Type: float. Min value: 0\.;
#X obj 255 2709 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2709 VALUE: point value. Type: int. Min value: 0\.;
#X obj 255 2732 cnv 1 85 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2732 [IS_STOP=0]: stop point. Type: int. Allowed values:
0 \, 1\.;
#X msg 110 2757 set_point_time;
#X text 245 2757 set point time. Arguments are:;
#X obj 255 2780 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2780 IDX: point index. Type: int. Min value: 0\.;
#X obj 255 2803 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2803 MS: point time. Type: float. Min value: 0\.;
#X msg 110 2828 set_point_value;
#X text 245 2828 set point time. Arguments are:;
#X obj 255 2851 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2851 IDX: point index. Type: int. Min value: 0\.;
#X obj 255 2874 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2874 VALUE: point value. Type: int. Min value: 0\.;
#X msg 110 2899 set_seg_type;
#X text 245 2899 set segment type. Arguments are:;
#X obj 255 2922 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2922 IDX: segment index \, starting from 0\. Type: int.
Min value: 0\.;
#X obj 255 2960 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 2960 TYPE: segment type. Type: symbol. Allowed values:
step \, line \, sin2 \, exp \, sigmoid.;
#X msg 110 3000 set_stop_point;
#X text 245 3000 set stop-point. Arguments are:;
#X obj 255 3023 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3023 IDX: point index. Type: int. Min value: 0\.;
#X obj 255 3046 cnv 1 59 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3046 IS_STOP: stop point. Type: int. Allowed values: 0
\, 1\.;
#X msg 110 3071 sigmoid;
#X text 245 3071 creates sigmoid-segmented envelope with arbitrary
number of segments. Arguments are:;
#X obj 255 3109 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3109 VAL0: begin value. Type: float.;
#X obj 255 3132 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3132 MS: line length. Type: float. Min value: 1\.;
#X obj 255 3155 cnv 1 52 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3155 CURVE0: segment curve. Type: float.;
#X obj 255 3178 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3178 VAL1: value. Type: float.;
#X obj 255 3201 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3201 [LEN1]: segment length. Type: float.;
#X obj 255 3224 cnv 1 62 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3224 [CURVE1]: segment curve. Type: float.;
#X obj 255 3247 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3247 [VAL2]: value. Type: float.;
#X msg 110 3272 sin2;
#X text 245 3272 creates quadratic sine-segmented envelope with arbitrary
number of segments. Arguments are:;
#X obj 255 3310 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3310 VAL0: begin value. Type: float.;
#X obj 255 3333 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3333 MS: line length. Type: float. Min value: 1\.;
#X obj 255 3356 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3356 VAL1: value. Type: float.;
#X obj 255 3379 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3379 [LEN1]: segment length. Type: float.;
#X obj 255 3402 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3402 [VAL2]: value. Type: float.;
#X msg 110 3427 step;
#X text 245 3427 creates step-segmented envelope with arbitrary number
of segments. Arguments are:;
#X obj 255 3465 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3465 VAL0: begin value. Type: float.;
#X obj 255 3488 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3488 MS: step length. Type: float. Min value: 1\.;
#X obj 255 3511 cnv 1 37 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3511 VAL1: value. Type: float.;
#X obj 255 3534 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3534 [LEN1]: segment length. Type: float.;
#X obj 255 3557 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3557 [VAL2]: value. Type: float.;
#X msg 110 3582 *;
#X text 245 3582 multiply all envelope points to specified value. Arguments
are:;
#X obj 255 3620 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3620 VALUE: value. Type: float.;
#X msg 110 3645 +;
#X text 245 3645 add specified value to all envelope points. Arguments
are:;
#X obj 255 3668 cnv 1 45 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3668 VALUE: value. Type: float.;
#X msg 110 3693 >>;
#X text 245 3693 shift all envelope point by specified time in milliseconds.
Arguments are:;
#X obj 255 3731 cnv 1 22 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 3731 MS: value. Type: float.;
#X obj 20 3766 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 3771 cnv 5 64 26 empty empty inlets: 4 10 0 14 -262144
-49933 0;
#X text 110 3772 1\.;
#X text 150 3772 *bang*;
#X text 245 3772 outputs current envelope.;
#X text 150 3792 *data*;
#X text 245 3792 set new envelope and output it.;
#X obj 20 3822 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 3827 cnv 5 73 26 empty empty outlets: 4 10 0 14 -262144
-49933 0;
#X text 110 3828 1\.;
#X text 245 3828 data output.;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 67 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 115 45 ::;
#X obj 131 48 ui.link @title env @url ceammc.env-help.pd;
#X obj 1 3878 cnv 5 765 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 3881 library: ceammc v0.9.2;
#X text 505 3893 see also:;
#X obj 579 3893 env->array;
#X obj 667 3893 env->vline;
#N canvas 10 3900 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.9.2;
#X text 10 54 object:;
#X text 120 54 envelope;
#X text 10 76 category:;
#X text 120 76 env;
#X text 10 98 since:;
#X text 120 98 0.5;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3 or later;
#X text 10 164 keywords:;
#X text 120 164 envelope;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 3900 pd info;
#X connect 11 0 19 0;
#X connect 13 0 19 0;
#X connect 15 0 19 0;
#X connect 17 0 19 0;
#X connect 19 0 20 0;
#X connect 12 0 19 0;
#X connect 14 0 19 0;
#X connect 16 0 19 0;
#X connect 18 0 19 0;