#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 20 292 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 333 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 344 array.bpm;
#X text 200 344 BPM calculator;
#X obj 30 371 array.copy;
#X text 200 371 copy samples from one array to another;
#X obj 30 398 array.do;
#X text 200 398 iterate and modify array content via side-chain;
#X obj 30 425 array.each;
#X text 200 425 process each array elements via side-chain;
#X obj 30 452 array.fill;
#X text 200 452 fill array with single value or pattern;
#X obj 30 479 array.hist;
#X text 200 479 calculates array histogram;
#X obj 30 506 array.mean;
#X text 200 506 calculates array arithmetic mean value;
#X obj 30 533 array.minmax;
#X text 200 533 find array min and max element value;
#X obj 30 560 array.play~;
#X text 200 560 array player with variable speed and amplitude;
#X obj 30 587 array.plot;
#X text 200 587 array data plotter;
#X obj 30 614 array.plot~;
#X text 200 614 plot signal on specified array;
#X obj 30 641 array.resample;
#X text 200 641 array resampler;
#X obj 30 668 array.rms;
#X text 200 668 calculates root mean square value for array;
#X obj 30 695 array.set;
#X text 200 695 set array content from list;
#X obj 30 722 array.stddev;
#X text 200 722 calculates standard deviation for array values;
#X obj 30 749 array.stretch;
#X text 200 749 array time-stretch \, pitch-shift or rate-change;
#X obj 30 776 array.sum;
#X text 200 776 calculates sum of array elements;
#X obj 30 803 array.sum2;
#X text 200 803 calculates sum of squares of array elements;
#X obj 30 830 array.variance;
#X text 200 830 calculates variance of array values;
#X obj 30 857 array.vplay;
#X text 200 857 simple array player for using with vline~;
#X obj 30 884 array.window;
#X text 200 884 fill array with window;
#X obj 30 911 plot.geomspace~;
#X text 200 911 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 951 plot.hist~;
#X text 200 951 calculate and output signal histogram;
#X obj 30 978 plot.linspace~;
#X text 200 978 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1018 plot.logspace~;
#X text 200 1018 outputs numbers spaced evenly on a log scale;
#X obj 30 1045 plot.response~;
#X text 200 1045 output amp/phase freq response to impulse;
#X obj 20 1072 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1113 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1124 ceammc.search;
#X text 200 1124 ceammc library search object;
#X obj 30 1154 ui.link @title [function] @url function-help.pd;
#X text 200 1151 named function;
#X obj 30 1176 function.call;
#X text 200 1176 call named function;
#X obj 30 1203 gain~;
#X text 200 1203 multislot signal gain;
#X obj 30 1230 logger;
#X text 200 1230 advanced data logger;
#X obj 30 1257 matrix~;
#X text 200 1257 signal routing matrix;
#X obj 30 1284 metro.pattern;
#X text 200 1284 metro with rhythmic patterns;
#X obj 30 1311 metro.random;
#X text 200 1311 metro random bang with specified range;
#X obj 30 1338 metro.seq;
#X text 200 1338 metro sequencer;
#X obj 30 1365 mix~;
#X text 200 1365 multislot signal mixer;
#X obj 30 1392 nsig~;
#X text 200 1392 Mulitchannel converter from control to audio rate;
#X obj 30 1419 obj.props;
#X text 200 1419 property extractor;
#X obj 30 1446 radio;
#X text 200 1446 float index to outlet values as radio switch;
#X obj 30 1473 spring;
#X text 200 1473 float value "spring";
#X obj 30 1500 sync;
#X text 200 1500 value synchronization;
#X obj 30 1527 window;
#X text 200 1527 returns window value by given window position;
#X obj 30 1554 xdac~;
#X text 200 1554 dac~ with channel ranges;
#X obj 30 1581 xfade2~;
#X text 200 1581 multi stereo-signal crossfade;
#X obj 30 1608 xfade~;
#X text 200 1608 multi signal crossfade;
#X obj 20 1635 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1676 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1687 chaos.gbman0;
#X text 200 1687 Gingerbreadman map chaotic generator;
#X obj 30 1714 chaos.gbman0~;
#X text 200 1714 Gingerbreadman map chaotic generator;
#X obj 30 1741 chaos.jong;
#X text 200 1741 Peter de Jong attractor;
#X obj 30 1768 chaos.logistic;
#X text 200 1768 Logistic map chaotic generator;
#X obj 30 1795 chaos.std0;
#X text 200 1795 Standard map chaotic generator;
#X obj 30 1822 chaos.std0~;
#X text 200 1822 Standard map chaotic generator;
#X obj 20 1849 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1890 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1901 array.p2s;
#X text 200 1901 convert array phase [0\..1] to sample position;
#X obj 30 1928 array.s2p;
#X text 200 1928 convert sample position to phase range [0\..1];
#X obj 30 1955 conv.amp2dbfs;
#X text 200 1955 convert from amplitude to decibel full scale;
#X obj 30 1982 conv.amp2dbfs~;
#X text 200 1982 convert from amplitude to decibel full scale;
#X obj 30 2009 conv.bits2bang;
#X text 200 2009 convert list of bits to bang events;
#X obj 30 2036 conv.bits2int;
#X text 200 2036 convert list of bits to integer;
#X obj 30 2063 conv.bits2note;
#X text 200 2063 convert list of bits to note events;
#X obj 30 2090 conv.bits2pos;
#X text 200 2090 convert list of bits to list of bit position;
#X obj 30 2117 conv.bpm2hz;
#X text 200 2117 converts BPM to frequency in herz;
#X obj 30 2144 conv.bpm2ms;
#X text 200 2144 convert frequency in BPM to period in milliseconds;
#X obj 30 2171 conv.bpm2sec;
#X text 200 2171 convert frequency in BPM to period in seconds;
#X obj 30 2198 conv.car2pol;
#X text 200 2198 convert cartesian coords to polar;
#X obj 30 2225 conv.cc2amp;
#X text 200 2225 convert from MIDI Control Change range;
#X obj 30 2252 conv.dbfs2amp;
#X text 200 2252 convert decibel full scale to amplitude;
#X obj 30 2279 conv.dbfs2amp~;
#X text 200 2279 convert decibel full scale to amplitude;
#X obj 30 2306 conv.degree2key;
#X text 200 2306 convert scale degree to key;
#X obj 30 2333 conv.hex2int;
#X text 200 2333 hex symbol to int value;
#X obj 30 2360 conv.int2bits;
#X text 200 2360 convert integer to list of bits;
#X obj 30 2387 conv.lin2curve;
#X text 200 2387 map linear to exponential range with 0 allowed.;
#X obj 30 2414 conv.lin2exp;
#X text 200 2414 maps linear range to exponential range;
#X obj 30 2441 conv.lin2lin;
#X text 200 2441 convert from one linear range to another;
#X obj 30 2468 conv.lin2lin~;
#X text 200 2468 convert from one linear range to another for signals;
#X obj 30 2495 conv.list2props;
#X text 200 2495 converts list to series of property messages;
#X obj 30 2522 conv.midi2freq;
#X text 200 2522 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2562 conv.ms2bpm;
#X text 200 2562 convert period in milliseconds to frequency in BPM;
#X obj 30 2589 conv.ms2samp;
#X text 200 2589 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2629 conv.ms2samp~;
#X text 200 2629 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2669 conv.phase2rad;
#X text 200 2669 convert phase value [0-1] to radians [0-2π];
#X obj 30 2696 conv.phase2rad~;
#X text 200 2696 convert phase value [0-1] to radians [0-2π];
#X obj 30 2723 conv.pitch2midi;
#X text 200 2723 converts symbol pitch name to MIDI note number;
#X obj 30 2750 conv.pol2car;
#X text 200 2750 convert from polar coordinates to cartesian;
#X obj 30 2777 conv.rad2phase;
#X text 200 2777 convert radians value to phase;
#X obj 30 2804 conv.rad2phase~;
#X text 200 2804 convert radians value to phase;
#X obj 30 2831 conv.samp2ms;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.samp2ms~;
#X text 200 2858 convert samples to milliseconds according to samplerate;
#X obj 30 2885 conv.samp2sec;
#X text 200 2885 convert samples to time according to samplerate;
#X obj 30 2912 conv.sec2bpm;
#X text 200 2912 convert period in seconds to frequency in BPM;
#X obj 30 2939 conv.sec2samp;
#X text 200 2939 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2979 conv.sec2str;
#X text 200 2979 converts float time in seconds to formated symbol
(or string);
#X obj 30 3006 conv.sig2float~;
#X text 200 3006 convert signal to floats;
#X obj 30 3033 conv.str2sec;
#X text 200 3033 converts formatted time to float value in seconds;
#X obj 20 3060 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3101 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3112 data.copy;
#X text 200 3112 make copy for any data types: MList \, Set etc...;
#X obj 30 3139 data.dict;
#X text 200 3139 dictionary container: store values by key;
#X obj 30 3166 data.fifo;
#X text 200 3166 First-In-First-Out (FIFO) queue data container;
#X obj 30 3193 data.float;
#X text 200 3193 robust float object;
#X obj 30 3220 data.int;
#X text 200 3220 robust int object;
#X obj 30 3247 data.list;
#X text 200 3247 list container;
#X obj 30 3274 data.mlist;
#X text 200 3274 multidimensional list container;
#X obj 30 3301 data.set;
#X text 200 3301 container that store unique elements;
#X obj 30 3328 data.set2list;
#X text 200 3328 converts set to list;
#X obj 30 3355 dict.contains;
#X text 200 3355 predicate to check if dict contains a keys;
#X obj 30 3382 dict.each;
#X text 200 3382 map each value in dict;
#X obj 30 3409 dict.from_list;
#X text 200 3409 creates dictionary from list;
#X obj 30 3436 dict.get;
#X text 200 3436 output dict values;
#X obj 30 3463 dict.keys;
#X text 200 3463 get list of dict keys;
#X obj 30 3490 dict.pass;
#X text 200 3490 passes specified keys in dict;
#X obj 30 3517 dict.reject;
#X text 200 3517 rejects specified keys from dict;
#X obj 30 3544 dict.size;
#X text 200 3544 dictionary size;
#X obj 30 3571 dict.to_list;
#X text 200 3571 converts dictionary to plain list;
#X obj 30 3598 dict.values;
#X text 200 3598 dictionary values as mlist;
#X obj 30 3625 mlist.flatten;
#X text 200 3625 flatten nested mlist;
#X obj 30 3652 rtree.to_list;
#X text 200 3652 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3679 set.contains;
#X text 200 3679 check if specified element is in set;
#X obj 30 3706 set.diff;
#X text 200 3706 difference between two sets;
#X obj 30 3733 set.equal;
#X text 200 3733 checks if two sets are equal (contains same elements);
#X obj 30 3760 set.intersect;
#X text 200 3760 output intersection of given sets;
#X obj 30 3787 set.size;
#X text 200 3787 get number of elements in set;
#X obj 30 3814 set.symdiff;
#X text 200 3814 symmetric difference between two sets;
#X obj 30 3841 set.union;
#X text 200 3841 output union of given sets;
#X obj 20 3868 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3909 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3920 dyn.comp2~;
#X text 200 3920 stereo dynamic range compressor;
#X obj 30 3947 dyn.comp~;
#X text 200 3947 mono dynamic range compressors;
#X obj 30 3974 dyn.gate2~;
#X text 200 3974 stereo signal gate;
#X obj 30 4001 dyn.gate~;
#X text 200 4001 mono signal gate;
#X obj 30 4028 dyn.limit2~;
#X text 200 4028 stereo 1176LN Peak Limiter;
#X obj 30 4055 dyn.limit~;
#X text 200 4055 mono 1176LN Peak Limiter;
#X obj 30 4082 dyn.softclip~;
#X text 200 4082 soft signal clip;
#X obj 20 4109 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4150 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4161 env.adsr~;
#X text 200 4161 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4188 env.ar~;
#X text 200 4188 Attack/Release envelope generator;
#X obj 30 4215 env.asr~;
#X text 200 4215 Attack/Sustain/Release envelope generator;
#X obj 30 4242 env.concat;
#X text 200 4242 Envelope concatenation;
#X obj 30 4269 env.follow~;
#X text 200 4269 Envelope follower with independent attack and release
times;
#X obj 30 4296 env.mix;
#X text 200 4296 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4336 env.smooth~;
#X text 200 4336 An envelope with an exponential attack and release;
#X obj 30 4363 env.tscale;
#X text 200 4363 Envelope time-scale;
#X obj 30 4390 env.tshift;
#X text 200 4390 Envelope time-shift (horizontal);
#X obj 30 4417 env.vscale;
#X text 200 4417 Envelope value-scale;
#X obj 30 4444 env2array;
#X text 200 4444 Renders envelope to specified array;
#X obj 30 4471 env2vline;
#X text 200 4471 Converts envelope to bunch of vline messages;
#X obj 30 4498 envelope;
#X text 200 4498 Envelope data type;
#X obj 30 4525 vline2env;
#X text 200 4525 Converts vline messages to env;
#X obj 20 4552 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4593 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4604 expand_env;
#X text 200 4604 Substitute environment variables in data stream;
#X obj 30 4631 flow.append;
#X text 200 4631 append message to flow stream;
#X obj 30 4658 flow.change;
#X text 200 4658 rejects redundant input values;
#X obj 30 4685 flow.count;
#X text 200 4685 control flow event counter;
#X obj 30 4712 flow.delay;
#X text 200 4712 enhanced version on vanilla delay object;
#X obj 30 4739 flow.demultiplex;
#X text 200 4739 control flow demultiplexer;
#X obj 30 4766 flow.demultiplex2~;
#X text 200 4766 audio stream stereo demultiplexer;
#X obj 30 4793 flow.demultiplex~;
#X text 200 4793 audio stream demultiplexer;
#X obj 30 4820 flow.dollar;
#X text 200 4820 data flow dollar converter;
#X obj 30 4847 flow.dup;
#X text 200 4847 message duplicator;
#X obj 30 4874 flow.float;
#X text 200 4874 pass floats;
#X obj 30 4901 flow.gate;
#X text 200 4901 control flow gate. [spigot] analog;
#X obj 30 4928 flow.greater;
#X text 200 4928 numeric stream router;
#X obj 30 4955 flow.greater_eq;
#X text 200 4955 numeric stream router;
#X obj 30 4982 flow.group;
#X text 200 4982 group input atoms in list of specified size;
#X obj 30 5009 flow.interval;
#X text 200 5009 measure time between flow events;
#X obj 30 5036 flow.less;
#X text 200 5036 numeric stream router \, like many [moses];
#X obj 30 5063 flow.less_eq;
#X text 200 5063 numeric stream router \, like many [moses];
#X obj 30 5090 flow.list2many;
#X text 200 5090 routes list element with message selectors;
#X obj 30 5117 flow.match;
#X text 200 5117 route data flow by regexp match;
#X obj 30 5144 flow.mem;
#X text 200 5144 store data flow in memory;
#X obj 30 5171 flow.multiplex;
#X text 200 5171 control flow multiplexer;
#X obj 30 5198 flow.multiplex2~;
#X text 200 5198 audio stream stereo multiplexer;
#X obj 30 5225 flow.multiplex~;
#X text 200 5225 audio stream multiplexer;
#X obj 30 5252 flow.once;
#X text 200 5252 one message pass thru;
#X obj 30 5279 flow.pack;
#X text 200 5279 flow pack;
#X obj 30 5306 flow.pass;
#X text 200 5306 pass specified values;
#X obj 30 5333 flow.pass_if;
#X text 200 5333 pass values that accepted by predicate object;
#X obj 30 5360 flow.pipe;
#X text 200 5360 enhanced version on vanilla pipe object;
#X obj 30 5387 flow.queue;
#X text 200 5387 multi-channel control flow sync queue (or FIFO);
#X obj 30 5414 flow.reject;
#X text 200 5414 reject specified values;
#X obj 30 5441 flow.reject_if;
#X text 200 5441 reject values by predicate;
#X obj 30 5468 flow.ring;
#X text 200 5468 dataflow ring buffer;
#X obj 30 5495 flow.route;
#X text 200 5495 advanced message router;
#X obj 30 5522 flow.select;
#X text 200 5522 vanilla flow on steroids;
#X obj 30 5549 flow.space;
#X text 200 5549 space in time messages received at the same logical
time;
#X obj 30 5576 flow.speedlim;
#X text 200 5576 control stream speed limiter;
#X obj 30 5603 flow.split;
#X text 200 5603 split data flow by external side-chain predicate;
#X obj 30 5630 flow.stack;
#X text 200 5630 any message stack;
#X obj 30 5657 flow.sync;
#X text 200 5657 bus with only hot inlets;
#X obj 30 5684 flow.sync_pack;
#X text 200 5684 flow pack with all hot inlets;
#X obj 30 5711 flow.tee~;
#X text 200 5711 separate audio and control streams;
#X obj 30 5738 replace;
#X text 200 5738 Replace atoms in data stream;
#X obj 30 5765 route.float;
#X text 200 5765 separate float messages from other types;
#X obj 20 5792 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5833 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5844 flt.biquad~;
#X text 200 5844 second order IIR filter.;
#X obj 30 5871 flt.bpf12~;
#X text 200 5871 Two pole band-pass butterworth filter;
#X obj 30 5898 flt.bpf24~;
#X text 200 5898 Four pole band-pass butterworth filter;
#X obj 30 5925 flt.c_apf;
#X text 200 5925 Allpass filter coefficient calculator for biquad;
#X obj 30 5952 flt.c_bpf~;
#X text 200 5952 BPF coefficient calculator for biquad filter;
#X obj 30 5979 flt.c_highshelf~;
#X text 200 5979 Highshelf filter coefficient calculator for biquad;
#X obj 30 6006 flt.c_hpf;
#X text 200 6006 HPF coefficient calculator for biquad filter;
#X obj 30 6033 flt.c_hpf~;
#X text 200 6033 HPF coefficient calculator for biquad filter;
#X obj 30 6060 flt.c_lowshelf~;
#X text 200 6060 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6087 flt.c_lpf;
#X text 200 6087 LPF coefficient calculator for biquad filter;
#X obj 30 6114 flt.c_lpf~;
#X text 200 6114 LPF coefficient calculator for biquad filter;
#X obj 30 6141 flt.c_notch;
#X text 200 6141 Notch filter coefficient calculator for biquad;
#X obj 30 6168 flt.c_notch~;
#X text 200 6168 Band-reject coefficient calculator for biquad filter;
#X obj 30 6195 flt.c_peak~;
#X text 200 6195 Peaking equalizer calculator for biquad;
#X obj 30 6222 flt.c_pole;
#X text 200 6222 One-pole coefficient calculator for biquad filter;
#X obj 30 6249 flt.dcblock2~;
#X text 200 6249 stereo DC blocker;
#X obj 30 6276 flt.dcblock~;
#X text 200 6276 mono DC blocker;
#X obj 30 6303 flt.eq10~;
#X text 200 6303 graphic 10 band equalizer;
#X obj 30 6330 flt.eq_peak_cq~;
#X text 200 6330 constant-Q second order peaking equalizer section;
#X obj 30 6357 flt.eq_peak~;
#X text 200 6357 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6412 flt.fb_comb~;
#X text 200 6412 feedback comb filter;
#X obj 30 6439 flt.fbank5x1~;
#X text 200 6439 5 band one octave butterworth filterbank;
#X obj 30 6466 flt.ff_comb~;
#X text 200 6466 feed forward comb filter;
#X obj 30 6493 flt.freqz;
#X text 200 6493 compute the frequency response of a digital filter;
#X obj 30 6520 flt.freqz~;
#X text 200 6520 compute the frequency response of a digital filter;
#X obj 30 6547 flt.highshelf~;
#X text 200 6547 gain boost|cut above some frequency;
#X obj 30 6574 flt.hpf12~;
#X text 200 6574 High-pass second order Butterworth filter;
#X obj 30 6601 flt.hpf24~;
#X text 200 6601 High-pass fourth order Butterworth filter;
#X obj 30 6628 flt.lowshelf~;
#X text 200 6628 gain boost|cut below some frequency;
#X obj 30 6655 flt.lpf12~;
#X text 200 6655 Low-pass second order Butterworth filter;
#X obj 30 6682 flt.lpf24~;
#X text 200 6682 Low-pass fourth order Butterworth filter;
#X obj 30 6709 flt.median;
#X text 200 6709 Median control flow filter;
#X obj 30 6736 flt.moog_vcf~;
#X text 200 6736 Moog Voltage Controlled Filter;
#X obj 30 6763 flt.notch~;
#X text 200 6763 band-rejection filter;
#X obj 30 6790 flt.resonbp~;
#X text 200 6790 Simple resonant bandpass filter;
#X obj 20 6817 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6858 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6869 fx.bitdown~;
#X text 200 6869 bit downer and downsampler effect;
#X obj 30 6896 fx.chorus~;
#X text 200 6896 Chorus effect;
#X obj 30 6923 fx.distortion1~;
#X text 200 6923 distortion #1 from Guitarix effects set;
#X obj 30 6950 fx.distortion2~;
#X text 200 6950 distortion #2 from Guitarix effects set;
#X obj 30 6977 fx.distortion3~;
#X text 200 6977 simple distortion #3 from Guitarix effects set;
#X obj 30 7004 fx.distortion~;
#X text 200 7004 cubic nonlinearity distortion;
#X obj 30 7031 fx.drive~;
#X text 200 7031 Guitarix drive effect;
#X obj 30 7058 fx.drone_box~;
#X text 200 7058 mono sympathetic resonance generator;
#X obj 30 7085 fx.echo~;
#X text 200 7085 simple echo effect;
#X obj 30 7112 fx.flanger~;
#X text 200 7112 mono flanging effect;
#X obj 30 7139 fx.freeverb2~;
#X text 200 7139 freeverb2 - stereo version of freeverb;
#X obj 30 7166 fx.freeverb~;
#X text 200 7166 freeverb - common used open-source reverb;
#X obj 30 7193 fx.freqshift~;
#X text 200 7193 frequency shifter or single-sideband ring modulation;
#X obj 30 7220 fx.granulator~;
#X text 200 7220 simple input stream granulator;
#X obj 30 7247 fx.greyhole~;
#X text 200 7247 A complex echo-like effect;
#X obj 30 7274 fx.infrev~;
#X text 200 7274 port of Infinity VST plugin from airwindows;
#X obj 30 7301 fx.looper~;
#X text 200 7301 One track looper;
#X obj 30 7328 fx.pitchshift_s~;
#X text 200 7328 signal version of fx.pitchshift~;
#X obj 30 7355 fx.pitchshift~;
#X text 200 7355 simple pitch shifter based on 2 delay lines;
#X obj 30 7382 fx.recho~;
#X text 200 7382 reversed echo effect;
#X obj 30 7409 fx.sdelay~;
#X text 200 7409 smooth delay with a feedback control;
#X obj 30 7436 fx.vocoder~;
#X text 200 7436 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7476 fx.wahwah~;
#X text 200 7476 digitized CryBaby wah pedal;
#X obj 30 7503 fx.zita_rev1~;
#X text 200 7503 Zita stereo reverb;
#X obj 20 7530 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7571 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7582 global.dict;
#X text 200 7582 global named dict object;
#X obj 30 7609 global.float;
#X text 200 7609 global named float object;
#X obj 30 7636 global.int;
#X text 200 7636 global named integer object;
#X obj 30 7663 global.list;
#X text 200 7663 global named list object;
#X obj 30 7690 global.mlist;
#X text 200 7690 global named mlist object;
#X obj 30 7717 global.set;
#X text 200 7717 global named set object;
#X obj 20 7744 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7785 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7796 hw.apple_smc;
#X text 200 7796 query the system management control in Apples;
#X obj 30 7823 hw.apple_sms;
#X text 200 7823 query the sudden motion sensor in Apples;
#X obj 30 7850 hw.arduino;
#X text 200 7850 Arduino device;
#X obj 30 7877 hw.cpu_temp;
#X text 200 7877 get CPU temperature;
#X obj 30 7904 hw.display;
#X text 200 7904 get/set display properties;
#X obj 30 7931 hw.kbd_light;
#X text 200 7931 Get/set keyboard light on some devices;
#X obj 30 7958 hw.serial;
#X text 200 7958 serial port device;
#X obj 20 7985 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8026 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8040 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8037 faust realtime compilation;
#X obj 30 8065 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8062 faust compiled ui object;
#X obj 20 8087 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8128 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8139 lfo.+pulse~;
#X text 200 8139 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8166 lfo.+saw~;
#X text 200 8166 Positive unit-amplitude low frequency saw wave;
#X obj 30 8193 lfo.+square~;
#X text 200 8193 Positive low frequency square wave;
#X obj 30 8220 lfo.+tri~;
#X text 200 8220 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8247 lfo.impulse~;
#X text 200 8247 Unit-amplitude low-frequency impulse train;
#X obj 30 8274 lfo.mosc~;
#X text 200 8274 multi-oscillator with various waveforms;
#X obj 30 8301 lfo.pulse~;
#X text 200 8301 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8328 lfo.saw~;
#X text 200 8328 Full-range unit-amplitude low frequency saw;
#X obj 30 8355 lfo.square~;
#X text 200 8355 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8382 lfo.tri~;
#X text 200 8382 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8409 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8450 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8461 list.^at;
#X text 200 8461 on input index(es) outputs list element(s);
#X obj 30 8488 list.^contains;
#X text 200 8488 checks if input atom is found in the list;
#X obj 30 8515 list.^search;
#X text 200 8515 on input atom returns it index in list;
#X obj 30 8542 list.all_of;
#X text 200 8542 checks if all list atoms accepted by predicate;
#X obj 30 8569 list.any_of;
#X text 200 8569 checks if at least one list element is accepted by
predicate;
#X obj 30 8596 list.append;
#X text 200 8596 append atom or list to the end of input list;
#X obj 30 8623 list.apply_to;
#X text 200 8623 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8663 list.at;
#X text 200 8663 outputs list element(s) at specified index(es);
#X obj 30 8690 list.choice;
#X text 200 8690 outputs random element from list;
#X obj 30 8717 list.contains;
#X text 200 8717 checks if input list contains specified atoms;
#X obj 30 8744 list.count;
#X text 200 8744 output the number of items that equal to specified
value;
#X obj 30 8771 list.count_if;
#X text 200 8771 output the number of items that satisfy to external
predicate;
#X obj 30 8798 list.delta;
#X text 200 8798 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8838 list.distribution;
#X text 200 8838 list value distribution;
#X obj 30 8865 list.do;
#X text 200 8865 iterate and modify list contents via side-chain;
#X obj 30 8892 list.each;
#X text 200 8892 maps each list value via external side-chain;
#X obj 30 8919 list.enumerate;
#X text 200 8919 enumerates input list;
#X obj 30 8946 list.equal;
#X text 200 8946 checks if given lists are equal;
#X obj 30 8973 list.first;
#X text 200 8973 returns first list element;
#X obj 30 9000 list.gen;
#X text 200 9000 generates list of specified length via external generator;
#X obj 30 9027 list.histogram;
#X text 200 9027 outputs distribution histogram;
#X obj 30 9054 list.insert;
#X text 200 9054 insert atom or list to the specified position of input
list;
#X obj 30 9081 list.integrator;
#X text 200 9081 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9121 list.last;
#X text 200 9121 output last list element;
#X obj 30 9148 list.length;
#X text 200 9148 output the number of atoms in the list;
#X obj 30 9175 list.max;
#X text 200 9175 output largest element in the list;
#X obj 30 9202 list.mean;
#X text 200 9202 calculates average of list of floats;
#X obj 30 9229 list.min;
#X text 200 9229 returns smallest element in the list;
#X obj 30 9256 list.none_of;
#X text 200 9256 checks if none of list atoms is accepted by predicate;
#X obj 30 9283 list.normalize;
#X text 200 9283 normalizes float list values to get their sum = 1.0;
#X obj 30 9310 list.pass_if;
#X text 200 9310 leave only elements accepted by predicate;
#X obj 30 9337 list.prepend;
#X text 200 9337 prepend atom or list before input list;
#X obj 30 9364 list.product;
#X text 200 9364 calculates product of floats in list;
#X obj 30 9391 list.range;
#X text 200 9391 output list smallest and largest value;
#X obj 30 9418 list.reduce;
#X text 200 9418 apply function of two arguments cumulatively to the
list;
#X obj 30 9445 list.remove;
#X text 200 9445 remove list element(s) at specified positions;
#X obj 30 9472 list.remove_if;
#X text 200 9472 remove elements by predicate;
#X obj 30 9499 list.repack;
#X text 200 9499 repack list to specified size;
#X obj 30 9526 list.repeat;
#X text 200 9526 output new list by repeating input list specified
times;
#X obj 30 9553 list.resample;
#X text 200 9553 resample list with specified ratio;
#X obj 30 9580 list.resize;
#X text 200 9580 changes list size;
#X obj 30 9607 list.reverse;
#X text 200 9607 reverses the order of the elements in the list;
#X obj 30 9634 list.rldecode;
#X text 200 9634 Run-length list decoder (RLE);
#X obj 30 9661 list.rlencode;
#X text 200 9661 RLE (run-length encoding) for lists;
#X obj 30 9688 list.rotate;
#X text 200 9688 rotates list;
#X obj 30 9715 list.route;
#X text 200 9715 acts like [route] but for lists;
#X obj 30 9742 list.search;
#X text 200 9742 search specified items in input list;
#X obj 30 9769 list.separate;
#X text 200 9769 sends list elements one by one separately;
#X obj 30 9796 list.seq;
#X text 200 9796 numeric sequence list generator;
#X obj 30 9823 list.set;
#X text 200 9823 set list value at specified position;
#X obj 30 9850 list.shift;
#X text 200 9850 shifts the contents of the list with linear interpolation;
#X obj 30 9877 list.shuffle;
#X text 200 9877 randomly rearranges elements in list;
#X obj 30 9904 list.slice;
#X text 200 9904 extract sublist;
#X obj 30 9931 list.sort;
#X text 200 9931 sorts list values by ascending order;
#X obj 30 9958 list.sort_with;
#X text 200 9958 sort list with user defined side-chain;
#X obj 30 9985 list.split;
#X text 200 9985 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 10025 list.stretch;
#X text 200 10025 stretches list - changes its size with linear interpolation;
#X obj 30 10052 list.sum;
#X text 200 10052 calculates sum of floats in list;
#X obj 30 10079 list.unique;
#X text 200 10079 removes duplicates from input list;
#X obj 30 10106 list.unpack;
#X text 200 10106 unpack list elements to separate outlets;
#X obj 30 10133 list.unzip;
#X text 200 10133 splits list to N lists \, each to separate output;
#X obj 30 10160 list.walk;
#X text 200 10160 Walks thru the list;
#X obj 30 10187 list.zip;
#X text 200 10187 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10242 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10283 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10294 live.capture~;
#X text 200 10294 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10334 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10375 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10386 local.dict;
#X text 200 10386 local named dict object;
#X obj 30 10413 local.float;
#X text 200 10413 canvas-scoped named float variable;
#X obj 30 10440 local.int;
#X text 200 10440 canvas-scoped named integer variable;
#X obj 30 10467 local.list;
#X text 200 10467 local named list object;
#X obj 30 10494 local.mlist;
#X text 200 10494 local named mlist object;
#X obj 30 10521 local.set;
#X text 200 10521 local named set object;
#X obj 20 10548 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10589 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10600 math.abs;
#X text 200 10600 absolute value function;
#X obj 30 10627 math.abs~;
#X text 200 10627 absolute value function for signals;
#X obj 30 10654 math.acos;
#X text 200 10654 arc cosine function;
#X obj 30 10681 math.acosh;
#X text 200 10681 inverse hyperbolic cosine function;
#X obj 30 10708 math.acosh~;
#X text 200 10708 hyperbolic arc cosine for signals;
#X obj 30 10735 math.acos~;
#X text 200 10735 arc cosine function for signals;
#X obj 30 10762 math.and;
#X text 200 10762 operation AND for multiple arguments;
#X obj 30 10789 math.approx;
#X text 200 10789 check if input value approximately equal to pattern;
#X obj 30 10816 math.asin;
#X text 200 10816 arc sine function;
#X obj 30 10843 math.asinh;
#X text 200 10843 inverse hyperbolic sine function;
#X obj 30 10870 math.asinh~;
#X text 200 10870 hyperbolic arc sine for signals;
#X obj 30 10897 math.asin~;
#X text 200 10897 arc sine for signals;
#X obj 30 10924 math.atan;
#X text 200 10924 arc tangent function;
#X obj 30 10951 math.atanh;
#X text 200 10951 inverse hyperbolic tangent function;
#X obj 30 10978 math.atanh~;
#X text 200 10978 hyperbolic arc tangent for signals;
#X obj 30 11005 math.atan~;
#X text 200 11005 arc tangent for signals;
#X obj 30 11032 math.cabs~;
#X text 200 11032 magnitude of a complex signals;
#X obj 30 11059 math.carg~;
#X text 200 11059 phase angle of a complex signals;
#X obj 30 11086 math.cbrt;
#X text 200 11086 cube root function;
#X obj 30 11113 math.cbrt~;
#X text 200 11113 cube root function for signals;
#X obj 30 11140 math.cdiv~;
#X text 200 11140 division of complex signals;
#X obj 30 11167 math.ceil;
#X text 200 11167 round to smallest integral value not less than input
value;
#X obj 30 11194 math.ceil~;
#X text 200 11194 round to smallest integral value not less than input
value;
#X obj 30 11221 math.cexp~;
#X text 200 11221 exponent of a complex signals;
#X obj 30 11248 math.cmul~;
#X text 200 11248 multiplication of complex signals;
#X obj 30 11275 math.cos;
#X text 200 11275 cosine function;
#X obj 30 11302 math.cosh;
#X text 200 11302 hyperbolic cosine function;
#X obj 30 11329 math.cosh~;
#X text 200 11329 hyperbolic cosine for signals;
#X obj 30 11356 math.cos~;
#X text 200 11356 cosine function;
#X obj 30 11383 math.div;
#X text 200 11383 division (on lists too);
#X obj 30 11410 math.e;
#X text 200 11410 mathematical constant \, base of the natural logarithm;
#X obj 30 11437 math.erf;
#X text 200 11437 error function;
#X obj 30 11464 math.erf~;
#X text 200 11464 error function for signals;
#X obj 30 11491 math.exp;
#X text 200 11491 exponential functions;
#X obj 30 11518 math.exp2;
#X text 200 11518 exponential functions;
#X obj 30 11545 math.exp2~;
#X text 200 11545 base-2 exponential for signal;
#X obj 30 11572 math.expr;
#X text 200 11572 dynamic [expr];
#X obj 30 11599 math.exp~;
#X text 200 11599 base-e exponential for signal;
#X obj 30 11626 math.floor;
#X text 200 11626 round to largest integral value not greater than
x;
#X obj 30 11653 math.floor~;
#X text 200 11653 round to largest integral value not greater than
x;
#X obj 30 11680 math.gamma;
#X text 200 11680 gamma function;
#X obj 30 11707 math.gamma~;
#X text 200 11707 gamma function for floating point signals;
#X obj 30 11734 math.gcd;
#X text 200 11734 calculate greatest common divisor;
#X obj 30 11761 math.inf;
#X text 200 11761 infinity value that cannot be represented accurately;
#X obj 30 11788 math.inf~;
#X text 200 11788 inifinity signal generator;
#X obj 30 11815 math.lcm;
#X text 200 11815 calculate least common multiple;
#X obj 30 11842 math.lgamma;
#X text 200 11842 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11869 math.lgamma~;
#X text 200 11869 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11909 math.log;
#X text 200 11909 natural logarithm;
#X obj 30 11936 math.log10;
#X text 200 11936 logarithm functions;
#X obj 30 11963 math.log10~;
#X text 200 11963 natural logarithm;
#X obj 30 11990 math.log2;
#X text 200 11990 logarithm functions;
#X obj 30 12017 math.log2~;
#X text 200 12017 base-2 logarithm;
#X obj 30 12044 math.log~;
#X text 200 12044 natural logarithm;
#X obj 30 12071 math.mul;
#X text 200 12071 multiplication (on lists too);
#X obj 30 12098 math.nan;
#X text 200 12098 Not a Number \, unrepresentable value;
#X obj 30 12125 math.nan~;
#X text 200 12125 signal NaN;
#X obj 30 12152 math.neg;
#X text 200 12152 negate function;
#X obj 30 12179 math.or;
#X text 200 12179 operation OR for multiple arguments;
#X obj 30 12206 math.pi;
#X text 200 12206 mathematical constant;
#X obj 30 12233 math.pi~;
#X text 200 12233 mathematical constant;
#X obj 30 12260 math.polyeval;
#X text 200 12260 evaluates the polynomial described by the coefficients
list;
#X obj 30 12287 math.reciprocal;
#X text 200 12287 calculate reciprocal number;
#X obj 30 12314 math.reciprocal~;
#X text 200 12314 calculate reciprocal number for signals;
#X obj 30 12341 math.round;
#X text 200 12341 round to integral value \, regardless of rounding
direction;
#X obj 30 12368 math.round~;
#X text 200 12368 signal round;
#X obj 30 12395 math.sign;
#X text 200 12395 sign function;
#X obj 30 12422 math.sin;
#X text 200 12422 sine function;
#X obj 30 12449 math.sinh;
#X text 200 12449 hyperbolic sine function;
#X obj 30 12476 math.sinh~;
#X text 200 12476 hyperbolic sine for signals;
#X obj 30 12503 math.sin~;
#X text 200 12503 sine function;
#X obj 30 12530 math.sqrt;
#X text 200 12530 square root function;
#X obj 30 12557 math.sqrt~;
#X text 200 12557 square root for signal;
#X obj 30 12584 math.squared;
#X text 200 12584 value square;
#X obj 30 12611 math.squared~;
#X text 200 12611 signal value square;
#X obj 30 12638 math.sync_add;
#X text 200 12638 sync addition;
#X obj 30 12665 math.sync_and;
#X text 200 12665 sync logical AND operation;
#X obj 30 12692 math.sync_div;
#X text 200 12692 sync division;
#X obj 30 12719 math.sync_eq;
#X text 200 12719 sync equal numbers check;
#X obj 30 12746 math.sync_ge;
#X text 200 12746 sync greater equal numbers compare;
#X obj 30 12773 math.sync_gt;
#X text 200 12773 sync greater then numbers compare;
#X obj 30 12800 math.sync_le;
#X text 200 12800 sync less equal numbers compare;
#X obj 30 12827 math.sync_lshift;
#X text 200 12827 sync signed bit left shift;
#X obj 30 12854 math.sync_lt;
#X text 200 12854 sync less then numbers compare;
#X obj 30 12881 math.sync_mod;
#X text 200 12881 sync remainder of modulo division (float or integer);
#X obj 30 12908 math.sync_mul;
#X text 200 12908 sync multiplication;
#X obj 30 12935 math.sync_ne;
#X text 200 12935 sync numbers for not equality;
#X obj 30 12962 math.sync_or;
#X text 200 12962 sync logical OR operation;
#X obj 30 12989 math.sync_rshift;
#X text 200 12989 sync signed bit right shift;
#X obj 30 13016 math.sync_sub;
#X text 200 13016 sync subtraction;
#X obj 30 13043 math.sync_xor;
#X text 200 13043 sync logical XOR operation;
#X obj 30 13070 math.tan;
#X text 200 13070 tangent function;
#X obj 30 13097 math.tanh;
#X text 200 13097 hyperbolic tangent function;
#X obj 30 13124 math.tanh~;
#X text 200 13124 hyperbolic tangent for signals;
#X obj 30 13151 math.tan~;
#X text 200 13151 tangent function;
#X obj 30 13178 math.trunc;
#X text 200 13178 truncate to integer value;
#X obj 30 13205 math.trunc~;
#X text 200 13205 truncate to integer value;
#X obj 20 13232 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13273 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13284 midi.cc;
#X text 200 13284 enhanced version of vanilla ctlin;
#X obj 30 13311 midi.clock;
#X text 200 13311 midi clock toolbox;
#X obj 30 13338 midi.ctl2str;
#X text 200 13338 convert Standard MIDI Controllers number to name;
#X obj 30 13365 midi.event2ctl;
#X text 200 13365 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13392 midi.event2note;
#X text 200 13392 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13419 midi.event2prg;
#X text 200 13419 convert MidiEvent message to midi program change
value;
#X obj 30 13446 midi.file;
#X text 200 13446 standard midi file SMF reader and writer;
#X obj 30 13473 midi.kbd;
#X text 200 13473 computer keyboard midi;
#X obj 30 13500 midi.key2str;
#X text 200 13500 convert key number to SPN name according to tonality;
#X obj 30 13527 midi.oct;
#X text 200 13527 midi octave transpose;
#X obj 30 13554 midi.prg2str;
#X text 200 13554 convert GM Instrument number to name (string or symbol);
#X obj 30 13581 midi.sustain;
#X text 200 13581 sustain pedal emulation;
#X obj 30 13608 midi.sysex;
#X text 200 13608 sysex input messages as list;
#X obj 30 13635 midi.track;
#X text 200 13635 extract track from MidiFile;
#X obj 30 13662 midi.tuning;
#X text 200 13662 apply tuning to midi messages;
#X obj 30 13689 midi.vramp;
#X text 200 13689 apply crescendo or diminuendo for midi message flow;
#X obj 30 13716 midi.vrand;
#X text 200 13716 midi velocity randomizer;
#X obj 20 13743 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13784 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13795 click~;
#X text 200 13795 Output single impulse on bang;
#X obj 30 13822 fluid~;
#X text 200 13822 FluidSynth SoundFont 2 player;
#X obj 30 13849 modplug~;
#X text 200 13849 MOD file player (using libmodplug);
#X obj 30 13876 sfizz~;
#X text 200 13876 SFZ format sample player;
#X obj 30 13903 speech.flite;
#X text 200 13903 render speech to array;
#X obj 30 13930 speech.flite~;
#X text 200 13930 render speech to array;
#X obj 20 13957 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14009 loadexpr;
#X text 200 14009 send message when patch loads;
#X obj 30 14036 msg;
#X text 200 14036 message constructor;
#X obj 30 14063 msg.after;
#X text 200 14063 send specified message after incoming message;
#X obj 30 14090 msg.onload;
#X text 200 14090 send message when patch loads;
#X obj 20 14117 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 14158 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14169 net.host2ip;
#X text 200 14169 returns IP address by DNS name;
#X obj 20 14196 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14237 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14248 noise.baker;
#X text 200 14248 Part of a-chaos library;
#X obj 30 14275 noise.clifford;
#X text 200 14275 Part of a-chaos library;
#X obj 30 14302 noise.collatz;
#X text 200 14302 Part of a-chaos library;
#X obj 30 14329 noise.crackle~;
#X text 200 14329 sparse noise generator;
#X obj 30 14356 noise.duffing;
#X text 200 14356 Part of a-chaos library;
#X obj 30 14383 noise.ginger;
#X text 200 14383 Gingerbreadman map chaotic generator;
#X obj 30 14410 noise.henon;
#X text 200 14410 Part of a-chaos library;
#X obj 30 14437 noise.henon_heilles;
#X text 200 14437 Part of a-chaos library;
#X obj 30 14464 noise.henon_phase;
#X text 200 14464 Part of a-chaos library;
#X obj 30 14491 noise.henonf;
#X text 200 14491 Part of a-chaos library;
#X obj 30 14518 noise.ikeda;
#X text 200 14518 Part of a-chaos library;
#X obj 30 14545 noise.lfreq0~;
#X text 200 14545 sampled/held noise (piecewise constant);
#X obj 30 14572 noise.lfreq~;
#X text 200 14572 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14599 noise.lorenz;
#X text 200 14599 Part of a-chaos library;
#X obj 30 14626 noise.lyapunov;
#X text 200 14626 Part of a-chaos library;
#X obj 30 14653 noise.navier_stokes;
#X text 200 14653 Part of a-chaos library;
#X obj 30 14680 noise.pink~;
#X text 200 14680 Pink noise generator;
#X obj 30 14707 noise.rossler;
#X text 200 14707 Part of a-chaos library;
#X obj 30 14734 noise.stein;
#X text 200 14734 Part of a-chaos library;
#X obj 30 14761 noise.torus;
#X text 200 14761 Part of a-chaos library;
#X obj 30 14788 noise.verhulst;
#X text 200 14788 Part of a-chaos library;
#X obj 30 14815 noise.white~;
#X text 200 14815 White noise generator;
#X obj 20 14842 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14883 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14894 osc.blit~;
#X text 200 14894 Bandlimited impulse train oscillator;
#X obj 30 14921 osc.impulse~;
#X text 200 14921 Bandlimited impulse train generator;
#X obj 30 14948 osc.pulse~;
#X text 200 14948 Bandlimited pulse train oscillator;
#X obj 30 14975 osc.saw4~;
#X text 200 14975 Bandlimited sawtooth wave;
#X obj 30 15002 osc.saw~;
#X text 200 15002 Alias-free sawtooth wave;
#X obj 30 15029 osc.sinfb~;
#X text 200 15029 Sine oscilator with feedback;
#X obj 30 15056 osc.sin~;
#X text 200 15056 Sine wave oscillator;
#X obj 30 15083 osc.square~;
#X text 200 15083 Bandlimited square wave oscillator;
#X obj 30 15110 osc.tri~;
#X text 200 15110 Bandlimited triangle wave oscillator;
#X obj 20 15137 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 15178 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15189 canvas.current;
#X text 200 15189 verbose information about current canvas;
#X obj 30 15216 canvas.dir;
#X text 200 15216 current canvas directory;
#X obj 30 15243 canvas.name;
#X text 200 15243 current canvas name;
#X obj 30 15270 canvas.path;
#X text 200 15270 current canvas fullpath;
#X obj 30 15297 canvas.top;
#X text 200 15297 verbose information about top-level canvas;
#X obj 30 15324 patch.args;
#X text 200 15324 Get patch or subpatch arguments;
#X obj 30 15351 patch.deps;
#X text 200 15351 patch dependencies: used objects and abstractions;
#X obj 30 15378 patch.tree;
#X text 200 15378 patch tree;
#X obj 20 15405 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15446 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15457 path.basename;
#X text 200 15457 outputs filename portion of pathname;
#X obj 30 15484 path.dirname;
#X text 200 15484 outputs directory portion of pathname;
#X obj 30 15511 path.exists;
#X text 200 15511 checks if given path exists;
#X obj 30 15538 path.is_dir;
#X text 200 15538 check if path is directory;
#X obj 30 15565 path.lsdir;
#X text 200 15565 list directory contents;
#X obj 20 15592 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15633 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15644 is_any;
#X text 200 15644 checks if input data has *any* type;
#X obj 30 15671 is_bang;
#X text 200 15671 checks if input data has *bang* type;
#X obj 30 15698 is_data;
#X text 200 15698 checks if input data has *data* type;
#X obj 30 15725 is_dict;
#X text 200 15725 checks if input data has *dict* type;
#X obj 30 15752 is_even;
#X text 200 15752 checks if input number is even;
#X obj 30 15779 is_file;
#X text 200 15779 checks if file exists and accessible;
#X obj 30 15806 is_float;
#X text 200 15806 checks if input data has *float* type;
#X obj 30 15833 is_list;
#X text 200 15833 checks if input data has *list* type;
#X obj 30 15860 is_odd;
#X text 200 15860 checks if input number is odd;
#X obj 30 15887 is_pointer;
#X text 200 15887 checks if input data has *pointer* type;
#X obj 30 15914 is_symbol;
#X text 200 15914 checks if input data has *symbol* type;
#X obj 20 15941 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15982 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15993 preset.float;
#X text 200 15993 load/store float preset;
#X obj 30 16020 preset.list;
#X text 200 16020 load/store symbol preset;
#X obj 30 16047 preset.storage;
#X text 200 16047 preset storage control;
#X obj 30 16074 preset.symbol;
#X text 200 16074 load/store symbol preset;
#X obj 20 16101 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 16142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16153 patch.props;
#X text 200 16153 patch properties manager;
#X obj 30 16180 prop;
#X text 200 16180 get/set named property value for subpatch or abstraction;
#X obj 30 16207 prop.declare;
#X text 200 16207 declare named property for subpatch or abstraction;
#X obj 30 16234 prop.get;
#X text 200 16234 get property from connected object/subpatch/abstraction;
#X obj 30 16261 prop.get~;
#X text 200 16261 Property extractor from sound stream;
#X obj 30 16288 prop.join;
#X text 200 16288 join property to main data flow;
#X obj 30 16315 prop.set;
#X text 200 16315 set object property;
#X obj 30 16342 prop.split;
#X text 200 16342 separate properties from dataflow;
#X obj 20 16369 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16410 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16421 proto.firmata;
#X text 200 16421 Firmata Arduino protocol support;
#X obj 30 16448 proto.midi;
#X text 200 16448 raw midi encoder/parser;
#X obj 30 16475 proto.midi.cc;
#X text 200 16475 raw midi CC encoder/parser;
#X obj 30 16502 proto.mpv;
#X text 200 16502 mpv video player control;
#X obj 30 16529 proto.sp.alpaca;
#X text 200 16529 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16556 proto.xtouch_ext;
#X text 200 16556 Behringer XTouch Extender XMidi protocol;
#X obj 20 16583 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16624 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16635 random.atom;
#X text 200 16635 weighted atom generation from specified list;
#X obj 30 16662 random.discrete;
#X text 200 16662 random weighted integers on interval [0 \, n);
#X obj 30 16689 random.float;
#X text 200 16689 uniform random float generator in specified range;
#X obj 30 16716 random.gauss;
#X text 200 16716 gaussian random distribution;
#X obj 30 16743 random.int;
#X text 200 16743 uniform random integer generator in specified range;
#X obj 30 16770 random.linear;
#X text 200 16770 random linear distribution;
#X obj 30 16797 random.pw_const;
#X text 200 16797 piecewise constant random distribution;
#X obj 30 16824 random.pw_lin;
#X text 200 16824 piecewise linear random distribution;
#X obj 20 16851 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16892 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16903 seq.arp;
#X text 200 16903 sequence arpeggiator;
#X obj 30 16930 seq.bangs;
#X text 200 16930 bang sequencer;
#X obj 30 16957 seq.counter;
#X text 200 16957 sequencer counter;
#X obj 30 16984 seq.life;
#X text 200 16984 Conway gamw of life sequencer;
#X obj 30 17011 seq.matrix;
#X text 200 17011 sequencer control for ui.matrix;
#X obj 30 17038 seq.nbangs;
#X text 200 17038 output specified number of bang with time intervals;
#X obj 30 17065 seq.phasor;
#X text 200 17065 control rate phasor (saw) generator;
#X obj 30 17092 seq.toggles;
#X text 200 17092 toggle sequencer;
#X obj 30 17119 sequencer;
#X text 200 17119 basic sequence player;
#X obj 20 17146 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 17187 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17198 snd.file;
#X text 200 17198 Sound file loader on steroids;
#X obj 20 17225 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 17266 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17277 hoa.2d.decoder~;
#X text 200 17277 hoa 2d decoder;
#X obj 30 17304 hoa.2d.encoder~;
#X text 200 17304 hoa 2d encoder;
#X obj 30 17331 hoa.2d.map~;
#X text 200 17331 a 2d ambisonic multisource spatializer;
#X obj 30 17358 hoa.2d.optim~;
#X text 200 17358 a 2D ambisonic optimization tool;
#X obj 30 17385 hoa.2d.projector~;
#X text 200 17385 a plane waves decomposer from circular harmonics
domain;
#X obj 30 17412 hoa.2d.recomposer~;
#X text 200 17412 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 17452 hoa.2d.rotate~;
#X text 200 17452 a 2D ambisonic sound field rotation;
#X obj 30 17479 hoa.2d.wider~;
#X text 200 17479 a 2d fractional ambisonic order simulator;
#X obj 30 17506 hoa.@process;
#X text 200 17506 process properties manager for hoa.process~;
#X obj 30 17533 hoa.in;
#X text 200 17533 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17560 hoa.in~;
#X text 200 17560 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17587 hoa.out;
#X text 200 17587 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17614 hoa.out~;
#X text 200 17614 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17641 hoa.process~;
#X text 200 17641 patcher loader for multichannel processing;
#X obj 30 17671 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17668 a 2d ambisonic harmonic scope;
#X obj 30 17693 pan.cos~;
#X text 200 17693 two channel equal power sine/cosine panner;
#X obj 30 17720 pan.linsig~;
#X text 200 17720 two channel linear panner with signal control;
#X obj 30 17747 pan.lin~;
#X text 200 17747 two channel linear panner;
#X obj 30 17774 pan.spread~;
#X text 200 17774 spreads input channels across the stereo field;
#X obj 30 17801 pan.sqrt~;
#X text 200 17801 two channel equal power square root panner;
#X obj 30 17828 spat.pan4~;
#X text 200 17828 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17855 spat.pan8~;
#X text 200 17855 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17882 spat.zita6x8~;
#X text 200 17882 spat with 6 inputs sources to 8 channel output;
#X obj 20 17909 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17950 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17961 string;
#X text 200 17961 string constructor;
#X obj 30 17988 string.contains;
#X text 200 17988 checks if string contains specified substring;
#X obj 30 18015 string.ends_with;
#X text 200 18015 checks if string ends with specified substring;
#X obj 30 18042 string.equal;
#X text 200 18042 check strings or symbols for equality;
#X obj 30 18069 string.format;
#X text 200 18069 formats string like printf.;
#X obj 30 18096 string.join;
#X text 200 18096 joins (concatenates) strings with separator;
#X obj 30 18123 string.length;
#X text 200 18123 number of characters in string (unicode supported);
#X obj 30 18150 string.match;
#X text 200 18150 check if string match regular expression;
#X obj 30 18177 string.remove;
#X text 200 18177 remove substring from input string;
#X obj 30 18204 string.replace;
#X text 200 18204 replace from one substring to another in input string;
#X obj 30 18231 string.split;
#X text 200 18231 split string by separator;
#X obj 30 18258 string.starts_with;
#X text 200 18258 checks if string starts with specified substring;
#X obj 30 18285 string.substr;
#X text 200 18285 extract substring from input string;
#X obj 30 18312 string2symbol;
#X text 200 18312 converts string to symbol;
#X obj 20 18339 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18380 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18391 symbol.equal;
#X text 200 18391 check symbols for equality;
#X obj 30 18418 symbol.length;
#X text 200 18418 number of characters in symbol (unicode supported);
#X obj 30 18445 symbol.num_compare;
#X text 200 18445 numeric symbol compare;
#X obj 30 18472 symbol2any;
#X text 200 18472 converts symbol or string to message;
#X obj 30 18499 symbol2intlist;
#X text 200 18499 converts symbol to list of character codes;
#X obj 20 18526 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18567 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18578 synth.bee3~;
#X text 200 18578 Hammond-oid organ FM synthesis instrument;
#X obj 30 18605 synth.birds~;
#X text 200 18605 bird singing generator;
#X obj 30 18632 synth.church_bell~;
#X text 200 18632 generic church bell modal model;
#X obj 30 18659 synth.dubdub~;
#X text 200 18659 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18699 synth.dx7~;
#X text 200 18699 FAUST dx7 implementation;
#X obj 30 18726 synth.eguitar~;
#X text 200 18726 simple electric guitar model with steel strings;
#X obj 30 18753 synth.fgrain~;
#X text 200 18753 file granulator from STK;
#X obj 30 18780 synth.glass_harm~;
#X text 200 18780 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 18807 synth.glitch~;
#X text 200 18807 Glitch synthesizer by naivesound;
#X obj 30 18834 synth.harpsichord~;
#X text 200 18834 waveguide commuted harpsichord;
#X obj 30 18861 synth.ks~;
#X text 200 18861 Karplus-Strong string;
#X obj 30 18888 synth.marimba~;
#X text 200 18888 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18928 synth.piano~;
#X text 200 18928 waveguide commuted piano;
#X obj 30 18955 synth.rhodey~;
#X text 200 18955 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18982 synth.risset_arp~;
#X text 200 18982 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 19009 synth.risset_tone~;
#X text 200 19009 Jean Claude Risset's endless glissando;
#X obj 30 19036 synth.russian_bell~;
#X text 200 19036 russian church bell modal model;
#X obj 30 19063 synth.shakers~;
#X text 200 19063 various percussion sounds from STK library;
#X obj 30 19090 synth.sitar~;
#X text 200 19090 STK sitar;
#X obj 30 19117 synth.snare~;
#X text 200 19117 Snare drum synth from Guitarix project;
#X obj 30 19144 synth.wurley~;
#X text 200 19144 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 19171 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 19212 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19223 system.colorpanel;
#X text 200 19223 System color panel dialog popup;
#X obj 30 19250 system.cursor;
#X text 200 19250 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 19277 system.exec;
#X text 200 19277 run external command in separate process;
#X obj 30 19304 system.exit;
#X text 200 19304 quit PureData;
#X obj 30 19331 system.getenv;
#X text 200 19331 Get system environment variables;
#X obj 30 19358 system.hostname;
#X text 200 19358 outputs system hostname;
#X obj 30 19385 system.memsize;
#X text 200 19385 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 19425 system.memused;
#X text 200 19425 returns the process physical memory use - current
and peak;
#X obj 30 19452 system.screen_size;
#X text 200 19452 returns current screen size in pixels;
#X obj 20 19479 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 19520 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19531 tl.bang;
#X text 200 19531 Timeline bang (with possible delay);
#X obj 30 19561 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 19558 Timeline section;
#X obj 30 19583 tl.timeline;
#X text 200 19583 Timeline - event scheduler;
#X obj 30 19610 tl.toggle;
#X text 200 19610 Timeline bang;
#X obj 30 19637 tl.transport;
#X text 200 19637 Timeline transport control;
#X obj 20 19664 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19705 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19719 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19716 array view with cursor and selection;
#X obj 30 19744 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19741 A bang... that's all;
#X obj 30 19769 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19766 button widget;
#X obj 30 19794 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19791 colorchooser widget;
#X obj 30 19819 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19816 Display GUI object;
#X obj 30 19844 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19841 GUI for turning DSP on/off;
#X obj 30 19869 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19866 envelope editor widget;
#X obj 30 19894 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 19891 UI filter object calculator for biquad filter;
#X obj 30 19919 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19916 UI filter object based on biquad filter;
#X obj 30 19944 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19941 UI stereo gain control;
#X obj 30 19969 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19966 UI gain control;
#X obj 30 19994 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19991 simple icon with button capabilities;
#X obj 30 20019 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 20016 value increment/decrement;
#X obj 30 20044 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 20041 keyboard widget;
#X obj 30 20069 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 20066 knob widget;
#X obj 30 20094 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 20091 simple label widget;
#X obj 30 20119 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 20116 Hyperlink widget;
#X obj 30 20144 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 20141 The matrix of toggles has you.;
#X obj 30 20169 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 20166 Dropdown menu;
#X obj 30 20194 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 20191 Shows peak and rms signal level;
#X obj 30 20219 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 20216 incoming MIDI message viewport;
#X obj 30 20244 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 20241 filter mouse events from ui objects;
#X obj 30 20269 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 20266 routes mouse events from ui objects;
#X obj 30 20294 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 20291 counterpart of the vanilla [nbx];
#X obj 30 20319 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 20316 counterpart of the vanilla [nbx] for signal;
#X obj 30 20344 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 20341 signal plotter;
#X obj 30 20369 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 20366 2D slider in polar coordinates;
#X obj 30 20394 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 20391 Preset manager;
#X obj 30 20419 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 20416 counterpart of the vanilla radio toggle;
#X obj 30 20444 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 20441 range slider;
#X obj 30 20469 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 20466 Scope GUI object;
#X obj 30 20494 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 20491 counterpart of the vanilla slider;
#X obj 30 20519 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 20516 2D slider widget;
#X obj 30 20544 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 20541 Multiple slider widget;
#X obj 30 20569 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 20566 Spectroscope GUI object;
#X obj 30 20594 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20591 displays a list of text buttons or text toggles;
#X obj 30 20619 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20616 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20641 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20641 version: v0.9.3 \, license: GPL3;
#X obj 20 20669 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20692 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20656 msg 0;
#X obj 670 20691 switch~;
#X connect 1436 0 1437 0;