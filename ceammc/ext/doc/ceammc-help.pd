#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 20 238 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 279 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 290 array.bpm;
#X text 200 290 BPM calculator;
#X obj 30 317 array.copy;
#X text 200 317 copy samples from one array to another;
#X obj 30 344 array.do;
#X text 200 344 iterate and modify array content via side-chain;
#X obj 30 371 array.each;
#X text 200 371 process each array elements via side-chain;
#X obj 30 398 array.fill;
#X text 200 398 fill array with single value or pattern;
#X obj 30 425 array.hist;
#X text 200 425 calculates array histogram;
#X obj 30 452 array.mean;
#X text 200 452 calculates array arithmetic mean value;
#X obj 30 479 array.minmax;
#X text 200 479 find array min and max element value;
#X obj 30 506 array.plot~;
#X text 200 506 plot signal on specified array;
#X obj 30 533 array.resample;
#X text 200 533 array resampler;
#X obj 30 560 array.rms;
#X text 200 560 calculates root mean square value for array;
#X obj 30 587 array.set;
#X text 200 587 set array content from list;
#X obj 30 614 array.stddev;
#X text 200 614 calculates standard deviation for array values;
#X obj 30 641 array.stretch;
#X text 200 641 array time-stretch \, pitch-shift or rate-change;
#X obj 30 668 array.sum;
#X text 200 668 calculates sum of array elements;
#X obj 30 695 array.sum2;
#X text 200 695 calculates sum of squares of array elements;
#X obj 30 722 array.variance;
#X text 200 722 calculates variance of array values;
#X obj 30 749 array.vplay;
#X text 200 749 simple array player for using with vline~;
#X obj 30 776 array.window;
#X text 200 776 fill array with window;
#X obj 30 803 plot.geomspace~;
#X text 200 803 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 843 plot.hist~;
#X text 200 843 calculate and output signal histogram;
#X obj 30 870 plot.linspace~;
#X text 200 870 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 910 plot.logspace~;
#X text 200 910 outputs numbers spaced evenly on a log scale;
#X obj 30 937 plot.response~;
#X text 200 937 output amp/phase freq response to impulse;
#X obj 20 964 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 1005 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1016 ceammc.search;
#X text 200 1016 ceammc library search object;
#X obj 30 1046 ui.link @title [function] @url function-help.pd;
#X text 200 1043 named function;
#X obj 30 1068 function.call;
#X text 200 1068 call named function;
#X obj 30 1095 gain~;
#X text 200 1095 multislot signal gain;
#X obj 30 1122 matrix~;
#X text 200 1122 signal routing matrix;
#X obj 30 1149 metro.pattern;
#X text 200 1149 metro with rhythmic patterns;
#X obj 30 1176 metro.random;
#X text 200 1176 metro random bang with specified range;
#X obj 30 1203 metro.seq;
#X text 200 1203 metro sequencer;
#X obj 30 1230 mix~;
#X text 200 1230 multislot signal mixer;
#X obj 30 1257 nsig~;
#X text 200 1257 Mulitchannel converter from control to audio rate;
#X obj 30 1284 obj.props;
#X text 200 1284 property extractor;
#X obj 30 1311 radio;
#X text 200 1311 float index to outlet values as radio switch;
#X obj 30 1338 window;
#X text 200 1338 returns window value by given window position;
#X obj 30 1365 xdac~;
#X text 200 1365 dac~ with channel ranges;
#X obj 30 1392 xfade2~;
#X text 200 1392 multi stereo-signal crossfade;
#X obj 30 1419 xfade~;
#X text 200 1419 multi signal crossfade;
#X obj 20 1446 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1487 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1498 chaos.gbman0;
#X text 200 1498 Gingerbreadman map chaotic generator;
#X obj 30 1525 chaos.gbman0~;
#X text 200 1525 Gingerbreadman map chaotic generator;
#X obj 30 1552 chaos.jong;
#X text 200 1552 Peter de Jong attractor;
#X obj 30 1579 chaos.logistic;
#X text 200 1579 Logistic map chaotic generator;
#X obj 30 1606 chaos.std0;
#X text 200 1606 Standard map chaotic generator;
#X obj 30 1633 chaos.std0~;
#X text 200 1633 Standard map chaotic generator;
#X obj 20 1660 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1701 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1712 array.p2s;
#X text 200 1712 convert array phase [0\..1] to sample position;
#X obj 30 1739 array.s2p;
#X text 200 1739 convert array sample position to relative phase position
[0\..1];
#X obj 30 1779 conv.amp2dbfs;
#X text 200 1779 convert from amplitude to decibel full scale;
#X obj 30 1806 conv.amp2dbfs~;
#X text 200 1806 convert from amplitude to decibel full scale;
#X obj 30 1833 conv.bpm2hz;
#X text 200 1833 converts BPM to frequency in herz;
#X obj 30 1860 conv.bpm2ms;
#X text 200 1860 convert frequency in BPM to period in milliseconds;
#X obj 30 1887 conv.bpm2sec;
#X text 200 1887 convert frequency in BPM to period in seconds;
#X obj 30 1914 conv.car2pol;
#X text 200 1914 convert cartesian coords to polar;
#X obj 30 1941 conv.cc2amp;
#X text 200 1941 convert from MIDI Control Change range;
#X obj 30 1968 conv.dbfs2amp;
#X text 200 1968 convert decibel full scale to amplitude;
#X obj 30 1995 conv.lin2curve;
#X text 200 1995 map linear to exponential range with 0 allowed.;
#X obj 30 2022 conv.lin2exp;
#X text 200 2022 maps linear range to exponential range;
#X obj 30 2049 conv.lin2lin;
#X text 200 2049 convert from one linear range to another;
#X obj 30 2076 conv.lin2lin~;
#X text 200 2076 convert from one linear range to another for signals;
#X obj 30 2103 conv.list2props;
#X text 200 2103 converts list to series of property messages;
#X obj 30 2130 conv.midi2freq;
#X text 200 2130 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2170 conv.ms2samp;
#X text 200 2170 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2210 conv.ms2samp~;
#X text 200 2210 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2250 conv.phase2rad;
#X text 200 2250 convert phase value [0-1] to radians [0-2π];
#X obj 30 2277 conv.phase2rad~;
#X text 200 2277 convert phase value [0-1] to radians [0-2π];
#X obj 30 2304 conv.pitch2midi;
#X text 200 2304 converts symbol pitch name to MIDI note number;
#X obj 30 2331 conv.pol2car;
#X text 200 2331 convert from polar coordinates to cartesian;
#X obj 30 2358 conv.rad2phase;
#X text 200 2358 convert radians value to phase;
#X obj 30 2385 conv.rad2phase~;
#X text 200 2385 convert radians value to phase;
#X obj 30 2412 conv.samp2ms;
#X text 200 2412 convert samples to time according to samplerate;
#X obj 30 2439 conv.samp2ms~;
#X text 200 2439 convert samples to milliseconds according to samplerate;
#X obj 30 2466 conv.samp2sec;
#X text 200 2466 convert samples to time according to samplerate;
#X obj 30 2493 conv.sec2samp;
#X text 200 2493 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2533 conv.sec2str;
#X text 200 2533 converts float time in seconds to formated symbol
(or string);
#X obj 30 2560 conv.str2sec;
#X text 200 2560 converts formatted time to float value in seconds;
#X obj 20 2587 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2628 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2639 data.dict;
#X text 200 2639 dictionary container: store values by key;
#X obj 30 2666 data.fifo;
#X text 200 2666 First-In-First-Out (FIFO) queue data container;
#X obj 30 2693 data.float;
#X text 200 2693 robust float object;
#X obj 30 2720 data.int;
#X text 200 2720 robust int object;
#X obj 30 2747 data.list;
#X text 200 2747 list container;
#X obj 30 2774 data.mlist;
#X text 200 2774 multidimensional list container;
#X obj 30 2801 data.set;
#X text 200 2801 container that store unique elements;
#X obj 30 2828 data.set2list;
#X text 200 2828 converts set to list;
#X obj 30 2855 dict.contains;
#X text 200 2855 predicate to check if dict contains a keys;
#X obj 30 2882 dict.each;
#X text 200 2882 map each value in dict;
#X obj 30 2909 dict.from_list;
#X text 200 2909 creates dictionary from list;
#X obj 30 2936 dict.get;
#X text 200 2936 output dict values;
#X obj 30 2963 dict.keys;
#X text 200 2963 get list of dict keys;
#X obj 30 2990 dict.pass;
#X text 200 2990 passes specified keys in dict;
#X obj 30 3017 dict.reject;
#X text 200 3017 rejects specified keys from dict;
#X obj 30 3044 dict.size;
#X text 200 3044 dictionary size;
#X obj 30 3071 dict.to_list;
#X text 200 3071 converts dictionary to plain list;
#X obj 30 3098 dict.values;
#X text 200 3098 dictionary values as mlist;
#X obj 30 3125 mlist.flatten;
#X text 200 3125 flatten nested mlist;
#X obj 30 3152 set.contains;
#X text 200 3152 check if specified element is in set;
#X obj 30 3179 set.diff;
#X text 200 3179 difference between two sets;
#X obj 30 3206 set.equal;
#X text 200 3206 checks if two sets are equal (contains same elements);
#X obj 30 3233 set.intersect;
#X text 200 3233 output intersection of given sets;
#X obj 30 3260 set.size;
#X text 200 3260 get number of elements in set;
#X obj 30 3287 set.symdiff;
#X text 200 3287 symmetric difference between two sets;
#X obj 30 3314 set.union;
#X text 200 3314 output union of given sets;
#X obj 20 3341 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3382 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3393 dyn.comp2~;
#X text 200 3393 stereo dynamic range compressor;
#X obj 30 3420 dyn.comp~;
#X text 200 3420 mono dynamic range compressors;
#X obj 30 3447 dyn.gate2~;
#X text 200 3447 stereo signal gate;
#X obj 30 3474 dyn.gate~;
#X text 200 3474 mono signal gate;
#X obj 30 3501 dyn.limit2~;
#X text 200 3501 stereo 1176LN Peak Limiter;
#X obj 30 3528 dyn.limit~;
#X text 200 3528 mono 1176LN Peak Limiter;
#X obj 30 3555 dyn.softclip~;
#X text 200 3555 soft signal clip;
#X obj 20 3582 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3623 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3634 env.adsr~;
#X text 200 3634 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3661 env.ar~;
#X text 200 3661 Attack/Release envelope generator;
#X obj 30 3688 env.asr~;
#X text 200 3688 Attack/Sustain/Release envelope generator;
#X obj 30 3715 env.concat;
#X text 200 3715 Envelope concatenation;
#X obj 30 3742 env.follow~;
#X text 200 3742 Envelope follower with independent attack and release
times;
#X obj 30 3769 env.mix;
#X text 200 3769 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3809 env.smooth~;
#X text 200 3809 An envelope with an exponential attack and release;
#X obj 30 3836 env.tscale;
#X text 200 3836 Envelope time-scale;
#X obj 30 3863 env.tshift;
#X text 200 3863 Envelope time-shift (horizontal);
#X obj 30 3890 env.vscale;
#X text 200 3890 Envelope value-scale;
#X obj 30 3917 env2array;
#X text 200 3917 Renders envelope to specified array;
#X obj 30 3944 env2vline;
#X text 200 3944 Converts envelope to bunch of vline messages;
#X obj 30 3971 envelope;
#X text 200 3971 Envelope data type;
#X obj 30 3998 vline2env;
#X text 200 3998 Converts vline messages to env;
#X obj 20 4025 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4066 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4077 expand_env;
#X text 200 4077 Substitute environment variables in data stream;
#X obj 30 4104 flow.append;
#X text 200 4104 inject message into flow;
#X obj 30 4131 flow.change;
#X text 200 4131 rejects redundant input values;
#X obj 30 4158 flow.count;
#X text 200 4158 control flow event counter;
#X obj 30 4185 flow.delay;
#X text 200 4185 enhanced version on vanilla delay object;
#X obj 30 4212 flow.demultiplex;
#X text 200 4212 control flow demultiplexer;
#X obj 30 4239 flow.demultiplex2~;
#X text 200 4239 audio stream stereo demultiplexer;
#X obj 30 4266 flow.demultiplex~;
#X text 200 4266 audio stream demultiplexer;
#X obj 30 4293 flow.dup;
#X text 200 4293 duplicates message with possible delay;
#X obj 30 4320 flow.gate;
#X text 200 4320 control flow gate. [spigot] analog;
#X obj 30 4347 flow.greater;
#X text 200 4347 numeric stream router;
#X obj 30 4374 flow.greater_eq;
#X text 200 4374 numeric stream router;
#X obj 30 4401 flow.group;
#X text 200 4401 group data atoms in list of specified size;
#X obj 30 4428 flow.interval;
#X text 200 4428 measure time between flow events;
#X obj 30 4455 flow.less;
#X text 200 4455 numeric stream router \, like many [moses];
#X obj 30 4482 flow.less_eq;
#X text 200 4482 numeric stream router \, like many [moses];
#X obj 30 4509 flow.match;
#X text 200 4509 route data flow by regexp match;
#X obj 30 4536 flow.multiplex;
#X text 200 4536 control flow multiplexer;
#X obj 30 4563 flow.multiplex2~;
#X text 200 4563 audio stream stereo multiplexer;
#X obj 30 4590 flow.multiplex~;
#X text 200 4590 audio stream multiplexer;
#X obj 30 4617 flow.once;
#X text 200 4617 one message pass thru;
#X obj 30 4644 flow.pack;
#X text 200 4644 flow pack;
#X obj 30 4671 flow.pass;
#X text 200 4671 pass specified values;
#X obj 30 4698 flow.pass_if;
#X text 200 4698 pass values that accepted by predicate object;
#X obj 30 4725 flow.reject;
#X text 200 4725 reject specified values;
#X obj 30 4752 flow.reject_if;
#X text 200 4752 reject values by predicate;
#X obj 30 4779 flow.route;
#X text 200 4779 advanced message router;
#X obj 30 4806 flow.speedlim;
#X text 200 4806 control stream speed limiter;
#X obj 30 4833 flow.split;
#X text 200 4833 split data flow by external side-chain predicate;
#X obj 30 4860 flow.sync;
#X text 200 4860 bus with only hot inlets;
#X obj 30 4887 flow.sync_pack;
#X text 200 4887 flow pack with all hot inlets;
#X obj 30 4914 flow.tee~;
#X text 200 4914 separate audio and control streams;
#X obj 30 4941 replace;
#X text 200 4941 Replace atoms in data stream;
#X obj 20 4968 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5009 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5020 flt.biquad~;
#X text 200 5020 second order IIR filter.;
#X obj 30 5047 flt.bpf12~;
#X text 200 5047 Two pole band-pass butterworth filter;
#X obj 30 5074 flt.bpf24~;
#X text 200 5074 Four pole band-pass butterworth filter;
#X obj 30 5101 flt.c_bpf~;
#X text 200 5101 BPF coefficient calculator for biquad filter;
#X obj 30 5128 flt.c_highshelf~;
#X text 200 5128 Highshelf filter coefficient calculator for biquad;
#X obj 30 5155 flt.c_hpf~;
#X text 200 5155 HPF coefficient calculator for biquad filter;
#X obj 30 5182 flt.c_lowshelf~;
#X text 200 5182 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5209 flt.c_lpf~;
#X text 200 5209 LPF coefficient calculator for biquad filter;
#X obj 30 5236 flt.c_notch~;
#X text 200 5236 Band-reject coefficient calculator for biquad filter;
#X obj 30 5263 flt.c_peak~;
#X text 200 5263 Peaking equalizer calculator for biquad;
#X obj 30 5290 flt.dcblock2~;
#X text 200 5290 stereo DC blocker;
#X obj 30 5317 flt.dcblock~;
#X text 200 5317 mono DC blocker;
#X obj 30 5344 flt.eq10~;
#X text 200 5344 graphic 10 band equalizer;
#X obj 30 5371 flt.eq_peak_cq~;
#X text 200 5371 constant-Q second order peaking equalizer section;
#X obj 30 5398 flt.eq_peak~;
#X text 200 5398 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5453 flt.freqz~;
#X text 200 5453 compute the frequency response of a digital filter;
#X obj 30 5480 flt.highshelf~;
#X text 200 5480 gain boost|cut above some frequency;
#X obj 30 5507 flt.hpf12~;
#X text 200 5507 High-pass second order Butterworth filter;
#X obj 30 5534 flt.hpf24~;
#X text 200 5534 High-pass fourth order Butterworth filter;
#X obj 30 5561 flt.lowshelf~;
#X text 200 5561 gain boost|cut below some frequency;
#X obj 30 5588 flt.lpf12~;
#X text 200 5588 Low-pass second order Butterworth filter;
#X obj 30 5615 flt.lpf24~;
#X text 200 5615 Low-pass fourth order Butterworth filter;
#X obj 30 5642 flt.median;
#X text 200 5642 Median control flow filter;
#X obj 30 5669 flt.moog_vcf~;
#X text 200 5669 Moog Voltage Controlled Filter;
#X obj 30 5696 flt.notch~;
#X text 200 5696 band-rejection filter;
#X obj 30 5723 flt.resonbp~;
#X text 200 5723 Simple resonant bandpass filter;
#X obj 20 5750 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5791 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5802 fx.bitdown~;
#X text 200 5802 bit downer and downsampler effect;
#X obj 30 5829 fx.chorus~;
#X text 200 5829 Chorus effect;
#X obj 30 5856 fx.distortion1~;
#X text 200 5856 distortion #1 from Guitarix effects set;
#X obj 30 5883 fx.distortion2~;
#X text 200 5883 distortion #2 from Guitarix effects set;
#X obj 30 5910 fx.distortion3~;
#X text 200 5910 simple distortion #3 from Guitarix effects set;
#X obj 30 5937 fx.distortion~;
#X text 200 5937 cubic nonlinearity distortion;
#X obj 30 5964 fx.drive~;
#X text 200 5964 Guitarix drive effect;
#X obj 30 5991 fx.drone_box~;
#X text 200 5991 mono sympathetic resonance generator;
#X obj 30 6018 fx.echo~;
#X text 200 6018 simple echo effect;
#X obj 30 6045 fx.flanger~;
#X text 200 6045 mono flanging effect;
#X obj 30 6072 fx.freeverb2~;
#X text 200 6072 freeverb2 - stereo version of freeverb;
#X obj 30 6099 fx.freeverb~;
#X text 200 6099 freeverb - common used open-source reverb;
#X obj 30 6126 fx.freqshift~;
#X text 200 6126 frequency shifter or single-sideband ring modulation;
#X obj 30 6153 fx.granulator~;
#X text 200 6153 simple input stream granulator;
#X obj 30 6180 fx.greyhole~;
#X text 200 6180 A complex echo-like effect;
#X obj 30 6207 fx.looper~;
#X text 200 6207 One track looper;
#X obj 30 6234 fx.pitchshift~;
#X text 200 6234 simple pitch shifter based on 2 delay lines;
#X obj 30 6261 fx.sdelay~;
#X text 200 6261 smooth delay with a feedback control;
#X obj 30 6288 fx.vocoder~;
#X text 200 6288 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6328 fx.wahwah~;
#X text 200 6328 digitized CryBaby wah pedal;
#X obj 30 6355 fx.zita_rev1~;
#X text 200 6355 Zita stereo reverb;
#X obj 20 6382 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6423 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6434 global.dict;
#X text 200 6434 global named dict object;
#X obj 30 6461 global.float;
#X text 200 6461 global named float object;
#X obj 30 6488 global.int;
#X text 200 6488 global named integer object;
#X obj 30 6515 global.list;
#X text 200 6515 global named list object;
#X obj 30 6542 global.mlist;
#X text 200 6542 global named mlist object;
#X obj 30 6569 global.set;
#X text 200 6569 global named set object;
#X obj 20 6596 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6637 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6648 hw.apple_smc;
#X text 200 6648 query the system management control in Apples;
#X obj 30 6675 hw.apple_sms;
#X text 200 6675 query the sudden motion sensor in Apples;
#X obj 30 6702 hw.arduino;
#X text 200 6702 Arduino device;
#X obj 30 6729 hw.cpu_temp;
#X text 200 6729 get CPU temperature;
#X obj 30 6756 hw.display;
#X text 200 6756 get/set display properties;
#X obj 30 6783 hw.kbd_light;
#X text 200 6783 Get/set keyboard light on some devices;
#X obj 20 6810 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6851 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6862 lfo.+pulse~;
#X text 200 6862 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6889 lfo.+saw~;
#X text 200 6889 Positive unit-amplitude low frequency saw wave;
#X obj 30 6916 lfo.+square~;
#X text 200 6916 Positive low frequency square wave;
#X obj 30 6943 lfo.+tri~;
#X text 200 6943 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6970 lfo.impulse~;
#X text 200 6970 Unit-amplitude low-frequency impulse train;
#X obj 30 6997 lfo.pulse~;
#X text 200 6997 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7024 lfo.saw~;
#X text 200 7024 Full-range unit-amplitude low frequency saw;
#X obj 30 7051 lfo.square~;
#X text 200 7051 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7078 lfo.tri~;
#X text 200 7078 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7105 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7157 list.^at;
#X text 200 7157 on input index(es) outputs list element(s);
#X obj 30 7184 list.^contains;
#X text 200 7184 on input atom or list checks if specified list contains
it;
#X obj 30 7211 list.^search;
#X text 200 7211 on input atom returns it index in list;
#X obj 30 7238 list.all_of;
#X text 200 7238 checks if all list atoms accepted by predicate;
#X obj 30 7265 list.any_of;
#X text 200 7265 checks if at least one list element is accepted by
predicate;
#X obj 30 7292 list.append;
#X text 200 7292 append atom or list to the end of input list;
#X obj 30 7319 list.apply_to;
#X text 200 7319 modifies list value at specified position \, filtering
it via external object;
#X obj 30 7359 list.at;
#X text 200 7359 outputs list element(s) at specified index(es);
#X obj 30 7386 list.choice;
#X text 200 7386 outputs random element from list;
#X obj 30 7413 list.contains;
#X text 200 7413 checks if input list contains specified atoms;
#X obj 30 7440 list.count;
#X text 200 7440 output the number of items that equal to specified
value;
#X obj 30 7467 list.count_if;
#X text 200 7467 output the number of items that satisfy to external
predicate;
#X obj 30 7494 list.delta;
#X text 200 7494 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7534 list.distribution;
#X text 200 7534 list value distribution;
#X obj 30 7561 list.do;
#X text 200 7561 iterate and modify list contents via side-chain;
#X obj 30 7588 list.each;
#X text 200 7588 maps each list value via external side-chain;
#X obj 30 7615 list.enumerate;
#X text 200 7615 enumerates input list;
#X obj 30 7642 list.equal;
#X text 200 7642 checks if given lists are equal;
#X obj 30 7669 list.first;
#X text 200 7669 returns first list element;
#X obj 30 7696 list.gen;
#X text 200 7696 generates list of specified length via external generator;
#X obj 30 7723 list.histogram;
#X text 200 7723 outputs distribution histogram;
#X obj 30 7750 list.insert;
#X text 200 7750 insert atom or list to the specified position of input
list;
#X obj 30 7777 list.integrator;
#X text 200 7777 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7817 list.last;
#X text 200 7817 output last list element;
#X obj 30 7844 list.length;
#X text 200 7844 output the number of atoms in the list;
#X obj 30 7871 list.max;
#X text 200 7871 output largest element in the list;
#X obj 30 7898 list.mean;
#X text 200 7898 calculates average of list of floats;
#X obj 30 7925 list.min;
#X text 200 7925 returns smallest element in the list;
#X obj 30 7952 list.none_of;
#X text 200 7952 checks if none of list atoms is accepted by predicate;
#X obj 30 7979 list.normalize;
#X text 200 7979 normalizes float list values to get their sum = 1.0;
#X obj 30 8006 list.pass_if;
#X text 200 8006 leave only elements accepted by predicate;
#X obj 30 8033 list.prepend;
#X text 200 8033 prepend atom or list before input list;
#X obj 30 8060 list.product;
#X text 200 8060 calculates product of floats in list;
#X obj 30 8087 list.range;
#X text 200 8087 output list smallest and largest value;
#X obj 30 8114 list.reduce;
#X text 200 8114 apply function of two arguments cumulatively to the
list;
#X obj 30 8141 list.remove;
#X text 200 8141 remove list element(s) at specified positions;
#X obj 30 8168 list.remove_if;
#X text 200 8168 remove elements by predicate;
#X obj 30 8195 list.repack;
#X text 200 8195 repack list to specified size;
#X obj 30 8222 list.repeat;
#X text 200 8222 output new list by repeating input list specified
times;
#X obj 30 8249 list.resample;
#X text 200 8249 resample list with specified ratio;
#X obj 30 8276 list.resize;
#X text 200 8276 changes list size;
#X obj 30 8303 list.reverse;
#X text 200 8303 reverses the order of the elements in the list;
#X obj 30 8330 list.rldecode;
#X text 200 8330 Run-length list decoder (RLE);
#X obj 30 8357 list.rlencode;
#X text 200 8357 RLE (run-length encoding) for lists;
#X obj 30 8384 list.rotate;
#X text 200 8384 rotates list;
#X obj 30 8411 list.route;
#X text 200 8411 acts like [route] but for lists;
#X obj 30 8438 list.search;
#X text 200 8438 search specified items in input list;
#X obj 30 8465 list.separate;
#X text 200 8465 sends list elements one by one separately;
#X obj 30 8492 list.seq;
#X text 200 8492 numeric sequence list generator;
#X obj 30 8519 list.set;
#X text 200 8519 set list value at specified position;
#X obj 30 8546 list.shift;
#X text 200 8546 shifts the contents of the list with linear interpolation;
#X obj 30 8573 list.shuffle;
#X text 200 8573 randomly rearranges elements in list;
#X obj 30 8600 list.slice;
#X text 200 8600 extract sublist;
#X obj 30 8627 list.sort;
#X text 200 8627 sorts list values by ascending order;
#X obj 30 8654 list.sort_with;
#X text 200 8654 sort list with user defined side-chain;
#X obj 30 8681 list.split;
#X text 200 8681 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 8721 list.stretch;
#X text 200 8721 stretches list - changes its size with linear interpolation;
#X obj 30 8748 list.sum;
#X text 200 8748 calculates sum of floats in list;
#X obj 30 8775 list.unique;
#X text 200 8775 removes duplicates from input list;
#X obj 30 8802 list.unpack;
#X text 200 8802 unpack list elements to separate outlets;
#X obj 30 8829 list.unzip;
#X text 200 8829 splits list to N lists \, each to separate output;
#X obj 30 8856 list.walk;
#X text 200 8856 Walks thru the list;
#X obj 30 8883 list.zip;
#X text 200 8883 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8938 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8979 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8990 live.capture~;
#X text 200 8990 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9030 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9071 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9082 local.dict;
#X text 200 9082 local named dict object;
#X obj 30 9109 local.float;
#X text 200 9109 canvas-scoped named float variable;
#X obj 30 9136 local.int;
#X text 200 9136 canvas-scoped named integer variable;
#X obj 30 9163 local.list;
#X text 200 9163 local named list object;
#X obj 30 9190 local.mlist;
#X text 200 9190 local named mlist object;
#X obj 30 9217 local.set;
#X text 200 9217 local named set object;
#X obj 20 9244 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9285 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9296 math.abs;
#X text 200 9296 absolute value function;
#X obj 30 9323 math.abs~;
#X text 200 9323 absolute value function for signals;
#X obj 30 9350 math.acos;
#X text 200 9350 arc cosine function;
#X obj 30 9377 math.acosh;
#X text 200 9377 inverse hyperbolic cosine function;
#X obj 30 9404 math.acosh~;
#X text 200 9404 hyperbolic arc cosine for signals;
#X obj 30 9431 math.acos~;
#X text 200 9431 arc cosine function for signals;
#X obj 30 9458 math.and;
#X text 200 9458 operation AND for multiple arguments;
#X obj 30 9485 math.approx;
#X text 200 9485 check if input value approximately equal to pattern;
#X obj 30 9512 math.asin;
#X text 200 9512 arc sine function;
#X obj 30 9539 math.asinh;
#X text 200 9539 inverse hyperbolic sine function;
#X obj 30 9566 math.asinh~;
#X text 200 9566 hyperbolic arc sine for signals;
#X obj 30 9593 math.asin~;
#X text 200 9593 arc sine for signals;
#X obj 30 9620 math.atan;
#X text 200 9620 arc tangent function;
#X obj 30 9647 math.atanh;
#X text 200 9647 inverse hyperbolic tangent function;
#X obj 30 9674 math.atanh~;
#X text 200 9674 hyperbolic arc tangent for signals;
#X obj 30 9701 math.atan~;
#X text 200 9701 arc tangent for signals;
#X obj 30 9728 math.cabs~;
#X text 200 9728 magnitude of a complex signals;
#X obj 30 9755 math.carg~;
#X text 200 9755 phase angle of a complex signals;
#X obj 30 9782 math.cbrt;
#X text 200 9782 cube root function;
#X obj 30 9809 math.cbrt~;
#X text 200 9809 cube root function for signals;
#X obj 30 9836 math.cdiv~;
#X text 200 9836 division of complex signals;
#X obj 30 9863 math.ceil;
#X text 200 9863 round to smallest integral value not less than input
value;
#X obj 30 9890 math.ceil~;
#X text 200 9890 round to smallest integral value not less than input
value;
#X obj 30 9917 math.cexp~;
#X text 200 9917 exponent of a complex signals;
#X obj 30 9944 math.cmul~;
#X text 200 9944 multiplication of complex signals;
#X obj 30 9971 math.cos;
#X text 200 9971 cosine function;
#X obj 30 9998 math.cosh;
#X text 200 9998 hyperbolic cosine function;
#X obj 30 10025 math.cosh~;
#X text 200 10025 hyperbolic cosine for signals;
#X obj 30 10052 math.cos~;
#X text 200 10052 cosine function;
#X obj 30 10079 math.div;
#X text 200 10079 division (on lists too);
#X obj 30 10106 math.e;
#X text 200 10106 mathematical constant \, base of the natural logarithm;
#X obj 30 10133 math.erf;
#X text 200 10133 error function;
#X obj 30 10160 math.erf~;
#X text 200 10160 error function for signals;
#X obj 30 10187 math.exp;
#X text 200 10187 exponential functions;
#X obj 30 10214 math.exp2;
#X text 200 10214 exponential functions;
#X obj 30 10241 math.exp2~;
#X text 200 10241 base-2 exponential for signal;
#X obj 30 10268 math.expr;
#X text 200 10268 dynamic [expr];
#X obj 30 10295 math.exp~;
#X text 200 10295 base-e exponential for signal;
#X obj 30 10322 math.floor;
#X text 200 10322 round to largest integral value not greater than
x;
#X obj 30 10349 math.floor~;
#X text 200 10349 round to largest integral value not greater than
x;
#X obj 30 10376 math.gamma;
#X text 200 10376 gamma function;
#X obj 30 10403 math.gamma~;
#X text 200 10403 gamma function for floating point signals;
#X obj 30 10430 math.gcd;
#X text 200 10430 calculate greatest common divisor;
#X obj 30 10457 math.inf;
#X text 200 10457 infinity value that cannot be represented accurately;
#X obj 30 10484 math.lcm;
#X text 200 10484 calculate least common multiple;
#X obj 30 10511 math.lgamma;
#X text 200 10511 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10538 math.lgamma~;
#X text 200 10538 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 10578 math.log;
#X text 200 10578 natural logarithm;
#X obj 30 10605 math.log10;
#X text 200 10605 logarithm functions;
#X obj 30 10632 math.log10~;
#X text 200 10632 natural logarithm;
#X obj 30 10659 math.log2;
#X text 200 10659 logarithm functions;
#X obj 30 10686 math.log2~;
#X text 200 10686 base-2 logarithm;
#X obj 30 10713 math.log~;
#X text 200 10713 natural logarithm;
#X obj 30 10740 math.mul;
#X text 200 10740 multiplication (on lists too);
#X obj 30 10767 math.nan;
#X text 200 10767 Not a Number \, unrepresentable value;
#X obj 30 10794 math.neg;
#X text 200 10794 negate function;
#X obj 30 10821 math.or;
#X text 200 10821 operation OR for multiple arguments;
#X obj 30 10848 math.pi;
#X text 200 10848 mathematical constant;
#X obj 30 10875 math.pi~;
#X text 200 10875 mathematical constant;
#X obj 30 10902 math.polyeval;
#X text 200 10902 evaluates the polynomial described by the coefficients
list;
#X obj 30 10929 math.reciprocal;
#X text 200 10929 calculate reciprocal number;
#X obj 30 10956 math.reciprocal~;
#X text 200 10956 calculate reciprocal number for signals;
#X obj 30 10983 math.round;
#X text 200 10983 round to integral value \, regardless of rounding
direction;
#X obj 30 11010 math.round~;
#X text 200 11010 signal round;
#X obj 30 11037 math.sign;
#X text 200 11037 sign function;
#X obj 30 11064 math.sin;
#X text 200 11064 sine function;
#X obj 30 11091 math.sinh;
#X text 200 11091 hyperbolic sine function;
#X obj 30 11118 math.sinh~;
#X text 200 11118 hyperbolic sine for signals;
#X obj 30 11145 math.sin~;
#X text 200 11145 sine function;
#X obj 30 11172 math.sqrt;
#X text 200 11172 square root function;
#X obj 30 11199 math.sqrt~;
#X text 200 11199 square root for signal;
#X obj 30 11226 math.squared;
#X text 200 11226 value square;
#X obj 30 11253 math.squared~;
#X text 200 11253 signal value square;
#X obj 30 11280 math.sync_add;
#X text 200 11280 sync addition;
#X obj 30 11307 math.sync_and;
#X text 200 11307 sync logical AND operation;
#X obj 30 11334 math.sync_div;
#X text 200 11334 sync division;
#X obj 30 11361 math.sync_eq;
#X text 200 11361 sync equal numbers check;
#X obj 30 11388 math.sync_ge;
#X text 200 11388 sync greater equal numbers compare;
#X obj 30 11415 math.sync_gt;
#X text 200 11415 sync greater then numbers compare;
#X obj 30 11442 math.sync_le;
#X text 200 11442 sync less equal numbers compare;
#X obj 30 11469 math.sync_lt;
#X text 200 11469 sync less then numbers compare;
#X obj 30 11496 math.sync_mod;
#X text 200 11496 sync remainder of modulo division (float or integer);
#X obj 30 11523 math.sync_mul;
#X text 200 11523 sync multiplication;
#X obj 30 11550 math.sync_ne;
#X text 200 11550 sync numbers for not equality;
#X obj 30 11577 math.sync_or;
#X text 200 11577 sync logical OR operation;
#X obj 30 11604 math.sync_sub;
#X text 200 11604 sync subtraction;
#X obj 30 11631 math.sync_xor;
#X text 200 11631 sync logical XOR operation;
#X obj 30 11658 math.tan;
#X text 200 11658 tangent function;
#X obj 30 11685 math.tanh;
#X text 200 11685 hyperbolic tangent function;
#X obj 30 11712 math.tanh~;
#X text 200 11712 hyperbolic tangent for signals;
#X obj 30 11739 math.tan~;
#X text 200 11739 tangent function;
#X obj 30 11766 math.trunc;
#X text 200 11766 truncate to integer value;
#X obj 30 11793 math.trunc~;
#X text 200 11793 truncate to integer value;
#X obj 20 11820 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 11861 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11872 midi.ctl2str;
#X text 200 11872 convert Standard MIDI Controllers number to name;
#X obj 30 11899 midi.event2ctl;
#X text 200 11899 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11926 midi.event2note;
#X text 200 11926 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11953 midi.event2prg;
#X text 200 11953 convert MidiEvent message to midi program change
value;
#X obj 30 11980 midi.file;
#X text 200 11980 standard midi file SMF reader and writer;
#X obj 30 12007 midi.key2str;
#X text 200 12007 convert key number to SPN name according to tonality;
#X obj 30 12034 midi.prg2str;
#X text 200 12034 convert GM Instrument number to name (string or symbol);
#X obj 30 12061 midi.track;
#X text 200 12061 extract track from MidiFile;
#X obj 20 12088 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12129 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12140 click~;
#X text 200 12140 Output single impulse on bang;
#X obj 30 12167 fluid~;
#X text 200 12167 FluidSynth SoundFont 2 player;
#X obj 30 12194 modplug~;
#X text 200 12194 MOD file player (using libmodplug);
#X obj 30 12221 speech.flite;
#X text 200 12221 render speech to array;
#X obj 20 12248 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 12289 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12300 msg;
#X text 200 12300 message constructor;
#X obj 30 12327 msg.after;
#X text 200 12327 send specified message after incoming message;
#X obj 30 12354 msg.onload;
#X text 200 12354 send message when patch loads;
#X obj 20 12381 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12422 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12433 net.host2ip;
#X text 200 12433 returns IP address by DNS name;
#X obj 20 12460 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 12501 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12512 noise.crackle~;
#X text 200 12512 sparse noise generator;
#X obj 30 12539 noise.lfreq0~;
#X text 200 12539 sampled/held noise (piecewise constant);
#X obj 30 12566 noise.lfreq~;
#X text 200 12566 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 12593 noise.pink~;
#X text 200 12593 Pink noise generator;
#X obj 30 12620 noise.white~;
#X text 200 12620 White noise generator;
#X obj 20 12647 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 12688 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12699 osc.blit~;
#X text 200 12699 Bandlimited impulse train oscillator;
#X obj 30 12726 osc.impulse~;
#X text 200 12726 Bandlimited impulse train generator;
#X obj 30 12753 osc.pulse~;
#X text 200 12753 Bandlimited pulse train oscillator;
#X obj 30 12780 osc.saw4~;
#X text 200 12780 Bandlimited sawtooth wave;
#X obj 30 12807 osc.saw~;
#X text 200 12807 Alias-free sawtooth wave;
#X obj 30 12834 osc.sinfb~;
#X text 200 12834 Sine oscilator with feedback;
#X obj 30 12861 osc.sin~;
#X text 200 12861 Sine wave oscillator;
#X obj 30 12888 osc.square~;
#X text 200 12888 Bandlimited square wave oscillator;
#X obj 30 12915 osc.tri~;
#X text 200 12915 Bandlimited triangle wave oscillator;
#X obj 20 12942 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12983 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12994 canvas.current;
#X text 200 12994 verbose information about current canvas;
#X obj 30 13021 canvas.dir;
#X text 200 13021 current canvas directory;
#X obj 30 13048 canvas.name;
#X text 200 13048 current canvas name;
#X obj 30 13075 canvas.path;
#X text 200 13075 current canvas fullpath;
#X obj 30 13102 canvas.top;
#X text 200 13102 verbose information about top-level canvas;
#X obj 30 13129 patch.args;
#X text 200 13129 Get patch or subpatch arguments;
#X obj 30 13156 patch.deps;
#X text 200 13156 patch dependencies: used objects and abstractions;
#X obj 30 13183 patch.tree;
#X text 200 13183 patch tree;
#X obj 20 13210 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 13251 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13262 path.basename;
#X text 200 13262 outputs filename portion of pathname;
#X obj 30 13289 path.dirname;
#X text 200 13289 outputs directory portion of pathname;
#X obj 30 13316 path.exists;
#X text 200 13316 checks if given path exists;
#X obj 30 13343 path.is_dir;
#X text 200 13343 check if path is directory;
#X obj 30 13370 path.lsdir;
#X text 200 13370 list directory contents;
#X obj 20 13397 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13438 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13449 is_any;
#X text 200 13449 checks if input data has *any* type;
#X obj 30 13476 is_bang;
#X text 200 13476 checks if input data has *bang* type;
#X obj 30 13503 is_data;
#X text 200 13503 checks if input data has *data* type;
#X obj 30 13530 is_dict;
#X text 200 13530 checks if input data has *dict* type;
#X obj 30 13557 is_even;
#X text 200 13557 checks if input number is even;
#X obj 30 13584 is_file;
#X text 200 13584 checks if file exists and accessible;
#X obj 30 13611 is_float;
#X text 200 13611 checks if input data has *float* type;
#X obj 30 13638 is_list;
#X text 200 13638 checks if input data has *list* type;
#X obj 30 13665 is_odd;
#X text 200 13665 checks if input number is odd;
#X obj 30 13692 is_pointer;
#X text 200 13692 checks if input data has *pointer* type;
#X obj 30 13719 is_symbol;
#X text 200 13719 checks if input data has *symbol* type;
#X obj 20 13746 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 13787 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13798 preset.float;
#X text 200 13798 load/store float preset;
#X obj 30 13825 preset.list;
#X text 200 13825 load/store symbol preset;
#X obj 30 13852 preset.storage;
#X text 200 13852 preset storage control;
#X obj 30 13879 preset.symbol;
#X text 200 13879 load/store symbol preset;
#X obj 20 13906 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 13947 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13958 patch.props;
#X text 200 13958 patch properties manager;
#X obj 30 13985 prop;
#X text 200 13985 get/set named property value for subpatch or abstraction;
#X obj 30 14012 prop.declare;
#X text 200 14012 declare named property for subpatch or abstraction;
#X obj 30 14039 prop.get;
#X text 200 14039 get property from connected object/subpatch/abstraction;
#X obj 30 14066 prop.get~;
#X text 200 14066 Property extractor from sound stream;
#X obj 30 14093 prop.join;
#X text 200 14093 join property to main data flow;
#X obj 30 14120 prop.set;
#X text 200 14120 set object property;
#X obj 30 14147 prop.split;
#X text 200 14147 separate properties from dataflow;
#X obj 20 14174 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 14215 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14226 proto.firmata;
#X text 200 14226 Firmata Arduino protocol support;
#X obj 30 14253 proto.sp.alpaca;
#X text 200 14253 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 14280 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 14321 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14332 random.discrete;
#X text 200 14332 random weighted integers on interval [0 \, n);
#X obj 30 14359 random.float;
#X text 200 14359 uniform random float generator in specified range;
#X obj 30 14386 random.gauss;
#X text 200 14386 gaussian random distribution;
#X obj 30 14413 random.int;
#X text 200 14413 uniform random integer generator in specified range;
#X obj 30 14440 random.linear;
#X text 200 14440 random linear distribution;
#X obj 30 14467 random.pw_const;
#X text 200 14467 piecewise constant random distribution;
#X obj 30 14494 random.pw_lin;
#X text 200 14494 piecewise linear random distribution;
#X obj 20 14521 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 14562 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14573 snd.file;
#X text 200 14573 Sound file loader on steroids;
#X obj 20 14600 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 14641 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14652 hoa.2d.decoder~;
#X text 200 14652 hoa 2d decoder;
#X obj 30 14679 hoa.2d.encoder~;
#X text 200 14679 hoa 2d encoder;
#X obj 30 14706 hoa.2d.map~;
#X text 200 14706 a 2d ambisonic multisource spatializer;
#X obj 30 14733 hoa.2d.optim~;
#X text 200 14733 a 2D ambisonic optimization tool;
#X obj 30 14760 hoa.2d.projector~;
#X text 200 14760 a plane waves decomposer from circular harmonics
domain;
#X obj 30 14787 hoa.2d.recomposer~;
#X text 200 14787 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 14827 hoa.2d.rotate~;
#X text 200 14827 a 2D ambisonic sound field rotation;
#X obj 30 14854 hoa.2d.wider~;
#X text 200 14854 a 2d fractional ambisonic order simulator;
#X obj 30 14881 hoa.@process;
#X text 200 14881 process properties manager for hoa.process~;
#X obj 30 14908 hoa.in;
#X text 200 14908 message inlet for a patcher loaded by hoa.process~;
#X obj 30 14935 hoa.in~;
#X text 200 14935 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14962 hoa.out;
#X text 200 14962 message outlet for a patcher loaded by hoa.process~;
#X obj 30 14989 hoa.out~;
#X text 200 14989 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15016 hoa.process~;
#X text 200 15016 patcher loader for multichannel processing;
#X obj 30 15046 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 15043 a 2d ambisonic harmonic scope;
#X obj 30 15068 pan.cos~;
#X text 200 15068 two channel equal power sine/cosine panner;
#X obj 30 15095 pan.linsig~;
#X text 200 15095 two channel linear panner with signal control;
#X obj 30 15122 pan.lin~;
#X text 200 15122 two channel linear panner;
#X obj 30 15149 pan.spread~;
#X text 200 15149 spreads input channels across the stereo field;
#X obj 30 15176 pan.sqrt~;
#X text 200 15176 two channel equal power square root panner;
#X obj 30 15203 spat.pan4~;
#X text 200 15203 GMEM SPAT: 4-outputs spatializer;
#X obj 30 15230 spat.pan8~;
#X text 200 15230 GMEM SPAT: 8-outputs spatializer;
#X obj 20 15257 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 15298 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15309 string;
#X text 200 15309 string constructor;
#X obj 30 15336 string.contains;
#X text 200 15336 checks if string contains specified substring;
#X obj 30 15363 string.ends_with;
#X text 200 15363 checks if string ends with specified substring;
#X obj 30 15390 string.equal;
#X text 200 15390 check strings or symbols for equality;
#X obj 30 15417 string.format;
#X text 200 15417 formats string like printf.;
#X obj 30 15444 string.join;
#X text 200 15444 joins (concatenates) strings with separator;
#X obj 30 15471 string.length;
#X text 200 15471 number of characters in string (unicode supported);
#X obj 30 15498 string.match;
#X text 200 15498 check if string match regular expression;
#X obj 30 15525 string.remove;
#X text 200 15525 remove substring from input string;
#X obj 30 15552 string.replace;
#X text 200 15552 replace from one substring to another in input string;
#X obj 30 15579 string.split;
#X text 200 15579 split string by separator;
#X obj 30 15606 string.starts_with;
#X text 200 15606 checks if string starts with specified substring;
#X obj 30 15633 string.substr;
#X text 200 15633 extract substring from input string;
#X obj 30 15660 string2symbol;
#X text 200 15660 converts string to symbol;
#X obj 20 15687 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 15728 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15739 symbol.equal;
#X text 200 15739 check symbols for equality;
#X obj 30 15766 symbol.length;
#X text 200 15766 number of characters in symbol (unicode supported);
#X obj 30 15793 symbol.num_compare;
#X text 200 15793 numeric symbol compare;
#X obj 20 15820 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 15861 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15872 synth.bee3~;
#X text 200 15872 Hammond-oid organ FM synthesis instrument;
#X obj 30 15899 synth.birds~;
#X text 200 15899 bird singing generator;
#X obj 30 15926 synth.church_bell~;
#X text 200 15926 generic church bell modal model;
#X obj 30 15953 synth.dubdub~;
#X text 200 15953 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 15993 synth.eguitar~;
#X text 200 15993 simple electric guitar model with steel strings;
#X obj 30 16020 synth.fgrain~;
#X text 200 16020 file granulator from STK;
#X obj 30 16047 synth.ks~;
#X text 200 16047 Karplus-Strong string;
#X obj 30 16074 synth.marimba~;
#X text 200 16074 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 16114 synth.rhodey~;
#X text 200 16114 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 16141 synth.risset_arp~;
#X text 200 16141 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 16168 synth.risset_tone~;
#X text 200 16168 Jean Claude Risset's endless glissando;
#X obj 30 16195 synth.shakers~;
#X text 200 16195 various percussion sounds from STK library;
#X obj 30 16222 synth.wurley~;
#X text 200 16222 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 16249 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 16290 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16301 system.colorpanel;
#X text 200 16301 System color panel dialog popup;
#X obj 30 16328 system.cursor;
#X text 200 16328 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 16355 system.exec;
#X text 200 16355 run external command in separate process;
#X obj 30 16382 system.getenv;
#X text 200 16382 Get system environment variables;
#X obj 30 16409 system.hostname;
#X text 200 16409 outputs system hostname;
#X obj 30 16436 system.memsize;
#X text 200 16436 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 16476 system.memused;
#X text 200 16476 returns the process physical memory use - current
and peak;
#X obj 30 16503 system.screen_size;
#X text 200 16503 returns current screen size in pixels;
#X obj 20 16530 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 16571 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16582 tl.bang;
#X text 200 16582 Timeline bang (with possible delay);
#X obj 30 16612 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 16609 Timeline section;
#X obj 30 16634 tl.timeline;
#X text 200 16634 Timeline - event scheduler;
#X obj 30 16661 tl.toggle;
#X text 200 16661 Timeline bang;
#X obj 30 16688 tl.transport;
#X text 200 16688 Timeline transport control;
#X obj 20 16715 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 16756 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16770 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 16767 array view with cursor and selection;
#X obj 30 16795 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 16792 A bang... that's all;
#X obj 30 16820 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 16817 colorchooser widget;
#X obj 30 16845 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 16842 Display GUI object;
#X obj 30 16870 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 16867 GUI for turning DSP on/off;
#X obj 30 16895 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 16892 envelope editor widget;
#X obj 30 16920 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 16917 UI stereo gain control;
#X obj 30 16945 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 16942 UI gain control;
#X obj 30 16970 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 16967 simple icon with button capabilities;
#X obj 30 16995 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 16992 value increment/decrement;
#X obj 30 17020 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 17017 keyboard widget;
#X obj 30 17045 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 17042 knob widget;
#X obj 30 17070 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 17067 simple label widget;
#X obj 30 17095 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 17092 Hyperlink widget;
#X obj 30 17120 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 17117 The matrix of toggles has you.;
#X obj 30 17145 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 17142 Dropdown menu;
#X obj 30 17170 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 17167 Shows peak and rms signal level;
#X obj 30 17195 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 17192 filter mouse events from ui objects;
#X obj 30 17220 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 17217 routes mouse events from ui objects;
#X obj 30 17245 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 17242 counterpart of the vanilla [nbx];
#X obj 30 17270 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 17267 counterpart of the vanilla [nbx] for signal;
#X obj 30 17295 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 17292 signal plotter;
#X obj 30 17320 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 17317 2D slider in polar coordinates;
#X obj 30 17345 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 17342 Preset manager;
#X obj 30 17370 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 17367 counterpart of the vanilla radio toggle;
#X obj 30 17395 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 17392 range slider;
#X obj 30 17420 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 17417 Scope GUI object;
#X obj 30 17445 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 17442 counterpart of the vanilla slider;
#X obj 30 17470 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 17467 2D slider widget;
#X obj 30 17495 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 17492 Multiple slider widget;
#X obj 30 17520 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 17517 Spectroscope GUI object;
#X obj 30 17545 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 17542 displays a list of text buttons or text toggles;
#X obj 30 17570 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 17567 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 17592 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 17592 version: v0.9.0 \, license: GPL3;
#X obj 20 17620 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 17643 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 17607 msg 0;
#X obj 670 17642 switch~;
#X connect 1212 0 1213 0;