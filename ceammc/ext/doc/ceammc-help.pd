#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.random;
#X text 200 880 metro random bang with specified range;
#X obj 30 907 metro.seq;
#X text 200 907 metro sequencer;
#X obj 30 934 mix~;
#X text 200 934 multislot signal mixer;
#X obj 30 961 obj.props;
#X text 200 961 property extractor;
#X obj 30 988 radio;
#X text 200 988 float index to outlet values as radio switch;
#X obj 30 1015 window;
#X text 200 1015 returns window value by given window position;
#X obj 30 1042 xdac~;
#X text 200 1042 dac~ with channel ranges;
#X obj 30 1069 xfade2~;
#X text 200 1069 multi stereo-signal crossfade;
#X obj 30 1096 xfade~;
#X text 200 1096 multi signal crossfade;
#X obj 20 1123 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1164 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1175 array.p2s;
#X text 200 1175 convert array phase [0\..1] to sample position;
#X obj 30 1202 array.s2p;
#X text 200 1202 convert array sample position to relative phase position
[0\..1];
#X obj 30 1242 conv.amp2dbfs;
#X text 200 1242 convert from amplitude to decibel full scale;
#X obj 30 1269 conv.bpm2hz;
#X text 200 1269 converts BPM to frequency in herz;
#X obj 30 1296 conv.bpm2ms;
#X text 200 1296 convert frequency in BPM to period in milliseconds;
#X obj 30 1323 conv.bpm2sec;
#X text 200 1323 convert frequency in BPM to period in seconds;
#X obj 30 1350 conv.car2pol;
#X text 200 1350 convert cartesian coords to polar;
#X obj 30 1377 conv.cc2amp;
#X text 200 1377 convert from MIDI Control Change range;
#X obj 30 1404 conv.dbfs2amp;
#X text 200 1404 convert decibel full scale to amplitude;
#X obj 30 1431 conv.lin2curve;
#X text 200 1431 map linear to exponential range with 0 allowed.;
#X obj 30 1458 conv.lin2exp;
#X text 200 1458 maps linear range to exponential range;
#X obj 30 1485 conv.lin2lin;
#X text 200 1485 convert from one linear range to another;
#X obj 30 1512 conv.list2props;
#X text 200 1512 converts list to series of property messages;
#X obj 30 1539 conv.midi2freq;
#X text 200 1539 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1579 conv.phase2rad;
#X text 200 1579 convert phase value [0-1] to radians;
#X obj 30 1606 conv.phase2rad~;
#X text 200 1606 convert phase value [0-1] to radians;
#X obj 30 1633 conv.pitch2midi;
#X text 200 1633 converts symbol pitch name to MIDI note number;
#X obj 30 1660 conv.pol2car;
#X text 200 1660 convert from polar coordinates to cartesian;
#X obj 30 1687 conv.rad2phase;
#X text 200 1687 convert radians value to phase;
#X obj 30 1714 conv.rad2phase~;
#X text 200 1714 convert radians value to phase;
#X obj 30 1741 conv.samp2sec;
#X text 200 1741 convert samples to time according to samplerate;
#X obj 30 1768 conv.sec2samp;
#X text 200 1768 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1808 conv.sec2str;
#X text 200 1808 converts float time in seconds to formated symbol
(or string);
#X obj 30 1835 conv.str2sec;
#X text 200 1835 converts formatted time to float value in seconds;
#X obj 20 1862 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1903 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1914 data.dict;
#X text 200 1914 dictionary container: store values by key;
#X obj 30 1941 data.fifo;
#X text 200 1941 First-In-First-Out (FIFO) queue data container;
#X obj 30 1968 data.float;
#X text 200 1968 robust float object;
#X obj 30 1995 data.int;
#X text 200 1995 robust int object;
#X obj 30 2022 data.list;
#X text 200 2022 list container;
#X obj 30 2049 data.mlist;
#X text 200 2049 multidimensional list container;
#X obj 30 2076 data.set;
#X text 200 2076 container that store unique elements;
#X obj 30 2103 data.set2list;
#X text 200 2103 converts set to list;
#X obj 30 2130 data.tree;
#X text 200 2130 JSON like structure for storing values;
#X obj 30 2157 dict.contains;
#X text 200 2157 predicate to check dict contains key;
#X obj 30 2184 dict.each;
#X text 200 2184 map each value in dict;
#X obj 30 2211 dict.from_list;
#X text 200 2211 creates dictionary from list;
#X obj 30 2238 dict.get;
#X text 200 2238 on input dict outputs value to corresponding key outlet;
#X obj 30 2265 dict.keys;
#X text 200 2265 get list of dict keys;
#X obj 30 2292 dict.pass;
#X text 200 2292 passes specified keys in dict;
#X obj 30 2319 dict.reject;
#X text 200 2319 rejects specified keys from dict;
#X obj 30 2346 dict.size;
#X text 200 2346 dictionary size;
#X obj 30 2373 dict.to_list;
#X text 200 2373 converts dictionary to plain list;
#X obj 30 2400 dict.values;
#X text 200 2400 dictionary values as mlist;
#X obj 30 2427 mlist.flatten;
#X text 200 2427 flatten nested mlist;
#X obj 30 2454 set.contains;
#X text 200 2454 check if specified element is in set;
#X obj 30 2481 set.diff;
#X text 200 2481 difference between two sets;
#X obj 30 2508 set.equal;
#X text 200 2508 checks if two sets are equal (contains same elements);
#X obj 30 2535 set.intersect;
#X text 200 2535 output intersection of given sets;
#X obj 30 2562 set.size;
#X text 200 2562 get number of elements in set;
#X obj 30 2589 set.symdiff;
#X text 200 2589 symmetric difference between two sets;
#X obj 30 2616 set.union;
#X text 200 2616 output union of given sets;
#X obj 30 2643 tree.float;
#X text 200 2643 convert tree node to float value;
#X obj 30 2670 tree.symbol;
#X text 200 2670 convert tree node to symbol value;
#X obj 20 2697 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2738 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2749 dyn.comp2~;
#X text 200 2749 stereo dynamic range compressor;
#X obj 30 2776 dyn.comp~;
#X text 200 2776 mono dynamic range compressors;
#X obj 30 2803 dyn.gate2~;
#X text 200 2803 stereo signal gate;
#X obj 30 2830 dyn.gate~;
#X text 200 2830 mono signal gate;
#X obj 30 2857 dyn.limit2~;
#X text 200 2857 stereo 1176LN Peak Limiter;
#X obj 30 2884 dyn.limit~;
#X text 200 2884 mono 1176LN Peak Limiter;
#X obj 30 2911 dyn.softclip~;
#X text 200 2911 soft signal clip;
#X obj 20 2938 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2979 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2990 env.adsr~;
#X text 200 2990 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3017 env.ar~;
#X text 200 3017 Attack/Release envelope generator;
#X obj 30 3044 env.asr~;
#X text 200 3044 Attack/Sustain/Release envelope generator;
#X obj 30 3071 env.concat;
#X text 200 3071 Envelope concatenation;
#X obj 30 3098 env.follow~;
#X text 200 3098 Envelope follower with independent attack and release
times;
#X obj 30 3125 env.mix;
#X text 200 3125 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3165 env.smooth~;
#X text 200 3165 An envelope with an exponential attack and release;
#X obj 30 3192 env.tscale;
#X text 200 3192 Envelope time-scale;
#X obj 30 3219 env.tshift;
#X text 200 3219 Envelope time-shift (horizontal);
#X obj 30 3246 env.vscale;
#X text 200 3246 Envelope value-scale;
#X obj 30 3273 env2array;
#X text 200 3273 Renders envelope to specified array;
#X obj 30 3300 env2vline;
#X text 200 3300 Converts envelope to bunch of vline messages;
#X obj 30 3327 envelope;
#X text 200 3327 Envelope data type;
#X obj 30 3354 vline2env;
#X text 200 3354 Converts vline messages to env;
#X obj 20 3381 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3422 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3433 expand_env;
#X text 200 3433 Substitute enviroment variables in data stream;
#X obj 30 3460 flow.append;
#X text 200 3460 inject message into flow;
#X obj 30 3487 flow.change;
#X text 200 3487 rejects redundant input values;
#X obj 30 3514 flow.count;
#X text 200 3514 control flow event counter;
#X obj 30 3541 flow.demultiplex;
#X text 200 3541 control flow demultiplexer;
#X obj 30 3568 flow.demultiplex2~;
#X text 200 3568 audio stream stereo demultiplexer;
#X obj 30 3595 flow.demultiplex~;
#X text 200 3595 audio stream demultiplexer;
#X obj 30 3622 flow.gate;
#X text 200 3622 control flow gate. [spigot] analog;
#X obj 30 3649 flow.greater;
#X text 200 3649 numeric stream router;
#X obj 30 3676 flow.group;
#X text 200 3676 group data atoms in list of specified size;
#X obj 30 3703 flow.interval;
#X text 200 3703 measure time between flow events;
#X obj 30 3730 flow.less;
#X text 200 3730 numeric stream router \, like many [moses];
#X obj 30 3757 flow.less_eq;
#X text 200 3757 numeric stream router \, like many [moses];
#X obj 30 3784 flow.match;
#X text 200 3784 route data flow by regexp match;
#X obj 30 3811 flow.multiplex;
#X text 200 3811 control flow multiplexer;
#X obj 30 3838 flow.multiplex2~;
#X text 200 3838 audio stream stereo multiplexer;
#X obj 30 3865 flow.multiplex~;
#X text 200 3865 audio stream multiplexer;
#X obj 30 3892 flow.once;
#X text 200 3892 one message pass thru;
#X obj 30 3919 flow.pack;
#X text 200 3919 flow pack;
#X obj 30 3946 flow.pass;
#X text 200 3946 pass specified values;
#X obj 30 3973 flow.pass_if;
#X text 200 3973 pass values that accepted by predicate object;
#X obj 30 4000 flow.reject;
#X text 200 4000 reject specified values;
#X obj 30 4027 flow.reject_if;
#X text 200 4027 reject values by predicate;
#X obj 30 4054 flow.route;
#X text 200 4054 advanced message router;
#X obj 30 4081 flow.speedlim;
#X text 200 4081 control stream speed limiter;
#X obj 30 4108 flow.split;
#X text 200 4108 split data flow by external side-chain predicate;
#X obj 30 4135 flow.sync;
#X text 200 4135 bus with only hot inlets;
#X obj 30 4162 flow.sync_pack;
#X text 200 4162 flow pack with all hot inlets;
#X obj 30 4189 flow.tee~;
#X text 200 4189 separate audio and control streams;
#X obj 30 4216 replace;
#X text 200 4216 Replace atoms in data stream;
#X obj 20 4243 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4284 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4295 flt.biquad~;
#X text 200 4295 second order IIR filter.;
#X obj 30 4322 flt.bpf12~;
#X text 200 4322 Band-pass filter with 12/db per octave slope;
#X obj 30 4349 flt.bpf24~;
#X text 200 4349 Band-pass filter with 24/db per octave slope;
#X obj 30 4376 flt.c_bpf~;
#X text 200 4376 BPF coefficient calculator for biquad filter;
#X obj 30 4403 flt.c_highshelf~;
#X text 200 4403 Highshelf filter coefficient calculator for biquad;
#X obj 30 4430 flt.c_hpf~;
#X text 200 4430 HPF coefficient calculator for biquad filter;
#X obj 30 4457 flt.c_lowshelf~;
#X text 200 4457 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4484 flt.c_lpf~;
#X text 200 4484 LPF coefficient calculator for biquad filter;
#X obj 30 4511 flt.c_notch~;
#X text 200 4511 Band-reject coefficient calculator for biquad filter;
#X obj 30 4538 flt.c_peak~;
#X text 200 4538 Peaking equalizer calculator for biquad;
#X obj 30 4565 flt.dcblock2~;
#X text 200 4565 stereo DC blocker;
#X obj 30 4592 flt.dcblock~;
#X text 200 4592 mono DC blocker;
#X obj 30 4619 flt.eq10~;
#X text 200 4619 graphic 10 band equalizer;
#X obj 30 4646 flt.eq_peak_cq~;
#X text 200 4646 constant-Q second order peaking equalizer section;
#X obj 30 4673 flt.eq_peak~;
#X text 200 4673 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4728 flt.highshelf~;
#X text 200 4728 gain boost|cut above some frequency;
#X obj 30 4755 flt.hpf12~;
#X text 200 4755 High-pass filter with 12/db per octave slope;
#X obj 30 4782 flt.hpf24~;
#X text 200 4782 High-pass filter with 24/db per octave slope;
#X obj 30 4809 flt.lowshelf~;
#X text 200 4809 gain boost|cut below some frequency;
#X obj 30 4836 flt.lpf12~;
#X text 200 4836 Low-pass filter with 12/db per octave slope;
#X obj 30 4863 flt.lpf24~;
#X text 200 4863 Low-pass filter with 24/db per octave slope;
#X obj 30 4890 flt.median;
#X text 200 4890 Median control flow filter;
#X obj 30 4917 flt.moog_vcf~;
#X text 200 4917 Moog Voltage Controlled Filter;
#X obj 30 4944 flt.notch~;
#X text 200 4944 band-rejection filter;
#X obj 30 4971 flt.resonbp~;
#X text 200 4971 Simple resonant bandpass filter;
#X obj 20 4998 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5039 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5050 fx.bitdown~;
#X text 200 5050 bit downer and downsampler effect;
#X obj 30 5077 fx.chorus~;
#X text 200 5077 Chorus effect;
#X obj 30 5104 fx.distortion1~;
#X text 200 5104 distortion #1 from Guitarix effects set;
#X obj 30 5131 fx.distortion2~;
#X text 200 5131 distortion #2 from Guitarix effects set;
#X obj 30 5158 fx.distortion3~;
#X text 200 5158 simple distortion #3 from Guitarix effects set;
#X obj 30 5185 fx.distortion~;
#X text 200 5185 cubic nonlinearity distortion;
#X obj 30 5212 fx.drive~;
#X text 200 5212 Guitarix drive effect;
#X obj 30 5239 fx.drone_box~;
#X text 200 5239 mono sympathetic resonance generator;
#X obj 30 5266 fx.echo~;
#X text 200 5266 simple echo effect;
#X obj 30 5293 fx.flanger~;
#X text 200 5293 mono flanging effect;
#X obj 30 5320 fx.freeverb2~;
#X text 200 5320 freeverb2 - stereo version of freeverb;
#X obj 30 5347 fx.freeverb~;
#X text 200 5347 freeverb - common used open-source reverb;
#X obj 30 5374 fx.freqshift~;
#X text 200 5374 frequency shifter or single-sideband ring modulation;
#X obj 30 5401 fx.granulator~;
#X text 200 5401 simple input stream granulator;
#X obj 30 5428 fx.greyhole~;
#X text 200 5428 A complex echo-like effect;
#X obj 30 5455 fx.looper~;
#X text 200 5455 One track looper;
#X obj 30 5482 fx.pitchshift~;
#X text 200 5482 simple pitch shifter based on 2 delay lines;
#X obj 30 5509 fx.sdelay~;
#X text 200 5509 smooth delay with a feedback control;
#X obj 30 5536 fx.vocoder~;
#X text 200 5536 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5576 fx.wahwah~;
#X text 200 5576 digitized CryBaby wah pedal;
#X obj 30 5603 fx.zita_rev1~;
#X text 200 5603 Zita stereo reverb;
#X obj 20 5630 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5682 global.dict;
#X text 200 5682 global named dict object;
#X obj 30 5709 global.float;
#X text 200 5709 global named float object;
#X obj 30 5736 global.int;
#X text 200 5736 global named integer object;
#X obj 30 5763 global.list;
#X text 200 5763 global named list object;
#X obj 30 5790 global.mlist;
#X text 200 5790 global named mlist object;
#X obj 30 5817 global.set;
#X text 200 5817 global named set object;
#X obj 20 5844 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5885 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5896 hw.apple_smc;
#X text 200 5896 query the system management control in Apples;
#X obj 30 5923 hw.apple_sms;
#X text 200 5923 query the sudden motion sensor in Apples;
#X obj 30 5950 hw.arduino;
#X text 200 5950 Arduino device;
#X obj 30 5977 hw.cpu_temp;
#X text 200 5977 get CPU temperature;
#X obj 30 6004 hw.display;
#X text 200 6004 get/set display properties;
#X obj 30 6031 hw.kbd_light;
#X text 200 6031 Get/set keyboard light on some devices;
#X obj 20 6058 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6099 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6110 lfo.+pulse~;
#X text 200 6110 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6137 lfo.+saw~;
#X text 200 6137 Positive unit-amplitude low frequency saw wave;
#X obj 30 6164 lfo.+square~;
#X text 200 6164 Positive low frequency square wave;
#X obj 30 6191 lfo.+tri~;
#X text 200 6191 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6218 lfo.impulse~;
#X text 200 6218 Unit-amplitude low-frequency impulse train;
#X obj 30 6245 lfo.pulse~;
#X text 200 6245 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6272 lfo.saw~;
#X text 200 6272 Full-range unit-amplitude low frequency saw;
#X obj 30 6299 lfo.square~;
#X text 200 6299 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6326 lfo.tri~;
#X text 200 6326 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6353 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6394 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6405 list.^at;
#X text 200 6405 on input index(es) outputs list element(s);
#X obj 30 6432 list.^contains;
#X text 200 6432 on input atom or list checks if specified list contains
it;
#X obj 30 6459 list.^search;
#X text 200 6459 on input atom returns it index in list;
#X obj 30 6486 list.all_of;
#X text 200 6486 checks if all list atoms accepted by predicate;
#X obj 30 6513 list.any_of;
#X text 200 6513 checks if at least one list element is accepted by
predicate;
#X obj 30 6540 list.append;
#X text 200 6540 append atom or list to the end of input list;
#X obj 30 6567 list.apply_to;
#X text 200 6567 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6607 list.at;
#X text 200 6607 on input list outputs element(s) at specified index(es);
#X obj 30 6634 list.choice;
#X text 200 6634 returns random element from list;
#X obj 30 6661 list.contains;
#X text 200 6661 on input list checks if it contains specified subsequence;
#X obj 30 6688 list.count;
#X text 200 6688 returns the number of items that equal to specified
value;
#X obj 30 6715 list.count_if;
#X text 200 6715 returns the number of items that satisfy to external
predicate.;
#X obj 30 6755 list.delta;
#X text 200 6755 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6795 list.distribution;
#X text 200 6795 list value distribution;
#X obj 30 6822 list.do;
#X text 200 6822 iterate and modify list contents via side-chain;
#X obj 30 6849 list.each;
#X text 200 6849 maps each list value via external object(s);
#X obj 30 6876 list.enumerate;
#X text 200 6876 enumerates input list;
#X obj 30 6903 list.equal;
#X text 200 6903 checks if given lists are equal;
#X obj 30 6930 list.first;
#X text 200 6930 returns first list element;
#X obj 30 6957 list.gen;
#X text 200 6957 generates list of specified length via external generator;
#X obj 30 6984 list.histogram;
#X text 200 6984 outputs distribution histogram;
#X obj 30 7011 list.insert;
#X text 200 7011 insert atom or list to the specified position of input
list;
#X obj 30 7038 list.integrator;
#X text 200 7038 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7078 list.last;
#X text 200 7078 returns last list element;
#X obj 30 7105 list.length;
#X text 200 7105 returns the number of atoms in the list;
#X obj 30 7132 list.max;
#X text 200 7132 returns largest element in the list;
#X obj 30 7159 list.mean;
#X text 200 7159 calculates average of list of floats;
#X obj 30 7186 list.min;
#X text 200 7186 returns smallest element in the list;
#X obj 30 7213 list.none_of;
#X text 200 7213 checks if none of list atoms is accepted by predicate;
#X obj 30 7240 list.normalize;
#X text 200 7240 normalizes float list values to get their sum = 1.0;
#X obj 30 7267 list.pass_if;
#X text 200 7267 leave only elements accepted by predicate;
#X obj 30 7294 list.prepend;
#X text 200 7294 prepend atom or list before input list;
#X obj 30 7321 list.product;
#X text 200 7321 calculates product of floats in list;
#X obj 30 7348 list.range;
#X text 200 7348 returns list smallest and largest value;
#X obj 30 7375 list.reduce;
#X text 200 7375 apply function of two arguments cumulatively to the
list;
#X obj 30 7402 list.remove;
#X text 200 7402 on input list remove element(s) at specified positions;
#X obj 30 7429 list.remove_if;
#X text 200 7429 remove elements by predicate;
#X obj 30 7456 list.repack;
#X text 200 7456 repack input list to specified size;
#X obj 30 7483 list.repeat;
#X text 200 7483 creates new list by repeating given list specified
times;
#X obj 30 7510 list.resize;
#X text 200 7510 changes list size;
#X obj 30 7537 list.reverse;
#X text 200 7537 reverses the order of the elements in the list;
#X obj 30 7564 list.rldecode;
#X text 200 7564 Run-length list decoder (RLE);
#X obj 30 7591 list.rlencode;
#X text 200 7591 RLE (run-length encoding) for lists;
#X obj 30 7618 list.rotate;
#X text 200 7618 rotates list;
#X obj 30 7645 list.route;
#X text 200 7645 acts like [route] but for lists;
#X obj 30 7672 list.search;
#X text 200 7672 search specified items in input list;
#X obj 30 7699 list.separate;
#X text 200 7699 sends list elements one by one separately;
#X obj 30 7726 list.seq;
#X text 200 7726 numeric sequence list generator;
#X obj 30 7753 list.set;
#X text 200 7753 on input list set value at specified position;
#X obj 30 7780 list.shift;
#X text 200 7780 shifts the contents of the list with linear interpolation;
#X obj 30 7807 list.shuffle;
#X text 200 7807 randomly rearranges elements in list;
#X obj 30 7834 list.slice;
#X text 200 7834 extract sublist;
#X obj 30 7861 list.sort;
#X text 200 7861 sorts list values by ascending order;
#X obj 30 7888 list.sort_with;
#X text 200 7888 sort list with user defined side-chain;
#X obj 30 7915 list.split;
#X text 200 7915 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7955 list.stretch;
#X text 200 7955 stretches list - chenges its size with linear interpolation.;
#X obj 30 7982 list.sum;
#X text 200 7982 calculates sum of floats in list;
#X obj 30 8009 list.unique;
#X text 200 8009 removes duplicates from input list;
#X obj 30 8036 list.unpack;
#X text 200 8036 unpack list elements to separate outlets;
#X obj 30 8063 list.unzip;
#X text 200 8063 splits list to N lists \, each to separate output;
#X obj 30 8090 list.walk;
#X text 200 8090 Walks thru the list;
#X obj 30 8117 list.zip;
#X text 200 8117 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8172 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8213 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8224 live.capture~;
#X text 200 8224 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8264 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8305 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8316 local.dict;
#X text 200 8316 local named dict object;
#X obj 30 8343 local.float;
#X text 200 8343 canvas-scoped named float variable;
#X obj 30 8370 local.int;
#X text 200 8370 canvas-scoped named integer variable;
#X obj 30 8397 local.list;
#X text 200 8397 local named list object;
#X obj 30 8424 local.mlist;
#X text 200 8424 local named mlist object;
#X obj 30 8451 local.set;
#X text 200 8451 local named set object;
#X obj 20 8478 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8519 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8530 math.abs;
#X text 200 8530 absolute value function;
#X obj 30 8557 math.acos;
#X text 200 8557 arc cosine function;
#X obj 30 8584 math.acosh;
#X text 200 8584 inverse hyperbolic cosine function;
#X obj 30 8611 math.and;
#X text 200 8611 operation AND for multiple arguments;
#X obj 30 8638 math.approx;
#X text 200 8638 check if input value approximately equal to pattern;
#X obj 30 8665 math.asin;
#X text 200 8665 arc sine function;
#X obj 30 8692 math.asinh;
#X text 200 8692 inverse hyperbolic sine function;
#X obj 30 8719 math.atan;
#X text 200 8719 arc tangent function;
#X obj 30 8746 math.atanh;
#X text 200 8746 inverse hyperbolic tangent function;
#X obj 30 8773 math.cbrt;
#X text 200 8773 cube root function;
#X obj 30 8800 math.cdiv~;
#X text 200 8800 division of complex signals;
#X obj 30 8827 math.ceil;
#X text 200 8827 round to smallest integral value not less than input
value;
#X obj 30 8854 math.cmul~;
#X text 200 8854 multiplication of complex signals;
#X obj 30 8881 math.cos;
#X text 200 8881 cosine function;
#X obj 30 8908 math.cosh;
#X text 200 8908 hyperbolic cosine function;
#X obj 30 8935 math.div;
#X text 200 8935 division (on lists too);
#X obj 30 8962 math.e;
#X text 200 8962 mathematical constant \, base of the natural logarithm;
#X obj 30 8989 math.exp;
#X text 200 8989 exponential functions;
#X obj 30 9016 math.exp2;
#X text 200 9016 exponential functions;
#X obj 30 9043 math.expr;
#X text 200 9043 dynamic [expr];
#X obj 30 9070 math.floor;
#X text 200 9070 round to largest integral value not greater than x;
#X obj 30 9097 math.gcd;
#X text 200 9097 calculate greatest common divisor;
#X obj 30 9124 math.inf;
#X text 200 9124 infinity value that cannot be represented accurately;
#X obj 30 9151 math.lcm;
#X text 200 9151 calculate least common multiple;
#X obj 30 9178 math.log;
#X text 200 9178 logarithm functions;
#X obj 30 9205 math.log10;
#X text 200 9205 logarithm functions;
#X obj 30 9232 math.log2;
#X text 200 9232 logarithm functions;
#X obj 30 9259 math.mul;
#X text 200 9259 multiplication (on lists too);
#X obj 30 9286 math.nan;
#X text 200 9286 Not a Number \, unrepresentable value;
#X obj 30 9313 math.neg;
#X text 200 9313 negate function;
#X obj 30 9340 math.or;
#X text 200 9340 operation OR for multiple arguments;
#X obj 30 9367 math.pi;
#X text 200 9367 mathematical constant;
#X obj 30 9394 math.polyeval;
#X text 200 9394 evaluates the polynomial described by the coefficients
list;
#X obj 30 9421 math.reciprocal;
#X text 200 9421 calculate reciprocal number;
#X obj 30 9448 math.round;
#X text 200 9448 round to integral value \, regardless of rounding
direction;
#X obj 30 9475 math.round~;
#X text 200 9475 signal round;
#X obj 30 9502 math.sign;
#X text 200 9502 sign function;
#X obj 30 9529 math.sin;
#X text 200 9529 sine function;
#X obj 30 9556 math.sinh;
#X text 200 9556 hyperbolic sine function;
#X obj 30 9583 math.sqrt;
#X text 200 9583 square root function;
#X obj 30 9610 math.squared;
#X text 200 9610 value square;
#X obj 30 9637 math.sync_add;
#X text 200 9637 sync addition;
#X obj 30 9664 math.sync_and;
#X text 200 9664 sync logical AND operation;
#X obj 30 9691 math.sync_div;
#X text 200 9691 sync division;
#X obj 30 9718 math.sync_eq;
#X text 200 9718 sync equal numbers check;
#X obj 30 9745 math.sync_ge;
#X text 200 9745 sync greater equal numbers compare;
#X obj 30 9772 math.sync_gt;
#X text 200 9772 sync greater then numbers compare;
#X obj 30 9799 math.sync_le;
#X text 200 9799 sync less equal numbers compare;
#X obj 30 9826 math.sync_lt;
#X text 200 9826 sync less then numbers compare;
#X obj 30 9853 math.sync_mod;
#X text 200 9853 sync remainder of modulo division (float or integer);
#X obj 30 9880 math.sync_mul;
#X text 200 9880 sync multiplication;
#X obj 30 9907 math.sync_ne;
#X text 200 9907 sync numbers for not equality;
#X obj 30 9934 math.sync_or;
#X text 200 9934 sync logical OR operation;
#X obj 30 9961 math.sync_sub;
#X text 200 9961 sync subtraction;
#X obj 30 9988 math.sync_xor;
#X text 200 9988 sync logical XOR operation;
#X obj 30 10015 math.tan;
#X text 200 10015 tangent function;
#X obj 30 10042 math.tanh;
#X text 200 10042 hyperbolic tangent function;
#X obj 30 10069 math.trunc;
#X text 200 10069 truncate to integer value;
#X obj 20 10096 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10137 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10148 midi.ctl2str;
#X text 200 10148 convert Standard MIDI Controllers number to name;
#X obj 30 10175 midi.event2ctl;
#X text 200 10175 convert MidiEvent message to controller channel/value
pair;
#X obj 30 10202 midi.event2note;
#X text 200 10202 convert MidiEvent message to midi note/velocity pair;
#X obj 30 10229 midi.event2prg;
#X text 200 10229 convert MidiEvent message to midi program change
value;
#X obj 30 10256 midi.file;
#X text 200 10256 standard midi file SMF reader and writer;
#X obj 30 10283 midi.key2str;
#X text 200 10283 convert key number to SPN name according to tonality;
#X obj 30 10310 midi.prg2str;
#X text 200 10310 convert GM Instrument number to name (string or symbol);
#X obj 30 10337 midi.track;
#X text 200 10337 extract track from MidiFile;
#X obj 20 10364 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 10405 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10416 click~;
#X text 200 10416 Output single impulse on bang;
#X obj 30 10443 fluid~;
#X text 200 10443 FluidSynth SoundFont 2 player;
#X obj 30 10470 modplug~;
#X text 200 10470 MOD file player (using libmodplug);
#X obj 30 10497 speech.flite;
#X text 200 10497 render speech to array;
#X obj 20 10524 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 10565 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10576 msg;
#X text 200 10576 message constructor;
#X obj 30 10603 msg.after;
#X text 200 10603 send specified message after incoming message;
#X obj 30 10630 msg.onload;
#X text 200 10630 send message when patch loads;
#X obj 20 10657 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 10698 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10709 net.host2ip;
#X text 200 10709 returns IP address by DNS name;
#X obj 20 10736 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 10777 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10788 noise.crackle~;
#X text 200 10788 sparse noise generator;
#X obj 30 10815 noise.lfreq0~;
#X text 200 10815 sampled/held noise (piecewise constant);
#X obj 30 10842 noise.lfreq~;
#X text 200 10842 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10869 noise.pink~;
#X text 200 10869 Pink noise generator;
#X obj 30 10896 noise.white~;
#X text 200 10896 White noise generator;
#X obj 20 10923 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10964 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10975 osc.blit~;
#X text 200 10975 Bandlimited impulse train oscillator;
#X obj 30 11002 osc.impulse~;
#X text 200 11002 Bandlimited impulse train generator;
#X obj 30 11029 osc.pulse~;
#X text 200 11029 Bandlimited pulse train oscillator;
#X obj 30 11056 osc.saw4~;
#X text 200 11056 Bandlimited sawtooth wave;
#X obj 30 11083 osc.saw~;
#X text 200 11083 Alias-free sawtooth wave;
#X obj 30 11110 osc.sinfb~;
#X text 200 11110 Sine oscilator with feedback;
#X obj 30 11137 osc.sin~;
#X text 200 11137 Sine wave oscillator;
#X obj 30 11164 osc.square~;
#X text 200 11164 Bandlimited square wave oscillator;
#X obj 30 11191 osc.tri~;
#X text 200 11191 Bandlimited triangle wave oscillator;
#X obj 20 11218 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 11259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11270 canvas.current;
#X text 200 11270 verbose information about current canvas;
#X obj 30 11297 canvas.dir;
#X text 200 11297 current canvas directory;
#X obj 30 11324 canvas.name;
#X text 200 11324 current canvas name;
#X obj 30 11351 canvas.path;
#X text 200 11351 current canvas fullpath;
#X obj 30 11378 canvas.top;
#X text 200 11378 verbose information about top-level canvas;
#X obj 30 11405 patch.args;
#X text 200 11405 Get patch or subpatch arguments;
#X obj 20 11432 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 11473 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11484 path.basename;
#X text 200 11484 outputs filename portion of pathname;
#X obj 30 11511 path.dirname;
#X text 200 11511 outputs directory portion of pathname;
#X obj 30 11538 path.exists;
#X text 200 11538 checks if given path exists;
#X obj 30 11565 path.lsdir;
#X text 200 11565 list directory contents;
#X obj 20 11592 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 11633 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11644 is_any;
#X text 200 11644 checks if input data has *any* type;
#X obj 30 11671 is_bang;
#X text 200 11671 checks if input data has *bang* type;
#X obj 30 11698 is_data;
#X text 200 11698 checks if input data has *data* type;
#X obj 30 11725 is_dict;
#X text 200 11725 checks if input data has *dict* type;
#X obj 30 11752 is_even;
#X text 200 11752 checks if input number is even;
#X obj 30 11779 is_file;
#X text 200 11779 checks if file exists and accessible;
#X obj 30 11806 is_float;
#X text 200 11806 checks if input data has *float* type;
#X obj 30 11833 is_list;
#X text 200 11833 checks if input data has *list* type;
#X obj 30 11860 is_odd;
#X text 200 11860 checks if input number is odd;
#X obj 30 11887 is_pointer;
#X text 200 11887 checks if input data has *pointer* type;
#X obj 30 11914 is_symbol;
#X text 200 11914 checks if input data has *symbol* type;
#X obj 20 11941 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11982 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11993 preset.float;
#X text 200 11993 load/store float preset;
#X obj 30 12020 preset.list;
#X text 200 12020 load/store symbol preset;
#X obj 30 12047 preset.storage;
#X text 200 12047 preset storage control;
#X obj 30 12074 preset.symbol;
#X text 200 12074 load/store symbol preset;
#X obj 20 12101 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12153 patch.props;
#X text 200 12153 patch properties manager;
#X obj 30 12180 prop;
#X text 200 12180 get/set named property value for subpatch or abstraction;
#X obj 30 12207 prop.declare;
#X text 200 12207 declare named property for subpatch or abstraction;
#X obj 30 12234 prop.get;
#X text 200 12234 Property extractor;
#X obj 30 12261 prop.get~;
#X text 200 12261 Property extractor from sound stream;
#X obj 30 12288 prop.set;
#X text 200 12288 Property injector;
#X obj 20 12315 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 12356 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12367 proto.firmata;
#X text 200 12367 Firmata Arduino protocol support;
#X obj 30 12394 proto.sp.alpaca;
#X text 200 12394 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 12421 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 12462 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12473 random.discrete;
#X text 200 12473 random weighted integers on interval [0 \, n);
#X obj 30 12500 random.float;
#X text 200 12500 random float generator in specified range;
#X obj 30 12527 random.gauss;
#X text 200 12527 gaussian random distribution;
#X obj 30 12554 random.int;
#X text 200 12554 Random integer generator in specified range;
#X obj 30 12581 random.linear;
#X text 200 12581 random linear distribution;
#X obj 30 12608 random.pw_const;
#X text 200 12608 piecewise constant random distribution;
#X obj 30 12635 random.pw_lin;
#X text 200 12635 piecewise linear random distribution;
#X obj 20 12662 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 12703 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12714 snd.file;
#X text 200 12714 Sound file loader on steroids;
#X obj 20 12741 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 12782 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12793 hoa.2d.decoder~;
#X text 200 12793 hoa 2d decoder;
#X obj 30 12820 hoa.2d.encoder~;
#X text 200 12820 hoa 2d encoder;
#X obj 30 12847 hoa.2d.map~;
#X text 200 12847 a 2d ambisonic multisource spatializer;
#X obj 30 12874 hoa.2d.optim~;
#X text 200 12874 a 2D ambisonic optimization tool;
#X obj 30 12901 hoa.2d.projector~;
#X text 200 12901 a plane waves decomposer from circular harmonics
domain;
#X obj 30 12928 hoa.2d.recomposer~;
#X text 200 12928 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 12968 hoa.2d.rotate~;
#X text 200 12968 a 2D ambisonic sound field rotation;
#X obj 30 12995 hoa.2d.wider~;
#X text 200 12995 a 2d fractional ambisonic order simulator;
#X obj 30 13022 hoa.@process;
#X text 200 13022 process properties manager for hoa.process~;
#X obj 30 13049 hoa.in;
#X text 200 13049 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13076 hoa.in~;
#X text 200 13076 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13103 hoa.out;
#X text 200 13103 message outlet for a patcher loaded by hoa.process~;
#X obj 30 13130 hoa.out~;
#X text 200 13130 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13157 hoa.process~;
#X text 200 13157 patcher loader for multichannel processing;
#X obj 30 13187 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 13184 a 2d ambisonic harmonic scope;
#X obj 30 13209 pan.cos~;
#X text 200 13209 two channel equal power sine/cosine panner;
#X obj 30 13236 pan.linsig~;
#X text 200 13236 two channel linear panner with signal control;
#X obj 30 13263 pan.lin~;
#X text 200 13263 two channel linear panner;
#X obj 30 13290 pan.spread~;
#X text 200 13290 spreads input channels across the stereo field;
#X obj 30 13317 pan.sqrt~;
#X text 200 13317 two channel equal power square root panner;
#X obj 30 13344 spat.pan4~;
#X text 200 13344 GMEM SPAT: 4-outputs spatializer;
#X obj 30 13371 spat.pan8~;
#X text 200 13371 GMEM SPAT: 8-outputs spatializer;
#X obj 20 13398 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 13439 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13450 string;
#X text 200 13450 string constructor;
#X obj 30 13477 string.contains;
#X text 200 13477 checks if given string contains specified substring;
#X obj 30 13504 string.ends_with;
#X text 200 13504 checks if given string ends with specified suffix;
#X obj 30 13531 string.equal;
#X text 200 13531 check strings for equality;
#X obj 30 13558 string.format;
#X text 200 13558 formats string like printf.;
#X obj 30 13585 string.join;
#X text 200 13585 joins (concatenates) strings with separator;
#X obj 30 13612 string.length;
#X text 200 13612 number of characters in string (unicode supported);
#X obj 30 13639 string.match;
#X text 200 13639 check if string match regular expression;
#X obj 30 13666 string.remove;
#X text 200 13666 remove substring from input string;
#X obj 30 13693 string.replace;
#X text 200 13693 replace from one substring to another in input string;
#X obj 30 13720 string.split;
#X text 200 13720 split string by separator;
#X obj 30 13747 string.starts_with;
#X text 200 13747 checks if given string starts with specified prefix;
#X obj 30 13774 string.substr;
#X text 200 13774 extract substring from input string;
#X obj 30 13801 string2symbol;
#X text 200 13801 converts string to symbol;
#X obj 20 13828 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 13869 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13880 symbol.equal;
#X text 200 13880 check symbols for equality;
#X obj 30 13907 symbol.length;
#X text 200 13907 number of characters in symbol (unicode supported);
#X obj 30 13934 symbol.num_compare;
#X text 200 13934 numeric symbol compare;
#X obj 20 13961 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14002 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14013 synth.bee3~;
#X text 200 14013 Hammond-oid organ FM synthesis instrument;
#X obj 30 14040 synth.birds~;
#X text 200 14040 bird singing generator;
#X obj 30 14067 synth.church_bell~;
#X text 200 14067 generic church bell modal model;
#X obj 30 14094 synth.dubdub~;
#X text 200 14094 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 14134 synth.eguitar~;
#X text 200 14134 simple electric guitar model with steel strings;
#X obj 30 14161 synth.fgrain~;
#X text 200 14161 file granulator from STK;
#X obj 30 14188 synth.ks~;
#X text 200 14188 Karplus-Strong string;
#X obj 30 14215 synth.marimba~;
#X text 200 14215 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 14255 synth.rhodey~;
#X text 200 14255 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 14282 synth.risset_arp~;
#X text 200 14282 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 14309 synth.risset_tone~;
#X text 200 14309 Jean Claude Risset's endless glissando;
#X obj 30 14336 synth.shakers~;
#X text 200 14336 various percussion sounds from STK library;
#X obj 30 14363 synth.wurley~;
#X text 200 14363 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 14390 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 14431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14442 system.colorpanel;
#X text 200 14442 System color panel dialog popup;
#X obj 30 14469 system.cursor;
#X text 200 14469 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 14496 system.getenv;
#X text 200 14496 Get system environment variables;
#X obj 30 14523 system.hostname;
#X text 200 14523 outputs system hostname;
#X obj 30 14550 system.memsize;
#X text 200 14550 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 14590 system.memused;
#X text 200 14590 returns the process physical memory use - current
and peak;
#X obj 30 14617 system.screen_size;
#X text 200 14617 returns current screen size in pixels;
#X obj 30 14644 system.shell;
#X text 200 14644 run external command in separate process;
#X obj 20 14671 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 14712 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14723 tl.bang;
#X text 200 14723 Timeline bang (with possible delay);
#X obj 30 14753 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 14750 Timeline section;
#X obj 30 14775 tl.timeline;
#X text 200 14775 Timeline - event scheduler;
#X obj 30 14802 tl.toggle;
#X text 200 14802 Timeline bang;
#X obj 30 14829 tl.transport;
#X text 200 14829 Timeline transport control;
#X obj 20 14856 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 14897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14911 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 14908 array view with cursor and selection;
#X obj 30 14936 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 14933 A bang... that's all;
#X obj 30 14961 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 14958 colorchooser widget;
#X obj 30 14986 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 14983 Display GUI object;
#X obj 30 15011 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15008 GUI for turning DSP on/off;
#X obj 30 15036 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15033 envelope editor widget;
#X obj 30 15061 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15058 UI stereo gain control;
#X obj 30 15086 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15083 UI gain control;
#X obj 30 15111 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 15108 simple icon with button capabilities;
#X obj 30 15136 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 15133 value increment/decrement;
#X obj 30 15161 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 15158 keyboard widget;
#X obj 30 15186 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 15183 knob widget;
#X obj 30 15211 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 15208 simple label widget;
#X obj 30 15236 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 15233 Hyperlink widget;
#X obj 30 15261 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 15258 The matrix of toggles has you.;
#X obj 30 15286 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 15283 Dropdown menu;
#X obj 30 15311 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 15308 Shows peak and rms signal level;
#X obj 30 15336 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 15333 filter mouse events from ui objects;
#X obj 30 15361 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 15358 routes mouse events from ui objects;
#X obj 30 15386 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 15383 counterpart of the vanilla [nbx];
#X obj 30 15411 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 15408 counterpart of the vanilla [nbx] for signal;
#X obj 30 15436 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 15433 2D slider in polar coordinates;
#X obj 30 15461 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 15458 Preset manager;
#X obj 30 15486 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 15483 counterpart of the vanilla radio toggle;
#X obj 30 15511 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 15508 range slider;
#X obj 30 15536 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 15533 Scope GUI object;
#X obj 30 15561 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 15558 counterpart of the vanilla slider;
#X obj 30 15586 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 15583 2D slider widget;
#X obj 30 15611 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 15608 Multiple slider widget;
#X obj 30 15636 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 15633 Spectroscope GUI object;
#X obj 30 15661 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 15658 displays a list of text buttons or text toggles;
#X obj 30 15686 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 15683 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 15708 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 15708 version: v0.8.0 \, license: GPL3;
#X obj 20 15729 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;