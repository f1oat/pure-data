#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 20 369 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 424 ui.link @title [function] @url function-help.pd;
#X text 175 421 named function;
#X obj 30 444 function.call;
#X text 175 444 call named function;
#X obj 30 471 metro.pattern;
#X text 175 471 metro with rythmic patterns;
#X obj 30 498 metro.seq;
#X text 175 498 metro sequencer;
#X obj 30 525 window;
#X text 175 525 returns window value by given window position;
#X obj 20 552 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 593 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 604 array.p2s;
#X text 175 604 convert array phase [0\..1] to sample position;
#X obj 30 631 array.s2p;
#X text 175 631 convert array sample position to relative phase
position [0\..1];
#X obj 30 668 conv.bpm2hz;
#X text 175 668 converts BPM to frequency in herz;
#X obj 30 695 conv.bpm2ms;
#X text 175 695 convert frequency in BPM to period in milliseconds;
#X obj 30 722 conv.bpm2sec;
#X text 175 722 convert frequency in BPM to period in seconds;
#X obj 30 749 conv.cc2amp;
#X text 175 749 convert from MIDI Control Change range;
#X obj 30 776 conv.lin2curve;
#X text 175 776 map linear to exponential range with 0 allowed.;
#X obj 30 803 conv.lin2exp;
#X text 175 803 maps linear range to exponential range;
#X obj 30 830 conv.lin2lin;
#X text 175 830 convert from one linear range to another;
#X obj 30 857 conv.pitch2midi;
#X text 175 857 converts symbol pitch name to MIDI note number;
#X obj 30 884 conv.samp2sec;
#X text 175 884 convert samples to time according to samplerate;
#X obj 30 911 conv.sec2samp;
#X text 175 911 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 948 conv.sec2str;
#X text 175 948 converts float time in seconds to formated symbol (or
string);
#X obj 30 985 conv.str2sec;
#X text 175 985 converts formatted time to float value in seconds;
#X obj 20 1012 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1053 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1064 data.fifo;
#X text 175 1064 First-In-First-Out (FIFO) queue data container;
#X obj 30 1091 data.list;
#X text 175 1091 list container;
#X obj 30 1118 data.set;
#X text 175 1118 container that store unique elements;
#X obj 30 1145 data.set2list;
#X text 175 1145 converts set to list;
#X obj 30 1172 set.contains;
#X text 175 1172 check if specified element is in set;
#X obj 30 1199 set.diff;
#X text 175 1199 difference between two sets;
#X obj 30 1226 set.equal;
#X text 175 1226 checks if two sets are equal (contains same
elements);
#X obj 30 1253 set.intersect;
#X text 175 1253 output intersection of given sets;
#X obj 30 1280 set.size;
#X text 175 1280 get number of elements in set;
#X obj 30 1307 set.symdiff;
#X text 175 1307 symmetric difference between two sets;
#X obj 30 1334 set.union;
#X text 175 1334 output union of given sets;
#X obj 20 1361 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1402 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1413 dyn.comp2~;
#X text 175 1413 stereo dynamic range compressor;
#X obj 30 1440 dyn.comp~;
#X text 175 1440 mono dynamic range compressors;
#X obj 30 1467 dyn.gate2~;
#X text 175 1467 stereo signal gate;
#X obj 30 1494 dyn.gate~;
#X text 175 1494 mono signal gate;
#X obj 30 1521 dyn.limit2~;
#X text 175 1521 stereo 1176LN Peak Limiter;
#X obj 30 1548 dyn.limit~;
#X text 175 1548 mono 1176LN Peak Limiter;
#X obj 30 1575 dyn.softclip~;
#X text 175 1575 soft signal clip;
#X obj 20 1602 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1643 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1654 env.adsr~;
#X text 175 1654 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1681 env.ar~;
#X text 175 1681 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1718 env.concat;
#X text 175 1718 Envelope concatenation;
#X obj 30 1745 env.follow~;
#X text 175 1745 Envelope follower with independent attack and release
times.;
#X obj 30 1782 env.mix;
#X text 175 1782 Ouput mix between two envelopes. Envelopes should
contain equal number of segments;
#X obj 30 1819 env.tscale;
#X text 175 1819 Envelope time-scale;
#X obj 30 1846 env.tshift;
#X text 175 1846 Envelope time-shift (horizontal);
#X obj 30 1873 env.vscale;
#X text 175 1873 Envelope value-scale;
#X obj 30 1900 env2array;
#X text 175 1900 Renders envelope to specified array;
#X obj 30 1927 env2vline;
#X text 175 1927 Converts envelope to bunch of vline messages;
#X obj 30 1954 envelope;
#X text 175 1954 Envelope data type;
#X obj 20 1981 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2022 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2033 expand_env;
#X text 175 2033 Substitute enviroment variables in data stream;
#X obj 30 2060 flow.change;
#X text 175 2060 rejects redundant input values;
#X obj 30 2087 flow.count;
#X text 175 2087 control flow event counter;
#X obj 30 2114 flow.demultiplex;
#X text 175 2114 control flow demultiplexer;
#X obj 30 2141 flow.gate;
#X text 175 2141 control flow gate. [spigot] analog;
#X obj 30 2168 flow.group;
#X text 175 2168 group data atoms in list of specified size;
#X obj 30 2195 flow.less;
#X text 175 2195 numeric stream router \, like many [moses];
#X obj 30 2222 flow.less_eq;
#X text 175 2222 numeric stream router \, like many [moses];
#X obj 30 2249 flow.multiplex;
#X text 175 2249 control flow multiplexer;
#X obj 30 2276 flow.pass;
#X text 175 2276 pass specified values;
#X obj 30 2303 flow.pass_if;
#X text 175 2303 pass values that accepted by predicate object;
#X obj 30 2330 flow.reject;
#X text 175 2330 reject specified values;
#X obj 30 2357 flow.reject_if;
#X text 175 2357 reject values by predicate;
#X obj 30 2384 flow.speedlim;
#X text 175 2384 control stream speed limitier;
#X obj 30 2411 flow.split;
#X text 175 2411 split data flow by external side-chain predicate;
#X obj 30 2438 flow.sync;
#X text 175 2438 bus with only hot inlets;
#X obj 30 2465 flow.tee~;
#X text 175 2465 separate audio and control streams;
#X obj 30 2492 replace;
#X text 175 2492 Replace atoms in data stream;
#X obj 20 2519 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2560 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2571 flt.biquad~;
#X text 175 2571 second order IIR filter.;
#X obj 30 2598 flt.bpf12~;
#X text 175 2598 Band-pass filter with 12/db per octave slope;
#X obj 30 2625 flt.bpf24~;
#X text 175 2625 Band-pass filter with 24/db per octave slope;
#X obj 30 2652 flt.c_bpf~;
#X text 175 2652 BPF coefficent calculator for biquad filter;
#X obj 30 2679 flt.c_highshelf~;
#X text 175 2679 Highshelf filter coefficent calculator for biquad;
#X obj 30 2706 flt.c_hpf~;
#X text 175 2706 HPF coefficent calculator for biquad filter;
#X obj 30 2733 flt.c_lowshelf~;
#X text 175 2733 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2760 flt.c_lpf~;
#X text 175 2760 LPF coefficent calculator for biquad filter;
#X obj 30 2787 flt.c_notch~;
#X text 175 2787 Band-reject coefficent calculator for biquad filter;
#X obj 30 2814 flt.c_peak~;
#X text 175 2814 Peaking equalizer calculator for biquad.;
#X obj 30 2841 flt.dcblock2~;
#X text 175 2841 stereo DC blocker;
#X obj 30 2868 flt.dcblock~;
#X text 175 2868 mono DC blocker;
#X obj 30 2895 flt.eq_peak~;
#X text 175 2895 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2946 flt.highshelf~;
#X text 175 2946 gain boost|cut above some frequency;
#X obj 30 2973 flt.hpf12~;
#X text 175 2973 High-pass filter with 12/db per octave slope;
#X obj 30 3000 flt.hpf24~;
#X text 175 3000 High-pass filter with 24/db per octave slope;
#X obj 30 3027 flt.lowshelf~;
#X text 175 3027 gain boost|cut below some frequency;
#X obj 30 3054 flt.lpf12~;
#X text 175 3054 Low-pass filter with 12/db per octave slope;
#X obj 30 3081 flt.lpf24~;
#X text 175 3081 Low-pass filter with 24/db per octave slope;
#X obj 30 3108 flt.notch~;
#X text 175 3108 band-rejection filter;
#X obj 30 3135 flt.resonbp~;
#X text 175 3135 Simple resonant bandpass filter;
#X obj 20 3162 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 3203 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3214 fx.distortion~;
#X text 175 3214 cubic nonlinearity distortion;
#X obj 30 3241 fx.flanger~;
#X text 175 3241 mono flanging effect;
#X obj 30 3268 fx.freeverb2~;
#X text 175 3268 freeverb2 - stereo version of freeverb;
#X obj 30 3295 fx.freeverb~;
#X text 175 3295 freeverb - common used open-source reverb;
#X obj 30 3322 fx.freqshift~;
#X text 175 3322 frequency shifter or single-sideband ring modulation;
#X obj 30 3349 fx.greyhole~;
#X text 175 3349 A complex echo-like effect;
#X obj 30 3376 fx.looper~;
#X text 175 3376 One track looper;
#X obj 30 3403 fx.pitchshift~;
#X text 175 3403 simple pitch shifter based on 2 delay lines;
#X obj 30 3430 fx.zita_rev1~;
#X text 175 3430 Zita stereo reverb;
#X obj 20 3457 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3498 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3509 global.float;
#X text 175 3509 global named float object;
#X obj 30 3536 global.int;
#X text 175 3536 global named integer object;
#X obj 30 3563 global.list;
#X text 175 3563 global named list object;
#X obj 20 3590 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3631 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3642 hw.arduino;
#X text 175 3642 Arduino device;
#X obj 20 3669 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3710 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3721 lfo.impulse~;
#X text 175 3721 Unit-amplitude low-frequency impulse train;
#X obj 30 3748 lfo.square~;
#X text 175 3748 Positive low frequence square wave;
#X obj 30 3775 lfo.tri~;
#X text 175 3775 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3802 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3843 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3854 list.all_of;
#X text 175 3854 checks if all list atoms accepted by predicate;
#X obj 30 3881 list.any_of;
#X text 175 3881 checks if at least one list element is accepted by
predicate;
#X obj 30 3918 list.apply_to;
#X text 175 3918 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3955 list.at;
#X text 175 3955 returns list element(s) at given position(s);
#X obj 30 3982 list.choice;
#X text 175 3982 returns random element from list;
#X obj 30 4009 list.count;
#X text 175 4009 returns the number of items that equal to specified
value;
#X obj 30 4036 list.count_if;
#X text 175 4036 returns the number of items that satisfy to external
predicate.;
#X obj 30 4073 list.deinterleave;
#X text 175 4073 splits list to N lists \, each to separate output;
#X obj 30 4100 list.delta;
#X text 175 4100 returns the difference between the current list of
floats and the previous one.;
#X obj 30 4137 list.distribution;
#X text 175 4137 list value distribution;
#X obj 30 4164 list.do;
#X text 175 4164 iterate and modify list contents via side-chain;
#X obj 30 4191 list.each;
#X text 175 4191 maps each list value via external object(s);
#X obj 30 4218 list.enumerate;
#X text 175 4218 enumerates input list;
#X obj 30 4245 list.equal;
#X text 175 4245 checks if given lists are equal;
#X obj 30 4272 list.first;
#X text 175 4272 returns first list element;
#X obj 30 4299 list.gen;
#X text 175 4299 generates list of specified length via external
generator;
#X obj 30 4326 list.histogram;
#X text 175 4326 outputs distibution histogram;
#X obj 30 4353 list.integrator;
#X text 175 4353 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4390 list.interleave;
#X text 175 4390 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4441 list.last;
#X text 175 4441 returns last list element;
#X obj 30 4468 list.length;
#X text 175 4468 returns the number of atoms in the message;
#X obj 30 4495 list.max;
#X text 175 4495 returns largest element in the list;
#X obj 30 4522 list.mean;
#X text 175 4522 calculates average of list of floats;
#X obj 30 4549 list.min;
#X text 175 4549 returns smallest element in the list;
#X obj 30 4576 list.none_of;
#X text 175 4576 checks if none of list atoms is accepted by
predicate;
#X obj 30 4603 list.normalize;
#X text 175 4603 normalizes float list values to get their sum = 1.0;
#X obj 30 4630 list.pass_if;
#X text 175 4630 leave only elements accepted by predicate;
#X obj 30 4657 list.product;
#X text 175 4657 calculates product of floats in list;
#X obj 30 4684 list.range;
#X text 175 4684 returns list smallest and largest value;
#X obj 30 4711 list.reduce;
#X text 175 4711 apply function of two arguments cumulatively to the
list;
#X obj 30 4738 list.remove_if;
#X text 175 4738 remove elements by predicate;
#X obj 30 4765 list.repack;
#X text 175 4765 repack input list to specified size;
#X obj 30 4792 list.repeat;
#X text 175 4792 creates new list by repeating given list specified
times;
#X obj 30 4819 list.resize;
#X text 175 4819 changes list size;
#X obj 30 4846 list.reverse;
#X text 175 4846 reverses the order of the elements in the list;
#X obj 30 4873 list.rotate;
#X text 175 4873 rotates list left;
#X obj 30 4900 list.route;
#X text 175 4900 acts like [route] but for lists;
#X obj 30 4927 list.separate;
#X text 175 4927 sends list elements one by one separately;
#X obj 30 4954 list.seq;
#X text 175 4954 numeric sequence list generator;
#X obj 30 4981 list.shuffle;
#X text 175 4981 randomly rearranges elements in list;
#X obj 30 5008 list.slice;
#X text 175 5008 extract sublist;
#X obj 30 5035 list.sort;
#X text 175 5035 sorts list values by ascending order;
#X obj 30 5062 list.sort_with;
#X text 175 5062 sort list with user defined side-chain;
#X obj 30 5089 list.split;
#X text 175 5089 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 5126 list.sum;
#X text 175 5126 calculates sum of floats in list;
#X obj 30 5153 list.unique;
#X text 175 5153 sorts and removes duplicates from input list;
#X obj 30 5180 list.unpack;
#X text 175 5180 unpack list elements to separate outlets;
#X obj 30 5207 list.unwrap;
#X text 175 5207 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 5244 list.walk;
#X text 175 5244 Walks thru the list;
#X obj 30 5271 list.wrap;
#X text 175 5271 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 5322 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5363 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5374 live.capture~;
#X text 175 5374 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5411 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5452 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5463 local.float;
#X text 175 5463 canvas-scoped named float variable;
#X obj 30 5490 local.int;
#X text 175 5490 canvas-scoped named integer variable;
#X obj 30 5517 local.list;
#X text 175 5517 local named list object;
#X obj 20 5544 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5585 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5596 math.abs;
#X text 175 5596 absolute value function;
#X obj 30 5623 math.acos;
#X text 175 5623 arc cosine function;
#X obj 30 5650 math.acosh;
#X text 175 5650 inverse hyperbolic cosine function;
#X obj 30 5677 math.and;
#X text 175 5677 operation AND for multiple arguments;
#X obj 30 5704 math.approx;
#X text 175 5704 check if input value approximately equal to pattern;
#X obj 30 5731 math.asin;
#X text 175 5731 arc sine function;
#X obj 30 5758 math.asinh;
#X text 175 5758 inverse hyperbolic sine function;
#X obj 30 5785 math.atan;
#X text 175 5785 arc tangent function;
#X obj 30 5812 math.atanh;
#X text 175 5812 inverse hyperbolic tangent function;
#X obj 30 5839 math.cbrt;
#X text 175 5839 cube root function;
#X obj 30 5866 math.ceil;
#X text 175 5866 round to smallest integral value not less than input
value;
#X obj 30 5893 math.cos;
#X text 175 5893 cosine function;
#X obj 30 5920 math.cosh;
#X text 175 5920 hyperbolic cosine function;
#X obj 30 5947 math.e;
#X text 175 5947 mathematical constant \, base of the natural
logarithm;
#X obj 30 5974 math.exp;
#X text 175 5974 exponential functions;
#X obj 30 6001 math.exp2;
#X text 175 6001 exponential functions;
#X obj 30 6028 math.floor;
#X text 175 6028 round to largest integral value not greater than x;
#X obj 30 6055 math.gcd;
#X text 175 6055 calculate greatest common divisor;
#X obj 30 6082 math.inf;
#X text 175 6082 infinity value that cannot be represented accurately;
#X obj 30 6109 math.lcm;
#X text 175 6109 calculate least common multiple;
#X obj 30 6136 math.log;
#X text 175 6136 logarithm functions;
#X obj 30 6163 math.log10;
#X text 175 6163 logarithm functions;
#X obj 30 6190 math.log2;
#X text 175 6190 logarithm functions;
#X obj 30 6217 math.nan;
#X text 175 6217 Not a Number \, unrepresentable value;
#X obj 30 6244 math.neg;
#X text 175 6244 negate function;
#X obj 30 6271 math.or;
#X text 175 6271 operation OR for multiple arguments;
#X obj 30 6298 math.pi;
#X text 175 6298 mathematical constant;
#X obj 30 6325 math.reciprocal;
#X text 175 6325 calculate reciprocal number;
#X obj 30 6352 math.round;
#X text 175 6352 round to integral value \, regardless of rounding
direction;
#X obj 30 6379 math.round~;
#X text 175 6379 signal round;
#X obj 30 6406 math.sign;
#X text 175 6406 sign function;
#X obj 30 6433 math.sin;
#X text 175 6433 sine function;
#X obj 30 6460 math.sinh;
#X text 175 6460 hyperbolic sine function;
#X obj 30 6487 math.sqrt;
#X text 175 6487 square root function;
#X obj 30 6514 math.squared;
#X text 175 6514 value square;
#X obj 30 6541 math.tan;
#X text 175 6541 tangent function;
#X obj 30 6568 math.tanh;
#X text 175 6568 hyperbolic tangent function;
#X obj 30 6595 math.trunc;
#X text 175 6595 truncate to integer value;
#X obj 20 6622 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 6663 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6674 midi.ctl2str;
#X text 175 6674 convert Standard MIDI Controllers number to name;
#X obj 30 6701 midi.event2ctl;
#X text 175 6701 convert MidiEvent message to controller channel/value
pair;
#X obj 30 6728 midi.event2note;
#X text 175 6728 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6755 midi.event2prg;
#X text 175 6755 convert MidiEvent message to midi program change
value;
#X obj 30 6782 midi.file;
#X text 175 6782 standard midi file SMF reader and writer;
#X obj 30 6809 midi.key2str;
#X text 175 6809 convert key number to SPN name according to tonality;
#X obj 30 6836 midi.prg2str;
#X text 175 6836 convert GM Instrument number to name (string or
symbol);
#X obj 30 6863 midi.track;
#X text 175 6863 extract track from MidiFile;
#X obj 20 6890 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 6931 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6942 click~;
#X text 175 6942 Output single impulse on bang;
#X obj 30 6969 modplug~;
#X text 175 6969 MOD file player (using libmodplug);
#X obj 20 6996 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 7037 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7048 msg;
#X text 175 7048 message constructor;
#X obj 20 7075 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 7116 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7127 noise.pink~;
#X text 175 7127 Pink noise generator;
#X obj 30 7154 noise.white~;
#X text 175 7154 White noise generator;
#X obj 20 7181 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 7222 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7233 osc.impulse~;
#X text 175 7233 Bandlimited impulse train generator;
#X obj 30 7260 osc.pulse~;
#X text 175 7260 Bandlimited pulse train oscillator.;
#X obj 30 7287 osc.saw~;
#X text 175 7287 Bandlimited saw wave oscillator;
#X obj 30 7314 osc.sinfb~;
#X text 175 7314 sine oscilator with feedback;
#X obj 30 7341 osc.square~;
#X text 175 7341 Bandlimited square wave oscillator;
#X obj 30 7368 osc.tri~;
#X text 175 7368 Bandlimited triangle wave oscillator;
#X obj 20 7395 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 7436 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7447 canvas.current;
#X text 175 7447 verbose information about current canvas;
#X obj 30 7474 canvas.top;
#X text 175 7474 verbose information about top-level canvas;
#X obj 30 7501 patch.args;
#X text 175 7501 Get patch or subpatch arguments;
#X obj 20 7528 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 7569 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7580 path.basename;
#X text 175 7580 outputs filename portion of pathname;
#X obj 30 7607 path.dirname;
#X text 175 7607 outputs directory portion of pathname;
#X obj 30 7634 path.exists;
#X text 175 7634 checks if given path exists;
#X obj 30 7661 path.lsdir;
#X text 175 7661 list directory contents;
#X obj 20 7688 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 7729 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7740 is_any;
#X text 175 7740 checks if input data has *any* type;
#X obj 30 7767 is_bang;
#X text 175 7767 checks if input data has *bang* type;
#X obj 30 7794 is_even;
#X text 175 7794 checks if input number is even;
#X obj 30 7821 is_file;
#X text 175 7821 checks if file exists and accessible;
#X obj 30 7848 is_float;
#X text 175 7848 checks if input data has *float* type;
#X obj 30 7875 is_list;
#X text 175 7875 checks if input data has *list* type;
#X obj 30 7902 is_odd;
#X text 175 7902 checks if input number is odd;
#X obj 30 7929 is_pointer;
#X text 175 7929 checks if input data has *pointer* type;
#X obj 30 7956 is_symbol;
#X text 175 7956 checks if input data has *symbol* type;
#X obj 20 7983 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 8024 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8035 preset.float;
#X text 175 8035 load/store float preset;
#X obj 30 8062 preset.list;
#X text 175 8062 load/store symbol preset;
#X obj 30 8089 preset.storage;
#X text 175 8089 preset storage control;
#X obj 30 8116 preset.symbol;
#X text 175 8116 load/store symbol preset;
#X obj 20 8143 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 8184 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8195 prop.get;
#X text 175 8195 Property extractor;
#X obj 30 8222 prop.set;
#X text 175 8222 Property injector;
#X obj 20 8249 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 8290 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8301 proto.firmata;
#X text 175 8301 Firmata Arduino protocol support;
#X obj 20 8328 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 8369 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8380 random.discrete;
#X text 175 8380 random weighted integers on interval [0 \, n);
#X obj 30 8407 random.float;
#X text 175 8407 random float generator in specified range;
#X obj 30 8434 random.gauss;
#X text 175 8434 gaussian random distribution;
#X obj 30 8461 random.int;
#X text 175 8461 Random integer generator in specified range;
#X obj 30 8488 random.linear;
#X text 175 8488 random linear distribution;
#X obj 30 8515 random.pw_const;
#X text 175 8515 piecewise constant random distribution;
#X obj 30 8542 random.pw_lin;
#X text 175 8542 piecewise linear random distribution;
#X obj 20 8569 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 8610 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8621 snd.file;
#X text 175 8621 Sound file loader on steroids;
#X obj 20 8648 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 8689 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8700 pan.cos~;
#X text 175 8700 two channel equal power sine/cosine panner;
#X obj 30 8727 pan.lin~;
#X text 175 8727 two channel linear panner;
#X obj 30 8754 pan.spread~;
#X text 175 8754 spreads input channels across the stereo field;
#X obj 30 8781 pan.sqrt~;
#X text 175 8781 two channel equal power square root panner;
#X obj 20 8808 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 8849 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8860 string;
#X text 175 8860 string constructor;
#X obj 30 8887 string.contains;
#X text 175 8887 checks if given string contains specified substring;
#X obj 30 8914 string.ends_with;
#X text 175 8914 checks if given string ends with specified suffix;
#X obj 30 8941 string.equal;
#X text 175 8941 check strings for equality;
#X obj 30 8968 string.format;
#X text 175 8968 formats string like printf.;
#X obj 30 8995 string.join;
#X text 175 8995 joins (concatenates) strings with separator;
#X obj 30 9022 string.length;
#X text 175 9022 number of characters in string (unicode supported);
#X obj 30 9049 string.remove;
#X text 175 9049 remove substring from input string;
#X obj 30 9076 string.replace;
#X text 175 9076 replace from one substring to another in input
string;
#X obj 30 9103 string.split;
#X text 175 9103 split string by separator;
#X obj 30 9130 string.starts_with;
#X text 175 9130 checks if given string starts with specified prefix;
#X obj 30 9157 string.substr;
#X text 175 9157 extract substring from input string;
#X obj 30 9184 string2symbol;
#X text 175 9184 converts string to symbol;
#X obj 20 9211 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 9252 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9263 symbol.equal;
#X text 175 9263 check symbols for equality;
#X obj 30 9290 symbol.length;
#X text 175 9290 number of characters in symbol (unicode supported);
#X obj 30 9317 symbol.num_compare;
#X text 175 9317 numeric symbol compare;
#X obj 20 9344 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 9385 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9396 system.cursor;
#X text 175 9396 Get information about cursor motion \, mousewheel and
buttonclick;
#X obj 30 9433 system.getenv;
#X text 175 9433 Get system environment variables;
#X obj 30 9460 system.hostname;
#X text 175 9460 outputs system hostname;
#X obj 30 9487 system.memsize;
#X text 175 9487 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 9524 system.memused;
#X text 175 9524 returns the process physical memory use - current and
peak;
#X obj 30 9551 system.screen_size;
#X text 175 9551 returns current screen size in pixels;
#X obj 20 9578 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 9619 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9633 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 9630 Timeline bang;
#X obj 30 9656 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 9653 Timeline section;
#X obj 30 9676 tl.transport;
#X text 175 9676 Timeline transport control;
#X obj 30 9706 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 9703 A bang... that's all;
#X obj 30 9729 ui.link @title [ui.colorpanel] @url ui.colorpanel-
help.pd;
#X text 175 9726 colorchooser widget;
#X obj 30 9752 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 9749 Display GUI object;
#X obj 30 9775 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 9772 GUI for turning DSP on/off;
#X obj 30 9798 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 9795 envelope editor widget;
#X obj 30 9821 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 9818 UI gain control;
#X obj 30 9844 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 9841 simple icon with button capabilities;
#X obj 30 9867 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 9864 value increment/decrement;
#X obj 30 9890 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 9887 keyboard widget;
#X obj 30 9913 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 9910 knob widget;
#X obj 30 9936 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 9933 simple label widget;
#X obj 30 9959 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 9956 Hyperlink widget;
#X obj 30 9982 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 9979 The matrix of toggles has you.;
#X obj 30 10005 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 10002 Dropdown menu;
#X obj 30 10028 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 10025 Shows peak and rms signal level;
#X obj 30 10051 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 10048 counterpart of the vanilla [nbx];
#X obj 30 10074 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 10071 counterpart of the vanilla [nbx] for signal;
#X obj 30 10097 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 10094 Cream GUI preset manager;
#X obj 30 10120 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 10117 counterpart of the vanilla radio toggle;
#X obj 30 10143 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 10140 rangle slider;
#X obj 30 10166 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 10163 Scope GUI object;
#X obj 30 10189 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 10186 counterpart of the vanilla slider;
#X obj 30 10212 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 10209 2D slider widget;
#X obj 30 10235 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 10232 Multiple slider widget;
#X obj 30 10258 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 10255 Spectroscope GUI object;
#X obj 30 10281 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 10278 displays a list of text buttons or text toggles;
#X obj 30 10304 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 10301 modern toggle widget;
#X obj 20 10324 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 10365 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10376 vector.distance;
#X text 175 10376 returns euclidean distance between two points;
#X obj 30 10403 vector.dot;
#X text 175 10403 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 10454 vector.length;
#X text 175 10454 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 10491 vector.normalize;
#X text 175 10491 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 10518 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 10518 version: v0.5 \, license: GPL3;
#X obj 20 10537 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;