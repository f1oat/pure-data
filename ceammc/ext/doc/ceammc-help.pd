#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot~;
#X text 200 560 plot signal on specified array;
#X obj 30 587 array.resample;
#X text 200 587 array resampler;
#X obj 30 614 array.rms;
#X text 200 614 calculates root mean square value for array;
#X obj 30 641 array.set;
#X text 200 641 set array content from list;
#X obj 30 668 array.stddev;
#X text 200 668 calculates standard deviation for array values;
#X obj 30 695 array.stretch;
#X text 200 695 array time-stretch \, pitch-shift or rate-change;
#X obj 30 722 array.sum;
#X text 200 722 calculates sum of array elements;
#X obj 30 749 array.sum2;
#X text 200 749 calculates sum of squares of array elements;
#X obj 30 776 array.variance;
#X text 200 776 calculates variance of array values;
#X obj 30 803 array.vplay;
#X text 200 803 simple array player for using with vline~;
#X obj 30 830 array.window;
#X text 200 830 fill array with window;
#X obj 30 857 plot.geomspace~;
#X text 200 857 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 897 plot.hist~;
#X text 200 897 calculate and output signal histogram;
#X obj 30 924 plot.linspace~;
#X text 200 924 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 964 plot.logspace~;
#X text 200 964 outputs numbers spaced evenly on a log scale;
#X obj 30 991 plot.response~;
#X text 200 991 output amp/phase freq response to impulse;
#X obj 20 1018 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1059 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1070 ceammc.search;
#X text 200 1070 ceammc library search object;
#X obj 30 1100 ui.link @title [function] @url function-help.pd;
#X text 200 1097 named function;
#X obj 30 1122 function.call;
#X text 200 1122 call named function;
#X obj 30 1149 gain~;
#X text 200 1149 multislot signal gain;
#X obj 30 1176 log;
#X text 200 1176 advanced data logger;
#X obj 30 1203 matrix~;
#X text 200 1203 signal routing matrix;
#X obj 30 1230 metro.pattern;
#X text 200 1230 metro with rhythmic patterns;
#X obj 30 1257 metro.random;
#X text 200 1257 metro random bang with specified range;
#X obj 30 1284 metro.seq;
#X text 200 1284 metro sequencer;
#X obj 30 1311 mix~;
#X text 200 1311 multislot signal mixer;
#X obj 30 1338 nsig~;
#X text 200 1338 Mulitchannel converter from control to audio rate;
#X obj 30 1365 obj.props;
#X text 200 1365 property extractor;
#X obj 30 1392 radio;
#X text 200 1392 float index to outlet values as radio switch;
#X obj 30 1419 window;
#X text 200 1419 returns window value by given window position;
#X obj 30 1446 xdac~;
#X text 200 1446 dac~ with channel ranges;
#X obj 30 1473 xfade2~;
#X text 200 1473 multi stereo-signal crossfade;
#X obj 30 1500 xfade~;
#X text 200 1500 multi signal crossfade;
#X obj 20 1527 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1568 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1579 chaos.gbman0;
#X text 200 1579 Gingerbreadman map chaotic generator;
#X obj 30 1606 chaos.gbman0~;
#X text 200 1606 Gingerbreadman map chaotic generator;
#X obj 30 1633 chaos.jong;
#X text 200 1633 Peter de Jong attractor;
#X obj 30 1660 chaos.logistic;
#X text 200 1660 Logistic map chaotic generator;
#X obj 30 1687 chaos.std0;
#X text 200 1687 Standard map chaotic generator;
#X obj 30 1714 chaos.std0~;
#X text 200 1714 Standard map chaotic generator;
#X obj 20 1741 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1782 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1793 array.p2s;
#X text 200 1793 convert array phase [0\..1] to sample position;
#X obj 30 1820 array.s2p;
#X text 200 1820 convert array sample position to relative phase position
[0\..1];
#X obj 30 1860 conv.amp2dbfs;
#X text 200 1860 convert from amplitude to decibel full scale;
#X obj 30 1887 conv.amp2dbfs~;
#X text 200 1887 convert from amplitude to decibel full scale;
#X obj 30 1914 conv.bpm2hz;
#X text 200 1914 converts BPM to frequency in herz;
#X obj 30 1941 conv.bpm2ms;
#X text 200 1941 convert frequency in BPM to period in milliseconds;
#X obj 30 1968 conv.bpm2sec;
#X text 200 1968 convert frequency in BPM to period in seconds;
#X obj 30 1995 conv.car2pol;
#X text 200 1995 convert cartesian coords to polar;
#X obj 30 2022 conv.cc2amp;
#X text 200 2022 convert from MIDI Control Change range;
#X obj 30 2049 conv.dbfs2amp;
#X text 200 2049 convert decibel full scale to amplitude;
#X obj 30 2076 conv.dbfs2amp~;
#X text 200 2076 convert decibel full scale to amplitude;
#X obj 30 2103 conv.hex2int;
#X text 200 2103 hex symbol to int value;
#X obj 30 2130 conv.lin2curve;
#X text 200 2130 map linear to exponential range with 0 allowed.;
#X obj 30 2157 conv.lin2exp;
#X text 200 2157 maps linear range to exponential range;
#X obj 30 2184 conv.lin2lin;
#X text 200 2184 convert from one linear range to another;
#X obj 30 2211 conv.lin2lin~;
#X text 200 2211 convert from one linear range to another for signals;
#X obj 30 2238 conv.list2props;
#X text 200 2238 converts list to series of property messages;
#X obj 30 2265 conv.midi2freq;
#X text 200 2265 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2305 conv.ms2bpm;
#X text 200 2305 convert period in milliseconds to frequency in BPM;
#X obj 30 2332 conv.ms2samp;
#X text 200 2332 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2372 conv.ms2samp~;
#X text 200 2372 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2412 conv.phase2rad;
#X text 200 2412 convert phase value [0-1] to radians [0-2π];
#X obj 30 2439 conv.phase2rad~;
#X text 200 2439 convert phase value [0-1] to radians [0-2π];
#X obj 30 2466 conv.pitch2midi;
#X text 200 2466 converts symbol pitch name to MIDI note number;
#X obj 30 2493 conv.pol2car;
#X text 200 2493 convert from polar coordinates to cartesian;
#X obj 30 2520 conv.rad2phase;
#X text 200 2520 convert radians value to phase;
#X obj 30 2547 conv.rad2phase~;
#X text 200 2547 convert radians value to phase;
#X obj 30 2574 conv.samp2ms;
#X text 200 2574 convert samples to time according to samplerate;
#X obj 30 2601 conv.samp2ms~;
#X text 200 2601 convert samples to milliseconds according to samplerate;
#X obj 30 2628 conv.samp2sec;
#X text 200 2628 convert samples to time according to samplerate;
#X obj 30 2655 conv.sec2bpm;
#X text 200 2655 convert period in seconds to frequency in BPM;
#X obj 30 2682 conv.sec2samp;
#X text 200 2682 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2722 conv.sec2str;
#X text 200 2722 converts float time in seconds to formated symbol
(or string);
#X obj 30 2749 conv.str2sec;
#X text 200 2749 converts formatted time to float value in seconds;
#X obj 20 2776 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2817 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2828 data.dict;
#X text 200 2828 dictionary container: store values by key;
#X obj 30 2855 data.fifo;
#X text 200 2855 First-In-First-Out (FIFO) queue data container;
#X obj 30 2882 data.float;
#X text 200 2882 robust float object;
#X obj 30 2909 data.int;
#X text 200 2909 robust int object;
#X obj 30 2936 data.list;
#X text 200 2936 list container;
#X obj 30 2963 data.mlist;
#X text 200 2963 multidimensional list container;
#X obj 30 2990 data.set;
#X text 200 2990 container that store unique elements;
#X obj 30 3017 data.set2list;
#X text 200 3017 converts set to list;
#X obj 30 3044 dict.contains;
#X text 200 3044 predicate to check if dict contains a keys;
#X obj 30 3071 dict.each;
#X text 200 3071 map each value in dict;
#X obj 30 3098 dict.from_list;
#X text 200 3098 creates dictionary from list;
#X obj 30 3125 dict.get;
#X text 200 3125 output dict values;
#X obj 30 3152 dict.keys;
#X text 200 3152 get list of dict keys;
#X obj 30 3179 dict.pass;
#X text 200 3179 passes specified keys in dict;
#X obj 30 3206 dict.reject;
#X text 200 3206 rejects specified keys from dict;
#X obj 30 3233 dict.size;
#X text 200 3233 dictionary size;
#X obj 30 3260 dict.to_list;
#X text 200 3260 converts dictionary to plain list;
#X obj 30 3287 dict.values;
#X text 200 3287 dictionary values as mlist;
#X obj 30 3314 mlist.flatten;
#X text 200 3314 flatten nested mlist;
#X obj 30 3341 set.contains;
#X text 200 3341 check if specified element is in set;
#X obj 30 3368 set.diff;
#X text 200 3368 difference between two sets;
#X obj 30 3395 set.equal;
#X text 200 3395 checks if two sets are equal (contains same elements);
#X obj 30 3422 set.intersect;
#X text 200 3422 output intersection of given sets;
#X obj 30 3449 set.size;
#X text 200 3449 get number of elements in set;
#X obj 30 3476 set.symdiff;
#X text 200 3476 symmetric difference between two sets;
#X obj 30 3503 set.union;
#X text 200 3503 output union of given sets;
#X obj 20 3530 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3571 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3582 dyn.comp2~;
#X text 200 3582 stereo dynamic range compressor;
#X obj 30 3609 dyn.comp~;
#X text 200 3609 mono dynamic range compressors;
#X obj 30 3636 dyn.gate2~;
#X text 200 3636 stereo signal gate;
#X obj 30 3663 dyn.gate~;
#X text 200 3663 mono signal gate;
#X obj 30 3690 dyn.limit2~;
#X text 200 3690 stereo 1176LN Peak Limiter;
#X obj 30 3717 dyn.limit~;
#X text 200 3717 mono 1176LN Peak Limiter;
#X obj 30 3744 dyn.softclip~;
#X text 200 3744 soft signal clip;
#X obj 20 3771 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3812 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3823 env.adsr~;
#X text 200 3823 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3850 env.ar~;
#X text 200 3850 Attack/Release envelope generator;
#X obj 30 3877 env.asr~;
#X text 200 3877 Attack/Sustain/Release envelope generator;
#X obj 30 3904 env.concat;
#X text 200 3904 Envelope concatenation;
#X obj 30 3931 env.follow~;
#X text 200 3931 Envelope follower with independent attack and release
times;
#X obj 30 3958 env.mix;
#X text 200 3958 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3998 env.smooth~;
#X text 200 3998 An envelope with an exponential attack and release;
#X obj 30 4025 env.tscale;
#X text 200 4025 Envelope time-scale;
#X obj 30 4052 env.tshift;
#X text 200 4052 Envelope time-shift (horizontal);
#X obj 30 4079 env.vscale;
#X text 200 4079 Envelope value-scale;
#X obj 30 4106 env2array;
#X text 200 4106 Renders envelope to specified array;
#X obj 30 4133 env2vline;
#X text 200 4133 Converts envelope to bunch of vline messages;
#X obj 30 4160 envelope;
#X text 200 4160 Envelope data type;
#X obj 30 4187 vline2env;
#X text 200 4187 Converts vline messages to env;
#X obj 20 4214 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4255 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4266 expand_env;
#X text 200 4266 Substitute environment variables in data stream;
#X obj 30 4293 flow.append;
#X text 200 4293 append message to flow stream;
#X obj 30 4320 flow.change;
#X text 200 4320 rejects redundant input values;
#X obj 30 4347 flow.count;
#X text 200 4347 control flow event counter;
#X obj 30 4374 flow.delay;
#X text 200 4374 enhanced version on vanilla delay object;
#X obj 30 4401 flow.demultiplex;
#X text 200 4401 control flow demultiplexer;
#X obj 30 4428 flow.demultiplex2~;
#X text 200 4428 audio stream stereo demultiplexer;
#X obj 30 4455 flow.demultiplex~;
#X text 200 4455 audio stream demultiplexer;
#X obj 30 4482 flow.dup;
#X text 200 4482 message duplicator;
#X obj 30 4509 flow.gate;
#X text 200 4509 control flow gate. [spigot] analog;
#X obj 30 4536 flow.greater;
#X text 200 4536 numeric stream router;
#X obj 30 4563 flow.greater_eq;
#X text 200 4563 numeric stream router;
#X obj 30 4590 flow.group;
#X text 200 4590 group input atoms in list of specified size;
#X obj 30 4617 flow.interval;
#X text 200 4617 measure time between flow events;
#X obj 30 4644 flow.less;
#X text 200 4644 numeric stream router \, like many [moses];
#X obj 30 4671 flow.less_eq;
#X text 200 4671 numeric stream router \, like many [moses];
#X obj 30 4698 flow.match;
#X text 200 4698 route data flow by regexp match;
#X obj 30 4725 flow.mem;
#X text 200 4725 store data flow in memory;
#X obj 30 4752 flow.multiplex;
#X text 200 4752 control flow multiplexer;
#X obj 30 4779 flow.multiplex2~;
#X text 200 4779 audio stream stereo multiplexer;
#X obj 30 4806 flow.multiplex~;
#X text 200 4806 audio stream multiplexer;
#X obj 30 4833 flow.once;
#X text 200 4833 one message pass thru;
#X obj 30 4860 flow.pack;
#X text 200 4860 flow pack;
#X obj 30 4887 flow.pass;
#X text 200 4887 pass specified values;
#X obj 30 4914 flow.pass_if;
#X text 200 4914 pass values that accepted by predicate object;
#X obj 30 4941 flow.pipe;
#X text 200 4941 enhanced version on vanilla pipe object;
#X obj 30 4968 flow.reject;
#X text 200 4968 reject specified values;
#X obj 30 4995 flow.reject_if;
#X text 200 4995 reject values by predicate;
#X obj 30 5022 flow.ring;
#X text 200 5022 dataflow ring buffer;
#X obj 30 5049 flow.route;
#X text 200 5049 advanced message router;
#X obj 30 5076 flow.select;
#X text 200 5076 vanilla flow on steroids;
#X obj 30 5103 flow.space;
#X text 200 5103 space in time messages received at the same logical
time;
#X obj 30 5130 flow.speedlim;
#X text 200 5130 control stream speed limiter;
#X obj 30 5157 flow.split;
#X text 200 5157 split data flow by external side-chain predicate;
#X obj 30 5184 flow.stack;
#X text 200 5184 any message stack;
#X obj 30 5211 flow.sync;
#X text 200 5211 bus with only hot inlets;
#X obj 30 5238 flow.sync_pack;
#X text 200 5238 flow pack with all hot inlets;
#X obj 30 5265 flow.tee~;
#X text 200 5265 separate audio and control streams;
#X obj 30 5292 replace;
#X text 200 5292 Replace atoms in data stream;
#X obj 20 5319 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5371 flt.biquad~;
#X text 200 5371 second order IIR filter.;
#X obj 30 5398 flt.bpf12~;
#X text 200 5398 Two pole band-pass butterworth filter;
#X obj 30 5425 flt.bpf24~;
#X text 200 5425 Four pole band-pass butterworth filter;
#X obj 30 5452 flt.c_bpf~;
#X text 200 5452 BPF coefficient calculator for biquad filter;
#X obj 30 5479 flt.c_highshelf~;
#X text 200 5479 Highshelf filter coefficient calculator for biquad;
#X obj 30 5506 flt.c_hpf~;
#X text 200 5506 HPF coefficient calculator for biquad filter;
#X obj 30 5533 flt.c_lowshelf~;
#X text 200 5533 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5560 flt.c_lpf~;
#X text 200 5560 LPF coefficient calculator for biquad filter;
#X obj 30 5587 flt.c_notch~;
#X text 200 5587 Band-reject coefficient calculator for biquad filter;
#X obj 30 5614 flt.c_peak~;
#X text 200 5614 Peaking equalizer calculator for biquad;
#X obj 30 5641 flt.dcblock2~;
#X text 200 5641 stereo DC blocker;
#X obj 30 5668 flt.dcblock~;
#X text 200 5668 mono DC blocker;
#X obj 30 5695 flt.eq10~;
#X text 200 5695 graphic 10 band equalizer;
#X obj 30 5722 flt.eq_peak_cq~;
#X text 200 5722 constant-Q second order peaking equalizer section;
#X obj 30 5749 flt.eq_peak~;
#X text 200 5749 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5804 flt.fb_comb~;
#X text 200 5804 feedback comb filter;
#X obj 30 5831 flt.ff_comb~;
#X text 200 5831 feed forward comb filter;
#X obj 30 5858 flt.freqz~;
#X text 200 5858 compute the frequency response of a digital filter;
#X obj 30 5885 flt.highshelf~;
#X text 200 5885 gain boost|cut above some frequency;
#X obj 30 5912 flt.hpf12~;
#X text 200 5912 High-pass second order Butterworth filter;
#X obj 30 5939 flt.hpf24~;
#X text 200 5939 High-pass fourth order Butterworth filter;
#X obj 30 5966 flt.lowshelf~;
#X text 200 5966 gain boost|cut below some frequency;
#X obj 30 5993 flt.lpf12~;
#X text 200 5993 Low-pass second order Butterworth filter;
#X obj 30 6020 flt.lpf24~;
#X text 200 6020 Low-pass fourth order Butterworth filter;
#X obj 30 6047 flt.median;
#X text 200 6047 Median control flow filter;
#X obj 30 6074 flt.moog_vcf~;
#X text 200 6074 Moog Voltage Controlled Filter;
#X obj 30 6101 flt.notch~;
#X text 200 6101 band-rejection filter;
#X obj 30 6128 flt.resonbp~;
#X text 200 6128 Simple resonant bandpass filter;
#X obj 20 6155 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6196 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6207 fx.bitdown~;
#X text 200 6207 bit downer and downsampler effect;
#X obj 30 6234 fx.chorus~;
#X text 200 6234 Chorus effect;
#X obj 30 6261 fx.distortion1~;
#X text 200 6261 distortion #1 from Guitarix effects set;
#X obj 30 6288 fx.distortion2~;
#X text 200 6288 distortion #2 from Guitarix effects set;
#X obj 30 6315 fx.distortion3~;
#X text 200 6315 simple distortion #3 from Guitarix effects set;
#X obj 30 6342 fx.distortion~;
#X text 200 6342 cubic nonlinearity distortion;
#X obj 30 6369 fx.drive~;
#X text 200 6369 Guitarix drive effect;
#X obj 30 6396 fx.drone_box~;
#X text 200 6396 mono sympathetic resonance generator;
#X obj 30 6423 fx.echo~;
#X text 200 6423 simple echo effect;
#X obj 30 6450 fx.flanger~;
#X text 200 6450 mono flanging effect;
#X obj 30 6477 fx.freeverb2~;
#X text 200 6477 freeverb2 - stereo version of freeverb;
#X obj 30 6504 fx.freeverb~;
#X text 200 6504 freeverb - common used open-source reverb;
#X obj 30 6531 fx.freqshift~;
#X text 200 6531 frequency shifter or single-sideband ring modulation;
#X obj 30 6558 fx.granulator~;
#X text 200 6558 simple input stream granulator;
#X obj 30 6585 fx.greyhole~;
#X text 200 6585 A complex echo-like effect;
#X obj 30 6612 fx.looper~;
#X text 200 6612 One track looper;
#X obj 30 6639 fx.pitchshift~;
#X text 200 6639 simple pitch shifter based on 2 delay lines;
#X obj 30 6666 fx.sdelay~;
#X text 200 6666 smooth delay with a feedback control;
#X obj 30 6693 fx.vocoder~;
#X text 200 6693 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6733 fx.wahwah~;
#X text 200 6733 digitized CryBaby wah pedal;
#X obj 30 6760 fx.zita_rev1~;
#X text 200 6760 Zita stereo reverb;
#X obj 20 6787 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6828 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6839 global.dict;
#X text 200 6839 global named dict object;
#X obj 30 6866 global.float;
#X text 200 6866 global named float object;
#X obj 30 6893 global.int;
#X text 200 6893 global named integer object;
#X obj 30 6920 global.list;
#X text 200 6920 global named list object;
#X obj 30 6947 global.mlist;
#X text 200 6947 global named mlist object;
#X obj 30 6974 global.set;
#X text 200 6974 global named set object;
#X obj 20 7001 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7042 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7053 hw.apple_smc;
#X text 200 7053 query the system management control in Apples;
#X obj 30 7080 hw.apple_sms;
#X text 200 7080 query the sudden motion sensor in Apples;
#X obj 30 7107 hw.arduino;
#X text 200 7107 Arduino device;
#X obj 30 7134 hw.cpu_temp;
#X text 200 7134 get CPU temperature;
#X obj 30 7161 hw.display;
#X text 200 7161 get/set display properties;
#X obj 30 7188 hw.kbd_light;
#X text 200 7188 Get/set keyboard light on some devices;
#X obj 20 7215 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7256 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7267 lfo.+pulse~;
#X text 200 7267 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7294 lfo.+saw~;
#X text 200 7294 Positive unit-amplitude low frequency saw wave;
#X obj 30 7321 lfo.+square~;
#X text 200 7321 Positive low frequency square wave;
#X obj 30 7348 lfo.+tri~;
#X text 200 7348 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7375 lfo.impulse~;
#X text 200 7375 Unit-amplitude low-frequency impulse train;
#X obj 30 7402 lfo.pulse~;
#X text 200 7402 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7429 lfo.saw~;
#X text 200 7429 Full-range unit-amplitude low frequency saw;
#X obj 30 7456 lfo.square~;
#X text 200 7456 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7483 lfo.tri~;
#X text 200 7483 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7510 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7551 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7562 list.^at;
#X text 200 7562 on input index(es) outputs list element(s);
#X obj 30 7589 list.^contains;
#X text 200 7589 checks if input atom is found in the list;
#X obj 30 7616 list.^search;
#X text 200 7616 on input atom returns it index in list;
#X obj 30 7643 list.all_of;
#X text 200 7643 checks if all list atoms accepted by predicate;
#X obj 30 7670 list.any_of;
#X text 200 7670 checks if at least one list element is accepted by
predicate;
#X obj 30 7697 list.append;
#X text 200 7697 append atom or list to the end of input list;
#X obj 30 7724 list.apply_to;
#X text 200 7724 modifies list value at specified position \, filtering
it via external object;
#X obj 30 7764 list.at;
#X text 200 7764 outputs list element(s) at specified index(es);
#X obj 30 7791 list.choice;
#X text 200 7791 outputs random element from list;
#X obj 30 7818 list.contains;
#X text 200 7818 checks if input list contains specified atoms;
#X obj 30 7845 list.count;
#X text 200 7845 output the number of items that equal to specified
value;
#X obj 30 7872 list.count_if;
#X text 200 7872 output the number of items that satisfy to external
predicate;
#X obj 30 7899 list.delta;
#X text 200 7899 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7939 list.distribution;
#X text 200 7939 list value distribution;
#X obj 30 7966 list.do;
#X text 200 7966 iterate and modify list contents via side-chain;
#X obj 30 7993 list.each;
#X text 200 7993 maps each list value via external side-chain;
#X obj 30 8020 list.enumerate;
#X text 200 8020 enumerates input list;
#X obj 30 8047 list.equal;
#X text 200 8047 checks if given lists are equal;
#X obj 30 8074 list.first;
#X text 200 8074 returns first list element;
#X obj 30 8101 list.gen;
#X text 200 8101 generates list of specified length via external generator;
#X obj 30 8128 list.histogram;
#X text 200 8128 outputs distribution histogram;
#X obj 30 8155 list.insert;
#X text 200 8155 insert atom or list to the specified position of input
list;
#X obj 30 8182 list.integrator;
#X text 200 8182 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8222 list.last;
#X text 200 8222 output last list element;
#X obj 30 8249 list.length;
#X text 200 8249 output the number of atoms in the list;
#X obj 30 8276 list.max;
#X text 200 8276 output largest element in the list;
#X obj 30 8303 list.mean;
#X text 200 8303 calculates average of list of floats;
#X obj 30 8330 list.min;
#X text 200 8330 returns smallest element in the list;
#X obj 30 8357 list.none_of;
#X text 200 8357 checks if none of list atoms is accepted by predicate;
#X obj 30 8384 list.normalize;
#X text 200 8384 normalizes float list values to get their sum = 1.0;
#X obj 30 8411 list.pass_if;
#X text 200 8411 leave only elements accepted by predicate;
#X obj 30 8438 list.prepend;
#X text 200 8438 prepend atom or list before input list;
#X obj 30 8465 list.product;
#X text 200 8465 calculates product of floats in list;
#X obj 30 8492 list.range;
#X text 200 8492 output list smallest and largest value;
#X obj 30 8519 list.reduce;
#X text 200 8519 apply function of two arguments cumulatively to the
list;
#X obj 30 8546 list.remove;
#X text 200 8546 remove list element(s) at specified positions;
#X obj 30 8573 list.remove_if;
#X text 200 8573 remove elements by predicate;
#X obj 30 8600 list.repack;
#X text 200 8600 repack list to specified size;
#X obj 30 8627 list.repeat;
#X text 200 8627 output new list by repeating input list specified
times;
#X obj 30 8654 list.resample;
#X text 200 8654 resample list with specified ratio;
#X obj 30 8681 list.resize;
#X text 200 8681 changes list size;
#X obj 30 8708 list.reverse;
#X text 200 8708 reverses the order of the elements in the list;
#X obj 30 8735 list.rldecode;
#X text 200 8735 Run-length list decoder (RLE);
#X obj 30 8762 list.rlencode;
#X text 200 8762 RLE (run-length encoding) for lists;
#X obj 30 8789 list.rotate;
#X text 200 8789 rotates list;
#X obj 30 8816 list.route;
#X text 200 8816 acts like [route] but for lists;
#X obj 30 8843 list.search;
#X text 200 8843 search specified items in input list;
#X obj 30 8870 list.separate;
#X text 200 8870 sends list elements one by one separately;
#X obj 30 8897 list.seq;
#X text 200 8897 numeric sequence list generator;
#X obj 30 8924 list.set;
#X text 200 8924 set list value at specified position;
#X obj 30 8951 list.shift;
#X text 200 8951 shifts the contents of the list with linear interpolation;
#X obj 30 8978 list.shuffle;
#X text 200 8978 randomly rearranges elements in list;
#X obj 30 9005 list.slice;
#X text 200 9005 extract sublist;
#X obj 30 9032 list.sort;
#X text 200 9032 sorts list values by ascending order;
#X obj 30 9059 list.sort_with;
#X text 200 9059 sort list with user defined side-chain;
#X obj 30 9086 list.split;
#X text 200 9086 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9126 list.stretch;
#X text 200 9126 stretches list - changes its size with linear interpolation;
#X obj 30 9153 list.sum;
#X text 200 9153 calculates sum of floats in list;
#X obj 30 9180 list.unique;
#X text 200 9180 removes duplicates from input list;
#X obj 30 9207 list.unpack;
#X text 200 9207 unpack list elements to separate outlets;
#X obj 30 9234 list.unzip;
#X text 200 9234 splits list to N lists \, each to separate output;
#X obj 30 9261 list.walk;
#X text 200 9261 Walks thru the list;
#X obj 30 9288 list.zip;
#X text 200 9288 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9343 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9384 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9395 live.capture~;
#X text 200 9395 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9435 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9476 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9487 local.dict;
#X text 200 9487 local named dict object;
#X obj 30 9514 local.float;
#X text 200 9514 canvas-scoped named float variable;
#X obj 30 9541 local.int;
#X text 200 9541 canvas-scoped named integer variable;
#X obj 30 9568 local.list;
#X text 200 9568 local named list object;
#X obj 30 9595 local.mlist;
#X text 200 9595 local named mlist object;
#X obj 30 9622 local.set;
#X text 200 9622 local named set object;
#X obj 20 9649 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9690 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9701 math.abs;
#X text 200 9701 absolute value function;
#X obj 30 9728 math.abs~;
#X text 200 9728 absolute value function for signals;
#X obj 30 9755 math.acos;
#X text 200 9755 arc cosine function;
#X obj 30 9782 math.acosh;
#X text 200 9782 inverse hyperbolic cosine function;
#X obj 30 9809 math.acosh~;
#X text 200 9809 hyperbolic arc cosine for signals;
#X obj 30 9836 math.acos~;
#X text 200 9836 arc cosine function for signals;
#X obj 30 9863 math.and;
#X text 200 9863 operation AND for multiple arguments;
#X obj 30 9890 math.approx;
#X text 200 9890 check if input value approximately equal to pattern;
#X obj 30 9917 math.asin;
#X text 200 9917 arc sine function;
#X obj 30 9944 math.asinh;
#X text 200 9944 inverse hyperbolic sine function;
#X obj 30 9971 math.asinh~;
#X text 200 9971 hyperbolic arc sine for signals;
#X obj 30 9998 math.asin~;
#X text 200 9998 arc sine for signals;
#X obj 30 10025 math.atan;
#X text 200 10025 arc tangent function;
#X obj 30 10052 math.atanh;
#X text 200 10052 inverse hyperbolic tangent function;
#X obj 30 10079 math.atanh~;
#X text 200 10079 hyperbolic arc tangent for signals;
#X obj 30 10106 math.atan~;
#X text 200 10106 arc tangent for signals;
#X obj 30 10133 math.cabs~;
#X text 200 10133 magnitude of a complex signals;
#X obj 30 10160 math.carg~;
#X text 200 10160 phase angle of a complex signals;
#X obj 30 10187 math.cbrt;
#X text 200 10187 cube root function;
#X obj 30 10214 math.cbrt~;
#X text 200 10214 cube root function for signals;
#X obj 30 10241 math.cdiv~;
#X text 200 10241 division of complex signals;
#X obj 30 10268 math.ceil;
#X text 200 10268 round to smallest integral value not less than input
value;
#X obj 30 10295 math.ceil~;
#X text 200 10295 round to smallest integral value not less than input
value;
#X obj 30 10322 math.cexp~;
#X text 200 10322 exponent of a complex signals;
#X obj 30 10349 math.cmul~;
#X text 200 10349 multiplication of complex signals;
#X obj 30 10376 math.cos;
#X text 200 10376 cosine function;
#X obj 30 10403 math.cosh;
#X text 200 10403 hyperbolic cosine function;
#X obj 30 10430 math.cosh~;
#X text 200 10430 hyperbolic cosine for signals;
#X obj 30 10457 math.cos~;
#X text 200 10457 cosine function;
#X obj 30 10484 math.div;
#X text 200 10484 division (on lists too);
#X obj 30 10511 math.e;
#X text 200 10511 mathematical constant \, base of the natural logarithm;
#X obj 30 10538 math.erf;
#X text 200 10538 error function;
#X obj 30 10565 math.erf~;
#X text 200 10565 error function for signals;
#X obj 30 10592 math.exp;
#X text 200 10592 exponential functions;
#X obj 30 10619 math.exp2;
#X text 200 10619 exponential functions;
#X obj 30 10646 math.exp2~;
#X text 200 10646 base-2 exponential for signal;
#X obj 30 10673 math.expr;
#X text 200 10673 dynamic [expr];
#X obj 30 10700 math.exp~;
#X text 200 10700 base-e exponential for signal;
#X obj 30 10727 math.floor;
#X text 200 10727 round to largest integral value not greater than
x;
#X obj 30 10754 math.floor~;
#X text 200 10754 round to largest integral value not greater than
x;
#X obj 30 10781 math.gamma;
#X text 200 10781 gamma function;
#X obj 30 10808 math.gamma~;
#X text 200 10808 gamma function for floating point signals;
#X obj 30 10835 math.gcd;
#X text 200 10835 calculate greatest common divisor;
#X obj 30 10862 math.inf;
#X text 200 10862 infinity value that cannot be represented accurately;
#X obj 30 10889 math.inf~;
#X text 200 10889 inifinity signal generator;
#X obj 30 10916 math.lcm;
#X text 200 10916 calculate least common multiple;
#X obj 30 10943 math.lgamma;
#X text 200 10943 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10970 math.lgamma~;
#X text 200 10970 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11010 math.log;
#X text 200 11010 natural logarithm;
#X obj 30 11037 math.log10;
#X text 200 11037 logarithm functions;
#X obj 30 11064 math.log10~;
#X text 200 11064 natural logarithm;
#X obj 30 11091 math.log2;
#X text 200 11091 logarithm functions;
#X obj 30 11118 math.log2~;
#X text 200 11118 base-2 logarithm;
#X obj 30 11145 math.log~;
#X text 200 11145 natural logarithm;
#X obj 30 11172 math.mul;
#X text 200 11172 multiplication (on lists too);
#X obj 30 11199 math.nan;
#X text 200 11199 Not a Number \, unrepresentable value;
#X obj 30 11226 math.nan~;
#X text 200 11226 signal NaN;
#X obj 30 11253 math.neg;
#X text 200 11253 negate function;
#X obj 30 11280 math.or;
#X text 200 11280 operation OR for multiple arguments;
#X obj 30 11307 math.pi;
#X text 200 11307 mathematical constant;
#X obj 30 11334 math.pi~;
#X text 200 11334 mathematical constant;
#X obj 30 11361 math.polyeval;
#X text 200 11361 evaluates the polynomial described by the coefficients
list;
#X obj 30 11388 math.reciprocal;
#X text 200 11388 calculate reciprocal number;
#X obj 30 11415 math.reciprocal~;
#X text 200 11415 calculate reciprocal number for signals;
#X obj 30 11442 math.round;
#X text 200 11442 round to integral value \, regardless of rounding
direction;
#X obj 30 11469 math.round~;
#X text 200 11469 signal round;
#X obj 30 11496 math.sign;
#X text 200 11496 sign function;
#X obj 30 11523 math.sin;
#X text 200 11523 sine function;
#X obj 30 11550 math.sinh;
#X text 200 11550 hyperbolic sine function;
#X obj 30 11577 math.sinh~;
#X text 200 11577 hyperbolic sine for signals;
#X obj 30 11604 math.sin~;
#X text 200 11604 sine function;
#X obj 30 11631 math.sqrt;
#X text 200 11631 square root function;
#X obj 30 11658 math.sqrt~;
#X text 200 11658 square root for signal;
#X obj 30 11685 math.squared;
#X text 200 11685 value square;
#X obj 30 11712 math.squared~;
#X text 200 11712 signal value square;
#X obj 30 11739 math.sync_add;
#X text 200 11739 sync addition;
#X obj 30 11766 math.sync_and;
#X text 200 11766 sync logical AND operation;
#X obj 30 11793 math.sync_div;
#X text 200 11793 sync division;
#X obj 30 11820 math.sync_eq;
#X text 200 11820 sync equal numbers check;
#X obj 30 11847 math.sync_ge;
#X text 200 11847 sync greater equal numbers compare;
#X obj 30 11874 math.sync_gt;
#X text 200 11874 sync greater then numbers compare;
#X obj 30 11901 math.sync_le;
#X text 200 11901 sync less equal numbers compare;
#X obj 30 11928 math.sync_lt;
#X text 200 11928 sync less then numbers compare;
#X obj 30 11955 math.sync_mod;
#X text 200 11955 sync remainder of modulo division (float or integer);
#X obj 30 11982 math.sync_mul;
#X text 200 11982 sync multiplication;
#X obj 30 12009 math.sync_ne;
#X text 200 12009 sync numbers for not equality;
#X obj 30 12036 math.sync_or;
#X text 200 12036 sync logical OR operation;
#X obj 30 12063 math.sync_sub;
#X text 200 12063 sync subtraction;
#X obj 30 12090 math.sync_xor;
#X text 200 12090 sync logical XOR operation;
#X obj 30 12117 math.tan;
#X text 200 12117 tangent function;
#X obj 30 12144 math.tanh;
#X text 200 12144 hyperbolic tangent function;
#X obj 30 12171 math.tanh~;
#X text 200 12171 hyperbolic tangent for signals;
#X obj 30 12198 math.tan~;
#X text 200 12198 tangent function;
#X obj 30 12225 math.trunc;
#X text 200 12225 truncate to integer value;
#X obj 30 12252 math.trunc~;
#X text 200 12252 truncate to integer value;
#X obj 20 12279 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12320 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12331 midi.ctl2str;
#X text 200 12331 convert Standard MIDI Controllers number to name;
#X obj 30 12358 midi.event2ctl;
#X text 200 12358 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12385 midi.event2note;
#X text 200 12385 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12412 midi.event2prg;
#X text 200 12412 convert MidiEvent message to midi program change
value;
#X obj 30 12439 midi.file;
#X text 200 12439 standard midi file SMF reader and writer;
#X obj 30 12466 midi.key2str;
#X text 200 12466 convert key number to SPN name according to tonality;
#X obj 30 12493 midi.prg2str;
#X text 200 12493 convert GM Instrument number to name (string or symbol);
#X obj 30 12520 midi.track;
#X text 200 12520 extract track from MidiFile;
#X obj 30 12547 midi.tuning;
#X text 200 12547 apply tuning to midi messages;
#X obj 30 12574 midi.vramp;
#X text 200 12574 apply crescendo or diminuendo for midi message flow;
#X obj 20 12601 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12642 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12653 click~;
#X text 200 12653 Output single impulse on bang;
#X obj 30 12680 fluid~;
#X text 200 12680 FluidSynth SoundFont 2 player;
#X obj 30 12707 modplug~;
#X text 200 12707 MOD file player (using libmodplug);
#X obj 30 12734 speech.flite;
#X text 200 12734 render speech to array;
#X obj 20 12761 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 12802 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12813 msg;
#X text 200 12813 message constructor;
#X obj 30 12840 msg.after;
#X text 200 12840 send specified message after incoming message;
#X obj 30 12867 msg.onload;
#X text 200 12867 send message when patch loads;
#X obj 20 12894 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12935 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12946 net.host2ip;
#X text 200 12946 returns IP address by DNS name;
#X obj 20 12973 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13014 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13025 noise.crackle~;
#X text 200 13025 sparse noise generator;
#X obj 30 13052 noise.ginger;
#X text 200 13052 Gingerbreadman map chaotic generator;
#X obj 30 13079 noise.lfreq0~;
#X text 200 13079 sampled/held noise (piecewise constant);
#X obj 30 13106 noise.lfreq~;
#X text 200 13106 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 13133 noise.pink~;
#X text 200 13133 Pink noise generator;
#X obj 30 13160 noise.white~;
#X text 200 13160 White noise generator;
#X obj 20 13187 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 13228 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13239 osc.blit~;
#X text 200 13239 Bandlimited impulse train oscillator;
#X obj 30 13266 osc.impulse~;
#X text 200 13266 Bandlimited impulse train generator;
#X obj 30 13293 osc.pulse~;
#X text 200 13293 Bandlimited pulse train oscillator;
#X obj 30 13320 osc.saw4~;
#X text 200 13320 Bandlimited sawtooth wave;
#X obj 30 13347 osc.saw~;
#X text 200 13347 Alias-free sawtooth wave;
#X obj 30 13374 osc.sinfb~;
#X text 200 13374 Sine oscilator with feedback;
#X obj 30 13401 osc.sin~;
#X text 200 13401 Sine wave oscillator;
#X obj 30 13428 osc.square~;
#X text 200 13428 Bandlimited square wave oscillator;
#X obj 30 13455 osc.tri~;
#X text 200 13455 Bandlimited triangle wave oscillator;
#X obj 20 13482 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 13523 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13534 canvas.current;
#X text 200 13534 verbose information about current canvas;
#X obj 30 13561 canvas.dir;
#X text 200 13561 current canvas directory;
#X obj 30 13588 canvas.name;
#X text 200 13588 current canvas name;
#X obj 30 13615 canvas.path;
#X text 200 13615 current canvas fullpath;
#X obj 30 13642 canvas.top;
#X text 200 13642 verbose information about top-level canvas;
#X obj 30 13669 patch.args;
#X text 200 13669 Get patch or subpatch arguments;
#X obj 30 13696 patch.deps;
#X text 200 13696 patch dependencies: used objects and abstractions;
#X obj 30 13723 patch.tree;
#X text 200 13723 patch tree;
#X obj 20 13750 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 13791 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13802 path.basename;
#X text 200 13802 outputs filename portion of pathname;
#X obj 30 13829 path.dirname;
#X text 200 13829 outputs directory portion of pathname;
#X obj 30 13856 path.exists;
#X text 200 13856 checks if given path exists;
#X obj 30 13883 path.is_dir;
#X text 200 13883 check if path is directory;
#X obj 30 13910 path.lsdir;
#X text 200 13910 list directory contents;
#X obj 20 13937 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13978 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13989 is_any;
#X text 200 13989 checks if input data has *any* type;
#X obj 30 14016 is_bang;
#X text 200 14016 checks if input data has *bang* type;
#X obj 30 14043 is_data;
#X text 200 14043 checks if input data has *data* type;
#X obj 30 14070 is_dict;
#X text 200 14070 checks if input data has *dict* type;
#X obj 30 14097 is_even;
#X text 200 14097 checks if input number is even;
#X obj 30 14124 is_file;
#X text 200 14124 checks if file exists and accessible;
#X obj 30 14151 is_float;
#X text 200 14151 checks if input data has *float* type;
#X obj 30 14178 is_list;
#X text 200 14178 checks if input data has *list* type;
#X obj 30 14205 is_odd;
#X text 200 14205 checks if input number is odd;
#X obj 30 14232 is_pointer;
#X text 200 14232 checks if input data has *pointer* type;
#X obj 30 14259 is_symbol;
#X text 200 14259 checks if input data has *symbol* type;
#X obj 20 14286 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 14327 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14338 preset.float;
#X text 200 14338 load/store float preset;
#X obj 30 14365 preset.list;
#X text 200 14365 load/store symbol preset;
#X obj 30 14392 preset.storage;
#X text 200 14392 preset storage control;
#X obj 30 14419 preset.symbol;
#X text 200 14419 load/store symbol preset;
#X obj 20 14446 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 14487 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14498 patch.props;
#X text 200 14498 patch properties manager;
#X obj 30 14525 prop;
#X text 200 14525 get/set named property value for subpatch or abstraction;
#X obj 30 14552 prop.declare;
#X text 200 14552 declare named property for subpatch or abstraction;
#X obj 30 14579 prop.get;
#X text 200 14579 get property from connected object/subpatch/abstraction;
#X obj 30 14606 prop.get~;
#X text 200 14606 Property extractor from sound stream;
#X obj 30 14633 prop.join;
#X text 200 14633 join property to main data flow;
#X obj 30 14660 prop.set;
#X text 200 14660 set object property;
#X obj 30 14687 prop.split;
#X text 200 14687 separate properties from dataflow;
#X obj 20 14714 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 14755 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14766 proto.firmata;
#X text 200 14766 Firmata Arduino protocol support;
#X obj 30 14793 proto.sp.alpaca;
#X text 200 14793 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 14820 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 14861 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14872 random.atom;
#X text 200 14872 weighted atom generation from specified list;
#X obj 30 14899 random.discrete;
#X text 200 14899 random weighted integers on interval [0 \, n);
#X obj 30 14926 random.float;
#X text 200 14926 uniform random float generator in specified range;
#X obj 30 14953 random.gauss;
#X text 200 14953 gaussian random distribution;
#X obj 30 14980 random.int;
#X text 200 14980 uniform random integer generator in specified range;
#X obj 30 15007 random.linear;
#X text 200 15007 random linear distribution;
#X obj 30 15034 random.pw_const;
#X text 200 15034 piecewise constant random distribution;
#X obj 30 15061 random.pw_lin;
#X text 200 15061 piecewise linear random distribution;
#X obj 20 15088 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 15129 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15140 seq.arp;
#X text 200 15140 sequence arpeggiator;
#X obj 30 15167 seq.bangs;
#X text 200 15167 bang sequencer;
#X obj 20 15194 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 15235 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15246 snd.file;
#X text 200 15246 Sound file loader on steroids;
#X obj 20 15273 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 15314 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15325 hoa.2d.decoder~;
#X text 200 15325 hoa 2d decoder;
#X obj 30 15352 hoa.2d.encoder~;
#X text 200 15352 hoa 2d encoder;
#X obj 30 15379 hoa.2d.map~;
#X text 200 15379 a 2d ambisonic multisource spatializer;
#X obj 30 15406 hoa.2d.optim~;
#X text 200 15406 a 2D ambisonic optimization tool;
#X obj 30 15433 hoa.2d.projector~;
#X text 200 15433 a plane waves decomposer from circular harmonics
domain;
#X obj 30 15460 hoa.2d.recomposer~;
#X text 200 15460 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 15500 hoa.2d.rotate~;
#X text 200 15500 a 2D ambisonic sound field rotation;
#X obj 30 15527 hoa.2d.wider~;
#X text 200 15527 a 2d fractional ambisonic order simulator;
#X obj 30 15554 hoa.@process;
#X text 200 15554 process properties manager for hoa.process~;
#X obj 30 15581 hoa.in;
#X text 200 15581 message inlet for a patcher loaded by hoa.process~;
#X obj 30 15608 hoa.in~;
#X text 200 15608 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15635 hoa.out;
#X text 200 15635 message outlet for a patcher loaded by hoa.process~;
#X obj 30 15662 hoa.out~;
#X text 200 15662 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15689 hoa.process~;
#X text 200 15689 patcher loader for multichannel processing;
#X obj 30 15719 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 15716 a 2d ambisonic harmonic scope;
#X obj 30 15741 pan.cos~;
#X text 200 15741 two channel equal power sine/cosine panner;
#X obj 30 15768 pan.linsig~;
#X text 200 15768 two channel linear panner with signal control;
#X obj 30 15795 pan.lin~;
#X text 200 15795 two channel linear panner;
#X obj 30 15822 pan.spread~;
#X text 200 15822 spreads input channels across the stereo field;
#X obj 30 15849 pan.sqrt~;
#X text 200 15849 two channel equal power square root panner;
#X obj 30 15876 spat.pan4~;
#X text 200 15876 GMEM SPAT: 4-outputs spatializer;
#X obj 30 15903 spat.pan8~;
#X text 200 15903 GMEM SPAT: 8-outputs spatializer;
#X obj 30 15930 spat.zita6x8~;
#X text 200 15930 spat with 6 inputs sources to 8 channel output;
#X obj 20 15957 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 15998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16009 string;
#X text 200 16009 string constructor;
#X obj 30 16036 string.contains;
#X text 200 16036 checks if string contains specified substring;
#X obj 30 16063 string.ends_with;
#X text 200 16063 checks if string ends with specified substring;
#X obj 30 16090 string.equal;
#X text 200 16090 check strings or symbols for equality;
#X obj 30 16117 string.format;
#X text 200 16117 formats string like printf.;
#X obj 30 16144 string.join;
#X text 200 16144 joins (concatenates) strings with separator;
#X obj 30 16171 string.length;
#X text 200 16171 number of characters in string (unicode supported);
#X obj 30 16198 string.match;
#X text 200 16198 check if string match regular expression;
#X obj 30 16225 string.remove;
#X text 200 16225 remove substring from input string;
#X obj 30 16252 string.replace;
#X text 200 16252 replace from one substring to another in input string;
#X obj 30 16279 string.split;
#X text 200 16279 split string by separator;
#X obj 30 16306 string.starts_with;
#X text 200 16306 checks if string starts with specified substring;
#X obj 30 16333 string.substr;
#X text 200 16333 extract substring from input string;
#X obj 30 16360 string2symbol;
#X text 200 16360 converts string to symbol;
#X obj 20 16387 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 16428 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16439 symbol.equal;
#X text 200 16439 check symbols for equality;
#X obj 30 16466 symbol.length;
#X text 200 16466 number of characters in symbol (unicode supported);
#X obj 30 16493 symbol.num_compare;
#X text 200 16493 numeric symbol compare;
#X obj 30 16520 symbol2intlist;
#X text 200 16520 converts symbol to list of character codes;
#X obj 20 16547 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 16588 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16599 synth.bee3~;
#X text 200 16599 Hammond-oid organ FM synthesis instrument;
#X obj 30 16626 synth.birds~;
#X text 200 16626 bird singing generator;
#X obj 30 16653 synth.church_bell~;
#X text 200 16653 generic church bell modal model;
#X obj 30 16680 synth.dubdub~;
#X text 200 16680 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 16720 synth.eguitar~;
#X text 200 16720 simple electric guitar model with steel strings;
#X obj 30 16747 synth.fgrain~;
#X text 200 16747 file granulator from STK;
#X obj 30 16774 synth.ks~;
#X text 200 16774 Karplus-Strong string;
#X obj 30 16801 synth.marimba~;
#X text 200 16801 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 16841 synth.rhodey~;
#X text 200 16841 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 16868 synth.risset_arp~;
#X text 200 16868 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 16895 synth.risset_tone~;
#X text 200 16895 Jean Claude Risset's endless glissando;
#X obj 30 16922 synth.shakers~;
#X text 200 16922 various percussion sounds from STK library;
#X obj 30 16949 synth.wurley~;
#X text 200 16949 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 16976 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 17017 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17028 system.colorpanel;
#X text 200 17028 System color panel dialog popup;
#X obj 30 17055 system.cursor;
#X text 200 17055 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 17082 system.exec;
#X text 200 17082 run external command in separate process;
#X obj 30 17109 system.getenv;
#X text 200 17109 Get system environment variables;
#X obj 30 17136 system.hostname;
#X text 200 17136 outputs system hostname;
#X obj 30 17163 system.memsize;
#X text 200 17163 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 17203 system.memused;
#X text 200 17203 returns the process physical memory use - current
and peak;
#X obj 30 17230 system.screen_size;
#X text 200 17230 returns current screen size in pixels;
#X obj 20 17257 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 17298 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17309 tl.bang;
#X text 200 17309 Timeline bang (with possible delay);
#X obj 30 17339 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 17336 Timeline section;
#X obj 30 17361 tl.timeline;
#X text 200 17361 Timeline - event scheduler;
#X obj 30 17388 tl.toggle;
#X text 200 17388 Timeline bang;
#X obj 30 17415 tl.transport;
#X text 200 17415 Timeline transport control;
#X obj 20 17442 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 17483 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17497 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 17494 array view with cursor and selection;
#X obj 30 17522 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 17519 A bang... that's all;
#X obj 30 17547 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 17544 colorchooser widget;
#X obj 30 17572 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 17569 Display GUI object;
#X obj 30 17597 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 17594 GUI for turning DSP on/off;
#X obj 30 17622 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 17619 envelope editor widget;
#X obj 30 17647 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 17644 UI stereo gain control;
#X obj 30 17672 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 17669 UI gain control;
#X obj 30 17697 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 17694 simple icon with button capabilities;
#X obj 30 17722 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 17719 value increment/decrement;
#X obj 30 17747 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 17744 keyboard widget;
#X obj 30 17772 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 17769 knob widget;
#X obj 30 17797 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 17794 simple label widget;
#X obj 30 17822 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 17819 Hyperlink widget;
#X obj 30 17847 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 17844 The matrix of toggles has you.;
#X obj 30 17872 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 17869 Dropdown menu;
#X obj 30 17897 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 17894 Shows peak and rms signal level;
#X obj 30 17922 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 17919 filter mouse events from ui objects;
#X obj 30 17947 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 17944 routes mouse events from ui objects;
#X obj 30 17972 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 17969 counterpart of the vanilla [nbx];
#X obj 30 17997 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 17994 counterpart of the vanilla [nbx] for signal;
#X obj 30 18022 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 18019 signal plotter;
#X obj 30 18047 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 18044 2D slider in polar coordinates;
#X obj 30 18072 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 18069 Preset manager;
#X obj 30 18097 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 18094 counterpart of the vanilla radio toggle;
#X obj 30 18122 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 18119 range slider;
#X obj 30 18147 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 18144 Scope GUI object;
#X obj 30 18172 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 18169 counterpart of the vanilla slider;
#X obj 30 18197 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 18194 2D slider widget;
#X obj 30 18222 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 18219 Multiple slider widget;
#X obj 30 18247 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 18244 Spectroscope GUI object;
#X obj 30 18272 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 18269 displays a list of text buttons or text toggles;
#X obj 30 18297 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 18294 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 18319 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 18319 version: v0.9.0 \, license: GPL3;
#X obj 20 18347 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 18370 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 18334 msg 0;
#X obj 670 18369 switch~;
#X connect 1264 0 1265 0;