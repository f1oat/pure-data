#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot;
#X text 200 560 array data plotter;
#X obj 30 587 array.plot~;
#X text 200 587 plot signal on specified array;
#X obj 30 614 array.resample;
#X text 200 614 array resampler;
#X obj 30 641 array.rms;
#X text 200 641 calculates root mean square value for array;
#X obj 30 668 array.set;
#X text 200 668 set array content from list;
#X obj 30 695 array.stddev;
#X text 200 695 calculates standard deviation for array values;
#X obj 30 722 array.stretch;
#X text 200 722 array time-stretch \, pitch-shift or rate-change;
#X obj 30 749 array.sum;
#X text 200 749 calculates sum of array elements;
#X obj 30 776 array.sum2;
#X text 200 776 calculates sum of squares of array elements;
#X obj 30 803 array.variance;
#X text 200 803 calculates variance of array values;
#X obj 30 830 array.vplay;
#X text 200 830 simple array player for using with vline~;
#X obj 30 857 array.window;
#X text 200 857 fill array with window;
#X obj 30 884 plot.geomspace~;
#X text 200 884 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 924 plot.hist~;
#X text 200 924 calculate and output signal histogram;
#X obj 30 951 plot.linspace~;
#X text 200 951 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 991 plot.logspace~;
#X text 200 991 outputs numbers spaced evenly on a log scale;
#X obj 30 1018 plot.response~;
#X text 200 1018 output amp/phase freq response to impulse;
#X obj 20 1045 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1086 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1097 ceammc.search;
#X text 200 1097 ceammc library search object;
#X obj 30 1127 ui.link @title [function] @url function-help.pd;
#X text 200 1124 named function;
#X obj 30 1149 function.call;
#X text 200 1149 call named function;
#X obj 30 1176 gain~;
#X text 200 1176 multislot signal gain;
#X obj 30 1203 logger;
#X text 200 1203 advanced data logger;
#X obj 30 1230 matrix~;
#X text 200 1230 signal routing matrix;
#X obj 30 1257 metro.pattern;
#X text 200 1257 metro with rhythmic patterns;
#X obj 30 1284 metro.random;
#X text 200 1284 metro random bang with specified range;
#X obj 30 1311 metro.seq;
#X text 200 1311 metro sequencer;
#X obj 30 1338 mix~;
#X text 200 1338 multislot signal mixer;
#X obj 30 1365 nsig~;
#X text 200 1365 Mulitchannel converter from control to audio rate;
#X obj 30 1392 obj.props;
#X text 200 1392 property extractor;
#X obj 30 1419 radio;
#X text 200 1419 float index to outlet values as radio switch;
#X obj 30 1446 sync;
#X text 200 1446 value synchronization;
#X obj 30 1473 window;
#X text 200 1473 returns window value by given window position;
#X obj 30 1500 xdac~;
#X text 200 1500 dac~ with channel ranges;
#X obj 30 1527 xfade2~;
#X text 200 1527 multi stereo-signal crossfade;
#X obj 30 1554 xfade~;
#X text 200 1554 multi signal crossfade;
#X obj 20 1581 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1633 chaos.gbman0;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.gbman0~;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.jong;
#X text 200 1687 Peter de Jong attractor;
#X obj 30 1714 chaos.logistic;
#X text 200 1714 Logistic map chaotic generator;
#X obj 30 1741 chaos.std0;
#X text 200 1741 Standard map chaotic generator;
#X obj 30 1768 chaos.std0~;
#X text 200 1768 Standard map chaotic generator;
#X obj 20 1795 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1847 array.p2s;
#X text 200 1847 convert array phase [0\..1] to sample position;
#X obj 30 1874 array.s2p;
#X text 200 1874 convert sample position to phase range [0\..1];
#X obj 30 1901 conv.amp2dbfs;
#X text 200 1901 convert from amplitude to decibel full scale;
#X obj 30 1928 conv.amp2dbfs~;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.bits2bang;
#X text 200 1955 convert list of bits to bang events;
#X obj 30 1982 conv.bits2int;
#X text 200 1982 convert list of bits to integer;
#X obj 30 2009 conv.bits2note;
#X text 200 2009 convert list of bits to note events;
#X obj 30 2036 conv.bits2pos;
#X text 200 2036 convert list of bits to list of bit position;
#X obj 30 2063 conv.bpm2hz;
#X text 200 2063 converts BPM to frequency in herz;
#X obj 30 2090 conv.bpm2ms;
#X text 200 2090 convert frequency in BPM to period in milliseconds;
#X obj 30 2117 conv.bpm2sec;
#X text 200 2117 convert frequency in BPM to period in seconds;
#X obj 30 2144 conv.car2pol;
#X text 200 2144 convert cartesian coords to polar;
#X obj 30 2171 conv.cc2amp;
#X text 200 2171 convert from MIDI Control Change range;
#X obj 30 2198 conv.dbfs2amp;
#X text 200 2198 convert decibel full scale to amplitude;
#X obj 30 2225 conv.dbfs2amp~;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.degree2key;
#X text 200 2252 convert scale degree to key;
#X obj 30 2279 conv.hex2int;
#X text 200 2279 hex symbol to int value;
#X obj 30 2306 conv.int2bits;
#X text 200 2306 convert integer to list of bits;
#X obj 30 2333 conv.lin2curve;
#X text 200 2333 map linear to exponential range with 0 allowed.;
#X obj 30 2360 conv.lin2exp;
#X text 200 2360 maps linear range to exponential range;
#X obj 30 2387 conv.lin2lin;
#X text 200 2387 convert from one linear range to another;
#X obj 30 2414 conv.lin2lin~;
#X text 200 2414 convert from one linear range to another for signals;
#X obj 30 2441 conv.list2props;
#X text 200 2441 converts list to series of property messages;
#X obj 30 2468 conv.midi2freq;
#X text 200 2468 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2508 conv.ms2bpm;
#X text 200 2508 convert period in milliseconds to frequency in BPM;
#X obj 30 2535 conv.ms2samp;
#X text 200 2535 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2575 conv.ms2samp~;
#X text 200 2575 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2615 conv.phase2rad;
#X text 200 2615 convert phase value [0-1] to radians [0-2π];
#X obj 30 2642 conv.phase2rad~;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.pitch2midi;
#X text 200 2669 converts symbol pitch name to MIDI note number;
#X obj 30 2696 conv.pol2car;
#X text 200 2696 convert from polar coordinates to cartesian;
#X obj 30 2723 conv.rad2phase;
#X text 200 2723 convert radians value to phase;
#X obj 30 2750 conv.rad2phase~;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.samp2ms;
#X text 200 2777 convert samples to time according to samplerate;
#X obj 30 2804 conv.samp2ms~;
#X text 200 2804 convert samples to milliseconds according to samplerate;
#X obj 30 2831 conv.samp2sec;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.sec2bpm;
#X text 200 2858 convert period in seconds to frequency in BPM;
#X obj 30 2885 conv.sec2samp;
#X text 200 2885 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2925 conv.sec2str;
#X text 200 2925 converts float time in seconds to formated symbol
(or string);
#X obj 30 2952 conv.sig2float~;
#X text 200 2952 convert signal to floats;
#X obj 30 2979 conv.str2sec;
#X text 200 2979 converts formatted time to float value in seconds;
#X obj 20 3006 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3058 data.copy;
#X text 200 3058 make copy for any data types: MList \, Set etc...;
#X obj 30 3085 data.dict;
#X text 200 3085 dictionary container: store values by key;
#X obj 30 3112 data.fifo;
#X text 200 3112 First-In-First-Out (FIFO) queue data container;
#X obj 30 3139 data.float;
#X text 200 3139 robust float object;
#X obj 30 3166 data.int;
#X text 200 3166 robust int object;
#X obj 30 3193 data.list;
#X text 200 3193 list container;
#X obj 30 3220 data.mlist;
#X text 200 3220 multidimensional list container;
#X obj 30 3247 data.set;
#X text 200 3247 container that store unique elements;
#X obj 30 3274 data.set2list;
#X text 200 3274 converts set to list;
#X obj 30 3301 dict.contains;
#X text 200 3301 predicate to check if dict contains a keys;
#X obj 30 3328 dict.each;
#X text 200 3328 map each value in dict;
#X obj 30 3355 dict.from_list;
#X text 200 3355 creates dictionary from list;
#X obj 30 3382 dict.get;
#X text 200 3382 output dict values;
#X obj 30 3409 dict.keys;
#X text 200 3409 get list of dict keys;
#X obj 30 3436 dict.pass;
#X text 200 3436 passes specified keys in dict;
#X obj 30 3463 dict.reject;
#X text 200 3463 rejects specified keys from dict;
#X obj 30 3490 dict.size;
#X text 200 3490 dictionary size;
#X obj 30 3517 dict.to_list;
#X text 200 3517 converts dictionary to plain list;
#X obj 30 3544 dict.values;
#X text 200 3544 dictionary values as mlist;
#X obj 30 3571 mlist.flatten;
#X text 200 3571 flatten nested mlist;
#X obj 30 3598 rtree.to_list;
#X text 200 3598 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3625 set.contains;
#X text 200 3625 check if specified element is in set;
#X obj 30 3652 set.diff;
#X text 200 3652 difference between two sets;
#X obj 30 3679 set.equal;
#X text 200 3679 checks if two sets are equal (contains same elements);
#X obj 30 3706 set.intersect;
#X text 200 3706 output intersection of given sets;
#X obj 30 3733 set.size;
#X text 200 3733 get number of elements in set;
#X obj 30 3760 set.symdiff;
#X text 200 3760 symmetric difference between two sets;
#X obj 30 3787 set.union;
#X text 200 3787 output union of given sets;
#X obj 20 3814 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3855 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3866 dyn.comp2~;
#X text 200 3866 stereo dynamic range compressor;
#X obj 30 3893 dyn.comp~;
#X text 200 3893 mono dynamic range compressors;
#X obj 30 3920 dyn.gate2~;
#X text 200 3920 stereo signal gate;
#X obj 30 3947 dyn.gate~;
#X text 200 3947 mono signal gate;
#X obj 30 3974 dyn.limit2~;
#X text 200 3974 stereo 1176LN Peak Limiter;
#X obj 30 4001 dyn.limit~;
#X text 200 4001 mono 1176LN Peak Limiter;
#X obj 30 4028 dyn.softclip~;
#X text 200 4028 soft signal clip;
#X obj 20 4055 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4096 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4107 env.adsr~;
#X text 200 4107 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4134 env.ar~;
#X text 200 4134 Attack/Release envelope generator;
#X obj 30 4161 env.asr~;
#X text 200 4161 Attack/Sustain/Release envelope generator;
#X obj 30 4188 env.concat;
#X text 200 4188 Envelope concatenation;
#X obj 30 4215 env.follow~;
#X text 200 4215 Envelope follower with independent attack and release
times;
#X obj 30 4242 env.mix;
#X text 200 4242 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4282 env.smooth~;
#X text 200 4282 An envelope with an exponential attack and release;
#X obj 30 4309 env.tscale;
#X text 200 4309 Envelope time-scale;
#X obj 30 4336 env.tshift;
#X text 200 4336 Envelope time-shift (horizontal);
#X obj 30 4363 env.vscale;
#X text 200 4363 Envelope value-scale;
#X obj 30 4390 env2array;
#X text 200 4390 Renders envelope to specified array;
#X obj 30 4417 env2vline;
#X text 200 4417 Converts envelope to bunch of vline messages;
#X obj 30 4444 envelope;
#X text 200 4444 Envelope data type;
#X obj 30 4471 vline2env;
#X text 200 4471 Converts vline messages to env;
#X obj 20 4498 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4550 expand_env;
#X text 200 4550 Substitute environment variables in data stream;
#X obj 30 4577 flow.append;
#X text 200 4577 append message to flow stream;
#X obj 30 4604 flow.change;
#X text 200 4604 rejects redundant input values;
#X obj 30 4631 flow.count;
#X text 200 4631 control flow event counter;
#X obj 30 4658 flow.delay;
#X text 200 4658 enhanced version on vanilla delay object;
#X obj 30 4685 flow.demultiplex;
#X text 200 4685 control flow demultiplexer;
#X obj 30 4712 flow.demultiplex2~;
#X text 200 4712 audio stream stereo demultiplexer;
#X obj 30 4739 flow.demultiplex~;
#X text 200 4739 audio stream demultiplexer;
#X obj 30 4766 flow.dollar;
#X text 200 4766 data flow dollar converter;
#X obj 30 4793 flow.dup;
#X text 200 4793 message duplicator;
#X obj 30 4820 flow.gate;
#X text 200 4820 control flow gate. [spigot] analog;
#X obj 30 4847 flow.greater;
#X text 200 4847 numeric stream router;
#X obj 30 4874 flow.greater_eq;
#X text 200 4874 numeric stream router;
#X obj 30 4901 flow.group;
#X text 200 4901 group input atoms in list of specified size;
#X obj 30 4928 flow.interval;
#X text 200 4928 measure time between flow events;
#X obj 30 4955 flow.less;
#X text 200 4955 numeric stream router \, like many [moses];
#X obj 30 4982 flow.less_eq;
#X text 200 4982 numeric stream router \, like many [moses];
#X obj 30 5009 flow.list2many;
#X text 200 5009 routes list element with message selectors;
#X obj 30 5036 flow.match;
#X text 200 5036 route data flow by regexp match;
#X obj 30 5063 flow.mem;
#X text 200 5063 store data flow in memory;
#X obj 30 5090 flow.multiplex;
#X text 200 5090 control flow multiplexer;
#X obj 30 5117 flow.multiplex2~;
#X text 200 5117 audio stream stereo multiplexer;
#X obj 30 5144 flow.multiplex~;
#X text 200 5144 audio stream multiplexer;
#X obj 30 5171 flow.once;
#X text 200 5171 one message pass thru;
#X obj 30 5198 flow.pack;
#X text 200 5198 flow pack;
#X obj 30 5225 flow.pass;
#X text 200 5225 pass specified values;
#X obj 30 5252 flow.pass_if;
#X text 200 5252 pass values that accepted by predicate object;
#X obj 30 5279 flow.pipe;
#X text 200 5279 enhanced version on vanilla pipe object;
#X obj 30 5306 flow.queue;
#X text 200 5306 multi-channel control flow sync queue (or FIFO);
#X obj 30 5333 flow.reject;
#X text 200 5333 reject specified values;
#X obj 30 5360 flow.reject_if;
#X text 200 5360 reject values by predicate;
#X obj 30 5387 flow.ring;
#X text 200 5387 dataflow ring buffer;
#X obj 30 5414 flow.route;
#X text 200 5414 advanced message router;
#X obj 30 5441 flow.select;
#X text 200 5441 vanilla flow on steroids;
#X obj 30 5468 flow.space;
#X text 200 5468 space in time messages received at the same logical
time;
#X obj 30 5495 flow.speedlim;
#X text 200 5495 control stream speed limiter;
#X obj 30 5522 flow.split;
#X text 200 5522 split data flow by external side-chain predicate;
#X obj 30 5549 flow.stack;
#X text 200 5549 any message stack;
#X obj 30 5576 flow.sync;
#X text 200 5576 bus with only hot inlets;
#X obj 30 5603 flow.sync_pack;
#X text 200 5603 flow pack with all hot inlets;
#X obj 30 5630 flow.tee~;
#X text 200 5630 separate audio and control streams;
#X obj 30 5657 replace;
#X text 200 5657 Replace atoms in data stream;
#X obj 30 5684 route.float;
#X text 200 5684 separate float messages from other types;
#X obj 20 5711 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5752 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5763 flt.biquad~;
#X text 200 5763 second order IIR filter.;
#X obj 30 5790 flt.bpf12~;
#X text 200 5790 Two pole band-pass butterworth filter;
#X obj 30 5817 flt.bpf24~;
#X text 200 5817 Four pole band-pass butterworth filter;
#X obj 30 5844 flt.c_apf;
#X text 200 5844 Allpass filter coefficient calculator for biquad;
#X obj 30 5871 flt.c_bpf~;
#X text 200 5871 BPF coefficient calculator for biquad filter;
#X obj 30 5898 flt.c_highshelf~;
#X text 200 5898 Highshelf filter coefficient calculator for biquad;
#X obj 30 5925 flt.c_hpf;
#X text 200 5925 HPF coefficient calculator for biquad filter;
#X obj 30 5952 flt.c_hpf~;
#X text 200 5952 HPF coefficient calculator for biquad filter;
#X obj 30 5979 flt.c_lowshelf~;
#X text 200 5979 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6006 flt.c_lpf;
#X text 200 6006 LPF coefficient calculator for biquad filter;
#X obj 30 6033 flt.c_lpf~;
#X text 200 6033 LPF coefficient calculator for biquad filter;
#X obj 30 6060 flt.c_notch;
#X text 200 6060 Notch filter coefficient calculator for biquad;
#X obj 30 6087 flt.c_notch~;
#X text 200 6087 Band-reject coefficient calculator for biquad filter;
#X obj 30 6114 flt.c_peak~;
#X text 200 6114 Peaking equalizer calculator for biquad;
#X obj 30 6141 flt.c_pole;
#X text 200 6141 One-pole coefficient calculator for biquad filter;
#X obj 30 6168 flt.dcblock2~;
#X text 200 6168 stereo DC blocker;
#X obj 30 6195 flt.dcblock~;
#X text 200 6195 mono DC blocker;
#X obj 30 6222 flt.eq10~;
#X text 200 6222 graphic 10 band equalizer;
#X obj 30 6249 flt.eq_peak_cq~;
#X text 200 6249 constant-Q second order peaking equalizer section;
#X obj 30 6276 flt.eq_peak~;
#X text 200 6276 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6331 flt.fb_comb~;
#X text 200 6331 feedback comb filter;
#X obj 30 6358 flt.fbank5x1~;
#X text 200 6358 5 band one octave butterworth filterbank;
#X obj 30 6385 flt.ff_comb~;
#X text 200 6385 feed forward comb filter;
#X obj 30 6412 flt.freqz;
#X text 200 6412 compute the frequency response of a digital filter;
#X obj 30 6439 flt.freqz~;
#X text 200 6439 compute the frequency response of a digital filter;
#X obj 30 6466 flt.highshelf~;
#X text 200 6466 gain boost|cut above some frequency;
#X obj 30 6493 flt.hpf12~;
#X text 200 6493 High-pass second order Butterworth filter;
#X obj 30 6520 flt.hpf24~;
#X text 200 6520 High-pass fourth order Butterworth filter;
#X obj 30 6547 flt.lowshelf~;
#X text 200 6547 gain boost|cut below some frequency;
#X obj 30 6574 flt.lpf12~;
#X text 200 6574 Low-pass second order Butterworth filter;
#X obj 30 6601 flt.lpf24~;
#X text 200 6601 Low-pass fourth order Butterworth filter;
#X obj 30 6628 flt.median;
#X text 200 6628 Median control flow filter;
#X obj 30 6655 flt.moog_vcf~;
#X text 200 6655 Moog Voltage Controlled Filter;
#X obj 30 6682 flt.notch~;
#X text 200 6682 band-rejection filter;
#X obj 30 6709 flt.resonbp~;
#X text 200 6709 Simple resonant bandpass filter;
#X obj 20 6736 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6777 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6788 fx.bitdown~;
#X text 200 6788 bit downer and downsampler effect;
#X obj 30 6815 fx.chorus~;
#X text 200 6815 Chorus effect;
#X obj 30 6842 fx.distortion1~;
#X text 200 6842 distortion #1 from Guitarix effects set;
#X obj 30 6869 fx.distortion2~;
#X text 200 6869 distortion #2 from Guitarix effects set;
#X obj 30 6896 fx.distortion3~;
#X text 200 6896 simple distortion #3 from Guitarix effects set;
#X obj 30 6923 fx.distortion~;
#X text 200 6923 cubic nonlinearity distortion;
#X obj 30 6950 fx.drive~;
#X text 200 6950 Guitarix drive effect;
#X obj 30 6977 fx.drone_box~;
#X text 200 6977 mono sympathetic resonance generator;
#X obj 30 7004 fx.echo~;
#X text 200 7004 simple echo effect;
#X obj 30 7031 fx.flanger~;
#X text 200 7031 mono flanging effect;
#X obj 30 7058 fx.freeverb2~;
#X text 200 7058 freeverb2 - stereo version of freeverb;
#X obj 30 7085 fx.freeverb~;
#X text 200 7085 freeverb - common used open-source reverb;
#X obj 30 7112 fx.freqshift~;
#X text 200 7112 frequency shifter or single-sideband ring modulation;
#X obj 30 7139 fx.granulator~;
#X text 200 7139 simple input stream granulator;
#X obj 30 7166 fx.greyhole~;
#X text 200 7166 A complex echo-like effect;
#X obj 30 7193 fx.infrev~;
#X text 200 7193 port of Infinity VST plugin from airwindows;
#X obj 30 7220 fx.looper~;
#X text 200 7220 One track looper;
#X obj 30 7247 fx.pitchshift_s~;
#X text 200 7247 signal version of fx.pitchshift~;
#X obj 30 7274 fx.pitchshift~;
#X text 200 7274 simple pitch shifter based on 2 delay lines;
#X obj 30 7301 fx.sdelay~;
#X text 200 7301 smooth delay with a feedback control;
#X obj 30 7328 fx.vocoder~;
#X text 200 7328 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7368 fx.wahwah~;
#X text 200 7368 digitized CryBaby wah pedal;
#X obj 30 7395 fx.zita_rev1~;
#X text 200 7395 Zita stereo reverb;
#X obj 20 7422 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7463 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7474 global.dict;
#X text 200 7474 global named dict object;
#X obj 30 7501 global.float;
#X text 200 7501 global named float object;
#X obj 30 7528 global.int;
#X text 200 7528 global named integer object;
#X obj 30 7555 global.list;
#X text 200 7555 global named list object;
#X obj 30 7582 global.mlist;
#X text 200 7582 global named mlist object;
#X obj 30 7609 global.set;
#X text 200 7609 global named set object;
#X obj 20 7636 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7677 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7688 hw.apple_smc;
#X text 200 7688 query the system management control in Apples;
#X obj 30 7715 hw.apple_sms;
#X text 200 7715 query the sudden motion sensor in Apples;
#X obj 30 7742 hw.arduino;
#X text 200 7742 Arduino device;
#X obj 30 7769 hw.cpu_temp;
#X text 200 7769 get CPU temperature;
#X obj 30 7796 hw.display;
#X text 200 7796 get/set display properties;
#X obj 30 7823 hw.kbd_light;
#X text 200 7823 Get/set keyboard light on some devices;
#X obj 30 7850 hw.serial;
#X text 200 7850 serial port device;
#X obj 20 7877 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 7918 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7932 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 7929 faust realtime compilation;
#X obj 30 7957 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 7954 faust compiled ui object;
#X obj 20 7979 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8020 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8031 lfo.+pulse~;
#X text 200 8031 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8058 lfo.+saw~;
#X text 200 8058 Positive unit-amplitude low frequency saw wave;
#X obj 30 8085 lfo.+square~;
#X text 200 8085 Positive low frequency square wave;
#X obj 30 8112 lfo.+tri~;
#X text 200 8112 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8139 lfo.impulse~;
#X text 200 8139 Unit-amplitude low-frequency impulse train;
#X obj 30 8166 lfo.pulse~;
#X text 200 8166 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8193 lfo.saw~;
#X text 200 8193 Full-range unit-amplitude low frequency saw;
#X obj 30 8220 lfo.square~;
#X text 200 8220 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8247 lfo.tri~;
#X text 200 8247 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8274 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8315 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8326 list.^at;
#X text 200 8326 on input index(es) outputs list element(s);
#X obj 30 8353 list.^contains;
#X text 200 8353 checks if input atom is found in the list;
#X obj 30 8380 list.^search;
#X text 200 8380 on input atom returns it index in list;
#X obj 30 8407 list.all_of;
#X text 200 8407 checks if all list atoms accepted by predicate;
#X obj 30 8434 list.any_of;
#X text 200 8434 checks if at least one list element is accepted by
predicate;
#X obj 30 8461 list.append;
#X text 200 8461 append atom or list to the end of input list;
#X obj 30 8488 list.apply_to;
#X text 200 8488 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8528 list.at;
#X text 200 8528 outputs list element(s) at specified index(es);
#X obj 30 8555 list.choice;
#X text 200 8555 outputs random element from list;
#X obj 30 8582 list.contains;
#X text 200 8582 checks if input list contains specified atoms;
#X obj 30 8609 list.count;
#X text 200 8609 output the number of items that equal to specified
value;
#X obj 30 8636 list.count_if;
#X text 200 8636 output the number of items that satisfy to external
predicate;
#X obj 30 8663 list.delta;
#X text 200 8663 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8703 list.distribution;
#X text 200 8703 list value distribution;
#X obj 30 8730 list.do;
#X text 200 8730 iterate and modify list contents via side-chain;
#X obj 30 8757 list.each;
#X text 200 8757 maps each list value via external side-chain;
#X obj 30 8784 list.enumerate;
#X text 200 8784 enumerates input list;
#X obj 30 8811 list.equal;
#X text 200 8811 checks if given lists are equal;
#X obj 30 8838 list.first;
#X text 200 8838 returns first list element;
#X obj 30 8865 list.gen;
#X text 200 8865 generates list of specified length via external generator;
#X obj 30 8892 list.histogram;
#X text 200 8892 outputs distribution histogram;
#X obj 30 8919 list.insert;
#X text 200 8919 insert atom or list to the specified position of input
list;
#X obj 30 8946 list.integrator;
#X text 200 8946 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8986 list.last;
#X text 200 8986 output last list element;
#X obj 30 9013 list.length;
#X text 200 9013 output the number of atoms in the list;
#X obj 30 9040 list.max;
#X text 200 9040 output largest element in the list;
#X obj 30 9067 list.mean;
#X text 200 9067 calculates average of list of floats;
#X obj 30 9094 list.min;
#X text 200 9094 returns smallest element in the list;
#X obj 30 9121 list.none_of;
#X text 200 9121 checks if none of list atoms is accepted by predicate;
#X obj 30 9148 list.normalize;
#X text 200 9148 normalizes float list values to get their sum = 1.0;
#X obj 30 9175 list.pass_if;
#X text 200 9175 leave only elements accepted by predicate;
#X obj 30 9202 list.prepend;
#X text 200 9202 prepend atom or list before input list;
#X obj 30 9229 list.product;
#X text 200 9229 calculates product of floats in list;
#X obj 30 9256 list.range;
#X text 200 9256 output list smallest and largest value;
#X obj 30 9283 list.reduce;
#X text 200 9283 apply function of two arguments cumulatively to the
list;
#X obj 30 9310 list.remove;
#X text 200 9310 remove list element(s) at specified positions;
#X obj 30 9337 list.remove_if;
#X text 200 9337 remove elements by predicate;
#X obj 30 9364 list.repack;
#X text 200 9364 repack list to specified size;
#X obj 30 9391 list.repeat;
#X text 200 9391 output new list by repeating input list specified
times;
#X obj 30 9418 list.resample;
#X text 200 9418 resample list with specified ratio;
#X obj 30 9445 list.resize;
#X text 200 9445 changes list size;
#X obj 30 9472 list.reverse;
#X text 200 9472 reverses the order of the elements in the list;
#X obj 30 9499 list.rldecode;
#X text 200 9499 Run-length list decoder (RLE);
#X obj 30 9526 list.rlencode;
#X text 200 9526 RLE (run-length encoding) for lists;
#X obj 30 9553 list.rotate;
#X text 200 9553 rotates list;
#X obj 30 9580 list.route;
#X text 200 9580 acts like [route] but for lists;
#X obj 30 9607 list.search;
#X text 200 9607 search specified items in input list;
#X obj 30 9634 list.separate;
#X text 200 9634 sends list elements one by one separately;
#X obj 30 9661 list.seq;
#X text 200 9661 numeric sequence list generator;
#X obj 30 9688 list.set;
#X text 200 9688 set list value at specified position;
#X obj 30 9715 list.shift;
#X text 200 9715 shifts the contents of the list with linear interpolation;
#X obj 30 9742 list.shuffle;
#X text 200 9742 randomly rearranges elements in list;
#X obj 30 9769 list.slice;
#X text 200 9769 extract sublist;
#X obj 30 9796 list.sort;
#X text 200 9796 sorts list values by ascending order;
#X obj 30 9823 list.sort_with;
#X text 200 9823 sort list with user defined side-chain;
#X obj 30 9850 list.split;
#X text 200 9850 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9890 list.stretch;
#X text 200 9890 stretches list - changes its size with linear interpolation;
#X obj 30 9917 list.sum;
#X text 200 9917 calculates sum of floats in list;
#X obj 30 9944 list.unique;
#X text 200 9944 removes duplicates from input list;
#X obj 30 9971 list.unpack;
#X text 200 9971 unpack list elements to separate outlets;
#X obj 30 9998 list.unzip;
#X text 200 9998 splits list to N lists \, each to separate output;
#X obj 30 10025 list.walk;
#X text 200 10025 Walks thru the list;
#X obj 30 10052 list.zip;
#X text 200 10052 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10107 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10148 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10159 live.capture~;
#X text 200 10159 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10199 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10240 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10251 local.dict;
#X text 200 10251 local named dict object;
#X obj 30 10278 local.float;
#X text 200 10278 canvas-scoped named float variable;
#X obj 30 10305 local.int;
#X text 200 10305 canvas-scoped named integer variable;
#X obj 30 10332 local.list;
#X text 200 10332 local named list object;
#X obj 30 10359 local.mlist;
#X text 200 10359 local named mlist object;
#X obj 30 10386 local.set;
#X text 200 10386 local named set object;
#X obj 20 10413 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10454 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10465 math.abs;
#X text 200 10465 absolute value function;
#X obj 30 10492 math.abs~;
#X text 200 10492 absolute value function for signals;
#X obj 30 10519 math.acos;
#X text 200 10519 arc cosine function;
#X obj 30 10546 math.acosh;
#X text 200 10546 inverse hyperbolic cosine function;
#X obj 30 10573 math.acosh~;
#X text 200 10573 hyperbolic arc cosine for signals;
#X obj 30 10600 math.acos~;
#X text 200 10600 arc cosine function for signals;
#X obj 30 10627 math.and;
#X text 200 10627 operation AND for multiple arguments;
#X obj 30 10654 math.approx;
#X text 200 10654 check if input value approximately equal to pattern;
#X obj 30 10681 math.asin;
#X text 200 10681 arc sine function;
#X obj 30 10708 math.asinh;
#X text 200 10708 inverse hyperbolic sine function;
#X obj 30 10735 math.asinh~;
#X text 200 10735 hyperbolic arc sine for signals;
#X obj 30 10762 math.asin~;
#X text 200 10762 arc sine for signals;
#X obj 30 10789 math.atan;
#X text 200 10789 arc tangent function;
#X obj 30 10816 math.atanh;
#X text 200 10816 inverse hyperbolic tangent function;
#X obj 30 10843 math.atanh~;
#X text 200 10843 hyperbolic arc tangent for signals;
#X obj 30 10870 math.atan~;
#X text 200 10870 arc tangent for signals;
#X obj 30 10897 math.cabs~;
#X text 200 10897 magnitude of a complex signals;
#X obj 30 10924 math.carg~;
#X text 200 10924 phase angle of a complex signals;
#X obj 30 10951 math.cbrt;
#X text 200 10951 cube root function;
#X obj 30 10978 math.cbrt~;
#X text 200 10978 cube root function for signals;
#X obj 30 11005 math.cdiv~;
#X text 200 11005 division of complex signals;
#X obj 30 11032 math.ceil;
#X text 200 11032 round to smallest integral value not less than input
value;
#X obj 30 11059 math.ceil~;
#X text 200 11059 round to smallest integral value not less than input
value;
#X obj 30 11086 math.cexp~;
#X text 200 11086 exponent of a complex signals;
#X obj 30 11113 math.cmul~;
#X text 200 11113 multiplication of complex signals;
#X obj 30 11140 math.cos;
#X text 200 11140 cosine function;
#X obj 30 11167 math.cosh;
#X text 200 11167 hyperbolic cosine function;
#X obj 30 11194 math.cosh~;
#X text 200 11194 hyperbolic cosine for signals;
#X obj 30 11221 math.cos~;
#X text 200 11221 cosine function;
#X obj 30 11248 math.div;
#X text 200 11248 division (on lists too);
#X obj 30 11275 math.e;
#X text 200 11275 mathematical constant \, base of the natural logarithm;
#X obj 30 11302 math.erf;
#X text 200 11302 error function;
#X obj 30 11329 math.erf~;
#X text 200 11329 error function for signals;
#X obj 30 11356 math.exp;
#X text 200 11356 exponential functions;
#X obj 30 11383 math.exp2;
#X text 200 11383 exponential functions;
#X obj 30 11410 math.exp2~;
#X text 200 11410 base-2 exponential for signal;
#X obj 30 11437 math.expr;
#X text 200 11437 dynamic [expr];
#X obj 30 11464 math.exp~;
#X text 200 11464 base-e exponential for signal;
#X obj 30 11491 math.floor;
#X text 200 11491 round to largest integral value not greater than
x;
#X obj 30 11518 math.floor~;
#X text 200 11518 round to largest integral value not greater than
x;
#X obj 30 11545 math.gamma;
#X text 200 11545 gamma function;
#X obj 30 11572 math.gamma~;
#X text 200 11572 gamma function for floating point signals;
#X obj 30 11599 math.gcd;
#X text 200 11599 calculate greatest common divisor;
#X obj 30 11626 math.inf;
#X text 200 11626 infinity value that cannot be represented accurately;
#X obj 30 11653 math.inf~;
#X text 200 11653 inifinity signal generator;
#X obj 30 11680 math.lcm;
#X text 200 11680 calculate least common multiple;
#X obj 30 11707 math.lgamma;
#X text 200 11707 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11734 math.lgamma~;
#X text 200 11734 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11774 math.log;
#X text 200 11774 natural logarithm;
#X obj 30 11801 math.log10;
#X text 200 11801 logarithm functions;
#X obj 30 11828 math.log10~;
#X text 200 11828 natural logarithm;
#X obj 30 11855 math.log2;
#X text 200 11855 logarithm functions;
#X obj 30 11882 math.log2~;
#X text 200 11882 base-2 logarithm;
#X obj 30 11909 math.log~;
#X text 200 11909 natural logarithm;
#X obj 30 11936 math.mul;
#X text 200 11936 multiplication (on lists too);
#X obj 30 11963 math.nan;
#X text 200 11963 Not a Number \, unrepresentable value;
#X obj 30 11990 math.nan~;
#X text 200 11990 signal NaN;
#X obj 30 12017 math.neg;
#X text 200 12017 negate function;
#X obj 30 12044 math.or;
#X text 200 12044 operation OR for multiple arguments;
#X obj 30 12071 math.pi;
#X text 200 12071 mathematical constant;
#X obj 30 12098 math.pi~;
#X text 200 12098 mathematical constant;
#X obj 30 12125 math.polyeval;
#X text 200 12125 evaluates the polynomial described by the coefficients
list;
#X obj 30 12152 math.reciprocal;
#X text 200 12152 calculate reciprocal number;
#X obj 30 12179 math.reciprocal~;
#X text 200 12179 calculate reciprocal number for signals;
#X obj 30 12206 math.round;
#X text 200 12206 round to integral value \, regardless of rounding
direction;
#X obj 30 12233 math.round~;
#X text 200 12233 signal round;
#X obj 30 12260 math.sign;
#X text 200 12260 sign function;
#X obj 30 12287 math.sin;
#X text 200 12287 sine function;
#X obj 30 12314 math.sinh;
#X text 200 12314 hyperbolic sine function;
#X obj 30 12341 math.sinh~;
#X text 200 12341 hyperbolic sine for signals;
#X obj 30 12368 math.sin~;
#X text 200 12368 sine function;
#X obj 30 12395 math.sqrt;
#X text 200 12395 square root function;
#X obj 30 12422 math.sqrt~;
#X text 200 12422 square root for signal;
#X obj 30 12449 math.squared;
#X text 200 12449 value square;
#X obj 30 12476 math.squared~;
#X text 200 12476 signal value square;
#X obj 30 12503 math.sync_add;
#X text 200 12503 sync addition;
#X obj 30 12530 math.sync_and;
#X text 200 12530 sync logical AND operation;
#X obj 30 12557 math.sync_div;
#X text 200 12557 sync division;
#X obj 30 12584 math.sync_eq;
#X text 200 12584 sync equal numbers check;
#X obj 30 12611 math.sync_ge;
#X text 200 12611 sync greater equal numbers compare;
#X obj 30 12638 math.sync_gt;
#X text 200 12638 sync greater then numbers compare;
#X obj 30 12665 math.sync_le;
#X text 200 12665 sync less equal numbers compare;
#X obj 30 12692 math.sync_lshift;
#X text 200 12692 sync signed bit left shift;
#X obj 30 12719 math.sync_lt;
#X text 200 12719 sync less then numbers compare;
#X obj 30 12746 math.sync_mod;
#X text 200 12746 sync remainder of modulo division (float or integer);
#X obj 30 12773 math.sync_mul;
#X text 200 12773 sync multiplication;
#X obj 30 12800 math.sync_ne;
#X text 200 12800 sync numbers for not equality;
#X obj 30 12827 math.sync_or;
#X text 200 12827 sync logical OR operation;
#X obj 30 12854 math.sync_rshift;
#X text 200 12854 sync signed bit right shift;
#X obj 30 12881 math.sync_sub;
#X text 200 12881 sync subtraction;
#X obj 30 12908 math.sync_xor;
#X text 200 12908 sync logical XOR operation;
#X obj 30 12935 math.tan;
#X text 200 12935 tangent function;
#X obj 30 12962 math.tanh;
#X text 200 12962 hyperbolic tangent function;
#X obj 30 12989 math.tanh~;
#X text 200 12989 hyperbolic tangent for signals;
#X obj 30 13016 math.tan~;
#X text 200 13016 tangent function;
#X obj 30 13043 math.trunc;
#X text 200 13043 truncate to integer value;
#X obj 30 13070 math.trunc~;
#X text 200 13070 truncate to integer value;
#X obj 20 13097 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13138 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13149 midi.cc;
#X text 200 13149 enhanced version of vanilla ctlin;
#X obj 30 13176 midi.clock;
#X text 200 13176 midi clock toolbox;
#X obj 30 13203 midi.ctl2str;
#X text 200 13203 convert Standard MIDI Controllers number to name;
#X obj 30 13230 midi.event2ctl;
#X text 200 13230 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13257 midi.event2note;
#X text 200 13257 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13284 midi.event2prg;
#X text 200 13284 convert MidiEvent message to midi program change
value;
#X obj 30 13311 midi.file;
#X text 200 13311 standard midi file SMF reader and writer;
#X obj 30 13338 midi.kbd;
#X text 200 13338 computer keyboard midi;
#X obj 30 13365 midi.key2str;
#X text 200 13365 convert key number to SPN name according to tonality;
#X obj 30 13392 midi.oct;
#X text 200 13392 midi octave transpose;
#X obj 30 13419 midi.prg2str;
#X text 200 13419 convert GM Instrument number to name (string or symbol);
#X obj 30 13446 midi.sustain;
#X text 200 13446 sustain pedal emulation;
#X obj 30 13473 midi.sysex;
#X text 200 13473 sysex input messages as list;
#X obj 30 13500 midi.track;
#X text 200 13500 extract track from MidiFile;
#X obj 30 13527 midi.tuning;
#X text 200 13527 apply tuning to midi messages;
#X obj 30 13554 midi.vramp;
#X text 200 13554 apply crescendo or diminuendo for midi message flow;
#X obj 30 13581 midi.vrand;
#X text 200 13581 midi velocity randomizer;
#X obj 20 13608 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13649 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13660 click~;
#X text 200 13660 Output single impulse on bang;
#X obj 30 13687 fluid~;
#X text 200 13687 FluidSynth SoundFont 2 player;
#X obj 30 13714 modplug~;
#X text 200 13714 MOD file player (using libmodplug);
#X obj 30 13741 speech.flite;
#X text 200 13741 render speech to array;
#X obj 30 13768 speech.flite~;
#X text 200 13768 render speech to array;
#X obj 20 13795 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13847 loadexpr;
#X text 200 13847 send message when patch loads;
#X obj 30 13874 msg;
#X text 200 13874 message constructor;
#X obj 30 13901 msg.after;
#X text 200 13901 send specified message after incoming message;
#X obj 30 13928 msg.onload;
#X text 200 13928 send message when patch loads;
#X obj 20 13955 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13996 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14007 net.host2ip;
#X text 200 14007 returns IP address by DNS name;
#X obj 20 14034 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14075 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14086 noise.baker;
#X text 200 14086 Part of a-chaos library;
#X obj 30 14113 noise.clifford;
#X text 200 14113 Part of a-chaos library;
#X obj 30 14140 noise.collatz;
#X text 200 14140 Part of a-chaos library;
#X obj 30 14167 noise.crackle~;
#X text 200 14167 sparse noise generator;
#X obj 30 14194 noise.duffing;
#X text 200 14194 Part of a-chaos library;
#X obj 30 14221 noise.ginger;
#X text 200 14221 Gingerbreadman map chaotic generator;
#X obj 30 14248 noise.henon;
#X text 200 14248 Part of a-chaos library;
#X obj 30 14275 noise.henon_heilles;
#X text 200 14275 Part of a-chaos library;
#X obj 30 14302 noise.henon_phase;
#X text 200 14302 Part of a-chaos library;
#X obj 30 14329 noise.henonf;
#X text 200 14329 Part of a-chaos library;
#X obj 30 14356 noise.ikeda;
#X text 200 14356 Part of a-chaos library;
#X obj 30 14383 noise.lfreq0~;
#X text 200 14383 sampled/held noise (piecewise constant);
#X obj 30 14410 noise.lfreq~;
#X text 200 14410 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14437 noise.lorenz;
#X text 200 14437 Part of a-chaos library;
#X obj 30 14464 noise.lyapunov;
#X text 200 14464 Part of a-chaos library;
#X obj 30 14491 noise.navier_stokes;
#X text 200 14491 Part of a-chaos library;
#X obj 30 14518 noise.pink~;
#X text 200 14518 Pink noise generator;
#X obj 30 14545 noise.rossler;
#X text 200 14545 Part of a-chaos library;
#X obj 30 14572 noise.stein;
#X text 200 14572 Part of a-chaos library;
#X obj 30 14599 noise.torus;
#X text 200 14599 Part of a-chaos library;
#X obj 30 14626 noise.verhulst;
#X text 200 14626 Part of a-chaos library;
#X obj 30 14653 noise.white~;
#X text 200 14653 White noise generator;
#X obj 20 14680 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14721 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14732 osc.blit~;
#X text 200 14732 Bandlimited impulse train oscillator;
#X obj 30 14759 osc.impulse~;
#X text 200 14759 Bandlimited impulse train generator;
#X obj 30 14786 osc.pulse~;
#X text 200 14786 Bandlimited pulse train oscillator;
#X obj 30 14813 osc.saw4~;
#X text 200 14813 Bandlimited sawtooth wave;
#X obj 30 14840 osc.saw~;
#X text 200 14840 Alias-free sawtooth wave;
#X obj 30 14867 osc.sinfb~;
#X text 200 14867 Sine oscilator with feedback;
#X obj 30 14894 osc.sin~;
#X text 200 14894 Sine wave oscillator;
#X obj 30 14921 osc.square~;
#X text 200 14921 Bandlimited square wave oscillator;
#X obj 30 14948 osc.tri~;
#X text 200 14948 Bandlimited triangle wave oscillator;
#X obj 20 14975 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 15016 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15027 canvas.current;
#X text 200 15027 verbose information about current canvas;
#X obj 30 15054 canvas.dir;
#X text 200 15054 current canvas directory;
#X obj 30 15081 canvas.name;
#X text 200 15081 current canvas name;
#X obj 30 15108 canvas.path;
#X text 200 15108 current canvas fullpath;
#X obj 30 15135 canvas.top;
#X text 200 15135 verbose information about top-level canvas;
#X obj 30 15162 patch.args;
#X text 200 15162 Get patch or subpatch arguments;
#X obj 30 15189 patch.deps;
#X text 200 15189 patch dependencies: used objects and abstractions;
#X obj 30 15216 patch.tree;
#X text 200 15216 patch tree;
#X obj 20 15243 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15284 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15295 path.basename;
#X text 200 15295 outputs filename portion of pathname;
#X obj 30 15322 path.dirname;
#X text 200 15322 outputs directory portion of pathname;
#X obj 30 15349 path.exists;
#X text 200 15349 checks if given path exists;
#X obj 30 15376 path.is_dir;
#X text 200 15376 check if path is directory;
#X obj 30 15403 path.lsdir;
#X text 200 15403 list directory contents;
#X obj 20 15430 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15471 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15482 is_any;
#X text 200 15482 checks if input data has *any* type;
#X obj 30 15509 is_bang;
#X text 200 15509 checks if input data has *bang* type;
#X obj 30 15536 is_data;
#X text 200 15536 checks if input data has *data* type;
#X obj 30 15563 is_dict;
#X text 200 15563 checks if input data has *dict* type;
#X obj 30 15590 is_even;
#X text 200 15590 checks if input number is even;
#X obj 30 15617 is_file;
#X text 200 15617 checks if file exists and accessible;
#X obj 30 15644 is_float;
#X text 200 15644 checks if input data has *float* type;
#X obj 30 15671 is_list;
#X text 200 15671 checks if input data has *list* type;
#X obj 30 15698 is_odd;
#X text 200 15698 checks if input number is odd;
#X obj 30 15725 is_pointer;
#X text 200 15725 checks if input data has *pointer* type;
#X obj 30 15752 is_symbol;
#X text 200 15752 checks if input data has *symbol* type;
#X obj 20 15779 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15820 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15831 preset.float;
#X text 200 15831 load/store float preset;
#X obj 30 15858 preset.list;
#X text 200 15858 load/store symbol preset;
#X obj 30 15885 preset.storage;
#X text 200 15885 preset storage control;
#X obj 30 15912 preset.symbol;
#X text 200 15912 load/store symbol preset;
#X obj 20 15939 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15980 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15991 patch.props;
#X text 200 15991 patch properties manager;
#X obj 30 16018 prop;
#X text 200 16018 get/set named property value for subpatch or abstraction;
#X obj 30 16045 prop.declare;
#X text 200 16045 declare named property for subpatch or abstraction;
#X obj 30 16072 prop.get;
#X text 200 16072 get property from connected object/subpatch/abstraction;
#X obj 30 16099 prop.get~;
#X text 200 16099 Property extractor from sound stream;
#X obj 30 16126 prop.join;
#X text 200 16126 join property to main data flow;
#X obj 30 16153 prop.set;
#X text 200 16153 set object property;
#X obj 30 16180 prop.split;
#X text 200 16180 separate properties from dataflow;
#X obj 20 16207 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16248 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16259 proto.firmata;
#X text 200 16259 Firmata Arduino protocol support;
#X obj 30 16286 proto.midi;
#X text 200 16286 raw midi encoder/parser;
#X obj 30 16313 proto.mpv;
#X text 200 16313 mpv video player control;
#X obj 30 16340 proto.sp.alpaca;
#X text 200 16340 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 16367 proto.xtouch_ext;
#X text 200 16367 Behringer XTouch Extender XMidi protocol;
#X obj 20 16394 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 16435 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16446 random.atom;
#X text 200 16446 weighted atom generation from specified list;
#X obj 30 16473 random.discrete;
#X text 200 16473 random weighted integers on interval [0 \, n);
#X obj 30 16500 random.float;
#X text 200 16500 uniform random float generator in specified range;
#X obj 30 16527 random.gauss;
#X text 200 16527 gaussian random distribution;
#X obj 30 16554 random.int;
#X text 200 16554 uniform random integer generator in specified range;
#X obj 30 16581 random.linear;
#X text 200 16581 random linear distribution;
#X obj 30 16608 random.pw_const;
#X text 200 16608 piecewise constant random distribution;
#X obj 30 16635 random.pw_lin;
#X text 200 16635 piecewise linear random distribution;
#X obj 20 16662 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16703 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16714 seq.arp;
#X text 200 16714 sequence arpeggiator;
#X obj 30 16741 seq.bangs;
#X text 200 16741 bang sequencer;
#X obj 30 16768 seq.counter;
#X text 200 16768 sequencer counter;
#X obj 30 16795 seq.life;
#X text 200 16795 Conway gamw of life sequencer;
#X obj 30 16822 seq.matrix;
#X text 200 16822 sequencer control for ui.matrix;
#X obj 30 16849 seq.nbangs;
#X text 200 16849 output specified number of bang with time intervals;
#X obj 30 16876 seq.phasor;
#X text 200 16876 control rate phasor (saw) generator;
#X obj 30 16903 seq.toggles;
#X text 200 16903 toggle sequencer;
#X obj 30 16930 sequencer;
#X text 200 16930 basic sequence player;
#X obj 20 16957 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17009 snd.file;
#X text 200 17009 Sound file loader on steroids;
#X obj 20 17036 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 17077 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17088 hoa.2d.decoder~;
#X text 200 17088 hoa 2d decoder;
#X obj 30 17115 hoa.2d.encoder~;
#X text 200 17115 hoa 2d encoder;
#X obj 30 17142 hoa.2d.map~;
#X text 200 17142 a 2d ambisonic multisource spatializer;
#X obj 30 17169 hoa.2d.optim~;
#X text 200 17169 a 2D ambisonic optimization tool;
#X obj 30 17196 hoa.2d.projector~;
#X text 200 17196 a plane waves decomposer from circular harmonics
domain;
#X obj 30 17223 hoa.2d.recomposer~;
#X text 200 17223 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 17263 hoa.2d.rotate~;
#X text 200 17263 a 2D ambisonic sound field rotation;
#X obj 30 17290 hoa.2d.wider~;
#X text 200 17290 a 2d fractional ambisonic order simulator;
#X obj 30 17317 hoa.@process;
#X text 200 17317 process properties manager for hoa.process~;
#X obj 30 17344 hoa.in;
#X text 200 17344 message inlet for a patcher loaded by hoa.process~;
#X obj 30 17371 hoa.in~;
#X text 200 17371 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17398 hoa.out;
#X text 200 17398 message outlet for a patcher loaded by hoa.process~;
#X obj 30 17425 hoa.out~;
#X text 200 17425 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 17452 hoa.process~;
#X text 200 17452 patcher loader for multichannel processing;
#X obj 30 17482 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 17479 a 2d ambisonic harmonic scope;
#X obj 30 17504 pan.cos~;
#X text 200 17504 two channel equal power sine/cosine panner;
#X obj 30 17531 pan.linsig~;
#X text 200 17531 two channel linear panner with signal control;
#X obj 30 17558 pan.lin~;
#X text 200 17558 two channel linear panner;
#X obj 30 17585 pan.spread~;
#X text 200 17585 spreads input channels across the stereo field;
#X obj 30 17612 pan.sqrt~;
#X text 200 17612 two channel equal power square root panner;
#X obj 30 17639 spat.pan4~;
#X text 200 17639 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17666 spat.pan8~;
#X text 200 17666 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17693 spat.zita6x8~;
#X text 200 17693 spat with 6 inputs sources to 8 channel output;
#X obj 20 17720 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17761 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17772 string;
#X text 200 17772 string constructor;
#X obj 30 17799 string.contains;
#X text 200 17799 checks if string contains specified substring;
#X obj 30 17826 string.ends_with;
#X text 200 17826 checks if string ends with specified substring;
#X obj 30 17853 string.equal;
#X text 200 17853 check strings or symbols for equality;
#X obj 30 17880 string.format;
#X text 200 17880 formats string like printf.;
#X obj 30 17907 string.join;
#X text 200 17907 joins (concatenates) strings with separator;
#X obj 30 17934 string.length;
#X text 200 17934 number of characters in string (unicode supported);
#X obj 30 17961 string.match;
#X text 200 17961 check if string match regular expression;
#X obj 30 17988 string.remove;
#X text 200 17988 remove substring from input string;
#X obj 30 18015 string.replace;
#X text 200 18015 replace from one substring to another in input string;
#X obj 30 18042 string.split;
#X text 200 18042 split string by separator;
#X obj 30 18069 string.starts_with;
#X text 200 18069 checks if string starts with specified substring;
#X obj 30 18096 string.substr;
#X text 200 18096 extract substring from input string;
#X obj 30 18123 string2symbol;
#X text 200 18123 converts string to symbol;
#X obj 20 18150 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18191 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18202 symbol.equal;
#X text 200 18202 check symbols for equality;
#X obj 30 18229 symbol.length;
#X text 200 18229 number of characters in symbol (unicode supported);
#X obj 30 18256 symbol.num_compare;
#X text 200 18256 numeric symbol compare;
#X obj 30 18283 symbol2any;
#X text 200 18283 converts symbol or string to message;
#X obj 30 18310 symbol2intlist;
#X text 200 18310 converts symbol to list of character codes;
#X obj 20 18337 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 18378 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18389 synth.bee3~;
#X text 200 18389 Hammond-oid organ FM synthesis instrument;
#X obj 30 18416 synth.birds~;
#X text 200 18416 bird singing generator;
#X obj 30 18443 synth.church_bell~;
#X text 200 18443 generic church bell modal model;
#X obj 30 18470 synth.dubdub~;
#X text 200 18470 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18510 synth.dx7~;
#X text 200 18510 FAUST dx7 implementation;
#X obj 30 18537 synth.eguitar~;
#X text 200 18537 simple electric guitar model with steel strings;
#X obj 30 18564 synth.fgrain~;
#X text 200 18564 file granulator from STK;
#X obj 30 18591 synth.glass_harm~;
#X text 200 18591 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 18618 synth.glitch~;
#X text 200 18618 Glitch synthesizer by naivesound;
#X obj 30 18645 synth.harpsichord~;
#X text 200 18645 waveguide commuted harpsichord;
#X obj 30 18672 synth.ks~;
#X text 200 18672 Karplus-Strong string;
#X obj 30 18699 synth.marimba~;
#X text 200 18699 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18739 synth.piano~;
#X text 200 18739 waveguide commuted piano;
#X obj 30 18766 synth.rhodey~;
#X text 200 18766 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18793 synth.risset_arp~;
#X text 200 18793 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18820 synth.risset_tone~;
#X text 200 18820 Jean Claude Risset's endless glissando;
#X obj 30 18847 synth.russian_bell~;
#X text 200 18847 russian church bell modal model;
#X obj 30 18874 synth.shakers~;
#X text 200 18874 various percussion sounds from STK library;
#X obj 30 18901 synth.sitar~;
#X text 200 18901 STK sitar;
#X obj 30 18928 synth.wurley~;
#X text 200 18928 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18955 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18996 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19007 system.colorpanel;
#X text 200 19007 System color panel dialog popup;
#X obj 30 19034 system.cursor;
#X text 200 19034 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 19061 system.exec;
#X text 200 19061 run external command in separate process;
#X obj 30 19088 system.exit;
#X text 200 19088 quit PureData;
#X obj 30 19115 system.getenv;
#X text 200 19115 Get system environment variables;
#X obj 30 19142 system.hostname;
#X text 200 19142 outputs system hostname;
#X obj 30 19169 system.memsize;
#X text 200 19169 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 19209 system.memused;
#X text 200 19209 returns the process physical memory use - current
and peak;
#X obj 30 19236 system.screen_size;
#X text 200 19236 returns current screen size in pixels;
#X obj 20 19263 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 19304 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19315 tl.bang;
#X text 200 19315 Timeline bang (with possible delay);
#X obj 30 19345 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 19342 Timeline section;
#X obj 30 19367 tl.timeline;
#X text 200 19367 Timeline - event scheduler;
#X obj 30 19394 tl.toggle;
#X text 200 19394 Timeline bang;
#X obj 30 19421 tl.transport;
#X text 200 19421 Timeline transport control;
#X obj 20 19448 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 19489 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19503 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 19500 array view with cursor and selection;
#X obj 30 19528 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 19525 A bang... that's all;
#X obj 30 19553 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 19550 button widget;
#X obj 30 19578 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 19575 colorchooser widget;
#X obj 30 19603 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 19600 Display GUI object;
#X obj 30 19628 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19625 GUI for turning DSP on/off;
#X obj 30 19653 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19650 envelope editor widget;
#X obj 30 19678 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 19675 UI filter object calculator for biquad filter;
#X obj 30 19703 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 19700 UI filter object based on biquad filter;
#X obj 30 19728 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19725 UI stereo gain control;
#X obj 30 19753 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19750 UI gain control;
#X obj 30 19778 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19775 simple icon with button capabilities;
#X obj 30 19803 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19800 value increment/decrement;
#X obj 30 19828 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19825 keyboard widget;
#X obj 30 19853 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19850 knob widget;
#X obj 30 19878 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19875 simple label widget;
#X obj 30 19903 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19900 Hyperlink widget;
#X obj 30 19928 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19925 The matrix of toggles has you.;
#X obj 30 19953 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19950 Dropdown menu;
#X obj 30 19978 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19975 Shows peak and rms signal level;
#X obj 30 20003 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 20000 incoming MIDI message viewport;
#X obj 30 20028 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 20025 filter mouse events from ui objects;
#X obj 30 20053 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 20050 routes mouse events from ui objects;
#X obj 30 20078 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 20075 counterpart of the vanilla [nbx];
#X obj 30 20103 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 20100 counterpart of the vanilla [nbx] for signal;
#X obj 30 20128 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 20125 signal plotter;
#X obj 30 20153 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 20150 2D slider in polar coordinates;
#X obj 30 20178 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 20175 Preset manager;
#X obj 30 20203 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 20200 counterpart of the vanilla radio toggle;
#X obj 30 20228 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 20225 range slider;
#X obj 30 20253 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 20250 Scope GUI object;
#X obj 30 20278 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 20275 counterpart of the vanilla slider;
#X obj 30 20303 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 20300 2D slider widget;
#X obj 30 20328 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 20325 Multiple slider widget;
#X obj 30 20353 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 20350 Spectroscope GUI object;
#X obj 30 20378 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 20375 displays a list of text buttons or text toggles;
#X obj 30 20403 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 20400 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 20425 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 20425 version: v0.9.3 \, license: GPL3;
#X obj 20 20453 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 20476 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 20440 msg 0;
#X obj 670 20475 switch~;
#X connect 1420 0 1421 0;