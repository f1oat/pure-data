#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 20 238 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 279 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 290 array.bpm;
#X text 200 290 BPM calculator;
#X obj 30 317 array.copy;
#X text 200 317 copy samples from one array to another;
#X obj 30 344 array.do;
#X text 200 344 iterate and modify array content via side-chain;
#X obj 30 371 array.each;
#X text 200 371 process each array elements via side-chain;
#X obj 30 398 array.fill;
#X text 200 398 fill array with single value or pattern;
#X obj 30 425 array.hist;
#X text 200 425 calculates array histogram;
#X obj 30 452 array.mean;
#X text 200 452 calculates array arithmetic mean value;
#X obj 30 479 array.minmax;
#X text 200 479 find array min and max element value;
#X obj 30 506 array.play~;
#X text 200 506 array player with variable speed and amplitude;
#X obj 30 533 array.plot~;
#X text 200 533 plot signal on specified array;
#X obj 30 560 array.resample;
#X text 200 560 array resampler;
#X obj 30 587 array.rms;
#X text 200 587 calculates root mean square value for array;
#X obj 30 614 array.set;
#X text 200 614 set array content from list;
#X obj 30 641 array.stddev;
#X text 200 641 calculates standard deviation for array values;
#X obj 30 668 array.stretch;
#X text 200 668 array time-stretch \, pitch-shift or rate-change;
#X obj 30 695 array.sum;
#X text 200 695 calculates sum of array elements;
#X obj 30 722 array.sum2;
#X text 200 722 calculates sum of squares of array elements;
#X obj 30 749 array.variance;
#X text 200 749 calculates variance of array values;
#X obj 30 776 array.vplay;
#X text 200 776 simple array player for using with vline~;
#X obj 30 803 array.window;
#X text 200 803 fill array with window;
#X obj 30 830 plot.geomspace~;
#X text 200 830 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 870 plot.hist~;
#X text 200 870 calculate and output signal histogram;
#X obj 30 897 plot.linspace~;
#X text 200 897 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 937 plot.logspace~;
#X text 200 937 outputs numbers spaced evenly on a log scale;
#X obj 30 964 plot.response~;
#X text 200 964 output amp/phase freq response to impulse;
#X obj 20 991 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 1032 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1043 ceammc.search;
#X text 200 1043 ceammc library search object;
#X obj 30 1073 ui.link @title [function] @url function-help.pd;
#X text 200 1070 named function;
#X obj 30 1095 function.call;
#X text 200 1095 call named function;
#X obj 30 1122 gain~;
#X text 200 1122 multislot signal gain;
#X obj 30 1149 matrix~;
#X text 200 1149 signal routing matrix;
#X obj 30 1176 metro.pattern;
#X text 200 1176 metro with rhythmic patterns;
#X obj 30 1203 metro.random;
#X text 200 1203 metro random bang with specified range;
#X obj 30 1230 metro.seq;
#X text 200 1230 metro sequencer;
#X obj 30 1257 mix~;
#X text 200 1257 multislot signal mixer;
#X obj 30 1284 nsig~;
#X text 200 1284 Mulitchannel converter from control to audio rate;
#X obj 30 1311 obj.props;
#X text 200 1311 property extractor;
#X obj 30 1338 radio;
#X text 200 1338 float index to outlet values as radio switch;
#X obj 30 1365 window;
#X text 200 1365 returns window value by given window position;
#X obj 30 1392 xdac~;
#X text 200 1392 dac~ with channel ranges;
#X obj 30 1419 xfade2~;
#X text 200 1419 multi stereo-signal crossfade;
#X obj 30 1446 xfade~;
#X text 200 1446 multi signal crossfade;
#X obj 20 1473 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1514 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1525 chaos.gbman0;
#X text 200 1525 Gingerbreadman map chaotic generator;
#X obj 30 1552 chaos.gbman0~;
#X text 200 1552 Gingerbreadman map chaotic generator;
#X obj 30 1579 chaos.jong;
#X text 200 1579 Peter de Jong attractor;
#X obj 30 1606 chaos.logistic;
#X text 200 1606 Logistic map chaotic generator;
#X obj 30 1633 chaos.std0;
#X text 200 1633 Standard map chaotic generator;
#X obj 30 1660 chaos.std0~;
#X text 200 1660 Standard map chaotic generator;
#X obj 20 1687 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1728 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1739 array.p2s;
#X text 200 1739 convert array phase [0\..1] to sample position;
#X obj 30 1766 array.s2p;
#X text 200 1766 convert array sample position to relative phase position
[0\..1];
#X obj 30 1806 conv.amp2dbfs;
#X text 200 1806 convert from amplitude to decibel full scale;
#X obj 30 1833 conv.amp2dbfs~;
#X text 200 1833 convert from amplitude to decibel full scale;
#X obj 30 1860 conv.bpm2hz;
#X text 200 1860 converts BPM to frequency in herz;
#X obj 30 1887 conv.bpm2ms;
#X text 200 1887 convert frequency in BPM to period in milliseconds;
#X obj 30 1914 conv.bpm2sec;
#X text 200 1914 convert frequency in BPM to period in seconds;
#X obj 30 1941 conv.car2pol;
#X text 200 1941 convert cartesian coords to polar;
#X obj 30 1968 conv.cc2amp;
#X text 200 1968 convert from MIDI Control Change range;
#X obj 30 1995 conv.dbfs2amp;
#X text 200 1995 convert decibel full scale to amplitude;
#X obj 30 2022 conv.lin2curve;
#X text 200 2022 map linear to exponential range with 0 allowed.;
#X obj 30 2049 conv.lin2exp;
#X text 200 2049 maps linear range to exponential range;
#X obj 30 2076 conv.lin2lin;
#X text 200 2076 convert from one linear range to another;
#X obj 30 2103 conv.lin2lin~;
#X text 200 2103 convert from one linear range to another for signals;
#X obj 30 2130 conv.list2props;
#X text 200 2130 converts list to series of property messages;
#X obj 30 2157 conv.midi2freq;
#X text 200 2157 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2197 conv.ms2samp;
#X text 200 2197 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2237 conv.ms2samp~;
#X text 200 2237 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2277 conv.phase2rad;
#X text 200 2277 convert phase value [0-1] to radians [0-2π];
#X obj 30 2304 conv.phase2rad~;
#X text 200 2304 convert phase value [0-1] to radians [0-2π];
#X obj 30 2331 conv.pitch2midi;
#X text 200 2331 converts symbol pitch name to MIDI note number;
#X obj 30 2358 conv.pol2car;
#X text 200 2358 convert from polar coordinates to cartesian;
#X obj 30 2385 conv.rad2phase;
#X text 200 2385 convert radians value to phase;
#X obj 30 2412 conv.rad2phase~;
#X text 200 2412 convert radians value to phase;
#X obj 30 2439 conv.samp2ms;
#X text 200 2439 convert samples to time according to samplerate;
#X obj 30 2466 conv.samp2ms~;
#X text 200 2466 convert samples to milliseconds according to samplerate;
#X obj 30 2493 conv.samp2sec;
#X text 200 2493 convert samples to time according to samplerate;
#X obj 30 2520 conv.sec2samp;
#X text 200 2520 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2560 conv.sec2str;
#X text 200 2560 converts float time in seconds to formated symbol
(or string);
#X obj 30 2587 conv.str2sec;
#X text 200 2587 converts formatted time to float value in seconds;
#X obj 20 2614 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2655 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2666 data.dict;
#X text 200 2666 dictionary container: store values by key;
#X obj 30 2693 data.fifo;
#X text 200 2693 First-In-First-Out (FIFO) queue data container;
#X obj 30 2720 data.float;
#X text 200 2720 robust float object;
#X obj 30 2747 data.int;
#X text 200 2747 robust int object;
#X obj 30 2774 data.list;
#X text 200 2774 list container;
#X obj 30 2801 data.mlist;
#X text 200 2801 multidimensional list container;
#X obj 30 2828 data.set;
#X text 200 2828 container that store unique elements;
#X obj 30 2855 data.set2list;
#X text 200 2855 converts set to list;
#X obj 30 2882 dict.contains;
#X text 200 2882 predicate to check if dict contains a keys;
#X obj 30 2909 dict.each;
#X text 200 2909 map each value in dict;
#X obj 30 2936 dict.from_list;
#X text 200 2936 creates dictionary from list;
#X obj 30 2963 dict.get;
#X text 200 2963 output dict values;
#X obj 30 2990 dict.keys;
#X text 200 2990 get list of dict keys;
#X obj 30 3017 dict.pass;
#X text 200 3017 passes specified keys in dict;
#X obj 30 3044 dict.reject;
#X text 200 3044 rejects specified keys from dict;
#X obj 30 3071 dict.size;
#X text 200 3071 dictionary size;
#X obj 30 3098 dict.to_list;
#X text 200 3098 converts dictionary to plain list;
#X obj 30 3125 dict.values;
#X text 200 3125 dictionary values as mlist;
#X obj 30 3152 mlist.flatten;
#X text 200 3152 flatten nested mlist;
#X obj 30 3179 set.contains;
#X text 200 3179 check if specified element is in set;
#X obj 30 3206 set.diff;
#X text 200 3206 difference between two sets;
#X obj 30 3233 set.equal;
#X text 200 3233 checks if two sets are equal (contains same elements);
#X obj 30 3260 set.intersect;
#X text 200 3260 output intersection of given sets;
#X obj 30 3287 set.size;
#X text 200 3287 get number of elements in set;
#X obj 30 3314 set.symdiff;
#X text 200 3314 symmetric difference between two sets;
#X obj 30 3341 set.union;
#X text 200 3341 output union of given sets;
#X obj 20 3368 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3409 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3420 dyn.comp2~;
#X text 200 3420 stereo dynamic range compressor;
#X obj 30 3447 dyn.comp~;
#X text 200 3447 mono dynamic range compressors;
#X obj 30 3474 dyn.gate2~;
#X text 200 3474 stereo signal gate;
#X obj 30 3501 dyn.gate~;
#X text 200 3501 mono signal gate;
#X obj 30 3528 dyn.limit2~;
#X text 200 3528 stereo 1176LN Peak Limiter;
#X obj 30 3555 dyn.limit~;
#X text 200 3555 mono 1176LN Peak Limiter;
#X obj 30 3582 dyn.softclip~;
#X text 200 3582 soft signal clip;
#X obj 20 3609 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3650 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3661 env.adsr~;
#X text 200 3661 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3688 env.ar~;
#X text 200 3688 Attack/Release envelope generator;
#X obj 30 3715 env.asr~;
#X text 200 3715 Attack/Sustain/Release envelope generator;
#X obj 30 3742 env.concat;
#X text 200 3742 Envelope concatenation;
#X obj 30 3769 env.follow~;
#X text 200 3769 Envelope follower with independent attack and release
times;
#X obj 30 3796 env.mix;
#X text 200 3796 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3836 env.smooth~;
#X text 200 3836 An envelope with an exponential attack and release;
#X obj 30 3863 env.tscale;
#X text 200 3863 Envelope time-scale;
#X obj 30 3890 env.tshift;
#X text 200 3890 Envelope time-shift (horizontal);
#X obj 30 3917 env.vscale;
#X text 200 3917 Envelope value-scale;
#X obj 30 3944 env2array;
#X text 200 3944 Renders envelope to specified array;
#X obj 30 3971 env2vline;
#X text 200 3971 Converts envelope to bunch of vline messages;
#X obj 30 3998 envelope;
#X text 200 3998 Envelope data type;
#X obj 30 4025 vline2env;
#X text 200 4025 Converts vline messages to env;
#X obj 20 4052 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4093 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4104 expand_env;
#X text 200 4104 Substitute environment variables in data stream;
#X obj 30 4131 flow.change;
#X text 200 4131 rejects redundant input values;
#X obj 30 4158 flow.count;
#X text 200 4158 control flow event counter;
#X obj 30 4185 flow.delay;
#X text 200 4185 enhanced version on vanilla delay object;
#X obj 30 4212 flow.demultiplex;
#X text 200 4212 control flow demultiplexer;
#X obj 30 4239 flow.demultiplex2~;
#X text 200 4239 audio stream stereo demultiplexer;
#X obj 30 4266 flow.demultiplex~;
#X text 200 4266 audio stream demultiplexer;
#X obj 30 4293 flow.dup;
#X text 200 4293 message duplicator;
#X obj 30 4320 flow.gate;
#X text 200 4320 control flow gate. [spigot] analog;
#X obj 30 4347 flow.greater;
#X text 200 4347 numeric stream router;
#X obj 30 4374 flow.greater_eq;
#X text 200 4374 numeric stream router;
#X obj 30 4401 flow.group;
#X text 200 4401 group input atoms in list of specified size;
#X obj 30 4428 flow.interval;
#X text 200 4428 measure time between flow events;
#X obj 30 4455 flow.less;
#X text 200 4455 numeric stream router \, like many [moses];
#X obj 30 4482 flow.less_eq;
#X text 200 4482 numeric stream router \, like many [moses];
#X obj 30 4509 flow.match;
#X text 200 4509 route data flow by regexp match;
#X obj 30 4536 flow.mem;
#X text 200 4536 store data flow in memory;
#X obj 30 4563 flow.multiplex;
#X text 200 4563 control flow multiplexer;
#X obj 30 4590 flow.multiplex2~;
#X text 200 4590 audio stream stereo multiplexer;
#X obj 30 4617 flow.multiplex~;
#X text 200 4617 audio stream multiplexer;
#X obj 30 4644 flow.once;
#X text 200 4644 one message pass thru;
#X obj 30 4671 flow.pack;
#X text 200 4671 flow pack;
#X obj 30 4698 flow.pass;
#X text 200 4698 pass specified values;
#X obj 30 4725 flow.pass_if;
#X text 200 4725 pass values that accepted by predicate object;
#X obj 30 4752 flow.pipe;
#X text 200 4752 enhanced version on vanilla pipe object;
#X obj 30 4779 flow.reject;
#X text 200 4779 reject specified values;
#X obj 30 4806 flow.reject_if;
#X text 200 4806 reject values by predicate;
#X obj 30 4833 flow.ring;
#X text 200 4833 dataflow ring buffer;
#X obj 30 4860 flow.route;
#X text 200 4860 advanced message router;
#X obj 30 4887 flow.space;
#X text 200 4887 space in time messages received at the same logical
time;
#X obj 30 4914 flow.speedlim;
#X text 200 4914 control stream speed limiter;
#X obj 30 4941 flow.split;
#X text 200 4941 split data flow by external side-chain predicate;
#X obj 30 4968 flow.stack;
#X text 200 4968 any message stack;
#X obj 30 4995 flow.sync;
#X text 200 4995 bus with only hot inlets;
#X obj 30 5022 flow.sync_pack;
#X text 200 5022 flow pack with all hot inlets;
#X obj 30 5049 flow.tee~;
#X text 200 5049 separate audio and control streams;
#X obj 30 5076 replace;
#X text 200 5076 Replace atoms in data stream;
#X obj 20 5103 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5144 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5155 flt.biquad~;
#X text 200 5155 second order IIR filter.;
#X obj 30 5182 flt.bpf12~;
#X text 200 5182 Two pole band-pass butterworth filter;
#X obj 30 5209 flt.bpf24~;
#X text 200 5209 Four pole band-pass butterworth filter;
#X obj 30 5236 flt.c_bpf~;
#X text 200 5236 BPF coefficient calculator for biquad filter;
#X obj 30 5263 flt.c_highshelf~;
#X text 200 5263 Highshelf filter coefficient calculator for biquad;
#X obj 30 5290 flt.c_hpf~;
#X text 200 5290 HPF coefficient calculator for biquad filter;
#X obj 30 5317 flt.c_lowshelf~;
#X text 200 5317 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5344 flt.c_lpf~;
#X text 200 5344 LPF coefficient calculator for biquad filter;
#X obj 30 5371 flt.c_notch~;
#X text 200 5371 Band-reject coefficient calculator for biquad filter;
#X obj 30 5398 flt.c_peak~;
#X text 200 5398 Peaking equalizer calculator for biquad;
#X obj 30 5425 flt.dcblock2~;
#X text 200 5425 stereo DC blocker;
#X obj 30 5452 flt.dcblock~;
#X text 200 5452 mono DC blocker;
#X obj 30 5479 flt.eq10~;
#X text 200 5479 graphic 10 band equalizer;
#X obj 30 5506 flt.eq_peak_cq~;
#X text 200 5506 constant-Q second order peaking equalizer section;
#X obj 30 5533 flt.eq_peak~;
#X text 200 5533 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5588 flt.freqz~;
#X text 200 5588 compute the frequency response of a digital filter;
#X obj 30 5615 flt.highshelf~;
#X text 200 5615 gain boost|cut above some frequency;
#X obj 30 5642 flt.hpf12~;
#X text 200 5642 High-pass second order Butterworth filter;
#X obj 30 5669 flt.hpf24~;
#X text 200 5669 High-pass fourth order Butterworth filter;
#X obj 30 5696 flt.lowshelf~;
#X text 200 5696 gain boost|cut below some frequency;
#X obj 30 5723 flt.lpf12~;
#X text 200 5723 Low-pass second order Butterworth filter;
#X obj 30 5750 flt.lpf24~;
#X text 200 5750 Low-pass fourth order Butterworth filter;
#X obj 30 5777 flt.median;
#X text 200 5777 Median control flow filter;
#X obj 30 5804 flt.moog_vcf~;
#X text 200 5804 Moog Voltage Controlled Filter;
#X obj 30 5831 flt.notch~;
#X text 200 5831 band-rejection filter;
#X obj 30 5858 flt.resonbp~;
#X text 200 5858 Simple resonant bandpass filter;
#X obj 20 5885 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5926 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5937 fx.bitdown~;
#X text 200 5937 bit downer and downsampler effect;
#X obj 30 5964 fx.chorus~;
#X text 200 5964 Chorus effect;
#X obj 30 5991 fx.distortion1~;
#X text 200 5991 distortion #1 from Guitarix effects set;
#X obj 30 6018 fx.distortion2~;
#X text 200 6018 distortion #2 from Guitarix effects set;
#X obj 30 6045 fx.distortion3~;
#X text 200 6045 simple distortion #3 from Guitarix effects set;
#X obj 30 6072 fx.distortion~;
#X text 200 6072 cubic nonlinearity distortion;
#X obj 30 6099 fx.drive~;
#X text 200 6099 Guitarix drive effect;
#X obj 30 6126 fx.drone_box~;
#X text 200 6126 mono sympathetic resonance generator;
#X obj 30 6153 fx.echo~;
#X text 200 6153 simple echo effect;
#X obj 30 6180 fx.flanger~;
#X text 200 6180 mono flanging effect;
#X obj 30 6207 fx.freeverb2~;
#X text 200 6207 freeverb2 - stereo version of freeverb;
#X obj 30 6234 fx.freeverb~;
#X text 200 6234 freeverb - common used open-source reverb;
#X obj 30 6261 fx.freqshift~;
#X text 200 6261 frequency shifter or single-sideband ring modulation;
#X obj 30 6288 fx.granulator~;
#X text 200 6288 simple input stream granulator;
#X obj 30 6315 fx.greyhole~;
#X text 200 6315 A complex echo-like effect;
#X obj 30 6342 fx.looper~;
#X text 200 6342 One track looper;
#X obj 30 6369 fx.pitchshift~;
#X text 200 6369 simple pitch shifter based on 2 delay lines;
#X obj 30 6396 fx.sdelay~;
#X text 200 6396 smooth delay with a feedback control;
#X obj 30 6423 fx.vocoder~;
#X text 200 6423 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6463 fx.wahwah~;
#X text 200 6463 digitized CryBaby wah pedal;
#X obj 30 6490 fx.zita_rev1~;
#X text 200 6490 Zita stereo reverb;
#X obj 20 6517 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6558 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6569 global.dict;
#X text 200 6569 global named dict object;
#X obj 30 6596 global.float;
#X text 200 6596 global named float object;
#X obj 30 6623 global.int;
#X text 200 6623 global named integer object;
#X obj 30 6650 global.list;
#X text 200 6650 global named list object;
#X obj 30 6677 global.mlist;
#X text 200 6677 global named mlist object;
#X obj 30 6704 global.set;
#X text 200 6704 global named set object;
#X obj 20 6731 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6772 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6783 hw.apple_smc;
#X text 200 6783 query the system management control in Apples;
#X obj 30 6810 hw.apple_sms;
#X text 200 6810 query the sudden motion sensor in Apples;
#X obj 30 6837 hw.arduino;
#X text 200 6837 Arduino device;
#X obj 30 6864 hw.cpu_temp;
#X text 200 6864 get CPU temperature;
#X obj 30 6891 hw.display;
#X text 200 6891 get/set display properties;
#X obj 30 6918 hw.kbd_light;
#X text 200 6918 Get/set keyboard light on some devices;
#X obj 20 6945 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6986 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6997 lfo.+pulse~;
#X text 200 6997 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7024 lfo.+saw~;
#X text 200 7024 Positive unit-amplitude low frequency saw wave;
#X obj 30 7051 lfo.+square~;
#X text 200 7051 Positive low frequency square wave;
#X obj 30 7078 lfo.+tri~;
#X text 200 7078 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7105 lfo.impulse~;
#X text 200 7105 Unit-amplitude low-frequency impulse train;
#X obj 30 7132 lfo.pulse~;
#X text 200 7132 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7159 lfo.saw~;
#X text 200 7159 Full-range unit-amplitude low frequency saw;
#X obj 30 7186 lfo.square~;
#X text 200 7186 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7213 lfo.tri~;
#X text 200 7213 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7240 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7281 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7292 list.^at;
#X text 200 7292 on input index(es) outputs list element(s);
#X obj 30 7319 list.^contains;
#X text 200 7319 on input atom or list checks if specified list contains
it;
#X obj 30 7346 list.^search;
#X text 200 7346 on input atom returns it index in list;
#X obj 30 7373 list.all_of;
#X text 200 7373 checks if all list atoms accepted by predicate;
#X obj 30 7400 list.any_of;
#X text 200 7400 checks if at least one list element is accepted by
predicate;
#X obj 30 7427 list.append;
#X text 200 7427 append atom or list to the end of input list;
#X obj 30 7454 list.apply_to;
#X text 200 7454 modifies list value at specified position \, filtering
it via external object;
#X obj 30 7494 list.at;
#X text 200 7494 outputs list element(s) at specified index(es);
#X obj 30 7521 list.choice;
#X text 200 7521 outputs random element from list;
#X obj 30 7548 list.contains;
#X text 200 7548 checks if input list contains specified atoms;
#X obj 30 7575 list.count;
#X text 200 7575 output the number of items that equal to specified
value;
#X obj 30 7602 list.count_if;
#X text 200 7602 output the number of items that satisfy to external
predicate;
#X obj 30 7629 list.delta;
#X text 200 7629 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7669 list.distribution;
#X text 200 7669 list value distribution;
#X obj 30 7696 list.do;
#X text 200 7696 iterate and modify list contents via side-chain;
#X obj 30 7723 list.each;
#X text 200 7723 maps each list value via external side-chain;
#X obj 30 7750 list.enumerate;
#X text 200 7750 enumerates input list;
#X obj 30 7777 list.equal;
#X text 200 7777 checks if given lists are equal;
#X obj 30 7804 list.first;
#X text 200 7804 returns first list element;
#X obj 30 7831 list.gen;
#X text 200 7831 generates list of specified length via external generator;
#X obj 30 7858 list.histogram;
#X text 200 7858 outputs distribution histogram;
#X obj 30 7885 list.insert;
#X text 200 7885 insert atom or list to the specified position of input
list;
#X obj 30 7912 list.integrator;
#X text 200 7912 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7952 list.last;
#X text 200 7952 output last list element;
#X obj 30 7979 list.length;
#X text 200 7979 output the number of atoms in the list;
#X obj 30 8006 list.max;
#X text 200 8006 output largest element in the list;
#X obj 30 8033 list.mean;
#X text 200 8033 calculates average of list of floats;
#X obj 30 8060 list.min;
#X text 200 8060 returns smallest element in the list;
#X obj 30 8087 list.none_of;
#X text 200 8087 checks if none of list atoms is accepted by predicate;
#X obj 30 8114 list.normalize;
#X text 200 8114 normalizes float list values to get their sum = 1.0;
#X obj 30 8141 list.pass_if;
#X text 200 8141 leave only elements accepted by predicate;
#X obj 30 8168 list.prepend;
#X text 200 8168 prepend atom or list before input list;
#X obj 30 8195 list.product;
#X text 200 8195 calculates product of floats in list;
#X obj 30 8222 list.range;
#X text 200 8222 output list smallest and largest value;
#X obj 30 8249 list.reduce;
#X text 200 8249 apply function of two arguments cumulatively to the
list;
#X obj 30 8276 list.remove;
#X text 200 8276 remove list element(s) at specified positions;
#X obj 30 8303 list.remove_if;
#X text 200 8303 remove elements by predicate;
#X obj 30 8330 list.repack;
#X text 200 8330 repack list to specified size;
#X obj 30 8357 list.repeat;
#X text 200 8357 output new list by repeating input list specified
times;
#X obj 30 8384 list.resample;
#X text 200 8384 resample list with specified ratio;
#X obj 30 8411 list.resize;
#X text 200 8411 changes list size;
#X obj 30 8438 list.reverse;
#X text 200 8438 reverses the order of the elements in the list;
#X obj 30 8465 list.rldecode;
#X text 200 8465 Run-length list decoder (RLE);
#X obj 30 8492 list.rlencode;
#X text 200 8492 RLE (run-length encoding) for lists;
#X obj 30 8519 list.rotate;
#X text 200 8519 rotates list;
#X obj 30 8546 list.route;
#X text 200 8546 acts like [route] but for lists;
#X obj 30 8573 list.search;
#X text 200 8573 search specified items in input list;
#X obj 30 8600 list.separate;
#X text 200 8600 sends list elements one by one separately;
#X obj 30 8627 list.seq;
#X text 200 8627 numeric sequence list generator;
#X obj 30 8654 list.set;
#X text 200 8654 set list value at specified position;
#X obj 30 8681 list.shift;
#X text 200 8681 shifts the contents of the list with linear interpolation;
#X obj 30 8708 list.shuffle;
#X text 200 8708 randomly rearranges elements in list;
#X obj 30 8735 list.slice;
#X text 200 8735 extract sublist;
#X obj 30 8762 list.sort;
#X text 200 8762 sorts list values by ascending order;
#X obj 30 8789 list.sort_with;
#X text 200 8789 sort list with user defined side-chain;
#X obj 30 8816 list.split;
#X text 200 8816 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 8856 list.stretch;
#X text 200 8856 stretches list - changes its size with linear interpolation;
#X obj 30 8883 list.sum;
#X text 200 8883 calculates sum of floats in list;
#X obj 30 8910 list.unique;
#X text 200 8910 removes duplicates from input list;
#X obj 30 8937 list.unpack;
#X text 200 8937 unpack list elements to separate outlets;
#X obj 30 8964 list.unzip;
#X text 200 8964 splits list to N lists \, each to separate output;
#X obj 30 8991 list.walk;
#X text 200 8991 Walks thru the list;
#X obj 30 9018 list.zip;
#X text 200 9018 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9073 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9114 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9125 live.capture~;
#X text 200 9125 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9165 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9206 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9217 local.dict;
#X text 200 9217 local named dict object;
#X obj 30 9244 local.float;
#X text 200 9244 canvas-scoped named float variable;
#X obj 30 9271 local.int;
#X text 200 9271 canvas-scoped named integer variable;
#X obj 30 9298 local.list;
#X text 200 9298 local named list object;
#X obj 30 9325 local.mlist;
#X text 200 9325 local named mlist object;
#X obj 30 9352 local.set;
#X text 200 9352 local named set object;
#X obj 20 9379 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9420 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9431 math.abs;
#X text 200 9431 absolute value function;
#X obj 30 9458 math.abs~;
#X text 200 9458 absolute value function for signals;
#X obj 30 9485 math.acos;
#X text 200 9485 arc cosine function;
#X obj 30 9512 math.acosh;
#X text 200 9512 inverse hyperbolic cosine function;
#X obj 30 9539 math.acosh~;
#X text 200 9539 hyperbolic arc cosine for signals;
#X obj 30 9566 math.acos~;
#X text 200 9566 arc cosine function for signals;
#X obj 30 9593 math.and;
#X text 200 9593 operation AND for multiple arguments;
#X obj 30 9620 math.approx;
#X text 200 9620 check if input value approximately equal to pattern;
#X obj 30 9647 math.asin;
#X text 200 9647 arc sine function;
#X obj 30 9674 math.asinh;
#X text 200 9674 inverse hyperbolic sine function;
#X obj 30 9701 math.asinh~;
#X text 200 9701 hyperbolic arc sine for signals;
#X obj 30 9728 math.asin~;
#X text 200 9728 arc sine for signals;
#X obj 30 9755 math.atan;
#X text 200 9755 arc tangent function;
#X obj 30 9782 math.atanh;
#X text 200 9782 inverse hyperbolic tangent function;
#X obj 30 9809 math.atanh~;
#X text 200 9809 hyperbolic arc tangent for signals;
#X obj 30 9836 math.atan~;
#X text 200 9836 arc tangent for signals;
#X obj 30 9863 math.cabs~;
#X text 200 9863 magnitude of a complex signals;
#X obj 30 9890 math.carg~;
#X text 200 9890 phase angle of a complex signals;
#X obj 30 9917 math.cbrt;
#X text 200 9917 cube root function;
#X obj 30 9944 math.cbrt~;
#X text 200 9944 cube root function for signals;
#X obj 30 9971 math.cdiv~;
#X text 200 9971 division of complex signals;
#X obj 30 9998 math.ceil;
#X text 200 9998 round to smallest integral value not less than input
value;
#X obj 30 10025 math.ceil~;
#X text 200 10025 round to smallest integral value not less than input
value;
#X obj 30 10052 math.cexp~;
#X text 200 10052 exponent of a complex signals;
#X obj 30 10079 math.cmul~;
#X text 200 10079 multiplication of complex signals;
#X obj 30 10106 math.cos;
#X text 200 10106 cosine function;
#X obj 30 10133 math.cosh;
#X text 200 10133 hyperbolic cosine function;
#X obj 30 10160 math.cosh~;
#X text 200 10160 hyperbolic cosine for signals;
#X obj 30 10187 math.cos~;
#X text 200 10187 cosine function;
#X obj 30 10214 math.div;
#X text 200 10214 division (on lists too);
#X obj 30 10241 math.e;
#X text 200 10241 mathematical constant \, base of the natural logarithm;
#X obj 30 10268 math.erf;
#X text 200 10268 error function;
#X obj 30 10295 math.erf~;
#X text 200 10295 error function for signals;
#X obj 30 10322 math.exp;
#X text 200 10322 exponential functions;
#X obj 30 10349 math.exp2;
#X text 200 10349 exponential functions;
#X obj 30 10376 math.exp2~;
#X text 200 10376 base-2 exponential for signal;
#X obj 30 10403 math.expr;
#X text 200 10403 dynamic [expr];
#X obj 30 10430 math.exp~;
#X text 200 10430 base-e exponential for signal;
#X obj 30 10457 math.floor;
#X text 200 10457 round to largest integral value not greater than
x;
#X obj 30 10484 math.floor~;
#X text 200 10484 round to largest integral value not greater than
x;
#X obj 30 10511 math.gamma;
#X text 200 10511 gamma function;
#X obj 30 10538 math.gamma~;
#X text 200 10538 gamma function for floating point signals;
#X obj 30 10565 math.gcd;
#X text 200 10565 calculate greatest common divisor;
#X obj 30 10592 math.inf;
#X text 200 10592 infinity value that cannot be represented accurately;
#X obj 30 10619 math.inf~;
#X text 200 10619 inifinity signal generator;
#X obj 30 10646 math.lcm;
#X text 200 10646 calculate least common multiple;
#X obj 30 10673 math.lgamma;
#X text 200 10673 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10700 math.lgamma~;
#X text 200 10700 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 10740 math.log;
#X text 200 10740 natural logarithm;
#X obj 30 10767 math.log10;
#X text 200 10767 logarithm functions;
#X obj 30 10794 math.log10~;
#X text 200 10794 natural logarithm;
#X obj 30 10821 math.log2;
#X text 200 10821 logarithm functions;
#X obj 30 10848 math.log2~;
#X text 200 10848 base-2 logarithm;
#X obj 30 10875 math.log~;
#X text 200 10875 natural logarithm;
#X obj 30 10902 math.mul;
#X text 200 10902 multiplication (on lists too);
#X obj 30 10929 math.nan;
#X text 200 10929 Not a Number \, unrepresentable value;
#X obj 30 10956 math.nan~;
#X text 200 10956 signal NaN;
#X obj 30 10983 math.neg;
#X text 200 10983 negate function;
#X obj 30 11010 math.or;
#X text 200 11010 operation OR for multiple arguments;
#X obj 30 11037 math.pi;
#X text 200 11037 mathematical constant;
#X obj 30 11064 math.pi~;
#X text 200 11064 mathematical constant;
#X obj 30 11091 math.polyeval;
#X text 200 11091 evaluates the polynomial described by the coefficients
list;
#X obj 30 11118 math.reciprocal;
#X text 200 11118 calculate reciprocal number;
#X obj 30 11145 math.reciprocal~;
#X text 200 11145 calculate reciprocal number for signals;
#X obj 30 11172 math.round;
#X text 200 11172 round to integral value \, regardless of rounding
direction;
#X obj 30 11199 math.round~;
#X text 200 11199 signal round;
#X obj 30 11226 math.sign;
#X text 200 11226 sign function;
#X obj 30 11253 math.sin;
#X text 200 11253 sine function;
#X obj 30 11280 math.sinh;
#X text 200 11280 hyperbolic sine function;
#X obj 30 11307 math.sinh~;
#X text 200 11307 hyperbolic sine for signals;
#X obj 30 11334 math.sin~;
#X text 200 11334 sine function;
#X obj 30 11361 math.sqrt;
#X text 200 11361 square root function;
#X obj 30 11388 math.sqrt~;
#X text 200 11388 square root for signal;
#X obj 30 11415 math.squared;
#X text 200 11415 value square;
#X obj 30 11442 math.squared~;
#X text 200 11442 signal value square;
#X obj 30 11469 math.sync_add;
#X text 200 11469 sync addition;
#X obj 30 11496 math.sync_and;
#X text 200 11496 sync logical AND operation;
#X obj 30 11523 math.sync_div;
#X text 200 11523 sync division;
#X obj 30 11550 math.sync_eq;
#X text 200 11550 sync equal numbers check;
#X obj 30 11577 math.sync_ge;
#X text 200 11577 sync greater equal numbers compare;
#X obj 30 11604 math.sync_gt;
#X text 200 11604 sync greater then numbers compare;
#X obj 30 11631 math.sync_le;
#X text 200 11631 sync less equal numbers compare;
#X obj 30 11658 math.sync_lt;
#X text 200 11658 sync less then numbers compare;
#X obj 30 11685 math.sync_mod;
#X text 200 11685 sync remainder of modulo division (float or integer);
#X obj 30 11712 math.sync_mul;
#X text 200 11712 sync multiplication;
#X obj 30 11739 math.sync_ne;
#X text 200 11739 sync numbers for not equality;
#X obj 30 11766 math.sync_or;
#X text 200 11766 sync logical OR operation;
#X obj 30 11793 math.sync_sub;
#X text 200 11793 sync subtraction;
#X obj 30 11820 math.sync_xor;
#X text 200 11820 sync logical XOR operation;
#X obj 30 11847 math.tan;
#X text 200 11847 tangent function;
#X obj 30 11874 math.tanh;
#X text 200 11874 hyperbolic tangent function;
#X obj 30 11901 math.tanh~;
#X text 200 11901 hyperbolic tangent for signals;
#X obj 30 11928 math.tan~;
#X text 200 11928 tangent function;
#X obj 30 11955 math.trunc;
#X text 200 11955 truncate to integer value;
#X obj 30 11982 math.trunc~;
#X text 200 11982 truncate to integer value;
#X obj 20 12009 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12050 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12061 midi.ctl2str;
#X text 200 12061 convert Standard MIDI Controllers number to name;
#X obj 30 12088 midi.event2ctl;
#X text 200 12088 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12115 midi.event2note;
#X text 200 12115 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12142 midi.event2prg;
#X text 200 12142 convert MidiEvent message to midi program change
value;
#X obj 30 12169 midi.file;
#X text 200 12169 standard midi file SMF reader and writer;
#X obj 30 12196 midi.key2str;
#X text 200 12196 convert key number to SPN name according to tonality;
#X obj 30 12223 midi.prg2str;
#X text 200 12223 convert GM Instrument number to name (string or symbol);
#X obj 30 12250 midi.track;
#X text 200 12250 extract track from MidiFile;
#X obj 20 12277 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12318 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12329 click~;
#X text 200 12329 Output single impulse on bang;
#X obj 30 12356 fluid~;
#X text 200 12356 FluidSynth SoundFont 2 player;
#X obj 30 12383 modplug~;
#X text 200 12383 MOD file player (using libmodplug);
#X obj 30 12410 speech.flite;
#X text 200 12410 render speech to array;
#X obj 20 12437 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 12478 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12489 msg;
#X text 200 12489 message constructor;
#X obj 30 12516 msg.after;
#X text 200 12516 send specified message after incoming message;
#X obj 30 12543 msg.onload;
#X text 200 12543 send message when patch loads;
#X obj 20 12570 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12611 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12622 net.host2ip;
#X text 200 12622 returns IP address by DNS name;
#X obj 20 12649 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 12690 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12701 noise.crackle~;
#X text 200 12701 sparse noise generator;
#X obj 30 12728 noise.lfreq0~;
#X text 200 12728 sampled/held noise (piecewise constant);
#X obj 30 12755 noise.lfreq~;
#X text 200 12755 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 12782 noise.pink~;
#X text 200 12782 Pink noise generator;
#X obj 30 12809 noise.white~;
#X text 200 12809 White noise generator;
#X obj 20 12836 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 12877 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12888 osc.blit~;
#X text 200 12888 Bandlimited impulse train oscillator;
#X obj 30 12915 osc.impulse~;
#X text 200 12915 Bandlimited impulse train generator;
#X obj 30 12942 osc.pulse~;
#X text 200 12942 Bandlimited pulse train oscillator;
#X obj 30 12969 osc.saw4~;
#X text 200 12969 Bandlimited sawtooth wave;
#X obj 30 12996 osc.saw~;
#X text 200 12996 Alias-free sawtooth wave;
#X obj 30 13023 osc.sinfb~;
#X text 200 13023 Sine oscilator with feedback;
#X obj 30 13050 osc.sin~;
#X text 200 13050 Sine wave oscillator;
#X obj 30 13077 osc.square~;
#X text 200 13077 Bandlimited square wave oscillator;
#X obj 30 13104 osc.tri~;
#X text 200 13104 Bandlimited triangle wave oscillator;
#X obj 20 13131 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 13172 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13183 canvas.current;
#X text 200 13183 verbose information about current canvas;
#X obj 30 13210 canvas.dir;
#X text 200 13210 current canvas directory;
#X obj 30 13237 canvas.name;
#X text 200 13237 current canvas name;
#X obj 30 13264 canvas.path;
#X text 200 13264 current canvas fullpath;
#X obj 30 13291 canvas.top;
#X text 200 13291 verbose information about top-level canvas;
#X obj 30 13318 patch.args;
#X text 200 13318 Get patch or subpatch arguments;
#X obj 30 13345 patch.deps;
#X text 200 13345 patch dependencies: used objects and abstractions;
#X obj 30 13372 patch.tree;
#X text 200 13372 patch tree;
#X obj 20 13399 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 13440 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13451 path.basename;
#X text 200 13451 outputs filename portion of pathname;
#X obj 30 13478 path.dirname;
#X text 200 13478 outputs directory portion of pathname;
#X obj 30 13505 path.exists;
#X text 200 13505 checks if given path exists;
#X obj 30 13532 path.is_dir;
#X text 200 13532 check if path is directory;
#X obj 30 13559 path.lsdir;
#X text 200 13559 list directory contents;
#X obj 20 13586 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13627 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13638 is_any;
#X text 200 13638 checks if input data has *any* type;
#X obj 30 13665 is_bang;
#X text 200 13665 checks if input data has *bang* type;
#X obj 30 13692 is_data;
#X text 200 13692 checks if input data has *data* type;
#X obj 30 13719 is_dict;
#X text 200 13719 checks if input data has *dict* type;
#X obj 30 13746 is_even;
#X text 200 13746 checks if input number is even;
#X obj 30 13773 is_file;
#X text 200 13773 checks if file exists and accessible;
#X obj 30 13800 is_float;
#X text 200 13800 checks if input data has *float* type;
#X obj 30 13827 is_list;
#X text 200 13827 checks if input data has *list* type;
#X obj 30 13854 is_odd;
#X text 200 13854 checks if input number is odd;
#X obj 30 13881 is_pointer;
#X text 200 13881 checks if input data has *pointer* type;
#X obj 30 13908 is_symbol;
#X text 200 13908 checks if input data has *symbol* type;
#X obj 20 13935 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 13976 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13987 preset.float;
#X text 200 13987 load/store float preset;
#X obj 30 14014 preset.list;
#X text 200 14014 load/store symbol preset;
#X obj 30 14041 preset.storage;
#X text 200 14041 preset storage control;
#X obj 30 14068 preset.symbol;
#X text 200 14068 load/store symbol preset;
#X obj 20 14095 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 14136 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14147 patch.props;
#X text 200 14147 patch properties manager;
#X obj 30 14174 prop;
#X text 200 14174 get/set named property value for subpatch or abstraction;
#X obj 30 14201 prop.declare;
#X text 200 14201 declare named property for subpatch or abstraction;
#X obj 30 14228 prop.get;
#X text 200 14228 get property from connected object/subpatch/abstraction;
#X obj 30 14255 prop.get~;
#X text 200 14255 Property extractor from sound stream;
#X obj 30 14282 prop.join;
#X text 200 14282 join property to main data flow;
#X obj 30 14309 prop.set;
#X text 200 14309 set object property;
#X obj 30 14336 prop.split;
#X text 200 14336 separate properties from dataflow;
#X obj 20 14363 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 14404 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14415 proto.firmata;
#X text 200 14415 Firmata Arduino protocol support;
#X obj 30 14442 proto.sp.alpaca;
#X text 200 14442 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 14469 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 14510 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14521 random.atom;
#X text 200 14521 weighted atom generation from specified list;
#X obj 30 14548 random.discrete;
#X text 200 14548 random weighted integers on interval [0 \, n);
#X obj 30 14575 random.float;
#X text 200 14575 uniform random float generator in specified range;
#X obj 30 14602 random.gauss;
#X text 200 14602 gaussian random distribution;
#X obj 30 14629 random.int;
#X text 200 14629 uniform random integer generator in specified range;
#X obj 30 14656 random.linear;
#X text 200 14656 random linear distribution;
#X obj 30 14683 random.pw_const;
#X text 200 14683 piecewise constant random distribution;
#X obj 30 14710 random.pw_lin;
#X text 200 14710 piecewise linear random distribution;
#X obj 20 14737 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 14778 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14789 snd.file;
#X text 200 14789 Sound file loader on steroids;
#X obj 20 14816 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 14857 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14868 hoa.2d.decoder~;
#X text 200 14868 hoa 2d decoder;
#X obj 30 14895 hoa.2d.encoder~;
#X text 200 14895 hoa 2d encoder;
#X obj 30 14922 hoa.2d.map~;
#X text 200 14922 a 2d ambisonic multisource spatializer;
#X obj 30 14949 hoa.2d.optim~;
#X text 200 14949 a 2D ambisonic optimization tool;
#X obj 30 14976 hoa.2d.projector~;
#X text 200 14976 a plane waves decomposer from circular harmonics
domain;
#X obj 30 15003 hoa.2d.recomposer~;
#X text 200 15003 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 15043 hoa.2d.rotate~;
#X text 200 15043 a 2D ambisonic sound field rotation;
#X obj 30 15070 hoa.2d.wider~;
#X text 200 15070 a 2d fractional ambisonic order simulator;
#X obj 30 15097 hoa.@process;
#X text 200 15097 process properties manager for hoa.process~;
#X obj 30 15124 hoa.in;
#X text 200 15124 message inlet for a patcher loaded by hoa.process~;
#X obj 30 15151 hoa.in~;
#X text 200 15151 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15178 hoa.out;
#X text 200 15178 message outlet for a patcher loaded by hoa.process~;
#X obj 30 15205 hoa.out~;
#X text 200 15205 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15232 hoa.process~;
#X text 200 15232 patcher loader for multichannel processing;
#X obj 30 15262 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 15259 a 2d ambisonic harmonic scope;
#X obj 30 15284 pan.cos~;
#X text 200 15284 two channel equal power sine/cosine panner;
#X obj 30 15311 pan.linsig~;
#X text 200 15311 two channel linear panner with signal control;
#X obj 30 15338 pan.lin~;
#X text 200 15338 two channel linear panner;
#X obj 30 15365 pan.spread~;
#X text 200 15365 spreads input channels across the stereo field;
#X obj 30 15392 pan.sqrt~;
#X text 200 15392 two channel equal power square root panner;
#X obj 30 15419 spat.pan4~;
#X text 200 15419 GMEM SPAT: 4-outputs spatializer;
#X obj 30 15446 spat.pan8~;
#X text 200 15446 GMEM SPAT: 8-outputs spatializer;
#X obj 20 15473 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 15514 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15525 string;
#X text 200 15525 string constructor;
#X obj 30 15552 string.contains;
#X text 200 15552 checks if string contains specified substring;
#X obj 30 15579 string.ends_with;
#X text 200 15579 checks if string ends with specified substring;
#X obj 30 15606 string.equal;
#X text 200 15606 check strings or symbols for equality;
#X obj 30 15633 string.format;
#X text 200 15633 formats string like printf.;
#X obj 30 15660 string.join;
#X text 200 15660 joins (concatenates) strings with separator;
#X obj 30 15687 string.length;
#X text 200 15687 number of characters in string (unicode supported);
#X obj 30 15714 string.match;
#X text 200 15714 check if string match regular expression;
#X obj 30 15741 string.remove;
#X text 200 15741 remove substring from input string;
#X obj 30 15768 string.replace;
#X text 200 15768 replace from one substring to another in input string;
#X obj 30 15795 string.split;
#X text 200 15795 split string by separator;
#X obj 30 15822 string.starts_with;
#X text 200 15822 checks if string starts with specified substring;
#X obj 30 15849 string.substr;
#X text 200 15849 extract substring from input string;
#X obj 30 15876 string2symbol;
#X text 200 15876 converts string to symbol;
#X obj 20 15903 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 15944 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15955 symbol.equal;
#X text 200 15955 check symbols for equality;
#X obj 30 15982 symbol.length;
#X text 200 15982 number of characters in symbol (unicode supported);
#X obj 30 16009 symbol.num_compare;
#X text 200 16009 numeric symbol compare;
#X obj 20 16036 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 16077 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16088 synth.bee3~;
#X text 200 16088 Hammond-oid organ FM synthesis instrument;
#X obj 30 16115 synth.birds~;
#X text 200 16115 bird singing generator;
#X obj 30 16142 synth.church_bell~;
#X text 200 16142 generic church bell modal model;
#X obj 30 16169 synth.dubdub~;
#X text 200 16169 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 16209 synth.eguitar~;
#X text 200 16209 simple electric guitar model with steel strings;
#X obj 30 16236 synth.fgrain~;
#X text 200 16236 file granulator from STK;
#X obj 30 16263 synth.ks~;
#X text 200 16263 Karplus-Strong string;
#X obj 30 16290 synth.marimba~;
#X text 200 16290 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 16330 synth.rhodey~;
#X text 200 16330 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 16357 synth.risset_arp~;
#X text 200 16357 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 16384 synth.risset_tone~;
#X text 200 16384 Jean Claude Risset's endless glissando;
#X obj 30 16411 synth.shakers~;
#X text 200 16411 various percussion sounds from STK library;
#X obj 30 16438 synth.wurley~;
#X text 200 16438 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 16465 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 16506 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16517 system.colorpanel;
#X text 200 16517 System color panel dialog popup;
#X obj 30 16544 system.cursor;
#X text 200 16544 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 16571 system.exec;
#X text 200 16571 run external command in separate process;
#X obj 30 16598 system.getenv;
#X text 200 16598 Get system environment variables;
#X obj 30 16625 system.hostname;
#X text 200 16625 outputs system hostname;
#X obj 30 16652 system.memsize;
#X text 200 16652 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 16692 system.memused;
#X text 200 16692 returns the process physical memory use - current
and peak;
#X obj 30 16719 system.screen_size;
#X text 200 16719 returns current screen size in pixels;
#X obj 20 16746 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 16787 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16798 tl.bang;
#X text 200 16798 Timeline bang (with possible delay);
#X obj 30 16828 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 16825 Timeline section;
#X obj 30 16850 tl.timeline;
#X text 200 16850 Timeline - event scheduler;
#X obj 30 16877 tl.toggle;
#X text 200 16877 Timeline bang;
#X obj 30 16904 tl.transport;
#X text 200 16904 Timeline transport control;
#X obj 20 16931 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 16972 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16986 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 16983 array view with cursor and selection;
#X obj 30 17011 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 17008 A bang... that's all;
#X obj 30 17036 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 17033 colorchooser widget;
#X obj 30 17061 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 17058 Display GUI object;
#X obj 30 17086 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 17083 GUI for turning DSP on/off;
#X obj 30 17111 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 17108 envelope editor widget;
#X obj 30 17136 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 17133 UI stereo gain control;
#X obj 30 17161 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 17158 UI gain control;
#X obj 30 17186 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 17183 simple icon with button capabilities;
#X obj 30 17211 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 17208 value increment/decrement;
#X obj 30 17236 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 17233 keyboard widget;
#X obj 30 17261 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 17258 knob widget;
#X obj 30 17286 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 17283 simple label widget;
#X obj 30 17311 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 17308 Hyperlink widget;
#X obj 30 17336 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 17333 The matrix of toggles has you.;
#X obj 30 17361 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 17358 Dropdown menu;
#X obj 30 17386 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 17383 Shows peak and rms signal level;
#X obj 30 17411 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 17408 filter mouse events from ui objects;
#X obj 30 17436 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 17433 routes mouse events from ui objects;
#X obj 30 17461 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 17458 counterpart of the vanilla [nbx];
#X obj 30 17486 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 17483 counterpart of the vanilla [nbx] for signal;
#X obj 30 17511 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 17508 signal plotter;
#X obj 30 17536 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 17533 2D slider in polar coordinates;
#X obj 30 17561 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 17558 Preset manager;
#X obj 30 17586 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 17583 counterpart of the vanilla radio toggle;
#X obj 30 17611 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 17608 range slider;
#X obj 30 17636 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 17633 Scope GUI object;
#X obj 30 17661 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 17658 counterpart of the vanilla slider;
#X obj 30 17686 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 17683 2D slider widget;
#X obj 30 17711 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 17708 Multiple slider widget;
#X obj 30 17736 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 17733 Spectroscope GUI object;
#X obj 30 17761 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 17758 displays a list of text buttons or text toggles;
#X obj 30 17786 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 17783 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 17808 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 17808 version: v0.9.0 \, license: GPL3;
#X obj 20 17836 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 17859 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 17823 msg 0;
#X obj 670 17858 switch~;
#X connect 1228 0 1229 0;