#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 20 238 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 279 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 290 array.bpm;
#X text 200 290 BPM calculator;
#X obj 30 317 array.copy;
#X text 200 317 copy samples from one array to another;
#X obj 30 344 array.do;
#X text 200 344 iterate and modify array content via side-chain;
#X obj 30 371 array.each;
#X text 200 371 process each array elements via side-chain;
#X obj 30 398 array.fill;
#X text 200 398 fill array with single value or pattern;
#X obj 30 425 array.hist;
#X text 200 425 calculates array histogram;
#X obj 30 452 array.mean;
#X text 200 452 calculates array arithmetic mean value;
#X obj 30 479 array.minmax;
#X text 200 479 find array min and max element value;
#X obj 30 506 array.play~;
#X text 200 506 array player with variable speed and amplitude;
#X obj 30 533 array.plot~;
#X text 200 533 plot signal on specified array;
#X obj 30 560 array.resample;
#X text 200 560 array resampler;
#X obj 30 587 array.rms;
#X text 200 587 calculates root mean square value for array;
#X obj 30 614 array.set;
#X text 200 614 set array content from list;
#X obj 30 641 array.stddev;
#X text 200 641 calculates standard deviation for array values;
#X obj 30 668 array.stretch;
#X text 200 668 array time-stretch \, pitch-shift or rate-change;
#X obj 30 695 array.sum;
#X text 200 695 calculates sum of array elements;
#X obj 30 722 array.sum2;
#X text 200 722 calculates sum of squares of array elements;
#X obj 30 749 array.variance;
#X text 200 749 calculates variance of array values;
#X obj 30 776 array.vplay;
#X text 200 776 simple array player for using with vline~;
#X obj 30 803 array.window;
#X text 200 803 fill array with window;
#X obj 30 830 plot.geomspace~;
#X text 200 830 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 870 plot.hist~;
#X text 200 870 calculate and output signal histogram;
#X obj 30 897 plot.linspace~;
#X text 200 897 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 937 plot.logspace~;
#X text 200 937 outputs numbers spaced evenly on a log scale;
#X obj 30 964 plot.response~;
#X text 200 964 output amp/phase freq response to impulse;
#X obj 20 991 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 1032 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1043 ceammc.search;
#X text 200 1043 ceammc library search object;
#X obj 30 1073 ui.link @title [function] @url function-help.pd;
#X text 200 1070 named function;
#X obj 30 1095 function.call;
#X text 200 1095 call named function;
#X obj 30 1122 gain~;
#X text 200 1122 multislot signal gain;
#X obj 30 1149 matrix~;
#X text 200 1149 signal routing matrix;
#X obj 30 1176 metro.pattern;
#X text 200 1176 metro with rhythmic patterns;
#X obj 30 1203 metro.random;
#X text 200 1203 metro random bang with specified range;
#X obj 30 1230 metro.seq;
#X text 200 1230 metro sequencer;
#X obj 30 1257 mix~;
#X text 200 1257 multislot signal mixer;
#X obj 30 1284 nsig~;
#X text 200 1284 Mulitchannel converter from control to audio rate;
#X obj 30 1311 obj.props;
#X text 200 1311 property extractor;
#X obj 30 1338 radio;
#X text 200 1338 float index to outlet values as radio switch;
#X obj 30 1365 window;
#X text 200 1365 returns window value by given window position;
#X obj 30 1392 xdac~;
#X text 200 1392 dac~ with channel ranges;
#X obj 30 1419 xfade2~;
#X text 200 1419 multi stereo-signal crossfade;
#X obj 30 1446 xfade~;
#X text 200 1446 multi signal crossfade;
#X obj 20 1473 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1514 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1525 chaos.gbman0;
#X text 200 1525 Gingerbreadman map chaotic generator;
#X obj 30 1552 chaos.gbman0~;
#X text 200 1552 Gingerbreadman map chaotic generator;
#X obj 30 1579 chaos.jong;
#X text 200 1579 Peter de Jong attractor;
#X obj 30 1606 chaos.logistic;
#X text 200 1606 Logistic map chaotic generator;
#X obj 30 1633 chaos.std0;
#X text 200 1633 Standard map chaotic generator;
#X obj 30 1660 chaos.std0~;
#X text 200 1660 Standard map chaotic generator;
#X obj 20 1687 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1728 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1739 array.p2s;
#X text 200 1739 convert array phase [0\..1] to sample position;
#X obj 30 1766 array.s2p;
#X text 200 1766 convert array sample position to relative phase position
[0\..1];
#X obj 30 1806 conv.amp2dbfs;
#X text 200 1806 convert from amplitude to decibel full scale;
#X obj 30 1833 conv.amp2dbfs~;
#X text 200 1833 convert from amplitude to decibel full scale;
#X obj 30 1860 conv.bpm2hz;
#X text 200 1860 converts BPM to frequency in herz;
#X obj 30 1887 conv.bpm2ms;
#X text 200 1887 convert frequency in BPM to period in milliseconds;
#X obj 30 1914 conv.bpm2sec;
#X text 200 1914 convert frequency in BPM to period in seconds;
#X obj 30 1941 conv.car2pol;
#X text 200 1941 convert cartesian coords to polar;
#X obj 30 1968 conv.cc2amp;
#X text 200 1968 convert from MIDI Control Change range;
#X obj 30 1995 conv.dbfs2amp;
#X text 200 1995 convert decibel full scale to amplitude;
#X obj 30 2022 conv.dbfs2amp~;
#X text 200 2022 convert decibel full scale to amplitude;
#X obj 30 2049 conv.hex2int;
#X text 200 2049 hex symbol to int value;
#X obj 30 2076 conv.lin2curve;
#X text 200 2076 map linear to exponential range with 0 allowed.;
#X obj 30 2103 conv.lin2exp;
#X text 200 2103 maps linear range to exponential range;
#X obj 30 2130 conv.lin2lin;
#X text 200 2130 convert from one linear range to another;
#X obj 30 2157 conv.lin2lin~;
#X text 200 2157 convert from one linear range to another for signals;
#X obj 30 2184 conv.list2props;
#X text 200 2184 converts list to series of property messages;
#X obj 30 2211 conv.midi2freq;
#X text 200 2211 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2251 conv.ms2samp;
#X text 200 2251 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2291 conv.ms2samp~;
#X text 200 2291 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2331 conv.phase2rad;
#X text 200 2331 convert phase value [0-1] to radians [0-2π];
#X obj 30 2358 conv.phase2rad~;
#X text 200 2358 convert phase value [0-1] to radians [0-2π];
#X obj 30 2385 conv.pitch2midi;
#X text 200 2385 converts symbol pitch name to MIDI note number;
#X obj 30 2412 conv.pol2car;
#X text 200 2412 convert from polar coordinates to cartesian;
#X obj 30 2439 conv.rad2phase;
#X text 200 2439 convert radians value to phase;
#X obj 30 2466 conv.rad2phase~;
#X text 200 2466 convert radians value to phase;
#X obj 30 2493 conv.samp2ms;
#X text 200 2493 convert samples to time according to samplerate;
#X obj 30 2520 conv.samp2ms~;
#X text 200 2520 convert samples to milliseconds according to samplerate;
#X obj 30 2547 conv.samp2sec;
#X text 200 2547 convert samples to time according to samplerate;
#X obj 30 2574 conv.sec2samp;
#X text 200 2574 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2614 conv.sec2str;
#X text 200 2614 converts float time in seconds to formated symbol
(or string);
#X obj 30 2641 conv.str2sec;
#X text 200 2641 converts formatted time to float value in seconds;
#X obj 20 2668 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2709 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2720 data.dict;
#X text 200 2720 dictionary container: store values by key;
#X obj 30 2747 data.fifo;
#X text 200 2747 First-In-First-Out (FIFO) queue data container;
#X obj 30 2774 data.float;
#X text 200 2774 robust float object;
#X obj 30 2801 data.int;
#X text 200 2801 robust int object;
#X obj 30 2828 data.list;
#X text 200 2828 list container;
#X obj 30 2855 data.mlist;
#X text 200 2855 multidimensional list container;
#X obj 30 2882 data.set;
#X text 200 2882 container that store unique elements;
#X obj 30 2909 data.set2list;
#X text 200 2909 converts set to list;
#X obj 30 2936 dict.contains;
#X text 200 2936 predicate to check if dict contains a keys;
#X obj 30 2963 dict.each;
#X text 200 2963 map each value in dict;
#X obj 30 2990 dict.from_list;
#X text 200 2990 creates dictionary from list;
#X obj 30 3017 dict.get;
#X text 200 3017 output dict values;
#X obj 30 3044 dict.keys;
#X text 200 3044 get list of dict keys;
#X obj 30 3071 dict.pass;
#X text 200 3071 passes specified keys in dict;
#X obj 30 3098 dict.reject;
#X text 200 3098 rejects specified keys from dict;
#X obj 30 3125 dict.size;
#X text 200 3125 dictionary size;
#X obj 30 3152 dict.to_list;
#X text 200 3152 converts dictionary to plain list;
#X obj 30 3179 dict.values;
#X text 200 3179 dictionary values as mlist;
#X obj 30 3206 mlist.flatten;
#X text 200 3206 flatten nested mlist;
#X obj 30 3233 set.contains;
#X text 200 3233 check if specified element is in set;
#X obj 30 3260 set.diff;
#X text 200 3260 difference between two sets;
#X obj 30 3287 set.equal;
#X text 200 3287 checks if two sets are equal (contains same elements);
#X obj 30 3314 set.intersect;
#X text 200 3314 output intersection of given sets;
#X obj 30 3341 set.size;
#X text 200 3341 get number of elements in set;
#X obj 30 3368 set.symdiff;
#X text 200 3368 symmetric difference between two sets;
#X obj 30 3395 set.union;
#X text 200 3395 output union of given sets;
#X obj 20 3422 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3463 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3474 dyn.comp2~;
#X text 200 3474 stereo dynamic range compressor;
#X obj 30 3501 dyn.comp~;
#X text 200 3501 mono dynamic range compressors;
#X obj 30 3528 dyn.gate2~;
#X text 200 3528 stereo signal gate;
#X obj 30 3555 dyn.gate~;
#X text 200 3555 mono signal gate;
#X obj 30 3582 dyn.limit2~;
#X text 200 3582 stereo 1176LN Peak Limiter;
#X obj 30 3609 dyn.limit~;
#X text 200 3609 mono 1176LN Peak Limiter;
#X obj 30 3636 dyn.softclip~;
#X text 200 3636 soft signal clip;
#X obj 20 3663 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3704 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3715 env.adsr~;
#X text 200 3715 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3742 env.ar~;
#X text 200 3742 Attack/Release envelope generator;
#X obj 30 3769 env.asr~;
#X text 200 3769 Attack/Sustain/Release envelope generator;
#X obj 30 3796 env.concat;
#X text 200 3796 Envelope concatenation;
#X obj 30 3823 env.follow~;
#X text 200 3823 Envelope follower with independent attack and release
times;
#X obj 30 3850 env.mix;
#X text 200 3850 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3890 env.smooth~;
#X text 200 3890 An envelope with an exponential attack and release;
#X obj 30 3917 env.tscale;
#X text 200 3917 Envelope time-scale;
#X obj 30 3944 env.tshift;
#X text 200 3944 Envelope time-shift (horizontal);
#X obj 30 3971 env.vscale;
#X text 200 3971 Envelope value-scale;
#X obj 30 3998 env2array;
#X text 200 3998 Renders envelope to specified array;
#X obj 30 4025 env2vline;
#X text 200 4025 Converts envelope to bunch of vline messages;
#X obj 30 4052 envelope;
#X text 200 4052 Envelope data type;
#X obj 30 4079 vline2env;
#X text 200 4079 Converts vline messages to env;
#X obj 20 4106 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4147 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4158 expand_env;
#X text 200 4158 Substitute environment variables in data stream;
#X obj 30 4185 flow.append;
#X text 200 4185 append message to flow stream;
#X obj 30 4212 flow.change;
#X text 200 4212 rejects redundant input values;
#X obj 30 4239 flow.count;
#X text 200 4239 control flow event counter;
#X obj 30 4266 flow.delay;
#X text 200 4266 enhanced version on vanilla delay object;
#X obj 30 4293 flow.demultiplex;
#X text 200 4293 control flow demultiplexer;
#X obj 30 4320 flow.demultiplex2~;
#X text 200 4320 audio stream stereo demultiplexer;
#X obj 30 4347 flow.demultiplex~;
#X text 200 4347 audio stream demultiplexer;
#X obj 30 4374 flow.dup;
#X text 200 4374 message duplicator;
#X obj 30 4401 flow.gate;
#X text 200 4401 control flow gate. [spigot] analog;
#X obj 30 4428 flow.greater;
#X text 200 4428 numeric stream router;
#X obj 30 4455 flow.greater_eq;
#X text 200 4455 numeric stream router;
#X obj 30 4482 flow.group;
#X text 200 4482 group input atoms in list of specified size;
#X obj 30 4509 flow.interval;
#X text 200 4509 measure time between flow events;
#X obj 30 4536 flow.less;
#X text 200 4536 numeric stream router \, like many [moses];
#X obj 30 4563 flow.less_eq;
#X text 200 4563 numeric stream router \, like many [moses];
#X obj 30 4590 flow.match;
#X text 200 4590 route data flow by regexp match;
#X obj 30 4617 flow.mem;
#X text 200 4617 store data flow in memory;
#X obj 30 4644 flow.multiplex;
#X text 200 4644 control flow multiplexer;
#X obj 30 4671 flow.multiplex2~;
#X text 200 4671 audio stream stereo multiplexer;
#X obj 30 4698 flow.multiplex~;
#X text 200 4698 audio stream multiplexer;
#X obj 30 4725 flow.once;
#X text 200 4725 one message pass thru;
#X obj 30 4752 flow.pack;
#X text 200 4752 flow pack;
#X obj 30 4779 flow.pass;
#X text 200 4779 pass specified values;
#X obj 30 4806 flow.pass_if;
#X text 200 4806 pass values that accepted by predicate object;
#X obj 30 4833 flow.pipe;
#X text 200 4833 enhanced version on vanilla pipe object;
#X obj 30 4860 flow.reject;
#X text 200 4860 reject specified values;
#X obj 30 4887 flow.reject_if;
#X text 200 4887 reject values by predicate;
#X obj 30 4914 flow.ring;
#X text 200 4914 dataflow ring buffer;
#X obj 30 4941 flow.route;
#X text 200 4941 advanced message router;
#X obj 30 4968 flow.space;
#X text 200 4968 space in time messages received at the same logical
time;
#X obj 30 4995 flow.speedlim;
#X text 200 4995 control stream speed limiter;
#X obj 30 5022 flow.split;
#X text 200 5022 split data flow by external side-chain predicate;
#X obj 30 5049 flow.stack;
#X text 200 5049 any message stack;
#X obj 30 5076 flow.sync;
#X text 200 5076 bus with only hot inlets;
#X obj 30 5103 flow.sync_pack;
#X text 200 5103 flow pack with all hot inlets;
#X obj 30 5130 flow.tee~;
#X text 200 5130 separate audio and control streams;
#X obj 30 5157 replace;
#X text 200 5157 Replace atoms in data stream;
#X obj 20 5184 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5236 flt.biquad~;
#X text 200 5236 second order IIR filter.;
#X obj 30 5263 flt.bpf12~;
#X text 200 5263 Two pole band-pass butterworth filter;
#X obj 30 5290 flt.bpf24~;
#X text 200 5290 Four pole band-pass butterworth filter;
#X obj 30 5317 flt.c_bpf~;
#X text 200 5317 BPF coefficient calculator for biquad filter;
#X obj 30 5344 flt.c_highshelf~;
#X text 200 5344 Highshelf filter coefficient calculator for biquad;
#X obj 30 5371 flt.c_hpf~;
#X text 200 5371 HPF coefficient calculator for biquad filter;
#X obj 30 5398 flt.c_lowshelf~;
#X text 200 5398 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5425 flt.c_lpf~;
#X text 200 5425 LPF coefficient calculator for biquad filter;
#X obj 30 5452 flt.c_notch~;
#X text 200 5452 Band-reject coefficient calculator for biquad filter;
#X obj 30 5479 flt.c_peak~;
#X text 200 5479 Peaking equalizer calculator for biquad;
#X obj 30 5506 flt.dcblock2~;
#X text 200 5506 stereo DC blocker;
#X obj 30 5533 flt.dcblock~;
#X text 200 5533 mono DC blocker;
#X obj 30 5560 flt.eq10~;
#X text 200 5560 graphic 10 band equalizer;
#X obj 30 5587 flt.eq_peak_cq~;
#X text 200 5587 constant-Q second order peaking equalizer section;
#X obj 30 5614 flt.eq_peak~;
#X text 200 5614 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5669 flt.freqz~;
#X text 200 5669 compute the frequency response of a digital filter;
#X obj 30 5696 flt.highshelf~;
#X text 200 5696 gain boost|cut above some frequency;
#X obj 30 5723 flt.hpf12~;
#X text 200 5723 High-pass second order Butterworth filter;
#X obj 30 5750 flt.hpf24~;
#X text 200 5750 High-pass fourth order Butterworth filter;
#X obj 30 5777 flt.lowshelf~;
#X text 200 5777 gain boost|cut below some frequency;
#X obj 30 5804 flt.lpf12~;
#X text 200 5804 Low-pass second order Butterworth filter;
#X obj 30 5831 flt.lpf24~;
#X text 200 5831 Low-pass fourth order Butterworth filter;
#X obj 30 5858 flt.median;
#X text 200 5858 Median control flow filter;
#X obj 30 5885 flt.moog_vcf~;
#X text 200 5885 Moog Voltage Controlled Filter;
#X obj 30 5912 flt.notch~;
#X text 200 5912 band-rejection filter;
#X obj 30 5939 flt.resonbp~;
#X text 200 5939 Simple resonant bandpass filter;
#X obj 20 5966 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6007 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6018 fx.bitdown~;
#X text 200 6018 bit downer and downsampler effect;
#X obj 30 6045 fx.chorus~;
#X text 200 6045 Chorus effect;
#X obj 30 6072 fx.distortion1~;
#X text 200 6072 distortion #1 from Guitarix effects set;
#X obj 30 6099 fx.distortion2~;
#X text 200 6099 distortion #2 from Guitarix effects set;
#X obj 30 6126 fx.distortion3~;
#X text 200 6126 simple distortion #3 from Guitarix effects set;
#X obj 30 6153 fx.distortion~;
#X text 200 6153 cubic nonlinearity distortion;
#X obj 30 6180 fx.drive~;
#X text 200 6180 Guitarix drive effect;
#X obj 30 6207 fx.drone_box~;
#X text 200 6207 mono sympathetic resonance generator;
#X obj 30 6234 fx.echo~;
#X text 200 6234 simple echo effect;
#X obj 30 6261 fx.flanger~;
#X text 200 6261 mono flanging effect;
#X obj 30 6288 fx.freeverb2~;
#X text 200 6288 freeverb2 - stereo version of freeverb;
#X obj 30 6315 fx.freeverb~;
#X text 200 6315 freeverb - common used open-source reverb;
#X obj 30 6342 fx.freqshift~;
#X text 200 6342 frequency shifter or single-sideband ring modulation;
#X obj 30 6369 fx.granulator~;
#X text 200 6369 simple input stream granulator;
#X obj 30 6396 fx.greyhole~;
#X text 200 6396 A complex echo-like effect;
#X obj 30 6423 fx.looper~;
#X text 200 6423 One track looper;
#X obj 30 6450 fx.pitchshift~;
#X text 200 6450 simple pitch shifter based on 2 delay lines;
#X obj 30 6477 fx.sdelay~;
#X text 200 6477 smooth delay with a feedback control;
#X obj 30 6504 fx.vocoder~;
#X text 200 6504 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6544 fx.wahwah~;
#X text 200 6544 digitized CryBaby wah pedal;
#X obj 30 6571 fx.zita_rev1~;
#X text 200 6571 Zita stereo reverb;
#X obj 20 6598 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6639 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6650 global.dict;
#X text 200 6650 global named dict object;
#X obj 30 6677 global.float;
#X text 200 6677 global named float object;
#X obj 30 6704 global.int;
#X text 200 6704 global named integer object;
#X obj 30 6731 global.list;
#X text 200 6731 global named list object;
#X obj 30 6758 global.mlist;
#X text 200 6758 global named mlist object;
#X obj 30 6785 global.set;
#X text 200 6785 global named set object;
#X obj 20 6812 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6853 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6864 hw.apple_smc;
#X text 200 6864 query the system management control in Apples;
#X obj 30 6891 hw.apple_sms;
#X text 200 6891 query the sudden motion sensor in Apples;
#X obj 30 6918 hw.arduino;
#X text 200 6918 Arduino device;
#X obj 30 6945 hw.cpu_temp;
#X text 200 6945 get CPU temperature;
#X obj 30 6972 hw.display;
#X text 200 6972 get/set display properties;
#X obj 30 6999 hw.kbd_light;
#X text 200 6999 Get/set keyboard light on some devices;
#X obj 20 7026 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7067 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7078 lfo.+pulse~;
#X text 200 7078 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7105 lfo.+saw~;
#X text 200 7105 Positive unit-amplitude low frequency saw wave;
#X obj 30 7132 lfo.+square~;
#X text 200 7132 Positive low frequency square wave;
#X obj 30 7159 lfo.+tri~;
#X text 200 7159 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7186 lfo.impulse~;
#X text 200 7186 Unit-amplitude low-frequency impulse train;
#X obj 30 7213 lfo.pulse~;
#X text 200 7213 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7240 lfo.saw~;
#X text 200 7240 Full-range unit-amplitude low frequency saw;
#X obj 30 7267 lfo.square~;
#X text 200 7267 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7294 lfo.tri~;
#X text 200 7294 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7321 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7362 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7373 list.^at;
#X text 200 7373 on input index(es) outputs list element(s);
#X obj 30 7400 list.^contains;
#X text 200 7400 checks if input atom is found in the list;
#X obj 30 7427 list.^search;
#X text 200 7427 on input atom returns it index in list;
#X obj 30 7454 list.all_of;
#X text 200 7454 checks if all list atoms accepted by predicate;
#X obj 30 7481 list.any_of;
#X text 200 7481 checks if at least one list element is accepted by
predicate;
#X obj 30 7508 list.append;
#X text 200 7508 append atom or list to the end of input list;
#X obj 30 7535 list.apply_to;
#X text 200 7535 modifies list value at specified position \, filtering
it via external object;
#X obj 30 7575 list.at;
#X text 200 7575 outputs list element(s) at specified index(es);
#X obj 30 7602 list.choice;
#X text 200 7602 outputs random element from list;
#X obj 30 7629 list.contains;
#X text 200 7629 checks if input list contains specified atoms;
#X obj 30 7656 list.count;
#X text 200 7656 output the number of items that equal to specified
value;
#X obj 30 7683 list.count_if;
#X text 200 7683 output the number of items that satisfy to external
predicate;
#X obj 30 7710 list.delta;
#X text 200 7710 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7750 list.distribution;
#X text 200 7750 list value distribution;
#X obj 30 7777 list.do;
#X text 200 7777 iterate and modify list contents via side-chain;
#X obj 30 7804 list.each;
#X text 200 7804 maps each list value via external side-chain;
#X obj 30 7831 list.enumerate;
#X text 200 7831 enumerates input list;
#X obj 30 7858 list.equal;
#X text 200 7858 checks if given lists are equal;
#X obj 30 7885 list.first;
#X text 200 7885 returns first list element;
#X obj 30 7912 list.gen;
#X text 200 7912 generates list of specified length via external generator;
#X obj 30 7939 list.histogram;
#X text 200 7939 outputs distribution histogram;
#X obj 30 7966 list.insert;
#X text 200 7966 insert atom or list to the specified position of input
list;
#X obj 30 7993 list.integrator;
#X text 200 7993 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8033 list.last;
#X text 200 8033 output last list element;
#X obj 30 8060 list.length;
#X text 200 8060 output the number of atoms in the list;
#X obj 30 8087 list.max;
#X text 200 8087 output largest element in the list;
#X obj 30 8114 list.mean;
#X text 200 8114 calculates average of list of floats;
#X obj 30 8141 list.min;
#X text 200 8141 returns smallest element in the list;
#X obj 30 8168 list.none_of;
#X text 200 8168 checks if none of list atoms is accepted by predicate;
#X obj 30 8195 list.normalize;
#X text 200 8195 normalizes float list values to get their sum = 1.0;
#X obj 30 8222 list.pass_if;
#X text 200 8222 leave only elements accepted by predicate;
#X obj 30 8249 list.prepend;
#X text 200 8249 prepend atom or list before input list;
#X obj 30 8276 list.product;
#X text 200 8276 calculates product of floats in list;
#X obj 30 8303 list.range;
#X text 200 8303 output list smallest and largest value;
#X obj 30 8330 list.reduce;
#X text 200 8330 apply function of two arguments cumulatively to the
list;
#X obj 30 8357 list.remove;
#X text 200 8357 remove list element(s) at specified positions;
#X obj 30 8384 list.remove_if;
#X text 200 8384 remove elements by predicate;
#X obj 30 8411 list.repack;
#X text 200 8411 repack list to specified size;
#X obj 30 8438 list.repeat;
#X text 200 8438 output new list by repeating input list specified
times;
#X obj 30 8465 list.resample;
#X text 200 8465 resample list with specified ratio;
#X obj 30 8492 list.resize;
#X text 200 8492 changes list size;
#X obj 30 8519 list.reverse;
#X text 200 8519 reverses the order of the elements in the list;
#X obj 30 8546 list.rldecode;
#X text 200 8546 Run-length list decoder (RLE);
#X obj 30 8573 list.rlencode;
#X text 200 8573 RLE (run-length encoding) for lists;
#X obj 30 8600 list.rotate;
#X text 200 8600 rotates list;
#X obj 30 8627 list.route;
#X text 200 8627 acts like [route] but for lists;
#X obj 30 8654 list.search;
#X text 200 8654 search specified items in input list;
#X obj 30 8681 list.separate;
#X text 200 8681 sends list elements one by one separately;
#X obj 30 8708 list.seq;
#X text 200 8708 numeric sequence list generator;
#X obj 30 8735 list.set;
#X text 200 8735 set list value at specified position;
#X obj 30 8762 list.shift;
#X text 200 8762 shifts the contents of the list with linear interpolation;
#X obj 30 8789 list.shuffle;
#X text 200 8789 randomly rearranges elements in list;
#X obj 30 8816 list.slice;
#X text 200 8816 extract sublist;
#X obj 30 8843 list.sort;
#X text 200 8843 sorts list values by ascending order;
#X obj 30 8870 list.sort_with;
#X text 200 8870 sort list with user defined side-chain;
#X obj 30 8897 list.split;
#X text 200 8897 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 8937 list.stretch;
#X text 200 8937 stretches list - changes its size with linear interpolation;
#X obj 30 8964 list.sum;
#X text 200 8964 calculates sum of floats in list;
#X obj 30 8991 list.unique;
#X text 200 8991 removes duplicates from input list;
#X obj 30 9018 list.unpack;
#X text 200 9018 unpack list elements to separate outlets;
#X obj 30 9045 list.unzip;
#X text 200 9045 splits list to N lists \, each to separate output;
#X obj 30 9072 list.walk;
#X text 200 9072 Walks thru the list;
#X obj 30 9099 list.zip;
#X text 200 9099 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9154 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9195 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9206 live.capture~;
#X text 200 9206 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9246 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9287 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9298 local.dict;
#X text 200 9298 local named dict object;
#X obj 30 9325 local.float;
#X text 200 9325 canvas-scoped named float variable;
#X obj 30 9352 local.int;
#X text 200 9352 canvas-scoped named integer variable;
#X obj 30 9379 local.list;
#X text 200 9379 local named list object;
#X obj 30 9406 local.mlist;
#X text 200 9406 local named mlist object;
#X obj 30 9433 local.set;
#X text 200 9433 local named set object;
#X obj 20 9460 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9501 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9512 math.abs;
#X text 200 9512 absolute value function;
#X obj 30 9539 math.abs~;
#X text 200 9539 absolute value function for signals;
#X obj 30 9566 math.acos;
#X text 200 9566 arc cosine function;
#X obj 30 9593 math.acosh;
#X text 200 9593 inverse hyperbolic cosine function;
#X obj 30 9620 math.acosh~;
#X text 200 9620 hyperbolic arc cosine for signals;
#X obj 30 9647 math.acos~;
#X text 200 9647 arc cosine function for signals;
#X obj 30 9674 math.and;
#X text 200 9674 operation AND for multiple arguments;
#X obj 30 9701 math.approx;
#X text 200 9701 check if input value approximately equal to pattern;
#X obj 30 9728 math.asin;
#X text 200 9728 arc sine function;
#X obj 30 9755 math.asinh;
#X text 200 9755 inverse hyperbolic sine function;
#X obj 30 9782 math.asinh~;
#X text 200 9782 hyperbolic arc sine for signals;
#X obj 30 9809 math.asin~;
#X text 200 9809 arc sine for signals;
#X obj 30 9836 math.atan;
#X text 200 9836 arc tangent function;
#X obj 30 9863 math.atanh;
#X text 200 9863 inverse hyperbolic tangent function;
#X obj 30 9890 math.atanh~;
#X text 200 9890 hyperbolic arc tangent for signals;
#X obj 30 9917 math.atan~;
#X text 200 9917 arc tangent for signals;
#X obj 30 9944 math.cabs~;
#X text 200 9944 magnitude of a complex signals;
#X obj 30 9971 math.carg~;
#X text 200 9971 phase angle of a complex signals;
#X obj 30 9998 math.cbrt;
#X text 200 9998 cube root function;
#X obj 30 10025 math.cbrt~;
#X text 200 10025 cube root function for signals;
#X obj 30 10052 math.cdiv~;
#X text 200 10052 division of complex signals;
#X obj 30 10079 math.ceil;
#X text 200 10079 round to smallest integral value not less than input
value;
#X obj 30 10106 math.ceil~;
#X text 200 10106 round to smallest integral value not less than input
value;
#X obj 30 10133 math.cexp~;
#X text 200 10133 exponent of a complex signals;
#X obj 30 10160 math.cmul~;
#X text 200 10160 multiplication of complex signals;
#X obj 30 10187 math.cos;
#X text 200 10187 cosine function;
#X obj 30 10214 math.cosh;
#X text 200 10214 hyperbolic cosine function;
#X obj 30 10241 math.cosh~;
#X text 200 10241 hyperbolic cosine for signals;
#X obj 30 10268 math.cos~;
#X text 200 10268 cosine function;
#X obj 30 10295 math.div;
#X text 200 10295 division (on lists too);
#X obj 30 10322 math.e;
#X text 200 10322 mathematical constant \, base of the natural logarithm;
#X obj 30 10349 math.erf;
#X text 200 10349 error function;
#X obj 30 10376 math.erf~;
#X text 200 10376 error function for signals;
#X obj 30 10403 math.exp;
#X text 200 10403 exponential functions;
#X obj 30 10430 math.exp2;
#X text 200 10430 exponential functions;
#X obj 30 10457 math.exp2~;
#X text 200 10457 base-2 exponential for signal;
#X obj 30 10484 math.expr;
#X text 200 10484 dynamic [expr];
#X obj 30 10511 math.exp~;
#X text 200 10511 base-e exponential for signal;
#X obj 30 10538 math.floor;
#X text 200 10538 round to largest integral value not greater than
x;
#X obj 30 10565 math.floor~;
#X text 200 10565 round to largest integral value not greater than
x;
#X obj 30 10592 math.gamma;
#X text 200 10592 gamma function;
#X obj 30 10619 math.gamma~;
#X text 200 10619 gamma function for floating point signals;
#X obj 30 10646 math.gcd;
#X text 200 10646 calculate greatest common divisor;
#X obj 30 10673 math.inf;
#X text 200 10673 infinity value that cannot be represented accurately;
#X obj 30 10700 math.inf~;
#X text 200 10700 inifinity signal generator;
#X obj 30 10727 math.lcm;
#X text 200 10727 calculate least common multiple;
#X obj 30 10754 math.lgamma;
#X text 200 10754 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10781 math.lgamma~;
#X text 200 10781 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 10821 math.log;
#X text 200 10821 natural logarithm;
#X obj 30 10848 math.log10;
#X text 200 10848 logarithm functions;
#X obj 30 10875 math.log10~;
#X text 200 10875 natural logarithm;
#X obj 30 10902 math.log2;
#X text 200 10902 logarithm functions;
#X obj 30 10929 math.log2~;
#X text 200 10929 base-2 logarithm;
#X obj 30 10956 math.log~;
#X text 200 10956 natural logarithm;
#X obj 30 10983 math.mul;
#X text 200 10983 multiplication (on lists too);
#X obj 30 11010 math.nan;
#X text 200 11010 Not a Number \, unrepresentable value;
#X obj 30 11037 math.nan~;
#X text 200 11037 signal NaN;
#X obj 30 11064 math.neg;
#X text 200 11064 negate function;
#X obj 30 11091 math.or;
#X text 200 11091 operation OR for multiple arguments;
#X obj 30 11118 math.pi;
#X text 200 11118 mathematical constant;
#X obj 30 11145 math.pi~;
#X text 200 11145 mathematical constant;
#X obj 30 11172 math.polyeval;
#X text 200 11172 evaluates the polynomial described by the coefficients
list;
#X obj 30 11199 math.reciprocal;
#X text 200 11199 calculate reciprocal number;
#X obj 30 11226 math.reciprocal~;
#X text 200 11226 calculate reciprocal number for signals;
#X obj 30 11253 math.round;
#X text 200 11253 round to integral value \, regardless of rounding
direction;
#X obj 30 11280 math.round~;
#X text 200 11280 signal round;
#X obj 30 11307 math.sign;
#X text 200 11307 sign function;
#X obj 30 11334 math.sin;
#X text 200 11334 sine function;
#X obj 30 11361 math.sinh;
#X text 200 11361 hyperbolic sine function;
#X obj 30 11388 math.sinh~;
#X text 200 11388 hyperbolic sine for signals;
#X obj 30 11415 math.sin~;
#X text 200 11415 sine function;
#X obj 30 11442 math.sqrt;
#X text 200 11442 square root function;
#X obj 30 11469 math.sqrt~;
#X text 200 11469 square root for signal;
#X obj 30 11496 math.squared;
#X text 200 11496 value square;
#X obj 30 11523 math.squared~;
#X text 200 11523 signal value square;
#X obj 30 11550 math.sync_add;
#X text 200 11550 sync addition;
#X obj 30 11577 math.sync_and;
#X text 200 11577 sync logical AND operation;
#X obj 30 11604 math.sync_div;
#X text 200 11604 sync division;
#X obj 30 11631 math.sync_eq;
#X text 200 11631 sync equal numbers check;
#X obj 30 11658 math.sync_ge;
#X text 200 11658 sync greater equal numbers compare;
#X obj 30 11685 math.sync_gt;
#X text 200 11685 sync greater then numbers compare;
#X obj 30 11712 math.sync_le;
#X text 200 11712 sync less equal numbers compare;
#X obj 30 11739 math.sync_lt;
#X text 200 11739 sync less then numbers compare;
#X obj 30 11766 math.sync_mod;
#X text 200 11766 sync remainder of modulo division (float or integer);
#X obj 30 11793 math.sync_mul;
#X text 200 11793 sync multiplication;
#X obj 30 11820 math.sync_ne;
#X text 200 11820 sync numbers for not equality;
#X obj 30 11847 math.sync_or;
#X text 200 11847 sync logical OR operation;
#X obj 30 11874 math.sync_sub;
#X text 200 11874 sync subtraction;
#X obj 30 11901 math.sync_xor;
#X text 200 11901 sync logical XOR operation;
#X obj 30 11928 math.tan;
#X text 200 11928 tangent function;
#X obj 30 11955 math.tanh;
#X text 200 11955 hyperbolic tangent function;
#X obj 30 11982 math.tanh~;
#X text 200 11982 hyperbolic tangent for signals;
#X obj 30 12009 math.tan~;
#X text 200 12009 tangent function;
#X obj 30 12036 math.trunc;
#X text 200 12036 truncate to integer value;
#X obj 30 12063 math.trunc~;
#X text 200 12063 truncate to integer value;
#X obj 20 12090 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12131 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12142 midi.ctl2str;
#X text 200 12142 convert Standard MIDI Controllers number to name;
#X obj 30 12169 midi.event2ctl;
#X text 200 12169 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12196 midi.event2note;
#X text 200 12196 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12223 midi.event2prg;
#X text 200 12223 convert MidiEvent message to midi program change
value;
#X obj 30 12250 midi.file;
#X text 200 12250 standard midi file SMF reader and writer;
#X obj 30 12277 midi.key2str;
#X text 200 12277 convert key number to SPN name according to tonality;
#X obj 30 12304 midi.prg2str;
#X text 200 12304 convert GM Instrument number to name (string or symbol);
#X obj 30 12331 midi.track;
#X text 200 12331 extract track from MidiFile;
#X obj 20 12358 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12399 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12410 click~;
#X text 200 12410 Output single impulse on bang;
#X obj 30 12437 fluid~;
#X text 200 12437 FluidSynth SoundFont 2 player;
#X obj 30 12464 modplug~;
#X text 200 12464 MOD file player (using libmodplug);
#X obj 30 12491 speech.flite;
#X text 200 12491 render speech to array;
#X obj 20 12518 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 12559 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12570 msg;
#X text 200 12570 message constructor;
#X obj 30 12597 msg.after;
#X text 200 12597 send specified message after incoming message;
#X obj 30 12624 msg.onload;
#X text 200 12624 send message when patch loads;
#X obj 20 12651 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12692 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12703 net.host2ip;
#X text 200 12703 returns IP address by DNS name;
#X obj 20 12730 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 12771 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12782 noise.crackle~;
#X text 200 12782 sparse noise generator;
#X obj 30 12809 noise.ginger;
#X text 200 12809 Gingerbreadman map chaotic generator;
#X obj 30 12836 noise.lfreq0~;
#X text 200 12836 sampled/held noise (piecewise constant);
#X obj 30 12863 noise.lfreq~;
#X text 200 12863 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 12890 noise.pink~;
#X text 200 12890 Pink noise generator;
#X obj 30 12917 noise.white~;
#X text 200 12917 White noise generator;
#X obj 20 12944 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 12985 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12996 osc.blit~;
#X text 200 12996 Bandlimited impulse train oscillator;
#X obj 30 13023 osc.impulse~;
#X text 200 13023 Bandlimited impulse train generator;
#X obj 30 13050 osc.pulse~;
#X text 200 13050 Bandlimited pulse train oscillator;
#X obj 30 13077 osc.saw4~;
#X text 200 13077 Bandlimited sawtooth wave;
#X obj 30 13104 osc.saw~;
#X text 200 13104 Alias-free sawtooth wave;
#X obj 30 13131 osc.sinfb~;
#X text 200 13131 Sine oscilator with feedback;
#X obj 30 13158 osc.sin~;
#X text 200 13158 Sine wave oscillator;
#X obj 30 13185 osc.square~;
#X text 200 13185 Bandlimited square wave oscillator;
#X obj 30 13212 osc.tri~;
#X text 200 13212 Bandlimited triangle wave oscillator;
#X obj 20 13239 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 13280 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13291 canvas.current;
#X text 200 13291 verbose information about current canvas;
#X obj 30 13318 canvas.dir;
#X text 200 13318 current canvas directory;
#X obj 30 13345 canvas.name;
#X text 200 13345 current canvas name;
#X obj 30 13372 canvas.path;
#X text 200 13372 current canvas fullpath;
#X obj 30 13399 canvas.top;
#X text 200 13399 verbose information about top-level canvas;
#X obj 30 13426 patch.args;
#X text 200 13426 Get patch or subpatch arguments;
#X obj 30 13453 patch.deps;
#X text 200 13453 patch dependencies: used objects and abstractions;
#X obj 30 13480 patch.tree;
#X text 200 13480 patch tree;
#X obj 20 13507 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 13548 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13559 path.basename;
#X text 200 13559 outputs filename portion of pathname;
#X obj 30 13586 path.dirname;
#X text 200 13586 outputs directory portion of pathname;
#X obj 30 13613 path.exists;
#X text 200 13613 checks if given path exists;
#X obj 30 13640 path.is_dir;
#X text 200 13640 check if path is directory;
#X obj 30 13667 path.lsdir;
#X text 200 13667 list directory contents;
#X obj 20 13694 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13735 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13746 is_any;
#X text 200 13746 checks if input data has *any* type;
#X obj 30 13773 is_bang;
#X text 200 13773 checks if input data has *bang* type;
#X obj 30 13800 is_data;
#X text 200 13800 checks if input data has *data* type;
#X obj 30 13827 is_dict;
#X text 200 13827 checks if input data has *dict* type;
#X obj 30 13854 is_even;
#X text 200 13854 checks if input number is even;
#X obj 30 13881 is_file;
#X text 200 13881 checks if file exists and accessible;
#X obj 30 13908 is_float;
#X text 200 13908 checks if input data has *float* type;
#X obj 30 13935 is_list;
#X text 200 13935 checks if input data has *list* type;
#X obj 30 13962 is_odd;
#X text 200 13962 checks if input number is odd;
#X obj 30 13989 is_pointer;
#X text 200 13989 checks if input data has *pointer* type;
#X obj 30 14016 is_symbol;
#X text 200 14016 checks if input data has *symbol* type;
#X obj 20 14043 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 14084 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14095 preset.float;
#X text 200 14095 load/store float preset;
#X obj 30 14122 preset.list;
#X text 200 14122 load/store symbol preset;
#X obj 30 14149 preset.storage;
#X text 200 14149 preset storage control;
#X obj 30 14176 preset.symbol;
#X text 200 14176 load/store symbol preset;
#X obj 20 14203 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 14244 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14255 patch.props;
#X text 200 14255 patch properties manager;
#X obj 30 14282 prop;
#X text 200 14282 get/set named property value for subpatch or abstraction;
#X obj 30 14309 prop.declare;
#X text 200 14309 declare named property for subpatch or abstraction;
#X obj 30 14336 prop.get;
#X text 200 14336 get property from connected object/subpatch/abstraction;
#X obj 30 14363 prop.get~;
#X text 200 14363 Property extractor from sound stream;
#X obj 30 14390 prop.join;
#X text 200 14390 join property to main data flow;
#X obj 30 14417 prop.set;
#X text 200 14417 set object property;
#X obj 30 14444 prop.split;
#X text 200 14444 separate properties from dataflow;
#X obj 20 14471 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 14512 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14523 proto.firmata;
#X text 200 14523 Firmata Arduino protocol support;
#X obj 30 14550 proto.sp.alpaca;
#X text 200 14550 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 14577 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 14618 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14629 random.atom;
#X text 200 14629 weighted atom generation from specified list;
#X obj 30 14656 random.discrete;
#X text 200 14656 random weighted integers on interval [0 \, n);
#X obj 30 14683 random.float;
#X text 200 14683 uniform random float generator in specified range;
#X obj 30 14710 random.gauss;
#X text 200 14710 gaussian random distribution;
#X obj 30 14737 random.int;
#X text 200 14737 uniform random integer generator in specified range;
#X obj 30 14764 random.linear;
#X text 200 14764 random linear distribution;
#X obj 30 14791 random.pw_const;
#X text 200 14791 piecewise constant random distribution;
#X obj 30 14818 random.pw_lin;
#X text 200 14818 piecewise linear random distribution;
#X obj 20 14845 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 14886 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14897 snd.file;
#X text 200 14897 Sound file loader on steroids;
#X obj 20 14924 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 14965 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14976 hoa.2d.decoder~;
#X text 200 14976 hoa 2d decoder;
#X obj 30 15003 hoa.2d.encoder~;
#X text 200 15003 hoa 2d encoder;
#X obj 30 15030 hoa.2d.map~;
#X text 200 15030 a 2d ambisonic multisource spatializer;
#X obj 30 15057 hoa.2d.optim~;
#X text 200 15057 a 2D ambisonic optimization tool;
#X obj 30 15084 hoa.2d.projector~;
#X text 200 15084 a plane waves decomposer from circular harmonics
domain;
#X obj 30 15111 hoa.2d.recomposer~;
#X text 200 15111 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 15151 hoa.2d.rotate~;
#X text 200 15151 a 2D ambisonic sound field rotation;
#X obj 30 15178 hoa.2d.wider~;
#X text 200 15178 a 2d fractional ambisonic order simulator;
#X obj 30 15205 hoa.@process;
#X text 200 15205 process properties manager for hoa.process~;
#X obj 30 15232 hoa.in;
#X text 200 15232 message inlet for a patcher loaded by hoa.process~;
#X obj 30 15259 hoa.in~;
#X text 200 15259 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15286 hoa.out;
#X text 200 15286 message outlet for a patcher loaded by hoa.process~;
#X obj 30 15313 hoa.out~;
#X text 200 15313 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 15340 hoa.process~;
#X text 200 15340 patcher loader for multichannel processing;
#X obj 30 15370 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 15367 a 2d ambisonic harmonic scope;
#X obj 30 15392 pan.cos~;
#X text 200 15392 two channel equal power sine/cosine panner;
#X obj 30 15419 pan.linsig~;
#X text 200 15419 two channel linear panner with signal control;
#X obj 30 15446 pan.lin~;
#X text 200 15446 two channel linear panner;
#X obj 30 15473 pan.spread~;
#X text 200 15473 spreads input channels across the stereo field;
#X obj 30 15500 pan.sqrt~;
#X text 200 15500 two channel equal power square root panner;
#X obj 30 15527 spat.pan4~;
#X text 200 15527 GMEM SPAT: 4-outputs spatializer;
#X obj 30 15554 spat.pan8~;
#X text 200 15554 GMEM SPAT: 8-outputs spatializer;
#X obj 20 15581 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 15622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15633 string;
#X text 200 15633 string constructor;
#X obj 30 15660 string.contains;
#X text 200 15660 checks if string contains specified substring;
#X obj 30 15687 string.ends_with;
#X text 200 15687 checks if string ends with specified substring;
#X obj 30 15714 string.equal;
#X text 200 15714 check strings or symbols for equality;
#X obj 30 15741 string.format;
#X text 200 15741 formats string like printf.;
#X obj 30 15768 string.join;
#X text 200 15768 joins (concatenates) strings with separator;
#X obj 30 15795 string.length;
#X text 200 15795 number of characters in string (unicode supported);
#X obj 30 15822 string.match;
#X text 200 15822 check if string match regular expression;
#X obj 30 15849 string.remove;
#X text 200 15849 remove substring from input string;
#X obj 30 15876 string.replace;
#X text 200 15876 replace from one substring to another in input string;
#X obj 30 15903 string.split;
#X text 200 15903 split string by separator;
#X obj 30 15930 string.starts_with;
#X text 200 15930 checks if string starts with specified substring;
#X obj 30 15957 string.substr;
#X text 200 15957 extract substring from input string;
#X obj 30 15984 string2symbol;
#X text 200 15984 converts string to symbol;
#X obj 20 16011 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 16052 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16063 symbol.equal;
#X text 200 16063 check symbols for equality;
#X obj 30 16090 symbol.length;
#X text 200 16090 number of characters in symbol (unicode supported);
#X obj 30 16117 symbol.num_compare;
#X text 200 16117 numeric symbol compare;
#X obj 20 16144 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 16185 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16196 synth.bee3~;
#X text 200 16196 Hammond-oid organ FM synthesis instrument;
#X obj 30 16223 synth.birds~;
#X text 200 16223 bird singing generator;
#X obj 30 16250 synth.church_bell~;
#X text 200 16250 generic church bell modal model;
#X obj 30 16277 synth.dubdub~;
#X text 200 16277 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 16317 synth.eguitar~;
#X text 200 16317 simple electric guitar model with steel strings;
#X obj 30 16344 synth.fgrain~;
#X text 200 16344 file granulator from STK;
#X obj 30 16371 synth.ks~;
#X text 200 16371 Karplus-Strong string;
#X obj 30 16398 synth.marimba~;
#X text 200 16398 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 16438 synth.rhodey~;
#X text 200 16438 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 16465 synth.risset_arp~;
#X text 200 16465 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 16492 synth.risset_tone~;
#X text 200 16492 Jean Claude Risset's endless glissando;
#X obj 30 16519 synth.shakers~;
#X text 200 16519 various percussion sounds from STK library;
#X obj 30 16546 synth.wurley~;
#X text 200 16546 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 16573 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 16614 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16625 system.colorpanel;
#X text 200 16625 System color panel dialog popup;
#X obj 30 16652 system.cursor;
#X text 200 16652 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 16679 system.exec;
#X text 200 16679 run external command in separate process;
#X obj 30 16706 system.getenv;
#X text 200 16706 Get system environment variables;
#X obj 30 16733 system.hostname;
#X text 200 16733 outputs system hostname;
#X obj 30 16760 system.memsize;
#X text 200 16760 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 16800 system.memused;
#X text 200 16800 returns the process physical memory use - current
and peak;
#X obj 30 16827 system.screen_size;
#X text 200 16827 returns current screen size in pixels;
#X obj 20 16854 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 16895 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16906 tl.bang;
#X text 200 16906 Timeline bang (with possible delay);
#X obj 30 16936 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 16933 Timeline section;
#X obj 30 16958 tl.timeline;
#X text 200 16958 Timeline - event scheduler;
#X obj 30 16985 tl.toggle;
#X text 200 16985 Timeline bang;
#X obj 30 17012 tl.transport;
#X text 200 17012 Timeline transport control;
#X obj 20 17039 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 17080 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17094 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 17091 array view with cursor and selection;
#X obj 30 17119 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 17116 A bang... that's all;
#X obj 30 17144 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 17141 colorchooser widget;
#X obj 30 17169 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 17166 Display GUI object;
#X obj 30 17194 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 17191 GUI for turning DSP on/off;
#X obj 30 17219 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 17216 envelope editor widget;
#X obj 30 17244 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 17241 UI stereo gain control;
#X obj 30 17269 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 17266 UI gain control;
#X obj 30 17294 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 17291 simple icon with button capabilities;
#X obj 30 17319 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 17316 value increment/decrement;
#X obj 30 17344 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 17341 keyboard widget;
#X obj 30 17369 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 17366 knob widget;
#X obj 30 17394 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 17391 simple label widget;
#X obj 30 17419 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 17416 Hyperlink widget;
#X obj 30 17444 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 17441 The matrix of toggles has you.;
#X obj 30 17469 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 17466 Dropdown menu;
#X obj 30 17494 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 17491 Shows peak and rms signal level;
#X obj 30 17519 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 17516 filter mouse events from ui objects;
#X obj 30 17544 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 17541 routes mouse events from ui objects;
#X obj 30 17569 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 17566 counterpart of the vanilla [nbx];
#X obj 30 17594 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 17591 counterpart of the vanilla [nbx] for signal;
#X obj 30 17619 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 17616 signal plotter;
#X obj 30 17644 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 17641 2D slider in polar coordinates;
#X obj 30 17669 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 17666 Preset manager;
#X obj 30 17694 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 17691 counterpart of the vanilla radio toggle;
#X obj 30 17719 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 17716 range slider;
#X obj 30 17744 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 17741 Scope GUI object;
#X obj 30 17769 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 17766 counterpart of the vanilla slider;
#X obj 30 17794 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 17791 2D slider widget;
#X obj 30 17819 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 17816 Multiple slider widget;
#X obj 30 17844 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 17841 Spectroscope GUI object;
#X obj 30 17869 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 17866 displays a list of text buttons or text toggles;
#X obj 30 17894 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 17891 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 17916 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 17916 version: v0.9.0 \, license: GPL3;
#X obj 20 17944 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 17967 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 17931 msg 0;
#X obj 670 17966 switch~;
#X connect 1236 0 1237 0;