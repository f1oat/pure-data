// data_string.lexer.cpp generated by reflex 3.0.12 from data_string.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_noyywrap
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_reentrant
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_YYLTYPE             ceammc::ds::location
#define REFLEX_OPTION_YYSTYPE             ceammc::ds::DataStringParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc::ds
#define REFLEX_OPTION_bison_cc_parser     DataStringParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "data_string.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               DataStringLexer
#define REFLEX_OPTION_namespace           ceammc::ds
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "data_string.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::ds::DataStringParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ceammc::ds::DataStringParser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "data_string.l"

    # include <string>
    # include <memory>

    # include "lex/data_string.parser.hpp"
    # include "lex/data_string.location.hpp"
    # include "ceammc_log.h"

    using token = ceammc::ds::DataStringParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {

class DataStringLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 12 "data_string.l"

    public:
        size_t output_indent = {0};

        std::string indent(size_t n = 0) const {
            return std::string(output_indent + n, ' ');
        }

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  DataStringLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ceammc::ds::location location(void)
  {
    ceammc::ds::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ceammc::ds::DataStringParser::symbol_type lex(void);
};

} // namespace ceammc
} // namespace ds

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 21 "data_string.l"

    # include "fmt/format.h"

#line 30 "data_string.l"
/*%option graphs-file*/
/*%option debug*/
/*%option perf-report*/

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace ceammc
} // namespace ds

ceammc::ds::DataStringParser::symbol_type ceammc::ds::DataStringLexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return ceammc::ds::DataStringParser::symbol_type(0, location());
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule data_string.l:67: {space} :
#line 67 "data_string.l"
            break;
          case 2: // rule data_string.l:68: , :
#line 68 "data_string.l"
{ return DataStringParser::make_COMMA(location()); }
            break;
          case 3: // rule data_string.l:69: null :
#line 69 "data_string.l"
{ return DataStringParser::make_NULL(location()); }
            break;
          case 4: // rule data_string.l:70: true :
#line 70 "data_string.l"
{ return DataStringParser::make_FLOAT(1, location()); }
            break;
          case 5: // rule data_string.l:71: false :
#line 71 "data_string.l"
{ return DataStringParser::make_FLOAT(0, location()); }
            break;
          case 6: // rule data_string.l:72: S/{string} :
#line 72 "data_string.l"
{ return DataStringParser::make_DATA_TYPE_STRING(location()); }
            break;
          case 7: // rule data_string.l:73: {data_type}/{open_list} :
#line 73 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 8: // rule data_string.l:74: {data_type}/{open_dict} :
#line 74 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 9: // rule data_string.l:75: {func_call}/{open_list} :
#line 75 "data_string.l"
{ return DataStringParser::make_FUNC_CALL(text(), location()); }
            break;
          case 10: // rule data_string.l:76: {open_dict} :
#line 76 "data_string.l"
{ return DataStringParser::make_OPEN_DICT_BRACKET(location()); }
            break;
          case 11: // rule data_string.l:77: {close_dict} :
#line 77 "data_string.l"
{ return DataStringParser::make_CLOSE_DICT_BRACKET(location()); }
            break;
          case 12: // rule data_string.l:78: {open_list} :
#line 78 "data_string.l"
{ return DataStringParser::make_OPEN_LIST_BRACKET(location()); }
            break;
          case 13: // rule data_string.l:79: {close_list} :
#line 79 "data_string.l"
{ return DataStringParser::make_CLOSE_LIST_BRACKET(location()); }
            break;
          case 14: // rule data_string.l:80: {float} :
#line 80 "data_string.l"
{ return DataStringParser::make_FLOAT(std::strtod(text(), 0), location()); }
            break;
          case 15: // rule data_string.l:81: {hex} :
#line 81 "data_string.l"
{
                          try {
                           long hex = std::stoi(text(), 0, 16);
                           return DataStringParser::make_FLOAT(hex, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid hex: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 16: // rule data_string.l:91: {bin} :
#line 91 "data_string.l"
{
                          std::string str(text() + 2);
                          try {
                           long bin = std::stoi(str.c_str(), 0, 2);
                           return DataStringParser::make_FLOAT(bin, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid bin: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 17: // rule data_string.l:102: {key} :
#line 102 "data_string.l"
{
                          std::string key(str());
                          key.pop_back(); // remove trailing ':'
                          return DataStringParser::make_KEY(key, location());
                        }
            break;
          case 18: // rule data_string.l:107: {symbol} :
#line 107 "data_string.l"
{ return DataStringParser::make_SYMBOL(text(), location()); }
            break;
          case 19: // rule data_string.l:108: {string} :
#line 108 "data_string.l"
{
                          std::string str(text() + 1);
                          str.pop_back();
                          return DataStringParser::make_STRING(str, location());
                        }

            break;
          case 20: // rule data_string.l:114: . :
#line 114 "data_string.l"
{
                          std::string line = matcher().line();
                          std::string err;

                          if(strcmp("`", text()) == 0)
                            err = " - stray ` found, use quotes: \"``\"";
                          else if(strcmp("\"", text()) == 0)
                            err = " - unmatched \" found, use quotes: \"`\"\"";
                          else if(strcmp("[", text()) == 0)
                            err = " - unmatched [ found, use quotes: \"[\"";
                          else if(strcmp("]", text()) == 0)
                            err = " - unmatched ] found, use quotes: \"]\"";
                          else if(strcmp("(", text()) == 0)
                            err = " - unmatched '(' found, use quotes: \"(\"";
                          else
                            err = fmt::format("unmatched lexer input: '{}'", text());

                          out() << fmt::format("error while parsing '{}': {}", line, err);

                          return DataStringParser::make_LEXER_ERROR(location()); /* error */
                        }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 137 "data_string.l"

# include "fmt/format.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace ceammc {
namespace ds {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S56;
  if (c1 == 'n') goto S29;
  if (c1 == 'f') goto S83;
  if ('a' <= c1 && c1 <= 'z') goto S169;
  if (c1 == '_') goto S327;
  if (c1 == ']') goto S198;
  if (c1 == '[') goto S195;
  if (c1 == 'S') goto S110;
  if ('A' <= c1 && c1 <= 'Z') goto S140;
  if (c1 == '@') goto S327;
  if ('1' <= c1 && c1 <= '9') goto S234;
  if (c1 == '0') goto S207;
  if (c1 == '/') goto S258;
  if (c1 == '.') goto S327;
  if (c1 == '-') goto S302;
  if (c1 == ',') goto S26;
  if (c1 == '+') goto S322;
  if (c1 == ')') goto S204;
  if (c1 == '(') goto S201;
  if (c1 == '%') goto S258;
  if (c1 == '#') goto S327;
  if (c1 == '"') goto S276;
  if (c1 == ' ') goto S293;
  if (c1 == '\n') goto S298;
  if (c1 == '\t') goto S293;
  if (0 <= c1) goto S290;
  return m.FSM_HALT(c1);

S26:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S29:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'u') goto S351;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S56:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'r') goto S463;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S83:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('b' <= c1 && c1 <= 'z') goto S382;
  if (c1 == 'a') goto S489;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S110:
  m.FSM_TAKE(18);
  m.FSM_HEAD(0);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S533;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if (c1 == '[') goto S530;
  if ('A' <= c1 && c1 <= 'Z') goto S533;
  if (c1 == '@') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S527;
  if (c1 == '#') goto S407;
  if (c1 == '"') goto S515;
  if ('!' <= c1 && c1 <= '\'') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S140:
  m.FSM_TAKE(18);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S533;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if (c1 == '[') goto S530;
  if ('A' <= c1 && c1 <= 'Z') goto S533;
  if (c1 == '@') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S527;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S169:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S195:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S198:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S201:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S204:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'x') goto S561;
  if (c1 == 'b') goto S586;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if (c1 == 'X') goto S561;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S610;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S234:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S633;
  if (c1 == '.') goto S610;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S258:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('*' <= c1 && c1 <= '9') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S276:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S684;
  if (241 <= c1 && c1 <= 243) goto S682;
  if (c1 == 240) goto S680;
  if (238 <= c1 && c1 <= 239) goto S678;
  if (c1 == 237) goto S676;
  if (225 <= c1 && c1 <= 236) goto S674;
  if (c1 == 224) goto S672;
  if (194 <= c1 && c1 <= 223) goto S670;
  if (192 <= c1) return m.FSM_HALT(c1);
  if (128 <= c1 && c1 <= 191) goto S290;
  if (c1 == '`') goto S686;
  if (c1 == '"') goto S656;
  if (0 <= c1 && c1 <= 127) goto S658;
  return m.FSM_HALT(c1);

S290:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  return m.FSM_HALT(c1);

S293:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  if (c1 == ' ') goto S298;
  if ('\t' <= c1 && c1 <= '\n') goto S298;
  return m.FSM_HALT(c1);

S298:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S298;
  if ('\t' <= c1 && c1 <= '\n') goto S298;
  return m.FSM_HALT(c1);

S302:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('1' <= c1 && c1 <= '9') goto S712;
  if (c1 == '0') goto S692;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S322:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('1' <= c1 && c1 <= '9') goto S736;
  if (c1 == '0') goto S731;
  return m.FSM_HALT(c1);

S327:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (128 <= c1 && c1 <= 191) goto S290;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S351:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'l') goto S740;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S377:
  m.FSM_TAKE(9);
  m.FSM_TAIL(3);
  return m.FSM_HALT();

S380:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S382:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S407:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S430:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('*' <= c1 && c1 <= '9') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S447:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S449:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S766;
  return m.FSM_HALT(c1);

S451:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S768;
  return m.FSM_HALT(c1);

S453:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S770;
  return m.FSM_HALT(c1);

S455:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S772;
  return m.FSM_HALT(c1);

S457:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S774;
  return m.FSM_HALT(c1);

S459:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S776;
  return m.FSM_HALT(c1);

S461:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S778;
  return m.FSM_HALT(c1);

S463:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'u') goto S780;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S489:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'l') goto S806;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S515:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S849;
  if (241 <= c1 && c1 <= 243) goto S847;
  if (c1 == 240) goto S845;
  if (238 <= c1 && c1 <= 239) goto S843;
  if (c1 == 237) goto S841;
  if (225 <= c1 && c1 <= 236) goto S839;
  if (c1 == 224) goto S837;
  if (194 <= c1 && c1 <= 223) goto S835;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S851;
  if (c1 == '"') goto S832;
  if (0 <= c1 && c1 <= 127) goto S515;
  return m.FSM_HALT(c1);

S527:
  m.FSM_TAKE(7);
  m.FSM_TAIL(1);
  return m.FSM_HALT();

S530:
  m.FSM_TAKE(8);
  m.FSM_TAIL(2);
  return m.FSM_HALT();

S533:
  m.FSM_TAKE(18);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S533;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if (c1 == '[') goto S530;
  if ('A' <= c1 && c1 <= 'Z') goto S533;
  if (c1 == '@') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S407;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S527;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S561:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('g' <= c1 && c1 <= 'z') goto S407;
  if ('a' <= c1 && c1 <= 'f') goto S857;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('A' <= c1 && c1 <= 'F') goto S857;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S857;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S586:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('2' <= c1 && c1 <= '9') goto S407;
  if ('0' <= c1 && c1 <= '1') goto S882;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S610:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S906;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S633:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S633;
  if (c1 == '.') goto S610;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S656:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S658:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S684;
  if (241 <= c1 && c1 <= 243) goto S682;
  if (c1 == 240) goto S680;
  if (238 <= c1 && c1 <= 239) goto S678;
  if (c1 == 237) goto S676;
  if (225 <= c1 && c1 <= 236) goto S674;
  if (c1 == 224) goto S672;
  if (194 <= c1 && c1 <= 223) goto S670;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S686;
  if (c1 == '"') goto S656;
  if (0 <= c1 && c1 <= 127) goto S658;
  return m.FSM_HALT(c1);

S670:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S672:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S929;
  return m.FSM_HALT(c1);

S674:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S931;
  return m.FSM_HALT(c1);

S676:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S933;
  return m.FSM_HALT(c1);

S678:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S935;
  return m.FSM_HALT(c1);

S680:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S937;
  return m.FSM_HALT(c1);

S682:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S939;
  return m.FSM_HALT(c1);

S684:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S941;
  return m.FSM_HALT(c1);

S686:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S658;
  if (c1 == ':') goto S658;
  if (c1 == '.') goto S658;
  if ('(' <= c1 && c1 <= ')') goto S658;
  if (c1 == '"') goto S658;
  return m.FSM_HALT(c1);

S692:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if (c1 == 'x') goto S943;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (c1 == 'X') goto S943;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if (c1 == '.') goto S963;
  if ('*' <= c1 && c1 <= '9') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S712:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S712;
  if (c1 == '.') goto S963;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S731:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S981;
  if (c1 == 'X') goto S981;
  if (c1 == '.') goto S985;
  return m.FSM_HALT(c1);

S736:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S736;
  if (c1 == '.') goto S985;
  return m.FSM_HALT(c1);

S740:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'l') goto S987;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S766:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S768:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S770:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S772:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S774:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1012;
  return m.FSM_HALT(c1);

S776:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1014;
  return m.FSM_HALT(c1);

S778:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1016;
  return m.FSM_HALT(c1);

S780:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'e') goto S1018;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S806:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 's') goto S1043;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S832:
  m.FSM_TAKE(6);
  m.FSM_TAIL(0);
  return m.FSM_HALT();

S835:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S837:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1069;
  return m.FSM_HALT(c1);

S839:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1071;
  return m.FSM_HALT(c1);

S841:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1073;
  return m.FSM_HALT(c1);

S843:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1075;
  return m.FSM_HALT(c1);

S845:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1077;
  return m.FSM_HALT(c1);

S847:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1079;
  return m.FSM_HALT(c1);

S849:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1081;
  return m.FSM_HALT(c1);

S851:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S515;
  if (c1 == ':') goto S515;
  if (c1 == '.') goto S515;
  if ('(' <= c1 && c1 <= ')') goto S515;
  if (c1 == '"') goto S515;
  return m.FSM_HALT(c1);

S857:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('g' <= c1 && c1 <= 'z') goto S407;
  if ('a' <= c1 && c1 <= 'f') goto S857;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('A' <= c1 && c1 <= 'F') goto S857;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S857;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S882:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('2' <= c1 && c1 <= '9') goto S407;
  if ('0' <= c1 && c1 <= '1') goto S882;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S906:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S407;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S906;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S929:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S931:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S933:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S935:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S937:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1083;
  return m.FSM_HALT(c1);

S939:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1085;
  return m.FSM_HALT(c1);

S941:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1087;
  return m.FSM_HALT(c1);

S943:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('g' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'f') goto S1089;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if ('A' <= c1 && c1 <= 'F') goto S1089;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S1089;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S963:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S1109;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S981:
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S1127;
  if ('A' <= c1 && c1 <= 'F') goto S1127;
  if ('0' <= c1 && c1 <= '9') goto S1127;
  return m.FSM_HALT(c1);

S985:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S1132;
  return m.FSM_HALT(c1);

S987:
  m.FSM_TAKE(3);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1012:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S1014:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S1016:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S430;
  return m.FSM_HALT(c1);

S1018:
  m.FSM_TAKE(4);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1043:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if (c1 == 'e') goto S1135;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1069:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1071:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1073:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1075:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1077:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1160;
  return m.FSM_HALT(c1);

S1079:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1162;
  return m.FSM_HALT(c1);

S1081:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1164;
  return m.FSM_HALT(c1);

S1083:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S1085:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S1087:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S658;
  return m.FSM_HALT(c1);

S1089:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('g' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'f') goto S1089;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if ('A' <= c1 && c1 <= 'F') goto S1089;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S1089;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1109:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('a' <= c1 && c1 <= 127) goto S430;
  if ('^' <= c1 && c1 <= '_') goto S430;
  if (';' <= c1 && c1 <= 'Z') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S1109;
  if ('*' <= c1 && c1 <= '/') goto S430;
  if ('#' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1127:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S1127;
  if ('A' <= c1 && c1 <= 'F') goto S1127;
  if ('0' <= c1 && c1 <= '9') goto S1127;
  return m.FSM_HALT(c1);

S1132:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S1132;
  return m.FSM_HALT(c1);

S1135:
  m.FSM_TAKE(5);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S461;
  if (241 <= c1 && c1 <= 243) goto S459;
  if (c1 == 240) goto S457;
  if (238 <= c1 && c1 <= 239) goto S455;
  if (c1 == 237) goto S453;
  if (225 <= c1 && c1 <= 236) goto S451;
  if (c1 == 224) goto S449;
  if (194 <= c1 && c1 <= 223) goto S447;
  if ('{' <= c1 && c1 <= 127) goto S430;
  if ('a' <= c1 && c1 <= 'z') goto S382;
  if (c1 == '_') goto S407;
  if (c1 == '^') goto S430;
  if ('@' <= c1 && c1 <= 'Z') goto S407;
  if (c1 == ':') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  if (c1 == '.') goto S407;
  if ('*' <= c1 && c1 <= '?') goto S430;
  if (c1 == '(') goto S377;
  if ('$' <= c1 && c1 <= '\'') goto S430;
  if (c1 == '#') goto S407;
  if (c1 == '!') goto S430;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S430;
  return m.FSM_HALT(c1);

S1160:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1162:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);

S1164:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S515;
  return m.FSM_HALT(c1);
}

} // namespace ceammc

} // namespace ds

