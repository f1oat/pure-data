#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 an.pitchtrack~;
#X text 200 153 pitch tracker;
#X obj 20 180 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 221 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 array.bpm;
#X text 200 232 BPM calculator;
#X obj 30 259 array.copy;
#X text 200 259 copy samples from one array to another;
#X obj 30 286 array.do;
#X text 200 286 iterate and modify array content via side-chain;
#X obj 30 313 array.each;
#X text 200 313 process each array elements via side-chain;
#X obj 30 340 array.fill;
#X text 200 340 fill array with single value or pattern;
#X obj 30 367 array.mean;
#X text 200 367 calculates array arithmetic mean value;
#X obj 30 394 array.minmax;
#X text 200 394 find array min and max element value;
#X obj 30 421 array.set;
#X text 200 421 set array content from list;
#X obj 30 448 array.stretch;
#X text 200 448 array time-stretch \, pitch-shift or rate-change;
#X obj 30 475 array.sum;
#X text 200 475 calculates sum of array elements;
#X obj 30 502 array.sum2;
#X text 200 502 calculates sum of squares of array elements;
#X obj 30 529 array.vplay;
#X text 200 529 simple array player for using with vline~;
#X obj 30 556 array.window;
#X text 200 556 fill array with window;
#X obj 20 583 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 624 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 638 ui.link @title [function] @url function-help.pd;
#X text 200 635 named function;
#X obj 30 658 function.call;
#X text 200 658 call named function;
#X obj 30 685 gain~;
#X text 200 685 multislot signal gain;
#X obj 30 712 matrix~;
#X text 200 712 signal routing matrix;
#X obj 30 739 metro.pattern;
#X text 200 739 metro with rhythmic patterns;
#X obj 30 766 metro.seq;
#X text 200 766 metro sequencer;
#X obj 30 793 mix~;
#X text 200 793 multislot signal mixer;
#X obj 30 820 obj.props;
#X text 200 820 property extractor;
#X obj 30 847 radio;
#X text 200 847 float index to outlet values as radio switch;
#X obj 30 874 window;
#X text 200 874 returns window value by given window position;
#X obj 30 901 xfade2~;
#X text 200 901 multi stereo-signal crossfade;
#X obj 30 928 xfade~;
#X text 200 928 multi signal crossfade;
#X obj 20 955 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 996 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1007 array.p2s;
#X text 200 1007 convert array phase [0\..1] to sample position;
#X obj 30 1034 array.s2p;
#X text 200 1034 convert array sample position to relative phase
position [0\..1];
#X obj 30 1071 conv.amp2dbfs;
#X text 200 1071 convert from amplitude to decibel full scale;
#X obj 30 1098 conv.bpm2hz;
#X text 200 1098 converts BPM to frequency in herz;
#X obj 30 1125 conv.bpm2ms;
#X text 200 1125 convert frequency in BPM to period in milliseconds;
#X obj 30 1152 conv.bpm2sec;
#X text 200 1152 convert frequency in BPM to period in seconds;
#X obj 30 1179 conv.cc2amp;
#X text 200 1179 convert from MIDI Control Change range;
#X obj 30 1206 conv.dbfs2amp;
#X text 200 1206 convert decibel full scale to amplitude;
#X obj 30 1233 conv.lin2curve;
#X text 200 1233 map linear to exponential range with 0 allowed.;
#X obj 30 1260 conv.lin2exp;
#X text 200 1260 maps linear range to exponential range;
#X obj 30 1287 conv.lin2lin;
#X text 200 1287 convert from one linear range to another;
#X obj 30 1314 conv.list2props;
#X text 200 1314 converts list to series of property messages;
#X obj 30 1341 conv.midi2freq;
#X text 200 1341 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1378 conv.pitch2midi;
#X text 200 1378 converts symbol pitch name to MIDI note number;
#X obj 30 1405 conv.samp2sec;
#X text 200 1405 convert samples to time according to samplerate;
#X obj 30 1432 conv.sec2samp;
#X text 200 1432 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1469 conv.sec2str;
#X text 200 1469 converts float time in seconds to formated symbol (or
string);
#X obj 30 1506 conv.str2sec;
#X text 200 1506 converts formatted time to float value in seconds;
#X obj 20 1533 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1574 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1585 data.dict;
#X text 200 1585 dictionary container: store values by key;
#X obj 30 1612 data.fifo;
#X text 200 1612 First-In-First-Out (FIFO) queue data container;
#X obj 30 1639 data.float;
#X text 200 1639 robust float object;
#X obj 30 1666 data.int;
#X text 200 1666 robust int object;
#X obj 30 1693 data.list;
#X text 200 1693 list container;
#X obj 30 1720 data.mlist;
#X text 200 1720 multidimensional list container;
#X obj 30 1747 data.set;
#X text 200 1747 container that store unique elements;
#X obj 30 1774 data.set2list;
#X text 200 1774 converts set to list;
#X obj 30 1801 dict.contains;
#X text 200 1801 predicate to check dict contains key;
#X obj 30 1828 dict.each;
#X text 200 1828 map each value in dict;
#X obj 30 1855 dict.from_list;
#X text 200 1855 creates dictionary from list;
#X obj 30 1882 dict.get;
#X text 200 1882 on input dict outputs value to corresponding key
outlet;
#X obj 30 1909 dict.keys;
#X text 200 1909 get list of dict keys;
#X obj 30 1936 dict.pass;
#X text 200 1936 passes specified keys in dict;
#X obj 30 1963 dict.reject;
#X text 200 1963 rejects specified keys from dict;
#X obj 30 1990 dict.size;
#X text 200 1990 dictionary size;
#X obj 30 2017 dict.to_list;
#X text 200 2017 converts dictionary to plain list;
#X obj 30 2044 dict.values;
#X text 200 2044 dictionary values as mlist;
#X obj 30 2071 mlist.flatten;
#X text 200 2071 flatten nested mlist;
#X obj 30 2098 set.contains;
#X text 200 2098 check if specified element is in set;
#X obj 30 2125 set.diff;
#X text 200 2125 difference between two sets;
#X obj 30 2152 set.equal;
#X text 200 2152 checks if two sets are equal (contains same
elements);
#X obj 30 2179 set.intersect;
#X text 200 2179 output intersection of given sets;
#X obj 30 2206 set.size;
#X text 200 2206 get number of elements in set;
#X obj 30 2233 set.symdiff;
#X text 200 2233 symmetric difference between two sets;
#X obj 30 2260 set.union;
#X text 200 2260 output union of given sets;
#X obj 20 2287 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2328 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2339 dyn.comp2~;
#X text 200 2339 stereo dynamic range compressor;
#X obj 30 2366 dyn.comp~;
#X text 200 2366 mono dynamic range compressors;
#X obj 30 2393 dyn.gate2~;
#X text 200 2393 stereo signal gate;
#X obj 30 2420 dyn.gate~;
#X text 200 2420 mono signal gate;
#X obj 30 2447 dyn.limit2~;
#X text 200 2447 stereo 1176LN Peak Limiter;
#X obj 30 2474 dyn.limit~;
#X text 200 2474 mono 1176LN Peak Limiter;
#X obj 30 2501 dyn.softclip~;
#X text 200 2501 soft signal clip;
#X obj 20 2528 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2569 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2580 env.adsr~;
#X text 200 2580 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2607 env.ar~;
#X text 200 2607 Attack/Release envelope generator;
#X obj 30 2634 env.asr~;
#X text 200 2634 Attack/Sustain/Release envelope generator;
#X obj 30 2661 env.concat;
#X text 200 2661 Envelope concatenation;
#X obj 30 2688 env.follow~;
#X text 200 2688 Envelope follower with independent attack and release
times;
#X obj 30 2715 env.mix;
#X text 200 2715 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2752 env.smooth~;
#X text 200 2752 An envelope with an exponential attack and release;
#X obj 30 2779 env.tscale;
#X text 200 2779 Envelope time-scale;
#X obj 30 2806 env.tshift;
#X text 200 2806 Envelope time-shift (horizontal);
#X obj 30 2833 env.vscale;
#X text 200 2833 Envelope value-scale;
#X obj 30 2860 env2array;
#X text 200 2860 Renders envelope to specified array;
#X obj 30 2887 env2vline;
#X text 200 2887 Converts envelope to bunch of vline messages;
#X obj 30 2914 envelope;
#X text 200 2914 Envelope data type;
#X obj 30 2941 vline2env;
#X text 200 2941 Converts vline messages to env;
#X obj 20 2968 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3009 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3020 expand_env;
#X text 200 3020 Substitute enviroment variables in data stream;
#X obj 30 3047 flow.append;
#X text 200 3047 inject message into flow;
#X obj 30 3074 flow.change;
#X text 200 3074 rejects redundant input values;
#X obj 30 3101 flow.count;
#X text 200 3101 control flow event counter;
#X obj 30 3128 flow.demultiplex;
#X text 200 3128 control flow demultiplexer;
#X obj 30 3155 flow.demultiplex2~;
#X text 200 3155 audio stream stereo demultiplexer;
#X obj 30 3182 flow.demultiplex~;
#X text 200 3182 audio stream demultiplexer;
#X obj 30 3209 flow.gate;
#X text 200 3209 control flow gate. [spigot] analog;
#X obj 30 3236 flow.group;
#X text 200 3236 group data atoms in list of specified size;
#X obj 30 3263 flow.interval;
#X text 200 3263 measure time between flow events;
#X obj 30 3290 flow.less;
#X text 200 3290 numeric stream router \, like many [moses];
#X obj 30 3317 flow.less_eq;
#X text 200 3317 numeric stream router \, like many [moses];
#X obj 30 3344 flow.multiplex;
#X text 200 3344 control flow multiplexer;
#X obj 30 3371 flow.multiplex2~;
#X text 200 3371 audio stream stereo multiplexer;
#X obj 30 3398 flow.multiplex~;
#X text 200 3398 audio stream multiplexer;
#X obj 30 3425 flow.once;
#X text 200 3425 one message pass thru;
#X obj 30 3452 flow.pass;
#X text 200 3452 pass specified values;
#X obj 30 3479 flow.pass_if;
#X text 200 3479 pass values that accepted by predicate object;
#X obj 30 3506 flow.reject;
#X text 200 3506 reject specified values;
#X obj 30 3533 flow.reject_if;
#X text 200 3533 reject values by predicate;
#X obj 30 3560 flow.route;
#X text 200 3560 advanced message router;
#X obj 30 3587 flow.speedlim;
#X text 200 3587 control stream speed limiter;
#X obj 30 3614 flow.split;
#X text 200 3614 split data flow by external side-chain predicate;
#X obj 30 3641 flow.sync;
#X text 200 3641 bus with only hot inlets;
#X obj 30 3668 flow.tee~;
#X text 200 3668 separate audio and control streams;
#X obj 30 3695 replace;
#X text 200 3695 Replace atoms in data stream;
#X obj 20 3722 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3763 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3774 flt.biquad~;
#X text 200 3774 second order IIR filter.;
#X obj 30 3801 flt.bpf12~;
#X text 200 3801 Band-pass filter with 12/db per octave slope;
#X obj 30 3828 flt.bpf24~;
#X text 200 3828 Band-pass filter with 24/db per octave slope;
#X obj 30 3855 flt.c_bpf~;
#X text 200 3855 BPF coefficient calculator for biquad filter;
#X obj 30 3882 flt.c_highshelf~;
#X text 200 3882 Highshelf filter coefficient calculator for biquad;
#X obj 30 3909 flt.c_hpf~;
#X text 200 3909 HPF coefficient calculator for biquad filter;
#X obj 30 3936 flt.c_lowshelf~;
#X text 200 3936 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3963 flt.c_lpf~;
#X text 200 3963 LPF coefficient calculator for biquad filter;
#X obj 30 3990 flt.c_notch~;
#X text 200 3990 Band-reject coefficient calculator for biquad filter;
#X obj 30 4017 flt.c_peak~;
#X text 200 4017 Peaking equalizer calculator for biquad;
#X obj 30 4044 flt.dcblock2~;
#X text 200 4044 stereo DC blocker;
#X obj 30 4071 flt.dcblock~;
#X text 200 4071 mono DC blocker;
#X obj 30 4098 flt.eq10~;
#X text 200 4098 graphic 10 band equalizer;
#X obj 30 4125 flt.eq_peak_cq~;
#X text 200 4125 constant-Q second order peaking equalizer section;
#X obj 30 4152 flt.eq_peak~;
#X text 200 4152 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 4203 flt.highshelf~;
#X text 200 4203 gain boost|cut above some frequency;
#X obj 30 4230 flt.hpf12~;
#X text 200 4230 High-pass filter with 12/db per octave slope;
#X obj 30 4257 flt.hpf24~;
#X text 200 4257 High-pass filter with 24/db per octave slope;
#X obj 30 4284 flt.lowshelf~;
#X text 200 4284 gain boost|cut below some frequency;
#X obj 30 4311 flt.lpf12~;
#X text 200 4311 Low-pass filter with 12/db per octave slope;
#X obj 30 4338 flt.lpf24~;
#X text 200 4338 Low-pass filter with 24/db per octave slope;
#X obj 30 4365 flt.median;
#X text 200 4365 Median control flow filter;
#X obj 30 4392 flt.moog_vcf~;
#X text 200 4392 Moog Voltage Controlled Filter;
#X obj 30 4419 flt.notch~;
#X text 200 4419 band-rejection filter;
#X obj 30 4446 flt.resonbp~;
#X text 200 4446 Simple resonant bandpass filter;
#X obj 20 4473 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4514 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4525 fx.bitdown~;
#X text 200 4525 bit downer and downsampler effect;
#X obj 30 4552 fx.chorus~;
#X text 200 4552 Chorus effect;
#X obj 30 4579 fx.distortion~;
#X text 200 4579 cubic nonlinearity distortion;
#X obj 30 4606 fx.drive~;
#X text 200 4606 Guitarix drive effect;
#X obj 30 4633 fx.drone_box~;
#X text 200 4633 mono sympathetic resonance generator;
#X obj 30 4660 fx.echo~;
#X text 200 4660 simple echo effect;
#X obj 30 4687 fx.flanger~;
#X text 200 4687 mono flanging effect;
#X obj 30 4714 fx.freeverb2~;
#X text 200 4714 freeverb2 - stereo version of freeverb;
#X obj 30 4741 fx.freeverb~;
#X text 200 4741 freeverb - common used open-source reverb;
#X obj 30 4768 fx.freqshift~;
#X text 200 4768 frequency shifter or single-sideband ring modulation;
#X obj 30 4795 fx.granulator~;
#X text 200 4795 simple input stream granulator;
#X obj 30 4822 fx.greyhole~;
#X text 200 4822 A complex echo-like effect;
#X obj 30 4849 fx.looper~;
#X text 200 4849 One track looper;
#X obj 30 4876 fx.pitchshift~;
#X text 200 4876 simple pitch shifter based on 2 delay lines;
#X obj 30 4903 fx.sdelay~;
#X text 200 4903 smooth delay with a feedback control;
#X obj 30 4930 fx.vocoder~;
#X text 200 4930 very simple vocoder where the spectrum of the
modulation signal is analyzed using a 32-band filter bank;
#X obj 30 4967 fx.wahwah~;
#X text 200 4967 digitized CryBaby wah pedal;
#X obj 30 4994 fx.zita_rev1~;
#X text 200 4994 Zita stereo reverb;
#X obj 20 5021 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5062 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5073 global.dict;
#X text 200 5073 global named dict object;
#X obj 30 5100 global.float;
#X text 200 5100 global named float object;
#X obj 30 5127 global.int;
#X text 200 5127 global named integer object;
#X obj 30 5154 global.list;
#X text 200 5154 global named list object;
#X obj 30 5181 global.mlist;
#X text 200 5181 global named mlist object;
#X obj 30 5208 global.set;
#X text 200 5208 global named set object;
#X obj 20 5235 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5276 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5287 hw.apple_smc;
#X text 200 5287 query the system management control in Apples;
#X obj 30 5314 hw.apple_sms;
#X text 200 5314 query the sudden motion sensor in Apples;
#X obj 30 5341 hw.arduino;
#X text 200 5341 Arduino device;
#X obj 30 5368 hw.cpu_temp;
#X text 200 5368 get CPU temperature;
#X obj 30 5395 hw.kbd_light;
#X text 200 5395 Get/set keyboard light on some devices;
#X obj 20 5422 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5463 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5474 lfo.+pulse~;
#X text 200 5474 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5501 lfo.+saw~;
#X text 200 5501 Positive unit-amplitude low frequency saw wave;
#X obj 30 5528 lfo.+square~;
#X text 200 5528 Positive low frequency square wave;
#X obj 30 5555 lfo.+tri~;
#X text 200 5555 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5582 lfo.impulse~;
#X text 200 5582 Unit-amplitude low-frequency impulse train;
#X obj 30 5609 lfo.pulse~;
#X text 200 5609 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5636 lfo.saw~;
#X text 200 5636 Full-range unit-amplitude low frequency saw;
#X obj 30 5663 lfo.square~;
#X text 200 5663 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5690 lfo.tri~;
#X text 200 5690 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5717 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5758 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5769 list.^at;
#X text 200 5769 on input index(es) outputs list element(s);
#X obj 30 5796 list.^contains;
#X text 200 5796 on input atom or list checks if specified list
contains it;
#X obj 30 5823 list.^search;
#X text 200 5823 on input atom returns it index in list;
#X obj 30 5850 list.all_of;
#X text 200 5850 checks if all list atoms accepted by predicate;
#X obj 30 5877 list.any_of;
#X text 200 5877 checks if at least one list element is accepted by
predicate;
#X obj 30 5914 list.append;
#X text 200 5914 append atom or list to the end of input list;
#X obj 30 5941 list.apply_to;
#X text 200 5941 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5978 list.at;
#X text 200 5978 on input list outputs element(s) at specified
index(es);
#X obj 30 6005 list.choice;
#X text 200 6005 returns random element from list;
#X obj 30 6032 list.contains;
#X text 200 6032 on input list checks if it contains specified
subsequence;
#X obj 30 6059 list.count;
#X text 200 6059 returns the number of items that equal to specified
value;
#X obj 30 6086 list.count_if;
#X text 200 6086 returns the number of items that satisfy to external
predicate.;
#X obj 30 6123 list.delta;
#X text 200 6123 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6160 list.distribution;
#X text 200 6160 list value distribution;
#X obj 30 6187 list.do;
#X text 200 6187 iterate and modify list contents via side-chain;
#X obj 30 6214 list.each;
#X text 200 6214 maps each list value via external object(s);
#X obj 30 6241 list.enumerate;
#X text 200 6241 enumerates input list;
#X obj 30 6268 list.equal;
#X text 200 6268 checks if given lists are equal;
#X obj 30 6295 list.first;
#X text 200 6295 returns first list element;
#X obj 30 6322 list.gen;
#X text 200 6322 generates list of specified length via external
generator;
#X obj 30 6349 list.histogram;
#X text 200 6349 outputs distribution histogram;
#X obj 30 6376 list.insert;
#X text 200 6376 insert atom or list to the specified position of
input list;
#X obj 30 6403 list.integrator;
#X text 200 6403 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 6440 list.last;
#X text 200 6440 returns last list element;
#X obj 30 6467 list.length;
#X text 200 6467 returns the number of atoms in the list;
#X obj 30 6494 list.max;
#X text 200 6494 returns largest element in the list;
#X obj 30 6521 list.mean;
#X text 200 6521 calculates average of list of floats;
#X obj 30 6548 list.min;
#X text 200 6548 returns smallest element in the list;
#X obj 30 6575 list.none_of;
#X text 200 6575 checks if none of list atoms is accepted by
predicate;
#X obj 30 6602 list.normalize;
#X text 200 6602 normalizes float list values to get their sum = 1.0;
#X obj 30 6629 list.pass_if;
#X text 200 6629 leave only elements accepted by predicate;
#X obj 30 6656 list.prepend;
#X text 200 6656 prepend atom or list before input list;
#X obj 30 6683 list.product;
#X text 200 6683 calculates product of floats in list;
#X obj 30 6710 list.range;
#X text 200 6710 returns list smallest and largest value;
#X obj 30 6737 list.reduce;
#X text 200 6737 apply function of two arguments cumulatively to the
list;
#X obj 30 6764 list.remove;
#X text 200 6764 on input list remove element(s) at specified
positions;
#X obj 30 6791 list.remove_if;
#X text 200 6791 remove elements by predicate;
#X obj 30 6818 list.repack;
#X text 200 6818 repack input list to specified size;
#X obj 30 6845 list.repeat;
#X text 200 6845 creates new list by repeating given list specified
times;
#X obj 30 6872 list.resize;
#X text 200 6872 changes list size;
#X obj 30 6899 list.reverse;
#X text 200 6899 reverses the order of the elements in the list;
#X obj 30 6926 list.rldecode;
#X text 200 6926 Run-length list decoder (RLE);
#X obj 30 6953 list.rlencode;
#X text 200 6953 RLE (run-length encoding) for lists;
#X obj 30 6980 list.rotate;
#X text 200 6980 rotates list;
#X obj 30 7007 list.route;
#X text 200 7007 acts like [route] but for lists;
#X obj 30 7034 list.search;
#X text 200 7034 search specified items in input list;
#X obj 30 7061 list.separate;
#X text 200 7061 sends list elements one by one separately;
#X obj 30 7088 list.seq;
#X text 200 7088 numeric sequence list generator;
#X obj 30 7115 list.set;
#X text 200 7115 on input list set value at specified position;
#X obj 30 7142 list.shift;
#X text 200 7142 shifts the contents of the list with linear
interpolation;
#X obj 30 7169 list.shuffle;
#X text 200 7169 randomly rearranges elements in list;
#X obj 30 7196 list.slice;
#X text 200 7196 extract sublist;
#X obj 30 7223 list.sort;
#X text 200 7223 sorts list values by ascending order;
#X obj 30 7250 list.sort_with;
#X text 200 7250 sort list with user defined side-chain;
#X obj 30 7277 list.split;
#X text 200 7277 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7314 list.stretch;
#X text 200 7314 stretches list - chenges its size with linear
interpolation.;
#X obj 30 7351 list.sum;
#X text 200 7351 calculates sum of floats in list;
#X obj 30 7378 list.unique;
#X text 200 7378 removes duplicates from input list;
#X obj 30 7405 list.unpack;
#X text 200 7405 unpack list elements to separate outlets;
#X obj 30 7432 list.unzip;
#X text 200 7432 splits list to N lists \, each to separate output;
#X obj 30 7459 list.walk;
#X text 200 7459 Walks thru the list;
#X obj 30 7486 list.zip;
#X text 200 7486 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7537 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7578 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7589 live.capture~;
#X text 200 7589 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7626 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7667 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7678 local.dict;
#X text 200 7678 local named dict object;
#X obj 30 7705 local.float;
#X text 200 7705 canvas-scoped named float variable;
#X obj 30 7732 local.int;
#X text 200 7732 canvas-scoped named integer variable;
#X obj 30 7759 local.list;
#X text 200 7759 local named list object;
#X obj 30 7786 local.mlist;
#X text 200 7786 local named mlist object;
#X obj 30 7813 local.set;
#X text 200 7813 local named set object;
#X obj 20 7840 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7881 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7892 math.abs;
#X text 200 7892 absolute value function;
#X obj 30 7919 math.acos;
#X text 200 7919 arc cosine function;
#X obj 30 7946 math.acosh;
#X text 200 7946 inverse hyperbolic cosine function;
#X obj 30 7973 math.and;
#X text 200 7973 operation AND for multiple arguments;
#X obj 30 8000 math.approx;
#X text 200 8000 check if input value approximately equal to pattern;
#X obj 30 8027 math.asin;
#X text 200 8027 arc sine function;
#X obj 30 8054 math.asinh;
#X text 200 8054 inverse hyperbolic sine function;
#X obj 30 8081 math.atan;
#X text 200 8081 arc tangent function;
#X obj 30 8108 math.atanh;
#X text 200 8108 inverse hyperbolic tangent function;
#X obj 30 8135 math.cbrt;
#X text 200 8135 cube root function;
#X obj 30 8162 math.cdiv~;
#X text 200 8162 division of complex signals;
#X obj 30 8189 math.ceil;
#X text 200 8189 round to smallest integral value not less than input
value;
#X obj 30 8216 math.cmul~;
#X text 200 8216 multiplication of complex signals;
#X obj 30 8243 math.cos;
#X text 200 8243 cosine function;
#X obj 30 8270 math.cosh;
#X text 200 8270 hyperbolic cosine function;
#X obj 30 8297 math.div;
#X text 200 8297 division (on lists too);
#X obj 30 8324 math.e;
#X text 200 8324 mathematical constant \, base of the natural
logarithm;
#X obj 30 8351 math.exp;
#X text 200 8351 exponential functions;
#X obj 30 8378 math.exp2;
#X text 200 8378 exponential functions;
#X obj 30 8405 math.expr;
#X text 200 8405 dynamic [expr];
#X obj 30 8432 math.floor;
#X text 200 8432 round to largest integral value not greater than x;
#X obj 30 8459 math.gcd;
#X text 200 8459 calculate greatest common divisor;
#X obj 30 8486 math.inf;
#X text 200 8486 infinity value that cannot be represented accurately;
#X obj 30 8513 math.lcm;
#X text 200 8513 calculate least common multiple;
#X obj 30 8540 math.log;
#X text 200 8540 logarithm functions;
#X obj 30 8567 math.log10;
#X text 200 8567 logarithm functions;
#X obj 30 8594 math.log2;
#X text 200 8594 logarithm functions;
#X obj 30 8621 math.mul;
#X text 200 8621 multiplication (on lists too);
#X obj 30 8648 math.nan;
#X text 200 8648 Not a Number \, unrepresentable value;
#X obj 30 8675 math.neg;
#X text 200 8675 negate function;
#X obj 30 8702 math.or;
#X text 200 8702 operation OR for multiple arguments;
#X obj 30 8729 math.pi;
#X text 200 8729 mathematical constant;
#X obj 30 8756 math.polyeval;
#X text 200 8756 evaluates the polynomial described by the
coefficients list;
#X obj 30 8783 math.reciprocal;
#X text 200 8783 calculate reciprocal number;
#X obj 30 8810 math.round;
#X text 200 8810 round to integral value \, regardless of rounding
direction;
#X obj 30 8837 math.round~;
#X text 200 8837 signal round;
#X obj 30 8864 math.sign;
#X text 200 8864 sign function;
#X obj 30 8891 math.sin;
#X text 200 8891 sine function;
#X obj 30 8918 math.sinh;
#X text 200 8918 hyperbolic sine function;
#X obj 30 8945 math.sqrt;
#X text 200 8945 square root function;
#X obj 30 8972 math.squared;
#X text 200 8972 value square;
#X obj 30 8999 math.tan;
#X text 200 8999 tangent function;
#X obj 30 9026 math.tanh;
#X text 200 9026 hyperbolic tangent function;
#X obj 30 9053 math.trunc;
#X text 200 9053 truncate to integer value;
#X obj 20 9080 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 9121 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9132 midi.ctl2str;
#X text 200 9132 convert Standard MIDI Controllers number to name;
#X obj 30 9159 midi.event2ctl;
#X text 200 9159 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9186 midi.event2note;
#X text 200 9186 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9213 midi.event2prg;
#X text 200 9213 convert MidiEvent message to midi program change
value;
#X obj 30 9240 midi.file;
#X text 200 9240 standard midi file SMF reader and writer;
#X obj 30 9267 midi.key2str;
#X text 200 9267 convert key number to SPN name according to tonality;
#X obj 30 9294 midi.prg2str;
#X text 200 9294 convert GM Instrument number to name (string or
symbol);
#X obj 30 9321 midi.track;
#X text 200 9321 extract track from MidiFile;
#X obj 20 9348 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9389 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9400 click~;
#X text 200 9400 Output single impulse on bang;
#X obj 30 9427 fluid~;
#X text 200 9427 FluidSynth SoundFont 2 player;
#X obj 30 9454 modplug~;
#X text 200 9454 MOD file player (using libmodplug);
#X obj 30 9481 speech.flite;
#X text 200 9481 render speech to array;
#X obj 20 9508 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9549 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9560 msg;
#X text 200 9560 message constructor;
#X obj 30 9587 msg.after;
#X text 200 9587 send specified message after incoming message;
#X obj 30 9614 msg.onload;
#X text 200 9614 send message when patch loads;
#X obj 20 9641 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9682 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9693 net.host2ip;
#X text 200 9693 returns IP address by DNS name;
#X obj 20 9720 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9761 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9772 noise.crackle~;
#X text 200 9772 sparse noise generator;
#X obj 30 9799 noise.lfreq0~;
#X text 200 9799 sampled/held noise (piecewise constant);
#X obj 30 9826 noise.lfreq~;
#X text 200 9826 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9853 noise.pink~;
#X text 200 9853 Pink noise generator;
#X obj 30 9880 noise.white~;
#X text 200 9880 White noise generator;
#X obj 20 9907 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9948 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9959 osc.blit~;
#X text 200 9959 Bandlimited impulse train oscillator;
#X obj 30 9986 osc.impulse~;
#X text 200 9986 Bandlimited impulse train generator;
#X obj 30 10013 osc.pulse~;
#X text 200 10013 Bandlimited pulse train oscillator;
#X obj 30 10040 osc.saw4~;
#X text 200 10040 Bandlimited sawtooth wave;
#X obj 30 10067 osc.saw~;
#X text 200 10067 Alias-free sawtooth wave;
#X obj 30 10094 osc.sinfb~;
#X text 200 10094 Sine oscilator with feedback;
#X obj 30 10121 osc.sin~;
#X text 200 10121 Sine wave oscillator;
#X obj 30 10148 osc.square~;
#X text 200 10148 Bandlimited square wave oscillator;
#X obj 30 10175 osc.tri~;
#X text 200 10175 Bandlimited triangle wave oscillator;
#X obj 20 10202 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10243 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10254 canvas.current;
#X text 200 10254 verbose information about current canvas;
#X obj 30 10281 canvas.top;
#X text 200 10281 verbose information about top-level canvas;
#X obj 30 10308 patch.args;
#X text 200 10308 Get patch or subpatch arguments;
#X obj 20 10335 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10376 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10387 path.basename;
#X text 200 10387 outputs filename portion of pathname;
#X obj 30 10414 path.dirname;
#X text 200 10414 outputs directory portion of pathname;
#X obj 30 10441 path.exists;
#X text 200 10441 checks if given path exists;
#X obj 30 10468 path.lsdir;
#X text 200 10468 list directory contents;
#X obj 20 10495 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10536 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10547 is_any;
#X text 200 10547 checks if input data has *any* type;
#X obj 30 10574 is_bang;
#X text 200 10574 checks if input data has *bang* type;
#X obj 30 10601 is_data;
#X text 200 10601 checks if input data has *data* type;
#X obj 30 10628 is_dict;
#X text 200 10628 checks if input data has *dict* type;
#X obj 30 10655 is_even;
#X text 200 10655 checks if input number is even;
#X obj 30 10682 is_file;
#X text 200 10682 checks if file exists and accessible;
#X obj 30 10709 is_float;
#X text 200 10709 checks if input data has *float* type;
#X obj 30 10736 is_list;
#X text 200 10736 checks if input data has *list* type;
#X obj 30 10763 is_odd;
#X text 200 10763 checks if input number is odd;
#X obj 30 10790 is_pointer;
#X text 200 10790 checks if input data has *pointer* type;
#X obj 30 10817 is_symbol;
#X text 200 10817 checks if input data has *symbol* type;
#X obj 20 10844 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10885 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10896 preset.float;
#X text 200 10896 load/store float preset;
#X obj 30 10923 preset.list;
#X text 200 10923 load/store symbol preset;
#X obj 30 10950 preset.storage;
#X text 200 10950 preset storage control;
#X obj 30 10977 preset.symbol;
#X text 200 10977 load/store symbol preset;
#X obj 20 11004 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 11045 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11056 patch.props;
#X text 200 11056 patch properties manager;
#X obj 30 11083 prop;
#X text 200 11083 get/set named property value for subpatch or
abstraction;
#X obj 30 11110 prop.declare;
#X text 200 11110 declare named property for subpatch or abstraction;
#X obj 30 11137 prop.get;
#X text 200 11137 Property extractor;
#X obj 30 11164 prop.get~;
#X text 200 11164 Property extractor from sound stream;
#X obj 30 11191 prop.set;
#X text 200 11191 Property injector;
#X obj 20 11218 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11270 proto.firmata;
#X text 200 11270 Firmata Arduino protocol support;
#X obj 20 11297 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11338 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11349 random.discrete;
#X text 200 11349 random weighted integers on interval [0 \, n);
#X obj 30 11376 random.float;
#X text 200 11376 random float generator in specified range;
#X obj 30 11403 random.gauss;
#X text 200 11403 gaussian random distribution;
#X obj 30 11430 random.int;
#X text 200 11430 Random integer generator in specified range;
#X obj 30 11457 random.linear;
#X text 200 11457 random linear distribution;
#X obj 30 11484 random.pw_const;
#X text 200 11484 piecewise constant random distribution;
#X obj 30 11511 random.pw_lin;
#X text 200 11511 piecewise linear random distribution;
#X obj 20 11538 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11579 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11590 snd.file;
#X text 200 11590 Sound file loader on steroids;
#X obj 20 11617 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11658 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11669 pan.cos~;
#X text 200 11669 two channel equal power sine/cosine panner;
#X obj 30 11696 pan.linsig~;
#X text 200 11696 two channel linear panner with signal control;
#X obj 30 11723 pan.lin~;
#X text 200 11723 two channel linear panner;
#X obj 30 11750 pan.spread~;
#X text 200 11750 spreads input channels across the stereo field;
#X obj 30 11777 pan.sqrt~;
#X text 200 11777 two channel equal power square root panner;
#X obj 30 11804 spat.pan4~;
#X text 200 11804 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11831 spat.pan8~;
#X text 200 11831 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11858 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11899 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11910 string;
#X text 200 11910 string constructor;
#X obj 30 11937 string.contains;
#X text 200 11937 checks if given string contains specified substring;
#X obj 30 11964 string.ends_with;
#X text 200 11964 checks if given string ends with specified suffix;
#X obj 30 11991 string.equal;
#X text 200 11991 check strings for equality;
#X obj 30 12018 string.format;
#X text 200 12018 formats string like printf.;
#X obj 30 12045 string.join;
#X text 200 12045 joins (concatenates) strings with separator;
#X obj 30 12072 string.length;
#X text 200 12072 number of characters in string (unicode supported);
#X obj 30 12099 string.remove;
#X text 200 12099 remove substring from input string;
#X obj 30 12126 string.replace;
#X text 200 12126 replace from one substring to another in input
string;
#X obj 30 12153 string.split;
#X text 200 12153 split string by separator;
#X obj 30 12180 string.starts_with;
#X text 200 12180 checks if given string starts with specified prefix;
#X obj 30 12207 string.substr;
#X text 200 12207 extract substring from input string;
#X obj 30 12234 string2symbol;
#X text 200 12234 converts string to symbol;
#X obj 20 12261 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12302 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12313 symbol.equal;
#X text 200 12313 check symbols for equality;
#X obj 30 12340 symbol.length;
#X text 200 12340 number of characters in symbol (unicode supported);
#X obj 30 12367 symbol.num_compare;
#X text 200 12367 numeric symbol compare;
#X obj 20 12394 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12435 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12446 synth.bee3~;
#X text 200 12446 Hammond-oid organ FM synthesis instrument;
#X obj 30 12473 synth.birds~;
#X text 200 12473 bird singing generator;
#X obj 30 12500 synth.church_bell~;
#X text 200 12500 generic church bell modal model;
#X obj 30 12527 synth.dubdub~;
#X text 200 12527 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12564 synth.eguitar~;
#X text 200 12564 simple electric guitar model with steel strings;
#X obj 30 12591 synth.fgrain~;
#X text 200 12591 file granulator from STK;
#X obj 30 12618 synth.ks~;
#X text 200 12618 Karplus-Strong string;
#X obj 30 12645 synth.marimba~;
#X text 200 12645 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12682 synth.rhodey~;
#X text 200 12682 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12709 synth.risset_arp~;
#X text 200 12709 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12736 synth.risset_tone~;
#X text 200 12736 Jean Claude Risset's endless glissando;
#X obj 30 12763 synth.shakers~;
#X text 200 12763 various percussion sounds from STK library;
#X obj 30 12790 synth.wurley~;
#X text 200 12790 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12817 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12858 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12869 system.cursor;
#X text 200 12869 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12906 system.getenv;
#X text 200 12906 Get system environment variables;
#X obj 30 12933 system.hostname;
#X text 200 12933 outputs system hostname;
#X obj 30 12960 system.memsize;
#X text 200 12960 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12997 system.memused;
#X text 200 12997 returns the process physical memory use - current
and peak;
#X obj 30 13024 system.screen_size;
#X text 200 13024 returns current screen size in pixels;
#X obj 30 13051 system.shell;
#X text 200 13051 run external command in separate process;
#X obj 20 13078 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 13119 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13130 tl.bang;
#X text 200 13130 Timeline bang (with possible delay);
#X obj 30 13160 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 13157 Timeline section;
#X obj 30 13180 tl.timeline;
#X text 200 13180 Timeline - event scheduler;
#X obj 30 13207 tl.toggle;
#X text 200 13207 Timeline bang;
#X obj 30 13234 tl.transport;
#X text 200 13234 Timeline transport control;
#X obj 20 13261 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13302 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13316 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 13313 array view with cursor and selection;
#X obj 30 13339 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 13336 A bang... that's all;
#X obj 30 13362 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 13359 colorchooser widget;
#X obj 30 13385 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 13382 Display GUI object;
#X obj 30 13408 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 13405 GUI for turning DSP on/off;
#X obj 30 13431 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 13428 envelope editor widget;
#X obj 30 13454 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 13451 UI stereo gain control;
#X obj 30 13477 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 13474 UI gain control;
#X obj 30 13500 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 13497 simple icon with button capabilities;
#X obj 30 13523 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 13520 value increment/decrement;
#X obj 30 13546 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 13543 keyboard widget;
#X obj 30 13569 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 13566 knob widget;
#X obj 30 13592 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 13589 simple label widget;
#X obj 30 13615 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 13612 Hyperlink widget;
#X obj 30 13638 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 13635 The matrix of toggles has you.;
#X obj 30 13661 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 13658 Dropdown menu;
#X obj 30 13684 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 13681 Shows peak and rms signal level;
#X obj 30 13707 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 13704 counterpart of the vanilla [nbx];
#X obj 30 13730 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 13727 counterpart of the vanilla [nbx] for signal;
#X obj 30 13753 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 13750 Preset manager;
#X obj 30 13776 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 13773 counterpart of the vanilla radio toggle;
#X obj 30 13799 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 13796 range slider;
#X obj 30 13822 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 13819 Scope GUI object;
#X obj 30 13845 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 13842 counterpart of the vanilla slider;
#X obj 30 13868 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 13865 2D slider widget;
#X obj 30 13891 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 13888 Multiple slider widget;
#X obj 30 13914 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 13911 Spectroscope GUI object;
#X obj 30 13937 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 13934 displays a list of text buttons or text toggles;
#X obj 30 13960 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 13957 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13980 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13980 version: v0.7.1 \, license: GPL3;
#X obj 20 13999 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;