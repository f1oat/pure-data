#ifndef ceammc_rust_core_h
#define ceammc_rust_core_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>
#include <cstddef>


enum class ceammc_mdns_iface {
    ANY,
    V4,
    V6,
};

enum class ceammc_mdns_rc {
    OK,
    /**
     * when NULL service pointer given
     */
    NULLSERVICE,
    SERVICEERROR,
    INVALIDSTRING,
    BROWSEFAILED,
    SETOPTIONERROR,
    SERVICENOTFOUND,
};

struct ceammc_mdns;

struct ceammc_net_addr4;

struct ceammc_net_addr6;

struct ceammc_net_iface;

struct ceammc_net_iface_addr;

struct ceammc_net_iface_addr4;

struct ceammc_net_iface_addr6;

struct ceammc_net_ifaces;

struct ceammc_mdns_cb_err {
    void *user;
    void (*cb)(void *user, const char *msg);
};

struct ceammc_mdns_cb_srv {
    void *user;
    void (*cb)(void *user, const char *ty, const char *fullname, bool found);
};

struct ceammc_mdns_ip_addr {
    const char *addr;
    bool is_ipv4;
};

struct ceammc_mdns_txt_prop {
    const char *key;
    const char *value;
};

struct ceammc_mdns_service_info {
    /**
     * service type, for ex.: _osc._udp.local.
     */
    const char *stype;
    const char *fullname;
    const char *hostname;
    /**
     * service port
     */
    uint16_t port;
    uint32_t host_ttl;
    uint32_t other_ttl;
    uint16_t priority;
    uint16_t weight;
    /**
     * pointer to array of ip addresses
     */
    const ceammc_mdns_ip_addr *ip;
    /**
     * number of service ip addresses
     */
    size_t ip_len;
    /**
     * pointer to array of txt properties
     */
    const ceammc_mdns_txt_prop *txt;
    /**
     * number of txt properties
     */
    size_t txt_len;
};

struct ceammc_mdns_cb_resolv {
    void *user;
    void (*cb)(void *user, const ceammc_mdns_service_info *info);
};

/**
 * `ty_domain` is the service type and the domain label, for example
 * "_my-service._udp.local.".
 *
 * `my_name` is the instance name, without the service type suffix.
 *
 * `host_name` is the "host" in the context of DNS. It is used as the "name"
 * in the address records (i.e. TYPE_A and TYPE_AAAA records). It means that
 * for the same hostname in the same local network, the service resolves in
 * the same addresses. Be sure to check it if you see unexpected addresses resolved.
 */
struct ceammc_mdns_service_info_register {
    /**
     * service type, for example "_my-service._udp", or "_my-service._udp.local.".
     */
    const char *service;
    /**
     * the instance name, without the service type suffix, for example "My Service v1.1"
     */
    const char *name;
    /**
     * is the "host" in the context of DNS. It is used as the "name"
     * in the address records (i.e. TYPE_A and TYPE_AAAA records). It means that
     * for the same hostname in the same local network, the service resolves in
     * the same addresses. Be sure to check it if you see unexpected addresses resolved.
     */
    const char *host;
    /**
     * service port
     */
    uint16_t port;
    /**
     * pointer to array of txt properties
     */
    const ceammc_mdns_txt_prop *txt;
    /**
     * number of txt properties
     */
    size_t txt_len;
    /**
     * network interface to listen
     */
    ceammc_mdns_iface iface;
};

struct ceammc_net_err_cb {
    void *user;
    void (*cb)(void *user, const char *msg);
};

extern "C" {

/**
 * create new MDNS service handler
 * @param on_err - error callback
 * @param on_srv - on service found/remove
 * @return pointer to MDNS service or NULL on error
 */
ceammc_mdns *ceammc_mdns_create(ceammc_mdns_cb_err on_err,
                                ceammc_mdns_cb_srv on_srv,
                                ceammc_mdns_cb_resolv on_resolv);

/**
 * enable/disable network interfaces to search for mdns services
 * @param mdns - pointer to mdns struct
 * @param name - network interface name, for example:
 *  - '*', 'all' (all network interfaces)
 *  - 'ipv4' (all ip v4 interfaces)
 *  - 'ipv6' (all ip v6 interfaces)
 *  - '127.0.0.1' etc (interface ip address)
 *  - 'lo0', 'eth1' (interface name)
 *
 * @note '!' can't be added to disable interface, for ex.: '!ipv6'
 * @return mdns_rc::Ok on success or other codes on error
 */
ceammc_mdns_rc ceammc_mdns_enable_iface(ceammc_mdns *mdns, const char *name);

/**
 * free mdns handler
 * @param mdns - pointer to mdns struct created with ceammc_mdns_create()
 */
void ceammc_mdns_free(ceammc_mdns *mdns);

/**
 * unsubscribe from mdns service
 * @param mdns - pointer to mdns
 * @return mdns_rc
 */
ceammc_mdns_rc ceammc_mdns_process_events(ceammc_mdns *mdns, uint64_t timeout_ms);

/**
 * register mdns service
 * @param mdns - mdns service pointer
 * @param info - service info pointer
 * @return mdns_rc
 */
ceammc_mdns_rc ceammc_mdns_register(ceammc_mdns *mdns,
                                    const ceammc_mdns_service_info_register *info);

/**
 * search fir MDNS service in the internal cache
 * @param mdns - mdns handle
 * @param name - instance name
 * @param service - mdns service type
 * @return true if service was found, false otherwise
 * you can get resolve information via mdns callbacks
 */
bool ceammc_mdns_resolve(ceammc_mdns *mdns, const char *name, const char *service);

/**
 * subscribe to mdns service events
 * @param mdns - pointer to mdns
 * @param service: mdns service name
 * @return mdns_rc
 * @note can block up to 10ms in case of eagain
 */
ceammc_mdns_rc ceammc_mdns_subscribe(ceammc_mdns *mdns, const char *service);

/**
 * unregister MDNS service
 * @note can block timeout_ms on eagain socket error
 * @param mdns - mdns handle
 * @param name - instance name
 * @param service - mdns service type
 * @param timeout_ms - timeout for unregister in milliseconds
 * @return mdns_rc::Ok on success and other codes or error
 */
ceammc_mdns_rc ceammc_mdns_unregister(ceammc_mdns *mdns,
                                      const char *name,
                                      const char *service,
                                      uint64_t timeout_ms);

/**
 * unsubscribe from mdns service
 * @param mdns - pointer to mdns
 * @param service name
 * @return mdns_rc
 */
ceammc_mdns_rc ceammc_mdns_unsubscribe(ceammc_mdns *mdns, const char *service);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_bcast(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_doc(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_link(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_loop(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_mcast(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_priv(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr4_is_unspec(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
const uint8_t *ceammc_net_addr4_octets(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
const char *ceammc_net_addr4_str(const ceammc_net_addr4 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr6_is_loop(const ceammc_net_addr6 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr6_is_mcast(const ceammc_net_addr6 *x);

/**
 * @param x - non NULL!
 */
bool ceammc_net_addr6_is_unspec(const ceammc_net_addr6 *x);

/**
 * @param x - non NULL!
 */
const uint8_t *ceammc_net_addr6_octets(const ceammc_net_addr6 *x);

/**
 * @param x - non NULL!
 */
const char *ceammc_net_addr6_str(const ceammc_net_addr6 *x);

const ceammc_net_iface_addr4 *ceammc_net_as_ifa_v4(const ceammc_net_iface_addr *va);

const ceammc_net_iface_addr6 *ceammc_net_as_ifa_v6(const ceammc_net_iface_addr *va);

/**
 * free network interface list
 * @param ifl - pointer to list (non-NULL)
 */
size_t ceammc_net_foreach_interfaces(const ceammc_net_ifaces *ifl,
                                     void *user,
                                     void (*cb)(void *user, const ceammc_net_iface *ni));

/**
 * free network interface list
 * @param ifl - pointer to list
 */
void ceammc_net_free_interfaces(ceammc_net_ifaces *ifl);

/**
 * @param x - non NULL!
 * return pointer to network interface broadcast address v4
 * @note can return NULL!
 */
const ceammc_net_addr4 *ceammc_net_ifa_bcast4(const ceammc_net_iface_addr4 *x);

/**
 * @param x - non NULL!
 * @return pointer to network interface broadcast address v6
 * @note can return NULL!
 */
const ceammc_net_addr6 *ceammc_net_ifa_bcast6(const ceammc_net_iface_addr6 *x);

/**
 * @param x - non NULL!
 * @return pointer to network interface ip address v4
 * @note always return valid pointer
 */
const ceammc_net_addr4 *ceammc_net_ifa_ip4(const ceammc_net_iface_addr4 *x);

/**
 * @param x - non NULL!
 * @return pointer to network interface ip address v6
 * @note always return valid pointer
 */
const ceammc_net_addr6 *ceammc_net_ifa_ip6(const ceammc_net_iface_addr6 *x);

/**
 * @param x - non NULL!
 * return pointer to network interface mask address v4
 * @note can return NULL!
 */
const ceammc_net_addr4 *ceammc_net_ifa_mask4(const ceammc_net_iface_addr4 *x);

/**
 * @param x - non NULL!
 * return pointer to network interface mask address v6
 * @note can return NULL!
 */
const ceammc_net_addr6 *ceammc_net_ifa_mask6(const ceammc_net_iface_addr6 *x);

const ceammc_net_iface_addr *ceammc_net_iface_get_addr(const ceammc_net_iface *ni, size_t i);

uint32_t ceammc_net_iface_index(const ceammc_net_iface *ni);

const char *ceammc_net_iface_mac(const ceammc_net_iface *ni);

const char *ceammc_net_iface_name(const ceammc_net_iface *ni);

size_t ceammc_net_iface_num_addr(const ceammc_net_iface *ni);

bool ceammc_net_is_ifa_v4(const ceammc_net_iface_addr *va);

bool ceammc_net_is_ifa_v6(const ceammc_net_iface_addr *va);

/**
 * return pointer to network interface list
 * you should free it with ceammc_net_free_interfaces
 * @param err_cb - error callbacks (can be NULL)
 * @return pointer to interface list or NULL on error
 */
__attribute__((warn_unused_result))
ceammc_net_ifaces *ceammc_net_list_interfaces(ceammc_net_err_cb err_cb);

} // extern "C"

#endif // ceammc_rust_core_h
