// data_string.lexer.cpp generated by reflex 2.1.5 from data_string.l

#define REFLEX_VERSION "2.1.5"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::ds::location
#define REFLEX_OPTION_YYSTYPE             ceammc::ds::DataStringParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc::ds
#define REFLEX_OPTION_bison_cc_parser     DataStringParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "data_string.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               DataStringLexer
#define REFLEX_OPTION_namespace           ceammc::ds
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "data_string.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::ds::DataStringParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ceammc::ds::DataStringParser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "data_string.l"

    # include <string>
    # include <memory>

    # include "lex/data_string.parser.hpp"
    # include "lex/data_string.location.hpp"
    # include "ceammc_log.h"

    using token = ceammc::ds::DataStringParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {

class DataStringLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 12 "data_string.l"

    public:
        size_t output_indent = {0};

        std::string indent(size_t n = 0) const {
            return std::string(output_indent + n, ' ');
        }

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  DataStringLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ceammc::ds::location location(void)
  {
    ceammc::ds::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ceammc::ds::DataStringParser::symbol_type lex(void);
};

} // namespace ceammc
} // namespace ds

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 21 "data_string.l"

    # include "fmt/format.h"

#line 30 "data_string.l"
/*%option graphs-file*/
/*%option debug*/
/*%option perf-report*/

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace ceammc
} // namespace ds

ceammc::ds::DataStringParser::symbol_type ceammc::ds::DataStringLexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return ceammc::ds::DataStringParser::symbol_type(0, location());
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule data_string.l:67: {space} :
#line 67 "data_string.l"
            break;
          case 2: // rule data_string.l:68: , :
#line 68 "data_string.l"
{ return DataStringParser::make_COMMA(location()); }
            break;
          case 3: // rule data_string.l:69: null :
#line 69 "data_string.l"
{ return DataStringParser::make_NULL(location()); }
            break;
          case 4: // rule data_string.l:70: true :
#line 70 "data_string.l"
{ return DataStringParser::make_FLOAT(1, location()); }
            break;
          case 5: // rule data_string.l:71: false :
#line 71 "data_string.l"
{ return DataStringParser::make_FLOAT(0, location()); }
            break;
          case 6: // rule data_string.l:72: S/{string} :
#line 72 "data_string.l"
{ return DataStringParser::make_DATA_TYPE_STRING(location()); }
            break;
          case 7: // rule data_string.l:73: {data_type}/{open_list} :
#line 73 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 8: // rule data_string.l:74: {data_type}/{open_dict} :
#line 74 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 9: // rule data_string.l:75: {func_call}/{open_list} :
#line 75 "data_string.l"
{ return DataStringParser::make_FUNC_CALL(text(), location()); }
            break;
          case 10: // rule data_string.l:76: {open_dict} :
#line 76 "data_string.l"
{ return DataStringParser::make_OPEN_DICT_BRACKET(location()); }
            break;
          case 11: // rule data_string.l:77: {close_dict} :
#line 77 "data_string.l"
{ return DataStringParser::make_CLOSE_DICT_BRACKET(location()); }
            break;
          case 12: // rule data_string.l:78: {open_list} :
#line 78 "data_string.l"
{ return DataStringParser::make_OPEN_LIST_BRACKET(location()); }
            break;
          case 13: // rule data_string.l:79: {close_list} :
#line 79 "data_string.l"
{ return DataStringParser::make_CLOSE_LIST_BRACKET(location()); }
            break;
          case 14: // rule data_string.l:80: {float} :
#line 80 "data_string.l"
{ return DataStringParser::make_FLOAT(std::strtod(text(), 0), location()); }
            break;
          case 15: // rule data_string.l:81: {hex} :
#line 81 "data_string.l"
{
                          try {
                           long hex = std::stoi(text(), 0, 16);
                           return DataStringParser::make_FLOAT(hex, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid hex: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 16: // rule data_string.l:91: {bin} :
#line 91 "data_string.l"
{
                          std::string str(text() + 2);
                          try {
                           long bin = std::stoi(str.c_str(), 0, 2);
                           return DataStringParser::make_FLOAT(bin, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid bin: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 17: // rule data_string.l:102: {key} :
#line 102 "data_string.l"
{
                          std::string key(str());
                          key.pop_back(); // remove trailing ':'
                          return DataStringParser::make_KEY(key, location());
                        }
            break;
          case 18: // rule data_string.l:107: {symbol} :
#line 107 "data_string.l"
{ return DataStringParser::make_SYMBOL(text(), location()); }
            break;
          case 19: // rule data_string.l:108: {string} :
#line 108 "data_string.l"
{
                          std::string str(text() + 1);
                          str.pop_back();
                          return DataStringParser::make_STRING(str, location());
                        }

            break;
          case 20: // rule data_string.l:114: . :
#line 114 "data_string.l"
{
                          std::string line = matcher().line();
                          std::string err;

                          if(strcmp("`", text()) == 0)
                            err = " - stray ` found, use quotes: \"``\"";
                          else if(strcmp("\"", text()) == 0)
                            err = " - unmatched \" found, use quotes: \"`\"\"";
                          else if(strcmp("[", text()) == 0)
                            err = " - unmatched [ found, use quotes: \"[\"";
                          else if(strcmp("]", text()) == 0)
                            err = " - unmatched ] found, use quotes: \"]\"";
                          else if(strcmp("(", text()) == 0)
                            err = " - unmatched '(' found, use quotes: \"(\"";
                          else
                            err = fmt::format("unmatched lexer input: '{}'", text());

                          out() << fmt::format("error while parsing '{}': {}", line, err);

                          return DataStringParser::make_LEXER_ERROR(location()); /* error */
                        }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 137 "data_string.l"

# include "fmt/format.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace ceammc {
namespace ds {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S53;
  if (c1 == 'n') goto S27;
  if (c1 == 'f') goto S79;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == ']') goto S189;
  if (c1 == '[') goto S187;
  if (c1 == 'S') goto S105;
  if ('A' <= c1 && c1 <= 'Z') goto S134;
  if (c1 == '@') goto S303;
  if ('1' <= c1 && c1 <= '9') goto S195;
  if (c1 == '0') goto S218;
  if (c1 == '/') goto S244;
  if (c1 == '.') goto S303;
  if (c1 == '-') goto S280;
  if (c1 == ',') goto S25;
  if (c1 == '+') goto S299;
  if (c1 == ')') goto S193;
  if (c1 == '(') goto S191;
  if (c1 == '%') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '"') goto S261;
  if (c1 == ' ') goto S276;
  if ('\t' <= c1 && c1 <= '\n') goto S276;
  if (0 <= c1) goto S274;
  return m.FSM_HALT(c1);

S25:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S27:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'u') goto S326;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'r') goto S373;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S79:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('b' <= c1 && c1 <= 'z') goto S162;
  if (c1 == 'a') goto S399;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S105:
  m.FSM_TAKE(18);
  m.FSM_HEAD(0);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S134;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if (c1 == '[') goto S440;
  if ('A' <= c1 && c1 <= 'Z') goto S134;
  if (c1 == '@') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S303;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S437;
  if (c1 == '#') goto S303;
  if (c1 == '"') goto S425;
  if ('!' <= c1 && c1 <= '\'') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S134:
  m.FSM_TAKE(18);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S134;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if (c1 == '[') goto S440;
  if ('A' <= c1 && c1 <= 'Z') goto S134;
  if (c1 == '@') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S303;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S437;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S162:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S187:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S189:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S191:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S193:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S195:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S195;
  if (c1 == '.') goto S443;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S218:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'x') goto S466;
  if (c1 == 'b') goto S491;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if (c1 == 'X') goto S466;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S195;
  if (c1 == '.') goto S443;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S244:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('*' <= c1 && c1 <= '9') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S261:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S543;
  if (241 <= c1 && c1 <= 243) goto S541;
  if (c1 == 240) goto S539;
  if (238 <= c1 && c1 <= 239) goto S537;
  if (c1 == 237) goto S535;
  if (225 <= c1 && c1 <= 236) goto S533;
  if (c1 == 224) goto S531;
  if (194 <= c1 && c1 <= 223) goto S529;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S545;
  if (c1 == '"') goto S515;
  if (0 <= c1 && c1 <= 127) goto S517;
  return m.FSM_HALT(c1);

S274:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S276:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S276;
  if ('\t' <= c1 && c1 <= '\n') goto S276;
  return m.FSM_HALT(c1);

S280:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('1' <= c1 && c1 <= '9') goto S551;
  if (c1 == '0') goto S570;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S299:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if ('1' <= c1 && c1 <= '9') goto S591;
  if (c1 == '0') goto S595;
  return m.FSM_HALT(c1);

S303:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S303;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S326:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'l') goto S601;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S352:
  m.FSM_TAKE(9);
  m.FSM_TAIL(3);
  return m.FSM_HALT();

S355:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S357:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S359:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S627;
  return m.FSM_HALT(c1);

S361:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S629;
  return m.FSM_HALT(c1);

S363:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S631;
  return m.FSM_HALT(c1);

S365:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S633;
  return m.FSM_HALT(c1);

S367:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S635;
  return m.FSM_HALT(c1);

S369:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S637;
  return m.FSM_HALT(c1);

S371:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S639;
  return m.FSM_HALT(c1);

S373:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'u') goto S641;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S399:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'l') goto S667;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S425:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S710;
  if (241 <= c1 && c1 <= 243) goto S708;
  if (c1 == 240) goto S706;
  if (238 <= c1 && c1 <= 239) goto S704;
  if (c1 == 237) goto S702;
  if (225 <= c1 && c1 <= 236) goto S700;
  if (c1 == 224) goto S698;
  if (194 <= c1 && c1 <= 223) goto S696;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S712;
  if (c1 == '"') goto S693;
  if (0 <= c1 && c1 <= 127) goto S425;
  return m.FSM_HALT(c1);

S437:
  m.FSM_TAKE(7);
  m.FSM_TAIL(1);
  return m.FSM_HALT();

S440:
  m.FSM_TAKE(8);
  m.FSM_TAIL(2);
  return m.FSM_HALT();

S443:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S718;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S466:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('g' <= c1 && c1 <= 'z') goto S303;
  if ('a' <= c1 && c1 <= 'f') goto S741;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('A' <= c1 && c1 <= 'F') goto S741;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S741;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S491:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('2' <= c1 && c1 <= '9') goto S303;
  if ('0' <= c1 && c1 <= '1') goto S766;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S515:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S517:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S543;
  if (241 <= c1 && c1 <= 243) goto S541;
  if (c1 == 240) goto S539;
  if (238 <= c1 && c1 <= 239) goto S537;
  if (c1 == 237) goto S535;
  if (225 <= c1 && c1 <= 236) goto S533;
  if (c1 == 224) goto S531;
  if (194 <= c1 && c1 <= 223) goto S529;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S545;
  if (c1 == '"') goto S515;
  if (0 <= c1 && c1 <= 127) goto S517;
  return m.FSM_HALT(c1);

S529:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S531:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S790;
  return m.FSM_HALT(c1);

S533:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S792;
  return m.FSM_HALT(c1);

S535:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S794;
  return m.FSM_HALT(c1);

S537:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S796;
  return m.FSM_HALT(c1);

S539:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S798;
  return m.FSM_HALT(c1);

S541:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S800;
  return m.FSM_HALT(c1);

S543:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S802;
  return m.FSM_HALT(c1);

S545:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S517;
  if (c1 == ':') goto S517;
  if (c1 == '.') goto S517;
  if ('(' <= c1 && c1 <= ')') goto S517;
  if (c1 == '"') goto S517;
  return m.FSM_HALT(c1);

S551:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S551;
  if (c1 == '.') goto S804;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S570:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if (c1 == 'x') goto S822;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (c1 == 'X') goto S822;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S551;
  if (c1 == '.') goto S804;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S591:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S591;
  if (c1 == '.') goto S842;
  return m.FSM_HALT(c1);

S595:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S844;
  if (c1 == 'X') goto S844;
  if ('0' <= c1 && c1 <= '9') goto S591;
  if (c1 == '.') goto S842;
  return m.FSM_HALT(c1);

S601:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'l') goto S848;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S627:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S629:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S631:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S633:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S635:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S873;
  return m.FSM_HALT(c1);

S637:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S875;
  return m.FSM_HALT(c1);

S639:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S877;
  return m.FSM_HALT(c1);

S641:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'e') goto S879;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S667:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 's') goto S904;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S693:
  m.FSM_TAKE(6);
  m.FSM_TAIL(0);
  return m.FSM_HALT();

S696:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S698:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S930;
  return m.FSM_HALT(c1);

S700:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S932;
  return m.FSM_HALT(c1);

S702:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S934;
  return m.FSM_HALT(c1);

S704:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S936;
  return m.FSM_HALT(c1);

S706:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S938;
  return m.FSM_HALT(c1);

S708:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S940;
  return m.FSM_HALT(c1);

S710:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S942;
  return m.FSM_HALT(c1);

S712:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S425;
  if (c1 == ':') goto S425;
  if (c1 == '.') goto S425;
  if ('(' <= c1 && c1 <= ')') goto S425;
  if (c1 == '"') goto S425;
  return m.FSM_HALT(c1);

S718:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S718;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S741:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('g' <= c1 && c1 <= 'z') goto S303;
  if ('a' <= c1 && c1 <= 'f') goto S741;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('A' <= c1 && c1 <= 'F') goto S741;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S741;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S766:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S303;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('2' <= c1 && c1 <= '9') goto S303;
  if ('0' <= c1 && c1 <= '1') goto S766;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S790:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S792:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S794:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S796:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S798:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S944;
  return m.FSM_HALT(c1);

S800:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S946;
  return m.FSM_HALT(c1);

S802:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S948;
  return m.FSM_HALT(c1);

S804:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S950;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S822:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('g' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'f') goto S968;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if ('A' <= c1 && c1 <= 'F') goto S968;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S968;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S842:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S988;
  return m.FSM_HALT(c1);

S844:
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S991;
  if ('A' <= c1 && c1 <= 'F') goto S991;
  if ('0' <= c1 && c1 <= '9') goto S991;
  return m.FSM_HALT(c1);

S848:
  m.FSM_TAKE(3);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S873:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S875:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S877:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S244;
  return m.FSM_HALT(c1);

S879:
  m.FSM_TAKE(4);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S904:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if (c1 == 'e') goto S996;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S930:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S932:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S934:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S936:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S938:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1021;
  return m.FSM_HALT(c1);

S940:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1023;
  return m.FSM_HALT(c1);

S942:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1025;
  return m.FSM_HALT(c1);

S944:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S946:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S948:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S517;
  return m.FSM_HALT(c1);

S950:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('a' <= c1 && c1 <= 127) goto S244;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S950;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S968:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('g' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'f') goto S968;
  if ('^' <= c1 && c1 <= '_') goto S244;
  if ('A' <= c1 && c1 <= 'F') goto S968;
  if (';' <= c1 && c1 <= 'Z') goto S244;
  if ('0' <= c1 && c1 <= '9') goto S968;
  if ('*' <= c1 && c1 <= '/') goto S244;
  if ('#' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S988:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S988;
  return m.FSM_HALT(c1);

S991:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S991;
  if ('A' <= c1 && c1 <= 'F') goto S991;
  if ('0' <= c1 && c1 <= '9') goto S991;
  return m.FSM_HALT(c1);

S996:
  m.FSM_TAKE(5);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S371;
  if (241 <= c1 && c1 <= 243) goto S369;
  if (c1 == 240) goto S367;
  if (238 <= c1 && c1 <= 239) goto S365;
  if (c1 == 237) goto S363;
  if (225 <= c1 && c1 <= 236) goto S361;
  if (c1 == 224) goto S359;
  if (194 <= c1 && c1 <= 223) goto S357;
  if ('{' <= c1 && c1 <= 127) goto S244;
  if ('a' <= c1 && c1 <= 'z') goto S162;
  if (c1 == '_') goto S303;
  if (c1 == '^') goto S244;
  if ('@' <= c1 && c1 <= 'Z') goto S303;
  if (c1 == ':') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S162;
  if (c1 == '.') goto S303;
  if ('*' <= c1 && c1 <= '?') goto S244;
  if (c1 == '(') goto S352;
  if ('$' <= c1 && c1 <= '\'') goto S244;
  if (c1 == '#') goto S303;
  if (c1 == '!') goto S244;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S244;
  return m.FSM_HALT(c1);

S1021:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S1023:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);

S1025:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S425;
  return m.FSM_HALT(c1);
}

} // namespace ceammc

} // namespace ds

