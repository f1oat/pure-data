declare name "Ceammc PureData misc utils";
declare version "0.1.3";

ba = library("basics.lib");
si = library("signals.lib");
ma = library("maths.lib");

// in puredata 0db = 100db
db_pd2faust(v) = (v - 100);

// ceammc crossfaded bypass
bypass_mono(bpc, fx, in) = ba.selectmulti(64, ((in : fx), (in)), bpc) : _;

// in puredata common time management in milliseconds
time_pd2faust(msec) = (msec / 1000.0);

// duplicate inputs
duplicate(1, x) = x;
duplicate(n, x) = x, duplicate(n-1, x);

// range
clip(lo, hi) = max(lo) : min(hi);

// map
map(xs, fx) = par(i, ba.count(xs), fx);

// si.bus
//si.bus(n) = par(i, n, _);

// dry-wet
fx_drywet(in, fx, g) = IN <: dry(in, fx, g), wet(in, fx, g) :> OUT
with {
    IN = si.bus(ba.count(in));
    OUT = IN;
    dry(in, fx, g) = map(in, *(1-g));
    wet(in, fx, g) = fx : map(in, *(g));
};

// fx-wrap
fx_wrap_mono(ui_bypass, ui_drywet, fx) = _ : ba.bypass1(ui_bypass, effect)
with {
    effect = fx_drywet(_, fx, ui_drywet);
};

fx_wrap2(bypass, drywet, fx) = _,_ : ba.bypass2(bypass, fx_drywet(si.bus(2), fx, drywet)) : _,_;

// port from guitarix
// license GPL2+
envgate(dur, trigger) = trigger : release(int(dur*float(ma.SR))) : >(0.0) with {
    decay(n,x) = x - (x>0.0)/n;
    release(n) = + ~ decay(n);
};

adsr(a, d, s, r, t) = env ~ (_,_) : (!,_) // the 2 'state' signals are fed back
with {
    env (p2,y) =
        (t>0) & (p2|(y>=1)),          // p2 = decay-sustain phase
        (y + p1*u - (p2&(y>s))*v*y - p3*w*y)	// y  = envelop signal
        *((p3==0)|(y>=eps)) // cut off tails to prevent denormals
    with {
                p1 = (p2==0) & (t>0) & (y<1);         // p1 = attack phase
                p3 = (t<=0) & (y>0);                  // p3 = release phase
                // #samples in attack, decay, release, must be >0
                na = ma.SR*a+(a==0.0); nd = ma.SR*d+(d==0.0); nr = ma.SR*r+(r==0.0);
                // correct zero sustain level
                z = s+(s==0.0)*ba.db2linear(-60);
                // attack, decay and (-60dB) release rates
                u = 1/na; v = 1-pow(z, 1/nd); w = 1-1/pow(z*ba.db2linear(60), 1/nr);
                // values below this threshold are considered zero in the release phase
                eps = ba.db2linear(-120);
    };
};
