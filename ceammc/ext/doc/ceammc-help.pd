#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value or pattern;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.variance;
#X text 200 965 calculates variance of array values;
#X obj 30 992 array.vplay;
#X text 200 992 simple array player for using with vline~;
#X obj 30 1019 array.window;
#X text 200 1019 fill array with window;
#X obj 30 1046 plot.geomspace~;
#X text 200 1046 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1086 plot.hist~;
#X text 200 1086 calculate and output signal histogram;
#X obj 30 1113 plot.linspace~;
#X text 200 1113 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1153 plot.logspace~;
#X text 200 1153 outputs numbers spaced evenly on a log scale;
#X obj 30 1180 plot.response~;
#X text 200 1180 output amp/phase freq response to impulse;
#X obj 20 1207 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1248 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1259 ceammc.search;
#X text 200 1259 ceammc library search object;
#X obj 30 1289 ui.link @title [function] @url function-help.pd;
#X text 200 1286 named function;
#X obj 30 1311 function.call;
#X text 200 1311 call named function;
#X obj 30 1338 gain~;
#X text 200 1338 multislot signal gain;
#X obj 30 1365 logger;
#X text 200 1365 advanced data logger;
#X obj 30 1392 matrix~;
#X text 200 1392 signal routing matrix;
#X obj 30 1419 metro.pattern;
#X text 200 1419 metro with rhythmic patterns;
#X obj 30 1446 metro.random;
#X text 200 1446 metro random bang with specified range;
#X obj 30 1473 metro.seq;
#X text 200 1473 metro sequencer;
#X obj 30 1500 mix~;
#X text 200 1500 multislot signal mixer;
#X obj 30 1527 nsig~;
#X text 200 1527 Mulitchannel converter from control to audio rate;
#X obj 30 1554 obj.props;
#X text 200 1554 property extractor;
#X obj 30 1581 radio;
#X text 200 1581 float index to outlet values as radio switch;
#X obj 30 1608 spring;
#X text 200 1608 float value "spring";
#X obj 30 1635 sync;
#X text 200 1635 value synchronization;
#X obj 30 1662 window;
#X text 200 1662 returns window value by given window position;
#X obj 30 1689 xdac~;
#X text 200 1689 dac~ with channel ranges;
#X obj 30 1716 xfade2~;
#X text 200 1716 multi stereo-signal crossfade;
#X obj 30 1743 xfade~;
#X text 200 1743 multi signal crossfade;
#X obj 30 1770 z~;
#X text 200 1770 sample delay;
#X obj 20 1797 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1838 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1849 chaos.gbman0;
#X text 200 1849 Gingerbreadman map chaotic generator;
#X obj 30 1876 chaos.gbman0~;
#X text 200 1876 Gingerbreadman map chaotic generator;
#X obj 30 1903 chaos.jong;
#X text 200 1903 Peter de Jong attractor;
#X obj 30 1930 chaos.logistic;
#X text 200 1930 Logistic map chaotic generator;
#X obj 30 1957 chaos.std0;
#X text 200 1957 Standard map chaotic generator;
#X obj 30 1984 chaos.std0~;
#X text 200 1984 Standard map chaotic generator;
#X obj 20 2011 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2052 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2063 array.p2s;
#X text 200 2063 convert array phase [0\..1] to sample position;
#X obj 30 2090 array.s2p;
#X text 200 2090 convert sample position to phase range [0\..1];
#X obj 30 2117 conv.amp2dbfs;
#X text 200 2117 convert from amplitude to decibel full scale;
#X obj 30 2144 conv.amp2dbfs~;
#X text 200 2144 convert from amplitude to decibel full scale;
#X obj 30 2171 conv.bits2bang;
#X text 200 2171 convert list of bits to bang events;
#X obj 30 2198 conv.bits2int;
#X text 200 2198 convert list of bits to integer;
#X obj 30 2225 conv.bits2note;
#X text 200 2225 convert list of bits to note events;
#X obj 30 2252 conv.bits2pos;
#X text 200 2252 convert list of bits to list of bit position;
#X obj 30 2279 conv.bpm2hz;
#X text 200 2279 converts BPM to frequency in hertz;
#X obj 30 2306 conv.bpm2ms;
#X text 200 2306 convert frequency in BPM to period in milliseconds;
#X obj 30 2333 conv.bpm2sec;
#X text 200 2333 convert frequency in BPM to period in seconds;
#X obj 30 2360 conv.car2pol;
#X text 200 2360 convert cartesian coords to polar;
#X obj 30 2387 conv.cc2amp;
#X text 200 2387 convert from MIDI Control Change range;
#X obj 30 2414 conv.dbfs2amp;
#X text 200 2414 convert decibel full scale to amplitude;
#X obj 30 2441 conv.dbfs2amp~;
#X text 200 2441 convert decibel full scale to amplitude;
#X obj 30 2468 conv.degree2key;
#X text 200 2468 convert scale degree to key;
#X obj 30 2495 conv.edge2bang;
#X text 200 2495 edge detector for numeric stream;
#X obj 30 2522 conv.hex2int;
#X text 200 2522 hex symbol to int value;
#X obj 30 2549 conv.int2bits;
#X text 200 2549 convert integer to list of bits;
#X obj 30 2576 conv.lin2curve;
#X text 200 2576 map linear to exponential range with 0 allowed.;
#X obj 30 2603 conv.lin2exp;
#X text 200 2603 maps linear range to exponential range;
#X obj 30 2630 conv.lin2lin;
#X text 200 2630 convert from one linear range to another;
#X obj 30 2657 conv.lin2lin~;
#X text 200 2657 convert from one linear range to another for signals;
#X obj 30 2684 conv.list2props;
#X text 200 2684 converts list to series of property messages;
#X obj 30 2711 conv.midi2freq;
#X text 200 2711 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2751 conv.ms2bpm;
#X text 200 2751 convert period in milliseconds to frequency in BPM;
#X obj 30 2778 conv.ms2samp;
#X text 200 2778 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2818 conv.ms2samp~;
#X text 200 2818 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2858 conv.note2guido;
#X text 200 2858 convert MIDI note to Guido notation;
#X obj 30 2885 conv.phase2rad;
#X text 200 2885 convert phase value [0-1] to radians [0-2π];
#X obj 30 2912 conv.phase2rad~;
#X text 200 2912 convert phase value [0-1] to radians [0-2π];
#X obj 30 2939 conv.pitch2midi;
#X text 200 2939 converts symbol pitch name to MIDI note number;
#X obj 30 2966 conv.pol2car;
#X text 200 2966 convert from polar coordinates to cartesian;
#X obj 30 2993 conv.rad2phase;
#X text 200 2993 convert radians value to phase;
#X obj 30 3020 conv.rad2phase~;
#X text 200 3020 convert radians value to phase;
#X obj 30 3047 conv.samp2ms;
#X text 200 3047 convert samples to time according to samplerate;
#X obj 30 3074 conv.samp2ms~;
#X text 200 3074 convert samples to milliseconds according to samplerate;
#X obj 30 3101 conv.samp2sec;
#X text 200 3101 convert samples to time according to samplerate;
#X obj 30 3128 conv.sec2bpm;
#X text 200 3128 convert period in seconds to frequency in BPM;
#X obj 30 3155 conv.sec2samp;
#X text 200 3155 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3195 conv.sec2str;
#X text 200 3195 converts float time in seconds to formated symbol
(or string);
#X obj 30 3222 conv.sig2float~;
#X text 200 3222 convert signal to floats;
#X obj 30 3249 conv.str2sec;
#X text 200 3249 converts formatted time to float value in seconds;
#X obj 30 3276 music.dur2time;
#X text 200 3276 convert duration list to time;
#X obj 30 3303 music.voice2midi;
#X text 200 3303 convert voice music list of midi pitches;
#X obj 20 3330 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3371 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3382 data.copy;
#X text 200 3382 make copy for any data types: MList \, Set etc...;
#X obj 30 3409 data.dict;
#X text 200 3409 dictionary container: store values by key;
#X obj 30 3436 data.fifo;
#X text 200 3436 First-In-First-Out (FIFO) queue data container;
#X obj 30 3463 data.float;
#X text 200 3463 robust float object;
#X obj 30 3490 data.int;
#X text 200 3490 robust int object;
#X obj 30 3517 data.list;
#X text 200 3517 list container;
#X obj 30 3544 data.mlist;
#X text 200 3544 multidimensional list container;
#X obj 30 3571 data.set;
#X text 200 3571 container that store unique elements;
#X obj 30 3598 data.set2list;
#X text 200 3598 converts set to list;
#X obj 30 3625 dict.contains;
#X text 200 3625 predicate to check if dict contains a keys;
#X obj 30 3652 dict.each;
#X text 200 3652 map each value in dict;
#X obj 30 3679 dict.from_list;
#X text 200 3679 creates dictionary from list;
#X obj 30 3706 dict.get;
#X text 200 3706 output dict values;
#X obj 30 3733 dict.keys;
#X text 200 3733 get list of dict keys;
#X obj 30 3760 dict.pass;
#X text 200 3760 passes specified keys in dict;
#X obj 30 3787 dict.reject;
#X text 200 3787 rejects specified keys from dict;
#X obj 30 3814 dict.size;
#X text 200 3814 dictionary size;
#X obj 30 3841 dict.to_list;
#X text 200 3841 converts dictionary to plain list;
#X obj 30 3868 dict.values;
#X text 200 3868 dictionary values as mlist;
#X obj 30 3895 mlist.flatten;
#X text 200 3895 flatten nested mlist;
#X obj 30 3922 rtree.to_list;
#X text 200 3922 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3949 set.contains;
#X text 200 3949 check if specified element is in set;
#X obj 30 3976 set.diff;
#X text 200 3976 difference between two sets;
#X obj 30 4003 set.equal;
#X text 200 4003 checks if two sets are equal (contains same elements);
#X obj 30 4030 set.intersect;
#X text 200 4030 output intersection of given sets;
#X obj 30 4057 set.size;
#X text 200 4057 get number of elements in set;
#X obj 30 4084 set.symdiff;
#X text 200 4084 symmetric difference between two sets;
#X obj 30 4111 set.union;
#X text 200 4111 output union of given sets;
#X obj 20 4138 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4179 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4190 dyn.comp2~;
#X text 200 4190 stereo dynamic range compressor;
#X obj 30 4217 dyn.comp~;
#X text 200 4217 mono dynamic range compressors;
#X obj 30 4244 dyn.gate2~;
#X text 200 4244 stereo signal gate;
#X obj 30 4271 dyn.gate~;
#X text 200 4271 mono signal gate;
#X obj 30 4298 dyn.limit2~;
#X text 200 4298 stereo 1176LN Peak Limiter;
#X obj 30 4325 dyn.limit~;
#X text 200 4325 mono 1176LN Peak Limiter;
#X obj 30 4352 dyn.softclip~;
#X text 200 4352 soft signal clip;
#X obj 20 4379 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4420 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4431 env.adsr~;
#X text 200 4431 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4458 env.ar~;
#X text 200 4458 Attack/Release envelope generator;
#X obj 30 4485 env.asr~;
#X text 200 4485 Attack/Sustain/Release envelope generator;
#X obj 30 4512 env.concat;
#X text 200 4512 Envelope concatenation;
#X obj 30 4539 env.follow~;
#X text 200 4539 Envelope follower with independent attack and release
times;
#X obj 30 4566 env.mix;
#X text 200 4566 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4606 env.smooth~;
#X text 200 4606 An envelope with an exponential attack and release;
#X obj 30 4633 env.tscale;
#X text 200 4633 Envelope time-scale;
#X obj 30 4660 env.tshift;
#X text 200 4660 Envelope time-shift (horizontal);
#X obj 30 4687 env.vscale;
#X text 200 4687 Envelope value-scale;
#X obj 30 4714 env2array;
#X text 200 4714 Renders envelope to specified array;
#X obj 30 4741 env2vline;
#X text 200 4741 Converts envelope to bunch of vline messages;
#X obj 30 4768 envelope;
#X text 200 4768 Envelope data type;
#X obj 30 4795 vline2env;
#X text 200 4795 Converts vline messages to env;
#X obj 20 4822 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4863 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4874 expand_env;
#X text 200 4874 Substitute environment variables in data stream;
#X obj 30 4901 flow.append;
#X text 200 4901 append message to flow stream;
#X obj 30 4928 flow.change;
#X text 200 4928 rejects redundant input values;
#X obj 30 4955 flow.count;
#X text 200 4955 control flow event counter;
#X obj 30 4982 flow.delay;
#X text 200 4982 enhanced version on vanilla delay object;
#X obj 30 5009 flow.demultiplex;
#X text 200 5009 control flow demultiplexer;
#X obj 30 5036 flow.demultiplex2~;
#X text 200 5036 audio stream stereo demultiplexer;
#X obj 30 5063 flow.demultiplex~;
#X text 200 5063 audio stream demultiplexer;
#X obj 30 5090 flow.dollar;
#X text 200 5090 data flow dollar converter;
#X obj 30 5117 flow.dup;
#X text 200 5117 message duplicator;
#X obj 30 5144 flow.float;
#X text 200 5144 pass floats;
#X obj 30 5171 flow.gate;
#X text 200 5171 control flow gate. [spigot] analog;
#X obj 30 5198 flow.greater;
#X text 200 5198 numeric stream router;
#X obj 30 5225 flow.greater_eq;
#X text 200 5225 numeric stream router;
#X obj 30 5252 flow.group;
#X text 200 5252 group input atoms in list of specified size;
#X obj 30 5279 flow.interval;
#X text 200 5279 measure time between flow events;
#X obj 30 5306 flow.less;
#X text 200 5306 numeric stream router \, like many [moses];
#X obj 30 5333 flow.less_eq;
#X text 200 5333 numeric stream router \, like many [moses];
#X obj 30 5360 flow.list2many;
#X text 200 5360 routes list element with message selectors;
#X obj 30 5387 flow.match;
#X text 200 5387 route data flow by regexp match;
#X obj 30 5414 flow.mem;
#X text 200 5414 store data flow in memory;
#X obj 30 5441 flow.multiplex;
#X text 200 5441 control flow multiplexer;
#X obj 30 5468 flow.multiplex2~;
#X text 200 5468 audio stream stereo multiplexer;
#X obj 30 5495 flow.multiplex~;
#X text 200 5495 audio stream multiplexer;
#X obj 30 5522 flow.once;
#X text 200 5522 one message pass thru;
#X obj 30 5549 flow.pack;
#X text 200 5549 flow pack;
#X obj 30 5576 flow.pass;
#X text 200 5576 pass specified values;
#X obj 30 5603 flow.pass_if;
#X text 200 5603 pass values that accepted by predicate object;
#X obj 30 5630 flow.pipe;
#X text 200 5630 enhanced version on vanilla pipe object;
#X obj 30 5657 flow.queue;
#X text 200 5657 multi-channel control flow sync queue (or FIFO);
#X obj 30 5684 flow.record;
#X text 200 5684 flow stream recorder/player;
#X obj 30 5711 flow.reject;
#X text 200 5711 reject specified values;
#X obj 30 5738 flow.reject_if;
#X text 200 5738 reject values by predicate;
#X obj 30 5765 flow.ring;
#X text 200 5765 dataflow ring buffer;
#X obj 30 5792 flow.route;
#X text 200 5792 advanced message router;
#X obj 30 5819 flow.select;
#X text 200 5819 vanilla flow on steroids;
#X obj 30 5846 flow.seqdelay;
#X text 200 5846 sequential delay/router for input flow;
#X obj 30 5873 flow.space;
#X text 200 5873 space in time messages received at the same logical
time;
#X obj 30 5900 flow.speedlim;
#X text 200 5900 control stream speed limiter;
#X obj 30 5927 flow.split;
#X text 200 5927 split data flow by external side-chain predicate;
#X obj 30 5954 flow.stack;
#X text 200 5954 any message stack;
#X obj 30 5981 flow.sync;
#X text 200 5981 bus with only hot inlets;
#X obj 30 6008 flow.sync_pack;
#X text 200 6008 flow pack with all hot inlets;
#X obj 30 6035 flow.tee~;
#X text 200 6035 separate audio and control streams;
#X obj 30 6062 replace;
#X text 200 6062 Replace atoms in data stream;
#X obj 30 6089 route.any;
#X text 200 6089 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6116 route.bang;
#X text 200 6116 separate bang messages from other types;
#X obj 30 6143 route.float;
#X text 200 6143 separate float messages from other types;
#X obj 30 6170 route.list;
#X text 200 6170 separate list messages from other types;
#X obj 30 6197 route.prop;
#X text 200 6197 separate property messages from other types;
#X obj 30 6224 route.random;
#X text 200 6224 routes input flow to random outlet;
#X obj 30 6251 route.symbol;
#X text 200 6251 separate symbol messages from other types;
#X obj 20 6278 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6319 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6330 flt.a-weight;
#X text 200 6330 convert frequency to A-weight value;
#X obj 30 6357 flt.biquad~;
#X text 200 6357 second order IIR filter.;
#X obj 30 6384 flt.bpf12~;
#X text 200 6384 Two pole band-pass butterworth filter;
#X obj 30 6411 flt.bpf24~;
#X text 200 6411 Four pole band-pass butterworth filter;
#X obj 30 6438 flt.c_apf;
#X text 200 6438 Allpass filter coefficient calculator for biquad;
#X obj 30 6465 flt.c_bpf~;
#X text 200 6465 BPF coefficient calculator for biquad filter;
#X obj 30 6492 flt.c_highshelf~;
#X text 200 6492 Highshelf filter coefficient calculator for biquad;
#X obj 30 6519 flt.c_hpf;
#X text 200 6519 HPF coefficient calculator for biquad filter;
#X obj 30 6546 flt.c_hpf~;
#X text 200 6546 HPF coefficient calculator for biquad filter;
#X obj 30 6573 flt.c_lowshelf~;
#X text 200 6573 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6600 flt.c_lpf;
#X text 200 6600 LPF coefficient calculator for biquad filter;
#X obj 30 6627 flt.c_lpf~;
#X text 200 6627 LPF coefficient calculator for biquad filter;
#X obj 30 6654 flt.c_notch;
#X text 200 6654 Notch filter coefficient calculator for biquad;
#X obj 30 6681 flt.c_notch~;
#X text 200 6681 Band-reject coefficient calculator for biquad filter;
#X obj 30 6708 flt.c_peak~;
#X text 200 6708 Peaking equalizer calculator for biquad;
#X obj 30 6735 flt.c_pole;
#X text 200 6735 One-pole coefficient calculator for biquad filter;
#X obj 30 6762 flt.dcblock2~;
#X text 200 6762 stereo DC blocker;
#X obj 30 6789 flt.dcblock~;
#X text 200 6789 mono DC blocker;
#X obj 30 6816 flt.eq10~;
#X text 200 6816 graphic 10 band equalizer;
#X obj 30 6843 flt.eq_peak_cq~;
#X text 200 6843 constant-Q second order peaking equalizer section;
#X obj 30 6870 flt.eq_peak~;
#X text 200 6870 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6925 flt.fb_comb~;
#X text 200 6925 feedback comb filter;
#X obj 30 6952 flt.fbank5x1~;
#X text 200 6952 5 band one octave butterworth filterbank;
#X obj 30 6979 flt.ff_comb~;
#X text 200 6979 feed forward comb filter;
#X obj 30 7006 flt.freqz;
#X text 200 7006 compute the frequency response of a digital filter;
#X obj 30 7033 flt.freqz~;
#X text 200 7033 compute the frequency response of a digital filter;
#X obj 30 7060 flt.highshelf~;
#X text 200 7060 gain boost|cut above some frequency;
#X obj 30 7087 flt.hpf12~;
#X text 200 7087 High-pass second order Butterworth filter;
#X obj 30 7114 flt.hpf24~;
#X text 200 7114 High-pass fourth order Butterworth filter;
#X obj 30 7141 flt.lowshelf~;
#X text 200 7141 gain boost|cut below some frequency;
#X obj 30 7168 flt.lpf12~;
#X text 200 7168 Low-pass second order Butterworth filter;
#X obj 30 7195 flt.lpf24~;
#X text 200 7195 Low-pass fourth order Butterworth filter;
#X obj 30 7222 flt.median;
#X text 200 7222 Median control flow filter;
#X obj 30 7249 flt.moog_vcf~;
#X text 200 7249 Moog Voltage Controlled Filter;
#X obj 30 7276 flt.notch~;
#X text 200 7276 band-rejection filter;
#X obj 30 7303 flt.resonbp~;
#X text 200 7303 Simple resonant bandpass filter;
#X obj 30 7330 flt.resonhp~;
#X text 200 7330 Simple resonant highpass filter;
#X obj 30 7357 flt.resonlp~;
#X text 200 7357 Simple resonant lowpass filter;
#X obj 20 7384 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7425 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7436 fx.bitdown~;
#X text 200 7436 bit downer and downsampler effect;
#X obj 30 7463 fx.chorus~;
#X text 200 7463 Chorus effect;
#X obj 30 7490 fx.dattorro~;
#X text 200 7490 dattorro reverb;
#X obj 30 7517 fx.distortion1~;
#X text 200 7517 distortion #1 from Guitarix effects set;
#X obj 30 7544 fx.distortion2~;
#X text 200 7544 distortion #2 from Guitarix effects set;
#X obj 30 7571 fx.distortion3~;
#X text 200 7571 simple distortion #3 from Guitarix effects set;
#X obj 30 7598 fx.distortion~;
#X text 200 7598 cubic nonlinearity distortion;
#X obj 30 7625 fx.drive~;
#X text 200 7625 Guitarix drive effect;
#X obj 30 7652 fx.drone_box~;
#X text 200 7652 mono sympathetic resonance generator;
#X obj 30 7679 fx.echo2~;
#X text 200 7679 stereo echo effect;
#X obj 30 7706 fx.echo~;
#X text 200 7706 simple echo effect;
#X obj 30 7733 fx.flanger~;
#X text 200 7733 mono flanging effect;
#X obj 30 7760 fx.freeverb2~;
#X text 200 7760 freeverb2 - stereo version of freeverb;
#X obj 30 7787 fx.freeverb~;
#X text 200 7787 freeverb - common used open-source reverb;
#X obj 30 7814 fx.freqshift~;
#X text 200 7814 frequency shifter or single-sideband ring modulation;
#X obj 30 7841 fx.granulator~;
#X text 200 7841 simple input stream granulator;
#X obj 30 7868 fx.greyhole~;
#X text 200 7868 A complex echo-like effect;
#X obj 30 7895 fx.infrev~;
#X text 200 7895 port of Infinity VST plugin from airwindows;
#X obj 30 7922 fx.jcrev~;
#X text 200 7922 Schroeder quad reverberator from 1972;
#X obj 30 7949 fx.looper~;
#X text 200 7949 One track looper;
#X obj 30 7976 fx.pitchshift_s~;
#X text 200 7976 signal version of fx.pitchshift~;
#X obj 30 8003 fx.pitchshift~;
#X text 200 8003 simple pitch shifter based on 2 delay lines;
#X obj 30 8030 fx.rb_pitchshift~;
#X text 200 8030 rubber band pitchshift;
#X obj 30 8057 fx.recho~;
#X text 200 8057 reversed echo effect;
#X obj 30 8084 fx.room~;
#X text 200 8084 Gardners room emulation algorithms;
#X obj 30 8111 fx.satrev~;
#X text 200 8111 Schroeder reverberator from 1971;
#X obj 30 8138 fx.sdelay~;
#X text 200 8138 smooth delay with a feedback control;
#X obj 30 8165 fx.secho~;
#X text 200 8165 enchanced echo effect that does not click on delay
change;
#X obj 30 8192 fx.shimmer~;
#X text 200 8192 shimmer reverb effect effect;
#X obj 30 8219 fx.stutter~;
#X text 200 8219 stutter effect;
#X obj 30 8246 fx.tapiir~;
#X text 200 8246 multi-tap delay;
#X obj 30 8273 fx.vocoder~;
#X text 200 8273 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8313 fx.wahwah~;
#X text 200 8313 digitized CryBaby wah pedal;
#X obj 30 8340 fx.zita_rev1~;
#X text 200 8340 Zita stereo reverb;
#X obj 20 8367 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8408 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8419 global.dict;
#X text 200 8419 global named dict object;
#X obj 30 8446 global.float;
#X text 200 8446 global named float object;
#X obj 30 8473 global.int;
#X text 200 8473 global named integer object;
#X obj 30 8500 global.list;
#X text 200 8500 global named list object;
#X obj 30 8527 global.mlist;
#X text 200 8527 global named mlist object;
#X obj 30 8554 global.set;
#X text 200 8554 global named set object;
#X obj 20 8581 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8633 hw.apple_smc;
#X text 200 8633 query the system management control in Apples;
#X obj 30 8660 hw.apple_sms;
#X text 200 8660 query the sudden motion sensor in Apples;
#X obj 30 8687 hw.arduino;
#X text 200 8687 Arduino device;
#X obj 30 8714 hw.cpu_temp;
#X text 200 8714 get CPU temperature;
#X obj 30 8741 hw.display;
#X text 200 8741 get/set display properties;
#X obj 30 8768 hw.kbd_light;
#X text 200 8768 Get/set keyboard light on some devices;
#X obj 30 8795 hw.motu.avb;
#X text 200 8795 controls Motu AVB devices over http requests;
#X obj 30 8822 hw.serial;
#X text 200 8822 serial port device;
#X obj 20 8849 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8890 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8904 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8901 faust realtime compilation;
#X obj 30 8926 lang.lua;
#X text 200 8926 Lua JIT language bindings;
#X obj 30 8956 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8953 faust compiled ui object;
#X obj 20 8978 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9019 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9030 lfo.+pulse~;
#X text 200 9030 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9057 lfo.+saw~;
#X text 200 9057 Positive unit-amplitude low frequency saw wave;
#X obj 30 9084 lfo.+square~;
#X text 200 9084 Positive low frequency square wave;
#X obj 30 9111 lfo.+tri~;
#X text 200 9111 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9138 lfo.impulse~;
#X text 200 9138 Unit-amplitude low-frequency impulse train;
#X obj 30 9165 lfo.mosc~;
#X text 200 9165 multi-oscillator with various waveforms;
#X obj 30 9192 lfo.pulse~;
#X text 200 9192 Full-range unit-amplitude low frequency pulse train;
#X obj 30 9219 lfo.saw~;
#X text 200 9219 Full-range unit-amplitude low frequency saw;
#X obj 30 9246 lfo.square~;
#X text 200 9246 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 9273 lfo.tri~;
#X text 200 9273 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 9300 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 9341 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9352 list.^at;
#X text 200 9352 on input index(es) outputs list element(s);
#X obj 30 9379 list.^contains;
#X text 200 9379 checks if input atom is found in the list;
#X obj 30 9406 list.^search;
#X text 200 9406 on input atom returns it index in list;
#X obj 30 9433 list.all_of;
#X text 200 9433 checks if all list atoms accepted by predicate;
#X obj 30 9460 list.any_of;
#X text 200 9460 checks if at least one list element is accepted by
predicate;
#X obj 30 9487 list.append;
#X text 200 9487 append atom or list to the end of input list;
#X obj 30 9514 list.apply_to;
#X text 200 9514 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9554 list.at;
#X text 200 9554 outputs list element(s) at specified index(es);
#X obj 30 9581 list.choice;
#X text 200 9581 outputs random element from list;
#X obj 30 9608 list.contains;
#X text 200 9608 checks if input list contains specified atoms;
#X obj 30 9635 list.convolve;
#X text 200 9635 convolution for lists;
#X obj 30 9662 list.correlate;
#X text 200 9662 list cross-correlation;
#X obj 30 9689 list.count;
#X text 200 9689 output the number of items that equal to specified
value;
#X obj 30 9716 list.count_if;
#X text 200 9716 output the number of items that satisfy to external
predicate;
#X obj 30 9743 list.delta;
#X text 200 9743 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9783 list.distribution;
#X text 200 9783 list value distribution;
#X obj 30 9810 list.do;
#X text 200 9810 iterate and modify list contents via side-chain;
#X obj 30 9837 list.each;
#X text 200 9837 maps each list value via external side-chain;
#X obj 30 9864 list.enumerate;
#X text 200 9864 enumerates input list;
#X obj 30 9891 list.equal;
#X text 200 9891 checks if given lists are equal;
#X obj 30 9918 list.first;
#X text 200 9918 returns first list element;
#X obj 30 9945 list.gen;
#X text 200 9945 generates list of specified length via external generator;
#X obj 30 9972 list.histogram;
#X text 200 9972 outputs distribution histogram;
#X obj 30 9999 list.insert;
#X text 200 9999 insert atom or list to the specified position of input
list;
#X obj 30 10026 list.integrator;
#X text 200 10026 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10066 list.last;
#X text 200 10066 output last list element;
#X obj 30 10093 list.length;
#X text 200 10093 output the number of atoms in the list;
#X obj 30 10120 list.map;
#X text 200 10120 map list values by specified dictionary;
#X obj 30 10147 list.max;
#X text 200 10147 output largest element in the list;
#X obj 30 10174 list.mean;
#X text 200 10174 calculates average of list of floats;
#X obj 30 10201 list.min;
#X text 200 10201 returns smallest element in the list;
#X obj 30 10228 list.none_of;
#X text 200 10228 checks if none of list atoms is accepted by predicate;
#X obj 30 10255 list.normalize;
#X text 200 10255 normalizes float list values to get their sum = 1.0;
#X obj 30 10282 list.pass;
#X text 200 10282 leave in list only specified elements;
#X obj 30 10309 list.pass_if;
#X text 200 10309 leave only elements accepted by predicate;
#X obj 30 10336 list.prepend;
#X text 200 10336 prepend atom or list before input list;
#X obj 30 10363 list.product;
#X text 200 10363 calculates product of floats in list;
#X obj 30 10390 list.range;
#X text 200 10390 output list smallest and largest value;
#X obj 30 10417 list.reduce;
#X text 200 10417 apply function of two arguments cumulatively to the
list;
#X obj 30 10444 list.reject;
#X text 200 10444 remove specified element from list;
#X obj 30 10471 list.remove;
#X text 200 10471 remove list element(s) at specified positions;
#X obj 30 10498 list.remove_if;
#X text 200 10498 remove elements by predicate;
#X obj 30 10525 list.repack;
#X text 200 10525 repack list to specified size;
#X obj 30 10552 list.repeat;
#X text 200 10552 output new list by repeating input list specified
times;
#X obj 30 10579 list.resample;
#X text 200 10579 resample list with specified ratio;
#X obj 30 10606 list.resize;
#X text 200 10606 changes list size;
#X obj 30 10633 list.reverse;
#X text 200 10633 reverses the order of the elements in the list;
#X obj 30 10660 list.rldecode;
#X text 200 10660 Run-length list decoder (RLE);
#X obj 30 10687 list.rlencode;
#X text 200 10687 RLE (run-length encoding) for lists;
#X obj 30 10714 list.rotate;
#X text 200 10714 rotates list;
#X obj 30 10741 list.route;
#X text 200 10741 acts like [route] but for lists;
#X obj 30 10768 list.rundiff;
#X text 200 10768 running difference;
#X obj 30 10795 list.runsum;
#X text 200 10795 running sum;
#X obj 30 10822 list.search;
#X text 200 10822 search specified items in input list;
#X obj 30 10849 list.separate;
#X text 200 10849 sends list elements one by one separately;
#X obj 30 10876 list.seq;
#X text 200 10876 numeric sequence list generator;
#X obj 30 10903 list.set;
#X text 200 10903 set list value at specified position;
#X obj 30 10930 list.shift;
#X text 200 10930 shifts the contents of the list with linear interpolation;
#X obj 30 10957 list.shuffle;
#X text 200 10957 randomly rearranges elements in list;
#X obj 30 10984 list.slice;
#X text 200 10984 extract sublist;
#X obj 30 11011 list.sort;
#X text 200 11011 sorts list values by ascending order;
#X obj 30 11038 list.sort_with;
#X text 200 11038 sort list with user defined side-chain;
#X obj 30 11065 list.split;
#X text 200 11065 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11105 list.stretch;
#X text 200 11105 stretches list - changes its size with linear interpolation;
#X obj 30 11132 list.sum;
#X text 200 11132 calculates sum of floats in list;
#X obj 30 11159 list.unique;
#X text 200 11159 removes duplicates from input list;
#X obj 30 11186 list.unpack;
#X text 200 11186 unpack list elements to separate outlets;
#X obj 30 11213 list.unzip;
#X text 200 11213 splits list to N lists \, each to separate output;
#X obj 30 11240 list.walk;
#X text 200 11240 Walks thru the list;
#X obj 30 11267 list.zip;
#X text 200 11267 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 11322 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 11363 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11374 live.capture~;
#X text 200 11374 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11414 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 11455 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11466 local.dict;
#X text 200 11466 local named dict object;
#X obj 30 11493 local.float;
#X text 200 11493 canvas-scoped named float variable;
#X obj 30 11520 local.int;
#X text 200 11520 canvas-scoped named integer variable;
#X obj 30 11547 local.list;
#X text 200 11547 local named list object;
#X obj 30 11574 local.mlist;
#X text 200 11574 local named mlist object;
#X obj 30 11601 local.set;
#X text 200 11601 local named set object;
#X obj 20 11628 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11669 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11680 math.abs;
#X text 200 11680 absolute value function;
#X obj 30 11707 math.abs~;
#X text 200 11707 absolute value function for signals;
#X obj 30 11734 math.acos;
#X text 200 11734 arc cosine function;
#X obj 30 11761 math.acosh;
#X text 200 11761 inverse hyperbolic cosine function;
#X obj 30 11788 math.acosh~;
#X text 200 11788 hyperbolic arc cosine for signals;
#X obj 30 11815 math.acos~;
#X text 200 11815 arc cosine function for signals;
#X obj 30 11842 math.and;
#X text 200 11842 operation AND for multiple arguments;
#X obj 30 11869 math.approx;
#X text 200 11869 check if input value approximately equal to pattern;
#X obj 30 11896 math.asin;
#X text 200 11896 arc sine function;
#X obj 30 11923 math.asinh;
#X text 200 11923 inverse hyperbolic sine function;
#X obj 30 11950 math.asinh~;
#X text 200 11950 hyperbolic arc sine for signals;
#X obj 30 11977 math.asin~;
#X text 200 11977 arc sine for signals;
#X obj 30 12004 math.atan;
#X text 200 12004 arc tangent function;
#X obj 30 12031 math.atanh;
#X text 200 12031 inverse hyperbolic tangent function;
#X obj 30 12058 math.atanh~;
#X text 200 12058 hyperbolic arc tangent for signals;
#X obj 30 12085 math.atan~;
#X text 200 12085 arc tangent for signals;
#X obj 30 12112 math.binomial;
#X text 200 12112 binomial coefficient calculator;
#X obj 30 12139 math.cabs~;
#X text 200 12139 magnitude of a complex signals;
#X obj 30 12166 math.carg~;
#X text 200 12166 phase angle of a complex signals;
#X obj 30 12193 math.cbrt;
#X text 200 12193 cube root function;
#X obj 30 12220 math.cbrt~;
#X text 200 12220 cube root function for signals;
#X obj 30 12247 math.cdiv~;
#X text 200 12247 division of complex signals;
#X obj 30 12274 math.ceil;
#X text 200 12274 round to smallest integral value not less than input
value;
#X obj 30 12301 math.ceil~;
#X text 200 12301 round to smallest integral value not less than input
value;
#X obj 30 12328 math.cexp~;
#X text 200 12328 exponent of a complex signals;
#X obj 30 12355 math.cmul~;
#X text 200 12355 multiplication of complex signals;
#X obj 30 12382 math.cos;
#X text 200 12382 cosine function;
#X obj 30 12409 math.cosh;
#X text 200 12409 hyperbolic cosine function;
#X obj 30 12436 math.cosh~;
#X text 200 12436 hyperbolic cosine for signals;
#X obj 30 12463 math.cos~;
#X text 200 12463 cosine function;
#X obj 30 12490 math.div;
#X text 200 12490 division (on lists too);
#X obj 30 12517 math.e;
#X text 200 12517 mathematical constant \, base of the natural logarithm;
#X obj 30 12544 math.erf;
#X text 200 12544 error function;
#X obj 30 12571 math.erf~;
#X text 200 12571 error function for signals;
#X obj 30 12598 math.exp;
#X text 200 12598 exponential functions;
#X obj 30 12625 math.exp2;
#X text 200 12625 exponential functions;
#X obj 30 12652 math.exp2~;
#X text 200 12652 base-2 exponential for signal;
#X obj 30 12679 math.expr;
#X text 200 12679 dynamic [expr];
#X obj 30 12706 math.exp~;
#X text 200 12706 base-e exponential for signal;
#X obj 30 12733 math.floor;
#X text 200 12733 round to largest integral value not greater than
x;
#X obj 30 12760 math.floor~;
#X text 200 12760 round to largest integral value not greater than
x;
#X obj 30 12787 math.gamma;
#X text 200 12787 gamma function;
#X obj 30 12814 math.gamma~;
#X text 200 12814 gamma function for floating point signals;
#X obj 30 12841 math.gcd;
#X text 200 12841 calculate greatest common divisor;
#X obj 30 12868 math.inf;
#X text 200 12868 infinity value that cannot be represented accurately;
#X obj 30 12895 math.inf~;
#X text 200 12895 inifinity signal generator;
#X obj 30 12922 math.lcm;
#X text 200 12922 calculate least common multiple;
#X obj 30 12949 math.lgamma;
#X text 200 12949 natural logarithm of the absolute value of the gamma
function;
#X obj 30 12976 math.lgamma~;
#X text 200 12976 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13016 math.log;
#X text 200 13016 natural logarithm;
#X obj 30 13043 math.log10;
#X text 200 13043 logarithm functions;
#X obj 30 13070 math.log10~;
#X text 200 13070 natural logarithm;
#X obj 30 13097 math.log2;
#X text 200 13097 logarithm functions;
#X obj 30 13124 math.log2~;
#X text 200 13124 base-2 logarithm;
#X obj 30 13151 math.log~;
#X text 200 13151 natural logarithm;
#X obj 30 13178 math.mul;
#X text 200 13178 multiplication (on lists too);
#X obj 30 13205 math.nan;
#X text 200 13205 Not a Number \, unrepresentable value;
#X obj 30 13232 math.nan~;
#X text 200 13232 signal NaN;
#X obj 30 13259 math.neg;
#X text 200 13259 negate function;
#X obj 30 13286 math.or;
#X text 200 13286 operation OR for multiple arguments;
#X obj 30 13313 math.pi;
#X text 200 13313 mathematical constant;
#X obj 30 13340 math.pi~;
#X text 200 13340 mathematical constant;
#X obj 30 13367 math.polyeval;
#X text 200 13367 evaluates the polynomial described by the coefficients
list;
#X obj 30 13394 math.reciprocal;
#X text 200 13394 calculate reciprocal number;
#X obj 30 13421 math.reciprocal~;
#X text 200 13421 calculate reciprocal number for signals;
#X obj 30 13448 math.round;
#X text 200 13448 round to integral value \, regardless of rounding
direction;
#X obj 30 13475 math.round~;
#X text 200 13475 signal round;
#X obj 30 13502 math.sign;
#X text 200 13502 sign function;
#X obj 30 13529 math.sin;
#X text 200 13529 sine function;
#X obj 30 13556 math.sinh;
#X text 200 13556 hyperbolic sine function;
#X obj 30 13583 math.sinh~;
#X text 200 13583 hyperbolic sine for signals;
#X obj 30 13610 math.sin~;
#X text 200 13610 sine function;
#X obj 30 13637 math.sqrt;
#X text 200 13637 square root function;
#X obj 30 13664 math.sqrt~;
#X text 200 13664 square root for signal;
#X obj 30 13691 math.squared;
#X text 200 13691 value square;
#X obj 30 13718 math.squared~;
#X text 200 13718 signal value square;
#X obj 30 13745 math.sync_add;
#X text 200 13745 sync addition;
#X obj 30 13772 math.sync_and;
#X text 200 13772 sync logical AND operation;
#X obj 30 13799 math.sync_div;
#X text 200 13799 sync division;
#X obj 30 13826 math.sync_eq;
#X text 200 13826 sync equal numbers check;
#X obj 30 13853 math.sync_ge;
#X text 200 13853 sync greater equal numbers compare;
#X obj 30 13880 math.sync_gt;
#X text 200 13880 sync greater then numbers compare;
#X obj 30 13907 math.sync_le;
#X text 200 13907 sync less equal numbers compare;
#X obj 30 13934 math.sync_lshift;
#X text 200 13934 sync signed bit left shift;
#X obj 30 13961 math.sync_lt;
#X text 200 13961 sync less then numbers compare;
#X obj 30 13988 math.sync_mod;
#X text 200 13988 sync remainder of modulo division (float or integer);
#X obj 30 14015 math.sync_mul;
#X text 200 14015 sync multiplication;
#X obj 30 14042 math.sync_ne;
#X text 200 14042 sync numbers for not equality;
#X obj 30 14069 math.sync_or;
#X text 200 14069 sync logical OR operation;
#X obj 30 14096 math.sync_rshift;
#X text 200 14096 sync signed bit right shift;
#X obj 30 14123 math.sync_sub;
#X text 200 14123 sync subtraction;
#X obj 30 14150 math.sync_xor;
#X text 200 14150 sync logical XOR operation;
#X obj 30 14177 math.tan;
#X text 200 14177 tangent function;
#X obj 30 14204 math.tanh;
#X text 200 14204 hyperbolic tangent function;
#X obj 30 14231 math.tanh~;
#X text 200 14231 hyperbolic tangent for signals;
#X obj 30 14258 math.tan~;
#X text 200 14258 tangent function;
#X obj 30 14285 math.trunc;
#X text 200 14285 truncate to integer value;
#X obj 30 14312 math.trunc~;
#X text 200 14312 truncate to integer value;
#X obj 20 14339 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14380 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14391 midi.arp;
#X text 200 14391 MIDI arpeggiator;
#X obj 30 14418 midi.cc;
#X text 200 14418 enhanced version of vanilla ctlin;
#X obj 30 14445 midi.clock;
#X text 200 14445 midi clock toolbox;
#X obj 30 14472 midi.ctl2str;
#X text 200 14472 convert Standard MIDI Controllers number to name;
#X obj 30 14499 midi.event2ctl;
#X text 200 14499 convert MidiEvent message to controller channel/value
pair;
#X obj 30 14526 midi.event2note;
#X text 200 14526 convert MidiEvent message to midi note/velocity pair;
#X obj 30 14553 midi.event2prg;
#X text 200 14553 convert MidiEvent message to midi program change
value;
#X obj 30 14580 midi.file;
#X text 200 14580 standard midi file SMF reader and writer;
#X obj 30 14607 midi.kbd;
#X text 200 14607 computer keyboard midi;
#X obj 30 14634 midi.key2str;
#X text 200 14634 convert key number to SPN name according to tonality;
#X obj 30 14661 midi.modus;
#X text 200 14661 snap/skip midi pitches according modus;
#X obj 30 14688 midi.oct;
#X text 200 14688 midi octave transpose;
#X obj 30 14715 midi.prg2str;
#X text 200 14715 convert GM Instrument number to name (string or symbol);
#X obj 30 14742 midi.split;
#X text 200 14742 midi note splitter;
#X obj 30 14769 midi.sustain;
#X text 200 14769 sustain pedal emulation;
#X obj 30 14796 midi.sysex;
#X text 200 14796 sysex input messages as list;
#X obj 30 14823 midi.track;
#X text 200 14823 extract track from MidiFile;
#X obj 30 14850 midi.tuning;
#X text 200 14850 apply tuning to midi messages;
#X obj 30 14877 midi.vramp;
#X text 200 14877 apply crescendo or diminuendo for midi message flow;
#X obj 30 14904 midi.vrand;
#X text 200 14904 midi velocity randomizer;
#X obj 20 14931 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 14972 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14983 click~;
#X text 200 14983 Output single impulse on bang;
#X obj 30 15010 fluid~;
#X text 200 15010 FluidSynth SoundFont 2 player;
#X obj 30 15037 modplug~;
#X text 200 15037 MOD file player (using libmodplug);
#X obj 30 15064 risset.gliss;
#X text 200 15064 Sheppard/Risset glissando calculator;
#X obj 30 15091 sfizz~;
#X text 200 15091 SFZ format sample player;
#X obj 30 15118 speech.flite;
#X text 200 15118 render speech to array;
#X obj 30 15145 speech.flite~;
#X text 200 15145 render speech to array;
#X obj 30 15172 speech.rhvoice~;
#X text 200 15172 RHVoice text to speech synthesis;
#X obj 20 15199 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 15240 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15251 loadexpr;
#X text 200 15251 send message when patch loads;
#X obj 30 15278 msg;
#X text 200 15278 message constructor;
#X obj 30 15305 msg.after;
#X text 200 15305 send specified message after incoming message;
#X obj 30 15332 msg.onload;
#X text 200 15332 send message when patch loads;
#X obj 30 15359 msg.sched;
#X text 200 15359 message scheduler;
#X obj 20 15386 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 15427 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15438 net.artnet.send;
#X text 200 15438 ArtNet DMX message sender;
#X obj 30 15465 net.host2ip;
#X text 200 15465 returns IP address by DNS name;
#X obj 30 15492 net.http.send;
#X text 200 15492 HTTP request sender;
#X obj 30 15519 net.osc.receive;
#X text 200 15519 OSC message listener;
#X obj 30 15546 net.osc.send;
#X text 200 15546 OSC message sender;
#X obj 30 15573 net.osc.server;
#X text 200 15573 OSC server control;
#X obj 20 15600 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 15641 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15652 noise.baker;
#X text 200 15652 Part of a-chaos library;
#X obj 30 15679 noise.clifford;
#X text 200 15679 clifford attractor;
#X obj 30 15706 noise.collatz;
#X text 200 15706 collatz conjecture output;
#X obj 30 15733 noise.colored~;
#X text 200 15733 colored noise generator with an arbitrary spectral
roll;
#X obj 30 15760 noise.crackle~;
#X text 200 15760 sparse noise generator;
#X obj 30 15787 noise.duffing;
#X text 200 15787 duffing attractor;
#X obj 30 15814 noise.ginger;
#X text 200 15814 Gingerbreadman map chaotic generator;
#X obj 30 15841 noise.henon;
#X text 200 15841 henon attractor;
#X obj 30 15868 noise.henon_heilles;
#X text 200 15868 Hénon–Heiles_system;
#X obj 30 15895 noise.henon_phase;
#X text 200 15895 henon phase Ddagrams;
#X obj 30 15922 noise.henonf;
#X text 200 15922 Henon phase;
#X obj 30 15949 noise.ikeda;
#X text 200 15949 Ikeda attractor;
#X obj 30 15976 noise.lfreq0~;
#X text 200 15976 sampled/held noise (piecewise constant);
#X obj 30 16003 noise.lfreq~;
#X text 200 16003 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 16030 noise.lorenz;
#X text 200 16030 Lorenz chaos;
#X obj 30 16057 noise.lyapunov;
#X text 200 16057 lyapunov random attractor;
#X obj 30 16084 noise.navier_stokes;
#X text 200 16084 navier-stokes diff equations;
#X obj 30 16111 noise.pink~;
#X text 200 16111 Pink noise generator;
#X obj 30 16138 noise.rossler;
#X text 200 16138 Rössler attractor;
#X obj 30 16165 noise.stein;
#X text 200 16165 Stein distribution;
#X obj 30 16192 noise.torus;
#X text 200 16192 torus attractor;
#X obj 30 16219 noise.verhulst;
#X text 200 16219 verhulst distribution;
#X obj 30 16246 noise.white~;
#X text 200 16246 White noise generator;
#X obj 20 16273 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 16314 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16325 osc.blit~;
#X text 200 16325 Bandlimited impulse train oscillator;
#X obj 30 16352 osc.impulse~;
#X text 200 16352 Bandlimited impulse train generator;
#X obj 30 16379 osc.pulse~;
#X text 200 16379 Bandlimited pulse train oscillator;
#X obj 30 16406 osc.saw4~;
#X text 200 16406 Bandlimited sawtooth wave;
#X obj 30 16433 osc.saw~;
#X text 200 16433 Alias-free sawtooth wave;
#X obj 30 16460 osc.sinfb~;
#X text 200 16460 Sine oscilator with feedback;
#X obj 30 16487 osc.sin~;
#X text 200 16487 Sine wave oscillator;
#X obj 30 16514 osc.square~;
#X text 200 16514 Bandlimited square wave oscillator;
#X obj 30 16541 osc.tri~;
#X text 200 16541 Bandlimited triangle wave oscillator;
#X obj 20 16568 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 16609 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16620 canvas.active;
#X text 200 16620 checks if canvas window is on top and active;
#X obj 30 16647 canvas.current;
#X text 200 16647 verbose information about current canvas;
#X obj 30 16674 canvas.dir;
#X text 200 16674 current canvas directory;
#X obj 30 16701 canvas.name;
#X text 200 16701 current canvas name;
#X obj 30 16728 canvas.path;
#X text 200 16728 current canvas fullpath;
#X obj 30 16755 canvas.top;
#X text 200 16755 verbose information about top-level canvas;
#X obj 30 16782 patch.args;
#X text 200 16782 Get patch or subpatch arguments;
#X obj 30 16809 patch.deps;
#X text 200 16809 patch dependencies: used objects and abstractions;
#X obj 30 16836 patch.tree;
#X text 200 16836 patch tree;
#X obj 20 16863 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 16904 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16915 file.size;
#X text 200 16915 output file size;
#X obj 30 16942 path.basename;
#X text 200 16942 outputs filename portion of pathname;
#X obj 30 16969 path.dirname;
#X text 200 16969 outputs directory portion of pathname;
#X obj 30 16996 path.exists;
#X text 200 16996 checks if given path exists;
#X obj 30 17023 path.file;
#X text 200 17023 file input/output;
#X obj 30 17050 path.is_dir;
#X text 200 17050 check if path is directory;
#X obj 30 17077 path.lsdir;
#X text 200 17077 list directory contents;
#X obj 30 17104 path.monitor;
#X text 200 17104 filesystem event monitor;
#X obj 30 17131 path.normalize;
#X text 200 17131 normalize file paths;
#X obj 30 17158 path.pattern;
#X text 200 17158 pattern filename generator;
#X obj 30 17185 path.search;
#X text 200 17185 file search;
#X obj 30 17212 path.split;
#X text 200 17212 file path split;
#X obj 20 17239 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 17280 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17291 is_any;
#X text 200 17291 checks if input data has *any* type;
#X obj 30 17318 is_bang;
#X text 200 17318 checks if input data has *bang* type;
#X obj 30 17345 is_data;
#X text 200 17345 checks if input data has *data* type;
#X obj 30 17372 is_dict;
#X text 200 17372 checks if input data has *dict* type;
#X obj 30 17399 is_even;
#X text 200 17399 checks if input number is even;
#X obj 30 17426 is_file;
#X text 200 17426 checks if file exists and accessible;
#X obj 30 17453 is_float;
#X text 200 17453 checks if input data has *float* type;
#X obj 30 17480 is_list;
#X text 200 17480 checks if input data has *list* type;
#X obj 30 17507 is_odd;
#X text 200 17507 checks if input number is odd;
#X obj 30 17534 is_pointer;
#X text 200 17534 checks if input data has *pointer* type;
#X obj 30 17561 is_prop;
#X text 200 17561 checks if input message is *property* message;
#X obj 30 17588 is_symbol;
#X text 200 17588 checks if input data has *symbol* type;
#X obj 20 17615 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 17656 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17667 preset.float;
#X text 200 17667 load/store float preset;
#X obj 30 17694 preset.list;
#X text 200 17694 load/store symbol preset;
#X obj 30 17721 preset.storage;
#X text 200 17721 preset storage control;
#X obj 30 17748 preset.symbol;
#X text 200 17748 load/store symbol preset;
#X obj 20 17775 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 17816 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17827 patch.props;
#X text 200 17827 patch properties manager;
#X obj 30 17854 prop;
#X text 200 17854 get/set named property value for subpatch or abstraction;
#X obj 30 17881 prop.declare;
#X text 200 17881 declare named property for subpatch or abstraction;
#X obj 30 17908 prop.get;
#X text 200 17908 get property from connected object/subpatch/abstraction;
#X obj 30 17935 prop.get~;
#X text 200 17935 Property extractor from sound stream;
#X obj 30 17962 prop.join;
#X text 200 17962 join property to main data flow;
#X obj 30 17989 prop.random;
#X text 200 17989 property randomizer;
#X obj 30 18016 prop.set;
#X text 200 18016 set property for connected object/subpatch/abstraction;
#X obj 30 18043 prop.split;
#X text 200 18043 separate properties from dataflow;
#X obj 20 18070 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 18111 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18122 proto.feelworld;
#X text 200 18122 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 18149 proto.firmata;
#X text 200 18149 Firmata Arduino protocol support;
#X obj 30 18176 proto.inscore;
#X text 200 18176 INScore message creator;
#X obj 30 18203 proto.midi;
#X text 200 18203 raw midi encoder/parser;
#X obj 30 18230 proto.midi.cc;
#X text 200 18230 raw midi CC encoder/parser;
#X obj 30 18257 proto.midi.sysex;
#X text 200 18257 raw midi SYSex encoder/parser;
#X obj 30 18284 proto.moppy;
#X text 200 18284 protocol for Musical flOPPY controller;
#X obj 30 18311 proto.mpv;
#X text 200 18311 mpv video player control;
#X obj 30 18338 proto.sp.alpaca;
#X text 200 18338 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 18365 proto.vlc;
#X text 200 18365 VLC video player control over HTTP;
#X obj 30 18392 proto.whammy;
#X text 200 18392 Control for Digitech Whammy pedal;
#X obj 30 18419 proto.xtouch_ext;
#X text 200 18419 Behringer XTouch Extender XMidi protocol;
#X obj 20 18446 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 18487 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18498 random.atom;
#X text 200 18498 weighted atom generation from specified list;
#X obj 30 18525 random.discrete;
#X text 200 18525 random weighted integers on interval [0 \, n);
#X obj 30 18552 random.float;
#X text 200 18552 uniform random float generator in specified range;
#X obj 30 18579 random.gauss;
#X text 200 18579 gaussian random distribution;
#X obj 30 18606 random.int;
#X text 200 18606 uniform random integer generator in specified range;
#X obj 30 18633 random.linear;
#X text 200 18633 random linear distribution;
#X obj 30 18660 random.pw_const;
#X text 200 18660 piecewise constant random distribution;
#X obj 30 18687 random.pw_lin;
#X text 200 18687 piecewise linear random distribution;
#X obj 20 18714 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 18755 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18766 samp.time~;
#X text 200 18766 sample counter;
#X obj 20 18793 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 18834 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18845 seq.arp;
#X text 200 18845 sequence arpeggiator;
#X obj 30 18872 seq.bangs;
#X text 200 18872 bang sequencer;
#X obj 30 18899 seq.counter;
#X text 200 18899 sequencer counter;
#X obj 30 18926 seq.life;
#X text 200 18926 Conway gamw of life sequencer;
#X obj 30 18953 seq.matrix;
#X text 200 18953 sequencer control for ui.matrix;
#X obj 30 18980 seq.nbangs;
#X text 200 18980 output specified number of bang with time intervals;
#X obj 30 19007 seq.phasor;
#X text 200 19007 control rate phasor (saw) generator;
#X obj 30 19034 seq.toggles;
#X text 200 19034 toggle sequencer;
#X obj 30 19061 sequencer;
#X text 200 19061 basic sequence player;
#X obj 20 19088 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 19129 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19140 snd.file;
#X text 200 19140 Sound file loader on steroids;
#X obj 20 19167 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 19208 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19219 hoa.2d.decoder~;
#X text 200 19219 hoa 2d decoder;
#X obj 30 19246 hoa.2d.encoder~;
#X text 200 19246 hoa 2d encoder;
#X obj 30 19273 hoa.2d.map~;
#X text 200 19273 a 2d ambisonic multisource spatializer;
#X obj 30 19300 hoa.2d.optim~;
#X text 200 19300 a 2D ambisonic optimization tool;
#X obj 30 19327 hoa.2d.projector~;
#X text 200 19327 a plane waves decomposer from circular harmonics
domain;
#X obj 30 19354 hoa.2d.recomposer~;
#X text 200 19354 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 19394 hoa.2d.rotate~;
#X text 200 19394 a 2D ambisonic sound field rotation;
#X obj 30 19421 hoa.2d.wider~;
#X text 200 19421 a 2d fractional ambisonic order simulator;
#X obj 30 19448 hoa.@process;
#X text 200 19448 process properties manager for hoa.process~;
#X obj 30 19475 hoa.in;
#X text 200 19475 message inlet for a patcher loaded by hoa.process~;
#X obj 30 19502 hoa.in~;
#X text 200 19502 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 19529 hoa.out;
#X text 200 19529 message outlet for a patcher loaded by hoa.process~;
#X obj 30 19556 hoa.out~;
#X text 200 19556 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 19583 hoa.process~;
#X text 200 19583 patcher loader for multichannel processing;
#X obj 30 19613 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 19610 a 2d ambisonic harmonic scope;
#X obj 30 19635 pan.cos~;
#X text 200 19635 two channel equal power sine/cosine panner;
#X obj 30 19662 pan.linsig~;
#X text 200 19662 two channel linear panner with signal control;
#X obj 30 19689 pan.lin~;
#X text 200 19689 two channel linear panner;
#X obj 30 19716 pan.spread~;
#X text 200 19716 spreads input channels across the stereo field;
#X obj 30 19743 pan.sqrt~;
#X text 200 19743 two channel equal power square root panner;
#X obj 30 19770 spat.pan4~;
#X text 200 19770 GMEM SPAT: 4-outputs spatializer;
#X obj 30 19797 spat.pan8~;
#X text 200 19797 GMEM SPAT: 8-outputs spatializer;
#X obj 30 19824 spat.zita6x8~;
#X text 200 19824 spat with 6 inputs sources to 8 channel output;
#X obj 30 19851 spat.zita8~;
#X text 200 19851 8 channel reverb spatializer;
#X obj 20 19878 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 19919 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19930 string;
#X text 200 19930 string constructor;
#X obj 30 19957 string.contains;
#X text 200 19957 checks if string contains specified substring;
#X obj 30 19984 string.ends_with;
#X text 200 19984 checks if string ends with specified substring;
#X obj 30 20011 string.equal;
#X text 200 20011 check strings or symbols for equality;
#X obj 30 20038 string.format;
#X text 200 20038 formats string like printf.;
#X obj 30 20065 string.join;
#X text 200 20065 joins (concatenates) list to string with separator;
#X obj 30 20092 string.length;
#X text 200 20092 number of characters in string (unicode supported);
#X obj 30 20119 string.match;
#X text 200 20119 check if string match regular expression;
#X obj 30 20146 string.remove;
#X text 200 20146 remove substring from input string;
#X obj 30 20173 string.replace;
#X text 200 20173 replace from one substring to another in input string;
#X obj 30 20200 string.split;
#X text 200 20200 split string or symbol by separator;
#X obj 30 20227 string.starts_with;
#X text 200 20227 checks if string starts with specified substring;
#X obj 30 20254 string.substr;
#X text 200 20254 extract substring from input string;
#X obj 30 20281 string2symbol;
#X text 200 20281 converts string to symbol;
#X obj 20 20308 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 20349 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20360 symbol.equal;
#X text 200 20360 check symbols for equality;
#X obj 30 20387 symbol.length;
#X text 200 20387 number of characters in symbol (unicode supported);
#X obj 30 20414 symbol.num_compare;
#X text 200 20414 numeric symbol compare;
#X obj 30 20441 symbol2any;
#X text 200 20441 converts symbol or string to message;
#X obj 30 20468 symbol2intlist;
#X text 200 20468 converts symbol to list of character codes;
#X obj 20 20495 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 20536 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20547 noise.chua~;
#X text 200 20547 Chua's diode circuit;
#X obj 30 20574 synth.bee3~;
#X text 200 20574 Hammond-oid organ FM synthesis instrument;
#X obj 30 20601 synth.birds~;
#X text 200 20601 bird singing generator;
#X obj 30 20628 synth.church_bell~;
#X text 200 20628 generic church bell modal model;
#X obj 30 20655 synth.clap~;
#X text 200 20655 clap synth from faust libraries;
#X obj 30 20682 synth.dubdub~;
#X text 200 20682 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 20722 synth.dx7~;
#X text 200 20722 FAUST dx7 implementation;
#X obj 30 20749 synth.eguitar~;
#X text 200 20749 simple electric guitar model with steel strings;
#X obj 30 20776 synth.english_bell~;
#X text 200 20776 english church bell modal model;
#X obj 30 20803 synth.fgrain~;
#X text 200 20803 file granulator from STK;
#X obj 30 20830 synth.french_bell~;
#X text 200 20830 french church bell modal model;
#X obj 30 20857 synth.german_bell~;
#X text 200 20857 german church bell modal model;
#X obj 30 20884 synth.glass_harm~;
#X text 200 20884 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 20911 synth.glitch~;
#X text 200 20911 Glitch synthesizer by naivesound;
#X obj 30 20938 synth.harpsichord~;
#X text 200 20938 waveguide commuted harpsichord;
#X obj 30 20965 synth.hat~;
#X text 200 20965 hi-hat synth from faust librariest;
#X obj 30 20992 synth.kick2~;
#X text 200 20992 low-kick synth from faust librariest;
#X obj 30 21019 synth.kick~;
#X text 200 21019 low-kick synth from Guitarix project;
#X obj 30 21046 synth.ks~;
#X text 200 21046 Karplus-Strong string;
#X obj 30 21073 synth.marimba~;
#X text 200 21073 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 21113 synth.piano~;
#X text 200 21113 waveguide commuted piano;
#X obj 30 21140 synth.rhodey~;
#X text 200 21140 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 21167 synth.risset_arp~;
#X text 200 21167 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 21194 synth.risset_bell~;
#X text 200 21194 Jean Claude Risset's bell synth;
#X obj 30 21221 synth.risset_tone~;
#X text 200 21221 Jean Claude Risset's endless glissando;
#X obj 30 21248 synth.russian_bell~;
#X text 200 21248 russian church bell modal model;
#X obj 30 21275 synth.shakers~;
#X text 200 21275 various percussion sounds from STK library;
#X obj 30 21302 synth.sitar~;
#X text 200 21302 STK sitar;
#X obj 30 21329 synth.snare~;
#X text 200 21329 Snare drum synth from Guitarix project;
#X obj 30 21356 synth.standard_bell~;
#X text 200 21356 german church bell modal model;
#X obj 30 21383 synth.tube_bell~;
#X text 200 21383 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 21410 synth.voice_fofc~;
#X text 200 21410 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 21437 synth.voice_fofs~;
#X text 200 21437 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 21464 synth.wurley~;
#X text 200 21464 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 21491 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 21532 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21543 system.colorpanel;
#X text 200 21543 System color panel dialog popup;
#X obj 30 21570 system.cursor;
#X text 200 21570 Output cursor motion \, mousewheel and button clicks;
#X obj 30 21597 system.exec;
#X text 200 21597 run external command in separate process;
#X obj 30 21624 system.exit;
#X text 200 21624 quit PureData;
#X obj 30 21651 system.getenv;
#X text 200 21651 Get system environment variables;
#X obj 30 21678 system.hostname;
#X text 200 21678 outputs system hostname;
#X obj 30 21705 system.memsize;
#X text 200 21705 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 21745 system.memused;
#X text 200 21745 returns the process physical memory use - current
and peak;
#X obj 30 21772 system.screen_size;
#X text 200 21772 returns current screen size in pixels;
#X obj 20 21799 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 21840 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21851 tl.bang;
#X text 200 21851 Timeline bang (with possible delay);
#X obj 30 21881 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 21878 Timeline section;
#X obj 30 21903 tl.timeline;
#X text 200 21903 Timeline - event scheduler;
#X obj 30 21930 tl.toggle;
#X text 200 21930 Timeline bang;
#X obj 30 21957 tl.transport;
#X text 200 21957 Timeline transport control;
#X obj 20 21984 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 22025 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22039 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 22036 array view with cursor and selection;
#X obj 30 22064 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 22061 A bang... that's all;
#X obj 30 22089 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 22086 button widget;
#X obj 30 22114 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 22111 colorchooser widget;
#X obj 30 22139 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 22136 Display GUI object;
#X obj 30 22164 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 22161 GUI for turning DSP on/off;
#X obj 30 22189 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 22186 envelope editor widget;
#X obj 30 22214 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 22211 UI filter object calculator for biquad filter;
#X obj 30 22239 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 22236 UI filter object based on biquad filter;
#X obj 30 22264 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 22261 UI stereo gain control;
#X obj 30 22289 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 22286 UI gain control;
#X obj 30 22314 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 22311 simple icon with button capabilities;
#X obj 30 22339 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 22336 value increment/decrement;
#X obj 30 22364 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 22361 keyboard widget;
#X obj 30 22389 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 22386 knob widget;
#X obj 30 22414 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 22411 simple label widget;
#X obj 30 22439 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 22436 Hyperlink widget;
#X obj 30 22464 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 22461 The matrix of toggles has you.;
#X obj 30 22489 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 22486 Dropdown menu;
#X obj 30 22514 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 22511 Shows peak and rms signal level;
#X obj 30 22539 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 22536 incoming MIDI message viewport;
#X obj 30 22564 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 22561 filter mouse events from ui objects;
#X obj 30 22589 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 22586 routes mouse events from ui objects;
#X obj 30 22614 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 22611 counterpart of the vanilla [nbx];
#X obj 30 22639 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 22636 counterpart of the vanilla [nbx] for signal;
#X obj 30 22664 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 22661 signal plotter;
#X obj 30 22689 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 22686 2D slider in polar coordinates;
#X obj 30 22714 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 22711 Preset manager;
#X obj 30 22739 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 22736 counterpart of the vanilla radio toggle;
#X obj 30 22764 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 22761 range slider;
#X obj 30 22789 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 22786 Scope GUI object;
#X obj 30 22814 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 22811 counterpart of the vanilla slider;
#X obj 30 22839 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 22836 2D slider widget;
#X obj 30 22864 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 22861 Multiple slider widget;
#X obj 30 22889 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 22886 Spectroscope GUI object;
#X obj 30 22914 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 22911 displays a list of text buttons or text toggles;
#X obj 30 22939 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 22936 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 22961 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 22961 version: v0.9.6 \, license: GPL3;
#X obj 20 22989 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 23012 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 22976 msg 0;
#X obj 670 23011 switch~;
#X connect 1606 0 1607 0;