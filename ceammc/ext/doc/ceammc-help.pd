#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.copy;
#X text 200 452 copy samples from one array to another;
#X obj 30 479 array.do;
#X text 200 479 iterate and modify array content via side-chain;
#X obj 30 506 array.each;
#X text 200 506 process each array elements via side-chain;
#X obj 30 533 array.fill;
#X text 200 533 fill array with single value or pattern;
#X obj 30 560 array.grainer~;
#X text 200 560 array granulator;
#X obj 30 587 array.hist;
#X text 200 587 calculates array histogram;
#X obj 30 614 array.mean;
#X text 200 614 calculates array arithmetic mean value;
#X obj 30 641 array.minmax;
#X text 200 641 find array min and max element value;
#X obj 30 668 array.play~;
#X text 200 668 array player with variable speed and amplitude;
#X obj 30 695 array.plot;
#X text 200 695 array data plotter;
#X obj 30 722 array.plot~;
#X text 200 722 plot signal on specified array;
#X obj 30 749 array.resample;
#X text 200 749 array resampler;
#X obj 30 776 array.risset_rythm~;
#X text 200 776 Risset Rythm: accelerando or ritardando;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.variance;
#X text 200 965 calculates variance of array values;
#X obj 30 992 array.vplay;
#X text 200 992 simple array player for using with vline~;
#X obj 30 1019 array.window;
#X text 200 1019 fill array with window;
#X obj 30 1046 plot.geomspace~;
#X text 200 1046 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1086 plot.hist~;
#X text 200 1086 calculate and output signal histogram;
#X obj 30 1113 plot.linspace~;
#X text 200 1113 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1153 plot.logspace~;
#X text 200 1153 outputs numbers spaced evenly on a log scale;
#X obj 30 1180 plot.response~;
#X text 200 1180 output amp/phase freq response to impulse;
#X obj 20 1207 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1248 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1259 ceammc.search;
#X text 200 1259 ceammc library search object;
#X obj 30 1289 ui.link @title [function] @url function-help.pd;
#X text 200 1286 named function;
#X obj 30 1311 function.call;
#X text 200 1311 call named function;
#X obj 30 1338 gain~;
#X text 200 1338 multislot signal gain;
#X obj 30 1365 logger;
#X text 200 1365 advanced data logger;
#X obj 30 1392 matrix~;
#X text 200 1392 signal routing matrix;
#X obj 30 1419 metro.pattern;
#X text 200 1419 metro with rhythmic patterns;
#X obj 30 1446 metro.random;
#X text 200 1446 metro random bang with specified range;
#X obj 30 1473 metro.seq;
#X text 200 1473 metro sequencer;
#X obj 30 1500 mix~;
#X text 200 1500 multislot signal mixer;
#X obj 30 1527 nsig~;
#X text 200 1527 Mulitchannel converter from control to audio rate;
#X obj 30 1554 obj.props;
#X text 200 1554 property extractor;
#X obj 30 1581 radio;
#X text 200 1581 float index to outlet values as radio switch;
#X obj 30 1608 spring;
#X text 200 1608 float value "spring";
#X obj 30 1635 sync;
#X text 200 1635 value synchronization;
#X obj 30 1662 window;
#X text 200 1662 returns window value by given window position;
#X obj 30 1689 xdac~;
#X text 200 1689 dac~ with channel ranges;
#X obj 30 1716 xfade2~;
#X text 200 1716 multi stereo-signal crossfade;
#X obj 30 1743 xfade~;
#X text 200 1743 multi signal crossfade;
#X obj 30 1770 z~;
#X text 200 1770 sample delay;
#X obj 20 1797 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1838 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1849 chaos.gbman0;
#X text 200 1849 Gingerbreadman map chaotic generator;
#X obj 30 1876 chaos.gbman0~;
#X text 200 1876 Gingerbreadman map chaotic generator;
#X obj 30 1903 chaos.jong;
#X text 200 1903 Peter de Jong attractor;
#X obj 30 1930 chaos.logistic;
#X text 200 1930 Logistic map chaotic generator;
#X obj 30 1957 chaos.std0;
#X text 200 1957 Standard map chaotic generator;
#X obj 30 1984 chaos.std0~;
#X text 200 1984 Standard map chaotic generator;
#X obj 20 2011 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2052 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2063 array.p2s;
#X text 200 2063 convert array phase [0\..1] to sample position;
#X obj 30 2090 array.s2p;
#X text 200 2090 convert sample position to phase range [0\..1];
#X obj 30 2117 conv.amp2dbfs;
#X text 200 2117 convert from amplitude to decibel full scale;
#X obj 30 2144 conv.amp2dbfs~;
#X text 200 2144 convert from amplitude to decibel full scale;
#X obj 30 2171 conv.bits2bang;
#X text 200 2171 convert list of bits to bang events;
#X obj 30 2198 conv.bits2int;
#X text 200 2198 convert list of bits to integer;
#X obj 30 2225 conv.bits2note;
#X text 200 2225 convert list of bits to note events;
#X obj 30 2252 conv.bits2pos;
#X text 200 2252 convert list of bits to list of bit position;
#X obj 30 2279 conv.bpm2hz;
#X text 200 2279 converts BPM to frequency in herz;
#X obj 30 2306 conv.bpm2ms;
#X text 200 2306 convert frequency in BPM to period in milliseconds;
#X obj 30 2333 conv.bpm2sec;
#X text 200 2333 convert frequency in BPM to period in seconds;
#X obj 30 2360 conv.car2pol;
#X text 200 2360 convert cartesian coords to polar;
#X obj 30 2387 conv.cc2amp;
#X text 200 2387 convert from MIDI Control Change range;
#X obj 30 2414 conv.dbfs2amp;
#X text 200 2414 convert decibel full scale to amplitude;
#X obj 30 2441 conv.dbfs2amp~;
#X text 200 2441 convert decibel full scale to amplitude;
#X obj 30 2468 conv.degree2key;
#X text 200 2468 convert scale degree to key;
#X obj 30 2495 conv.edge2bang;
#X text 200 2495 edge detector for numeric stream;
#X obj 30 2522 conv.hex2int;
#X text 200 2522 hex symbol to int value;
#X obj 30 2549 conv.int2bits;
#X text 200 2549 convert integer to list of bits;
#X obj 30 2576 conv.lin2curve;
#X text 200 2576 map linear to exponential range with 0 allowed.;
#X obj 30 2603 conv.lin2exp;
#X text 200 2603 maps linear range to exponential range;
#X obj 30 2630 conv.lin2lin;
#X text 200 2630 convert from one linear range to another;
#X obj 30 2657 conv.lin2lin~;
#X text 200 2657 convert from one linear range to another for signals;
#X obj 30 2684 conv.list2props;
#X text 200 2684 converts list to series of property messages;
#X obj 30 2711 conv.midi2freq;
#X text 200 2711 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2751 conv.ms2bpm;
#X text 200 2751 convert period in milliseconds to frequency in BPM;
#X obj 30 2778 conv.ms2samp;
#X text 200 2778 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2818 conv.ms2samp~;
#X text 200 2818 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2858 conv.phase2rad;
#X text 200 2858 convert phase value [0-1] to radians [0-2π];
#X obj 30 2885 conv.phase2rad~;
#X text 200 2885 convert phase value [0-1] to radians [0-2π];
#X obj 30 2912 conv.pitch2midi;
#X text 200 2912 converts symbol pitch name to MIDI note number;
#X obj 30 2939 conv.pol2car;
#X text 200 2939 convert from polar coordinates to cartesian;
#X obj 30 2966 conv.rad2phase;
#X text 200 2966 convert radians value to phase;
#X obj 30 2993 conv.rad2phase~;
#X text 200 2993 convert radians value to phase;
#X obj 30 3020 conv.samp2ms;
#X text 200 3020 convert samples to time according to samplerate;
#X obj 30 3047 conv.samp2ms~;
#X text 200 3047 convert samples to milliseconds according to samplerate;
#X obj 30 3074 conv.samp2sec;
#X text 200 3074 convert samples to time according to samplerate;
#X obj 30 3101 conv.sec2bpm;
#X text 200 3101 convert period in seconds to frequency in BPM;
#X obj 30 3128 conv.sec2samp;
#X text 200 3128 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3168 conv.sec2str;
#X text 200 3168 converts float time in seconds to formated symbol
(or string);
#X obj 30 3195 conv.sig2float~;
#X text 200 3195 convert signal to floats;
#X obj 30 3222 conv.str2sec;
#X text 200 3222 converts formatted time to float value in seconds;
#X obj 30 3249 music.dur2time;
#X text 200 3249 convert duration list to time;
#X obj 30 3276 music.voice2midi;
#X text 200 3276 convert voice music list of midi pitches;
#X obj 20 3303 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3344 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3355 data.copy;
#X text 200 3355 make copy for any data types: MList \, Set etc...;
#X obj 30 3382 data.dict;
#X text 200 3382 dictionary container: store values by key;
#X obj 30 3409 data.fifo;
#X text 200 3409 First-In-First-Out (FIFO) queue data container;
#X obj 30 3436 data.float;
#X text 200 3436 robust float object;
#X obj 30 3463 data.int;
#X text 200 3463 robust int object;
#X obj 30 3490 data.list;
#X text 200 3490 list container;
#X obj 30 3517 data.mlist;
#X text 200 3517 multidimensional list container;
#X obj 30 3544 data.set;
#X text 200 3544 container that store unique elements;
#X obj 30 3571 data.set2list;
#X text 200 3571 converts set to list;
#X obj 30 3598 dict.contains;
#X text 200 3598 predicate to check if dict contains a keys;
#X obj 30 3625 dict.each;
#X text 200 3625 map each value in dict;
#X obj 30 3652 dict.from_list;
#X text 200 3652 creates dictionary from list;
#X obj 30 3679 dict.get;
#X text 200 3679 output dict values;
#X obj 30 3706 dict.keys;
#X text 200 3706 get list of dict keys;
#X obj 30 3733 dict.pass;
#X text 200 3733 passes specified keys in dict;
#X obj 30 3760 dict.reject;
#X text 200 3760 rejects specified keys from dict;
#X obj 30 3787 dict.size;
#X text 200 3787 dictionary size;
#X obj 30 3814 dict.to_list;
#X text 200 3814 converts dictionary to plain list;
#X obj 30 3841 dict.values;
#X text 200 3841 dictionary values as mlist;
#X obj 30 3868 mlist.flatten;
#X text 200 3868 flatten nested mlist;
#X obj 30 3895 rtree.to_list;
#X text 200 3895 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3922 set.contains;
#X text 200 3922 check if specified element is in set;
#X obj 30 3949 set.diff;
#X text 200 3949 difference between two sets;
#X obj 30 3976 set.equal;
#X text 200 3976 checks if two sets are equal (contains same elements);
#X obj 30 4003 set.intersect;
#X text 200 4003 output intersection of given sets;
#X obj 30 4030 set.size;
#X text 200 4030 get number of elements in set;
#X obj 30 4057 set.symdiff;
#X text 200 4057 symmetric difference between two sets;
#X obj 30 4084 set.union;
#X text 200 4084 output union of given sets;
#X obj 20 4111 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4152 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4163 dyn.comp2~;
#X text 200 4163 stereo dynamic range compressor;
#X obj 30 4190 dyn.comp~;
#X text 200 4190 mono dynamic range compressors;
#X obj 30 4217 dyn.gate2~;
#X text 200 4217 stereo signal gate;
#X obj 30 4244 dyn.gate~;
#X text 200 4244 mono signal gate;
#X obj 30 4271 dyn.limit2~;
#X text 200 4271 stereo 1176LN Peak Limiter;
#X obj 30 4298 dyn.limit~;
#X text 200 4298 mono 1176LN Peak Limiter;
#X obj 30 4325 dyn.softclip~;
#X text 200 4325 soft signal clip;
#X obj 20 4352 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4393 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4404 env.adsr~;
#X text 200 4404 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4431 env.ar~;
#X text 200 4431 Attack/Release envelope generator;
#X obj 30 4458 env.asr~;
#X text 200 4458 Attack/Sustain/Release envelope generator;
#X obj 30 4485 env.concat;
#X text 200 4485 Envelope concatenation;
#X obj 30 4512 env.follow~;
#X text 200 4512 Envelope follower with independent attack and release
times;
#X obj 30 4539 env.mix;
#X text 200 4539 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4579 env.smooth~;
#X text 200 4579 An envelope with an exponential attack and release;
#X obj 30 4606 env.tscale;
#X text 200 4606 Envelope time-scale;
#X obj 30 4633 env.tshift;
#X text 200 4633 Envelope time-shift (horizontal);
#X obj 30 4660 env.vscale;
#X text 200 4660 Envelope value-scale;
#X obj 30 4687 env2array;
#X text 200 4687 Renders envelope to specified array;
#X obj 30 4714 env2vline;
#X text 200 4714 Converts envelope to bunch of vline messages;
#X obj 30 4741 envelope;
#X text 200 4741 Envelope data type;
#X obj 30 4768 vline2env;
#X text 200 4768 Converts vline messages to env;
#X obj 20 4795 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4847 expand_env;
#X text 200 4847 Substitute environment variables in data stream;
#X obj 30 4874 flow.append;
#X text 200 4874 append message to flow stream;
#X obj 30 4901 flow.change;
#X text 200 4901 rejects redundant input values;
#X obj 30 4928 flow.count;
#X text 200 4928 control flow event counter;
#X obj 30 4955 flow.delay;
#X text 200 4955 enhanced version on vanilla delay object;
#X obj 30 4982 flow.demultiplex;
#X text 200 4982 control flow demultiplexer;
#X obj 30 5009 flow.demultiplex2~;
#X text 200 5009 audio stream stereo demultiplexer;
#X obj 30 5036 flow.demultiplex~;
#X text 200 5036 audio stream demultiplexer;
#X obj 30 5063 flow.dollar;
#X text 200 5063 data flow dollar converter;
#X obj 30 5090 flow.dup;
#X text 200 5090 message duplicator;
#X obj 30 5117 flow.float;
#X text 200 5117 pass floats;
#X obj 30 5144 flow.gate;
#X text 200 5144 control flow gate. [spigot] analog;
#X obj 30 5171 flow.greater;
#X text 200 5171 numeric stream router;
#X obj 30 5198 flow.greater_eq;
#X text 200 5198 numeric stream router;
#X obj 30 5225 flow.group;
#X text 200 5225 group input atoms in list of specified size;
#X obj 30 5252 flow.interval;
#X text 200 5252 measure time between flow events;
#X obj 30 5279 flow.less;
#X text 200 5279 numeric stream router \, like many [moses];
#X obj 30 5306 flow.less_eq;
#X text 200 5306 numeric stream router \, like many [moses];
#X obj 30 5333 flow.list2many;
#X text 200 5333 routes list element with message selectors;
#X obj 30 5360 flow.match;
#X text 200 5360 route data flow by regexp match;
#X obj 30 5387 flow.mem;
#X text 200 5387 store data flow in memory;
#X obj 30 5414 flow.multiplex;
#X text 200 5414 control flow multiplexer;
#X obj 30 5441 flow.multiplex2~;
#X text 200 5441 audio stream stereo multiplexer;
#X obj 30 5468 flow.multiplex~;
#X text 200 5468 audio stream multiplexer;
#X obj 30 5495 flow.once;
#X text 200 5495 one message pass thru;
#X obj 30 5522 flow.pack;
#X text 200 5522 flow pack;
#X obj 30 5549 flow.pass;
#X text 200 5549 pass specified values;
#X obj 30 5576 flow.pass_if;
#X text 200 5576 pass values that accepted by predicate object;
#X obj 30 5603 flow.pipe;
#X text 200 5603 enhanced version on vanilla pipe object;
#X obj 30 5630 flow.queue;
#X text 200 5630 multi-channel control flow sync queue (or FIFO);
#X obj 30 5657 flow.record;
#X text 200 5657 flow stream recorder/player;
#X obj 30 5684 flow.reject;
#X text 200 5684 reject specified values;
#X obj 30 5711 flow.reject_if;
#X text 200 5711 reject values by predicate;
#X obj 30 5738 flow.ring;
#X text 200 5738 dataflow ring buffer;
#X obj 30 5765 flow.route;
#X text 200 5765 advanced message router;
#X obj 30 5792 flow.select;
#X text 200 5792 vanilla flow on steroids;
#X obj 30 5819 flow.seqdelay;
#X text 200 5819 sequential delay/router for input flow;
#X obj 30 5846 flow.space;
#X text 200 5846 space in time messages received at the same logical
time;
#X obj 30 5873 flow.speedlim;
#X text 200 5873 control stream speed limiter;
#X obj 30 5900 flow.split;
#X text 200 5900 split data flow by external side-chain predicate;
#X obj 30 5927 flow.stack;
#X text 200 5927 any message stack;
#X obj 30 5954 flow.sync;
#X text 200 5954 bus with only hot inlets;
#X obj 30 5981 flow.sync_pack;
#X text 200 5981 flow pack with all hot inlets;
#X obj 30 6008 flow.tee~;
#X text 200 6008 separate audio and control streams;
#X obj 30 6035 replace;
#X text 200 6035 Replace atoms in data stream;
#X obj 30 6062 route.float;
#X text 200 6062 separate float messages from other types;
#X obj 30 6089 route.random;
#X text 200 6089 routes input flow to random outlet;
#X obj 20 6116 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6157 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6168 flt.a-weight;
#X text 200 6168 convert frequency to A-weight value;
#X obj 30 6195 flt.biquad~;
#X text 200 6195 second order IIR filter.;
#X obj 30 6222 flt.bpf12~;
#X text 200 6222 Two pole band-pass butterworth filter;
#X obj 30 6249 flt.bpf24~;
#X text 200 6249 Four pole band-pass butterworth filter;
#X obj 30 6276 flt.c_apf;
#X text 200 6276 Allpass filter coefficient calculator for biquad;
#X obj 30 6303 flt.c_bpf~;
#X text 200 6303 BPF coefficient calculator for biquad filter;
#X obj 30 6330 flt.c_highshelf~;
#X text 200 6330 Highshelf filter coefficient calculator for biquad;
#X obj 30 6357 flt.c_hpf;
#X text 200 6357 HPF coefficient calculator for biquad filter;
#X obj 30 6384 flt.c_hpf~;
#X text 200 6384 HPF coefficient calculator for biquad filter;
#X obj 30 6411 flt.c_lowshelf~;
#X text 200 6411 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6438 flt.c_lpf;
#X text 200 6438 LPF coefficient calculator for biquad filter;
#X obj 30 6465 flt.c_lpf~;
#X text 200 6465 LPF coefficient calculator for biquad filter;
#X obj 30 6492 flt.c_notch;
#X text 200 6492 Notch filter coefficient calculator for biquad;
#X obj 30 6519 flt.c_notch~;
#X text 200 6519 Band-reject coefficient calculator for biquad filter;
#X obj 30 6546 flt.c_peak~;
#X text 200 6546 Peaking equalizer calculator for biquad;
#X obj 30 6573 flt.c_pole;
#X text 200 6573 One-pole coefficient calculator for biquad filter;
#X obj 30 6600 flt.dcblock2~;
#X text 200 6600 stereo DC blocker;
#X obj 30 6627 flt.dcblock~;
#X text 200 6627 mono DC blocker;
#X obj 30 6654 flt.eq10~;
#X text 200 6654 graphic 10 band equalizer;
#X obj 30 6681 flt.eq_peak_cq~;
#X text 200 6681 constant-Q second order peaking equalizer section;
#X obj 30 6708 flt.eq_peak~;
#X text 200 6708 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6763 flt.fb_comb~;
#X text 200 6763 feedback comb filter;
#X obj 30 6790 flt.fbank5x1~;
#X text 200 6790 5 band one octave butterworth filterbank;
#X obj 30 6817 flt.ff_comb~;
#X text 200 6817 feed forward comb filter;
#X obj 30 6844 flt.freqz;
#X text 200 6844 compute the frequency response of a digital filter;
#X obj 30 6871 flt.freqz~;
#X text 200 6871 compute the frequency response of a digital filter;
#X obj 30 6898 flt.highshelf~;
#X text 200 6898 gain boost|cut above some frequency;
#X obj 30 6925 flt.hpf12~;
#X text 200 6925 High-pass second order Butterworth filter;
#X obj 30 6952 flt.hpf24~;
#X text 200 6952 High-pass fourth order Butterworth filter;
#X obj 30 6979 flt.lowshelf~;
#X text 200 6979 gain boost|cut below some frequency;
#X obj 30 7006 flt.lpf12~;
#X text 200 7006 Low-pass second order Butterworth filter;
#X obj 30 7033 flt.lpf24~;
#X text 200 7033 Low-pass fourth order Butterworth filter;
#X obj 30 7060 flt.median;
#X text 200 7060 Median control flow filter;
#X obj 30 7087 flt.moog_vcf~;
#X text 200 7087 Moog Voltage Controlled Filter;
#X obj 30 7114 flt.notch~;
#X text 200 7114 band-rejection filter;
#X obj 30 7141 flt.resonbp~;
#X text 200 7141 Simple resonant bandpass filter;
#X obj 20 7168 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7209 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7220 fx.bitdown~;
#X text 200 7220 bit downer and downsampler effect;
#X obj 30 7247 fx.chorus~;
#X text 200 7247 Chorus effect;
#X obj 30 7274 fx.distortion1~;
#X text 200 7274 distortion #1 from Guitarix effects set;
#X obj 30 7301 fx.distortion2~;
#X text 200 7301 distortion #2 from Guitarix effects set;
#X obj 30 7328 fx.distortion3~;
#X text 200 7328 simple distortion #3 from Guitarix effects set;
#X obj 30 7355 fx.distortion~;
#X text 200 7355 cubic nonlinearity distortion;
#X obj 30 7382 fx.drive~;
#X text 200 7382 Guitarix drive effect;
#X obj 30 7409 fx.drone_box~;
#X text 200 7409 mono sympathetic resonance generator;
#X obj 30 7436 fx.echo2~;
#X text 200 7436 stereo echo effect;
#X obj 30 7463 fx.echo~;
#X text 200 7463 simple echo effect;
#X obj 30 7490 fx.flanger~;
#X text 200 7490 mono flanging effect;
#X obj 30 7517 fx.freeverb2~;
#X text 200 7517 freeverb2 - stereo version of freeverb;
#X obj 30 7544 fx.freeverb~;
#X text 200 7544 freeverb - common used open-source reverb;
#X obj 30 7571 fx.freqshift~;
#X text 200 7571 frequency shifter or single-sideband ring modulation;
#X obj 30 7598 fx.granulator~;
#X text 200 7598 simple input stream granulator;
#X obj 30 7625 fx.greyhole~;
#X text 200 7625 A complex echo-like effect;
#X obj 30 7652 fx.infrev~;
#X text 200 7652 port of Infinity VST plugin from airwindows;
#X obj 30 7679 fx.looper~;
#X text 200 7679 One track looper;
#X obj 30 7706 fx.pitchshift_s~;
#X text 200 7706 signal version of fx.pitchshift~;
#X obj 30 7733 fx.pitchshift~;
#X text 200 7733 simple pitch shifter based on 2 delay lines;
#X obj 30 7760 fx.rb_pitchshift~;
#X text 200 7760 rubber band pitchshift;
#X obj 30 7787 fx.recho~;
#X text 200 7787 reversed echo effect;
#X obj 30 7814 fx.room~;
#X text 200 7814 Gardners room emulation algorithms;
#X obj 30 7841 fx.sdelay~;
#X text 200 7841 smooth delay with a feedback control;
#X obj 30 7868 fx.secho~;
#X text 200 7868 enchanced echo effect that does not click on delay
change;
#X obj 30 7895 fx.shimmer~;
#X text 200 7895 shimmer reverb effect effect;
#X obj 30 7922 fx.tapiir~;
#X text 200 7922 multi-tap delay;
#X obj 30 7949 fx.vocoder~;
#X text 200 7949 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7989 fx.wahwah~;
#X text 200 7989 digitized CryBaby wah pedal;
#X obj 30 8016 fx.zita_rev1~;
#X text 200 8016 Zita stereo reverb;
#X obj 20 8043 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8084 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8095 global.dict;
#X text 200 8095 global named dict object;
#X obj 30 8122 global.float;
#X text 200 8122 global named float object;
#X obj 30 8149 global.int;
#X text 200 8149 global named integer object;
#X obj 30 8176 global.list;
#X text 200 8176 global named list object;
#X obj 30 8203 global.mlist;
#X text 200 8203 global named mlist object;
#X obj 30 8230 global.set;
#X text 200 8230 global named set object;
#X obj 20 8257 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8298 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8309 hw.apple_smc;
#X text 200 8309 query the system management control in Apples;
#X obj 30 8336 hw.apple_sms;
#X text 200 8336 query the sudden motion sensor in Apples;
#X obj 30 8363 hw.arduino;
#X text 200 8363 Arduino device;
#X obj 30 8390 hw.cpu_temp;
#X text 200 8390 get CPU temperature;
#X obj 30 8417 hw.display;
#X text 200 8417 get/set display properties;
#X obj 30 8444 hw.kbd_light;
#X text 200 8444 Get/set keyboard light on some devices;
#X obj 30 8471 hw.serial;
#X text 200 8471 serial port device;
#X obj 20 8498 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8553 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8550 faust realtime compilation;
#X obj 30 8578 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8575 faust compiled ui object;
#X obj 20 8600 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8641 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8652 lfo.+pulse~;
#X text 200 8652 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8679 lfo.+saw~;
#X text 200 8679 Positive unit-amplitude low frequency saw wave;
#X obj 30 8706 lfo.+square~;
#X text 200 8706 Positive low frequency square wave;
#X obj 30 8733 lfo.+tri~;
#X text 200 8733 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8760 lfo.impulse~;
#X text 200 8760 Unit-amplitude low-frequency impulse train;
#X obj 30 8787 lfo.mosc~;
#X text 200 8787 multi-oscillator with various waveforms;
#X obj 30 8814 lfo.pulse~;
#X text 200 8814 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8841 lfo.saw~;
#X text 200 8841 Full-range unit-amplitude low frequency saw;
#X obj 30 8868 lfo.square~;
#X text 200 8868 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8895 lfo.tri~;
#X text 200 8895 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8922 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8963 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8974 list.^at;
#X text 200 8974 on input index(es) outputs list element(s);
#X obj 30 9001 list.^contains;
#X text 200 9001 checks if input atom is found in the list;
#X obj 30 9028 list.^search;
#X text 200 9028 on input atom returns it index in list;
#X obj 30 9055 list.all_of;
#X text 200 9055 checks if all list atoms accepted by predicate;
#X obj 30 9082 list.any_of;
#X text 200 9082 checks if at least one list element is accepted by
predicate;
#X obj 30 9109 list.append;
#X text 200 9109 append atom or list to the end of input list;
#X obj 30 9136 list.apply_to;
#X text 200 9136 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9176 list.at;
#X text 200 9176 outputs list element(s) at specified index(es);
#X obj 30 9203 list.choice;
#X text 200 9203 outputs random element from list;
#X obj 30 9230 list.contains;
#X text 200 9230 checks if input list contains specified atoms;
#X obj 30 9257 list.convolve;
#X text 200 9257 convolution for lists;
#X obj 30 9284 list.correlate;
#X text 200 9284 list cross-correlation;
#X obj 30 9311 list.count;
#X text 200 9311 output the number of items that equal to specified
value;
#X obj 30 9338 list.count_if;
#X text 200 9338 output the number of items that satisfy to external
predicate;
#X obj 30 9365 list.delta;
#X text 200 9365 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9405 list.distribution;
#X text 200 9405 list value distribution;
#X obj 30 9432 list.do;
#X text 200 9432 iterate and modify list contents via side-chain;
#X obj 30 9459 list.each;
#X text 200 9459 maps each list value via external side-chain;
#X obj 30 9486 list.enumerate;
#X text 200 9486 enumerates input list;
#X obj 30 9513 list.equal;
#X text 200 9513 checks if given lists are equal;
#X obj 30 9540 list.first;
#X text 200 9540 returns first list element;
#X obj 30 9567 list.gen;
#X text 200 9567 generates list of specified length via external generator;
#X obj 30 9594 list.histogram;
#X text 200 9594 outputs distribution histogram;
#X obj 30 9621 list.insert;
#X text 200 9621 insert atom or list to the specified position of input
list;
#X obj 30 9648 list.integrator;
#X text 200 9648 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9688 list.last;
#X text 200 9688 output last list element;
#X obj 30 9715 list.length;
#X text 200 9715 output the number of atoms in the list;
#X obj 30 9742 list.map;
#X text 200 9742 map list values by specified dictionary;
#X obj 30 9769 list.max;
#X text 200 9769 output largest element in the list;
#X obj 30 9796 list.mean;
#X text 200 9796 calculates average of list of floats;
#X obj 30 9823 list.min;
#X text 200 9823 returns smallest element in the list;
#X obj 30 9850 list.none_of;
#X text 200 9850 checks if none of list atoms is accepted by predicate;
#X obj 30 9877 list.normalize;
#X text 200 9877 normalizes float list values to get their sum = 1.0;
#X obj 30 9904 list.pass;
#X text 200 9904 leave in list only specified elements;
#X obj 30 9931 list.pass_if;
#X text 200 9931 leave only elements accepted by predicate;
#X obj 30 9958 list.prepend;
#X text 200 9958 prepend atom or list before input list;
#X obj 30 9985 list.product;
#X text 200 9985 calculates product of floats in list;
#X obj 30 10012 list.range;
#X text 200 10012 output list smallest and largest value;
#X obj 30 10039 list.reduce;
#X text 200 10039 apply function of two arguments cumulatively to the
list;
#X obj 30 10066 list.reject;
#X text 200 10066 remove specified element from list;
#X obj 30 10093 list.remove;
#X text 200 10093 remove list element(s) at specified positions;
#X obj 30 10120 list.remove_if;
#X text 200 10120 remove elements by predicate;
#X obj 30 10147 list.repack;
#X text 200 10147 repack list to specified size;
#X obj 30 10174 list.repeat;
#X text 200 10174 output new list by repeating input list specified
times;
#X obj 30 10201 list.resample;
#X text 200 10201 resample list with specified ratio;
#X obj 30 10228 list.resize;
#X text 200 10228 changes list size;
#X obj 30 10255 list.reverse;
#X text 200 10255 reverses the order of the elements in the list;
#X obj 30 10282 list.rldecode;
#X text 200 10282 Run-length list decoder (RLE);
#X obj 30 10309 list.rlencode;
#X text 200 10309 RLE (run-length encoding) for lists;
#X obj 30 10336 list.rotate;
#X text 200 10336 rotates list;
#X obj 30 10363 list.route;
#X text 200 10363 acts like [route] but for lists;
#X obj 30 10390 list.rundiff;
#X text 200 10390 running difference;
#X obj 30 10417 list.runsum;
#X text 200 10417 running sum;
#X obj 30 10444 list.search;
#X text 200 10444 search specified items in input list;
#X obj 30 10471 list.separate;
#X text 200 10471 sends list elements one by one separately;
#X obj 30 10498 list.seq;
#X text 200 10498 numeric sequence list generator;
#X obj 30 10525 list.set;
#X text 200 10525 set list value at specified position;
#X obj 30 10552 list.shift;
#X text 200 10552 shifts the contents of the list with linear interpolation;
#X obj 30 10579 list.shuffle;
#X text 200 10579 randomly rearranges elements in list;
#X obj 30 10606 list.slice;
#X text 200 10606 extract sublist;
#X obj 30 10633 list.sort;
#X text 200 10633 sorts list values by ascending order;
#X obj 30 10660 list.sort_with;
#X text 200 10660 sort list with user defined side-chain;
#X obj 30 10687 list.split;
#X text 200 10687 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 10727 list.stretch;
#X text 200 10727 stretches list - changes its size with linear interpolation;
#X obj 30 10754 list.sum;
#X text 200 10754 calculates sum of floats in list;
#X obj 30 10781 list.unique;
#X text 200 10781 removes duplicates from input list;
#X obj 30 10808 list.unpack;
#X text 200 10808 unpack list elements to separate outlets;
#X obj 30 10835 list.unzip;
#X text 200 10835 splits list to N lists \, each to separate output;
#X obj 30 10862 list.walk;
#X text 200 10862 Walks thru the list;
#X obj 30 10889 list.zip;
#X text 200 10889 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10944 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10985 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10996 live.capture~;
#X text 200 10996 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11036 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 11077 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11088 local.dict;
#X text 200 11088 local named dict object;
#X obj 30 11115 local.float;
#X text 200 11115 canvas-scoped named float variable;
#X obj 30 11142 local.int;
#X text 200 11142 canvas-scoped named integer variable;
#X obj 30 11169 local.list;
#X text 200 11169 local named list object;
#X obj 30 11196 local.mlist;
#X text 200 11196 local named mlist object;
#X obj 30 11223 local.set;
#X text 200 11223 local named set object;
#X obj 20 11250 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11291 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11302 math.abs;
#X text 200 11302 absolute value function;
#X obj 30 11329 math.abs~;
#X text 200 11329 absolute value function for signals;
#X obj 30 11356 math.acos;
#X text 200 11356 arc cosine function;
#X obj 30 11383 math.acosh;
#X text 200 11383 inverse hyperbolic cosine function;
#X obj 30 11410 math.acosh~;
#X text 200 11410 hyperbolic arc cosine for signals;
#X obj 30 11437 math.acos~;
#X text 200 11437 arc cosine function for signals;
#X obj 30 11464 math.and;
#X text 200 11464 operation AND for multiple arguments;
#X obj 30 11491 math.approx;
#X text 200 11491 check if input value approximately equal to pattern;
#X obj 30 11518 math.asin;
#X text 200 11518 arc sine function;
#X obj 30 11545 math.asinh;
#X text 200 11545 inverse hyperbolic sine function;
#X obj 30 11572 math.asinh~;
#X text 200 11572 hyperbolic arc sine for signals;
#X obj 30 11599 math.asin~;
#X text 200 11599 arc sine for signals;
#X obj 30 11626 math.atan;
#X text 200 11626 arc tangent function;
#X obj 30 11653 math.atanh;
#X text 200 11653 inverse hyperbolic tangent function;
#X obj 30 11680 math.atanh~;
#X text 200 11680 hyperbolic arc tangent for signals;
#X obj 30 11707 math.atan~;
#X text 200 11707 arc tangent for signals;
#X obj 30 11734 math.binomial;
#X text 200 11734 binomial coefficient calculator;
#X obj 30 11761 math.cabs~;
#X text 200 11761 magnitude of a complex signals;
#X obj 30 11788 math.carg~;
#X text 200 11788 phase angle of a complex signals;
#X obj 30 11815 math.cbrt;
#X text 200 11815 cube root function;
#X obj 30 11842 math.cbrt~;
#X text 200 11842 cube root function for signals;
#X obj 30 11869 math.cdiv~;
#X text 200 11869 division of complex signals;
#X obj 30 11896 math.ceil;
#X text 200 11896 round to smallest integral value not less than input
value;
#X obj 30 11923 math.ceil~;
#X text 200 11923 round to smallest integral value not less than input
value;
#X obj 30 11950 math.cexp~;
#X text 200 11950 exponent of a complex signals;
#X obj 30 11977 math.cmul~;
#X text 200 11977 multiplication of complex signals;
#X obj 30 12004 math.cos;
#X text 200 12004 cosine function;
#X obj 30 12031 math.cosh;
#X text 200 12031 hyperbolic cosine function;
#X obj 30 12058 math.cosh~;
#X text 200 12058 hyperbolic cosine for signals;
#X obj 30 12085 math.cos~;
#X text 200 12085 cosine function;
#X obj 30 12112 math.div;
#X text 200 12112 division (on lists too);
#X obj 30 12139 math.e;
#X text 200 12139 mathematical constant \, base of the natural logarithm;
#X obj 30 12166 math.erf;
#X text 200 12166 error function;
#X obj 30 12193 math.erf~;
#X text 200 12193 error function for signals;
#X obj 30 12220 math.exp;
#X text 200 12220 exponential functions;
#X obj 30 12247 math.exp2;
#X text 200 12247 exponential functions;
#X obj 30 12274 math.exp2~;
#X text 200 12274 base-2 exponential for signal;
#X obj 30 12301 math.expr;
#X text 200 12301 dynamic [expr];
#X obj 30 12328 math.exp~;
#X text 200 12328 base-e exponential for signal;
#X obj 30 12355 math.floor;
#X text 200 12355 round to largest integral value not greater than
x;
#X obj 30 12382 math.floor~;
#X text 200 12382 round to largest integral value not greater than
x;
#X obj 30 12409 math.gamma;
#X text 200 12409 gamma function;
#X obj 30 12436 math.gamma~;
#X text 200 12436 gamma function for floating point signals;
#X obj 30 12463 math.gcd;
#X text 200 12463 calculate greatest common divisor;
#X obj 30 12490 math.inf;
#X text 200 12490 infinity value that cannot be represented accurately;
#X obj 30 12517 math.inf~;
#X text 200 12517 inifinity signal generator;
#X obj 30 12544 math.lcm;
#X text 200 12544 calculate least common multiple;
#X obj 30 12571 math.lgamma;
#X text 200 12571 natural logarithm of the absolute value of the gamma
function;
#X obj 30 12598 math.lgamma~;
#X text 200 12598 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 12638 math.log;
#X text 200 12638 natural logarithm;
#X obj 30 12665 math.log10;
#X text 200 12665 logarithm functions;
#X obj 30 12692 math.log10~;
#X text 200 12692 natural logarithm;
#X obj 30 12719 math.log2;
#X text 200 12719 logarithm functions;
#X obj 30 12746 math.log2~;
#X text 200 12746 base-2 logarithm;
#X obj 30 12773 math.log~;
#X text 200 12773 natural logarithm;
#X obj 30 12800 math.mul;
#X text 200 12800 multiplication (on lists too);
#X obj 30 12827 math.nan;
#X text 200 12827 Not a Number \, unrepresentable value;
#X obj 30 12854 math.nan~;
#X text 200 12854 signal NaN;
#X obj 30 12881 math.neg;
#X text 200 12881 negate function;
#X obj 30 12908 math.or;
#X text 200 12908 operation OR for multiple arguments;
#X obj 30 12935 math.pi;
#X text 200 12935 mathematical constant;
#X obj 30 12962 math.pi~;
#X text 200 12962 mathematical constant;
#X obj 30 12989 math.polyeval;
#X text 200 12989 evaluates the polynomial described by the coefficients
list;
#X obj 30 13016 math.reciprocal;
#X text 200 13016 calculate reciprocal number;
#X obj 30 13043 math.reciprocal~;
#X text 200 13043 calculate reciprocal number for signals;
#X obj 30 13070 math.round;
#X text 200 13070 round to integral value \, regardless of rounding
direction;
#X obj 30 13097 math.round~;
#X text 200 13097 signal round;
#X obj 30 13124 math.sign;
#X text 200 13124 sign function;
#X obj 30 13151 math.sin;
#X text 200 13151 sine function;
#X obj 30 13178 math.sinh;
#X text 200 13178 hyperbolic sine function;
#X obj 30 13205 math.sinh~;
#X text 200 13205 hyperbolic sine for signals;
#X obj 30 13232 math.sin~;
#X text 200 13232 sine function;
#X obj 30 13259 math.sqrt;
#X text 200 13259 square root function;
#X obj 30 13286 math.sqrt~;
#X text 200 13286 square root for signal;
#X obj 30 13313 math.squared;
#X text 200 13313 value square;
#X obj 30 13340 math.squared~;
#X text 200 13340 signal value square;
#X obj 30 13367 math.sync_add;
#X text 200 13367 sync addition;
#X obj 30 13394 math.sync_and;
#X text 200 13394 sync logical AND operation;
#X obj 30 13421 math.sync_div;
#X text 200 13421 sync division;
#X obj 30 13448 math.sync_eq;
#X text 200 13448 sync equal numbers check;
#X obj 30 13475 math.sync_ge;
#X text 200 13475 sync greater equal numbers compare;
#X obj 30 13502 math.sync_gt;
#X text 200 13502 sync greater then numbers compare;
#X obj 30 13529 math.sync_le;
#X text 200 13529 sync less equal numbers compare;
#X obj 30 13556 math.sync_lshift;
#X text 200 13556 sync signed bit left shift;
#X obj 30 13583 math.sync_lt;
#X text 200 13583 sync less then numbers compare;
#X obj 30 13610 math.sync_mod;
#X text 200 13610 sync remainder of modulo division (float or integer);
#X obj 30 13637 math.sync_mul;
#X text 200 13637 sync multiplication;
#X obj 30 13664 math.sync_ne;
#X text 200 13664 sync numbers for not equality;
#X obj 30 13691 math.sync_or;
#X text 200 13691 sync logical OR operation;
#X obj 30 13718 math.sync_rshift;
#X text 200 13718 sync signed bit right shift;
#X obj 30 13745 math.sync_sub;
#X text 200 13745 sync subtraction;
#X obj 30 13772 math.sync_xor;
#X text 200 13772 sync logical XOR operation;
#X obj 30 13799 math.tan;
#X text 200 13799 tangent function;
#X obj 30 13826 math.tanh;
#X text 200 13826 hyperbolic tangent function;
#X obj 30 13853 math.tanh~;
#X text 200 13853 hyperbolic tangent for signals;
#X obj 30 13880 math.tan~;
#X text 200 13880 tangent function;
#X obj 30 13907 math.trunc;
#X text 200 13907 truncate to integer value;
#X obj 30 13934 math.trunc~;
#X text 200 13934 truncate to integer value;
#X obj 20 13961 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14002 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14013 midi.cc;
#X text 200 14013 enhanced version of vanilla ctlin;
#X obj 30 14040 midi.clock;
#X text 200 14040 midi clock toolbox;
#X obj 30 14067 midi.ctl2str;
#X text 200 14067 convert Standard MIDI Controllers number to name;
#X obj 30 14094 midi.event2ctl;
#X text 200 14094 convert MidiEvent message to controller channel/value
pair;
#X obj 30 14121 midi.event2note;
#X text 200 14121 convert MidiEvent message to midi note/velocity pair;
#X obj 30 14148 midi.event2prg;
#X text 200 14148 convert MidiEvent message to midi program change
value;
#X obj 30 14175 midi.file;
#X text 200 14175 standard midi file SMF reader and writer;
#X obj 30 14202 midi.kbd;
#X text 200 14202 computer keyboard midi;
#X obj 30 14229 midi.key2str;
#X text 200 14229 convert key number to SPN name according to tonality;
#X obj 30 14256 midi.modus;
#X text 200 14256 snap/skip midi pitches according modus;
#X obj 30 14283 midi.oct;
#X text 200 14283 midi octave transpose;
#X obj 30 14310 midi.prg2str;
#X text 200 14310 convert GM Instrument number to name (string or symbol);
#X obj 30 14337 midi.split;
#X text 200 14337 midi note splitter;
#X obj 30 14364 midi.sustain;
#X text 200 14364 sustain pedal emulation;
#X obj 30 14391 midi.sysex;
#X text 200 14391 sysex input messages as list;
#X obj 30 14418 midi.track;
#X text 200 14418 extract track from MidiFile;
#X obj 30 14445 midi.tuning;
#X text 200 14445 apply tuning to midi messages;
#X obj 30 14472 midi.vramp;
#X text 200 14472 apply crescendo or diminuendo for midi message flow;
#X obj 30 14499 midi.vrand;
#X text 200 14499 midi velocity randomizer;
#X obj 20 14526 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 14567 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14578 click~;
#X text 200 14578 Output single impulse on bang;
#X obj 30 14605 fluid~;
#X text 200 14605 FluidSynth SoundFont 2 player;
#X obj 30 14632 modplug~;
#X text 200 14632 MOD file player (using libmodplug);
#X obj 30 14659 risset.gliss;
#X text 200 14659 Sheppard/Risset glissando calculator;
#X obj 30 14686 sfizz~;
#X text 200 14686 SFZ format sample player;
#X obj 30 14713 speech.flite;
#X text 200 14713 render speech to array;
#X obj 30 14740 speech.flite~;
#X text 200 14740 render speech to array;
#X obj 20 14767 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 14808 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14819 loadexpr;
#X text 200 14819 send message when patch loads;
#X obj 30 14846 msg;
#X text 200 14846 message constructor;
#X obj 30 14873 msg.after;
#X text 200 14873 send specified message after incoming message;
#X obj 30 14900 msg.onload;
#X text 200 14900 send message when patch loads;
#X obj 30 14927 msg.sched;
#X text 200 14927 message scheduler;
#X obj 20 14954 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 14995 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15006 net.host2ip;
#X text 200 15006 returns IP address by DNS name;
#X obj 20 15033 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 15074 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15085 noise.baker;
#X text 200 15085 Part of a-chaos library;
#X obj 30 15112 noise.clifford;
#X text 200 15112 Part of a-chaos library;
#X obj 30 15139 noise.collatz;
#X text 200 15139 Part of a-chaos library;
#X obj 30 15166 noise.crackle~;
#X text 200 15166 sparse noise generator;
#X obj 30 15193 noise.duffing;
#X text 200 15193 Part of a-chaos library;
#X obj 30 15220 noise.ginger;
#X text 200 15220 Gingerbreadman map chaotic generator;
#X obj 30 15247 noise.henon;
#X text 200 15247 Part of a-chaos library;
#X obj 30 15274 noise.henon_heilles;
#X text 200 15274 Part of a-chaos library;
#X obj 30 15301 noise.henon_phase;
#X text 200 15301 Part of a-chaos library;
#X obj 30 15328 noise.henonf;
#X text 200 15328 Part of a-chaos library;
#X obj 30 15355 noise.ikeda;
#X text 200 15355 Part of a-chaos library;
#X obj 30 15382 noise.lfreq0~;
#X text 200 15382 sampled/held noise (piecewise constant);
#X obj 30 15409 noise.lfreq~;
#X text 200 15409 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 15436 noise.lorenz;
#X text 200 15436 Part of a-chaos library;
#X obj 30 15463 noise.lyapunov;
#X text 200 15463 Part of a-chaos library;
#X obj 30 15490 noise.navier_stokes;
#X text 200 15490 Part of a-chaos library;
#X obj 30 15517 noise.pink~;
#X text 200 15517 Pink noise generator;
#X obj 30 15544 noise.rossler;
#X text 200 15544 Part of a-chaos library;
#X obj 30 15571 noise.stein;
#X text 200 15571 Part of a-chaos library;
#X obj 30 15598 noise.torus;
#X text 200 15598 Part of a-chaos library;
#X obj 30 15625 noise.verhulst;
#X text 200 15625 Part of a-chaos library;
#X obj 30 15652 noise.white~;
#X text 200 15652 White noise generator;
#X obj 20 15679 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 15720 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15731 osc.blit~;
#X text 200 15731 Bandlimited impulse train oscillator;
#X obj 30 15758 osc.impulse~;
#X text 200 15758 Bandlimited impulse train generator;
#X obj 30 15785 osc.pulse~;
#X text 200 15785 Bandlimited pulse train oscillator;
#X obj 30 15812 osc.saw4~;
#X text 200 15812 Bandlimited sawtooth wave;
#X obj 30 15839 osc.saw~;
#X text 200 15839 Alias-free sawtooth wave;
#X obj 30 15866 osc.sinfb~;
#X text 200 15866 Sine oscilator with feedback;
#X obj 30 15893 osc.sin~;
#X text 200 15893 Sine wave oscillator;
#X obj 30 15920 osc.square~;
#X text 200 15920 Bandlimited square wave oscillator;
#X obj 30 15947 osc.tri~;
#X text 200 15947 Bandlimited triangle wave oscillator;
#X obj 20 15974 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 16015 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16026 canvas.current;
#X text 200 16026 verbose information about current canvas;
#X obj 30 16053 canvas.dir;
#X text 200 16053 current canvas directory;
#X obj 30 16080 canvas.name;
#X text 200 16080 current canvas name;
#X obj 30 16107 canvas.path;
#X text 200 16107 current canvas fullpath;
#X obj 30 16134 canvas.top;
#X text 200 16134 verbose information about top-level canvas;
#X obj 30 16161 patch.args;
#X text 200 16161 Get patch or subpatch arguments;
#X obj 30 16188 patch.deps;
#X text 200 16188 patch dependencies: used objects and abstractions;
#X obj 30 16215 patch.tree;
#X text 200 16215 patch tree;
#X obj 20 16242 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 16283 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16294 file.size;
#X text 200 16294 output file size;
#X obj 30 16321 path.basename;
#X text 200 16321 outputs filename portion of pathname;
#X obj 30 16348 path.dirname;
#X text 200 16348 outputs directory portion of pathname;
#X obj 30 16375 path.exists;
#X text 200 16375 checks if given path exists;
#X obj 30 16402 path.is_dir;
#X text 200 16402 check if path is directory;
#X obj 30 16429 path.lsdir;
#X text 200 16429 list directory contents;
#X obj 30 16456 path.normalize;
#X text 200 16456 normalize file paths;
#X obj 30 16483 path.search;
#X text 200 16483 file search;
#X obj 30 16510 path.split;
#X text 200 16510 file path split;
#X obj 20 16537 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 16578 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16589 is_any;
#X text 200 16589 checks if input data has *any* type;
#X obj 30 16616 is_bang;
#X text 200 16616 checks if input data has *bang* type;
#X obj 30 16643 is_data;
#X text 200 16643 checks if input data has *data* type;
#X obj 30 16670 is_dict;
#X text 200 16670 checks if input data has *dict* type;
#X obj 30 16697 is_even;
#X text 200 16697 checks if input number is even;
#X obj 30 16724 is_file;
#X text 200 16724 checks if file exists and accessible;
#X obj 30 16751 is_float;
#X text 200 16751 checks if input data has *float* type;
#X obj 30 16778 is_list;
#X text 200 16778 checks if input data has *list* type;
#X obj 30 16805 is_odd;
#X text 200 16805 checks if input number is odd;
#X obj 30 16832 is_pointer;
#X text 200 16832 checks if input data has *pointer* type;
#X obj 30 16859 is_symbol;
#X text 200 16859 checks if input data has *symbol* type;
#X obj 20 16886 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 16927 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16938 preset.float;
#X text 200 16938 load/store float preset;
#X obj 30 16965 preset.list;
#X text 200 16965 load/store symbol preset;
#X obj 30 16992 preset.storage;
#X text 200 16992 preset storage control;
#X obj 30 17019 preset.symbol;
#X text 200 17019 load/store symbol preset;
#X obj 20 17046 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 17087 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17098 patch.props;
#X text 200 17098 patch properties manager;
#X obj 30 17125 prop;
#X text 200 17125 get/set named property value for subpatch or abstraction;
#X obj 30 17152 prop.declare;
#X text 200 17152 declare named property for subpatch or abstraction;
#X obj 30 17179 prop.get;
#X text 200 17179 get property from connected object/subpatch/abstraction;
#X obj 30 17206 prop.get~;
#X text 200 17206 Property extractor from sound stream;
#X obj 30 17233 prop.join;
#X text 200 17233 join property to main data flow;
#X obj 30 17260 prop.random;
#X text 200 17260 property randomizer;
#X obj 30 17287 prop.set;
#X text 200 17287 set property for connected object/subpatch/abstraction;
#X obj 30 17314 prop.split;
#X text 200 17314 separate properties from dataflow;
#X obj 20 17341 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 17382 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17393 proto.firmata;
#X text 200 17393 Firmata Arduino protocol support;
#X obj 30 17420 proto.inscore;
#X text 200 17420 INScore message creator;
#X obj 30 17447 proto.midi;
#X text 200 17447 raw midi encoder/parser;
#X obj 30 17474 proto.midi.cc;
#X text 200 17474 raw midi CC encoder/parser;
#X obj 30 17501 proto.midi.sysex;
#X text 200 17501 raw midi SYSex encoder/parser;
#X obj 30 17528 proto.mpv;
#X text 200 17528 mpv video player control;
#X obj 30 17555 proto.sp.alpaca;
#X text 200 17555 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 17582 proto.whammy;
#X text 200 17582 Control for Digitech Whammy pedal;
#X obj 30 17609 proto.xtouch_ext;
#X text 200 17609 Behringer XTouch Extender XMidi protocol;
#X obj 20 17636 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 17677 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17688 random.atom;
#X text 200 17688 weighted atom generation from specified list;
#X obj 30 17715 random.discrete;
#X text 200 17715 random weighted integers on interval [0 \, n);
#X obj 30 17742 random.float;
#X text 200 17742 uniform random float generator in specified range;
#X obj 30 17769 random.gauss;
#X text 200 17769 gaussian random distribution;
#X obj 30 17796 random.int;
#X text 200 17796 uniform random integer generator in specified range;
#X obj 30 17823 random.linear;
#X text 200 17823 random linear distribution;
#X obj 30 17850 random.pw_const;
#X text 200 17850 piecewise constant random distribution;
#X obj 30 17877 random.pw_lin;
#X text 200 17877 piecewise linear random distribution;
#X obj 20 17904 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 17945 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17956 samp.time~;
#X text 200 17956 sample counter;
#X obj 20 17983 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 18024 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18035 seq.arp;
#X text 200 18035 sequence arpeggiator;
#X obj 30 18062 seq.bangs;
#X text 200 18062 bang sequencer;
#X obj 30 18089 seq.counter;
#X text 200 18089 sequencer counter;
#X obj 30 18116 seq.life;
#X text 200 18116 Conway gamw of life sequencer;
#X obj 30 18143 seq.matrix;
#X text 200 18143 sequencer control for ui.matrix;
#X obj 30 18170 seq.nbangs;
#X text 200 18170 output specified number of bang with time intervals;
#X obj 30 18197 seq.phasor;
#X text 200 18197 control rate phasor (saw) generator;
#X obj 30 18224 seq.toggles;
#X text 200 18224 toggle sequencer;
#X obj 30 18251 sequencer;
#X text 200 18251 basic sequence player;
#X obj 20 18278 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 18319 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18330 snd.file;
#X text 200 18330 Sound file loader on steroids;
#X obj 20 18357 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 18398 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18409 hoa.2d.decoder~;
#X text 200 18409 hoa 2d decoder;
#X obj 30 18436 hoa.2d.encoder~;
#X text 200 18436 hoa 2d encoder;
#X obj 30 18463 hoa.2d.map~;
#X text 200 18463 a 2d ambisonic multisource spatializer;
#X obj 30 18490 hoa.2d.optim~;
#X text 200 18490 a 2D ambisonic optimization tool;
#X obj 30 18517 hoa.2d.projector~;
#X text 200 18517 a plane waves decomposer from circular harmonics
domain;
#X obj 30 18544 hoa.2d.recomposer~;
#X text 200 18544 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 18584 hoa.2d.rotate~;
#X text 200 18584 a 2D ambisonic sound field rotation;
#X obj 30 18611 hoa.2d.wider~;
#X text 200 18611 a 2d fractional ambisonic order simulator;
#X obj 30 18638 hoa.@process;
#X text 200 18638 process properties manager for hoa.process~;
#X obj 30 18665 hoa.in;
#X text 200 18665 message inlet for a patcher loaded by hoa.process~;
#X obj 30 18692 hoa.in~;
#X text 200 18692 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18719 hoa.out;
#X text 200 18719 message outlet for a patcher loaded by hoa.process~;
#X obj 30 18746 hoa.out~;
#X text 200 18746 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18773 hoa.process~;
#X text 200 18773 patcher loader for multichannel processing;
#X obj 30 18803 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 18800 a 2d ambisonic harmonic scope;
#X obj 30 18825 pan.cos~;
#X text 200 18825 two channel equal power sine/cosine panner;
#X obj 30 18852 pan.linsig~;
#X text 200 18852 two channel linear panner with signal control;
#X obj 30 18879 pan.lin~;
#X text 200 18879 two channel linear panner;
#X obj 30 18906 pan.spread~;
#X text 200 18906 spreads input channels across the stereo field;
#X obj 30 18933 pan.sqrt~;
#X text 200 18933 two channel equal power square root panner;
#X obj 30 18960 spat.pan4~;
#X text 200 18960 GMEM SPAT: 4-outputs spatializer;
#X obj 30 18987 spat.pan8~;
#X text 200 18987 GMEM SPAT: 8-outputs spatializer;
#X obj 30 19014 spat.zita6x8~;
#X text 200 19014 spat with 6 inputs sources to 8 channel output;
#X obj 30 19041 spat.zita8~;
#X text 200 19041 8 channel reverb spatializer;
#X obj 20 19068 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 19109 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19120 string;
#X text 200 19120 string constructor;
#X obj 30 19147 string.contains;
#X text 200 19147 checks if string contains specified substring;
#X obj 30 19174 string.ends_with;
#X text 200 19174 checks if string ends with specified substring;
#X obj 30 19201 string.equal;
#X text 200 19201 check strings or symbols for equality;
#X obj 30 19228 string.format;
#X text 200 19228 formats string like printf.;
#X obj 30 19255 string.join;
#X text 200 19255 joins (concatenates) list to string with separator;
#X obj 30 19282 string.length;
#X text 200 19282 number of characters in string (unicode supported);
#X obj 30 19309 string.match;
#X text 200 19309 check if string match regular expression;
#X obj 30 19336 string.remove;
#X text 200 19336 remove substring from input string;
#X obj 30 19363 string.replace;
#X text 200 19363 replace from one substring to another in input string;
#X obj 30 19390 string.split;
#X text 200 19390 split string or symbol by separator;
#X obj 30 19417 string.starts_with;
#X text 200 19417 checks if string starts with specified substring;
#X obj 30 19444 string.substr;
#X text 200 19444 extract substring from input string;
#X obj 30 19471 string2symbol;
#X text 200 19471 converts string to symbol;
#X obj 20 19498 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 19539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19550 symbol.equal;
#X text 200 19550 check symbols for equality;
#X obj 30 19577 symbol.length;
#X text 200 19577 number of characters in symbol (unicode supported);
#X obj 30 19604 symbol.num_compare;
#X text 200 19604 numeric symbol compare;
#X obj 30 19631 symbol2any;
#X text 200 19631 converts symbol or string to message;
#X obj 30 19658 symbol2intlist;
#X text 200 19658 converts symbol to list of character codes;
#X obj 20 19685 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 19726 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19737 synth.bee3~;
#X text 200 19737 Hammond-oid organ FM synthesis instrument;
#X obj 30 19764 synth.birds~;
#X text 200 19764 bird singing generator;
#X obj 30 19791 synth.church_bell~;
#X text 200 19791 generic church bell modal model;
#X obj 30 19818 synth.dubdub~;
#X text 200 19818 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 19858 synth.dx7~;
#X text 200 19858 FAUST dx7 implementation;
#X obj 30 19885 synth.eguitar~;
#X text 200 19885 simple electric guitar model with steel strings;
#X obj 30 19912 synth.english_bell~;
#X text 200 19912 english church bell modal model;
#X obj 30 19939 synth.fgrain~;
#X text 200 19939 file granulator from STK;
#X obj 30 19966 synth.french_bell~;
#X text 200 19966 french church bell modal model;
#X obj 30 19993 synth.german_bell~;
#X text 200 19993 german church bell modal model;
#X obj 30 20020 synth.glass_harm~;
#X text 200 20020 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 20047 synth.glitch~;
#X text 200 20047 Glitch synthesizer by naivesound;
#X obj 30 20074 synth.harpsichord~;
#X text 200 20074 waveguide commuted harpsichord;
#X obj 30 20101 synth.kick~;
#X text 200 20101 low-kick synth from Guitarix project;
#X obj 30 20128 synth.ks~;
#X text 200 20128 Karplus-Strong string;
#X obj 30 20155 synth.marimba~;
#X text 200 20155 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 20195 synth.piano~;
#X text 200 20195 waveguide commuted piano;
#X obj 30 20222 synth.rhodey~;
#X text 200 20222 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 20249 synth.risset_arp~;
#X text 200 20249 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 20276 synth.risset_bell~;
#X text 200 20276 Jean Claude Risset's bell synth;
#X obj 30 20303 synth.risset_tone~;
#X text 200 20303 Jean Claude Risset's endless glissando;
#X obj 30 20330 synth.russian_bell~;
#X text 200 20330 russian church bell modal model;
#X obj 30 20357 synth.shakers~;
#X text 200 20357 various percussion sounds from STK library;
#X obj 30 20384 synth.sitar~;
#X text 200 20384 STK sitar;
#X obj 30 20411 synth.snare~;
#X text 200 20411 Snare drum synth from Guitarix project;
#X obj 30 20438 synth.standard_bell~;
#X text 200 20438 german church bell modal model;
#X obj 30 20465 synth.tube_bell~;
#X text 200 20465 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 20492 synth.wurley~;
#X text 200 20492 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 20519 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 20560 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20571 system.colorpanel;
#X text 200 20571 System color panel dialog popup;
#X obj 30 20598 system.cursor;
#X text 200 20598 Output cursor motion \, mousewheel and button clicks;
#X obj 30 20625 system.exec;
#X text 200 20625 run external command in separate process;
#X obj 30 20652 system.exit;
#X text 200 20652 quit PureData;
#X obj 30 20679 system.getenv;
#X text 200 20679 Get system environment variables;
#X obj 30 20706 system.hostname;
#X text 200 20706 outputs system hostname;
#X obj 30 20733 system.memsize;
#X text 200 20733 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 20773 system.memused;
#X text 200 20773 returns the process physical memory use - current
and peak;
#X obj 30 20800 system.screen_size;
#X text 200 20800 returns current screen size in pixels;
#X obj 20 20827 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 20868 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20879 tl.bang;
#X text 200 20879 Timeline bang (with possible delay);
#X obj 30 20909 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 20906 Timeline section;
#X obj 30 20931 tl.timeline;
#X text 200 20931 Timeline - event scheduler;
#X obj 30 20958 tl.toggle;
#X text 200 20958 Timeline bang;
#X obj 30 20985 tl.transport;
#X text 200 20985 Timeline transport control;
#X obj 20 21012 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 21053 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21067 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 21064 array view with cursor and selection;
#X obj 30 21092 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 21089 A bang... that's all;
#X obj 30 21117 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 21114 button widget;
#X obj 30 21142 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 21139 colorchooser widget;
#X obj 30 21167 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 21164 Display GUI object;
#X obj 30 21192 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 21189 GUI for turning DSP on/off;
#X obj 30 21217 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 21214 envelope editor widget;
#X obj 30 21242 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 21239 UI filter object calculator for biquad filter;
#X obj 30 21267 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 21264 UI filter object based on biquad filter;
#X obj 30 21292 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 21289 UI stereo gain control;
#X obj 30 21317 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 21314 UI gain control;
#X obj 30 21342 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 21339 simple icon with button capabilities;
#X obj 30 21367 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 21364 value increment/decrement;
#X obj 30 21392 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 21389 keyboard widget;
#X obj 30 21417 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 21414 knob widget;
#X obj 30 21442 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 21439 simple label widget;
#X obj 30 21467 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 21464 Hyperlink widget;
#X obj 30 21492 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 21489 The matrix of toggles has you.;
#X obj 30 21517 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 21514 Dropdown menu;
#X obj 30 21542 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 21539 Shows peak and rms signal level;
#X obj 30 21567 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 21564 incoming MIDI message viewport;
#X obj 30 21592 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 21589 filter mouse events from ui objects;
#X obj 30 21617 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 21614 routes mouse events from ui objects;
#X obj 30 21642 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 21639 counterpart of the vanilla [nbx];
#X obj 30 21667 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 21664 counterpart of the vanilla [nbx] for signal;
#X obj 30 21692 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 21689 signal plotter;
#X obj 30 21717 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 21714 2D slider in polar coordinates;
#X obj 30 21742 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 21739 Preset manager;
#X obj 30 21767 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 21764 counterpart of the vanilla radio toggle;
#X obj 30 21792 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 21789 range slider;
#X obj 30 21817 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 21814 Scope GUI object;
#X obj 30 21842 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 21839 counterpart of the vanilla slider;
#X obj 30 21867 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 21864 2D slider widget;
#X obj 30 21892 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 21889 Multiple slider widget;
#X obj 30 21917 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 21914 Spectroscope GUI object;
#X obj 30 21942 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 21939 displays a list of text buttons or text toggles;
#X obj 30 21967 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 21964 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 21989 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 21989 version: v0.9.4 \, license: GPL3;
#X obj 20 22017 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 22040 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 22004 msg 0;
#X obj 670 22039 switch~;
#X connect 1534 0 1535 0;