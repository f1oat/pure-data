#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 20 292 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 333 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 344 array.bpm;
#X text 200 344 BPM calculator;
#X obj 30 371 array.circular~;
#X text 200 371 circular buffer for arrays;
#X obj 30 398 array.copy;
#X text 200 398 copy samples from one array to another;
#X obj 30 425 array.do;
#X text 200 425 iterate and modify array content via side-chain;
#X obj 30 452 array.each;
#X text 200 452 process each array elements via side-chain;
#X obj 30 479 array.fill;
#X text 200 479 fill array with single value or pattern;
#X obj 30 506 array.grainer~;
#X text 200 506 array granulator;
#X obj 30 533 array.hist;
#X text 200 533 calculates array histogram;
#X obj 30 560 array.mean;
#X text 200 560 calculates array arithmetic mean value;
#X obj 30 587 array.minmax;
#X text 200 587 find array min and max element value;
#X obj 30 614 array.play~;
#X text 200 614 array player with variable speed and amplitude;
#X obj 30 641 array.plot;
#X text 200 641 array data plotter;
#X obj 30 668 array.plot~;
#X text 200 668 plot signal on specified array;
#X obj 30 695 array.resample;
#X text 200 695 array resampler;
#X obj 30 722 array.rms;
#X text 200 722 calculates root mean square value for array;
#X obj 30 749 array.set;
#X text 200 749 set array content from list;
#X obj 30 776 array.stddev;
#X text 200 776 calculates standard deviation for array values;
#X obj 30 803 array.stretch;
#X text 200 803 array time-stretch \, pitch-shift or rate-change;
#X obj 30 830 array.sum;
#X text 200 830 calculates sum of array elements;
#X obj 30 857 array.sum2;
#X text 200 857 calculates sum of squares of array elements;
#X obj 30 884 array.variance;
#X text 200 884 calculates variance of array values;
#X obj 30 911 array.vplay;
#X text 200 911 simple array player for using with vline~;
#X obj 30 938 array.window;
#X text 200 938 fill array with window;
#X obj 30 965 plot.geomspace~;
#X text 200 965 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1005 plot.hist~;
#X text 200 1005 calculate and output signal histogram;
#X obj 30 1032 plot.linspace~;
#X text 200 1032 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1072 plot.logspace~;
#X text 200 1072 outputs numbers spaced evenly on a log scale;
#X obj 30 1099 plot.response~;
#X text 200 1099 output amp/phase freq response to impulse;
#X obj 20 1126 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1167 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1178 ceammc.search;
#X text 200 1178 ceammc library search object;
#X obj 30 1208 ui.link @title [function] @url function-help.pd;
#X text 200 1205 named function;
#X obj 30 1230 function.call;
#X text 200 1230 call named function;
#X obj 30 1257 gain~;
#X text 200 1257 multislot signal gain;
#X obj 30 1284 logger;
#X text 200 1284 advanced data logger;
#X obj 30 1311 matrix~;
#X text 200 1311 signal routing matrix;
#X obj 30 1338 metro.pattern;
#X text 200 1338 metro with rhythmic patterns;
#X obj 30 1365 metro.random;
#X text 200 1365 metro random bang with specified range;
#X obj 30 1392 metro.seq;
#X text 200 1392 metro sequencer;
#X obj 30 1419 mix~;
#X text 200 1419 multislot signal mixer;
#X obj 30 1446 nsig~;
#X text 200 1446 Mulitchannel converter from control to audio rate;
#X obj 30 1473 obj.props;
#X text 200 1473 property extractor;
#X obj 30 1500 radio;
#X text 200 1500 float index to outlet values as radio switch;
#X obj 30 1527 spring;
#X text 200 1527 float value "spring";
#X obj 30 1554 sync;
#X text 200 1554 value synchronization;
#X obj 30 1581 window;
#X text 200 1581 returns window value by given window position;
#X obj 30 1608 xdac~;
#X text 200 1608 dac~ with channel ranges;
#X obj 30 1635 xfade2~;
#X text 200 1635 multi stereo-signal crossfade;
#X obj 30 1662 xfade~;
#X text 200 1662 multi signal crossfade;
#X obj 20 1689 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1730 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1741 chaos.gbman0;
#X text 200 1741 Gingerbreadman map chaotic generator;
#X obj 30 1768 chaos.gbman0~;
#X text 200 1768 Gingerbreadman map chaotic generator;
#X obj 30 1795 chaos.jong;
#X text 200 1795 Peter de Jong attractor;
#X obj 30 1822 chaos.logistic;
#X text 200 1822 Logistic map chaotic generator;
#X obj 30 1849 chaos.std0;
#X text 200 1849 Standard map chaotic generator;
#X obj 30 1876 chaos.std0~;
#X text 200 1876 Standard map chaotic generator;
#X obj 20 1903 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1944 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1955 array.p2s;
#X text 200 1955 convert array phase [0\..1] to sample position;
#X obj 30 1982 array.s2p;
#X text 200 1982 convert sample position to phase range [0\..1];
#X obj 30 2009 conv.amp2dbfs;
#X text 200 2009 convert from amplitude to decibel full scale;
#X obj 30 2036 conv.amp2dbfs~;
#X text 200 2036 convert from amplitude to decibel full scale;
#X obj 30 2063 conv.bits2bang;
#X text 200 2063 convert list of bits to bang events;
#X obj 30 2090 conv.bits2int;
#X text 200 2090 convert list of bits to integer;
#X obj 30 2117 conv.bits2note;
#X text 200 2117 convert list of bits to note events;
#X obj 30 2144 conv.bits2pos;
#X text 200 2144 convert list of bits to list of bit position;
#X obj 30 2171 conv.bpm2hz;
#X text 200 2171 converts BPM to frequency in herz;
#X obj 30 2198 conv.bpm2ms;
#X text 200 2198 convert frequency in BPM to period in milliseconds;
#X obj 30 2225 conv.bpm2sec;
#X text 200 2225 convert frequency in BPM to period in seconds;
#X obj 30 2252 conv.car2pol;
#X text 200 2252 convert cartesian coords to polar;
#X obj 30 2279 conv.cc2amp;
#X text 200 2279 convert from MIDI Control Change range;
#X obj 30 2306 conv.dbfs2amp;
#X text 200 2306 convert decibel full scale to amplitude;
#X obj 30 2333 conv.dbfs2amp~;
#X text 200 2333 convert decibel full scale to amplitude;
#X obj 30 2360 conv.degree2key;
#X text 200 2360 convert scale degree to key;
#X obj 30 2387 conv.hex2int;
#X text 200 2387 hex symbol to int value;
#X obj 30 2414 conv.int2bits;
#X text 200 2414 convert integer to list of bits;
#X obj 30 2441 conv.lin2curve;
#X text 200 2441 map linear to exponential range with 0 allowed.;
#X obj 30 2468 conv.lin2exp;
#X text 200 2468 maps linear range to exponential range;
#X obj 30 2495 conv.lin2lin;
#X text 200 2495 convert from one linear range to another;
#X obj 30 2522 conv.lin2lin~;
#X text 200 2522 convert from one linear range to another for signals;
#X obj 30 2549 conv.list2props;
#X text 200 2549 converts list to series of property messages;
#X obj 30 2576 conv.midi2freq;
#X text 200 2576 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2616 conv.ms2bpm;
#X text 200 2616 convert period in milliseconds to frequency in BPM;
#X obj 30 2643 conv.ms2samp;
#X text 200 2643 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2683 conv.ms2samp~;
#X text 200 2683 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2723 conv.phase2rad;
#X text 200 2723 convert phase value [0-1] to radians [0-2π];
#X obj 30 2750 conv.phase2rad~;
#X text 200 2750 convert phase value [0-1] to radians [0-2π];
#X obj 30 2777 conv.pitch2midi;
#X text 200 2777 converts symbol pitch name to MIDI note number;
#X obj 30 2804 conv.pol2car;
#X text 200 2804 convert from polar coordinates to cartesian;
#X obj 30 2831 conv.rad2phase;
#X text 200 2831 convert radians value to phase;
#X obj 30 2858 conv.rad2phase~;
#X text 200 2858 convert radians value to phase;
#X obj 30 2885 conv.samp2ms;
#X text 200 2885 convert samples to time according to samplerate;
#X obj 30 2912 conv.samp2ms~;
#X text 200 2912 convert samples to milliseconds according to samplerate;
#X obj 30 2939 conv.samp2sec;
#X text 200 2939 convert samples to time according to samplerate;
#X obj 30 2966 conv.sec2bpm;
#X text 200 2966 convert period in seconds to frequency in BPM;
#X obj 30 2993 conv.sec2samp;
#X text 200 2993 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3033 conv.sec2str;
#X text 200 3033 converts float time in seconds to formated symbol
(or string);
#X obj 30 3060 conv.sig2float~;
#X text 200 3060 convert signal to floats;
#X obj 30 3087 conv.str2sec;
#X text 200 3087 converts formatted time to float value in seconds;
#X obj 30 3114 music.dur2time;
#X text 200 3114 convert duration list to time;
#X obj 30 3141 music.voice2midi;
#X text 200 3141 convert voice music list of midi pitches;
#X obj 20 3168 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3209 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3220 data.copy;
#X text 200 3220 make copy for any data types: MList \, Set etc...;
#X obj 30 3247 data.dict;
#X text 200 3247 dictionary container: store values by key;
#X obj 30 3274 data.fifo;
#X text 200 3274 First-In-First-Out (FIFO) queue data container;
#X obj 30 3301 data.float;
#X text 200 3301 robust float object;
#X obj 30 3328 data.int;
#X text 200 3328 robust int object;
#X obj 30 3355 data.list;
#X text 200 3355 list container;
#X obj 30 3382 data.mlist;
#X text 200 3382 multidimensional list container;
#X obj 30 3409 data.set;
#X text 200 3409 container that store unique elements;
#X obj 30 3436 data.set2list;
#X text 200 3436 converts set to list;
#X obj 30 3463 dict.contains;
#X text 200 3463 predicate to check if dict contains a keys;
#X obj 30 3490 dict.each;
#X text 200 3490 map each value in dict;
#X obj 30 3517 dict.from_list;
#X text 200 3517 creates dictionary from list;
#X obj 30 3544 dict.get;
#X text 200 3544 output dict values;
#X obj 30 3571 dict.keys;
#X text 200 3571 get list of dict keys;
#X obj 30 3598 dict.pass;
#X text 200 3598 passes specified keys in dict;
#X obj 30 3625 dict.reject;
#X text 200 3625 rejects specified keys from dict;
#X obj 30 3652 dict.size;
#X text 200 3652 dictionary size;
#X obj 30 3679 dict.to_list;
#X text 200 3679 converts dictionary to plain list;
#X obj 30 3706 dict.values;
#X text 200 3706 dictionary values as mlist;
#X obj 30 3733 mlist.flatten;
#X text 200 3733 flatten nested mlist;
#X obj 30 3760 rtree.to_list;
#X text 200 3760 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3787 set.contains;
#X text 200 3787 check if specified element is in set;
#X obj 30 3814 set.diff;
#X text 200 3814 difference between two sets;
#X obj 30 3841 set.equal;
#X text 200 3841 checks if two sets are equal (contains same elements);
#X obj 30 3868 set.intersect;
#X text 200 3868 output intersection of given sets;
#X obj 30 3895 set.size;
#X text 200 3895 get number of elements in set;
#X obj 30 3922 set.symdiff;
#X text 200 3922 symmetric difference between two sets;
#X obj 30 3949 set.union;
#X text 200 3949 output union of given sets;
#X obj 20 3976 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4017 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4028 dyn.comp2~;
#X text 200 4028 stereo dynamic range compressor;
#X obj 30 4055 dyn.comp~;
#X text 200 4055 mono dynamic range compressors;
#X obj 30 4082 dyn.gate2~;
#X text 200 4082 stereo signal gate;
#X obj 30 4109 dyn.gate~;
#X text 200 4109 mono signal gate;
#X obj 30 4136 dyn.limit2~;
#X text 200 4136 stereo 1176LN Peak Limiter;
#X obj 30 4163 dyn.limit~;
#X text 200 4163 mono 1176LN Peak Limiter;
#X obj 30 4190 dyn.softclip~;
#X text 200 4190 soft signal clip;
#X obj 20 4217 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4258 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4269 env.adsr~;
#X text 200 4269 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4296 env.ar~;
#X text 200 4296 Attack/Release envelope generator;
#X obj 30 4323 env.asr~;
#X text 200 4323 Attack/Sustain/Release envelope generator;
#X obj 30 4350 env.concat;
#X text 200 4350 Envelope concatenation;
#X obj 30 4377 env.follow~;
#X text 200 4377 Envelope follower with independent attack and release
times;
#X obj 30 4404 env.mix;
#X text 200 4404 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4444 env.smooth~;
#X text 200 4444 An envelope with an exponential attack and release;
#X obj 30 4471 env.tscale;
#X text 200 4471 Envelope time-scale;
#X obj 30 4498 env.tshift;
#X text 200 4498 Envelope time-shift (horizontal);
#X obj 30 4525 env.vscale;
#X text 200 4525 Envelope value-scale;
#X obj 30 4552 env2array;
#X text 200 4552 Renders envelope to specified array;
#X obj 30 4579 env2vline;
#X text 200 4579 Converts envelope to bunch of vline messages;
#X obj 30 4606 envelope;
#X text 200 4606 Envelope data type;
#X obj 30 4633 vline2env;
#X text 200 4633 Converts vline messages to env;
#X obj 20 4660 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4701 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4712 expand_env;
#X text 200 4712 Substitute environment variables in data stream;
#X obj 30 4739 flow.append;
#X text 200 4739 append message to flow stream;
#X obj 30 4766 flow.change;
#X text 200 4766 rejects redundant input values;
#X obj 30 4793 flow.count;
#X text 200 4793 control flow event counter;
#X obj 30 4820 flow.delay;
#X text 200 4820 enhanced version on vanilla delay object;
#X obj 30 4847 flow.demultiplex;
#X text 200 4847 control flow demultiplexer;
#X obj 30 4874 flow.demultiplex2~;
#X text 200 4874 audio stream stereo demultiplexer;
#X obj 30 4901 flow.demultiplex~;
#X text 200 4901 audio stream demultiplexer;
#X obj 30 4928 flow.dollar;
#X text 200 4928 data flow dollar converter;
#X obj 30 4955 flow.dup;
#X text 200 4955 message duplicator;
#X obj 30 4982 flow.float;
#X text 200 4982 pass floats;
#X obj 30 5009 flow.gate;
#X text 200 5009 control flow gate. [spigot] analog;
#X obj 30 5036 flow.greater;
#X text 200 5036 numeric stream router;
#X obj 30 5063 flow.greater_eq;
#X text 200 5063 numeric stream router;
#X obj 30 5090 flow.group;
#X text 200 5090 group input atoms in list of specified size;
#X obj 30 5117 flow.interval;
#X text 200 5117 measure time between flow events;
#X obj 30 5144 flow.less;
#X text 200 5144 numeric stream router \, like many [moses];
#X obj 30 5171 flow.less_eq;
#X text 200 5171 numeric stream router \, like many [moses];
#X obj 30 5198 flow.list2many;
#X text 200 5198 routes list element with message selectors;
#X obj 30 5225 flow.match;
#X text 200 5225 route data flow by regexp match;
#X obj 30 5252 flow.mem;
#X text 200 5252 store data flow in memory;
#X obj 30 5279 flow.multiplex;
#X text 200 5279 control flow multiplexer;
#X obj 30 5306 flow.multiplex2~;
#X text 200 5306 audio stream stereo multiplexer;
#X obj 30 5333 flow.multiplex~;
#X text 200 5333 audio stream multiplexer;
#X obj 30 5360 flow.once;
#X text 200 5360 one message pass thru;
#X obj 30 5387 flow.pack;
#X text 200 5387 flow pack;
#X obj 30 5414 flow.pass;
#X text 200 5414 pass specified values;
#X obj 30 5441 flow.pass_if;
#X text 200 5441 pass values that accepted by predicate object;
#X obj 30 5468 flow.pipe;
#X text 200 5468 enhanced version on vanilla pipe object;
#X obj 30 5495 flow.queue;
#X text 200 5495 multi-channel control flow sync queue (or FIFO);
#X obj 30 5522 flow.record;
#X text 200 5522 flow stream recorder/player;
#X obj 30 5549 flow.reject;
#X text 200 5549 reject specified values;
#X obj 30 5576 flow.reject_if;
#X text 200 5576 reject values by predicate;
#X obj 30 5603 flow.ring;
#X text 200 5603 dataflow ring buffer;
#X obj 30 5630 flow.route;
#X text 200 5630 advanced message router;
#X obj 30 5657 flow.select;
#X text 200 5657 vanilla flow on steroids;
#X obj 30 5684 flow.space;
#X text 200 5684 space in time messages received at the same logical
time;
#X obj 30 5711 flow.speedlim;
#X text 200 5711 control stream speed limiter;
#X obj 30 5738 flow.split;
#X text 200 5738 split data flow by external side-chain predicate;
#X obj 30 5765 flow.stack;
#X text 200 5765 any message stack;
#X obj 30 5792 flow.sync;
#X text 200 5792 bus with only hot inlets;
#X obj 30 5819 flow.sync_pack;
#X text 200 5819 flow pack with all hot inlets;
#X obj 30 5846 flow.tee~;
#X text 200 5846 separate audio and control streams;
#X obj 30 5873 replace;
#X text 200 5873 Replace atoms in data stream;
#X obj 30 5900 route.float;
#X text 200 5900 separate float messages from other types;
#X obj 20 5927 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5968 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5979 flt.biquad~;
#X text 200 5979 second order IIR filter.;
#X obj 30 6006 flt.bpf12~;
#X text 200 6006 Two pole band-pass butterworth filter;
#X obj 30 6033 flt.bpf24~;
#X text 200 6033 Four pole band-pass butterworth filter;
#X obj 30 6060 flt.c_apf;
#X text 200 6060 Allpass filter coefficient calculator for biquad;
#X obj 30 6087 flt.c_bpf~;
#X text 200 6087 BPF coefficient calculator for biquad filter;
#X obj 30 6114 flt.c_highshelf~;
#X text 200 6114 Highshelf filter coefficient calculator for biquad;
#X obj 30 6141 flt.c_hpf;
#X text 200 6141 HPF coefficient calculator for biquad filter;
#X obj 30 6168 flt.c_hpf~;
#X text 200 6168 HPF coefficient calculator for biquad filter;
#X obj 30 6195 flt.c_lowshelf~;
#X text 200 6195 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6222 flt.c_lpf;
#X text 200 6222 LPF coefficient calculator for biquad filter;
#X obj 30 6249 flt.c_lpf~;
#X text 200 6249 LPF coefficient calculator for biquad filter;
#X obj 30 6276 flt.c_notch;
#X text 200 6276 Notch filter coefficient calculator for biquad;
#X obj 30 6303 flt.c_notch~;
#X text 200 6303 Band-reject coefficient calculator for biquad filter;
#X obj 30 6330 flt.c_peak~;
#X text 200 6330 Peaking equalizer calculator for biquad;
#X obj 30 6357 flt.c_pole;
#X text 200 6357 One-pole coefficient calculator for biquad filter;
#X obj 30 6384 flt.dcblock2~;
#X text 200 6384 stereo DC blocker;
#X obj 30 6411 flt.dcblock~;
#X text 200 6411 mono DC blocker;
#X obj 30 6438 flt.eq10~;
#X text 200 6438 graphic 10 band equalizer;
#X obj 30 6465 flt.eq_peak_cq~;
#X text 200 6465 constant-Q second order peaking equalizer section;
#X obj 30 6492 flt.eq_peak~;
#X text 200 6492 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6547 flt.fb_comb~;
#X text 200 6547 feedback comb filter;
#X obj 30 6574 flt.fbank5x1~;
#X text 200 6574 5 band one octave butterworth filterbank;
#X obj 30 6601 flt.ff_comb~;
#X text 200 6601 feed forward comb filter;
#X obj 30 6628 flt.freqz;
#X text 200 6628 compute the frequency response of a digital filter;
#X obj 30 6655 flt.freqz~;
#X text 200 6655 compute the frequency response of a digital filter;
#X obj 30 6682 flt.highshelf~;
#X text 200 6682 gain boost|cut above some frequency;
#X obj 30 6709 flt.hpf12~;
#X text 200 6709 High-pass second order Butterworth filter;
#X obj 30 6736 flt.hpf24~;
#X text 200 6736 High-pass fourth order Butterworth filter;
#X obj 30 6763 flt.lowshelf~;
#X text 200 6763 gain boost|cut below some frequency;
#X obj 30 6790 flt.lpf12~;
#X text 200 6790 Low-pass second order Butterworth filter;
#X obj 30 6817 flt.lpf24~;
#X text 200 6817 Low-pass fourth order Butterworth filter;
#X obj 30 6844 flt.median;
#X text 200 6844 Median control flow filter;
#X obj 30 6871 flt.moog_vcf~;
#X text 200 6871 Moog Voltage Controlled Filter;
#X obj 30 6898 flt.notch~;
#X text 200 6898 band-rejection filter;
#X obj 30 6925 flt.resonbp~;
#X text 200 6925 Simple resonant bandpass filter;
#X obj 20 6952 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6993 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7004 fx.bitdown~;
#X text 200 7004 bit downer and downsampler effect;
#X obj 30 7031 fx.chorus~;
#X text 200 7031 Chorus effect;
#X obj 30 7058 fx.distortion1~;
#X text 200 7058 distortion #1 from Guitarix effects set;
#X obj 30 7085 fx.distortion2~;
#X text 200 7085 distortion #2 from Guitarix effects set;
#X obj 30 7112 fx.distortion3~;
#X text 200 7112 simple distortion #3 from Guitarix effects set;
#X obj 30 7139 fx.distortion~;
#X text 200 7139 cubic nonlinearity distortion;
#X obj 30 7166 fx.drive~;
#X text 200 7166 Guitarix drive effect;
#X obj 30 7193 fx.drone_box~;
#X text 200 7193 mono sympathetic resonance generator;
#X obj 30 7220 fx.echo2~;
#X text 200 7220 stereo echo effect;
#X obj 30 7247 fx.echo~;
#X text 200 7247 simple echo effect;
#X obj 30 7274 fx.flanger~;
#X text 200 7274 mono flanging effect;
#X obj 30 7301 fx.freeverb2~;
#X text 200 7301 freeverb2 - stereo version of freeverb;
#X obj 30 7328 fx.freeverb~;
#X text 200 7328 freeverb - common used open-source reverb;
#X obj 30 7355 fx.freqshift~;
#X text 200 7355 frequency shifter or single-sideband ring modulation;
#X obj 30 7382 fx.granulator~;
#X text 200 7382 simple input stream granulator;
#X obj 30 7409 fx.greyhole~;
#X text 200 7409 A complex echo-like effect;
#X obj 30 7436 fx.infrev~;
#X text 200 7436 port of Infinity VST plugin from airwindows;
#X obj 30 7463 fx.looper~;
#X text 200 7463 One track looper;
#X obj 30 7490 fx.pitchshift_s~;
#X text 200 7490 signal version of fx.pitchshift~;
#X obj 30 7517 fx.pitchshift~;
#X text 200 7517 simple pitch shifter based on 2 delay lines;
#X obj 30 7544 fx.rb_pitchshift~;
#X text 200 7544 rubber band pitchshift;
#X obj 30 7571 fx.recho~;
#X text 200 7571 reversed echo effect;
#X obj 30 7598 fx.room~;
#X text 200 7598 Gardners room emulation algorithms;
#X obj 30 7625 fx.sdelay~;
#X text 200 7625 smooth delay with a feedback control;
#X obj 30 7652 fx.secho~;
#X text 200 7652 enchanced echo effect that does not click on delay
change;
#X obj 30 7679 fx.shimmer~;
#X text 200 7679 shimmer reverb effect effect;
#X obj 30 7706 fx.tapiir~;
#X text 200 7706 multi-tap delay;
#X obj 30 7733 fx.vocoder~;
#X text 200 7733 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7773 fx.wahwah~;
#X text 200 7773 digitized CryBaby wah pedal;
#X obj 30 7800 fx.zita_rev1~;
#X text 200 7800 Zita stereo reverb;
#X obj 20 7827 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7868 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7879 global.dict;
#X text 200 7879 global named dict object;
#X obj 30 7906 global.float;
#X text 200 7906 global named float object;
#X obj 30 7933 global.int;
#X text 200 7933 global named integer object;
#X obj 30 7960 global.list;
#X text 200 7960 global named list object;
#X obj 30 7987 global.mlist;
#X text 200 7987 global named mlist object;
#X obj 30 8014 global.set;
#X text 200 8014 global named set object;
#X obj 20 8041 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8082 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8093 hw.apple_smc;
#X text 200 8093 query the system management control in Apples;
#X obj 30 8120 hw.apple_sms;
#X text 200 8120 query the sudden motion sensor in Apples;
#X obj 30 8147 hw.arduino;
#X text 200 8147 Arduino device;
#X obj 30 8174 hw.cpu_temp;
#X text 200 8174 get CPU temperature;
#X obj 30 8201 hw.display;
#X text 200 8201 get/set display properties;
#X obj 30 8228 hw.kbd_light;
#X text 200 8228 Get/set keyboard light on some devices;
#X obj 30 8255 hw.serial;
#X text 200 8255 serial port device;
#X obj 20 8282 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 8323 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8337 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 8334 faust realtime compilation;
#X obj 30 8362 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 8359 faust compiled ui object;
#X obj 20 8384 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 8425 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8436 lfo.+pulse~;
#X text 200 8436 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 8463 lfo.+saw~;
#X text 200 8463 Positive unit-amplitude low frequency saw wave;
#X obj 30 8490 lfo.+square~;
#X text 200 8490 Positive low frequency square wave;
#X obj 30 8517 lfo.+tri~;
#X text 200 8517 Positive unit-amplitude low frequency triangle wave;
#X obj 30 8544 lfo.impulse~;
#X text 200 8544 Unit-amplitude low-frequency impulse train;
#X obj 30 8571 lfo.mosc~;
#X text 200 8571 multi-oscillator with various waveforms;
#X obj 30 8598 lfo.pulse~;
#X text 200 8598 Full-range unit-amplitude low frequency pulse train;
#X obj 30 8625 lfo.saw~;
#X text 200 8625 Full-range unit-amplitude low frequency saw;
#X obj 30 8652 lfo.square~;
#X text 200 8652 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 8679 lfo.tri~;
#X text 200 8679 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 8706 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 8747 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8758 list.^at;
#X text 200 8758 on input index(es) outputs list element(s);
#X obj 30 8785 list.^contains;
#X text 200 8785 checks if input atom is found in the list;
#X obj 30 8812 list.^search;
#X text 200 8812 on input atom returns it index in list;
#X obj 30 8839 list.all_of;
#X text 200 8839 checks if all list atoms accepted by predicate;
#X obj 30 8866 list.any_of;
#X text 200 8866 checks if at least one list element is accepted by
predicate;
#X obj 30 8893 list.append;
#X text 200 8893 append atom or list to the end of input list;
#X obj 30 8920 list.apply_to;
#X text 200 8920 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8960 list.at;
#X text 200 8960 outputs list element(s) at specified index(es);
#X obj 30 8987 list.choice;
#X text 200 8987 outputs random element from list;
#X obj 30 9014 list.contains;
#X text 200 9014 checks if input list contains specified atoms;
#X obj 30 9041 list.count;
#X text 200 9041 output the number of items that equal to specified
value;
#X obj 30 9068 list.count_if;
#X text 200 9068 output the number of items that satisfy to external
predicate;
#X obj 30 9095 list.delta;
#X text 200 9095 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9135 list.distribution;
#X text 200 9135 list value distribution;
#X obj 30 9162 list.do;
#X text 200 9162 iterate and modify list contents via side-chain;
#X obj 30 9189 list.each;
#X text 200 9189 maps each list value via external side-chain;
#X obj 30 9216 list.enumerate;
#X text 200 9216 enumerates input list;
#X obj 30 9243 list.equal;
#X text 200 9243 checks if given lists are equal;
#X obj 30 9270 list.first;
#X text 200 9270 returns first list element;
#X obj 30 9297 list.gen;
#X text 200 9297 generates list of specified length via external generator;
#X obj 30 9324 list.histogram;
#X text 200 9324 outputs distribution histogram;
#X obj 30 9351 list.insert;
#X text 200 9351 insert atom or list to the specified position of input
list;
#X obj 30 9378 list.integrator;
#X text 200 9378 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 9418 list.last;
#X text 200 9418 output last list element;
#X obj 30 9445 list.length;
#X text 200 9445 output the number of atoms in the list;
#X obj 30 9472 list.max;
#X text 200 9472 output largest element in the list;
#X obj 30 9499 list.mean;
#X text 200 9499 calculates average of list of floats;
#X obj 30 9526 list.min;
#X text 200 9526 returns smallest element in the list;
#X obj 30 9553 list.none_of;
#X text 200 9553 checks if none of list atoms is accepted by predicate;
#X obj 30 9580 list.normalize;
#X text 200 9580 normalizes float list values to get their sum = 1.0;
#X obj 30 9607 list.pass_if;
#X text 200 9607 leave only elements accepted by predicate;
#X obj 30 9634 list.prepend;
#X text 200 9634 prepend atom or list before input list;
#X obj 30 9661 list.product;
#X text 200 9661 calculates product of floats in list;
#X obj 30 9688 list.range;
#X text 200 9688 output list smallest and largest value;
#X obj 30 9715 list.reduce;
#X text 200 9715 apply function of two arguments cumulatively to the
list;
#X obj 30 9742 list.remove;
#X text 200 9742 remove list element(s) at specified positions;
#X obj 30 9769 list.remove_if;
#X text 200 9769 remove elements by predicate;
#X obj 30 9796 list.repack;
#X text 200 9796 repack list to specified size;
#X obj 30 9823 list.repeat;
#X text 200 9823 output new list by repeating input list specified
times;
#X obj 30 9850 list.resample;
#X text 200 9850 resample list with specified ratio;
#X obj 30 9877 list.resize;
#X text 200 9877 changes list size;
#X obj 30 9904 list.reverse;
#X text 200 9904 reverses the order of the elements in the list;
#X obj 30 9931 list.rldecode;
#X text 200 9931 Run-length list decoder (RLE);
#X obj 30 9958 list.rlencode;
#X text 200 9958 RLE (run-length encoding) for lists;
#X obj 30 9985 list.rotate;
#X text 200 9985 rotates list;
#X obj 30 10012 list.route;
#X text 200 10012 acts like [route] but for lists;
#X obj 30 10039 list.rundiff;
#X text 200 10039 running difference;
#X obj 30 10066 list.runsum;
#X text 200 10066 running sum;
#X obj 30 10093 list.search;
#X text 200 10093 search specified items in input list;
#X obj 30 10120 list.separate;
#X text 200 10120 sends list elements one by one separately;
#X obj 30 10147 list.seq;
#X text 200 10147 numeric sequence list generator;
#X obj 30 10174 list.set;
#X text 200 10174 set list value at specified position;
#X obj 30 10201 list.shift;
#X text 200 10201 shifts the contents of the list with linear interpolation;
#X obj 30 10228 list.shuffle;
#X text 200 10228 randomly rearranges elements in list;
#X obj 30 10255 list.slice;
#X text 200 10255 extract sublist;
#X obj 30 10282 list.sort;
#X text 200 10282 sorts list values by ascending order;
#X obj 30 10309 list.sort_with;
#X text 200 10309 sort list with user defined side-chain;
#X obj 30 10336 list.split;
#X text 200 10336 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 10376 list.stretch;
#X text 200 10376 stretches list - changes its size with linear interpolation;
#X obj 30 10403 list.sum;
#X text 200 10403 calculates sum of floats in list;
#X obj 30 10430 list.unique;
#X text 200 10430 removes duplicates from input list;
#X obj 30 10457 list.unpack;
#X text 200 10457 unpack list elements to separate outlets;
#X obj 30 10484 list.unzip;
#X text 200 10484 splits list to N lists \, each to separate output;
#X obj 30 10511 list.walk;
#X text 200 10511 Walks thru the list;
#X obj 30 10538 list.zip;
#X text 200 10538 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 10593 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 10634 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10645 live.capture~;
#X text 200 10645 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 10685 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 10726 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10737 local.dict;
#X text 200 10737 local named dict object;
#X obj 30 10764 local.float;
#X text 200 10764 canvas-scoped named float variable;
#X obj 30 10791 local.int;
#X text 200 10791 canvas-scoped named integer variable;
#X obj 30 10818 local.list;
#X text 200 10818 local named list object;
#X obj 30 10845 local.mlist;
#X text 200 10845 local named mlist object;
#X obj 30 10872 local.set;
#X text 200 10872 local named set object;
#X obj 20 10899 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10940 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10951 math.abs;
#X text 200 10951 absolute value function;
#X obj 30 10978 math.abs~;
#X text 200 10978 absolute value function for signals;
#X obj 30 11005 math.acos;
#X text 200 11005 arc cosine function;
#X obj 30 11032 math.acosh;
#X text 200 11032 inverse hyperbolic cosine function;
#X obj 30 11059 math.acosh~;
#X text 200 11059 hyperbolic arc cosine for signals;
#X obj 30 11086 math.acos~;
#X text 200 11086 arc cosine function for signals;
#X obj 30 11113 math.and;
#X text 200 11113 operation AND for multiple arguments;
#X obj 30 11140 math.approx;
#X text 200 11140 check if input value approximately equal to pattern;
#X obj 30 11167 math.asin;
#X text 200 11167 arc sine function;
#X obj 30 11194 math.asinh;
#X text 200 11194 inverse hyperbolic sine function;
#X obj 30 11221 math.asinh~;
#X text 200 11221 hyperbolic arc sine for signals;
#X obj 30 11248 math.asin~;
#X text 200 11248 arc sine for signals;
#X obj 30 11275 math.atan;
#X text 200 11275 arc tangent function;
#X obj 30 11302 math.atanh;
#X text 200 11302 inverse hyperbolic tangent function;
#X obj 30 11329 math.atanh~;
#X text 200 11329 hyperbolic arc tangent for signals;
#X obj 30 11356 math.atan~;
#X text 200 11356 arc tangent for signals;
#X obj 30 11383 math.cabs~;
#X text 200 11383 magnitude of a complex signals;
#X obj 30 11410 math.carg~;
#X text 200 11410 phase angle of a complex signals;
#X obj 30 11437 math.cbrt;
#X text 200 11437 cube root function;
#X obj 30 11464 math.cbrt~;
#X text 200 11464 cube root function for signals;
#X obj 30 11491 math.cdiv~;
#X text 200 11491 division of complex signals;
#X obj 30 11518 math.ceil;
#X text 200 11518 round to smallest integral value not less than input
value;
#X obj 30 11545 math.ceil~;
#X text 200 11545 round to smallest integral value not less than input
value;
#X obj 30 11572 math.cexp~;
#X text 200 11572 exponent of a complex signals;
#X obj 30 11599 math.cmul~;
#X text 200 11599 multiplication of complex signals;
#X obj 30 11626 math.cos;
#X text 200 11626 cosine function;
#X obj 30 11653 math.cosh;
#X text 200 11653 hyperbolic cosine function;
#X obj 30 11680 math.cosh~;
#X text 200 11680 hyperbolic cosine for signals;
#X obj 30 11707 math.cos~;
#X text 200 11707 cosine function;
#X obj 30 11734 math.div;
#X text 200 11734 division (on lists too);
#X obj 30 11761 math.e;
#X text 200 11761 mathematical constant \, base of the natural logarithm;
#X obj 30 11788 math.erf;
#X text 200 11788 error function;
#X obj 30 11815 math.erf~;
#X text 200 11815 error function for signals;
#X obj 30 11842 math.exp;
#X text 200 11842 exponential functions;
#X obj 30 11869 math.exp2;
#X text 200 11869 exponential functions;
#X obj 30 11896 math.exp2~;
#X text 200 11896 base-2 exponential for signal;
#X obj 30 11923 math.expr;
#X text 200 11923 dynamic [expr];
#X obj 30 11950 math.exp~;
#X text 200 11950 base-e exponential for signal;
#X obj 30 11977 math.floor;
#X text 200 11977 round to largest integral value not greater than
x;
#X obj 30 12004 math.floor~;
#X text 200 12004 round to largest integral value not greater than
x;
#X obj 30 12031 math.gamma;
#X text 200 12031 gamma function;
#X obj 30 12058 math.gamma~;
#X text 200 12058 gamma function for floating point signals;
#X obj 30 12085 math.gcd;
#X text 200 12085 calculate greatest common divisor;
#X obj 30 12112 math.inf;
#X text 200 12112 infinity value that cannot be represented accurately;
#X obj 30 12139 math.inf~;
#X text 200 12139 inifinity signal generator;
#X obj 30 12166 math.lcm;
#X text 200 12166 calculate least common multiple;
#X obj 30 12193 math.lgamma;
#X text 200 12193 natural logarithm of the absolute value of the gamma
function;
#X obj 30 12220 math.lgamma~;
#X text 200 12220 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 12260 math.log;
#X text 200 12260 natural logarithm;
#X obj 30 12287 math.log10;
#X text 200 12287 logarithm functions;
#X obj 30 12314 math.log10~;
#X text 200 12314 natural logarithm;
#X obj 30 12341 math.log2;
#X text 200 12341 logarithm functions;
#X obj 30 12368 math.log2~;
#X text 200 12368 base-2 logarithm;
#X obj 30 12395 math.log~;
#X text 200 12395 natural logarithm;
#X obj 30 12422 math.mul;
#X text 200 12422 multiplication (on lists too);
#X obj 30 12449 math.nan;
#X text 200 12449 Not a Number \, unrepresentable value;
#X obj 30 12476 math.nan~;
#X text 200 12476 signal NaN;
#X obj 30 12503 math.neg;
#X text 200 12503 negate function;
#X obj 30 12530 math.or;
#X text 200 12530 operation OR for multiple arguments;
#X obj 30 12557 math.pi;
#X text 200 12557 mathematical constant;
#X obj 30 12584 math.pi~;
#X text 200 12584 mathematical constant;
#X obj 30 12611 math.polyeval;
#X text 200 12611 evaluates the polynomial described by the coefficients
list;
#X obj 30 12638 math.reciprocal;
#X text 200 12638 calculate reciprocal number;
#X obj 30 12665 math.reciprocal~;
#X text 200 12665 calculate reciprocal number for signals;
#X obj 30 12692 math.round;
#X text 200 12692 round to integral value \, regardless of rounding
direction;
#X obj 30 12719 math.round~;
#X text 200 12719 signal round;
#X obj 30 12746 math.sign;
#X text 200 12746 sign function;
#X obj 30 12773 math.sin;
#X text 200 12773 sine function;
#X obj 30 12800 math.sinh;
#X text 200 12800 hyperbolic sine function;
#X obj 30 12827 math.sinh~;
#X text 200 12827 hyperbolic sine for signals;
#X obj 30 12854 math.sin~;
#X text 200 12854 sine function;
#X obj 30 12881 math.sqrt;
#X text 200 12881 square root function;
#X obj 30 12908 math.sqrt~;
#X text 200 12908 square root for signal;
#X obj 30 12935 math.squared;
#X text 200 12935 value square;
#X obj 30 12962 math.squared~;
#X text 200 12962 signal value square;
#X obj 30 12989 math.sync_add;
#X text 200 12989 sync addition;
#X obj 30 13016 math.sync_and;
#X text 200 13016 sync logical AND operation;
#X obj 30 13043 math.sync_div;
#X text 200 13043 sync division;
#X obj 30 13070 math.sync_eq;
#X text 200 13070 sync equal numbers check;
#X obj 30 13097 math.sync_ge;
#X text 200 13097 sync greater equal numbers compare;
#X obj 30 13124 math.sync_gt;
#X text 200 13124 sync greater then numbers compare;
#X obj 30 13151 math.sync_le;
#X text 200 13151 sync less equal numbers compare;
#X obj 30 13178 math.sync_lshift;
#X text 200 13178 sync signed bit left shift;
#X obj 30 13205 math.sync_lt;
#X text 200 13205 sync less then numbers compare;
#X obj 30 13232 math.sync_mod;
#X text 200 13232 sync remainder of modulo division (float or integer);
#X obj 30 13259 math.sync_mul;
#X text 200 13259 sync multiplication;
#X obj 30 13286 math.sync_ne;
#X text 200 13286 sync numbers for not equality;
#X obj 30 13313 math.sync_or;
#X text 200 13313 sync logical OR operation;
#X obj 30 13340 math.sync_rshift;
#X text 200 13340 sync signed bit right shift;
#X obj 30 13367 math.sync_sub;
#X text 200 13367 sync subtraction;
#X obj 30 13394 math.sync_xor;
#X text 200 13394 sync logical XOR operation;
#X obj 30 13421 math.tan;
#X text 200 13421 tangent function;
#X obj 30 13448 math.tanh;
#X text 200 13448 hyperbolic tangent function;
#X obj 30 13475 math.tanh~;
#X text 200 13475 hyperbolic tangent for signals;
#X obj 30 13502 math.tan~;
#X text 200 13502 tangent function;
#X obj 30 13529 math.trunc;
#X text 200 13529 truncate to integer value;
#X obj 30 13556 math.trunc~;
#X text 200 13556 truncate to integer value;
#X obj 20 13583 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 13624 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13635 midi.cc;
#X text 200 13635 enhanced version of vanilla ctlin;
#X obj 30 13662 midi.clock;
#X text 200 13662 midi clock toolbox;
#X obj 30 13689 midi.ctl2str;
#X text 200 13689 convert Standard MIDI Controllers number to name;
#X obj 30 13716 midi.event2ctl;
#X text 200 13716 convert MidiEvent message to controller channel/value
pair;
#X obj 30 13743 midi.event2note;
#X text 200 13743 convert MidiEvent message to midi note/velocity pair;
#X obj 30 13770 midi.event2prg;
#X text 200 13770 convert MidiEvent message to midi program change
value;
#X obj 30 13797 midi.file;
#X text 200 13797 standard midi file SMF reader and writer;
#X obj 30 13824 midi.kbd;
#X text 200 13824 computer keyboard midi;
#X obj 30 13851 midi.key2str;
#X text 200 13851 convert key number to SPN name according to tonality;
#X obj 30 13878 midi.oct;
#X text 200 13878 midi octave transpose;
#X obj 30 13905 midi.prg2str;
#X text 200 13905 convert GM Instrument number to name (string or symbol);
#X obj 30 13932 midi.sustain;
#X text 200 13932 sustain pedal emulation;
#X obj 30 13959 midi.sysex;
#X text 200 13959 sysex input messages as list;
#X obj 30 13986 midi.track;
#X text 200 13986 extract track from MidiFile;
#X obj 30 14013 midi.tuning;
#X text 200 14013 apply tuning to midi messages;
#X obj 30 14040 midi.vramp;
#X text 200 14040 apply crescendo or diminuendo for midi message flow;
#X obj 30 14067 midi.vrand;
#X text 200 14067 midi velocity randomizer;
#X obj 20 14094 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 14135 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14146 click~;
#X text 200 14146 Output single impulse on bang;
#X obj 30 14173 fluid~;
#X text 200 14173 FluidSynth SoundFont 2 player;
#X obj 30 14200 modplug~;
#X text 200 14200 MOD file player (using libmodplug);
#X obj 30 14227 sfizz~;
#X text 200 14227 SFZ format sample player;
#X obj 30 14254 speech.flite;
#X text 200 14254 render speech to array;
#X obj 30 14281 speech.flite~;
#X text 200 14281 render speech to array;
#X obj 20 14308 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 14349 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14360 loadexpr;
#X text 200 14360 send message when patch loads;
#X obj 30 14387 msg;
#X text 200 14387 message constructor;
#X obj 30 14414 msg.after;
#X text 200 14414 send specified message after incoming message;
#X obj 30 14441 msg.onload;
#X text 200 14441 send message when patch loads;
#X obj 30 14468 msg.sched;
#X text 200 14468 message scheduler;
#X obj 20 14495 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 14536 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14547 net.host2ip;
#X text 200 14547 returns IP address by DNS name;
#X obj 20 14574 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 14615 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14626 noise.baker;
#X text 200 14626 Part of a-chaos library;
#X obj 30 14653 noise.clifford;
#X text 200 14653 Part of a-chaos library;
#X obj 30 14680 noise.collatz;
#X text 200 14680 Part of a-chaos library;
#X obj 30 14707 noise.crackle~;
#X text 200 14707 sparse noise generator;
#X obj 30 14734 noise.duffing;
#X text 200 14734 Part of a-chaos library;
#X obj 30 14761 noise.ginger;
#X text 200 14761 Gingerbreadman map chaotic generator;
#X obj 30 14788 noise.henon;
#X text 200 14788 Part of a-chaos library;
#X obj 30 14815 noise.henon_heilles;
#X text 200 14815 Part of a-chaos library;
#X obj 30 14842 noise.henon_phase;
#X text 200 14842 Part of a-chaos library;
#X obj 30 14869 noise.henonf;
#X text 200 14869 Part of a-chaos library;
#X obj 30 14896 noise.ikeda;
#X text 200 14896 Part of a-chaos library;
#X obj 30 14923 noise.lfreq0~;
#X text 200 14923 sampled/held noise (piecewise constant);
#X obj 30 14950 noise.lfreq~;
#X text 200 14950 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 14977 noise.lorenz;
#X text 200 14977 Part of a-chaos library;
#X obj 30 15004 noise.lyapunov;
#X text 200 15004 Part of a-chaos library;
#X obj 30 15031 noise.navier_stokes;
#X text 200 15031 Part of a-chaos library;
#X obj 30 15058 noise.pink~;
#X text 200 15058 Pink noise generator;
#X obj 30 15085 noise.rossler;
#X text 200 15085 Part of a-chaos library;
#X obj 30 15112 noise.stein;
#X text 200 15112 Part of a-chaos library;
#X obj 30 15139 noise.torus;
#X text 200 15139 Part of a-chaos library;
#X obj 30 15166 noise.verhulst;
#X text 200 15166 Part of a-chaos library;
#X obj 30 15193 noise.white~;
#X text 200 15193 White noise generator;
#X obj 20 15220 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 15261 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15272 osc.blit~;
#X text 200 15272 Bandlimited impulse train oscillator;
#X obj 30 15299 osc.impulse~;
#X text 200 15299 Bandlimited impulse train generator;
#X obj 30 15326 osc.pulse~;
#X text 200 15326 Bandlimited pulse train oscillator;
#X obj 30 15353 osc.saw4~;
#X text 200 15353 Bandlimited sawtooth wave;
#X obj 30 15380 osc.saw~;
#X text 200 15380 Alias-free sawtooth wave;
#X obj 30 15407 osc.sinfb~;
#X text 200 15407 Sine oscilator with feedback;
#X obj 30 15434 osc.sin~;
#X text 200 15434 Sine wave oscillator;
#X obj 30 15461 osc.square~;
#X text 200 15461 Bandlimited square wave oscillator;
#X obj 30 15488 osc.tri~;
#X text 200 15488 Bandlimited triangle wave oscillator;
#X obj 20 15515 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 15556 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15567 canvas.current;
#X text 200 15567 verbose information about current canvas;
#X obj 30 15594 canvas.dir;
#X text 200 15594 current canvas directory;
#X obj 30 15621 canvas.name;
#X text 200 15621 current canvas name;
#X obj 30 15648 canvas.path;
#X text 200 15648 current canvas fullpath;
#X obj 30 15675 canvas.top;
#X text 200 15675 verbose information about top-level canvas;
#X obj 30 15702 patch.args;
#X text 200 15702 Get patch or subpatch arguments;
#X obj 30 15729 patch.deps;
#X text 200 15729 patch dependencies: used objects and abstractions;
#X obj 30 15756 patch.tree;
#X text 200 15756 patch tree;
#X obj 20 15783 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 15824 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15835 file.size;
#X text 200 15835 output file size;
#X obj 30 15862 path.basename;
#X text 200 15862 outputs filename portion of pathname;
#X obj 30 15889 path.dirname;
#X text 200 15889 outputs directory portion of pathname;
#X obj 30 15916 path.exists;
#X text 200 15916 checks if given path exists;
#X obj 30 15943 path.is_dir;
#X text 200 15943 check if path is directory;
#X obj 30 15970 path.lsdir;
#X text 200 15970 list directory contents;
#X obj 30 15997 path.normalize;
#X text 200 15997 normalize file paths;
#X obj 30 16024 path.search;
#X text 200 16024 file search;
#X obj 30 16051 path.split;
#X text 200 16051 file path split;
#X obj 20 16078 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 16119 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16130 is_any;
#X text 200 16130 checks if input data has *any* type;
#X obj 30 16157 is_bang;
#X text 200 16157 checks if input data has *bang* type;
#X obj 30 16184 is_data;
#X text 200 16184 checks if input data has *data* type;
#X obj 30 16211 is_dict;
#X text 200 16211 checks if input data has *dict* type;
#X obj 30 16238 is_even;
#X text 200 16238 checks if input number is even;
#X obj 30 16265 is_file;
#X text 200 16265 checks if file exists and accessible;
#X obj 30 16292 is_float;
#X text 200 16292 checks if input data has *float* type;
#X obj 30 16319 is_list;
#X text 200 16319 checks if input data has *list* type;
#X obj 30 16346 is_odd;
#X text 200 16346 checks if input number is odd;
#X obj 30 16373 is_pointer;
#X text 200 16373 checks if input data has *pointer* type;
#X obj 30 16400 is_symbol;
#X text 200 16400 checks if input data has *symbol* type;
#X obj 20 16427 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 16468 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16479 preset.float;
#X text 200 16479 load/store float preset;
#X obj 30 16506 preset.list;
#X text 200 16506 load/store symbol preset;
#X obj 30 16533 preset.storage;
#X text 200 16533 preset storage control;
#X obj 30 16560 preset.symbol;
#X text 200 16560 load/store symbol preset;
#X obj 20 16587 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 16628 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16639 patch.props;
#X text 200 16639 patch properties manager;
#X obj 30 16666 prop;
#X text 200 16666 get/set named property value for subpatch or abstraction;
#X obj 30 16693 prop.declare;
#X text 200 16693 declare named property for subpatch or abstraction;
#X obj 30 16720 prop.get;
#X text 200 16720 get property from connected object/subpatch/abstraction;
#X obj 30 16747 prop.get~;
#X text 200 16747 Property extractor from sound stream;
#X obj 30 16774 prop.join;
#X text 200 16774 join property to main data flow;
#X obj 30 16801 prop.set;
#X text 200 16801 set object property;
#X obj 30 16828 prop.split;
#X text 200 16828 separate properties from dataflow;
#X obj 20 16855 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 16896 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16907 proto.firmata;
#X text 200 16907 Firmata Arduino protocol support;
#X obj 30 16934 proto.midi;
#X text 200 16934 raw midi encoder/parser;
#X obj 30 16961 proto.midi.cc;
#X text 200 16961 raw midi CC encoder/parser;
#X obj 30 16988 proto.midi.sysex;
#X text 200 16988 raw midi SYSex encoder/parser;
#X obj 30 17015 proto.mpv;
#X text 200 17015 mpv video player control;
#X obj 30 17042 proto.sp.alpaca;
#X text 200 17042 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 17069 proto.xtouch_ext;
#X text 200 17069 Behringer XTouch Extender XMidi protocol;
#X obj 20 17096 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 17137 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17148 random.atom;
#X text 200 17148 weighted atom generation from specified list;
#X obj 30 17175 random.discrete;
#X text 200 17175 random weighted integers on interval [0 \, n);
#X obj 30 17202 random.float;
#X text 200 17202 uniform random float generator in specified range;
#X obj 30 17229 random.gauss;
#X text 200 17229 gaussian random distribution;
#X obj 30 17256 random.int;
#X text 200 17256 uniform random integer generator in specified range;
#X obj 30 17283 random.linear;
#X text 200 17283 random linear distribution;
#X obj 30 17310 random.pw_const;
#X text 200 17310 piecewise constant random distribution;
#X obj 30 17337 random.pw_lin;
#X text 200 17337 piecewise linear random distribution;
#X obj 20 17364 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 17405 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17416 samp.time~;
#X text 200 17416 sample counter;
#X obj 20 17443 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 17484 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17495 seq.arp;
#X text 200 17495 sequence arpeggiator;
#X obj 30 17522 seq.bangs;
#X text 200 17522 bang sequencer;
#X obj 30 17549 seq.counter;
#X text 200 17549 sequencer counter;
#X obj 30 17576 seq.life;
#X text 200 17576 Conway gamw of life sequencer;
#X obj 30 17603 seq.matrix;
#X text 200 17603 sequencer control for ui.matrix;
#X obj 30 17630 seq.nbangs;
#X text 200 17630 output specified number of bang with time intervals;
#X obj 30 17657 seq.phasor;
#X text 200 17657 control rate phasor (saw) generator;
#X obj 30 17684 seq.toggles;
#X text 200 17684 toggle sequencer;
#X obj 30 17711 sequencer;
#X text 200 17711 basic sequence player;
#X obj 20 17738 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 17779 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17790 snd.file;
#X text 200 17790 Sound file loader on steroids;
#X obj 20 17817 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 17858 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17869 hoa.2d.decoder~;
#X text 200 17869 hoa 2d decoder;
#X obj 30 17896 hoa.2d.encoder~;
#X text 200 17896 hoa 2d encoder;
#X obj 30 17923 hoa.2d.map~;
#X text 200 17923 a 2d ambisonic multisource spatializer;
#X obj 30 17950 hoa.2d.optim~;
#X text 200 17950 a 2D ambisonic optimization tool;
#X obj 30 17977 hoa.2d.projector~;
#X text 200 17977 a plane waves decomposer from circular harmonics
domain;
#X obj 30 18004 hoa.2d.recomposer~;
#X text 200 18004 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 18044 hoa.2d.rotate~;
#X text 200 18044 a 2D ambisonic sound field rotation;
#X obj 30 18071 hoa.2d.wider~;
#X text 200 18071 a 2d fractional ambisonic order simulator;
#X obj 30 18098 hoa.@process;
#X text 200 18098 process properties manager for hoa.process~;
#X obj 30 18125 hoa.in;
#X text 200 18125 message inlet for a patcher loaded by hoa.process~;
#X obj 30 18152 hoa.in~;
#X text 200 18152 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18179 hoa.out;
#X text 200 18179 message outlet for a patcher loaded by hoa.process~;
#X obj 30 18206 hoa.out~;
#X text 200 18206 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 18233 hoa.process~;
#X text 200 18233 patcher loader for multichannel processing;
#X obj 30 18263 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 18260 a 2d ambisonic harmonic scope;
#X obj 30 18285 pan.cos~;
#X text 200 18285 two channel equal power sine/cosine panner;
#X obj 30 18312 pan.linsig~;
#X text 200 18312 two channel linear panner with signal control;
#X obj 30 18339 pan.lin~;
#X text 200 18339 two channel linear panner;
#X obj 30 18366 pan.spread~;
#X text 200 18366 spreads input channels across the stereo field;
#X obj 30 18393 pan.sqrt~;
#X text 200 18393 two channel equal power square root panner;
#X obj 30 18420 spat.pan4~;
#X text 200 18420 GMEM SPAT: 4-outputs spatializer;
#X obj 30 18447 spat.pan8~;
#X text 200 18447 GMEM SPAT: 8-outputs spatializer;
#X obj 30 18474 spat.zita6x8~;
#X text 200 18474 spat with 6 inputs sources to 8 channel output;
#X obj 30 18501 spat.zita8~;
#X text 200 18501 8 channel reverb spatializer;
#X obj 20 18528 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 18569 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18580 string;
#X text 200 18580 string constructor;
#X obj 30 18607 string.contains;
#X text 200 18607 checks if string contains specified substring;
#X obj 30 18634 string.ends_with;
#X text 200 18634 checks if string ends with specified substring;
#X obj 30 18661 string.equal;
#X text 200 18661 check strings or symbols for equality;
#X obj 30 18688 string.format;
#X text 200 18688 formats string like printf.;
#X obj 30 18715 string.join;
#X text 200 18715 joins (concatenates) strings with separator;
#X obj 30 18742 string.length;
#X text 200 18742 number of characters in string (unicode supported);
#X obj 30 18769 string.match;
#X text 200 18769 check if string match regular expression;
#X obj 30 18796 string.remove;
#X text 200 18796 remove substring from input string;
#X obj 30 18823 string.replace;
#X text 200 18823 replace from one substring to another in input string;
#X obj 30 18850 string.split;
#X text 200 18850 split string by separator;
#X obj 30 18877 string.starts_with;
#X text 200 18877 checks if string starts with specified substring;
#X obj 30 18904 string.substr;
#X text 200 18904 extract substring from input string;
#X obj 30 18931 string2symbol;
#X text 200 18931 converts string to symbol;
#X obj 20 18958 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 18999 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19010 symbol.equal;
#X text 200 19010 check symbols for equality;
#X obj 30 19037 symbol.length;
#X text 200 19037 number of characters in symbol (unicode supported);
#X obj 30 19064 symbol.num_compare;
#X text 200 19064 numeric symbol compare;
#X obj 30 19091 symbol2any;
#X text 200 19091 converts symbol or string to message;
#X obj 30 19118 symbol2intlist;
#X text 200 19118 converts symbol to list of character codes;
#X obj 20 19145 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 19186 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19197 synth.bee3~;
#X text 200 19197 Hammond-oid organ FM synthesis instrument;
#X obj 30 19224 synth.birds~;
#X text 200 19224 bird singing generator;
#X obj 30 19251 synth.church_bell~;
#X text 200 19251 generic church bell modal model;
#X obj 30 19278 synth.dubdub~;
#X text 200 19278 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 19318 synth.dx7~;
#X text 200 19318 FAUST dx7 implementation;
#X obj 30 19345 synth.eguitar~;
#X text 200 19345 simple electric guitar model with steel strings;
#X obj 30 19372 synth.english_bell~;
#X text 200 19372 english church bell modal model;
#X obj 30 19399 synth.fgrain~;
#X text 200 19399 file granulator from STK;
#X obj 30 19426 synth.french_bell~;
#X text 200 19426 french church bell modal model;
#X obj 30 19453 synth.german_bell~;
#X text 200 19453 german church bell modal model;
#X obj 30 19480 synth.glass_harm~;
#X text 200 19480 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 19507 synth.glitch~;
#X text 200 19507 Glitch synthesizer by naivesound;
#X obj 30 19534 synth.harpsichord~;
#X text 200 19534 waveguide commuted harpsichord;
#X obj 30 19561 synth.kick~;
#X text 200 19561 low-kick synth from Guitarix project;
#X obj 30 19588 synth.ks~;
#X text 200 19588 Karplus-Strong string;
#X obj 30 19615 synth.marimba~;
#X text 200 19615 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 19655 synth.piano~;
#X text 200 19655 waveguide commuted piano;
#X obj 30 19682 synth.rhodey~;
#X text 200 19682 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 19709 synth.risset_arp~;
#X text 200 19709 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 19736 synth.risset_bell~;
#X text 200 19736 Jean Claude Risset's bell synth;
#X obj 30 19763 synth.risset_tone~;
#X text 200 19763 Jean Claude Risset's endless glissando;
#X obj 30 19790 synth.russian_bell~;
#X text 200 19790 russian church bell modal model;
#X obj 30 19817 synth.shakers~;
#X text 200 19817 various percussion sounds from STK library;
#X obj 30 19844 synth.sitar~;
#X text 200 19844 STK sitar;
#X obj 30 19871 synth.snare~;
#X text 200 19871 Snare drum synth from Guitarix project;
#X obj 30 19898 synth.standard_bell~;
#X text 200 19898 german church bell modal model;
#X obj 30 19925 synth.tube_bell~;
#X text 200 19925 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 19952 synth.wurley~;
#X text 200 19952 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 19979 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 20020 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20031 system.colorpanel;
#X text 200 20031 System color panel dialog popup;
#X obj 30 20058 system.cursor;
#X text 200 20058 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 20085 system.exec;
#X text 200 20085 run external command in separate process;
#X obj 30 20112 system.exit;
#X text 200 20112 quit PureData;
#X obj 30 20139 system.getenv;
#X text 200 20139 Get system environment variables;
#X obj 30 20166 system.hostname;
#X text 200 20166 outputs system hostname;
#X obj 30 20193 system.memsize;
#X text 200 20193 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 20233 system.memused;
#X text 200 20233 returns the process physical memory use - current
and peak;
#X obj 30 20260 system.screen_size;
#X text 200 20260 returns current screen size in pixels;
#X obj 20 20287 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 20328 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20339 tl.bang;
#X text 200 20339 Timeline bang (with possible delay);
#X obj 30 20369 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 20366 Timeline section;
#X obj 30 20391 tl.timeline;
#X text 200 20391 Timeline - event scheduler;
#X obj 30 20418 tl.toggle;
#X text 200 20418 Timeline bang;
#X obj 30 20445 tl.transport;
#X text 200 20445 Timeline transport control;
#X obj 20 20472 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 20513 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20527 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 20524 array view with cursor and selection;
#X obj 30 20552 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 20549 A bang... that's all;
#X obj 30 20577 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 20574 button widget;
#X obj 30 20602 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 20599 colorchooser widget;
#X obj 30 20627 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 20624 Display GUI object;
#X obj 30 20652 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 20649 GUI for turning DSP on/off;
#X obj 30 20677 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 20674 envelope editor widget;
#X obj 30 20702 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 20699 UI filter object calculator for biquad filter;
#X obj 30 20727 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 20724 UI filter object based on biquad filter;
#X obj 30 20752 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 20749 UI stereo gain control;
#X obj 30 20777 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 20774 UI gain control;
#X obj 30 20802 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 20799 simple icon with button capabilities;
#X obj 30 20827 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 20824 value increment/decrement;
#X obj 30 20852 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 20849 keyboard widget;
#X obj 30 20877 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 20874 knob widget;
#X obj 30 20902 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 20899 simple label widget;
#X obj 30 20927 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 20924 Hyperlink widget;
#X obj 30 20952 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 20949 The matrix of toggles has you.;
#X obj 30 20977 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 20974 Dropdown menu;
#X obj 30 21002 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 20999 Shows peak and rms signal level;
#X obj 30 21027 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 21024 incoming MIDI message viewport;
#X obj 30 21052 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 21049 filter mouse events from ui objects;
#X obj 30 21077 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 21074 routes mouse events from ui objects;
#X obj 30 21102 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 21099 counterpart of the vanilla [nbx];
#X obj 30 21127 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 21124 counterpart of the vanilla [nbx] for signal;
#X obj 30 21152 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 21149 signal plotter;
#X obj 30 21177 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 21174 2D slider in polar coordinates;
#X obj 30 21202 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 21199 Preset manager;
#X obj 30 21227 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 21224 counterpart of the vanilla radio toggle;
#X obj 30 21252 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 21249 range slider;
#X obj 30 21277 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 21274 Scope GUI object;
#X obj 30 21302 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 21299 counterpart of the vanilla slider;
#X obj 30 21327 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 21324 2D slider widget;
#X obj 30 21352 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 21349 Multiple slider widget;
#X obj 30 21377 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 21374 Spectroscope GUI object;
#X obj 30 21402 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 21399 displays a list of text buttons or text toggles;
#X obj 30 21427 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 21424 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 21449 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 21449 version: v0.9.3 \, license: GPL3;
#X obj 20 21477 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 21500 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 21464 msg 0;
#X obj 670 21499 switch~;
#X connect 1494 0 1495 0;