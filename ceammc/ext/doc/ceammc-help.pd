#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 30 776 plot.geomspace~;
#X text 200 776 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 816 plot.hist~;
#X text 200 816 calculate and output signal histogram;
#X obj 30 843 plot.linspace~;
#X text 200 843 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 883 plot.logspace~;
#X text 200 883 outputs numbers spaced evenly on a log scale;
#X obj 20 910 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 951 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 965 ui.link @title [function] @url function-help.pd;
#X text 200 962 named function;
#X obj 30 987 function.call;
#X text 200 987 call named function;
#X obj 30 1014 gain~;
#X text 200 1014 multislot signal gain;
#X obj 30 1041 matrix~;
#X text 200 1041 signal routing matrix;
#X obj 30 1068 metro.pattern;
#X text 200 1068 metro with rhythmic patterns;
#X obj 30 1095 metro.random;
#X text 200 1095 metro random bang with specified range;
#X obj 30 1122 metro.seq;
#X text 200 1122 metro sequencer;
#X obj 30 1149 mix~;
#X text 200 1149 multislot signal mixer;
#X obj 30 1176 obj.props;
#X text 200 1176 property extractor;
#X obj 30 1203 radio;
#X text 200 1203 float index to outlet values as radio switch;
#X obj 30 1230 window;
#X text 200 1230 returns window value by given window position;
#X obj 30 1257 xdac~;
#X text 200 1257 dac~ with channel ranges;
#X obj 30 1284 xfade2~;
#X text 200 1284 multi stereo-signal crossfade;
#X obj 30 1311 xfade~;
#X text 200 1311 multi signal crossfade;
#X obj 20 1338 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1379 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1390 chaos.gbman0;
#X text 200 1390 Gingerbreadman map chaotic generator;
#X obj 30 1417 chaos.gbman0~;
#X text 200 1417 Gingerbreadman map chaotic generator;
#X obj 30 1444 chaos.std0;
#X text 200 1444 Standard map chaotic generator;
#X obj 30 1471 chaos.std0~;
#X text 200 1471 Standard map chaotic generator;
#X obj 20 1498 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1550 array.p2s;
#X text 200 1550 convert array phase [0\..1] to sample position;
#X obj 30 1577 array.s2p;
#X text 200 1577 convert array sample position to relative phase position
[0\..1];
#X obj 30 1617 conv.amp2dbfs;
#X text 200 1617 convert from amplitude to decibel full scale;
#X obj 30 1644 conv.amp2dbfs~;
#X text 200 1644 convert from amplitude to decibel full scale;
#X obj 30 1671 conv.bpm2hz;
#X text 200 1671 converts BPM to frequency in herz;
#X obj 30 1698 conv.bpm2ms;
#X text 200 1698 convert frequency in BPM to period in milliseconds;
#X obj 30 1725 conv.bpm2sec;
#X text 200 1725 convert frequency in BPM to period in seconds;
#X obj 30 1752 conv.car2pol;
#X text 200 1752 convert cartesian coords to polar;
#X obj 30 1779 conv.cc2amp;
#X text 200 1779 convert from MIDI Control Change range;
#X obj 30 1806 conv.dbfs2amp;
#X text 200 1806 convert decibel full scale to amplitude;
#X obj 30 1833 conv.lin2curve;
#X text 200 1833 map linear to exponential range with 0 allowed.;
#X obj 30 1860 conv.lin2exp;
#X text 200 1860 maps linear range to exponential range;
#X obj 30 1887 conv.lin2lin;
#X text 200 1887 convert from one linear range to another;
#X obj 30 1914 conv.lin2lin~;
#X text 200 1914 convert from one linear range to another for signals;
#X obj 30 1941 conv.list2props;
#X text 200 1941 converts list to series of property messages;
#X obj 30 1968 conv.midi2freq;
#X text 200 1968 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2008 conv.ms2samp;
#X text 200 2008 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2048 conv.ms2samp~;
#X text 200 2048 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2088 conv.phase2rad;
#X text 200 2088 convert phase value [0-1] to radians [0-2π];
#X obj 30 2115 conv.phase2rad~;
#X text 200 2115 convert phase value [0-1] to radians [0-2π];
#X obj 30 2142 conv.pitch2midi;
#X text 200 2142 converts symbol pitch name to MIDI note number;
#X obj 30 2169 conv.pol2car;
#X text 200 2169 convert from polar coordinates to cartesian;
#X obj 30 2196 conv.rad2phase;
#X text 200 2196 convert radians value to phase;
#X obj 30 2223 conv.rad2phase~;
#X text 200 2223 convert radians value to phase;
#X obj 30 2250 conv.samp2ms;
#X text 200 2250 convert samples to time according to samplerate;
#X obj 30 2277 conv.samp2ms~;
#X text 200 2277 convert samples to milliseconds according to samplerate;
#X obj 30 2304 conv.samp2sec;
#X text 200 2304 convert samples to time according to samplerate;
#X obj 30 2331 conv.sec2samp;
#X text 200 2331 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2371 conv.sec2str;
#X text 200 2371 converts float time in seconds to formated symbol
(or string);
#X obj 30 2398 conv.str2sec;
#X text 200 2398 converts formatted time to float value in seconds;
#X obj 20 2425 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2466 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2477 data.dict;
#X text 200 2477 dictionary container: store values by key;
#X obj 30 2504 data.fifo;
#X text 200 2504 First-In-First-Out (FIFO) queue data container;
#X obj 30 2531 data.float;
#X text 200 2531 robust float object;
#X obj 30 2558 data.int;
#X text 200 2558 robust int object;
#X obj 30 2585 data.list;
#X text 200 2585 list container;
#X obj 30 2612 data.mlist;
#X text 200 2612 multidimensional list container;
#X obj 30 2639 data.set;
#X text 200 2639 container that store unique elements;
#X obj 30 2666 data.set2list;
#X text 200 2666 converts set to list;
#X obj 30 2693 dict.contains;
#X text 200 2693 predicate to check if dict contains a keys;
#X obj 30 2720 dict.each;
#X text 200 2720 map each value in dict;
#X obj 30 2747 dict.from_list;
#X text 200 2747 creates dictionary from list;
#X obj 30 2774 dict.get;
#X text 200 2774 output dict values;
#X obj 30 2801 dict.keys;
#X text 200 2801 get list of dict keys;
#X obj 30 2828 dict.pass;
#X text 200 2828 passes specified keys in dict;
#X obj 30 2855 dict.reject;
#X text 200 2855 rejects specified keys from dict;
#X obj 30 2882 dict.size;
#X text 200 2882 dictionary size;
#X obj 30 2909 dict.to_list;
#X text 200 2909 converts dictionary to plain list;
#X obj 30 2936 dict.values;
#X text 200 2936 dictionary values as mlist;
#X obj 30 2963 mlist.flatten;
#X text 200 2963 flatten nested mlist;
#X obj 30 2990 set.contains;
#X text 200 2990 check if specified element is in set;
#X obj 30 3017 set.diff;
#X text 200 3017 difference between two sets;
#X obj 30 3044 set.equal;
#X text 200 3044 checks if two sets are equal (contains same elements);
#X obj 30 3071 set.intersect;
#X text 200 3071 output intersection of given sets;
#X obj 30 3098 set.size;
#X text 200 3098 get number of elements in set;
#X obj 30 3125 set.symdiff;
#X text 200 3125 symmetric difference between two sets;
#X obj 30 3152 set.union;
#X text 200 3152 output union of given sets;
#X obj 20 3179 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3220 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3231 dyn.comp2~;
#X text 200 3231 stereo dynamic range compressor;
#X obj 30 3258 dyn.comp~;
#X text 200 3258 mono dynamic range compressors;
#X obj 30 3285 dyn.gate2~;
#X text 200 3285 stereo signal gate;
#X obj 30 3312 dyn.gate~;
#X text 200 3312 mono signal gate;
#X obj 30 3339 dyn.limit2~;
#X text 200 3339 stereo 1176LN Peak Limiter;
#X obj 30 3366 dyn.limit~;
#X text 200 3366 mono 1176LN Peak Limiter;
#X obj 30 3393 dyn.softclip~;
#X text 200 3393 soft signal clip;
#X obj 20 3420 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3461 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3472 env.adsr~;
#X text 200 3472 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3499 env.ar~;
#X text 200 3499 Attack/Release envelope generator;
#X obj 30 3526 env.asr~;
#X text 200 3526 Attack/Sustain/Release envelope generator;
#X obj 30 3553 env.concat;
#X text 200 3553 Envelope concatenation;
#X obj 30 3580 env.follow~;
#X text 200 3580 Envelope follower with independent attack and release
times;
#X obj 30 3607 env.mix;
#X text 200 3607 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3647 env.smooth~;
#X text 200 3647 An envelope with an exponential attack and release;
#X obj 30 3674 env.tscale;
#X text 200 3674 Envelope time-scale;
#X obj 30 3701 env.tshift;
#X text 200 3701 Envelope time-shift (horizontal);
#X obj 30 3728 env.vscale;
#X text 200 3728 Envelope value-scale;
#X obj 30 3755 env2array;
#X text 200 3755 Renders envelope to specified array;
#X obj 30 3782 env2vline;
#X text 200 3782 Converts envelope to bunch of vline messages;
#X obj 30 3809 envelope;
#X text 200 3809 Envelope data type;
#X obj 30 3836 vline2env;
#X text 200 3836 Converts vline messages to env;
#X obj 20 3863 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3904 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3915 expand_env;
#X text 200 3915 Substitute enviroment variables in data stream;
#X obj 30 3942 flow.append;
#X text 200 3942 inject message into flow;
#X obj 30 3969 flow.change;
#X text 200 3969 rejects redundant input values;
#X obj 30 3996 flow.count;
#X text 200 3996 control flow event counter;
#X obj 30 4023 flow.demultiplex;
#X text 200 4023 control flow demultiplexer;
#X obj 30 4050 flow.demultiplex2~;
#X text 200 4050 audio stream stereo demultiplexer;
#X obj 30 4077 flow.demultiplex~;
#X text 200 4077 audio stream demultiplexer;
#X obj 30 4104 flow.gate;
#X text 200 4104 control flow gate. [spigot] analog;
#X obj 30 4131 flow.greater;
#X text 200 4131 numeric stream router;
#X obj 30 4158 flow.group;
#X text 200 4158 group data atoms in list of specified size;
#X obj 30 4185 flow.interval;
#X text 200 4185 measure time between flow events;
#X obj 30 4212 flow.less;
#X text 200 4212 numeric stream router \, like many [moses];
#X obj 30 4239 flow.less_eq;
#X text 200 4239 numeric stream router \, like many [moses];
#X obj 30 4266 flow.match;
#X text 200 4266 route data flow by regexp match;
#X obj 30 4293 flow.multiplex;
#X text 200 4293 control flow multiplexer;
#X obj 30 4320 flow.multiplex2~;
#X text 200 4320 audio stream stereo multiplexer;
#X obj 30 4347 flow.multiplex~;
#X text 200 4347 audio stream multiplexer;
#X obj 30 4374 flow.once;
#X text 200 4374 one message pass thru;
#X obj 30 4401 flow.pack;
#X text 200 4401 flow pack;
#X obj 30 4428 flow.pass;
#X text 200 4428 pass specified values;
#X obj 30 4455 flow.pass_if;
#X text 200 4455 pass values that accepted by predicate object;
#X obj 30 4482 flow.reject;
#X text 200 4482 reject specified values;
#X obj 30 4509 flow.reject_if;
#X text 200 4509 reject values by predicate;
#X obj 30 4536 flow.route;
#X text 200 4536 advanced message router;
#X obj 30 4563 flow.speedlim;
#X text 200 4563 control stream speed limiter;
#X obj 30 4590 flow.split;
#X text 200 4590 split data flow by external side-chain predicate;
#X obj 30 4617 flow.sync;
#X text 200 4617 bus with only hot inlets;
#X obj 30 4644 flow.sync_pack;
#X text 200 4644 flow pack with all hot inlets;
#X obj 30 4671 flow.tee~;
#X text 200 4671 separate audio and control streams;
#X obj 30 4698 replace;
#X text 200 4698 Replace atoms in data stream;
#X obj 20 4725 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4766 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4777 flt.biquad~;
#X text 200 4777 second order IIR filter.;
#X obj 30 4804 flt.bpf12~;
#X text 200 4804 Band-pass filter with 12/db per octave slope;
#X obj 30 4831 flt.bpf24~;
#X text 200 4831 Band-pass filter with 24/db per octave slope;
#X obj 30 4858 flt.c_bpf~;
#X text 200 4858 BPF coefficient calculator for biquad filter;
#X obj 30 4885 flt.c_highshelf~;
#X text 200 4885 Highshelf filter coefficient calculator for biquad;
#X obj 30 4912 flt.c_hpf~;
#X text 200 4912 HPF coefficient calculator for biquad filter;
#X obj 30 4939 flt.c_lowshelf~;
#X text 200 4939 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4966 flt.c_lpf~;
#X text 200 4966 LPF coefficient calculator for biquad filter;
#X obj 30 4993 flt.c_notch~;
#X text 200 4993 Band-reject coefficient calculator for biquad filter;
#X obj 30 5020 flt.c_peak~;
#X text 200 5020 Peaking equalizer calculator for biquad;
#X obj 30 5047 flt.dcblock2~;
#X text 200 5047 stereo DC blocker;
#X obj 30 5074 flt.dcblock~;
#X text 200 5074 mono DC blocker;
#X obj 30 5101 flt.eq10~;
#X text 200 5101 graphic 10 band equalizer;
#X obj 30 5128 flt.eq_peak_cq~;
#X text 200 5128 constant-Q second order peaking equalizer section;
#X obj 30 5155 flt.eq_peak~;
#X text 200 5155 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5210 flt.freqz~;
#X text 200 5210 compute the frequency response of a digital filter;
#X obj 30 5237 flt.highshelf~;
#X text 200 5237 gain boost|cut above some frequency;
#X obj 30 5264 flt.hpf12~;
#X text 200 5264 High-pass filter with 12/db per octave slope;
#X obj 30 5291 flt.hpf24~;
#X text 200 5291 High-pass filter with 24/db per octave slope;
#X obj 30 5318 flt.lowshelf~;
#X text 200 5318 gain boost|cut below some frequency;
#X obj 30 5345 flt.lpf12~;
#X text 200 5345 Low-pass filter with 12/db per octave slope;
#X obj 30 5372 flt.lpf24~;
#X text 200 5372 Low-pass filter with 24/db per octave slope;
#X obj 30 5399 flt.median;
#X text 200 5399 Median control flow filter;
#X obj 30 5426 flt.moog_vcf~;
#X text 200 5426 Moog Voltage Controlled Filter;
#X obj 30 5453 flt.notch~;
#X text 200 5453 band-rejection filter;
#X obj 30 5480 flt.resonbp~;
#X text 200 5480 Simple resonant bandpass filter;
#X obj 20 5507 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5548 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5559 fx.bitdown~;
#X text 200 5559 bit downer and downsampler effect;
#X obj 30 5586 fx.chorus~;
#X text 200 5586 Chorus effect;
#X obj 30 5613 fx.distortion1~;
#X text 200 5613 distortion #1 from Guitarix effects set;
#X obj 30 5640 fx.distortion2~;
#X text 200 5640 distortion #2 from Guitarix effects set;
#X obj 30 5667 fx.distortion3~;
#X text 200 5667 simple distortion #3 from Guitarix effects set;
#X obj 30 5694 fx.distortion~;
#X text 200 5694 cubic nonlinearity distortion;
#X obj 30 5721 fx.drive~;
#X text 200 5721 Guitarix drive effect;
#X obj 30 5748 fx.drone_box~;
#X text 200 5748 mono sympathetic resonance generator;
#X obj 30 5775 fx.echo~;
#X text 200 5775 simple echo effect;
#X obj 30 5802 fx.flanger~;
#X text 200 5802 mono flanging effect;
#X obj 30 5829 fx.freeverb2~;
#X text 200 5829 freeverb2 - stereo version of freeverb;
#X obj 30 5856 fx.freeverb~;
#X text 200 5856 freeverb - common used open-source reverb;
#X obj 30 5883 fx.freqshift~;
#X text 200 5883 frequency shifter or single-sideband ring modulation;
#X obj 30 5910 fx.granulator~;
#X text 200 5910 simple input stream granulator;
#X obj 30 5937 fx.greyhole~;
#X text 200 5937 A complex echo-like effect;
#X obj 30 5964 fx.looper~;
#X text 200 5964 One track looper;
#X obj 30 5991 fx.pitchshift~;
#X text 200 5991 simple pitch shifter based on 2 delay lines;
#X obj 30 6018 fx.sdelay~;
#X text 200 6018 smooth delay with a feedback control;
#X obj 30 6045 fx.vocoder~;
#X text 200 6045 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6085 fx.wahwah~;
#X text 200 6085 digitized CryBaby wah pedal;
#X obj 30 6112 fx.zita_rev1~;
#X text 200 6112 Zita stereo reverb;
#X obj 20 6139 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6180 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6191 global.dict;
#X text 200 6191 global named dict object;
#X obj 30 6218 global.float;
#X text 200 6218 global named float object;
#X obj 30 6245 global.int;
#X text 200 6245 global named integer object;
#X obj 30 6272 global.list;
#X text 200 6272 global named list object;
#X obj 30 6299 global.mlist;
#X text 200 6299 global named mlist object;
#X obj 30 6326 global.set;
#X text 200 6326 global named set object;
#X obj 20 6353 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6394 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6405 hw.apple_smc;
#X text 200 6405 query the system management control in Apples;
#X obj 30 6432 hw.apple_sms;
#X text 200 6432 query the sudden motion sensor in Apples;
#X obj 30 6459 hw.arduino;
#X text 200 6459 Arduino device;
#X obj 30 6486 hw.cpu_temp;
#X text 200 6486 get CPU temperature;
#X obj 30 6513 hw.display;
#X text 200 6513 get/set display properties;
#X obj 30 6540 hw.kbd_light;
#X text 200 6540 Get/set keyboard light on some devices;
#X obj 20 6567 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6608 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6619 lfo.+pulse~;
#X text 200 6619 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6646 lfo.+saw~;
#X text 200 6646 Positive unit-amplitude low frequency saw wave;
#X obj 30 6673 lfo.+square~;
#X text 200 6673 Positive low frequency square wave;
#X obj 30 6700 lfo.+tri~;
#X text 200 6700 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6727 lfo.impulse~;
#X text 200 6727 Unit-amplitude low-frequency impulse train;
#X obj 30 6754 lfo.pulse~;
#X text 200 6754 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6781 lfo.saw~;
#X text 200 6781 Full-range unit-amplitude low frequency saw;
#X obj 30 6808 lfo.square~;
#X text 200 6808 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6835 lfo.tri~;
#X text 200 6835 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6862 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6903 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6914 list.^at;
#X text 200 6914 on input index(es) outputs list element(s);
#X obj 30 6941 list.^contains;
#X text 200 6941 on input atom or list checks if specified list contains
it;
#X obj 30 6968 list.^search;
#X text 200 6968 on input atom returns it index in list;
#X obj 30 6995 list.all_of;
#X text 200 6995 checks if all list atoms accepted by predicate;
#X obj 30 7022 list.any_of;
#X text 200 7022 checks if at least one list element is accepted by
predicate;
#X obj 30 7049 list.append;
#X text 200 7049 append atom or list to the end of input list;
#X obj 30 7076 list.apply_to;
#X text 200 7076 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 7116 list.at;
#X text 200 7116 on input list outputs element(s) at specified index(es);
#X obj 30 7143 list.choice;
#X text 200 7143 returns random element from list;
#X obj 30 7170 list.contains;
#X text 200 7170 checks if input list contains specified atoms;
#X obj 30 7197 list.count;
#X text 200 7197 returns the number of items that equal to specified
value;
#X obj 30 7224 list.count_if;
#X text 200 7224 returns the number of items that satisfy to external
predicate.;
#X obj 30 7264 list.delta;
#X text 200 7264 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7304 list.distribution;
#X text 200 7304 list value distribution;
#X obj 30 7331 list.do;
#X text 200 7331 iterate and modify list contents via side-chain;
#X obj 30 7358 list.each;
#X text 200 7358 maps each list value via external object(s);
#X obj 30 7385 list.enumerate;
#X text 200 7385 enumerates input list;
#X obj 30 7412 list.equal;
#X text 200 7412 checks if given lists are equal;
#X obj 30 7439 list.first;
#X text 200 7439 returns first list element;
#X obj 30 7466 list.gen;
#X text 200 7466 generates list of specified length via external generator;
#X obj 30 7493 list.histogram;
#X text 200 7493 outputs distribution histogram;
#X obj 30 7520 list.insert;
#X text 200 7520 insert atom or list to the specified position of input
list;
#X obj 30 7547 list.integrator;
#X text 200 7547 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7587 list.last;
#X text 200 7587 returns last list element;
#X obj 30 7614 list.length;
#X text 200 7614 returns the number of atoms in the list;
#X obj 30 7641 list.max;
#X text 200 7641 returns largest element in the list;
#X obj 30 7668 list.mean;
#X text 200 7668 calculates average of list of floats;
#X obj 30 7695 list.min;
#X text 200 7695 returns smallest element in the list;
#X obj 30 7722 list.none_of;
#X text 200 7722 checks if none of list atoms is accepted by predicate;
#X obj 30 7749 list.normalize;
#X text 200 7749 normalizes float list values to get their sum = 1.0;
#X obj 30 7776 list.pass_if;
#X text 200 7776 leave only elements accepted by predicate;
#X obj 30 7803 list.prepend;
#X text 200 7803 prepend atom or list before input list;
#X obj 30 7830 list.product;
#X text 200 7830 calculates product of floats in list;
#X obj 30 7857 list.range;
#X text 200 7857 returns list smallest and largest value;
#X obj 30 7884 list.reduce;
#X text 200 7884 apply function of two arguments cumulatively to the
list;
#X obj 30 7911 list.remove;
#X text 200 7911 on input list remove element(s) at specified positions;
#X obj 30 7938 list.remove_if;
#X text 200 7938 remove elements by predicate;
#X obj 30 7965 list.repack;
#X text 200 7965 repack input list to specified size;
#X obj 30 7992 list.repeat;
#X text 200 7992 creates new list by repeating given list specified
times;
#X obj 30 8019 list.resample;
#X text 200 8019 resample list with specified ratio;
#X obj 30 8046 list.resize;
#X text 200 8046 changes list size;
#X obj 30 8073 list.reverse;
#X text 200 8073 reverses the order of the elements in the list;
#X obj 30 8100 list.rldecode;
#X text 200 8100 Run-length list decoder (RLE);
#X obj 30 8127 list.rlencode;
#X text 200 8127 RLE (run-length encoding) for lists;
#X obj 30 8154 list.rotate;
#X text 200 8154 rotates list;
#X obj 30 8181 list.route;
#X text 200 8181 acts like [route] but for lists;
#X obj 30 8208 list.search;
#X text 200 8208 search specified items in input list;
#X obj 30 8235 list.separate;
#X text 200 8235 sends list elements one by one separately;
#X obj 30 8262 list.seq;
#X text 200 8262 numeric sequence list generator;
#X obj 30 8289 list.set;
#X text 200 8289 on input list set value at specified position;
#X obj 30 8316 list.shift;
#X text 200 8316 shifts the contents of the list with linear interpolation;
#X obj 30 8343 list.shuffle;
#X text 200 8343 randomly rearranges elements in list;
#X obj 30 8370 list.slice;
#X text 200 8370 extract sublist;
#X obj 30 8397 list.sort;
#X text 200 8397 sorts list values by ascending order;
#X obj 30 8424 list.sort_with;
#X text 200 8424 sort list with user defined side-chain;
#X obj 30 8451 list.split;
#X text 200 8451 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8491 list.stretch;
#X text 200 8491 stretches list - changes its size with linear interpolation;
#X obj 30 8518 list.sum;
#X text 200 8518 calculates sum of floats in list;
#X obj 30 8545 list.unique;
#X text 200 8545 removes duplicates from input list;
#X obj 30 8572 list.unpack;
#X text 200 8572 unpack list elements to separate outlets;
#X obj 30 8599 list.unzip;
#X text 200 8599 splits list to N lists \, each to separate output;
#X obj 30 8626 list.walk;
#X text 200 8626 Walks thru the list;
#X obj 30 8653 list.zip;
#X text 200 8653 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8708 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8749 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8760 live.capture~;
#X text 200 8760 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8800 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8841 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8852 local.dict;
#X text 200 8852 local named dict object;
#X obj 30 8879 local.float;
#X text 200 8879 canvas-scoped named float variable;
#X obj 30 8906 local.int;
#X text 200 8906 canvas-scoped named integer variable;
#X obj 30 8933 local.list;
#X text 200 8933 local named list object;
#X obj 30 8960 local.mlist;
#X text 200 8960 local named mlist object;
#X obj 30 8987 local.set;
#X text 200 8987 local named set object;
#X obj 20 9014 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9055 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9066 math.abs;
#X text 200 9066 absolute value function;
#X obj 30 9093 math.abs~;
#X text 200 9093 absolute value function for signals;
#X obj 30 9120 math.acos;
#X text 200 9120 arc cosine function;
#X obj 30 9147 math.acosh;
#X text 200 9147 inverse hyperbolic cosine function;
#X obj 30 9174 math.acosh~;
#X text 200 9174 hyperbolic arc cosine for signals;
#X obj 30 9201 math.acos~;
#X text 200 9201 arc cosine function for signals;
#X obj 30 9228 math.and;
#X text 200 9228 operation AND for multiple arguments;
#X obj 30 9255 math.approx;
#X text 200 9255 check if input value approximately equal to pattern;
#X obj 30 9282 math.asin;
#X text 200 9282 arc sine function;
#X obj 30 9309 math.asinh;
#X text 200 9309 inverse hyperbolic sine function;
#X obj 30 9336 math.asin~;
#X text 200 9336 arc sine for signals;
#X obj 30 9363 math.atan;
#X text 200 9363 arc tangent function;
#X obj 30 9390 math.atanh;
#X text 200 9390 inverse hyperbolic tangent function;
#X obj 30 9417 math.atan~;
#X text 200 9417 arc tangent for signals;
#X obj 30 9444 math.cabs~;
#X text 200 9444 magnitude of a complex signals;
#X obj 30 9471 math.carg~;
#X text 200 9471 phase angle of a complex signals;
#X obj 30 9498 math.cbrt;
#X text 200 9498 cube root function;
#X obj 30 9525 math.cdiv~;
#X text 200 9525 division of complex signals;
#X obj 30 9552 math.ceil;
#X text 200 9552 round to smallest integral value not less than input
value;
#X obj 30 9579 math.ceil~;
#X text 200 9579 round to smallest integral value not less than input
value;
#X obj 30 9606 math.cexp~;
#X text 200 9606 exponent of a complex signals;
#X obj 30 9633 math.cmul~;
#X text 200 9633 multiplication of complex signals;
#X obj 30 9660 math.cos;
#X text 200 9660 cosine function;
#X obj 30 9687 math.cosh;
#X text 200 9687 hyperbolic cosine function;
#X obj 30 9714 math.cosh~;
#X text 200 9714 hyperbolic cosine for signals;
#X obj 30 9741 math.cos~;
#X text 200 9741 cosine function;
#X obj 30 9768 math.div;
#X text 200 9768 division (on lists too);
#X obj 30 9795 math.e;
#X text 200 9795 mathematical constant \, base of the natural logarithm;
#X obj 30 9822 math.erf;
#X text 200 9822 error function;
#X obj 30 9849 math.erf~;
#X text 200 9849 error function for signals;
#X obj 30 9876 math.exp;
#X text 200 9876 exponential functions;
#X obj 30 9903 math.exp2;
#X text 200 9903 exponential functions;
#X obj 30 9930 math.exp2~;
#X text 200 9930 base-2 exponential for signal;
#X obj 30 9957 math.expr;
#X text 200 9957 dynamic [expr];
#X obj 30 9984 math.exp~;
#X text 200 9984 base-e exponential for signal;
#X obj 30 10011 math.floor;
#X text 200 10011 round to largest integral value not greater than
x;
#X obj 30 10038 math.floor~;
#X text 200 10038 round to largest integral value not greater than
x;
#X obj 30 10065 math.gamma;
#X text 200 10065 gamma function;
#X obj 30 10092 math.gamma~;
#X text 200 10092 gamma function for floating point signals;
#X obj 30 10119 math.gcd;
#X text 200 10119 calculate greatest common divisor;
#X obj 30 10146 math.inf;
#X text 200 10146 infinity value that cannot be represented accurately;
#X obj 30 10173 math.lcm;
#X text 200 10173 calculate least common multiple;
#X obj 30 10200 math.lgamma;
#X text 200 10200 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10227 math.lgamma~;
#X text 200 10227 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 10267 math.log;
#X text 200 10267 natural logarithm;
#X obj 30 10294 math.log10;
#X text 200 10294 logarithm functions;
#X obj 30 10321 math.log10~;
#X text 200 10321 natural logarithm;
#X obj 30 10348 math.log2;
#X text 200 10348 logarithm functions;
#X obj 30 10375 math.log2~;
#X text 200 10375 base-2 logarithm;
#X obj 30 10402 math.log~;
#X text 200 10402 natural logarithm;
#X obj 30 10429 math.mul;
#X text 200 10429 multiplication (on lists too);
#X obj 30 10456 math.nan;
#X text 200 10456 Not a Number \, unrepresentable value;
#X obj 30 10483 math.neg;
#X text 200 10483 negate function;
#X obj 30 10510 math.or;
#X text 200 10510 operation OR for multiple arguments;
#X obj 30 10537 math.pi;
#X text 200 10537 mathematical constant;
#X obj 30 10564 math.pi~;
#X text 200 10564 mathematical constant;
#X obj 30 10591 math.polyeval;
#X text 200 10591 evaluates the polynomial described by the coefficients
list;
#X obj 30 10618 math.reciprocal;
#X text 200 10618 calculate reciprocal number;
#X obj 30 10645 math.reciprocal~;
#X text 200 10645 calculate reciprocal number for signals;
#X obj 30 10672 math.round;
#X text 200 10672 round to integral value \, regardless of rounding
direction;
#X obj 30 10699 math.round~;
#X text 200 10699 signal round;
#X obj 30 10726 math.sign;
#X text 200 10726 sign function;
#X obj 30 10753 math.sin;
#X text 200 10753 sine function;
#X obj 30 10780 math.sinh;
#X text 200 10780 hyperbolic sine function;
#X obj 30 10807 math.sin~;
#X text 200 10807 sine function;
#X obj 30 10834 math.sqrt;
#X text 200 10834 square root function;
#X obj 30 10861 math.sqrt~;
#X text 200 10861 square root for signal;
#X obj 30 10888 math.squared;
#X text 200 10888 value square;
#X obj 30 10915 math.squared~;
#X text 200 10915 signal value square;
#X obj 30 10942 math.sync_add;
#X text 200 10942 sync addition;
#X obj 30 10969 math.sync_and;
#X text 200 10969 sync logical AND operation;
#X obj 30 10996 math.sync_div;
#X text 200 10996 sync division;
#X obj 30 11023 math.sync_eq;
#X text 200 11023 sync equal numbers check;
#X obj 30 11050 math.sync_ge;
#X text 200 11050 sync greater equal numbers compare;
#X obj 30 11077 math.sync_gt;
#X text 200 11077 sync greater then numbers compare;
#X obj 30 11104 math.sync_le;
#X text 200 11104 sync less equal numbers compare;
#X obj 30 11131 math.sync_lt;
#X text 200 11131 sync less then numbers compare;
#X obj 30 11158 math.sync_mod;
#X text 200 11158 sync remainder of modulo division (float or integer);
#X obj 30 11185 math.sync_mul;
#X text 200 11185 sync multiplication;
#X obj 30 11212 math.sync_ne;
#X text 200 11212 sync numbers for not equality;
#X obj 30 11239 math.sync_or;
#X text 200 11239 sync logical OR operation;
#X obj 30 11266 math.sync_sub;
#X text 200 11266 sync subtraction;
#X obj 30 11293 math.sync_xor;
#X text 200 11293 sync logical XOR operation;
#X obj 30 11320 math.tan;
#X text 200 11320 tangent function;
#X obj 30 11347 math.tanh;
#X text 200 11347 hyperbolic tangent function;
#X obj 30 11374 math.tan~;
#X text 200 11374 tangent function;
#X obj 30 11401 math.trunc;
#X text 200 11401 truncate to integer value;
#X obj 30 11428 math.trunc~;
#X text 200 11428 truncate to integer value;
#X obj 20 11455 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 11496 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11507 midi.ctl2str;
#X text 200 11507 convert Standard MIDI Controllers number to name;
#X obj 30 11534 midi.event2ctl;
#X text 200 11534 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11561 midi.event2note;
#X text 200 11561 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11588 midi.event2prg;
#X text 200 11588 convert MidiEvent message to midi program change
value;
#X obj 30 11615 midi.file;
#X text 200 11615 standard midi file SMF reader and writer;
#X obj 30 11642 midi.key2str;
#X text 200 11642 convert key number to SPN name according to tonality;
#X obj 30 11669 midi.prg2str;
#X text 200 11669 convert GM Instrument number to name (string or symbol);
#X obj 30 11696 midi.track;
#X text 200 11696 extract track from MidiFile;
#X obj 20 11723 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 11764 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11775 click~;
#X text 200 11775 Output single impulse on bang;
#X obj 30 11802 fluid~;
#X text 200 11802 FluidSynth SoundFont 2 player;
#X obj 30 11829 modplug~;
#X text 200 11829 MOD file player (using libmodplug);
#X obj 30 11856 speech.flite;
#X text 200 11856 render speech to array;
#X obj 20 11883 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 11924 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11935 msg;
#X text 200 11935 message constructor;
#X obj 30 11962 msg.after;
#X text 200 11962 send specified message after incoming message;
#X obj 30 11989 msg.onload;
#X text 200 11989 send message when patch loads;
#X obj 20 12016 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12057 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12068 net.host2ip;
#X text 200 12068 returns IP address by DNS name;
#X obj 20 12095 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 12136 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12147 noise.crackle~;
#X text 200 12147 sparse noise generator;
#X obj 30 12174 noise.lfreq0~;
#X text 200 12174 sampled/held noise (piecewise constant);
#X obj 30 12201 noise.lfreq~;
#X text 200 12201 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 12228 noise.pink~;
#X text 200 12228 Pink noise generator;
#X obj 30 12255 noise.white~;
#X text 200 12255 White noise generator;
#X obj 20 12282 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 12323 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12334 osc.blit~;
#X text 200 12334 Bandlimited impulse train oscillator;
#X obj 30 12361 osc.impulse~;
#X text 200 12361 Bandlimited impulse train generator;
#X obj 30 12388 osc.pulse~;
#X text 200 12388 Bandlimited pulse train oscillator;
#X obj 30 12415 osc.saw4~;
#X text 200 12415 Bandlimited sawtooth wave;
#X obj 30 12442 osc.saw~;
#X text 200 12442 Alias-free sawtooth wave;
#X obj 30 12469 osc.sinfb~;
#X text 200 12469 Sine oscilator with feedback;
#X obj 30 12496 osc.sin~;
#X text 200 12496 Sine wave oscillator;
#X obj 30 12523 osc.square~;
#X text 200 12523 Bandlimited square wave oscillator;
#X obj 30 12550 osc.tri~;
#X text 200 12550 Bandlimited triangle wave oscillator;
#X obj 20 12577 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12618 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12629 canvas.current;
#X text 200 12629 verbose information about current canvas;
#X obj 30 12656 canvas.dir;
#X text 200 12656 current canvas directory;
#X obj 30 12683 canvas.name;
#X text 200 12683 current canvas name;
#X obj 30 12710 canvas.path;
#X text 200 12710 current canvas fullpath;
#X obj 30 12737 canvas.top;
#X text 200 12737 verbose information about top-level canvas;
#X obj 30 12764 patch.args;
#X text 200 12764 Get patch or subpatch arguments;
#X obj 20 12791 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 12832 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12843 path.basename;
#X text 200 12843 outputs filename portion of pathname;
#X obj 30 12870 path.dirname;
#X text 200 12870 outputs directory portion of pathname;
#X obj 30 12897 path.exists;
#X text 200 12897 checks if given path exists;
#X obj 30 12924 path.is_dir;
#X text 200 12924 check if path is directory;
#X obj 30 12951 path.lsdir;
#X text 200 12951 list directory contents;
#X obj 20 12978 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13019 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13030 is_any;
#X text 200 13030 checks if input data has *any* type;
#X obj 30 13057 is_bang;
#X text 200 13057 checks if input data has *bang* type;
#X obj 30 13084 is_data;
#X text 200 13084 checks if input data has *data* type;
#X obj 30 13111 is_dict;
#X text 200 13111 checks if input data has *dict* type;
#X obj 30 13138 is_even;
#X text 200 13138 checks if input number is even;
#X obj 30 13165 is_file;
#X text 200 13165 checks if file exists and accessible;
#X obj 30 13192 is_float;
#X text 200 13192 checks if input data has *float* type;
#X obj 30 13219 is_list;
#X text 200 13219 checks if input data has *list* type;
#X obj 30 13246 is_odd;
#X text 200 13246 checks if input number is odd;
#X obj 30 13273 is_pointer;
#X text 200 13273 checks if input data has *pointer* type;
#X obj 30 13300 is_symbol;
#X text 200 13300 checks if input data has *symbol* type;
#X obj 20 13327 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 13368 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13379 preset.float;
#X text 200 13379 load/store float preset;
#X obj 30 13406 preset.list;
#X text 200 13406 load/store symbol preset;
#X obj 30 13433 preset.storage;
#X text 200 13433 preset storage control;
#X obj 30 13460 preset.symbol;
#X text 200 13460 load/store symbol preset;
#X obj 20 13487 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 13528 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13539 patch.props;
#X text 200 13539 patch properties manager;
#X obj 30 13566 prop;
#X text 200 13566 get/set named property value for subpatch or abstraction;
#X obj 30 13593 prop.declare;
#X text 200 13593 declare named property for subpatch or abstraction;
#X obj 30 13620 prop.get;
#X text 200 13620 Property extractor;
#X obj 30 13647 prop.get~;
#X text 200 13647 Property extractor from sound stream;
#X obj 30 13674 prop.set;
#X text 200 13674 Property injector;
#X obj 20 13701 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 13742 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13753 proto.firmata;
#X text 200 13753 Firmata Arduino protocol support;
#X obj 30 13780 proto.sp.alpaca;
#X text 200 13780 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 13807 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 13848 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13859 random.discrete;
#X text 200 13859 random weighted integers on interval [0 \, n);
#X obj 30 13886 random.float;
#X text 200 13886 random float generator in specified range;
#X obj 30 13913 random.gauss;
#X text 200 13913 gaussian random distribution;
#X obj 30 13940 random.int;
#X text 200 13940 Random integer generator in specified range;
#X obj 30 13967 random.linear;
#X text 200 13967 random linear distribution;
#X obj 30 13994 random.pw_const;
#X text 200 13994 piecewise constant random distribution;
#X obj 30 14021 random.pw_lin;
#X text 200 14021 piecewise linear random distribution;
#X obj 20 14048 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 14089 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14100 snd.file;
#X text 200 14100 Sound file loader on steroids;
#X obj 20 14127 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 14168 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14179 hoa.2d.decoder~;
#X text 200 14179 hoa 2d decoder;
#X obj 30 14206 hoa.2d.encoder~;
#X text 200 14206 hoa 2d encoder;
#X obj 30 14233 hoa.2d.map~;
#X text 200 14233 a 2d ambisonic multisource spatializer;
#X obj 30 14260 hoa.2d.optim~;
#X text 200 14260 a 2D ambisonic optimization tool;
#X obj 30 14287 hoa.2d.projector~;
#X text 200 14287 a plane waves decomposer from circular harmonics
domain;
#X obj 30 14314 hoa.2d.recomposer~;
#X text 200 14314 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 14354 hoa.2d.rotate~;
#X text 200 14354 a 2D ambisonic sound field rotation;
#X obj 30 14381 hoa.2d.wider~;
#X text 200 14381 a 2d fractional ambisonic order simulator;
#X obj 30 14408 hoa.@process;
#X text 200 14408 process properties manager for hoa.process~;
#X obj 30 14435 hoa.in;
#X text 200 14435 message inlet for a patcher loaded by hoa.process~;
#X obj 30 14462 hoa.in~;
#X text 200 14462 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14489 hoa.out;
#X text 200 14489 message outlet for a patcher loaded by hoa.process~;
#X obj 30 14516 hoa.out~;
#X text 200 14516 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14543 hoa.process~;
#X text 200 14543 patcher loader for multichannel processing;
#X obj 30 14573 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 14570 a 2d ambisonic harmonic scope;
#X obj 30 14595 pan.cos~;
#X text 200 14595 two channel equal power sine/cosine panner;
#X obj 30 14622 pan.linsig~;
#X text 200 14622 two channel linear panner with signal control;
#X obj 30 14649 pan.lin~;
#X text 200 14649 two channel linear panner;
#X obj 30 14676 pan.spread~;
#X text 200 14676 spreads input channels across the stereo field;
#X obj 30 14703 pan.sqrt~;
#X text 200 14703 two channel equal power square root panner;
#X obj 30 14730 spat.pan4~;
#X text 200 14730 GMEM SPAT: 4-outputs spatializer;
#X obj 30 14757 spat.pan8~;
#X text 200 14757 GMEM SPAT: 8-outputs spatializer;
#X obj 20 14784 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 14825 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14836 string;
#X text 200 14836 string constructor;
#X obj 30 14863 string.contains;
#X text 200 14863 checks if given string contains specified substring;
#X obj 30 14890 string.ends_with;
#X text 200 14890 checks if given string ends with specified suffix;
#X obj 30 14917 string.equal;
#X text 200 14917 check strings for equality;
#X obj 30 14944 string.format;
#X text 200 14944 formats string like printf.;
#X obj 30 14971 string.join;
#X text 200 14971 joins (concatenates) strings with separator;
#X obj 30 14998 string.length;
#X text 200 14998 number of characters in string (unicode supported);
#X obj 30 15025 string.match;
#X text 200 15025 check if string match regular expression;
#X obj 30 15052 string.remove;
#X text 200 15052 remove substring from input string;
#X obj 30 15079 string.replace;
#X text 200 15079 replace from one substring to another in input string;
#X obj 30 15106 string.split;
#X text 200 15106 split string by separator;
#X obj 30 15133 string.starts_with;
#X text 200 15133 checks if given string starts with specified prefix;
#X obj 30 15160 string.substr;
#X text 200 15160 extract substring from input string;
#X obj 30 15187 string2symbol;
#X text 200 15187 converts string to symbol;
#X obj 20 15214 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 15255 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15266 symbol.equal;
#X text 200 15266 check symbols for equality;
#X obj 30 15293 symbol.length;
#X text 200 15293 number of characters in symbol (unicode supported);
#X obj 30 15320 symbol.num_compare;
#X text 200 15320 numeric symbol compare;
#X obj 20 15347 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 15388 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15399 synth.bee3~;
#X text 200 15399 Hammond-oid organ FM synthesis instrument;
#X obj 30 15426 synth.birds~;
#X text 200 15426 bird singing generator;
#X obj 30 15453 synth.church_bell~;
#X text 200 15453 generic church bell modal model;
#X obj 30 15480 synth.dubdub~;
#X text 200 15480 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 15520 synth.eguitar~;
#X text 200 15520 simple electric guitar model with steel strings;
#X obj 30 15547 synth.fgrain~;
#X text 200 15547 file granulator from STK;
#X obj 30 15574 synth.ks~;
#X text 200 15574 Karplus-Strong string;
#X obj 30 15601 synth.marimba~;
#X text 200 15601 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 15641 synth.rhodey~;
#X text 200 15641 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 15668 synth.risset_arp~;
#X text 200 15668 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 15695 synth.risset_tone~;
#X text 200 15695 Jean Claude Risset's endless glissando;
#X obj 30 15722 synth.shakers~;
#X text 200 15722 various percussion sounds from STK library;
#X obj 30 15749 synth.wurley~;
#X text 200 15749 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 15776 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 15817 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15828 system.colorpanel;
#X text 200 15828 System color panel dialog popup;
#X obj 30 15855 system.cursor;
#X text 200 15855 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 15882 system.getenv;
#X text 200 15882 Get system environment variables;
#X obj 30 15909 system.hostname;
#X text 200 15909 outputs system hostname;
#X obj 30 15936 system.memsize;
#X text 200 15936 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 15976 system.memused;
#X text 200 15976 returns the process physical memory use - current
and peak;
#X obj 30 16003 system.screen_size;
#X text 200 16003 returns current screen size in pixels;
#X obj 30 16030 system.shell;
#X text 200 16030 run external command in separate process;
#X obj 20 16057 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 16098 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16109 tl.bang;
#X text 200 16109 Timeline bang (with possible delay);
#X obj 30 16139 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 16136 Timeline section;
#X obj 30 16161 tl.timeline;
#X text 200 16161 Timeline - event scheduler;
#X obj 30 16188 tl.toggle;
#X text 200 16188 Timeline bang;
#X obj 30 16215 tl.transport;
#X text 200 16215 Timeline transport control;
#X obj 20 16242 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 16283 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16297 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 16294 array view with cursor and selection;
#X obj 30 16322 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 16319 A bang... that's all;
#X obj 30 16347 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 16344 colorchooser widget;
#X obj 30 16372 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 16369 Display GUI object;
#X obj 30 16397 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 16394 GUI for turning DSP on/off;
#X obj 30 16422 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 16419 envelope editor widget;
#X obj 30 16447 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 16444 UI stereo gain control;
#X obj 30 16472 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 16469 UI gain control;
#X obj 30 16497 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 16494 simple icon with button capabilities;
#X obj 30 16522 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 16519 value increment/decrement;
#X obj 30 16547 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 16544 keyboard widget;
#X obj 30 16572 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 16569 knob widget;
#X obj 30 16597 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 16594 simple label widget;
#X obj 30 16622 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 16619 Hyperlink widget;
#X obj 30 16647 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 16644 The matrix of toggles has you.;
#X obj 30 16672 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 16669 Dropdown menu;
#X obj 30 16697 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 16694 Shows peak and rms signal level;
#X obj 30 16722 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 16719 filter mouse events from ui objects;
#X obj 30 16747 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 16744 routes mouse events from ui objects;
#X obj 30 16772 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 16769 counterpart of the vanilla [nbx];
#X obj 30 16797 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 16794 counterpart of the vanilla [nbx] for signal;
#X obj 30 16822 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 16819 signal plotter;
#X obj 30 16847 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 16844 2D slider in polar coordinates;
#X obj 30 16872 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 16869 Preset manager;
#X obj 30 16897 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 16894 counterpart of the vanilla radio toggle;
#X obj 30 16922 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 16919 range slider;
#X obj 30 16947 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 16944 Scope GUI object;
#X obj 30 16972 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 16969 counterpart of the vanilla slider;
#X obj 30 16997 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 16994 2D slider widget;
#X obj 30 17022 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 17019 Multiple slider widget;
#X obj 30 17047 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 17044 Spectroscope GUI object;
#X obj 30 17072 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 17069 displays a list of text buttons or text toggles;
#X obj 30 17097 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 17094 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 17119 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 17119 version: v0.8.0 \, license: GPL3;
#X obj 20 17140 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;