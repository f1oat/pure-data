#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title matrix @url matrix-help.pd;
#X obj 30 116 matrix.<;
#X text 200 116 element-wise less then comparasion;
#X obj 30 143 matrix.<=;
#X text 200 143 element-wise less equal comparasion;
#X obj 30 170 matrix.>;
#X text 200 170 element-wise greater then comparasion;
#X obj 30 197 matrix.>=;
#X text 200 197 element-wise greater equal comparasion;
#X obj 30 224 matrix.abs;
#X text 200 224 calc abs value for each matrix element;
#X obj 30 251 matrix.accu;
#X text 200 251 accumulate (sum) all elements of matrix;
#X obj 30 278 matrix.acos;
#X text 200 278 element-wise acrcosine;
#X obj 30 305 matrix.acosh;
#X text 200 305 element-wise hyperbolic acrcosine;
#X obj 30 332 matrix.add;
#X text 200 332 element-wise matrix addition;
#X obj 30 359 matrix.all;
#X text 200 359 check if all elements of the matrix are non-zero;
#X obj 30 386 matrix.all_col;
#X text 200 386 row with each element (0 or 1) indicating whether the
corresponding column has all non-zero elements;
#X obj 30 426 matrix.all_row;
#X text 200 426 column with each element (0 or 1) indicating whether
the corresponding row has all non-zero elements;
#X obj 30 466 matrix.any;
#X text 200 466 check if any elements of the matrix are non-zero;
#X obj 30 493 matrix.any_col;
#X text 200 493 row with each element (0 or 1) indicating whether the
corresponding column has any non-zero elements;
#X obj 30 533 matrix.any_row;
#X text 200 533 column with each element (0 or 1) indicating whether
the corresponding row has any non-zero elements;
#X obj 30 573 matrix.asin;
#X text 200 573 element-wise acrsine;
#X obj 30 600 matrix.asinh;
#X text 200 600 element-wise hyperbolic acrsine;
#X obj 30 627 matrix.at;
#X text 200 627 select matrix element at specified position;
#X obj 30 654 matrix.atan;
#X text 200 654 element-wise arctangent;
#X obj 30 681 matrix.atanh;
#X text 200 681 element-wise hyperbolic acrtangent;
#X obj 30 708 matrix.clip;
#X text 200 708 clip matrix value to range [min \, max];
#X obj 30 735 matrix.col;
#X text 200 735 create Matrix column with specified values;
#X obj 30 762 matrix.col_at;
#X text 200 762 get specified column;
#X obj 30 789 matrix.conv2;
#X text 200 789 2D matrix convolution;
#X obj 30 816 matrix.cos;
#X text 200 816 element-wise cosine;
#X obj 30 843 matrix.cosh;
#X text 200 843 element-wise hyperbolic cosine;
#X obj 30 870 matrix.det;
#X text 200 870 determinant of square matrix;
#X obj 30 897 matrix.diag;
#X text 200 897 get matrix diagonals;
#X obj 30 924 matrix.div;
#X text 200 924 element-wise matrix division;
#X obj 30 951 matrix.eq;
#X text 200 951 element-wise matrix equal comparasion;
#X obj 30 978 matrix.exp;
#X text 200 978 element-wise base-e exponent: e^x;
#X obj 30 1005 matrix.exp10;
#X text 200 1005 element-wise base-10 exponent: 10^x;
#X obj 30 1032 matrix.exp2;
#X text 200 1032 element-wise base-2 exponent: 2^x;
#X obj 30 1059 matrix.fill;
#X text 200 1059 fill input Matrix with value;
#X obj 30 1086 matrix.from_list;
#X text 200 1086 create Matrix from list values;
#X obj 30 1113 matrix.full;
#X text 200 1113 create Matrix filled with specified value;
#X obj 30 1140 matrix.hist;
#X text 200 1140 produce a matrix containing column histogram counts;
#X obj 30 1167 matrix.identity;
#X text 200 1167 create identity Matrix;
#X obj 30 1194 matrix.insert_col;
#X text 200 1194 insert vector at specified matrix column;
#X obj 30 1221 matrix.insert_row;
#X text 200 1221 insert vector at specified matrix row;
#X obj 30 1248 matrix.inverse;
#X text 200 1248 inverse square matrix;
#X obj 30 1275 matrix.linspace;
#X text 200 1275 generate row with linearly spaced N elements;
#X obj 30 1302 matrix.load;
#X text 200 1302 load matrix from CSV format;
#X obj 30 1329 matrix.logspace;
#X text 200 1329 generate row with N elements spaced logarithmically;
#X obj 30 1356 matrix.matmul;
#X text 200 1356 matrix product;
#X obj 30 1383 matrix.max;
#X text 200 1383 returns maximum in Matrix;
#X obj 30 1410 matrix.mean;
#X text 200 1410 mean matrix value;
#X obj 30 1437 matrix.mean_col;
#X text 200 1437 mean value for each matrix column;
#X obj 30 1464 matrix.mean_row;
#X text 200 1464 mean value for each matrix row;
#X obj 30 1491 matrix.median;
#X text 200 1491 median matrix value;
#X obj 30 1518 matrix.median_col;
#X text 200 1518 median matrix value for each column;
#X obj 30 1545 matrix.median_row;
#X text 200 1545 median matrix value for each row;
#X obj 30 1572 matrix.min;
#X text 200 1572 returns minimum value in Matrix;
#X obj 30 1599 matrix.mul;
#X text 200 1599 element-wise matrix multiplication;
#X obj 30 1626 matrix.ncols;
#X text 200 1626 return number of columns in Matrix;
#X obj 30 1653 matrix.ne;
#X text 200 1653 element-wise matrix not equal comparasion;
#X obj 30 1680 matrix.new;
#X text 200 1680 Matrix data type;
#X obj 30 1707 matrix.nrows;
#X text 200 1707 return number of rows in Matrix;
#X obj 30 1734 matrix.ones;
#X text 200 1734 create Matrix with ones;
#X obj 30 1761 matrix.ones_like;
#X text 200 1761 create Matrix filled with ones with the same shape
as input;
#X obj 30 1788 matrix.randn;
#X text 200 1788 generates Matrix using Gaussian distribution with
zero mean and unit variance;
#X obj 30 1828 matrix.randu;
#X text 200 1828 generates Matrix with uniform distribution [0-1];
#X obj 30 1855 matrix.range;
#X text 200 1855 matrix range (difference between max and min);
#X obj 30 1882 matrix.range_col;
#X text 200 1882 matrix column range (difference between max and min);
#X obj 30 1909 matrix.range_row;
#X text 200 1909 matrix row range (difference between max and min);
#X obj 30 1936 matrix.rank;
#X text 200 1936 rank of the matrix;
#X obj 30 1963 matrix.remove_col;
#X text 200 1963 remove specified matrix column;
#X obj 30 1990 matrix.remove_row;
#X text 200 1990 remove specified matrix row;
#X obj 30 2017 matrix.replace;
#X text 200 2017 replace specific elements with a new value;
#X obj 30 2044 matrix.reshape;
#X text 200 2044 change size while keeping elements;
#X obj 30 2071 matrix.resize;
#X text 200 2071 change size while keeping elements and preserving
layout;
#X obj 30 2098 matrix.row;
#X text 200 2098 create Matrix row with specified values;
#X obj 30 2125 matrix.row_at;
#X text 200 2125 get specified row;
#X obj 30 2152 matrix.save;
#X text 200 2152 save matrix in CSV format;
#X obj 30 2179 matrix.shift_col;
#X text 200 2179 shift Matrix elements by N positions in each column;
#X obj 30 2206 matrix.shift_row;
#X text 200 2206 shift Matrix elements by N positions in each row;
#X obj 30 2233 matrix.sign;
#X text 200 2233 element-wise signum function;
#X obj 30 2260 matrix.sin;
#X text 200 2260 element-wise sine;
#X obj 30 2287 matrix.sinh;
#X text 200 2287 element-wise hyperbolic sine;
#X obj 30 2314 matrix.size;
#X text 200 2314 return Matrix size (rows \, columns);
#X obj 30 2341 matrix.solve;
#X text 200 2341 Solve a system of linear equations \, A*X = B \, where
X is unknown;
#X obj 30 2381 matrix.stddev;
#X text 200 2381 standart deviation for matrix values;
#X obj 30 2408 matrix.stddev_col;
#X text 200 2408 standart deviation matrix value for each column;
#X obj 30 2435 matrix.stddev_row;
#X text 200 2435 standart deviation matrix value for each row;
#X obj 30 2462 matrix.sub;
#X text 200 2462 element-wise matrix subtraction;
#X obj 30 2489 matrix.swap_cols;
#X text 200 2489 swaps specified columns in matrix;
#X obj 30 2516 matrix.swap_rows;
#X text 200 2516 swaps specified rows in matrix;
#X obj 30 2543 matrix.tan;
#X text 200 2543 element-wise tangent;
#X obj 30 2570 matrix.tanh;
#X text 200 2570 element-wise hyperbolic tangent;
#X obj 30 2597 matrix.to_list;
#X text 200 2597 convert Matrix to list;
#X obj 30 2624 matrix.transpose;
#X text 200 2624 transpose Matrix;
#X obj 30 2651 matrix.trunc_exp;
#X text 200 2651 element-wise base-e exponent \, truncated to avoid
infinity;
#X obj 30 2678 matrix.vectorise;
#X text 200 2678 generate a column vector or row vector from matrix;
#X obj 30 2705 matrix.zeros;
#X text 200 2705 create Matrix with zeros;
#X obj 30 2732 matrix.zeros_like;
#X text 200 2732 create Matrix filled with zeros with the same shape
as input;
#X obj 1 1 cnv 5 740 40 empty empty matrix::matrix 20 20 0 20 -104026
-4096 0;
#X obj 1 2759 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2769 library: matrix;