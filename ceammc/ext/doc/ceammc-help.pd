#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in Centre of ElectroAcoustic Music of Moscow Conservatory
(CEAM).;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.ltcplay~;
#X text 200 641 array player controlled by LTC;
#X obj 30 668 array.mean;
#X text 200 668 calculates array arithmetic mean value;
#X obj 30 695 array.minmax;
#X text 200 695 find array min and max element value;
#X obj 30 722 array.play~;
#X text 200 722 array player with variable speed and amplitude;
#X obj 30 749 array.plot;
#X text 200 749 array data plotter;
#X obj 30 776 array.plot~;
#X text 200 776 plot signal on specified array;
#X obj 30 803 array.readwrite~;
#X text 200 803 array reader/writer;
#X obj 30 830 array.resample;
#X text 200 830 array resampler;
#X obj 30 857 array.rms;
#X text 200 857 calculates root mean square value for array;
#X obj 30 884 array.set;
#X text 200 884 set array content from list;
#X obj 30 911 array.stddev;
#X text 200 911 calculates standard deviation for array values;
#X obj 30 938 array.stretch;
#X text 200 938 array time-stretch \, pitch-shift or rate-change;
#X obj 30 965 array.sum;
#X text 200 965 calculates sum of array elements;
#X obj 30 992 array.sum2;
#X text 200 992 calculates sum of squares of array elements;
#X obj 30 1019 array.tramp~;
#X text 200 1019 triggered ramp generator for array;
#X obj 30 1046 array.variance;
#X text 200 1046 calculates variance of array values;
#X obj 30 1073 array.vplay;
#X text 200 1073 simple array player for using with vline~;
#X obj 30 1100 array.window;
#X text 200 1100 fill array with window;
#X obj 30 1127 plot.geomspace~;
#X text 200 1127 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1167 plot.hist~;
#X text 200 1167 calculate and output signal histogram;
#X obj 30 1194 plot.linspace~;
#X text 200 1194 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1234 plot.logspace~;
#X text 200 1234 outputs numbers spaced evenly on a log scale;
#X obj 30 1261 plot.response~;
#X text 200 1261 output amp/phase freq response to impulse;
#X obj 20 1288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1329 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1340 ceammc.search;
#X text 200 1340 ceammc library search object;
#X obj 30 1367 chrono.datetime;
#X text 200 1367 output current date and time info;
#X obj 30 1394 convolve~;
#X text 200 1394 realtime FFT convolution;
#X obj 30 1424 ui.link @title [function] @url function-help.pd;
#X text 200 1421 named function;
#X obj 30 1446 function.call;
#X text 200 1446 call named function;
#X obj 30 1473 gain~;
#X text 200 1473 multislot signal gain;
#X obj 30 1500 gate~;
#X text 200 1500 multislot signal gate;
#X obj 30 1527 logger;
#X text 200 1527 advanced data logger;
#X obj 30 1554 matrix~;
#X text 200 1554 signal routing matrix;
#X obj 30 1581 merge~;
#X text 200 1581 parametrized signal merge;
#X obj 30 1608 metro.choice;
#X text 200 1608 metro with random choice from timeset;
#X obj 30 1635 metro.pattern;
#X text 200 1635 metro with rhythmic patterns;
#X obj 30 1662 metro.random;
#X text 200 1662 metro random bang with specified range;
#X obj 30 1689 metro.seq;
#X text 200 1689 metro sequencer;
#X obj 30 1716 metro.wchoice;
#X text 200 1716 metro with weighted random choice from timeset;
#X obj 30 1743 mix~;
#X text 200 1743 multislot signal mixer;
#X obj 30 1770 nsig~;
#X text 200 1770 Mulitchannel converter from control to audio rate;
#X obj 30 1797 obj.props;
#X text 200 1797 property extractor;
#X obj 30 1824 radio;
#X text 200 1824 float index to outlet values as radio switch;
#X obj 30 1851 split~;
#X text 200 1851 parametrized signal splitter;
#X obj 30 1878 spring;
#X text 200 1878 float value "spring";
#X obj 30 1905 sync;
#X text 200 1905 value synchronization;
#X obj 30 1932 window;
#X text 200 1932 returns window value by given window position;
#X obj 30 1959 xdac~;
#X text 200 1959 dac~ with channel ranges;
#X obj 30 1986 xfade2~;
#X text 200 1986 multi stereo-signal crossfade;
#X obj 30 2013 xfade~;
#X text 200 2013 multi signal crossfade;
#X obj 30 2040 z~;
#X text 200 2040 sample delay;
#X obj 20 2067 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 2108 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2119 chaos.gbman0;
#X text 200 2119 Gingerbreadman map chaotic generator;
#X obj 30 2146 chaos.gbman0~;
#X text 200 2146 Gingerbreadman map chaotic generator;
#X obj 30 2173 chaos.jong;
#X text 200 2173 Peter de Jong attractor;
#X obj 30 2200 chaos.logistic;
#X text 200 2200 Logistic map chaotic generator;
#X obj 30 2227 chaos.std0;
#X text 200 2227 Standard map chaotic generator;
#X obj 30 2254 chaos.std0~;
#X text 200 2254 Standard map chaotic generator;
#X obj 20 2281 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2322 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2333 array.p2s;
#X text 200 2333 convert array phase [0\..1] to sample position;
#X obj 30 2360 array.s2p;
#X text 200 2360 convert sample position to phase range [0\..1];
#X obj 30 2387 conv.amp2dbfs;
#X text 200 2387 convert from amplitude to decibel full scale;
#X obj 30 2414 conv.amp2dbfs~;
#X text 200 2414 convert from amplitude to decibel full scale;
#X obj 30 2441 conv.bar2ms;
#X text 200 2441 calculate bar and beat duration;
#X obj 30 2468 conv.bits2bang;
#X text 200 2468 convert list of bits to bang events;
#X obj 30 2495 conv.bits2int;
#X text 200 2495 convert list of bits to integer;
#X obj 30 2522 conv.bits2note;
#X text 200 2522 convert list of bits to note events;
#X obj 30 2549 conv.bits2pos;
#X text 200 2549 convert list of bits to list of bit position;
#X obj 30 2576 conv.bpm2hz;
#X text 200 2576 converts BPM to frequency in hertz;
#X obj 30 2603 conv.bpm2ms;
#X text 200 2603 convert frequency in BPM to period in milliseconds;
#X obj 30 2630 conv.bpm2sec;
#X text 200 2630 convert frequency in BPM to period in seconds;
#X obj 30 2657 conv.car2pol;
#X text 200 2657 convert cartesian coords to polar;
#X obj 30 2684 conv.cc2amp;
#X text 200 2684 convert from MIDI Control Change range;
#X obj 30 2711 conv.char2morse;
#X text 200 2711 convert character to morse code;
#X obj 30 2738 conv.color2rgba;
#X text 200 2738 convert named or hex color to separate RGBA values;
#X obj 30 2765 conv.dbfs2amp;
#X text 200 2765 convert decibel full scale to amplitude;
#X obj 30 2792 conv.dbfs2amp~;
#X text 200 2792 convert decibel full scale to amplitude;
#X obj 30 2819 conv.degree2key;
#X text 200 2819 convert scale degree to key;
#X obj 30 2846 conv.edge2bang;
#X text 200 2846 edge detector for numeric stream;
#X obj 30 2873 conv.guido2note;
#X text 200 2873 convert Guido notation into MIDI and duration;
#X obj 30 2900 conv.hex2int;
#X text 200 2900 hex symbol to int value;
#X obj 30 2927 conv.hsl2rgb;
#X text 200 2927 convert HSL color values to RGB;
#X obj 30 2954 conv.int2bits;
#X text 200 2954 convert integer to list of bits;
#X obj 30 2981 conv.lab2rgb;
#X text 200 2981 convert LAB color values to RGB;
#X obj 30 3008 conv.lin2curve;
#X text 200 3008 map linear to exponential range with 0 allowed.;
#X obj 30 3035 conv.lin2exp;
#X text 200 3035 maps linear range to exponential range;
#X obj 30 3062 conv.lin2lin;
#X text 200 3062 convert from one linear range to another;
#X obj 30 3089 conv.lin2lin~;
#X text 200 3089 convert from one linear range to another for signals;
#X obj 30 3116 conv.list2props;
#X text 200 3116 converts list to series of property messages;
#X obj 30 3143 conv.midi2freq;
#X text 200 3143 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 3183 conv.ms2bpm;
#X text 200 3183 convert period in milliseconds to frequency in BPM;
#X obj 30 3210 conv.ms2samp;
#X text 200 3210 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3250 conv.ms2samp~;
#X text 200 3250 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3290 conv.ms2str;
#X text 200 3290 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3330 conv.note2guido;
#X text 200 3330 convert MIDI note to Guido notation;
#X obj 30 3357 conv.phase2rad;
#X text 200 3357 convert phase value [0-1] to radians [0-2π];
#X obj 30 3384 conv.phase2rad~;
#X text 200 3384 convert phase value [0-1] to radians [0-2π];
#X obj 30 3411 conv.pitch2midi;
#X text 200 3411 converts symbol pitch name to MIDI note number;
#X obj 30 3438 conv.pol2car;
#X text 200 3438 convert from polar coordinates to cartesian;
#X obj 30 3465 conv.rad2phase;
#X text 200 3465 convert radians value to phase;
#X obj 30 3492 conv.rad2phase~;
#X text 200 3492 convert radians value to phase;
#X obj 30 3519 conv.rgb2hex;
#X text 200 3519 convert separate RGB values to hex color;
#X obj 30 3546 conv.samp2ms;
#X text 200 3546 convert samples to time according to samplerate;
#X obj 30 3573 conv.samp2ms~;
#X text 200 3573 convert samples to milliseconds according to samplerate;
#X obj 30 3600 conv.samp2sec;
#X text 200 3600 convert samples to time according to samplerate;
#X obj 30 3627 conv.sec2bpm;
#X text 200 3627 convert period in seconds to frequency in BPM;
#X obj 30 3654 conv.sec2samp;
#X text 200 3654 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3694 conv.sec2str;
#X text 200 3694 converts float time in seconds to formated symbol
(or string);
#X obj 30 3721 conv.semi2ratio;
#X text 200 3721 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3748 conv.sig2float~;
#X text 200 3748 convert signal to floats;
#X obj 30 3775 conv.str2sec;
#X text 200 3775 converts formatted time to float value in seconds;
#X obj 30 3802 music.dur2time;
#X text 200 3802 convert duration list to time;
#X obj 30 3829 music.voice2midi;
#X text 200 3829 convert voice music list of midi pitches;
#X obj 20 3856 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3908 color.mix;
#X text 200 3908 color mixer;
#X obj 30 3935 color.scale;
#X text 200 3935 create color scales;
#X obj 30 3962 data.bimap;
#X text 200 3962 bidirectional map container;
#X obj 30 3989 data.color;
#X text 200 3989 Color datatype;
#X obj 30 4016 data.copy;
#X text 200 4016 make copy for any data types: MList \, Set etc...;
#X obj 30 4043 data.dict;
#X text 200 4043 dictionary container: store values by key;
#X obj 30 4070 data.fifo;
#X text 200 4070 First-In-First-Out (FIFO) queue data container;
#X obj 30 4097 data.float;
#X text 200 4097 robust float object;
#X obj 30 4124 data.int;
#X text 200 4124 robust int object;
#X obj 30 4151 data.list;
#X text 200 4151 list container;
#X obj 30 4178 data.mlist;
#X text 200 4178 multidimensional list container;
#X obj 30 4205 data.set;
#X text 200 4205 container that store unique elements;
#X obj 30 4232 data.set2list;
#X text 200 4232 converts set to list;
#X obj 30 4259 dict.contains;
#X text 200 4259 predicate to check if dict contains a keys;
#X obj 30 4286 dict.each;
#X text 200 4286 map each value in dict;
#X obj 30 4313 dict.from_list;
#X text 200 4313 creates dictionary from list;
#X obj 30 4340 dict.get;
#X text 200 4340 output dict values;
#X obj 30 4367 dict.keys;
#X text 200 4367 get list of dict keys;
#X obj 30 4394 dict.pass;
#X text 200 4394 passes specified keys in dict;
#X obj 30 4421 dict.reject;
#X text 200 4421 rejects specified keys from dict;
#X obj 30 4448 dict.size;
#X text 200 4448 dictionary size;
#X obj 30 4475 dict.to_list;
#X text 200 4475 converts dictionary to plain list;
#X obj 30 4502 dict.values;
#X text 200 4502 dictionary values as mlist;
#X obj 30 4529 global.bimap;
#X text 200 4529 Global visibility bidirectional map container;
#X obj 30 4556 local.bimap;
#X text 200 4556 local to patch bidirectional map container;
#X obj 30 4583 mlist.flatten;
#X text 200 4583 flatten nested mlist;
#X obj 30 4610 rtree.to_list;
#X text 200 4610 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4637 set.contains;
#X text 200 4637 check if specified element is in set;
#X obj 30 4664 set.diff;
#X text 200 4664 difference between two sets;
#X obj 30 4691 set.equal;
#X text 200 4691 checks if two sets are equal (contains same elements);
#X obj 30 4718 set.intersect;
#X text 200 4718 output intersection of given sets;
#X obj 30 4745 set.size;
#X text 200 4745 get number of elements in set;
#X obj 30 4772 set.symdiff;
#X text 200 4772 symmetric difference between two sets;
#X obj 30 4799 set.union;
#X text 200 4799 output union of given sets;
#X obj 20 4826 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4867 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4878 dyn.comp2~;
#X text 200 4878 stereo dynamic range compressor;
#X obj 30 4905 dyn.comp_peak2~;
#X text 200 4905 stereo peak feed forward compressor with channel linking;
#X obj 30 4932 dyn.comp_peak~;
#X text 200 4932 mono dynamic range peak feed forward compressor;
#X obj 30 4959 dyn.comp_up2~;
#X text 200 4959 stereo upward compressor with channel linking;
#X obj 30 4986 dyn.comp_up~;
#X text 200 4986 mono upward compressor;
#X obj 30 5013 dyn.comp~;
#X text 200 5013 mono dynamic range compressors;
#X obj 30 5040 dyn.expand2~;
#X text 200 5040 stereo dynamic range expander with channel linking;
#X obj 30 5067 dyn.expand~;
#X text 200 5067 mono dynamic range expander;
#X obj 30 5094 dyn.gate2~;
#X text 200 5094 stereo signal gate;
#X obj 30 5121 dyn.gate~;
#X text 200 5121 mono signal gate;
#X obj 30 5148 dyn.limit2~;
#X text 200 5148 stereo 1176LN Peak Limiter;
#X obj 30 5175 dyn.limit~;
#X text 200 5175 mono 1176LN Peak Limiter;
#X obj 30 5202 dyn.softclip~;
#X text 200 5202 soft signal clip;
#X obj 20 5229 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 5270 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5281 env.adsr~;
#X text 200 5281 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 5308 env.ar~;
#X text 200 5308 Attack/Release envelope generator;
#X obj 30 5335 env.asr2~;
#X text 200 5335 stereo Attack/Sustain/Release envelope generator;
#X obj 30 5362 env.asr~;
#X text 200 5362 Attack/Sustain/Release envelope generator;
#X obj 30 5389 env.concat;
#X text 200 5389 Envelope concatenation;
#X obj 30 5416 env.follow~;
#X text 200 5416 Envelope follower with independent attack and release
times;
#X obj 30 5443 env.mix;
#X text 200 5443 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5483 env.smooth~;
#X text 200 5483 An envelope with an exponential attack and release;
#X obj 30 5510 env.tscale;
#X text 200 5510 Envelope time-scale;
#X obj 30 5537 env.tshift;
#X text 200 5537 Envelope time-shift (horizontal);
#X obj 30 5564 env.vscale;
#X text 200 5564 Envelope value-scale;
#X obj 30 5591 env2array;
#X text 200 5591 Renders envelope to specified array;
#X obj 30 5618 env2vline;
#X text 200 5618 Converts envelope to bunch of vline messages;
#X obj 30 5645 envelope;
#X text 200 5645 Envelope data type;
#X obj 30 5672 vline2env;
#X text 200 5672 Converts vline messages to env;
#X obj 20 5699 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5740 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5751 expand_env;
#X text 200 5751 Substitute environment variables in data stream;
#X obj 30 5778 flow.append;
#X text 200 5778 append message to flow stream;
#X obj 30 5805 flow.change;
#X text 200 5805 rejects redundant input values;
#X obj 30 5832 flow.count;
#X text 200 5832 control flow event counter;
#X obj 30 5859 flow.delay;
#X text 200 5859 enhanced version on vanilla delay object;
#X obj 30 5886 flow.demultiplex;
#X text 200 5886 control flow demultiplexer;
#X obj 30 5913 flow.demultiplex2~;
#X text 200 5913 audio stream stereo demultiplexer;
#X obj 30 5940 flow.demultiplex~;
#X text 200 5940 audio stream demultiplexer;
#X obj 30 5967 flow.dollar;
#X text 200 5967 data flow dollar converter;
#X obj 30 5994 flow.dup;
#X text 200 5994 message duplicator;
#X obj 30 6021 flow.float;
#X text 200 6021 pass floats;
#X obj 30 6048 flow.gate;
#X text 200 6048 control flow gate. [spigot] analog;
#X obj 30 6075 flow.greater;
#X text 200 6075 numeric stream router;
#X obj 30 6102 flow.greater_eq;
#X text 200 6102 numeric stream router;
#X obj 30 6129 flow.group;
#X text 200 6129 group input atoms in list of specified size;
#X obj 30 6156 flow.interval;
#X text 200 6156 measure time between flow events;
#X obj 30 6183 flow.less;
#X text 200 6183 numeric stream router \, like many [moses];
#X obj 30 6210 flow.less_eq;
#X text 200 6210 numeric stream router \, like many [moses];
#X obj 30 6237 flow.list2many;
#X text 200 6237 routes list element with message selectors;
#X obj 30 6264 flow.match;
#X text 200 6264 route data flow by regexp match;
#X obj 30 6291 flow.mem;
#X text 200 6291 store data flow in memory;
#X obj 30 6318 flow.multiplex;
#X text 200 6318 control flow multiplexer;
#X obj 30 6345 flow.multiplex2~;
#X text 200 6345 audio stream stereo multiplexer;
#X obj 30 6372 flow.multiplex~;
#X text 200 6372 audio stream multiplexer;
#X obj 30 6399 flow.once;
#X text 200 6399 one message pass thru;
#X obj 30 6426 flow.pack;
#X text 200 6426 flow pack;
#X obj 30 6453 flow.pass;
#X text 200 6453 pass specified values;
#X obj 30 6480 flow.pass_if;
#X text 200 6480 pass values that accepted by predicate object;
#X obj 30 6507 flow.pipe;
#X text 200 6507 enhanced version on vanilla pipe object;
#X obj 30 6534 flow.prepend;
#X text 200 6534 prepend message before received one;
#X obj 30 6561 flow.queue;
#X text 200 6561 multi-channel control flow sync queue (or FIFO);
#X obj 30 6588 flow.record;
#X text 200 6588 flow stream recorder/player;
#X obj 30 6615 flow.reject;
#X text 200 6615 reject specified values;
#X obj 30 6642 flow.reject_if;
#X text 200 6642 reject values by predicate;
#X obj 30 6669 flow.ring;
#X text 200 6669 dataflow ring buffer;
#X obj 30 6696 flow.route;
#X text 200 6696 advanced message router;
#X obj 30 6723 flow.select;
#X text 200 6723 vanilla flow on steroids;
#X obj 30 6750 flow.seqdelay;
#X text 200 6750 sequential delay/router for input flow;
#X obj 30 6777 flow.space;
#X text 200 6777 space in time messages received at the same logical
time;
#X obj 30 6804 flow.speedlim;
#X text 200 6804 control stream speed limiter;
#X obj 30 6831 flow.split;
#X text 200 6831 split data flow by external side-chain predicate;
#X obj 30 6858 flow.stack;
#X text 200 6858 any message stack;
#X obj 30 6885 flow.sync;
#X text 200 6885 bus with only hot inlets;
#X obj 30 6912 flow.sync_pack;
#X text 200 6912 flow pack with all hot inlets;
#X obj 30 6939 flow.tee~;
#X text 200 6939 separate audio and control streams;
#X obj 30 6966 replace;
#X text 200 6966 Replace atoms in data stream;
#X obj 30 6993 route.any;
#X text 200 6993 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 7020 route.bang;
#X text 200 7020 separate bang messages from other types;
#X obj 30 7047 route.cycle;
#X text 200 7047 cyclic message router;
#X obj 30 7074 route.data;
#X text 200 7074 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 7101 route.float;
#X text 200 7101 separate float messages from other types;
#X obj 30 7128 route.list;
#X text 200 7128 separate list messages from other types;
#X obj 30 7155 route.prop;
#X text 200 7155 separate property messages from other types;
#X obj 30 7182 route.random;
#X text 200 7182 routes input flow to random outlet;
#X obj 30 7209 route.symbol;
#X text 200 7209 separate symbol messages from other types;
#X obj 20 7236 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 7277 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7288 flt.a-weight;
#X text 200 7288 convert frequency to A-weight value;
#X obj 30 7315 flt.biquad~;
#X text 200 7315 second order IIR filter.;
#X obj 30 7342 flt.bpf12~;
#X text 200 7342 Two pole band-pass butterworth filter;
#X obj 30 7369 flt.bpf24~;
#X text 200 7369 Four pole band-pass butterworth filter;
#X obj 30 7396 flt.bpf36e~;
#X text 200 7396 elliptic band-pass filter with -36db rolloff;
#X obj 30 7423 flt.bpf72e~;
#X text 200 7423 elliptic band-pass filter with -72db rolloff;
#X obj 30 7450 flt.c_apf;
#X text 200 7450 Allpass filter coefficient calculator for biquad;
#X obj 30 7477 flt.c_bpf~;
#X text 200 7477 BPF coefficient calculator for biquad filter;
#X obj 30 7504 flt.c_highshelf~;
#X text 200 7504 Highshelf filter coefficient calculator for biquad;
#X obj 30 7531 flt.c_hpf;
#X text 200 7531 HPF coefficient calculator for biquad filter;
#X obj 30 7558 flt.c_hpf~;
#X text 200 7558 HPF coefficient calculator for biquad filter;
#X obj 30 7585 flt.c_lowshelf~;
#X text 200 7585 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7612 flt.c_lpf;
#X text 200 7612 LPF coefficient calculator for biquad filter;
#X obj 30 7639 flt.c_lpf~;
#X text 200 7639 LPF coefficient calculator for biquad filter;
#X obj 30 7666 flt.c_notch;
#X text 200 7666 Notch filter coefficient calculator for biquad;
#X obj 30 7693 flt.c_notch~;
#X text 200 7693 Band-reject coefficient calculator for biquad filter;
#X obj 30 7720 flt.c_peak~;
#X text 200 7720 Peaking equalizer calculator for biquad;
#X obj 30 7747 flt.c_pole;
#X text 200 7747 One-pole coefficient calculator for biquad filter;
#X obj 30 7774 flt.dcblock2~;
#X text 200 7774 stereo DC blocker;
#X obj 30 7801 flt.dcblock~;
#X text 200 7801 mono DC blocker;
#X obj 30 7828 flt.eq10~;
#X text 200 7828 graphic 10 band equalizer;
#X obj 30 7855 flt.eq_peak_cq~;
#X text 200 7855 constant-Q second order peaking equalizer section;
#X obj 30 7882 flt.eq_peak~;
#X text 200 7882 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7937 flt.fb_comb~;
#X text 200 7937 feedback comb filter;
#X obj 30 7964 flt.fbank5x1~;
#X text 200 7964 5 band one octave butterworth filterbank;
#X obj 30 7991 flt.ff_comb~;
#X text 200 7991 feed forward comb filter;
#X obj 30 8018 flt.freqz;
#X text 200 8018 compute the frequency response of a digital filter;
#X obj 30 8045 flt.freqz~;
#X text 200 8045 compute the frequency response of a digital filter;
#X obj 30 8072 flt.highshelf~;
#X text 200 8072 gain boost|cut above some frequency;
#X obj 30 8099 flt.hpf12~;
#X text 200 8099 High-pass second order Butterworth filter;
#X obj 30 8126 flt.hpf24~;
#X text 200 8126 High-pass fourth order Butterworth filter;
#X obj 30 8153 flt.lowshelf~;
#X text 200 8153 gain boost|cut below some frequency;
#X obj 30 8180 flt.lpf12~;
#X text 200 8180 Low-pass second order Butterworth filter;
#X obj 30 8207 flt.lpf24~;
#X text 200 8207 Low-pass fourth order Butterworth filter;
#X obj 30 8234 flt.median;
#X text 200 8234 Median control flow filter;
#X obj 30 8261 flt.moog_vcf~;
#X text 200 8261 Moog Voltage Controlled Filter;
#X obj 30 8288 flt.notch~;
#X text 200 8288 band-rejection filter;
#X obj 30 8315 flt.resonbp~;
#X text 200 8315 Simple resonant bandpass filter;
#X obj 30 8342 flt.resonhp~;
#X text 200 8342 Simple resonant highpass filter;
#X obj 30 8369 flt.resonlp~;
#X text 200 8369 Simple resonant lowpass filter;
#X obj 30 8396 flt.speaker~;
#X text 200 8396 speaker emulation band-pass filter;
#X obj 20 8423 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 8464 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8475 fx.bitdown~;
#X text 200 8475 bit downer and downsampler effect;
#X obj 30 8502 fx.chorus~;
#X text 200 8502 Chorus effect;
#X obj 30 8529 fx.dattorro~;
#X text 200 8529 dattorro reverb;
#X obj 30 8556 fx.delay~;
#X text 200 8556 smooth delay with a feedback control;
#X obj 30 8583 fx.distortion1~;
#X text 200 8583 distortion #1 from Guitarix effects set;
#X obj 30 8610 fx.distortion2~;
#X text 200 8610 distortion #2 from Guitarix effects set;
#X obj 30 8637 fx.distortion3~;
#X text 200 8637 simple distortion #3 from Guitarix effects set;
#X obj 30 8664 fx.distortion~;
#X text 200 8664 cubic nonlinearity distortion;
#X obj 30 8691 fx.drive~;
#X text 200 8691 Guitarix drive effect;
#X obj 30 8718 fx.drone_box~;
#X text 200 8718 mono sympathetic resonance generator;
#X obj 30 8745 fx.echo2~;
#X text 200 8745 stereo echo effect;
#X obj 30 8772 fx.echo~;
#X text 200 8772 enhanced echo effect;
#X obj 30 8799 fx.flanger~;
#X text 200 8799 mono flanging effect;
#X obj 30 8826 fx.freeverb2~;
#X text 200 8826 freeverb2 - stereo version of freeverb;
#X obj 30 8853 fx.freeverb~;
#X text 200 8853 freeverb - common used open-source reverb;
#X obj 30 8880 fx.freqshift~;
#X text 200 8880 frequency shifter or single-sideband ring modulation;
#X obj 30 8907 fx.granulator~;
#X text 200 8907 simple input stream granulator;
#X obj 30 8934 fx.greyhole~;
#X text 200 8934 A complex echo-like effect;
#X obj 30 8961 fx.infrev~;
#X text 200 8961 port of Infinity VST plugin from airwindows;
#X obj 30 8988 fx.jcrev~;
#X text 200 8988 Schroeder quad reverberator from 1972;
#X obj 30 9015 fx.looper~;
#X text 200 9015 One track looper;
#X obj 30 9042 fx.overdrive~;
#X text 200 9042 overdrive effect;
#X obj 30 9069 fx.pitchshift_s~;
#X text 200 9069 signal version of fx.pitchshift~;
#X obj 30 9096 fx.pitchshift~;
#X text 200 9096 simple pitch shifter based on 2 delay lines;
#X obj 30 9123 fx.rb_pitchshift~;
#X text 200 9123 rubber band pitchshift;
#X obj 30 9150 fx.recho~;
#X text 200 9150 reversed echo effect;
#X obj 30 9177 fx.ringmod~;
#X text 200 9177 ring modulator effect;
#X obj 30 9204 fx.room~;
#X text 200 9204 Gardners room emulation algorithms;
#X obj 30 9231 fx.satrev~;
#X text 200 9231 Schroeder reverberator from 1971;
#X obj 30 9258 fx.scramble~;
#X text 200 9258 scramble delayed sound fragments;
#X obj 30 9285 fx.shimmer~;
#X text 200 9285 shimmer reverb effect effect;
#X obj 30 9312 fx.stutter~;
#X text 200 9312 stutter effect;
#X obj 30 9339 fx.tapiir~;
#X text 200 9339 multi-tap delay;
#X obj 30 9366 fx.tremolo~;
#X text 200 9366 tremolo effect from guitarix project;
#X obj 30 9393 fx.vocoder~;
#X text 200 9393 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 9433 fx.wahwah~;
#X text 200 9433 digitized CryBaby wah pedal;
#X obj 30 9460 fx.zita_rev1~;
#X text 200 9460 Zita stereo reverb;
#X obj 20 9487 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 9528 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9539 global.dict;
#X text 200 9539 global named dict object;
#X obj 30 9566 global.float;
#X text 200 9566 global named float object;
#X obj 30 9593 global.int;
#X text 200 9593 global named integer object;
#X obj 30 9620 global.list;
#X text 200 9620 global named list object;
#X obj 30 9647 global.mlist;
#X text 200 9647 global named mlist object;
#X obj 30 9674 global.set;
#X text 200 9674 global named set object;
#X obj 20 9701 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 9742 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9753 hw.apple_smc;
#X text 200 9753 query the system management control in Apples;
#X obj 30 9780 hw.apple_sms;
#X text 200 9780 query the sudden motion sensor in Apples;
#X obj 30 9807 hw.arduino;
#X text 200 9807 Arduino device;
#X obj 30 9834 hw.cpu_temp;
#X text 200 9834 get CPU temperature;
#X obj 30 9861 hw.display;
#X text 200 9861 get/set display properties;
#X obj 30 9888 hw.gamepad;
#X text 200 9888 gamepad controller;
#X obj 30 9915 hw.kbd_light;
#X text 200 9915 Get/set keyboard light on some devices;
#X obj 30 9942 hw.motu.avb;
#X text 200 9942 controls Motu AVB devices over http requests;
#X obj 30 9969 hw.printer;
#X text 200 9969 Basic printing support;
#X obj 30 9996 hw.serial;
#X text 200 9996 serial port device;
#X obj 20 10023 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 10064 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10078 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 10075 faust realtime compilation;
#X obj 30 10100 lang.lua;
#X text 200 10100 Lua JIT language bindings;
#X obj 30 10130 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 10127 faust compiled ui object;
#X obj 20 10152 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933
0;
#X obj 20 10193 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10204 lfo.+pulse~;
#X text 200 10204 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 10231 lfo.+saw~;
#X text 200 10231 Positive unit-amplitude low frequency saw wave;
#X obj 30 10258 lfo.+square~;
#X text 200 10258 Positive low frequency square wave;
#X obj 30 10285 lfo.+tri~;
#X text 200 10285 Positive unit-amplitude low frequency triangle wave;
#X obj 30 10312 lfo.impulse~;
#X text 200 10312 Unit-amplitude low-frequency impulse train;
#X obj 30 10339 lfo.mosc~;
#X text 200 10339 multi-oscillator with various waveforms;
#X obj 30 10366 lfo.pulse~;
#X text 200 10366 Full-range unit-amplitude low frequency pulse train;
#X obj 30 10393 lfo.saw~;
#X text 200 10393 Full-range unit-amplitude low frequency saw;
#X obj 30 10420 lfo.square~;
#X text 200 10420 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 10447 lfo.tri~;
#X text 200 10447 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 10474 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 10515 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10526 list.^at;
#X text 200 10526 on input index(es) outputs list element(s);
#X obj 30 10553 list.^contains;
#X text 200 10553 checks if input atom is found in the list;
#X obj 30 10580 list.^search;
#X text 200 10580 on input atom returns it index in list;
#X obj 30 10607 list.all_of;
#X text 200 10607 checks if all list atoms accepted by predicate;
#X obj 30 10634 list.any_of;
#X text 200 10634 checks if at least one list element is accepted by
predicate;
#X obj 30 10661 list.append;
#X text 200 10661 append atom or list to the end of input list;
#X obj 30 10688 list.apply_to;
#X text 200 10688 modifies list value at specified position \, filtering
it via external object;
#X obj 30 10728 list.at;
#X text 200 10728 outputs list element(s) at specified index(es);
#X obj 30 10755 list.choice;
#X text 200 10755 outputs random element from list;
#X obj 30 10782 list.contains;
#X text 200 10782 checks if input list contains specified atoms;
#X obj 30 10809 list.convolve;
#X text 200 10809 convolution for lists;
#X obj 30 10836 list.correlate;
#X text 200 10836 list cross-correlation;
#X obj 30 10863 list.count;
#X text 200 10863 output the number of items that equal to specified
value;
#X obj 30 10890 list.count_if;
#X text 200 10890 output the number of items that satisfy to external
predicate;
#X obj 30 10917 list.delta;
#X text 200 10917 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10957 list.distribution;
#X text 200 10957 list value distribution;
#X obj 30 10984 list.do;
#X text 200 10984 iterate and modify list contents via side-chain;
#X obj 30 11011 list.each;
#X text 200 11011 maps each list value via external side-chain;
#X obj 30 11038 list.enumerate;
#X text 200 11038 enumerates input list;
#X obj 30 11065 list.equal;
#X text 200 11065 checks if given lists are equal;
#X obj 30 11092 list.first;
#X text 200 11092 returns first list element;
#X obj 30 11119 list.gen;
#X text 200 11119 generates list of specified length via external generator;
#X obj 30 11146 list.histogram;
#X text 200 11146 outputs distribution histogram;
#X obj 30 11173 list.insert;
#X text 200 11173 insert atom or list to the specified position of
input list;
#X obj 30 11200 list.integrator;
#X text 200 11200 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 11240 list.last;
#X text 200 11240 output last list element;
#X obj 30 11267 list.length;
#X text 200 11267 output the number of atoms in the list;
#X obj 30 11294 list.map;
#X text 200 11294 map list values by specified dictionary;
#X obj 30 11321 list.max;
#X text 200 11321 output largest element in the list;
#X obj 30 11348 list.mean;
#X text 200 11348 calculates average of list of floats;
#X obj 30 11375 list.min;
#X text 200 11375 returns smallest element in the list;
#X obj 30 11402 list.none_of;
#X text 200 11402 checks if none of list atoms is accepted by predicate;
#X obj 30 11429 list.normalize;
#X text 200 11429 normalizes float list values to get their sum = 1.0;
#X obj 30 11456 list.pass;
#X text 200 11456 leave in list only specified elements;
#X obj 30 11483 list.pass_if;
#X text 200 11483 leave only elements accepted by predicate;
#X obj 30 11510 list.prepend;
#X text 200 11510 prepend atom or list before input list;
#X obj 30 11537 list.product;
#X text 200 11537 calculates product of floats in list;
#X obj 30 11564 list.range;
#X text 200 11564 output list smallest and largest value;
#X obj 30 11591 list.reduce;
#X text 200 11591 apply function of two arguments cumulatively to the
list;
#X obj 30 11618 list.reject;
#X text 200 11618 remove specified element from list;
#X obj 30 11645 list.remove;
#X text 200 11645 remove list element(s) at specified positions;
#X obj 30 11672 list.remove_if;
#X text 200 11672 remove elements by predicate;
#X obj 30 11699 list.repack;
#X text 200 11699 repack list to specified size;
#X obj 30 11726 list.repeat;
#X text 200 11726 output new list by repeating input list specified
times;
#X obj 30 11753 list.resample;
#X text 200 11753 resample list with specified ratio;
#X obj 30 11780 list.resize;
#X text 200 11780 changes list size;
#X obj 30 11807 list.reverse;
#X text 200 11807 reverses the order of the elements in the list;
#X obj 30 11834 list.rldecode;
#X text 200 11834 Run-length list decoder (RLE);
#X obj 30 11861 list.rlencode;
#X text 200 11861 RLE (run-length encoding) for lists;
#X obj 30 11888 list.rotate;
#X text 200 11888 rotates list;
#X obj 30 11915 list.route;
#X text 200 11915 acts like [route] but for lists;
#X obj 30 11942 list.rundiff;
#X text 200 11942 running difference;
#X obj 30 11969 list.runsum;
#X text 200 11969 running sum;
#X obj 30 11996 list.search;
#X text 200 11996 search specified items in input list;
#X obj 30 12023 list.separate;
#X text 200 12023 sends list elements one by one separately;
#X obj 30 12050 list.seq;
#X text 200 12050 numeric sequence list generator;
#X obj 30 12077 list.set;
#X text 200 12077 set list value at specified position;
#X obj 30 12104 list.shift;
#X text 200 12104 shifts the contents of the list with linear interpolation;
#X obj 30 12131 list.shuffle;
#X text 200 12131 randomly rearranges elements in list;
#X obj 30 12158 list.slice;
#X text 200 12158 extract sublist;
#X obj 30 12185 list.sort;
#X text 200 12185 sorts list values by ascending order;
#X obj 30 12212 list.sort_with;
#X text 200 12212 sort list with user defined side-chain;
#X obj 30 12239 list.split;
#X text 200 12239 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 12279 list.stretch;
#X text 200 12279 stretches list - changes its size with linear interpolation;
#X obj 30 12306 list.sum;
#X text 200 12306 calculates sum of floats in list;
#X obj 30 12333 list.unique;
#X text 200 12333 removes duplicates from input list;
#X obj 30 12360 list.unpack;
#X text 200 12360 unpack list elements to separate outlets;
#X obj 30 12387 list.unzip;
#X text 200 12387 splits list to N lists \, each to separate output;
#X obj 30 12414 list.walk;
#X text 200 12414 Walks thru the list;
#X obj 30 12441 list.zip;
#X text 200 12441 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 12496 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 12537 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12548 live.capture~;
#X text 200 12548 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 12588 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 12629 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12640 local.dict;
#X text 200 12640 local named dict object;
#X obj 30 12667 local.float;
#X text 200 12667 canvas-scoped named float variable;
#X obj 30 12694 local.int;
#X text 200 12694 canvas-scoped named integer variable;
#X obj 30 12721 local.list;
#X text 200 12721 local named list object;
#X obj 30 12748 local.mlist;
#X text 200 12748 local named mlist object;
#X obj 30 12775 local.set;
#X text 200 12775 local named set object;
#X obj 20 12802 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 12843 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12854 math.abs;
#X text 200 12854 absolute value function;
#X obj 30 12881 math.abs~;
#X text 200 12881 absolute value function for signals;
#X obj 30 12908 math.acos;
#X text 200 12908 arc cosine function;
#X obj 30 12935 math.acosh;
#X text 200 12935 inverse hyperbolic cosine function;
#X obj 30 12962 math.acosh~;
#X text 200 12962 hyperbolic arc cosine for signals;
#X obj 30 12989 math.acos~;
#X text 200 12989 arc cosine function for signals;
#X obj 30 13016 math.and;
#X text 200 13016 operation AND for multiple arguments;
#X obj 30 13043 math.approx;
#X text 200 13043 check if input value approximately equal to pattern;
#X obj 30 13070 math.asin;
#X text 200 13070 arc sine function;
#X obj 30 13097 math.asinh;
#X text 200 13097 inverse hyperbolic sine function;
#X obj 30 13124 math.asinh~;
#X text 200 13124 hyperbolic arc sine for signals;
#X obj 30 13151 math.asin~;
#X text 200 13151 arc sine for signals;
#X obj 30 13178 math.atan;
#X text 200 13178 arc tangent function;
#X obj 30 13205 math.atanh;
#X text 200 13205 inverse hyperbolic tangent function;
#X obj 30 13232 math.atanh~;
#X text 200 13232 hyperbolic arc tangent for signals;
#X obj 30 13259 math.atan~;
#X text 200 13259 arc tangent for signals;
#X obj 30 13286 math.binomial;
#X text 200 13286 binomial coefficient calculator;
#X obj 30 13313 math.cabs~;
#X text 200 13313 magnitude of a complex signals;
#X obj 30 13340 math.carg~;
#X text 200 13340 phase angle of a complex signals;
#X obj 30 13367 math.cbrt;
#X text 200 13367 cube root function;
#X obj 30 13394 math.cbrt~;
#X text 200 13394 cube root function for signals;
#X obj 30 13421 math.cdiv~;
#X text 200 13421 division of complex signals;
#X obj 30 13448 math.ceil;
#X text 200 13448 round to smallest integral value not less than input
value;
#X obj 30 13475 math.ceil~;
#X text 200 13475 round to smallest integral value not less than input
value;
#X obj 30 13502 math.cexp~;
#X text 200 13502 exponent of a complex signals;
#X obj 30 13529 math.cmul~;
#X text 200 13529 multiplication of complex signals;
#X obj 30 13556 math.cos;
#X text 200 13556 cosine function;
#X obj 30 13583 math.cosh;
#X text 200 13583 hyperbolic cosine function;
#X obj 30 13610 math.cosh~;
#X text 200 13610 hyperbolic cosine for signals;
#X obj 30 13637 math.cos~;
#X text 200 13637 cosine function;
#X obj 30 13664 math.div;
#X text 200 13664 division (on lists too);
#X obj 30 13691 math.e;
#X text 200 13691 mathematical constant \, base of the natural logarithm;
#X obj 30 13718 math.erf;
#X text 200 13718 error function;
#X obj 30 13745 math.erf~;
#X text 200 13745 error function for signals;
#X obj 30 13772 math.exp;
#X text 200 13772 exponential functions;
#X obj 30 13799 math.exp2;
#X text 200 13799 exponential functions;
#X obj 30 13826 math.exp2~;
#X text 200 13826 base-2 exponential for signal;
#X obj 30 13853 math.expr;
#X text 200 13853 dynamic [expr];
#X obj 30 13880 math.exp~;
#X text 200 13880 base-e exponential for signal;
#X obj 30 13907 math.floor;
#X text 200 13907 round to largest integral value not greater than
x;
#X obj 30 13934 math.floor~;
#X text 200 13934 round to largest integral value not greater than
x;
#X obj 30 13961 math.gamma;
#X text 200 13961 gamma function;
#X obj 30 13988 math.gamma~;
#X text 200 13988 gamma function for floating point signals;
#X obj 30 14015 math.gcd;
#X text 200 14015 calculate greatest common divisor;
#X obj 30 14042 math.inf;
#X text 200 14042 infinity value that cannot be represented accurately;
#X obj 30 14069 math.inf~;
#X text 200 14069 inifinity signal generator;
#X obj 30 14096 math.lcm;
#X text 200 14096 calculate least common multiple;
#X obj 30 14123 math.lgamma;
#X text 200 14123 natural logarithm of the absolute value of the gamma
function;
#X obj 30 14150 math.lgamma~;
#X text 200 14150 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 14190 math.log;
#X text 200 14190 natural logarithm;
#X obj 30 14217 math.log10;
#X text 200 14217 logarithm functions;
#X obj 30 14244 math.log10~;
#X text 200 14244 natural logarithm;
#X obj 30 14271 math.log2;
#X text 200 14271 logarithm functions;
#X obj 30 14298 math.log2~;
#X text 200 14298 base-2 logarithm;
#X obj 30 14325 math.log~;
#X text 200 14325 natural logarithm;
#X obj 30 14352 math.mul;
#X text 200 14352 multiplication (on lists too);
#X obj 30 14379 math.nan;
#X text 200 14379 Not a Number \, unrepresentable value;
#X obj 30 14406 math.nan~;
#X text 200 14406 signal NaN;
#X obj 30 14433 math.neg;
#X text 200 14433 negate function;
#X obj 30 14460 math.or;
#X text 200 14460 operation OR for multiple arguments;
#X obj 30 14487 math.pi;
#X text 200 14487 mathematical constant;
#X obj 30 14514 math.pi~;
#X text 200 14514 mathematical constant;
#X obj 30 14541 math.polyeval;
#X text 200 14541 evaluates the polynomial described by the coefficients
list;
#X obj 30 14568 math.reciprocal;
#X text 200 14568 calculate reciprocal number;
#X obj 30 14595 math.reciprocal~;
#X text 200 14595 calculate reciprocal number for signals;
#X obj 30 14622 math.round;
#X text 200 14622 round to integral value \, regardless of rounding
direction;
#X obj 30 14649 math.round~;
#X text 200 14649 signal round;
#X obj 30 14676 math.sign;
#X text 200 14676 sign function;
#X obj 30 14703 math.sin;
#X text 200 14703 sine function;
#X obj 30 14730 math.sinh;
#X text 200 14730 hyperbolic sine function;
#X obj 30 14757 math.sinh~;
#X text 200 14757 hyperbolic sine for signals;
#X obj 30 14784 math.sin~;
#X text 200 14784 sine function;
#X obj 30 14811 math.sqrt;
#X text 200 14811 square root function;
#X obj 30 14838 math.sqrt~;
#X text 200 14838 square root for signal;
#X obj 30 14865 math.squared;
#X text 200 14865 value square;
#X obj 30 14892 math.squared~;
#X text 200 14892 signal value square;
#X obj 30 14919 math.sync_add;
#X text 200 14919 sync addition;
#X obj 30 14946 math.sync_and;
#X text 200 14946 sync logical AND operation;
#X obj 30 14973 math.sync_div;
#X text 200 14973 sync division;
#X obj 30 15000 math.sync_eq;
#X text 200 15000 sync equal numbers check;
#X obj 30 15027 math.sync_ge;
#X text 200 15027 sync greater equal numbers compare;
#X obj 30 15054 math.sync_gt;
#X text 200 15054 sync greater then numbers compare;
#X obj 30 15081 math.sync_le;
#X text 200 15081 sync less equal numbers compare;
#X obj 30 15108 math.sync_lshift;
#X text 200 15108 sync signed bit left shift;
#X obj 30 15135 math.sync_lt;
#X text 200 15135 sync less then numbers compare;
#X obj 30 15162 math.sync_mod;
#X text 200 15162 sync remainder of modulo division (float or integer);
#X obj 30 15189 math.sync_mul;
#X text 200 15189 sync multiplication;
#X obj 30 15216 math.sync_ne;
#X text 200 15216 sync numbers for not equality;
#X obj 30 15243 math.sync_or;
#X text 200 15243 sync logical OR operation;
#X obj 30 15270 math.sync_rshift;
#X text 200 15270 sync signed bit right shift;
#X obj 30 15297 math.sync_sub;
#X text 200 15297 sync subtraction;
#X obj 30 15324 math.sync_xor;
#X text 200 15324 sync logical XOR operation;
#X obj 30 15351 math.tan;
#X text 200 15351 tangent function;
#X obj 30 15378 math.tanh;
#X text 200 15378 hyperbolic tangent function;
#X obj 30 15405 math.tanh~;
#X text 200 15405 hyperbolic tangent for signals;
#X obj 30 15432 math.tan~;
#X text 200 15432 tangent function;
#X obj 30 15459 math.trunc;
#X text 200 15459 truncate to integer value;
#X obj 30 15486 math.trunc~;
#X text 200 15486 truncate to integer value;
#X obj 20 15513 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 15554 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15565 midi.arp;
#X text 200 15565 MIDI arpeggiator;
#X obj 30 15592 midi.cc;
#X text 200 15592 enhanced version of vanilla ctlin;
#X obj 30 15619 midi.clock;
#X text 200 15619 midi clock toolbox;
#X obj 30 15646 midi.ctl2str;
#X text 200 15646 convert Standard MIDI Controllers number to name;
#X obj 30 15673 midi.event2ctl;
#X text 200 15673 convert MidiEvent message to controller channel/value
pair;
#X obj 30 15700 midi.event2note;
#X text 200 15700 convert MidiEvent message to midi note/velocity pair;
#X obj 30 15727 midi.event2prg;
#X text 200 15727 convert MidiEvent message to midi program change
value;
#X obj 30 15754 midi.file;
#X text 200 15754 standard midi file SMF reader and writer;
#X obj 30 15781 midi.kbd;
#X text 200 15781 computer keyboard midi;
#X obj 30 15808 midi.key2str;
#X text 200 15808 convert key number to SPN name according to tonality;
#X obj 30 15835 midi.modus;
#X text 200 15835 snap/skip midi pitches according modus;
#X obj 30 15862 midi.note.pass;
#X text 200 15862 midi note pass by expression;
#X obj 30 15889 midi.oct;
#X text 200 15889 midi octave transpose;
#X obj 30 15916 midi.prg2str;
#X text 200 15916 convert GM Instrument number to name (string or symbol);
#X obj 30 15943 midi.split;
#X text 200 15943 midi note splitter;
#X obj 30 15970 midi.sustain;
#X text 200 15970 sustain pedal emulation;
#X obj 30 15997 midi.sysex;
#X text 200 15997 sysex input messages as list;
#X obj 30 16024 midi.track;
#X text 200 16024 extract track from MidiFile;
#X obj 30 16051 midi.tuning;
#X text 200 16051 apply tuning to midi messages;
#X obj 30 16078 midi.vramp;
#X text 200 16078 apply crescendo or diminuendo for midi message flow;
#X obj 30 16105 midi.vrand;
#X text 200 16105 midi velocity randomizer;
#X obj 20 16132 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 16173 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16184 click~;
#X text 200 16184 Output single impulse on bang;
#X obj 30 16211 fluid~;
#X text 200 16211 FluidSynth SoundFont 2 player;
#X obj 30 16238 modplug~;
#X text 200 16238 MOD file player (using libmodplug);
#X obj 30 16265 qrcode;
#X text 200 16265 QR code generator;
#X obj 30 16292 risset.gliss;
#X text 200 16292 Sheppard/Risset glissando calculator;
#X obj 30 16319 sfizz~;
#X text 200 16319 SFZ format sample player;
#X obj 30 16346 speech.flite;
#X text 200 16346 render speech to array;
#X obj 30 16373 speech.flite~;
#X text 200 16373 render speech to array;
#X obj 30 16400 speech.rhvoice~;
#X text 200 16400 RHVoice text to speech synthesis;
#X obj 20 16427 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 16468 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16479 loadexpr;
#X text 200 16479 send message when patch loads;
#X obj 30 16506 msg;
#X text 200 16506 message constructor;
#X obj 30 16533 msg.after;
#X text 200 16533 send specified message after incoming message;
#X obj 30 16560 msg.onclose;
#X text 200 16560 send message when patch closes;
#X obj 30 16587 msg.onload;
#X text 200 16587 send message when patch loads;
#X obj 30 16614 msg.pack;
#X text 200 16614 message pack;
#X obj 30 16641 msg.sched;
#X text 200 16641 message scheduler;
#X obj 30 16668 msg.unpack;
#X text 200 16668 message unpack;
#X obj 20 16695 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 16736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16747 rhythm.euclid;
#X text 200 16747 euclid pattern generator;
#X obj 30 16774 rhythm.hexbeat;
#X text 200 16774 hexbeat pattern generator;
#X obj 30 16801 rhythm.lsystem;
#X text 200 16801 L-system pattern generator;
#X obj 20 16828 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 16869 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16880 net.artnet.send;
#X text 200 16880 ArtNet DMX message sender;
#X obj 30 16907 net.freesound;
#X text 200 16907 Freesound API v2 client;
#X obj 30 16934 net.host2ip;
#X text 200 16934 returns IP address by DNS name;
#X obj 30 16961 net.http.client;
#X text 200 16961 HTTP client;
#X obj 30 16988 net.http.send;
#X text 200 16988 HTTP request sender;
#X obj 30 17015 net.mdns;
#X text 200 17015 MDNS service discovery;
#X obj 30 17042 net.mqtt.client;
#X text 200 17042 MQTT client;
#X obj 30 17069 net.osc.receive;
#X text 200 17069 OSC message listener;
#X obj 30 17096 net.osc.send;
#X text 200 17096 OSC message sender;
#X obj 30 17123 net.osc.server;
#X text 200 17123 OSC server control;
#X obj 30 17150 net.ws.client;
#X text 200 17150 Websocket client;
#X obj 30 17177 net.ws.server;
#X text 200 17177 Websocket server;
#X obj 20 17204 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 17245 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17256 noise.baker;
#X text 200 17256 Part of a-chaos library;
#X obj 30 17283 noise.clifford;
#X text 200 17283 clifford attractor;
#X obj 30 17310 noise.collatz;
#X text 200 17310 collatz conjecture output;
#X obj 30 17337 noise.colored~;
#X text 200 17337 colored noise generator with an arbitrary spectral
roll;
#X obj 30 17364 noise.crackle~;
#X text 200 17364 sparse noise generator;
#X obj 30 17391 noise.duffing;
#X text 200 17391 duffing attractor;
#X obj 30 17418 noise.ginger;
#X text 200 17418 Gingerbreadman map chaotic generator;
#X obj 30 17445 noise.henon;
#X text 200 17445 henon attractor;
#X obj 30 17472 noise.henon_heilles;
#X text 200 17472 Hénon–Heiles_system;
#X obj 30 17499 noise.henon_phase;
#X text 200 17499 henon phase Ddagrams;
#X obj 30 17526 noise.henonf;
#X text 200 17526 Henon phase;
#X obj 30 17553 noise.ikeda;
#X text 200 17553 Ikeda attractor;
#X obj 30 17580 noise.lfreq0~;
#X text 200 17580 sampled/held noise (piecewise constant);
#X obj 30 17607 noise.lfreq~;
#X text 200 17607 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 17634 noise.lorenz;
#X text 200 17634 Lorenz chaos;
#X obj 30 17661 noise.lyapunov;
#X text 200 17661 lyapunov random attractor;
#X obj 30 17688 noise.navier_stokes;
#X text 200 17688 navier-stokes diff equations;
#X obj 30 17715 noise.pink~;
#X text 200 17715 Pink noise generator;
#X obj 30 17742 noise.rossler;
#X text 200 17742 Rössler attractor;
#X obj 30 17769 noise.stein;
#X text 200 17769 Stein distribution;
#X obj 30 17796 noise.torus;
#X text 200 17796 torus attractor;
#X obj 30 17823 noise.verhulst;
#X text 200 17823 verhulst distribution;
#X obj 30 17850 noise.white~;
#X text 200 17850 White noise generator;
#X obj 20 17877 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 17918 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17929 osc.blit~;
#X text 200 17929 Bandlimited impulse train oscillator;
#X obj 30 17956 osc.impulse~;
#X text 200 17956 Bandlimited impulse train generator;
#X obj 30 17983 osc.pulse~;
#X text 200 17983 Bandlimited pulse train oscillator;
#X obj 30 18010 osc.saw4~;
#X text 200 18010 Bandlimited sawtooth wave;
#X obj 30 18037 osc.saw~;
#X text 200 18037 Alias-free sawtooth wave;
#X obj 30 18064 osc.sinfb~;
#X text 200 18064 Sine oscilator with feedback;
#X obj 30 18091 osc.sin~;
#X text 200 18091 Sine wave oscillator;
#X obj 30 18118 osc.square~;
#X text 200 18118 Bandlimited square wave oscillator;
#X obj 30 18145 osc.tri~;
#X text 200 18145 Bandlimited triangle wave oscillator;
#X obj 20 18172 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 18213 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18224 canvas.active;
#X text 200 18224 checks if canvas window is on top and active;
#X obj 30 18251 canvas.current;
#X text 200 18251 verbose information about current canvas;
#X obj 30 18278 canvas.dir;
#X text 200 18278 current canvas directory and nesting level;
#X obj 30 18305 canvas.name;
#X text 200 18305 current canvas name;
#X obj 30 18332 canvas.path;
#X text 200 18332 current canvas fullpath;
#X obj 30 18359 canvas.top;
#X text 200 18359 verbose information about top-level canvas;
#X obj 30 18386 patch.args;
#X text 200 18386 Get patch or subpatch arguments;
#X obj 30 18413 patch.deps;
#X text 200 18413 patch dependencies: used objects and abstractions;
#X obj 30 18440 patch.tree;
#X text 200 18440 patch tree;
#X obj 20 18467 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 18508 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18519 file.size;
#X text 200 18519 output file size;
#X obj 30 18546 path.basename;
#X text 200 18546 outputs filename portion of pathname;
#X obj 30 18573 path.dirname;
#X text 200 18573 outputs directory portion of pathname;
#X obj 30 18600 path.exists;
#X text 200 18600 checks if given path exists;
#X obj 30 18627 path.file;
#X text 200 18627 file input/output;
#X obj 30 18654 path.is_dir;
#X text 200 18654 check if path is directory;
#X obj 30 18681 path.lsdir;
#X text 200 18681 list directory contents;
#X obj 30 18708 path.monitor;
#X text 200 18708 filesystem event monitor;
#X obj 30 18735 path.normalize;
#X text 200 18735 normalize file paths;
#X obj 30 18762 path.pattern;
#X text 200 18762 pattern filename generator;
#X obj 30 18789 path.search;
#X text 200 18789 file search;
#X obj 30 18816 path.split;
#X text 200 18816 file path split;
#X obj 20 18843 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 18884 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18895 is_any;
#X text 200 18895 checks if input data has *any* type;
#X obj 30 18922 is_bang;
#X text 200 18922 checks if input data has *bang* type;
#X obj 30 18949 is_data;
#X text 200 18949 checks if input data has *data* type;
#X obj 30 18976 is_dict;
#X text 200 18976 checks if input data has *dict* type;
#X obj 30 19003 is_even;
#X text 200 19003 checks if input number is even;
#X obj 30 19030 is_file;
#X text 200 19030 checks if file exists and accessible;
#X obj 30 19057 is_float;
#X text 200 19057 checks if input data has *float* type;
#X obj 30 19084 is_list;
#X text 200 19084 checks if input data has *list* type;
#X obj 30 19111 is_odd;
#X text 200 19111 checks if input number is odd;
#X obj 30 19138 is_pointer;
#X text 200 19138 checks if input data has *pointer* type;
#X obj 30 19165 is_prop;
#X text 200 19165 checks if input message is *property* message;
#X obj 30 19192 is_symbol;
#X text 200 19192 checks if input data has *symbol* type;
#X obj 20 19219 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 19260 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19271 preset.float;
#X text 200 19271 load/store float preset;
#X obj 30 19298 preset.list;
#X text 200 19298 load/store symbol preset;
#X obj 30 19325 preset.storage;
#X text 200 19325 preset storage control;
#X obj 30 19352 preset.symbol;
#X text 200 19352 load/store symbol preset;
#X obj 20 19379 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 19420 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19431 patch.props;
#X text 200 19431 patch properties manager;
#X obj 30 19458 prop;
#X text 200 19458 get/set named property value for subpatch or abstraction;
#X obj 30 19485 prop.declare;
#X text 200 19485 declare named property for subpatch or abstraction;
#X obj 30 19512 prop.get;
#X text 200 19512 get property from connected object/subpatch/abstraction;
#X obj 30 19539 prop.get~;
#X text 200 19539 Property extractor from sound stream;
#X obj 30 19566 prop.join;
#X text 200 19566 join property to main data flow;
#X obj 30 19593 prop.random;
#X text 200 19593 property randomizer;
#X obj 30 19620 prop.set;
#X text 200 19620 set property for connected object/subpatch/abstraction;
#X obj 30 19647 prop.split;
#X text 200 19647 separate properties from dataflow;
#X obj 20 19674 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 19715 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19726 proto.arturia.minilab;
#X text 200 19726 simple SysEx control for Arturia MiniLab;
#X obj 30 19753 proto.feelworld;
#X text 200 19753 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 19780 proto.firmata;
#X text 200 19780 Firmata Arduino protocol support;
#X obj 30 19807 proto.inscore;
#X text 200 19807 INScore message creator;
#X obj 30 19834 proto.ltc.in~;
#X text 200 19834 LTC decoder;
#X obj 30 19861 proto.ltc.out~;
#X text 200 19861 LTC encoder;
#X obj 30 19888 proto.midi;
#X text 200 19888 raw midi encoder/parser;
#X obj 30 19915 proto.midi.casio;
#X text 200 19915 Casio Privia MIDI control;
#X obj 30 19942 proto.midi.cc;
#X text 200 19942 raw midi CC encoder/parser;
#X obj 30 19969 proto.midi.sysex;
#X text 200 19969 raw midi SYSex encoder/parser;
#X obj 30 19996 proto.moppy;
#X text 200 19996 protocol for Musical flOPPY controller;
#X obj 30 20023 proto.morse;
#X text 200 20023 Morse encoder;
#X obj 30 20050 proto.mpv;
#X text 200 20050 mpv video player control;
#X obj 30 20077 proto.sp.alpaca;
#X text 200 20077 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 20104 proto.vlc;
#X text 200 20104 VLC video player control over HTTP;
#X obj 30 20131 proto.whammy;
#X text 200 20131 Control for Digitech Whammy pedal;
#X obj 30 20158 proto.xtouch_ext;
#X text 200 20158 Behringer XTouch Extender XMidi protocol;
#X obj 20 20185 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 20226 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20237 random.atom;
#X text 200 20237 weighted atom generation from specified list;
#X obj 30 20264 random.discrete;
#X text 200 20264 random weighted integers on interval [0 \, n);
#X obj 30 20291 random.float;
#X text 200 20291 uniform random float generator in specified range;
#X obj 30 20318 random.gauss;
#X text 200 20318 gaussian random distribution;
#X obj 30 20345 random.int;
#X text 200 20345 uniform random integer generator in specified range;
#X obj 30 20372 random.linear;
#X text 200 20372 random linear distribution;
#X obj 30 20399 random.pw_const;
#X text 200 20399 piecewise constant random distribution;
#X obj 30 20426 random.pw_lin;
#X text 200 20426 piecewise linear random distribution;
#X obj 20 20453 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 20494 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20505 samp.time~;
#X text 200 20505 sample counter;
#X obj 20 20532 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 20573 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20584 seq.arp;
#X text 200 20584 sequence arpeggiator;
#X obj 30 20611 seq.bangs;
#X text 200 20611 bang sequencer;
#X obj 30 20638 seq.counter;
#X text 200 20638 sequencer counter;
#X obj 30 20665 seq.life;
#X text 200 20665 Conway game of life sequencer;
#X obj 30 20692 seq.matrix;
#X text 200 20692 sequencer control for ui.matrix;
#X obj 30 20719 seq.nbangs;
#X text 200 20719 output specified number of bang with time intervals;
#X obj 30 20746 seq.phasor;
#X text 200 20746 control rate phasor (saw) generator;
#X obj 30 20773 seq.toggles;
#X text 200 20773 toggle sequencer;
#X obj 30 20800 sequencer;
#X text 200 20800 basic sequence player;
#X obj 20 20827 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 20868 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20879 snd.file;
#X text 200 20879 Sound file loader on steroids;
#X obj 30 20906 snd.play~;
#X text 200 20906 Sound file player on steriods;
#X obj 20 20933 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 20974 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20985 hoa.2d.decoder~;
#X text 200 20985 hoa 2d decoder;
#X obj 30 21012 hoa.2d.encoder~;
#X text 200 21012 hoa 2d encoder;
#X obj 30 21039 hoa.2d.exchanger~;
#X text 200 21039 renumbers and normalizes the channels;
#X obj 30 21066 hoa.2d.map~;
#X text 200 21066 a 2d ambisonic multisource spatializer;
#X obj 30 21093 hoa.2d.optim~;
#X text 200 21093 a 2D ambisonic optimization tool;
#X obj 30 21120 hoa.2d.projector~;
#X text 200 21120 a plane waves decomposer from circular harmonics
domain;
#X obj 30 21147 hoa.2d.recomposer~;
#X text 200 21147 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 21187 hoa.2d.rotate~;
#X text 200 21187 a 2D ambisonic sound field rotation;
#X obj 30 21217 ui.link @title [hoa.2d.space] @url
hoa.2d.space-help.pd;
#X text 200 21214 planewaves amp control;
#X obj 30 21239 hoa.2d.wider~;
#X text 200 21239 a 2d fractional ambisonic order simulator;
#X obj 30 21266 hoa.3d.decoder~;
#X text 200 21266 hoa 3d decoder;
#X obj 30 21293 hoa.3d.encoder~;
#X text 200 21293 hoa 3d encoder;
#X obj 30 21320 hoa.3d.exchanger~;
#X text 200 21320 renumbers and normalizes the channels;
#X obj 30 21347 hoa.3d.map~;
#X text 200 21347 a 3d ambisonic multisource spatializer;
#X obj 30 21377 ui.link @title [hoa.3d.meter~] @url
hoa.3d.meter~-help.pd;
#X text 200 21374 multi spherical meter with sound field descriptor;
#X obj 30 21399 hoa.3d.optim~;
#X text 200 21399 a 3D ambisonic optimization tool;
#X obj 30 21429 ui.link @title [hoa.3d.scope~] @url
hoa.3d.scope~-help.pd;
#X text 200 21426 a 3d ambisonic harmonic scope;
#X obj 30 21451 hoa.3d.wider~;
#X text 200 21451 a 3d fractional ambisonic order simulator;
#X obj 30 21478 hoa.@process;
#X text 200 21478 process properties manager for hoa.process~;
#X obj 30 21505 hoa.in;
#X text 200 21505 message inlet for a patcher loaded by hoa.process~;
#X obj 30 21532 hoa.in~;
#X text 200 21532 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 21562 ui.link @title [hoa.map.ui] @url hoa.map.ui-help.pd;
#X text 200 21559 a GUI to spatialize sources on a map;
#X obj 30 21584 hoa.out;
#X text 200 21584 message outlet for a patcher loaded by hoa.process~;
#X obj 30 21611 hoa.out~;
#X text 200 21611 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 21638 hoa.process~;
#X text 200 21638 patcher loader for multichannel processing;
#X obj 30 21668 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 21665 a 2d ambisonic harmonic scope;
#X obj 30 21690 pan.cos~;
#X text 200 21690 two channel equal power sine/cosine panner;
#X obj 30 21717 pan.linsig~;
#X text 200 21717 two channel linear panner with signal control;
#X obj 30 21744 pan.lin~;
#X text 200 21744 two channel linear panner;
#X obj 30 21771 pan.spread~;
#X text 200 21771 spreads input channels across the stereo field;
#X obj 30 21798 pan.sqrt~;
#X text 200 21798 two channel equal power square root panner;
#X obj 30 21825 spat.pan4~;
#X text 200 21825 GMEM SPAT: 4-outputs spatializer;
#X obj 30 21852 spat.pan8~;
#X text 200 21852 GMEM SPAT: 8-outputs spatializer;
#X obj 30 21879 spat.zita6x8~;
#X text 200 21879 spat with 6 inputs sources to 8 channel output;
#X obj 30 21906 spat.zita8~;
#X text 200 21906 8 channel reverb spatializer;
#X obj 20 21933 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 21974 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21985 string;
#X text 200 21985 string constructor;
#X obj 30 22012 string.contains;
#X text 200 22012 checks if string contains specified substring;
#X obj 30 22039 string.ends_with;
#X text 200 22039 checks if string ends with specified substring;
#X obj 30 22066 string.equal;
#X text 200 22066 check strings or symbols for equality;
#X obj 30 22093 string.format;
#X text 200 22093 formats string like printf.;
#X obj 30 22120 string.join;
#X text 200 22120 joins (concatenates) list to string with separator;
#X obj 30 22147 string.length;
#X text 200 22147 number of characters in string (unicode supported);
#X obj 30 22174 string.match;
#X text 200 22174 check if string match regular expression;
#X obj 30 22201 string.remove;
#X text 200 22201 remove substring from input string;
#X obj 30 22228 string.replace;
#X text 200 22228 replace from one substring to another in input string;
#X obj 30 22255 string.split;
#X text 200 22255 split string or symbol by separator;
#X obj 30 22282 string.starts_with;
#X text 200 22282 checks if string starts with specified substring;
#X obj 30 22309 string.substr;
#X text 200 22309 extract substring from input string;
#X obj 30 22336 string2symbol;
#X text 200 22336 converts string to symbol;
#X obj 20 22363 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 22404 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22415 symbol.equal;
#X text 200 22415 check symbols for equality;
#X obj 30 22442 symbol.length;
#X text 200 22442 number of characters in symbol (unicode supported);
#X obj 30 22469 symbol.num_compare;
#X text 200 22469 numeric symbol compare;
#X obj 30 22496 symbol2any;
#X text 200 22496 converts symbol or string to message;
#X obj 30 22523 symbol2intlist;
#X text 200 22523 converts symbol to list of character codes;
#X obj 20 22550 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 22591 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22602 noise.chua~;
#X text 200 22602 Chua's diode circuit;
#X obj 30 22629 synth.bee3~;
#X text 200 22629 Hammond-oid organ FM synthesis instrument;
#X obj 30 22656 synth.birds~;
#X text 200 22656 bird singing generator;
#X obj 30 22683 synth.church_bell~;
#X text 200 22683 generic church bell modal model;
#X obj 30 22710 synth.clap~;
#X text 200 22710 clap synth from faust libraries;
#X obj 30 22737 synth.dubdub~;
#X text 200 22737 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 22777 synth.dx7~;
#X text 200 22777 FAUST dx7 implementation;
#X obj 30 22804 synth.eguitar~;
#X text 200 22804 simple electric guitar model with steel strings;
#X obj 30 22831 synth.english_bell~;
#X text 200 22831 english church bell modal model;
#X obj 30 22858 synth.fgrain~;
#X text 200 22858 file granulator from STK;
#X obj 30 22885 synth.french_bell~;
#X text 200 22885 french church bell modal model;
#X obj 30 22912 synth.german_bell~;
#X text 200 22912 german church bell modal model;
#X obj 30 22939 synth.glass_harm~;
#X text 200 22939 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 22966 synth.glitch~;
#X text 200 22966 Glitch synthesizer by naivesound;
#X obj 30 22993 synth.harpsichord~;
#X text 200 22993 waveguide commuted harpsichord;
#X obj 30 23020 synth.hat~;
#X text 200 23020 hi-hat synth from faust librariest;
#X obj 30 23047 synth.kick2~;
#X text 200 23047 low-kick synth from faust librariest;
#X obj 30 23074 synth.kick~;
#X text 200 23074 low-kick synth from Guitarix project;
#X obj 30 23101 synth.ks~;
#X text 200 23101 Karplus-Strong string;
#X obj 30 23128 synth.marimba~;
#X text 200 23128 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 23168 synth.metro~;
#X text 200 23168 ready to use metronome synth;
#X obj 30 23195 synth.piano~;
#X text 200 23195 waveguide commuted piano;
#X obj 30 23222 synth.rhodey~;
#X text 200 23222 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 23249 synth.risset_arp~;
#X text 200 23249 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 23276 synth.risset_bell~;
#X text 200 23276 Jean Claude Risset's bell synth;
#X obj 30 23303 synth.risset_tone~;
#X text 200 23303 Jean Claude Risset's endless glissando;
#X obj 30 23330 synth.russian_bell~;
#X text 200 23330 russian church bell modal model;
#X obj 30 23357 synth.shakers~;
#X text 200 23357 various percussion sounds from STK library;
#X obj 30 23384 synth.sitar~;
#X text 200 23384 STK sitar;
#X obj 30 23411 synth.snare~;
#X text 200 23411 Snare drum synth from Guitarix project;
#X obj 30 23438 synth.standard_bell~;
#X text 200 23438 german church bell modal model;
#X obj 30 23465 synth.tube_bell~;
#X text 200 23465 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 23492 synth.voice_fofc~;
#X text 200 23492 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 23519 synth.voice_fofs~;
#X text 200 23519 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 23546 synth.wurley~;
#X text 200 23546 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 23573 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 23614 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23625 system.colorpanel;
#X text 200 23625 System color panel dialog popup;
#X obj 30 23652 system.cursor;
#X text 200 23652 Output cursor motion \, mousewheel and button clicks;
#X obj 30 23679 system.exec;
#X text 200 23679 run external command in separate process;
#X obj 30 23706 system.exit;
#X text 200 23706 quit PureData;
#X obj 30 23733 system.getenv;
#X text 200 23733 Get system environment variables;
#X obj 30 23760 system.hostname;
#X text 200 23760 outputs system hostname;
#X obj 30 23787 system.memsize;
#X text 200 23787 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 23827 system.memused;
#X text 200 23827 returns the process physical memory use - current
and peak;
#X obj 30 23854 system.screen_size;
#X text 200 23854 returns current screen size in pixels;
#X obj 20 23881 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 23922 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23933 tl.bang;
#X text 200 23933 Timeline bang (with possible delay);
#X obj 30 23963 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 23960 Timeline section;
#X obj 30 23985 tl.timeline;
#X text 200 23985 Timeline - event scheduler;
#X obj 30 24012 tl.toggle;
#X text 200 24012 Timeline bang;
#X obj 30 24039 tl.transport;
#X text 200 24039 Timeline transport control;
#X obj 20 24066 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 24107 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 24121 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 24118 array view with cursor and selection;
#X obj 30 24146 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 24143 A bang... that's all;
#X obj 30 24171 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 24168 button widget;
#X obj 30 24196 ui.link @title [ui.canvas] @url ui.canvas-help.pd;
#X text 200 24193 UI canvas for drawing;
#X obj 30 24221 ui.link @title [ui.cmeter~] @url ui.cmeter~-help.pd;
#X text 200 24218 Multichannel circular peak and rms signal meter;
#X obj 30 24246 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 24243 colorchooser widget;
#X obj 30 24271 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 24268 Display GUI object;
#X obj 30 24296 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 24293 GUI for turning DSP on/off;
#X obj 30 24321 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 24318 envelope editor widget;
#X obj 30 24346 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 24343 UI filter object calculator for biquad filter;
#X obj 30 24371 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 24368 UI filter object based on biquad filter;
#X obj 30 24396 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 24393 UI stereo gain control;
#X obj 30 24421 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 24418 UI gain control;
#X obj 30 24446 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 24443 simple icon with button capabilities;
#X obj 30 24471 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 24468 value increment/decrement;
#X obj 30 24496 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 24493 keyboard widget;
#X obj 30 24521 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 24518 knob widget;
#X obj 30 24546 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 24543 simple label widget;
#X obj 30 24571 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 24568 black and white bitmap display;
#X obj 30 24596 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 24593 Hyperlink widget;
#X obj 30 24621 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 24618 The matrix of toggles has you.;
#X obj 30 24646 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 24643 Dropdown menu;
#X obj 30 24671 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 24668 Shows peak and rms signal level;
#X obj 30 24696 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 24693 incoming MIDI message viewport;
#X obj 30 24721 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 24718 filter mouse events from ui objects;
#X obj 30 24746 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 24743 routes mouse events from ui objects;
#X obj 30 24771 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 24768 counterpart of the vanilla [nbx];
#X obj 30 24796 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 24793 counterpart of the vanilla [nbx] for signal;
#X obj 30 24821 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 24818 signal plotter;
#X obj 30 24846 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 24843 2D slider in polar coordinates;
#X obj 30 24871 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 24868 Preset manager;
#X obj 30 24896 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 24893 counterpart of the vanilla radio toggle;
#X obj 30 24921 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 24918 range slider;
#X obj 30 24946 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 24943 Scope GUI object;
#X obj 30 24971 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 24968 counterpart of the vanilla slider;
#X obj 30 24996 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 24993 2D slider widget;
#X obj 30 25021 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 25018 Multiple slider widget;
#X obj 30 25046 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 25043 Spectroscope GUI object;
#X obj 30 25071 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 25068 displays a list of text buttons or text toggles;
#X obj 30 25096 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 25093 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 25118 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 25118 version: v0.9.7 \, license: GPL3;
#X obj 20 25146 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 25169 ui.link @title Generated with pddoc v0.7.6 @url
http://github.com/uliss/pddoc;
#X obj 670 25133 loadmsg 0;
#X obj 670 25168 switch~;
#X connect 1764 0 1765 0;