#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 30 776 plot.geomspace~;
#X text 200 776 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 816 plot.linspace~;
#X text 200 816 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 20 856 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 911 ui.link @title [function] @url function-help.pd;
#X text 200 908 named function;
#X obj 30 933 function.call;
#X text 200 933 call named function;
#X obj 30 960 gain~;
#X text 200 960 multislot signal gain;
#X obj 30 987 matrix~;
#X text 200 987 signal routing matrix;
#X obj 30 1014 metro.pattern;
#X text 200 1014 metro with rhythmic patterns;
#X obj 30 1041 metro.random;
#X text 200 1041 metro random bang with specified range;
#X obj 30 1068 metro.seq;
#X text 200 1068 metro sequencer;
#X obj 30 1095 mix~;
#X text 200 1095 multislot signal mixer;
#X obj 30 1122 obj.props;
#X text 200 1122 property extractor;
#X obj 30 1149 radio;
#X text 200 1149 float index to outlet values as radio switch;
#X obj 30 1176 window;
#X text 200 1176 returns window value by given window position;
#X obj 30 1203 xdac~;
#X text 200 1203 dac~ with channel ranges;
#X obj 30 1230 xfade2~;
#X text 200 1230 multi stereo-signal crossfade;
#X obj 30 1257 xfade~;
#X text 200 1257 multi signal crossfade;
#X obj 20 1284 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1325 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1336 chaos.gbman0;
#X text 200 1336 Gingerbreadman map chaotic generator;
#X obj 30 1363 chaos.gbman0~;
#X text 200 1363 Gingerbreadman map chaotic generator;
#X obj 20 1390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1442 array.p2s;
#X text 200 1442 convert array phase [0\..1] to sample position;
#X obj 30 1469 array.s2p;
#X text 200 1469 convert array sample position to relative phase position
[0\..1];
#X obj 30 1509 conv.amp2dbfs;
#X text 200 1509 convert from amplitude to decibel full scale;
#X obj 30 1536 conv.bpm2hz;
#X text 200 1536 converts BPM to frequency in herz;
#X obj 30 1563 conv.bpm2ms;
#X text 200 1563 convert frequency in BPM to period in milliseconds;
#X obj 30 1590 conv.bpm2sec;
#X text 200 1590 convert frequency in BPM to period in seconds;
#X obj 30 1617 conv.car2pol;
#X text 200 1617 convert cartesian coords to polar;
#X obj 30 1644 conv.cc2amp;
#X text 200 1644 convert from MIDI Control Change range;
#X obj 30 1671 conv.dbfs2amp;
#X text 200 1671 convert decibel full scale to amplitude;
#X obj 30 1698 conv.lin2curve;
#X text 200 1698 map linear to exponential range with 0 allowed.;
#X obj 30 1725 conv.lin2exp;
#X text 200 1725 maps linear range to exponential range;
#X obj 30 1752 conv.lin2lin;
#X text 200 1752 convert from one linear range to another;
#X obj 30 1779 conv.lin2lin~;
#X text 200 1779 convert from one linear range to another for signals;
#X obj 30 1806 conv.list2props;
#X text 200 1806 converts list to series of property messages;
#X obj 30 1833 conv.midi2freq;
#X text 200 1833 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1873 conv.phase2rad;
#X text 200 1873 convert phase value [0-1] to radians;
#X obj 30 1900 conv.phase2rad~;
#X text 200 1900 convert phase value [0-1] to radians;
#X obj 30 1927 conv.pitch2midi;
#X text 200 1927 converts symbol pitch name to MIDI note number;
#X obj 30 1954 conv.pol2car;
#X text 200 1954 convert from polar coordinates to cartesian;
#X obj 30 1981 conv.rad2phase;
#X text 200 1981 convert radians value to phase;
#X obj 30 2008 conv.rad2phase~;
#X text 200 2008 convert radians value to phase;
#X obj 30 2035 conv.samp2ms;
#X text 200 2035 convert samples to time according to samplerate;
#X obj 30 2062 conv.samp2sec;
#X text 200 2062 convert samples to time according to samplerate;
#X obj 30 2089 conv.sec2samp;
#X text 200 2089 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2129 conv.sec2str;
#X text 200 2129 converts float time in seconds to formated symbol
(or string);
#X obj 30 2156 conv.str2sec;
#X text 200 2156 converts formatted time to float value in seconds;
#X obj 20 2183 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2224 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2235 data.dict;
#X text 200 2235 dictionary container: store values by key;
#X obj 30 2262 data.fifo;
#X text 200 2262 First-In-First-Out (FIFO) queue data container;
#X obj 30 2289 data.float;
#X text 200 2289 robust float object;
#X obj 30 2316 data.int;
#X text 200 2316 robust int object;
#X obj 30 2343 data.list;
#X text 200 2343 list container;
#X obj 30 2370 data.mlist;
#X text 200 2370 multidimensional list container;
#X obj 30 2397 data.set;
#X text 200 2397 container that store unique elements;
#X obj 30 2424 data.set2list;
#X text 200 2424 converts set to list;
#X obj 30 2451 dict.contains;
#X text 200 2451 predicate to check if dict contains a keys;
#X obj 30 2478 dict.each;
#X text 200 2478 map each value in dict;
#X obj 30 2505 dict.from_list;
#X text 200 2505 creates dictionary from list;
#X obj 30 2532 dict.get;
#X text 200 2532 output dict values;
#X obj 30 2559 dict.keys;
#X text 200 2559 get list of dict keys;
#X obj 30 2586 dict.pass;
#X text 200 2586 passes specified keys in dict;
#X obj 30 2613 dict.reject;
#X text 200 2613 rejects specified keys from dict;
#X obj 30 2640 dict.size;
#X text 200 2640 dictionary size;
#X obj 30 2667 dict.to_list;
#X text 200 2667 converts dictionary to plain list;
#X obj 30 2694 dict.values;
#X text 200 2694 dictionary values as mlist;
#X obj 30 2721 mlist.flatten;
#X text 200 2721 flatten nested mlist;
#X obj 30 2748 set.contains;
#X text 200 2748 check if specified element is in set;
#X obj 30 2775 set.diff;
#X text 200 2775 difference between two sets;
#X obj 30 2802 set.equal;
#X text 200 2802 checks if two sets are equal (contains same elements);
#X obj 30 2829 set.intersect;
#X text 200 2829 output intersection of given sets;
#X obj 30 2856 set.size;
#X text 200 2856 get number of elements in set;
#X obj 30 2883 set.symdiff;
#X text 200 2883 symmetric difference between two sets;
#X obj 30 2910 set.union;
#X text 200 2910 output union of given sets;
#X obj 20 2937 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2978 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2989 dyn.comp2~;
#X text 200 2989 stereo dynamic range compressor;
#X obj 30 3016 dyn.comp~;
#X text 200 3016 mono dynamic range compressors;
#X obj 30 3043 dyn.gate2~;
#X text 200 3043 stereo signal gate;
#X obj 30 3070 dyn.gate~;
#X text 200 3070 mono signal gate;
#X obj 30 3097 dyn.limit2~;
#X text 200 3097 stereo 1176LN Peak Limiter;
#X obj 30 3124 dyn.limit~;
#X text 200 3124 mono 1176LN Peak Limiter;
#X obj 30 3151 dyn.softclip~;
#X text 200 3151 soft signal clip;
#X obj 20 3178 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3219 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3230 env.adsr~;
#X text 200 3230 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3257 env.ar~;
#X text 200 3257 Attack/Release envelope generator;
#X obj 30 3284 env.asr~;
#X text 200 3284 Attack/Sustain/Release envelope generator;
#X obj 30 3311 env.concat;
#X text 200 3311 Envelope concatenation;
#X obj 30 3338 env.follow~;
#X text 200 3338 Envelope follower with independent attack and release
times;
#X obj 30 3365 env.mix;
#X text 200 3365 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3405 env.smooth~;
#X text 200 3405 An envelope with an exponential attack and release;
#X obj 30 3432 env.tscale;
#X text 200 3432 Envelope time-scale;
#X obj 30 3459 env.tshift;
#X text 200 3459 Envelope time-shift (horizontal);
#X obj 30 3486 env.vscale;
#X text 200 3486 Envelope value-scale;
#X obj 30 3513 env2array;
#X text 200 3513 Renders envelope to specified array;
#X obj 30 3540 env2vline;
#X text 200 3540 Converts envelope to bunch of vline messages;
#X obj 30 3567 envelope;
#X text 200 3567 Envelope data type;
#X obj 30 3594 vline2env;
#X text 200 3594 Converts vline messages to env;
#X obj 20 3621 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3662 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3673 expand_env;
#X text 200 3673 Substitute enviroment variables in data stream;
#X obj 30 3700 flow.append;
#X text 200 3700 inject message into flow;
#X obj 30 3727 flow.change;
#X text 200 3727 rejects redundant input values;
#X obj 30 3754 flow.count;
#X text 200 3754 control flow event counter;
#X obj 30 3781 flow.demultiplex;
#X text 200 3781 control flow demultiplexer;
#X obj 30 3808 flow.demultiplex2~;
#X text 200 3808 audio stream stereo demultiplexer;
#X obj 30 3835 flow.demultiplex~;
#X text 200 3835 audio stream demultiplexer;
#X obj 30 3862 flow.gate;
#X text 200 3862 control flow gate. [spigot] analog;
#X obj 30 3889 flow.greater;
#X text 200 3889 numeric stream router;
#X obj 30 3916 flow.group;
#X text 200 3916 group data atoms in list of specified size;
#X obj 30 3943 flow.interval;
#X text 200 3943 measure time between flow events;
#X obj 30 3970 flow.less;
#X text 200 3970 numeric stream router \, like many [moses];
#X obj 30 3997 flow.less_eq;
#X text 200 3997 numeric stream router \, like many [moses];
#X obj 30 4024 flow.match;
#X text 200 4024 route data flow by regexp match;
#X obj 30 4051 flow.multiplex;
#X text 200 4051 control flow multiplexer;
#X obj 30 4078 flow.multiplex2~;
#X text 200 4078 audio stream stereo multiplexer;
#X obj 30 4105 flow.multiplex~;
#X text 200 4105 audio stream multiplexer;
#X obj 30 4132 flow.once;
#X text 200 4132 one message pass thru;
#X obj 30 4159 flow.pack;
#X text 200 4159 flow pack;
#X obj 30 4186 flow.pass;
#X text 200 4186 pass specified values;
#X obj 30 4213 flow.pass_if;
#X text 200 4213 pass values that accepted by predicate object;
#X obj 30 4240 flow.reject;
#X text 200 4240 reject specified values;
#X obj 30 4267 flow.reject_if;
#X text 200 4267 reject values by predicate;
#X obj 30 4294 flow.route;
#X text 200 4294 advanced message router;
#X obj 30 4321 flow.speedlim;
#X text 200 4321 control stream speed limiter;
#X obj 30 4348 flow.split;
#X text 200 4348 split data flow by external side-chain predicate;
#X obj 30 4375 flow.sync;
#X text 200 4375 bus with only hot inlets;
#X obj 30 4402 flow.sync_pack;
#X text 200 4402 flow pack with all hot inlets;
#X obj 30 4429 flow.tee~;
#X text 200 4429 separate audio and control streams;
#X obj 30 4456 replace;
#X text 200 4456 Replace atoms in data stream;
#X obj 20 4483 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4524 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4535 flt.biquad~;
#X text 200 4535 second order IIR filter.;
#X obj 30 4562 flt.bpf12~;
#X text 200 4562 Band-pass filter with 12/db per octave slope;
#X obj 30 4589 flt.bpf24~;
#X text 200 4589 Band-pass filter with 24/db per octave slope;
#X obj 30 4616 flt.c_bpf~;
#X text 200 4616 BPF coefficient calculator for biquad filter;
#X obj 30 4643 flt.c_highshelf~;
#X text 200 4643 Highshelf filter coefficient calculator for biquad;
#X obj 30 4670 flt.c_hpf~;
#X text 200 4670 HPF coefficient calculator for biquad filter;
#X obj 30 4697 flt.c_lowshelf~;
#X text 200 4697 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4724 flt.c_lpf~;
#X text 200 4724 LPF coefficient calculator for biquad filter;
#X obj 30 4751 flt.c_notch~;
#X text 200 4751 Band-reject coefficient calculator for biquad filter;
#X obj 30 4778 flt.c_peak~;
#X text 200 4778 Peaking equalizer calculator for biquad;
#X obj 30 4805 flt.dcblock2~;
#X text 200 4805 stereo DC blocker;
#X obj 30 4832 flt.dcblock~;
#X text 200 4832 mono DC blocker;
#X obj 30 4859 flt.eq10~;
#X text 200 4859 graphic 10 band equalizer;
#X obj 30 4886 flt.eq_peak_cq~;
#X text 200 4886 constant-Q second order peaking equalizer section;
#X obj 30 4913 flt.eq_peak~;
#X text 200 4913 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4968 flt.highshelf~;
#X text 200 4968 gain boost|cut above some frequency;
#X obj 30 4995 flt.hpf12~;
#X text 200 4995 High-pass filter with 12/db per octave slope;
#X obj 30 5022 flt.hpf24~;
#X text 200 5022 High-pass filter with 24/db per octave slope;
#X obj 30 5049 flt.lowshelf~;
#X text 200 5049 gain boost|cut below some frequency;
#X obj 30 5076 flt.lpf12~;
#X text 200 5076 Low-pass filter with 12/db per octave slope;
#X obj 30 5103 flt.lpf24~;
#X text 200 5103 Low-pass filter with 24/db per octave slope;
#X obj 30 5130 flt.median;
#X text 200 5130 Median control flow filter;
#X obj 30 5157 flt.moog_vcf~;
#X text 200 5157 Moog Voltage Controlled Filter;
#X obj 30 5184 flt.notch~;
#X text 200 5184 band-rejection filter;
#X obj 30 5211 flt.resonbp~;
#X text 200 5211 Simple resonant bandpass filter;
#X obj 20 5238 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5279 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5290 fx.bitdown~;
#X text 200 5290 bit downer and downsampler effect;
#X obj 30 5317 fx.chorus~;
#X text 200 5317 Chorus effect;
#X obj 30 5344 fx.distortion1~;
#X text 200 5344 distortion #1 from Guitarix effects set;
#X obj 30 5371 fx.distortion2~;
#X text 200 5371 distortion #2 from Guitarix effects set;
#X obj 30 5398 fx.distortion3~;
#X text 200 5398 simple distortion #3 from Guitarix effects set;
#X obj 30 5425 fx.distortion~;
#X text 200 5425 cubic nonlinearity distortion;
#X obj 30 5452 fx.drive~;
#X text 200 5452 Guitarix drive effect;
#X obj 30 5479 fx.drone_box~;
#X text 200 5479 mono sympathetic resonance generator;
#X obj 30 5506 fx.echo~;
#X text 200 5506 simple echo effect;
#X obj 30 5533 fx.flanger~;
#X text 200 5533 mono flanging effect;
#X obj 30 5560 fx.freeverb2~;
#X text 200 5560 freeverb2 - stereo version of freeverb;
#X obj 30 5587 fx.freeverb~;
#X text 200 5587 freeverb - common used open-source reverb;
#X obj 30 5614 fx.freqshift~;
#X text 200 5614 frequency shifter or single-sideband ring modulation;
#X obj 30 5641 fx.granulator~;
#X text 200 5641 simple input stream granulator;
#X obj 30 5668 fx.greyhole~;
#X text 200 5668 A complex echo-like effect;
#X obj 30 5695 fx.looper~;
#X text 200 5695 One track looper;
#X obj 30 5722 fx.pitchshift~;
#X text 200 5722 simple pitch shifter based on 2 delay lines;
#X obj 30 5749 fx.sdelay~;
#X text 200 5749 smooth delay with a feedback control;
#X obj 30 5776 fx.vocoder~;
#X text 200 5776 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5816 fx.wahwah~;
#X text 200 5816 digitized CryBaby wah pedal;
#X obj 30 5843 fx.zita_rev1~;
#X text 200 5843 Zita stereo reverb;
#X obj 20 5870 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5911 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5922 global.dict;
#X text 200 5922 global named dict object;
#X obj 30 5949 global.float;
#X text 200 5949 global named float object;
#X obj 30 5976 global.int;
#X text 200 5976 global named integer object;
#X obj 30 6003 global.list;
#X text 200 6003 global named list object;
#X obj 30 6030 global.mlist;
#X text 200 6030 global named mlist object;
#X obj 30 6057 global.set;
#X text 200 6057 global named set object;
#X obj 20 6084 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6125 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6136 hw.apple_smc;
#X text 200 6136 query the system management control in Apples;
#X obj 30 6163 hw.apple_sms;
#X text 200 6163 query the sudden motion sensor in Apples;
#X obj 30 6190 hw.arduino;
#X text 200 6190 Arduino device;
#X obj 30 6217 hw.cpu_temp;
#X text 200 6217 get CPU temperature;
#X obj 30 6244 hw.display;
#X text 200 6244 get/set display properties;
#X obj 30 6271 hw.kbd_light;
#X text 200 6271 Get/set keyboard light on some devices;
#X obj 20 6298 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6339 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6350 lfo.+pulse~;
#X text 200 6350 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6377 lfo.+saw~;
#X text 200 6377 Positive unit-amplitude low frequency saw wave;
#X obj 30 6404 lfo.+square~;
#X text 200 6404 Positive low frequency square wave;
#X obj 30 6431 lfo.+tri~;
#X text 200 6431 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6458 lfo.impulse~;
#X text 200 6458 Unit-amplitude low-frequency impulse train;
#X obj 30 6485 lfo.pulse~;
#X text 200 6485 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6512 lfo.saw~;
#X text 200 6512 Full-range unit-amplitude low frequency saw;
#X obj 30 6539 lfo.square~;
#X text 200 6539 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6566 lfo.tri~;
#X text 200 6566 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6593 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6634 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6645 list.^at;
#X text 200 6645 on input index(es) outputs list element(s);
#X obj 30 6672 list.^contains;
#X text 200 6672 on input atom or list checks if specified list contains
it;
#X obj 30 6699 list.^search;
#X text 200 6699 on input atom returns it index in list;
#X obj 30 6726 list.all_of;
#X text 200 6726 checks if all list atoms accepted by predicate;
#X obj 30 6753 list.any_of;
#X text 200 6753 checks if at least one list element is accepted by
predicate;
#X obj 30 6780 list.append;
#X text 200 6780 append atom or list to the end of input list;
#X obj 30 6807 list.apply_to;
#X text 200 6807 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6847 list.at;
#X text 200 6847 on input list outputs element(s) at specified index(es);
#X obj 30 6874 list.choice;
#X text 200 6874 returns random element from list;
#X obj 30 6901 list.contains;
#X text 200 6901 checks if input list contains specified atoms;
#X obj 30 6928 list.count;
#X text 200 6928 returns the number of items that equal to specified
value;
#X obj 30 6955 list.count_if;
#X text 200 6955 returns the number of items that satisfy to external
predicate.;
#X obj 30 6995 list.delta;
#X text 200 6995 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7035 list.distribution;
#X text 200 7035 list value distribution;
#X obj 30 7062 list.do;
#X text 200 7062 iterate and modify list contents via side-chain;
#X obj 30 7089 list.each;
#X text 200 7089 maps each list value via external object(s);
#X obj 30 7116 list.enumerate;
#X text 200 7116 enumerates input list;
#X obj 30 7143 list.equal;
#X text 200 7143 checks if given lists are equal;
#X obj 30 7170 list.first;
#X text 200 7170 returns first list element;
#X obj 30 7197 list.gen;
#X text 200 7197 generates list of specified length via external generator;
#X obj 30 7224 list.histogram;
#X text 200 7224 outputs distribution histogram;
#X obj 30 7251 list.insert;
#X text 200 7251 insert atom or list to the specified position of input
list;
#X obj 30 7278 list.integrator;
#X text 200 7278 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7318 list.last;
#X text 200 7318 returns last list element;
#X obj 30 7345 list.length;
#X text 200 7345 returns the number of atoms in the list;
#X obj 30 7372 list.max;
#X text 200 7372 returns largest element in the list;
#X obj 30 7399 list.mean;
#X text 200 7399 calculates average of list of floats;
#X obj 30 7426 list.min;
#X text 200 7426 returns smallest element in the list;
#X obj 30 7453 list.none_of;
#X text 200 7453 checks if none of list atoms is accepted by predicate;
#X obj 30 7480 list.normalize;
#X text 200 7480 normalizes float list values to get their sum = 1.0;
#X obj 30 7507 list.pass_if;
#X text 200 7507 leave only elements accepted by predicate;
#X obj 30 7534 list.prepend;
#X text 200 7534 prepend atom or list before input list;
#X obj 30 7561 list.product;
#X text 200 7561 calculates product of floats in list;
#X obj 30 7588 list.range;
#X text 200 7588 returns list smallest and largest value;
#X obj 30 7615 list.reduce;
#X text 200 7615 apply function of two arguments cumulatively to the
list;
#X obj 30 7642 list.remove;
#X text 200 7642 on input list remove element(s) at specified positions;
#X obj 30 7669 list.remove_if;
#X text 200 7669 remove elements by predicate;
#X obj 30 7696 list.repack;
#X text 200 7696 repack input list to specified size;
#X obj 30 7723 list.repeat;
#X text 200 7723 creates new list by repeating given list specified
times;
#X obj 30 7750 list.resample;
#X text 200 7750 resample list with specified ratio;
#X obj 30 7777 list.resize;
#X text 200 7777 changes list size;
#X obj 30 7804 list.reverse;
#X text 200 7804 reverses the order of the elements in the list;
#X obj 30 7831 list.rldecode;
#X text 200 7831 Run-length list decoder (RLE);
#X obj 30 7858 list.rlencode;
#X text 200 7858 RLE (run-length encoding) for lists;
#X obj 30 7885 list.rotate;
#X text 200 7885 rotates list;
#X obj 30 7912 list.route;
#X text 200 7912 acts like [route] but for lists;
#X obj 30 7939 list.search;
#X text 200 7939 search specified items in input list;
#X obj 30 7966 list.separate;
#X text 200 7966 sends list elements one by one separately;
#X obj 30 7993 list.seq;
#X text 200 7993 numeric sequence list generator;
#X obj 30 8020 list.set;
#X text 200 8020 on input list set value at specified position;
#X obj 30 8047 list.shift;
#X text 200 8047 shifts the contents of the list with linear interpolation;
#X obj 30 8074 list.shuffle;
#X text 200 8074 randomly rearranges elements in list;
#X obj 30 8101 list.slice;
#X text 200 8101 extract sublist;
#X obj 30 8128 list.sort;
#X text 200 8128 sorts list values by ascending order;
#X obj 30 8155 list.sort_with;
#X text 200 8155 sort list with user defined side-chain;
#X obj 30 8182 list.split;
#X text 200 8182 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8222 list.stretch;
#X text 200 8222 stretches list - changes its size with linear interpolation;
#X obj 30 8249 list.sum;
#X text 200 8249 calculates sum of floats in list;
#X obj 30 8276 list.unique;
#X text 200 8276 removes duplicates from input list;
#X obj 30 8303 list.unpack;
#X text 200 8303 unpack list elements to separate outlets;
#X obj 30 8330 list.unzip;
#X text 200 8330 splits list to N lists \, each to separate output;
#X obj 30 8357 list.walk;
#X text 200 8357 Walks thru the list;
#X obj 30 8384 list.zip;
#X text 200 8384 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8439 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8480 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8491 live.capture~;
#X text 200 8491 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8531 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8572 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8583 local.dict;
#X text 200 8583 local named dict object;
#X obj 30 8610 local.float;
#X text 200 8610 canvas-scoped named float variable;
#X obj 30 8637 local.int;
#X text 200 8637 canvas-scoped named integer variable;
#X obj 30 8664 local.list;
#X text 200 8664 local named list object;
#X obj 30 8691 local.mlist;
#X text 200 8691 local named mlist object;
#X obj 30 8718 local.set;
#X text 200 8718 local named set object;
#X obj 20 8745 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8786 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8797 math.abs;
#X text 200 8797 absolute value function;
#X obj 30 8824 math.abs~;
#X text 200 8824 absolute value function for signals;
#X obj 30 8851 math.acos;
#X text 200 8851 arc cosine function;
#X obj 30 8878 math.acosh;
#X text 200 8878 inverse hyperbolic cosine function;
#X obj 30 8905 math.acos~;
#X text 200 8905 arc cosine function for signals;
#X obj 30 8932 math.and;
#X text 200 8932 operation AND for multiple arguments;
#X obj 30 8959 math.approx;
#X text 200 8959 check if input value approximately equal to pattern;
#X obj 30 8986 math.asin;
#X text 200 8986 arc sine function;
#X obj 30 9013 math.asinh;
#X text 200 9013 inverse hyperbolic sine function;
#X obj 30 9040 math.atan;
#X text 200 9040 arc tangent function;
#X obj 30 9067 math.atanh;
#X text 200 9067 inverse hyperbolic tangent function;
#X obj 30 9094 math.cbrt;
#X text 200 9094 cube root function;
#X obj 30 9121 math.cdiv~;
#X text 200 9121 division of complex signals;
#X obj 30 9148 math.ceil;
#X text 200 9148 round to smallest integral value not less than input
value;
#X obj 30 9175 math.cmul~;
#X text 200 9175 multiplication of complex signals;
#X obj 30 9202 math.cos;
#X text 200 9202 cosine function;
#X obj 30 9229 math.cosh;
#X text 200 9229 hyperbolic cosine function;
#X obj 30 9256 math.div;
#X text 200 9256 division (on lists too);
#X obj 30 9283 math.e;
#X text 200 9283 mathematical constant \, base of the natural logarithm;
#X obj 30 9310 math.exp;
#X text 200 9310 exponential functions;
#X obj 30 9337 math.exp2;
#X text 200 9337 exponential functions;
#X obj 30 9364 math.expr;
#X text 200 9364 dynamic [expr];
#X obj 30 9391 math.floor;
#X text 200 9391 round to largest integral value not greater than x;
#X obj 30 9418 math.gcd;
#X text 200 9418 calculate greatest common divisor;
#X obj 30 9445 math.inf;
#X text 200 9445 infinity value that cannot be represented accurately;
#X obj 30 9472 math.lcm;
#X text 200 9472 calculate least common multiple;
#X obj 30 9499 math.log;
#X text 200 9499 logarithm functions;
#X obj 30 9526 math.log10;
#X text 200 9526 logarithm functions;
#X obj 30 9553 math.log2;
#X text 200 9553 logarithm functions;
#X obj 30 9580 math.mul;
#X text 200 9580 multiplication (on lists too);
#X obj 30 9607 math.nan;
#X text 200 9607 Not a Number \, unrepresentable value;
#X obj 30 9634 math.neg;
#X text 200 9634 negate function;
#X obj 30 9661 math.or;
#X text 200 9661 operation OR for multiple arguments;
#X obj 30 9688 math.pi;
#X text 200 9688 mathematical constant;
#X obj 30 9715 math.pi~;
#X text 200 9715 mathematical constant;
#X obj 30 9742 math.polyeval;
#X text 200 9742 evaluates the polynomial described by the coefficients
list;
#X obj 30 9769 math.reciprocal;
#X text 200 9769 calculate reciprocal number;
#X obj 30 9796 math.reciprocal~;
#X text 200 9796 calculate reciprocal number for signals;
#X obj 30 9823 math.round;
#X text 200 9823 round to integral value \, regardless of rounding
direction;
#X obj 30 9850 math.round~;
#X text 200 9850 signal round;
#X obj 30 9877 math.sign;
#X text 200 9877 sign function;
#X obj 30 9904 math.sin;
#X text 200 9904 sine function;
#X obj 30 9931 math.sinh;
#X text 200 9931 hyperbolic sine function;
#X obj 30 9958 math.sqrt;
#X text 200 9958 square root function;
#X obj 30 9985 math.squared;
#X text 200 9985 value square;
#X obj 30 10012 math.squared~;
#X text 200 10012 signal value square;
#X obj 30 10039 math.sync_add;
#X text 200 10039 sync addition;
#X obj 30 10066 math.sync_and;
#X text 200 10066 sync logical AND operation;
#X obj 30 10093 math.sync_div;
#X text 200 10093 sync division;
#X obj 30 10120 math.sync_eq;
#X text 200 10120 sync equal numbers check;
#X obj 30 10147 math.sync_ge;
#X text 200 10147 sync greater equal numbers compare;
#X obj 30 10174 math.sync_gt;
#X text 200 10174 sync greater then numbers compare;
#X obj 30 10201 math.sync_le;
#X text 200 10201 sync less equal numbers compare;
#X obj 30 10228 math.sync_lt;
#X text 200 10228 sync less then numbers compare;
#X obj 30 10255 math.sync_mod;
#X text 200 10255 sync remainder of modulo division (float or integer);
#X obj 30 10282 math.sync_mul;
#X text 200 10282 sync multiplication;
#X obj 30 10309 math.sync_ne;
#X text 200 10309 sync numbers for not equality;
#X obj 30 10336 math.sync_or;
#X text 200 10336 sync logical OR operation;
#X obj 30 10363 math.sync_sub;
#X text 200 10363 sync subtraction;
#X obj 30 10390 math.sync_xor;
#X text 200 10390 sync logical XOR operation;
#X obj 30 10417 math.tan;
#X text 200 10417 tangent function;
#X obj 30 10444 math.tanh;
#X text 200 10444 hyperbolic tangent function;
#X obj 30 10471 math.trunc;
#X text 200 10471 truncate to integer value;
#X obj 20 10498 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10539 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10550 midi.ctl2str;
#X text 200 10550 convert Standard MIDI Controllers number to name;
#X obj 30 10577 midi.event2ctl;
#X text 200 10577 convert MidiEvent message to controller channel/value
pair;
#X obj 30 10604 midi.event2note;
#X text 200 10604 convert MidiEvent message to midi note/velocity pair;
#X obj 30 10631 midi.event2prg;
#X text 200 10631 convert MidiEvent message to midi program change
value;
#X obj 30 10658 midi.file;
#X text 200 10658 standard midi file SMF reader and writer;
#X obj 30 10685 midi.key2str;
#X text 200 10685 convert key number to SPN name according to tonality;
#X obj 30 10712 midi.prg2str;
#X text 200 10712 convert GM Instrument number to name (string or symbol);
#X obj 30 10739 midi.track;
#X text 200 10739 extract track from MidiFile;
#X obj 20 10766 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 10807 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10818 click~;
#X text 200 10818 Output single impulse on bang;
#X obj 30 10845 fluid~;
#X text 200 10845 FluidSynth SoundFont 2 player;
#X obj 30 10872 modplug~;
#X text 200 10872 MOD file player (using libmodplug);
#X obj 30 10899 speech.flite;
#X text 200 10899 render speech to array;
#X obj 20 10926 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 10967 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10978 msg;
#X text 200 10978 message constructor;
#X obj 30 11005 msg.after;
#X text 200 11005 send specified message after incoming message;
#X obj 30 11032 msg.onload;
#X text 200 11032 send message when patch loads;
#X obj 20 11059 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 11100 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11111 net.host2ip;
#X text 200 11111 returns IP address by DNS name;
#X obj 20 11138 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 11179 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11190 noise.crackle~;
#X text 200 11190 sparse noise generator;
#X obj 30 11217 noise.lfreq0~;
#X text 200 11217 sampled/held noise (piecewise constant);
#X obj 30 11244 noise.lfreq~;
#X text 200 11244 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 11271 noise.pink~;
#X text 200 11271 Pink noise generator;
#X obj 30 11298 noise.white~;
#X text 200 11298 White noise generator;
#X obj 20 11325 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 11366 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11377 osc.blit~;
#X text 200 11377 Bandlimited impulse train oscillator;
#X obj 30 11404 osc.impulse~;
#X text 200 11404 Bandlimited impulse train generator;
#X obj 30 11431 osc.pulse~;
#X text 200 11431 Bandlimited pulse train oscillator;
#X obj 30 11458 osc.saw4~;
#X text 200 11458 Bandlimited sawtooth wave;
#X obj 30 11485 osc.saw~;
#X text 200 11485 Alias-free sawtooth wave;
#X obj 30 11512 osc.sinfb~;
#X text 200 11512 Sine oscilator with feedback;
#X obj 30 11539 osc.sin~;
#X text 200 11539 Sine wave oscillator;
#X obj 30 11566 osc.square~;
#X text 200 11566 Bandlimited square wave oscillator;
#X obj 30 11593 osc.tri~;
#X text 200 11593 Bandlimited triangle wave oscillator;
#X obj 20 11620 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 11661 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11672 canvas.current;
#X text 200 11672 verbose information about current canvas;
#X obj 30 11699 canvas.dir;
#X text 200 11699 current canvas directory;
#X obj 30 11726 canvas.name;
#X text 200 11726 current canvas name;
#X obj 30 11753 canvas.path;
#X text 200 11753 current canvas fullpath;
#X obj 30 11780 canvas.top;
#X text 200 11780 verbose information about top-level canvas;
#X obj 30 11807 patch.args;
#X text 200 11807 Get patch or subpatch arguments;
#X obj 20 11834 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 11875 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11886 path.basename;
#X text 200 11886 outputs filename portion of pathname;
#X obj 30 11913 path.dirname;
#X text 200 11913 outputs directory portion of pathname;
#X obj 30 11940 path.exists;
#X text 200 11940 checks if given path exists;
#X obj 30 11967 path.is_dir;
#X text 200 11967 check if path is directory;
#X obj 30 11994 path.lsdir;
#X text 200 11994 list directory contents;
#X obj 20 12021 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 12062 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12073 is_any;
#X text 200 12073 checks if input data has *any* type;
#X obj 30 12100 is_bang;
#X text 200 12100 checks if input data has *bang* type;
#X obj 30 12127 is_data;
#X text 200 12127 checks if input data has *data* type;
#X obj 30 12154 is_dict;
#X text 200 12154 checks if input data has *dict* type;
#X obj 30 12181 is_even;
#X text 200 12181 checks if input number is even;
#X obj 30 12208 is_file;
#X text 200 12208 checks if file exists and accessible;
#X obj 30 12235 is_float;
#X text 200 12235 checks if input data has *float* type;
#X obj 30 12262 is_list;
#X text 200 12262 checks if input data has *list* type;
#X obj 30 12289 is_odd;
#X text 200 12289 checks if input number is odd;
#X obj 30 12316 is_pointer;
#X text 200 12316 checks if input data has *pointer* type;
#X obj 30 12343 is_symbol;
#X text 200 12343 checks if input data has *symbol* type;
#X obj 20 12370 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 12411 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12422 preset.float;
#X text 200 12422 load/store float preset;
#X obj 30 12449 preset.list;
#X text 200 12449 load/store symbol preset;
#X obj 30 12476 preset.storage;
#X text 200 12476 preset storage control;
#X obj 30 12503 preset.symbol;
#X text 200 12503 load/store symbol preset;
#X obj 20 12530 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12571 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12582 patch.props;
#X text 200 12582 patch properties manager;
#X obj 30 12609 prop;
#X text 200 12609 get/set named property value for subpatch or abstraction;
#X obj 30 12636 prop.declare;
#X text 200 12636 declare named property for subpatch or abstraction;
#X obj 30 12663 prop.get;
#X text 200 12663 Property extractor;
#X obj 30 12690 prop.get~;
#X text 200 12690 Property extractor from sound stream;
#X obj 30 12717 prop.set;
#X text 200 12717 Property injector;
#X obj 20 12744 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 12785 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12796 proto.firmata;
#X text 200 12796 Firmata Arduino protocol support;
#X obj 30 12823 proto.sp.alpaca;
#X text 200 12823 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 12850 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 12891 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12902 random.discrete;
#X text 200 12902 random weighted integers on interval [0 \, n);
#X obj 30 12929 random.float;
#X text 200 12929 random float generator in specified range;
#X obj 30 12956 random.gauss;
#X text 200 12956 gaussian random distribution;
#X obj 30 12983 random.int;
#X text 200 12983 Random integer generator in specified range;
#X obj 30 13010 random.linear;
#X text 200 13010 random linear distribution;
#X obj 30 13037 random.pw_const;
#X text 200 13037 piecewise constant random distribution;
#X obj 30 13064 random.pw_lin;
#X text 200 13064 piecewise linear random distribution;
#X obj 20 13091 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 13132 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13143 snd.file;
#X text 200 13143 Sound file loader on steroids;
#X obj 20 13170 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 13211 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13222 hoa.2d.decoder~;
#X text 200 13222 hoa 2d decoder;
#X obj 30 13249 hoa.2d.encoder~;
#X text 200 13249 hoa 2d encoder;
#X obj 30 13276 hoa.2d.map~;
#X text 200 13276 a 2d ambisonic multisource spatializer;
#X obj 30 13303 hoa.2d.optim~;
#X text 200 13303 a 2D ambisonic optimization tool;
#X obj 30 13330 hoa.2d.projector~;
#X text 200 13330 a plane waves decomposer from circular harmonics
domain;
#X obj 30 13357 hoa.2d.recomposer~;
#X text 200 13357 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 13397 hoa.2d.rotate~;
#X text 200 13397 a 2D ambisonic sound field rotation;
#X obj 30 13424 hoa.2d.wider~;
#X text 200 13424 a 2d fractional ambisonic order simulator;
#X obj 30 13451 hoa.@process;
#X text 200 13451 process properties manager for hoa.process~;
#X obj 30 13478 hoa.in;
#X text 200 13478 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13505 hoa.in~;
#X text 200 13505 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13532 hoa.out;
#X text 200 13532 message outlet for a patcher loaded by hoa.process~;
#X obj 30 13559 hoa.out~;
#X text 200 13559 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13586 hoa.process~;
#X text 200 13586 patcher loader for multichannel processing;
#X obj 30 13616 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 13613 a 2d ambisonic harmonic scope;
#X obj 30 13638 pan.cos~;
#X text 200 13638 two channel equal power sine/cosine panner;
#X obj 30 13665 pan.linsig~;
#X text 200 13665 two channel linear panner with signal control;
#X obj 30 13692 pan.lin~;
#X text 200 13692 two channel linear panner;
#X obj 30 13719 pan.spread~;
#X text 200 13719 spreads input channels across the stereo field;
#X obj 30 13746 pan.sqrt~;
#X text 200 13746 two channel equal power square root panner;
#X obj 30 13773 spat.pan4~;
#X text 200 13773 GMEM SPAT: 4-outputs spatializer;
#X obj 30 13800 spat.pan8~;
#X text 200 13800 GMEM SPAT: 8-outputs spatializer;
#X obj 20 13827 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 13868 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13879 string;
#X text 200 13879 string constructor;
#X obj 30 13906 string.contains;
#X text 200 13906 checks if given string contains specified substring;
#X obj 30 13933 string.ends_with;
#X text 200 13933 checks if given string ends with specified suffix;
#X obj 30 13960 string.equal;
#X text 200 13960 check strings for equality;
#X obj 30 13987 string.format;
#X text 200 13987 formats string like printf.;
#X obj 30 14014 string.join;
#X text 200 14014 joins (concatenates) strings with separator;
#X obj 30 14041 string.length;
#X text 200 14041 number of characters in string (unicode supported);
#X obj 30 14068 string.match;
#X text 200 14068 check if string match regular expression;
#X obj 30 14095 string.remove;
#X text 200 14095 remove substring from input string;
#X obj 30 14122 string.replace;
#X text 200 14122 replace from one substring to another in input string;
#X obj 30 14149 string.split;
#X text 200 14149 split string by separator;
#X obj 30 14176 string.starts_with;
#X text 200 14176 checks if given string starts with specified prefix;
#X obj 30 14203 string.substr;
#X text 200 14203 extract substring from input string;
#X obj 30 14230 string2symbol;
#X text 200 14230 converts string to symbol;
#X obj 20 14257 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 14298 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14309 symbol.equal;
#X text 200 14309 check symbols for equality;
#X obj 30 14336 symbol.length;
#X text 200 14336 number of characters in symbol (unicode supported);
#X obj 30 14363 symbol.num_compare;
#X text 200 14363 numeric symbol compare;
#X obj 20 14390 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14442 synth.bee3~;
#X text 200 14442 Hammond-oid organ FM synthesis instrument;
#X obj 30 14469 synth.birds~;
#X text 200 14469 bird singing generator;
#X obj 30 14496 synth.church_bell~;
#X text 200 14496 generic church bell modal model;
#X obj 30 14523 synth.dubdub~;
#X text 200 14523 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 14563 synth.eguitar~;
#X text 200 14563 simple electric guitar model with steel strings;
#X obj 30 14590 synth.fgrain~;
#X text 200 14590 file granulator from STK;
#X obj 30 14617 synth.ks~;
#X text 200 14617 Karplus-Strong string;
#X obj 30 14644 synth.marimba~;
#X text 200 14644 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 14684 synth.rhodey~;
#X text 200 14684 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 14711 synth.risset_arp~;
#X text 200 14711 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 14738 synth.risset_tone~;
#X text 200 14738 Jean Claude Risset's endless glissando;
#X obj 30 14765 synth.shakers~;
#X text 200 14765 various percussion sounds from STK library;
#X obj 30 14792 synth.wurley~;
#X text 200 14792 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 14819 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 14860 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14871 system.colorpanel;
#X text 200 14871 System color panel dialog popup;
#X obj 30 14898 system.cursor;
#X text 200 14898 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 14925 system.getenv;
#X text 200 14925 Get system environment variables;
#X obj 30 14952 system.hostname;
#X text 200 14952 outputs system hostname;
#X obj 30 14979 system.memsize;
#X text 200 14979 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 15019 system.memused;
#X text 200 15019 returns the process physical memory use - current
and peak;
#X obj 30 15046 system.screen_size;
#X text 200 15046 returns current screen size in pixels;
#X obj 30 15073 system.shell;
#X text 200 15073 run external command in separate process;
#X obj 20 15100 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 15141 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15152 tl.bang;
#X text 200 15152 Timeline bang (with possible delay);
#X obj 30 15182 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 15179 Timeline section;
#X obj 30 15204 tl.timeline;
#X text 200 15204 Timeline - event scheduler;
#X obj 30 15231 tl.toggle;
#X text 200 15231 Timeline bang;
#X obj 30 15258 tl.transport;
#X text 200 15258 Timeline transport control;
#X obj 20 15285 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 15326 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15340 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 15337 array view with cursor and selection;
#X obj 30 15365 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 15362 A bang... that's all;
#X obj 30 15390 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 15387 colorchooser widget;
#X obj 30 15415 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 15412 Display GUI object;
#X obj 30 15440 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15437 GUI for turning DSP on/off;
#X obj 30 15465 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15462 envelope editor widget;
#X obj 30 15490 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15487 UI stereo gain control;
#X obj 30 15515 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15512 UI gain control;
#X obj 30 15540 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 15537 simple icon with button capabilities;
#X obj 30 15565 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 15562 value increment/decrement;
#X obj 30 15590 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 15587 keyboard widget;
#X obj 30 15615 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 15612 knob widget;
#X obj 30 15640 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 15637 simple label widget;
#X obj 30 15665 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 15662 Hyperlink widget;
#X obj 30 15690 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 15687 The matrix of toggles has you.;
#X obj 30 15715 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 15712 Dropdown menu;
#X obj 30 15740 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 15737 Shows peak and rms signal level;
#X obj 30 15765 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 15762 filter mouse events from ui objects;
#X obj 30 15790 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 15787 routes mouse events from ui objects;
#X obj 30 15815 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 15812 counterpart of the vanilla [nbx];
#X obj 30 15840 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 15837 counterpart of the vanilla [nbx] for signal;
#X obj 30 15862 ui.plot~;
#X text 200 15862 signal plotter;
#X obj 30 15892 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 15889 2D slider in polar coordinates;
#X obj 30 15917 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 15914 Preset manager;
#X obj 30 15942 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 15939 counterpart of the vanilla radio toggle;
#X obj 30 15967 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 15964 range slider;
#X obj 30 15992 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 15989 Scope GUI object;
#X obj 30 16017 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 16014 counterpart of the vanilla slider;
#X obj 30 16042 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 16039 2D slider widget;
#X obj 30 16067 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 16064 Multiple slider widget;
#X obj 30 16092 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 16089 Spectroscope GUI object;
#X obj 30 16117 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 16114 displays a list of text buttons or text toggles;
#X obj 30 16142 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 16139 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 16164 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 16164 version: v0.8.0 \, license: GPL3;
#X obj 20 16185 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;