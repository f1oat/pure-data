#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 30 776 plot.geomspace~;
#X text 200 776 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 816 plot.linspace~;
#X text 200 816 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 20 856 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 911 ui.link @title [function] @url function-help.pd;
#X text 200 908 named function;
#X obj 30 933 function.call;
#X text 200 933 call named function;
#X obj 30 960 gain~;
#X text 200 960 multislot signal gain;
#X obj 30 987 matrix~;
#X text 200 987 signal routing matrix;
#X obj 30 1014 metro.pattern;
#X text 200 1014 metro with rhythmic patterns;
#X obj 30 1041 metro.random;
#X text 200 1041 metro random bang with specified range;
#X obj 30 1068 metro.seq;
#X text 200 1068 metro sequencer;
#X obj 30 1095 mix~;
#X text 200 1095 multislot signal mixer;
#X obj 30 1122 obj.props;
#X text 200 1122 property extractor;
#X obj 30 1149 radio;
#X text 200 1149 float index to outlet values as radio switch;
#X obj 30 1176 window;
#X text 200 1176 returns window value by given window position;
#X obj 30 1203 xdac~;
#X text 200 1203 dac~ with channel ranges;
#X obj 30 1230 xfade2~;
#X text 200 1230 multi stereo-signal crossfade;
#X obj 30 1257 xfade~;
#X text 200 1257 multi signal crossfade;
#X obj 20 1284 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1325 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1336 chaos.gbman0;
#X text 200 1336 Gingerbreadman map chaotic generator;
#X obj 30 1363 chaos.gbman0~;
#X text 200 1363 Gingerbreadman map chaotic generator;
#X obj 20 1390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1442 array.p2s;
#X text 200 1442 convert array phase [0\..1] to sample position;
#X obj 30 1469 array.s2p;
#X text 200 1469 convert array sample position to relative phase position
[0\..1];
#X obj 30 1509 conv.amp2dbfs;
#X text 200 1509 convert from amplitude to decibel full scale;
#X obj 30 1536 conv.amp2dbfs~;
#X text 200 1536 convert from amplitude to decibel full scale;
#X obj 30 1563 conv.bpm2hz;
#X text 200 1563 converts BPM to frequency in herz;
#X obj 30 1590 conv.bpm2ms;
#X text 200 1590 convert frequency in BPM to period in milliseconds;
#X obj 30 1617 conv.bpm2sec;
#X text 200 1617 convert frequency in BPM to period in seconds;
#X obj 30 1644 conv.car2pol;
#X text 200 1644 convert cartesian coords to polar;
#X obj 30 1671 conv.cc2amp;
#X text 200 1671 convert from MIDI Control Change range;
#X obj 30 1698 conv.dbfs2amp;
#X text 200 1698 convert decibel full scale to amplitude;
#X obj 30 1725 conv.lin2curve;
#X text 200 1725 map linear to exponential range with 0 allowed.;
#X obj 30 1752 conv.lin2exp;
#X text 200 1752 maps linear range to exponential range;
#X obj 30 1779 conv.lin2lin;
#X text 200 1779 convert from one linear range to another;
#X obj 30 1806 conv.lin2lin~;
#X text 200 1806 convert from one linear range to another for signals;
#X obj 30 1833 conv.list2props;
#X text 200 1833 converts list to series of property messages;
#X obj 30 1860 conv.midi2freq;
#X text 200 1860 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1900 conv.ms2samp;
#X text 200 1900 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 1940 conv.ms2samp~;
#X text 200 1940 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 1980 conv.phase2rad;
#X text 200 1980 convert phase value [0-1] to radians [0-2π];
#X obj 30 2007 conv.phase2rad~;
#X text 200 2007 convert phase value [0-1] to radians [0-2π];
#X obj 30 2034 conv.pitch2midi;
#X text 200 2034 converts symbol pitch name to MIDI note number;
#X obj 30 2061 conv.pol2car;
#X text 200 2061 convert from polar coordinates to cartesian;
#X obj 30 2088 conv.rad2phase;
#X text 200 2088 convert radians value to phase;
#X obj 30 2115 conv.rad2phase~;
#X text 200 2115 convert radians value to phase;
#X obj 30 2142 conv.samp2ms;
#X text 200 2142 convert samples to time according to samplerate;
#X obj 30 2169 conv.samp2ms~;
#X text 200 2169 convert samples to milliseconds according to samplerate;
#X obj 30 2196 conv.samp2sec;
#X text 200 2196 convert samples to time according to samplerate;
#X obj 30 2223 conv.sec2samp;
#X text 200 2223 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2263 conv.sec2str;
#X text 200 2263 converts float time in seconds to formated symbol
(or string);
#X obj 30 2290 conv.str2sec;
#X text 200 2290 converts formatted time to float value in seconds;
#X obj 20 2317 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2358 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2369 data.dict;
#X text 200 2369 dictionary container: store values by key;
#X obj 30 2396 data.fifo;
#X text 200 2396 First-In-First-Out (FIFO) queue data container;
#X obj 30 2423 data.float;
#X text 200 2423 robust float object;
#X obj 30 2450 data.int;
#X text 200 2450 robust int object;
#X obj 30 2477 data.list;
#X text 200 2477 list container;
#X obj 30 2504 data.mlist;
#X text 200 2504 multidimensional list container;
#X obj 30 2531 data.set;
#X text 200 2531 container that store unique elements;
#X obj 30 2558 data.set2list;
#X text 200 2558 converts set to list;
#X obj 30 2585 dict.contains;
#X text 200 2585 predicate to check if dict contains a keys;
#X obj 30 2612 dict.each;
#X text 200 2612 map each value in dict;
#X obj 30 2639 dict.from_list;
#X text 200 2639 creates dictionary from list;
#X obj 30 2666 dict.get;
#X text 200 2666 output dict values;
#X obj 30 2693 dict.keys;
#X text 200 2693 get list of dict keys;
#X obj 30 2720 dict.pass;
#X text 200 2720 passes specified keys in dict;
#X obj 30 2747 dict.reject;
#X text 200 2747 rejects specified keys from dict;
#X obj 30 2774 dict.size;
#X text 200 2774 dictionary size;
#X obj 30 2801 dict.to_list;
#X text 200 2801 converts dictionary to plain list;
#X obj 30 2828 dict.values;
#X text 200 2828 dictionary values as mlist;
#X obj 30 2855 mlist.flatten;
#X text 200 2855 flatten nested mlist;
#X obj 30 2882 set.contains;
#X text 200 2882 check if specified element is in set;
#X obj 30 2909 set.diff;
#X text 200 2909 difference between two sets;
#X obj 30 2936 set.equal;
#X text 200 2936 checks if two sets are equal (contains same elements);
#X obj 30 2963 set.intersect;
#X text 200 2963 output intersection of given sets;
#X obj 30 2990 set.size;
#X text 200 2990 get number of elements in set;
#X obj 30 3017 set.symdiff;
#X text 200 3017 symmetric difference between two sets;
#X obj 30 3044 set.union;
#X text 200 3044 output union of given sets;
#X obj 20 3071 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3112 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3123 dyn.comp2~;
#X text 200 3123 stereo dynamic range compressor;
#X obj 30 3150 dyn.comp~;
#X text 200 3150 mono dynamic range compressors;
#X obj 30 3177 dyn.gate2~;
#X text 200 3177 stereo signal gate;
#X obj 30 3204 dyn.gate~;
#X text 200 3204 mono signal gate;
#X obj 30 3231 dyn.limit2~;
#X text 200 3231 stereo 1176LN Peak Limiter;
#X obj 30 3258 dyn.limit~;
#X text 200 3258 mono 1176LN Peak Limiter;
#X obj 30 3285 dyn.softclip~;
#X text 200 3285 soft signal clip;
#X obj 20 3312 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3353 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3364 env.adsr~;
#X text 200 3364 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3391 env.ar~;
#X text 200 3391 Attack/Release envelope generator;
#X obj 30 3418 env.asr~;
#X text 200 3418 Attack/Sustain/Release envelope generator;
#X obj 30 3445 env.concat;
#X text 200 3445 Envelope concatenation;
#X obj 30 3472 env.follow~;
#X text 200 3472 Envelope follower with independent attack and release
times;
#X obj 30 3499 env.mix;
#X text 200 3499 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3539 env.smooth~;
#X text 200 3539 An envelope with an exponential attack and release;
#X obj 30 3566 env.tscale;
#X text 200 3566 Envelope time-scale;
#X obj 30 3593 env.tshift;
#X text 200 3593 Envelope time-shift (horizontal);
#X obj 30 3620 env.vscale;
#X text 200 3620 Envelope value-scale;
#X obj 30 3647 env2array;
#X text 200 3647 Renders envelope to specified array;
#X obj 30 3674 env2vline;
#X text 200 3674 Converts envelope to bunch of vline messages;
#X obj 30 3701 envelope;
#X text 200 3701 Envelope data type;
#X obj 30 3728 vline2env;
#X text 200 3728 Converts vline messages to env;
#X obj 20 3755 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3796 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3807 expand_env;
#X text 200 3807 Substitute enviroment variables in data stream;
#X obj 30 3834 flow.append;
#X text 200 3834 inject message into flow;
#X obj 30 3861 flow.change;
#X text 200 3861 rejects redundant input values;
#X obj 30 3888 flow.count;
#X text 200 3888 control flow event counter;
#X obj 30 3915 flow.demultiplex;
#X text 200 3915 control flow demultiplexer;
#X obj 30 3942 flow.demultiplex2~;
#X text 200 3942 audio stream stereo demultiplexer;
#X obj 30 3969 flow.demultiplex~;
#X text 200 3969 audio stream demultiplexer;
#X obj 30 3996 flow.gate;
#X text 200 3996 control flow gate. [spigot] analog;
#X obj 30 4023 flow.greater;
#X text 200 4023 numeric stream router;
#X obj 30 4050 flow.group;
#X text 200 4050 group data atoms in list of specified size;
#X obj 30 4077 flow.interval;
#X text 200 4077 measure time between flow events;
#X obj 30 4104 flow.less;
#X text 200 4104 numeric stream router \, like many [moses];
#X obj 30 4131 flow.less_eq;
#X text 200 4131 numeric stream router \, like many [moses];
#X obj 30 4158 flow.match;
#X text 200 4158 route data flow by regexp match;
#X obj 30 4185 flow.multiplex;
#X text 200 4185 control flow multiplexer;
#X obj 30 4212 flow.multiplex2~;
#X text 200 4212 audio stream stereo multiplexer;
#X obj 30 4239 flow.multiplex~;
#X text 200 4239 audio stream multiplexer;
#X obj 30 4266 flow.once;
#X text 200 4266 one message pass thru;
#X obj 30 4293 flow.pack;
#X text 200 4293 flow pack;
#X obj 30 4320 flow.pass;
#X text 200 4320 pass specified values;
#X obj 30 4347 flow.pass_if;
#X text 200 4347 pass values that accepted by predicate object;
#X obj 30 4374 flow.reject;
#X text 200 4374 reject specified values;
#X obj 30 4401 flow.reject_if;
#X text 200 4401 reject values by predicate;
#X obj 30 4428 flow.route;
#X text 200 4428 advanced message router;
#X obj 30 4455 flow.speedlim;
#X text 200 4455 control stream speed limiter;
#X obj 30 4482 flow.split;
#X text 200 4482 split data flow by external side-chain predicate;
#X obj 30 4509 flow.sync;
#X text 200 4509 bus with only hot inlets;
#X obj 30 4536 flow.sync_pack;
#X text 200 4536 flow pack with all hot inlets;
#X obj 30 4563 flow.tee~;
#X text 200 4563 separate audio and control streams;
#X obj 30 4590 replace;
#X text 200 4590 Replace atoms in data stream;
#X obj 20 4617 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4658 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4669 flt.biquad~;
#X text 200 4669 second order IIR filter.;
#X obj 30 4696 flt.bpf12~;
#X text 200 4696 Band-pass filter with 12/db per octave slope;
#X obj 30 4723 flt.bpf24~;
#X text 200 4723 Band-pass filter with 24/db per octave slope;
#X obj 30 4750 flt.c_bpf~;
#X text 200 4750 BPF coefficient calculator for biquad filter;
#X obj 30 4777 flt.c_highshelf~;
#X text 200 4777 Highshelf filter coefficient calculator for biquad;
#X obj 30 4804 flt.c_hpf~;
#X text 200 4804 HPF coefficient calculator for biquad filter;
#X obj 30 4831 flt.c_lowshelf~;
#X text 200 4831 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4858 flt.c_lpf~;
#X text 200 4858 LPF coefficient calculator for biquad filter;
#X obj 30 4885 flt.c_notch~;
#X text 200 4885 Band-reject coefficient calculator for biquad filter;
#X obj 30 4912 flt.c_peak~;
#X text 200 4912 Peaking equalizer calculator for biquad;
#X obj 30 4939 flt.dcblock2~;
#X text 200 4939 stereo DC blocker;
#X obj 30 4966 flt.dcblock~;
#X text 200 4966 mono DC blocker;
#X obj 30 4993 flt.eq10~;
#X text 200 4993 graphic 10 band equalizer;
#X obj 30 5020 flt.eq_peak_cq~;
#X text 200 5020 constant-Q second order peaking equalizer section;
#X obj 30 5047 flt.eq_peak~;
#X text 200 5047 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5102 flt.freqz~;
#X text 200 5102 compute the frequency response of a digital filter;
#X obj 30 5129 flt.highshelf~;
#X text 200 5129 gain boost|cut above some frequency;
#X obj 30 5156 flt.hpf12~;
#X text 200 5156 High-pass filter with 12/db per octave slope;
#X obj 30 5183 flt.hpf24~;
#X text 200 5183 High-pass filter with 24/db per octave slope;
#X obj 30 5210 flt.lowshelf~;
#X text 200 5210 gain boost|cut below some frequency;
#X obj 30 5237 flt.lpf12~;
#X text 200 5237 Low-pass filter with 12/db per octave slope;
#X obj 30 5264 flt.lpf24~;
#X text 200 5264 Low-pass filter with 24/db per octave slope;
#X obj 30 5291 flt.median;
#X text 200 5291 Median control flow filter;
#X obj 30 5318 flt.moog_vcf~;
#X text 200 5318 Moog Voltage Controlled Filter;
#X obj 30 5345 flt.notch~;
#X text 200 5345 band-rejection filter;
#X obj 30 5372 flt.resonbp~;
#X text 200 5372 Simple resonant bandpass filter;
#X obj 20 5399 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5440 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5451 fx.bitdown~;
#X text 200 5451 bit downer and downsampler effect;
#X obj 30 5478 fx.chorus~;
#X text 200 5478 Chorus effect;
#X obj 30 5505 fx.distortion1~;
#X text 200 5505 distortion #1 from Guitarix effects set;
#X obj 30 5532 fx.distortion2~;
#X text 200 5532 distortion #2 from Guitarix effects set;
#X obj 30 5559 fx.distortion3~;
#X text 200 5559 simple distortion #3 from Guitarix effects set;
#X obj 30 5586 fx.distortion~;
#X text 200 5586 cubic nonlinearity distortion;
#X obj 30 5613 fx.drive~;
#X text 200 5613 Guitarix drive effect;
#X obj 30 5640 fx.drone_box~;
#X text 200 5640 mono sympathetic resonance generator;
#X obj 30 5667 fx.echo~;
#X text 200 5667 simple echo effect;
#X obj 30 5694 fx.flanger~;
#X text 200 5694 mono flanging effect;
#X obj 30 5721 fx.freeverb2~;
#X text 200 5721 freeverb2 - stereo version of freeverb;
#X obj 30 5748 fx.freeverb~;
#X text 200 5748 freeverb - common used open-source reverb;
#X obj 30 5775 fx.freqshift~;
#X text 200 5775 frequency shifter or single-sideband ring modulation;
#X obj 30 5802 fx.granulator~;
#X text 200 5802 simple input stream granulator;
#X obj 30 5829 fx.greyhole~;
#X text 200 5829 A complex echo-like effect;
#X obj 30 5856 fx.looper~;
#X text 200 5856 One track looper;
#X obj 30 5883 fx.pitchshift~;
#X text 200 5883 simple pitch shifter based on 2 delay lines;
#X obj 30 5910 fx.sdelay~;
#X text 200 5910 smooth delay with a feedback control;
#X obj 30 5937 fx.vocoder~;
#X text 200 5937 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5977 fx.wahwah~;
#X text 200 5977 digitized CryBaby wah pedal;
#X obj 30 6004 fx.zita_rev1~;
#X text 200 6004 Zita stereo reverb;
#X obj 20 6031 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6072 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6083 global.dict;
#X text 200 6083 global named dict object;
#X obj 30 6110 global.float;
#X text 200 6110 global named float object;
#X obj 30 6137 global.int;
#X text 200 6137 global named integer object;
#X obj 30 6164 global.list;
#X text 200 6164 global named list object;
#X obj 30 6191 global.mlist;
#X text 200 6191 global named mlist object;
#X obj 30 6218 global.set;
#X text 200 6218 global named set object;
#X obj 20 6245 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6286 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6297 hw.apple_smc;
#X text 200 6297 query the system management control in Apples;
#X obj 30 6324 hw.apple_sms;
#X text 200 6324 query the sudden motion sensor in Apples;
#X obj 30 6351 hw.arduino;
#X text 200 6351 Arduino device;
#X obj 30 6378 hw.cpu_temp;
#X text 200 6378 get CPU temperature;
#X obj 30 6405 hw.display;
#X text 200 6405 get/set display properties;
#X obj 30 6432 hw.kbd_light;
#X text 200 6432 Get/set keyboard light on some devices;
#X obj 20 6459 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6500 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6511 lfo.+pulse~;
#X text 200 6511 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6538 lfo.+saw~;
#X text 200 6538 Positive unit-amplitude low frequency saw wave;
#X obj 30 6565 lfo.+square~;
#X text 200 6565 Positive low frequency square wave;
#X obj 30 6592 lfo.+tri~;
#X text 200 6592 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6619 lfo.impulse~;
#X text 200 6619 Unit-amplitude low-frequency impulse train;
#X obj 30 6646 lfo.pulse~;
#X text 200 6646 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6673 lfo.saw~;
#X text 200 6673 Full-range unit-amplitude low frequency saw;
#X obj 30 6700 lfo.square~;
#X text 200 6700 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6727 lfo.tri~;
#X text 200 6727 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6754 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6795 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6806 list.^at;
#X text 200 6806 on input index(es) outputs list element(s);
#X obj 30 6833 list.^contains;
#X text 200 6833 on input atom or list checks if specified list contains
it;
#X obj 30 6860 list.^search;
#X text 200 6860 on input atom returns it index in list;
#X obj 30 6887 list.all_of;
#X text 200 6887 checks if all list atoms accepted by predicate;
#X obj 30 6914 list.any_of;
#X text 200 6914 checks if at least one list element is accepted by
predicate;
#X obj 30 6941 list.append;
#X text 200 6941 append atom or list to the end of input list;
#X obj 30 6968 list.apply_to;
#X text 200 6968 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 7008 list.at;
#X text 200 7008 on input list outputs element(s) at specified index(es);
#X obj 30 7035 list.choice;
#X text 200 7035 returns random element from list;
#X obj 30 7062 list.contains;
#X text 200 7062 checks if input list contains specified atoms;
#X obj 30 7089 list.count;
#X text 200 7089 returns the number of items that equal to specified
value;
#X obj 30 7116 list.count_if;
#X text 200 7116 returns the number of items that satisfy to external
predicate.;
#X obj 30 7156 list.delta;
#X text 200 7156 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7196 list.distribution;
#X text 200 7196 list value distribution;
#X obj 30 7223 list.do;
#X text 200 7223 iterate and modify list contents via side-chain;
#X obj 30 7250 list.each;
#X text 200 7250 maps each list value via external object(s);
#X obj 30 7277 list.enumerate;
#X text 200 7277 enumerates input list;
#X obj 30 7304 list.equal;
#X text 200 7304 checks if given lists are equal;
#X obj 30 7331 list.first;
#X text 200 7331 returns first list element;
#X obj 30 7358 list.gen;
#X text 200 7358 generates list of specified length via external generator;
#X obj 30 7385 list.histogram;
#X text 200 7385 outputs distribution histogram;
#X obj 30 7412 list.insert;
#X text 200 7412 insert atom or list to the specified position of input
list;
#X obj 30 7439 list.integrator;
#X text 200 7439 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7479 list.last;
#X text 200 7479 returns last list element;
#X obj 30 7506 list.length;
#X text 200 7506 returns the number of atoms in the list;
#X obj 30 7533 list.max;
#X text 200 7533 returns largest element in the list;
#X obj 30 7560 list.mean;
#X text 200 7560 calculates average of list of floats;
#X obj 30 7587 list.min;
#X text 200 7587 returns smallest element in the list;
#X obj 30 7614 list.none_of;
#X text 200 7614 checks if none of list atoms is accepted by predicate;
#X obj 30 7641 list.normalize;
#X text 200 7641 normalizes float list values to get their sum = 1.0;
#X obj 30 7668 list.pass_if;
#X text 200 7668 leave only elements accepted by predicate;
#X obj 30 7695 list.prepend;
#X text 200 7695 prepend atom or list before input list;
#X obj 30 7722 list.product;
#X text 200 7722 calculates product of floats in list;
#X obj 30 7749 list.range;
#X text 200 7749 returns list smallest and largest value;
#X obj 30 7776 list.reduce;
#X text 200 7776 apply function of two arguments cumulatively to the
list;
#X obj 30 7803 list.remove;
#X text 200 7803 on input list remove element(s) at specified positions;
#X obj 30 7830 list.remove_if;
#X text 200 7830 remove elements by predicate;
#X obj 30 7857 list.repack;
#X text 200 7857 repack input list to specified size;
#X obj 30 7884 list.repeat;
#X text 200 7884 creates new list by repeating given list specified
times;
#X obj 30 7911 list.resample;
#X text 200 7911 resample list with specified ratio;
#X obj 30 7938 list.resize;
#X text 200 7938 changes list size;
#X obj 30 7965 list.reverse;
#X text 200 7965 reverses the order of the elements in the list;
#X obj 30 7992 list.rldecode;
#X text 200 7992 Run-length list decoder (RLE);
#X obj 30 8019 list.rlencode;
#X text 200 8019 RLE (run-length encoding) for lists;
#X obj 30 8046 list.rotate;
#X text 200 8046 rotates list;
#X obj 30 8073 list.route;
#X text 200 8073 acts like [route] but for lists;
#X obj 30 8100 list.search;
#X text 200 8100 search specified items in input list;
#X obj 30 8127 list.separate;
#X text 200 8127 sends list elements one by one separately;
#X obj 30 8154 list.seq;
#X text 200 8154 numeric sequence list generator;
#X obj 30 8181 list.set;
#X text 200 8181 on input list set value at specified position;
#X obj 30 8208 list.shift;
#X text 200 8208 shifts the contents of the list with linear interpolation;
#X obj 30 8235 list.shuffle;
#X text 200 8235 randomly rearranges elements in list;
#X obj 30 8262 list.slice;
#X text 200 8262 extract sublist;
#X obj 30 8289 list.sort;
#X text 200 8289 sorts list values by ascending order;
#X obj 30 8316 list.sort_with;
#X text 200 8316 sort list with user defined side-chain;
#X obj 30 8343 list.split;
#X text 200 8343 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8383 list.stretch;
#X text 200 8383 stretches list - changes its size with linear interpolation;
#X obj 30 8410 list.sum;
#X text 200 8410 calculates sum of floats in list;
#X obj 30 8437 list.unique;
#X text 200 8437 removes duplicates from input list;
#X obj 30 8464 list.unpack;
#X text 200 8464 unpack list elements to separate outlets;
#X obj 30 8491 list.unzip;
#X text 200 8491 splits list to N lists \, each to separate output;
#X obj 30 8518 list.walk;
#X text 200 8518 Walks thru the list;
#X obj 30 8545 list.zip;
#X text 200 8545 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8600 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8641 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8652 live.capture~;
#X text 200 8652 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8692 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8733 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8744 local.dict;
#X text 200 8744 local named dict object;
#X obj 30 8771 local.float;
#X text 200 8771 canvas-scoped named float variable;
#X obj 30 8798 local.int;
#X text 200 8798 canvas-scoped named integer variable;
#X obj 30 8825 local.list;
#X text 200 8825 local named list object;
#X obj 30 8852 local.mlist;
#X text 200 8852 local named mlist object;
#X obj 30 8879 local.set;
#X text 200 8879 local named set object;
#X obj 20 8906 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8947 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8958 math.abs;
#X text 200 8958 absolute value function;
#X obj 30 8985 math.abs~;
#X text 200 8985 absolute value function for signals;
#X obj 30 9012 math.acos;
#X text 200 9012 arc cosine function;
#X obj 30 9039 math.acosh;
#X text 200 9039 inverse hyperbolic cosine function;
#X obj 30 9066 math.acos~;
#X text 200 9066 arc cosine function for signals;
#X obj 30 9093 math.and;
#X text 200 9093 operation AND for multiple arguments;
#X obj 30 9120 math.approx;
#X text 200 9120 check if input value approximately equal to pattern;
#X obj 30 9147 math.asin;
#X text 200 9147 arc sine function;
#X obj 30 9174 math.asinh;
#X text 200 9174 inverse hyperbolic sine function;
#X obj 30 9201 math.atan;
#X text 200 9201 arc tangent function;
#X obj 30 9228 math.atanh;
#X text 200 9228 inverse hyperbolic tangent function;
#X obj 30 9255 math.cabs~;
#X text 200 9255 magnitude of a complex signals;
#X obj 30 9282 math.carg~;
#X text 200 9282 phase angle of a complex signals;
#X obj 30 9309 math.cbrt;
#X text 200 9309 cube root function;
#X obj 30 9336 math.cdiv~;
#X text 200 9336 division of complex signals;
#X obj 30 9363 math.ceil;
#X text 200 9363 round to smallest integral value not less than input
value;
#X obj 30 9390 math.ceil~;
#X text 200 9390 round to smallest integral value not less than input
value;
#X obj 30 9417 math.cexp~;
#X text 200 9417 exponent of a complex signals;
#X obj 30 9444 math.cmul~;
#X text 200 9444 multiplication of complex signals;
#X obj 30 9471 math.cos;
#X text 200 9471 cosine function;
#X obj 30 9498 math.cosh;
#X text 200 9498 hyperbolic cosine function;
#X obj 30 9525 math.cos~;
#X text 200 9525 cosine function;
#X obj 30 9552 math.div;
#X text 200 9552 division (on lists too);
#X obj 30 9579 math.e;
#X text 200 9579 mathematical constant \, base of the natural logarithm;
#X obj 30 9606 math.erf~;
#X text 200 9606 error function for signals;
#X obj 30 9633 math.exp;
#X text 200 9633 exponential functions;
#X obj 30 9660 math.exp2;
#X text 200 9660 exponential functions;
#X obj 30 9687 math.exp2~;
#X text 200 9687 base-2 exponential for signal;
#X obj 30 9714 math.expr;
#X text 200 9714 dynamic [expr];
#X obj 30 9741 math.floor;
#X text 200 9741 round to largest integral value not greater than x;
#X obj 30 9768 math.floor~;
#X text 200 9768 round to largest integral value not greater than x;
#X obj 30 9795 math.gamma;
#X text 200 9795 gamma function;
#X obj 30 9822 math.gamma~;
#X text 200 9822 gamma function for floating point signals;
#X obj 30 9849 math.gcd;
#X text 200 9849 calculate greatest common divisor;
#X obj 30 9876 math.inf;
#X text 200 9876 infinity value that cannot be represented accurately;
#X obj 30 9903 math.lcm;
#X text 200 9903 calculate least common multiple;
#X obj 30 9930 math.lgamma;
#X text 200 9930 natural logarithm of the absolute value of the gamma
function;
#X obj 30 9957 math.lgamma~;
#X text 200 9957 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 9997 math.log;
#X text 200 9997 logarithm functions;
#X obj 30 10024 math.log10;
#X text 200 10024 logarithm functions;
#X obj 30 10051 math.log2;
#X text 200 10051 logarithm functions;
#X obj 30 10078 math.mul;
#X text 200 10078 multiplication (on lists too);
#X obj 30 10105 math.nan;
#X text 200 10105 Not a Number \, unrepresentable value;
#X obj 30 10132 math.neg;
#X text 200 10132 negate function;
#X obj 30 10159 math.or;
#X text 200 10159 operation OR for multiple arguments;
#X obj 30 10186 math.pi;
#X text 200 10186 mathematical constant;
#X obj 30 10213 math.pi~;
#X text 200 10213 mathematical constant;
#X obj 30 10240 math.polyeval;
#X text 200 10240 evaluates the polynomial described by the coefficients
list;
#X obj 30 10267 math.reciprocal;
#X text 200 10267 calculate reciprocal number;
#X obj 30 10294 math.reciprocal~;
#X text 200 10294 calculate reciprocal number for signals;
#X obj 30 10321 math.round;
#X text 200 10321 round to integral value \, regardless of rounding
direction;
#X obj 30 10348 math.round~;
#X text 200 10348 signal round;
#X obj 30 10375 math.sign;
#X text 200 10375 sign function;
#X obj 30 10402 math.sin;
#X text 200 10402 sine function;
#X obj 30 10429 math.sinh;
#X text 200 10429 hyperbolic sine function;
#X obj 30 10456 math.sin~;
#X text 200 10456 sine function;
#X obj 30 10483 math.sqrt;
#X text 200 10483 square root function;
#X obj 30 10510 math.squared;
#X text 200 10510 value square;
#X obj 30 10537 math.squared~;
#X text 200 10537 signal value square;
#X obj 30 10564 math.sync_add;
#X text 200 10564 sync addition;
#X obj 30 10591 math.sync_and;
#X text 200 10591 sync logical AND operation;
#X obj 30 10618 math.sync_div;
#X text 200 10618 sync division;
#X obj 30 10645 math.sync_eq;
#X text 200 10645 sync equal numbers check;
#X obj 30 10672 math.sync_ge;
#X text 200 10672 sync greater equal numbers compare;
#X obj 30 10699 math.sync_gt;
#X text 200 10699 sync greater then numbers compare;
#X obj 30 10726 math.sync_le;
#X text 200 10726 sync less equal numbers compare;
#X obj 30 10753 math.sync_lt;
#X text 200 10753 sync less then numbers compare;
#X obj 30 10780 math.sync_mod;
#X text 200 10780 sync remainder of modulo division (float or integer);
#X obj 30 10807 math.sync_mul;
#X text 200 10807 sync multiplication;
#X obj 30 10834 math.sync_ne;
#X text 200 10834 sync numbers for not equality;
#X obj 30 10861 math.sync_or;
#X text 200 10861 sync logical OR operation;
#X obj 30 10888 math.sync_sub;
#X text 200 10888 sync subtraction;
#X obj 30 10915 math.sync_xor;
#X text 200 10915 sync logical XOR operation;
#X obj 30 10942 math.tan;
#X text 200 10942 tangent function;
#X obj 30 10969 math.tanh;
#X text 200 10969 hyperbolic tangent function;
#X obj 30 10996 math.trunc;
#X text 200 10996 truncate to integer value;
#X obj 20 11023 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 11064 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11075 midi.ctl2str;
#X text 200 11075 convert Standard MIDI Controllers number to name;
#X obj 30 11102 midi.event2ctl;
#X text 200 11102 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11129 midi.event2note;
#X text 200 11129 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11156 midi.event2prg;
#X text 200 11156 convert MidiEvent message to midi program change
value;
#X obj 30 11183 midi.file;
#X text 200 11183 standard midi file SMF reader and writer;
#X obj 30 11210 midi.key2str;
#X text 200 11210 convert key number to SPN name according to tonality;
#X obj 30 11237 midi.prg2str;
#X text 200 11237 convert GM Instrument number to name (string or symbol);
#X obj 30 11264 midi.track;
#X text 200 11264 extract track from MidiFile;
#X obj 20 11291 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 11332 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11343 click~;
#X text 200 11343 Output single impulse on bang;
#X obj 30 11370 fluid~;
#X text 200 11370 FluidSynth SoundFont 2 player;
#X obj 30 11397 modplug~;
#X text 200 11397 MOD file player (using libmodplug);
#X obj 30 11424 speech.flite;
#X text 200 11424 render speech to array;
#X obj 20 11451 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 11492 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11503 msg;
#X text 200 11503 message constructor;
#X obj 30 11530 msg.after;
#X text 200 11530 send specified message after incoming message;
#X obj 30 11557 msg.onload;
#X text 200 11557 send message when patch loads;
#X obj 20 11584 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 11625 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11636 net.host2ip;
#X text 200 11636 returns IP address by DNS name;
#X obj 20 11663 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 11704 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11715 noise.crackle~;
#X text 200 11715 sparse noise generator;
#X obj 30 11742 noise.lfreq0~;
#X text 200 11742 sampled/held noise (piecewise constant);
#X obj 30 11769 noise.lfreq~;
#X text 200 11769 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 11796 noise.pink~;
#X text 200 11796 Pink noise generator;
#X obj 30 11823 noise.white~;
#X text 200 11823 White noise generator;
#X obj 20 11850 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 11891 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11902 osc.blit~;
#X text 200 11902 Bandlimited impulse train oscillator;
#X obj 30 11929 osc.impulse~;
#X text 200 11929 Bandlimited impulse train generator;
#X obj 30 11956 osc.pulse~;
#X text 200 11956 Bandlimited pulse train oscillator;
#X obj 30 11983 osc.saw4~;
#X text 200 11983 Bandlimited sawtooth wave;
#X obj 30 12010 osc.saw~;
#X text 200 12010 Alias-free sawtooth wave;
#X obj 30 12037 osc.sinfb~;
#X text 200 12037 Sine oscilator with feedback;
#X obj 30 12064 osc.sin~;
#X text 200 12064 Sine wave oscillator;
#X obj 30 12091 osc.square~;
#X text 200 12091 Bandlimited square wave oscillator;
#X obj 30 12118 osc.tri~;
#X text 200 12118 Bandlimited triangle wave oscillator;
#X obj 20 12145 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12186 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12197 canvas.current;
#X text 200 12197 verbose information about current canvas;
#X obj 30 12224 canvas.dir;
#X text 200 12224 current canvas directory;
#X obj 30 12251 canvas.name;
#X text 200 12251 current canvas name;
#X obj 30 12278 canvas.path;
#X text 200 12278 current canvas fullpath;
#X obj 30 12305 canvas.top;
#X text 200 12305 verbose information about top-level canvas;
#X obj 30 12332 patch.args;
#X text 200 12332 Get patch or subpatch arguments;
#X obj 20 12359 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 12400 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12411 path.basename;
#X text 200 12411 outputs filename portion of pathname;
#X obj 30 12438 path.dirname;
#X text 200 12438 outputs directory portion of pathname;
#X obj 30 12465 path.exists;
#X text 200 12465 checks if given path exists;
#X obj 30 12492 path.is_dir;
#X text 200 12492 check if path is directory;
#X obj 30 12519 path.lsdir;
#X text 200 12519 list directory contents;
#X obj 20 12546 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 12587 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12598 is_any;
#X text 200 12598 checks if input data has *any* type;
#X obj 30 12625 is_bang;
#X text 200 12625 checks if input data has *bang* type;
#X obj 30 12652 is_data;
#X text 200 12652 checks if input data has *data* type;
#X obj 30 12679 is_dict;
#X text 200 12679 checks if input data has *dict* type;
#X obj 30 12706 is_even;
#X text 200 12706 checks if input number is even;
#X obj 30 12733 is_file;
#X text 200 12733 checks if file exists and accessible;
#X obj 30 12760 is_float;
#X text 200 12760 checks if input data has *float* type;
#X obj 30 12787 is_list;
#X text 200 12787 checks if input data has *list* type;
#X obj 30 12814 is_odd;
#X text 200 12814 checks if input number is odd;
#X obj 30 12841 is_pointer;
#X text 200 12841 checks if input data has *pointer* type;
#X obj 30 12868 is_symbol;
#X text 200 12868 checks if input data has *symbol* type;
#X obj 20 12895 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 12936 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12947 preset.float;
#X text 200 12947 load/store float preset;
#X obj 30 12974 preset.list;
#X text 200 12974 load/store symbol preset;
#X obj 30 13001 preset.storage;
#X text 200 13001 preset storage control;
#X obj 30 13028 preset.symbol;
#X text 200 13028 load/store symbol preset;
#X obj 20 13055 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 13096 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13107 patch.props;
#X text 200 13107 patch properties manager;
#X obj 30 13134 prop;
#X text 200 13134 get/set named property value for subpatch or abstraction;
#X obj 30 13161 prop.declare;
#X text 200 13161 declare named property for subpatch or abstraction;
#X obj 30 13188 prop.get;
#X text 200 13188 Property extractor;
#X obj 30 13215 prop.get~;
#X text 200 13215 Property extractor from sound stream;
#X obj 30 13242 prop.set;
#X text 200 13242 Property injector;
#X obj 20 13269 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 13310 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13321 proto.firmata;
#X text 200 13321 Firmata Arduino protocol support;
#X obj 30 13348 proto.sp.alpaca;
#X text 200 13348 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 13375 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 13416 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13427 random.discrete;
#X text 200 13427 random weighted integers on interval [0 \, n);
#X obj 30 13454 random.float;
#X text 200 13454 random float generator in specified range;
#X obj 30 13481 random.gauss;
#X text 200 13481 gaussian random distribution;
#X obj 30 13508 random.int;
#X text 200 13508 Random integer generator in specified range;
#X obj 30 13535 random.linear;
#X text 200 13535 random linear distribution;
#X obj 30 13562 random.pw_const;
#X text 200 13562 piecewise constant random distribution;
#X obj 30 13589 random.pw_lin;
#X text 200 13589 piecewise linear random distribution;
#X obj 20 13616 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 13657 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13668 snd.file;
#X text 200 13668 Sound file loader on steroids;
#X obj 20 13695 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 13736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13747 hoa.2d.decoder~;
#X text 200 13747 hoa 2d decoder;
#X obj 30 13774 hoa.2d.encoder~;
#X text 200 13774 hoa 2d encoder;
#X obj 30 13801 hoa.2d.map~;
#X text 200 13801 a 2d ambisonic multisource spatializer;
#X obj 30 13828 hoa.2d.optim~;
#X text 200 13828 a 2D ambisonic optimization tool;
#X obj 30 13855 hoa.2d.projector~;
#X text 200 13855 a plane waves decomposer from circular harmonics
domain;
#X obj 30 13882 hoa.2d.recomposer~;
#X text 200 13882 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 13922 hoa.2d.rotate~;
#X text 200 13922 a 2D ambisonic sound field rotation;
#X obj 30 13949 hoa.2d.wider~;
#X text 200 13949 a 2d fractional ambisonic order simulator;
#X obj 30 13976 hoa.@process;
#X text 200 13976 process properties manager for hoa.process~;
#X obj 30 14003 hoa.in;
#X text 200 14003 message inlet for a patcher loaded by hoa.process~;
#X obj 30 14030 hoa.in~;
#X text 200 14030 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14057 hoa.out;
#X text 200 14057 message outlet for a patcher loaded by hoa.process~;
#X obj 30 14084 hoa.out~;
#X text 200 14084 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14111 hoa.process~;
#X text 200 14111 patcher loader for multichannel processing;
#X obj 30 14141 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 14138 a 2d ambisonic harmonic scope;
#X obj 30 14163 pan.cos~;
#X text 200 14163 two channel equal power sine/cosine panner;
#X obj 30 14190 pan.linsig~;
#X text 200 14190 two channel linear panner with signal control;
#X obj 30 14217 pan.lin~;
#X text 200 14217 two channel linear panner;
#X obj 30 14244 pan.spread~;
#X text 200 14244 spreads input channels across the stereo field;
#X obj 30 14271 pan.sqrt~;
#X text 200 14271 two channel equal power square root panner;
#X obj 30 14298 spat.pan4~;
#X text 200 14298 GMEM SPAT: 4-outputs spatializer;
#X obj 30 14325 spat.pan8~;
#X text 200 14325 GMEM SPAT: 8-outputs spatializer;
#X obj 20 14352 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 14393 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14404 string;
#X text 200 14404 string constructor;
#X obj 30 14431 string.contains;
#X text 200 14431 checks if given string contains specified substring;
#X obj 30 14458 string.ends_with;
#X text 200 14458 checks if given string ends with specified suffix;
#X obj 30 14485 string.equal;
#X text 200 14485 check strings for equality;
#X obj 30 14512 string.format;
#X text 200 14512 formats string like printf.;
#X obj 30 14539 string.join;
#X text 200 14539 joins (concatenates) strings with separator;
#X obj 30 14566 string.length;
#X text 200 14566 number of characters in string (unicode supported);
#X obj 30 14593 string.match;
#X text 200 14593 check if string match regular expression;
#X obj 30 14620 string.remove;
#X text 200 14620 remove substring from input string;
#X obj 30 14647 string.replace;
#X text 200 14647 replace from one substring to another in input string;
#X obj 30 14674 string.split;
#X text 200 14674 split string by separator;
#X obj 30 14701 string.starts_with;
#X text 200 14701 checks if given string starts with specified prefix;
#X obj 30 14728 string.substr;
#X text 200 14728 extract substring from input string;
#X obj 30 14755 string2symbol;
#X text 200 14755 converts string to symbol;
#X obj 20 14782 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 14823 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14834 symbol.equal;
#X text 200 14834 check symbols for equality;
#X obj 30 14861 symbol.length;
#X text 200 14861 number of characters in symbol (unicode supported);
#X obj 30 14888 symbol.num_compare;
#X text 200 14888 numeric symbol compare;
#X obj 20 14915 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14956 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14967 synth.bee3~;
#X text 200 14967 Hammond-oid organ FM synthesis instrument;
#X obj 30 14994 synth.birds~;
#X text 200 14994 bird singing generator;
#X obj 30 15021 synth.church_bell~;
#X text 200 15021 generic church bell modal model;
#X obj 30 15048 synth.dubdub~;
#X text 200 15048 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 15088 synth.eguitar~;
#X text 200 15088 simple electric guitar model with steel strings;
#X obj 30 15115 synth.fgrain~;
#X text 200 15115 file granulator from STK;
#X obj 30 15142 synth.ks~;
#X text 200 15142 Karplus-Strong string;
#X obj 30 15169 synth.marimba~;
#X text 200 15169 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 15209 synth.rhodey~;
#X text 200 15209 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 15236 synth.risset_arp~;
#X text 200 15236 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 15263 synth.risset_tone~;
#X text 200 15263 Jean Claude Risset's endless glissando;
#X obj 30 15290 synth.shakers~;
#X text 200 15290 various percussion sounds from STK library;
#X obj 30 15317 synth.wurley~;
#X text 200 15317 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 15344 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 15385 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15396 system.colorpanel;
#X text 200 15396 System color panel dialog popup;
#X obj 30 15423 system.cursor;
#X text 200 15423 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 15450 system.getenv;
#X text 200 15450 Get system environment variables;
#X obj 30 15477 system.hostname;
#X text 200 15477 outputs system hostname;
#X obj 30 15504 system.memsize;
#X text 200 15504 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 15544 system.memused;
#X text 200 15544 returns the process physical memory use - current
and peak;
#X obj 30 15571 system.screen_size;
#X text 200 15571 returns current screen size in pixels;
#X obj 30 15598 system.shell;
#X text 200 15598 run external command in separate process;
#X obj 20 15625 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 15666 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15677 tl.bang;
#X text 200 15677 Timeline bang (with possible delay);
#X obj 30 15707 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 15704 Timeline section;
#X obj 30 15729 tl.timeline;
#X text 200 15729 Timeline - event scheduler;
#X obj 30 15756 tl.toggle;
#X text 200 15756 Timeline bang;
#X obj 30 15783 tl.transport;
#X text 200 15783 Timeline transport control;
#X obj 20 15810 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 15851 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15865 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 15862 array view with cursor and selection;
#X obj 30 15890 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 15887 A bang... that's all;
#X obj 30 15915 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 15912 colorchooser widget;
#X obj 30 15940 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 15937 Display GUI object;
#X obj 30 15965 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15962 GUI for turning DSP on/off;
#X obj 30 15990 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15987 envelope editor widget;
#X obj 30 16015 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 16012 UI stereo gain control;
#X obj 30 16040 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 16037 UI gain control;
#X obj 30 16065 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 16062 simple icon with button capabilities;
#X obj 30 16090 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 16087 value increment/decrement;
#X obj 30 16115 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 16112 keyboard widget;
#X obj 30 16140 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 16137 knob widget;
#X obj 30 16165 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 16162 simple label widget;
#X obj 30 16190 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 16187 Hyperlink widget;
#X obj 30 16215 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 16212 The matrix of toggles has you.;
#X obj 30 16240 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 16237 Dropdown menu;
#X obj 30 16265 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 16262 Shows peak and rms signal level;
#X obj 30 16290 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 16287 filter mouse events from ui objects;
#X obj 30 16315 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 16312 routes mouse events from ui objects;
#X obj 30 16340 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 16337 counterpart of the vanilla [nbx];
#X obj 30 16365 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 16362 counterpart of the vanilla [nbx] for signal;
#X obj 30 16390 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 16387 signal plotter;
#X obj 30 16415 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 16412 2D slider in polar coordinates;
#X obj 30 16440 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 16437 Preset manager;
#X obj 30 16465 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 16462 counterpart of the vanilla radio toggle;
#X obj 30 16490 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 16487 range slider;
#X obj 30 16515 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 16512 Scope GUI object;
#X obj 30 16540 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 16537 counterpart of the vanilla slider;
#X obj 30 16565 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 16562 2D slider widget;
#X obj 30 16590 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 16587 Multiple slider widget;
#X obj 30 16615 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 16612 Spectroscope GUI object;
#X obj 30 16640 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 16637 displays a list of text buttons or text toggles;
#X obj 30 16665 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 16662 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 16687 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 16687 version: v0.8.0 \, license: GPL3;
#X obj 20 16708 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;