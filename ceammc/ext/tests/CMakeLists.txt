include_directories(${PROJECT_SOURCE_DIR}/ceammc/ext/src/lib)
include_directories(${PROJECT_SOURCE_DIR}/src)
include_directories(${CMAKE_BINARY_DIR}) # for config.h
include(tests.cmake)
add_definitions("-DTEST_DATA_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
add_definitions("-DTEST_BIN_DIR=\"${CMAKE_CURRENT_BINARY_DIR}\"")

if(WIN32)
    remove_definitions(-DPD_INTERNAL)
endif()

set(CATCH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Catch2)
add_library(Catch2::Catch IMPORTED INTERFACE)
set_target_properties(Catch2::Catch PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${CATCH_INCLUDE_DIR}")

add_library(tests_main_lib STATIC
    tests_main.cpp
    test_approx.cpp
    test_datatypes.cpp
    test_external.cpp
    test_external_log_output.cpp
    test_wrappers.cpp
)

target_include_directories(tests_main_lib PUBLIC "${CATCH_INCLUDE_DIR}")

if(APPLE)
    set(CMAKE_INSTALL_RPATH "@loader_path/../src/lib")
endif()

ceammc_add_core_test("ceammc::Array" test_array)
ceammc_add_core_test("ceammc::arrayname_parser" test_arrayname_parser)
ceammc_add_core_test("ceammc::BaseObject" test_baseobject)
ceammc_add_core_test("ceammc::Canvas" test_canvas)
ceammc_add_core_test("ceammc::External" test_pd_external)
ceammc_add_core_test("ceammc::Factory" test_factory)
ceammc_add_core_test("ceammc::ObjectInfoStorage" test_object_info)
ceammc_add_core_test("ceammc::SharedData" test_shareddata)
ceammc_add_core_test("ceammc::SoundExternal" test_sound_external)
ceammc_add_core_test("ceammc::faust" test_faust)
ceammc_add_core_test("ceammc::log" test_log)
ceammc_add_core_test("ceammc::music_theory" test_music_theory)
ceammc_add_core_test("ceammc::music_theory_alteration" test_music_theory_alteration)
ceammc_add_core_test("ceammc::music_theory_keyboard" test_music_theory_keyboard)
ceammc_add_core_test("ceammc::music_theory_pitch_class" test_music_theory_pitch_class)
ceammc_add_core_test("ceammc::music_theory_pitch_name" test_music_theory_pitch_name)
ceammc_add_core_test("ceammc::proxy" test_proxy)
ceammc_add_core_test("ceammc::signal" test_signal)
ceammc_add_core_test("ceammc::timeline" test_timeline)
ceammc_add_core_test("ceammc::window" test_window)
ceammc_add_core_test("class_wrapper::fn_traits" test_wrapper_fn_traits)
ceammc_add_core_test("class_wrapper::tuple" test_wrapper_tuple)

ceammc_add_core_test("pd::ceammc" test_pd_core)

if(WITH_LIBSNDFILE)
    include(FindLibSndFile)
    if(LIBSNDFILE_FOUND)
        include_directories(${LIBSNDFILE_INCLUDE_DIRS})
        ceammc_add_core_test("ceammc::libsndfile" test_libsndfile)
        ceammc_add_core_test("ceammc::sound" test_sound)
    endif()
endif()


ceammc_external_test(analyze onset)
ceammc_external_test(fx looper)
ceammc_external_test(proto firmata)
ceammc_external_test(net host)
target_include_directories(test_ext_net_host PUBLIC ${PROJECT_SOURCE_DIR}/ceammc/extra)

ceammc_add_test_linked(TITLE "tl.transport"
    NAME test_ext_tl_transport
    LINK ceammc_tl ceammc_ui ceammc_core puredata-core ceammc_core)
ceammc_external_test(tl timeline)

ceammc_add_extension_test("ext_symbol_equal" "../src/symbol/symbol_equal.cpp")
ceammc_add_extension_test("ext_symbol_num_compare" "../src/symbol/symbol_num_compare.cpp")

ceammc_add_test_linked(TITLE "tl::parser" NAME test_tl_parser LINK ceammc_tl)
ceammc_add_test_linked(TITLE "ceammc::pd" NAME test_pd SRC "../src/base/debug_gensym.cpp" LINK ceammc_core puredata-core)

ceammc_add_test_linked(TITLE "ceammc::DataTypeMidiStream"
    NAME test_datatype_midistream
    SRC test_datatype_midistream.cpp
    LINK ceammc_core puredata-core ceammc_midi ceammc_core)

ceammc_add_test_linked(TITLE "ceammc::DataTypeMidiTrack"
    NAME test_datatype_miditrack
    SRC test_datatype_miditrack.cpp
    LINK ceammc_core puredata-core ceammc_midi ceammc_core)

ceammc_add_test_linked(TITLE "ceammc::DataTypeEnv"
    NAME test_datatype_env
    SRC test_datatype_env.cpp
    LINK ceammc_env ceammc_core puredata-core)

ceammc_add_test_linked(TITLE "ceammc::DataTypeProperty"
    NAME test_datatype_property
    SRC test_datatype_property.cpp
    LINK ceammc_base ceammc_core puredata-core)

if(APPLE AND CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    ceammc_add_test_linked(
        TITLE "ceammc::coreaudio_loader"
        NAME test_coreaudio
        LINK ceammc_core)
endif()

ceammc_add_test_linked(
    TITLE "Serial"
    NAME test_serialport
    INCLUDE_DIRECTORIES ${CMAKE_SOURCE_DIR}/ceammc/extra/serial/serial/include
    LINK serial)

ceammc_add_test_linked(TITLE "FirmataParser[bison]" NAME test_firmata_parser LINK proto_firmata)
ceammc_add_test_linked(TITLE "firmata::Pin" NAME test_firmata_pin LINK proto_firmata ceammc_core puredata-core)

ceammc_add_test_linked(TITLE "ArduinoThread"
    NAME test_arduino_thread
    INCLUDE_DIRECTORIES ${CMAKE_SOURCE_DIR}/ceammc/extra/serial/serial/include
    LINK tests_main_lib hw_arduino ceammc_core puredata-core)
ceammc_add_test_linked(TITLE "Arduino" NAME test_arduino LINK tests_main_lib hw_arduino ceammc_core puredata-core)

if(WITH_TTS_FLITE)
    ceammc_external_test(misc speech_flite)
endif()

if(WITH_FLUIDSYNTH)
    ceammc_external_test(misc fluid)
endif()

ceammc_add_test_linked(TITLE "class_wrapper::class" NAME test_wrapper_class LINK wrapper_lib)
ceammc_add_test_linked(TITLE "class_wrapper::method" NAME test_wrapper_method LINK wrapper_lib)
ceammc_add_test_linked(TITLE "class_wrapper::static_method" NAME test_wrapper_static_method LINK wrapper_lib)

add_custom_target(test_src SOURCES gen_test_wav.py)

# put binaries from subdir targets in current directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

add_subdirectory(cells)

add_subdirectory(array)
add_subdirectory(base)
add_subdirectory(conv)
add_subdirectory(data)
add_subdirectory(env)
add_subdirectory(flow)
add_subdirectory(flt)
add_subdirectory(list)
add_subdirectory(math)
add_subdirectory(midi)
add_subdirectory(path)
add_subdirectory(preset)
add_subdirectory(spat)
add_subdirectory(random)
add_subdirectory(string)
add_subdirectory(system)
add_subdirectory(ui)
