#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 528 50 cnv 1 212 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 528 50 objects for list processing;
#X obj 30 116 list.^at;
#X text 200 116 on input index(es) outputs list element(s);
#X obj 30 143 list.^contains;
#X text 200 143 checks if input atom is found in the list;
#X obj 30 170 list.^search;
#X text 200 170 on input atom returns it index in list;
#X obj 30 197 list.all_of;
#X text 200 197 checks if all list atoms accepted by predicate;
#X obj 30 224 list.any_of;
#X text 200 224 checks if at least one list element is accepted by
predicate;
#X obj 30 251 list.append;
#X text 200 251 append atom or list to the end of input list;
#X obj 30 278 list.apply_to;
#X text 200 278 modifies list value at specified position \, filtering
it via external object;
#X obj 30 318 list.at;
#X text 200 318 outputs list element(s) at specified index(es);
#X obj 30 345 list.choice;
#X text 200 345 outputs random element from list;
#X obj 30 372 list.contains;
#X text 200 372 checks if input list contains specified atoms;
#X obj 30 399 list.convolve;
#X text 200 399 convolution for lists;
#X obj 30 426 list.count;
#X text 200 426 output the number of items that equal to specified
value;
#X obj 30 453 list.count_if;
#X text 200 453 output the number of items that satisfy to external
predicate;
#X obj 30 480 list.delta;
#X text 200 480 returns the difference between the current list of
floats and the previous one.;
#X obj 30 520 list.distribution;
#X text 200 520 list value distribution;
#X obj 30 547 list.do;
#X text 200 547 iterate and modify list contents via side-chain;
#X obj 30 574 list.each;
#X text 200 574 maps each list value via external side-chain;
#X obj 30 601 list.enumerate;
#X text 200 601 enumerates input list;
#X obj 30 628 list.equal;
#X text 200 628 checks if given lists are equal;
#X obj 30 655 list.first;
#X text 200 655 returns first list element;
#X obj 30 682 list.gen;
#X text 200 682 generates list of specified length via external generator;
#X obj 30 709 list.histogram;
#X text 200 709 outputs distribution histogram;
#X obj 30 736 list.insert;
#X text 200 736 insert atom or list to the specified position of input
list;
#X obj 30 763 list.integrator;
#X text 200 763 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 803 list.last;
#X text 200 803 output last list element;
#X obj 30 830 list.length;
#X text 200 830 output the number of atoms in the list;
#X obj 30 857 list.max;
#X text 200 857 output largest element in the list;
#X obj 30 884 list.mean;
#X text 200 884 calculates average of list of floats;
#X obj 30 911 list.min;
#X text 200 911 returns smallest element in the list;
#X obj 30 938 list.none_of;
#X text 200 938 checks if none of list atoms is accepted by predicate;
#X obj 30 965 list.normalize;
#X text 200 965 normalizes float list values to get their sum = 1.0;
#X obj 30 992 list.pass_if;
#X text 200 992 leave only elements accepted by predicate;
#X obj 30 1019 list.prepend;
#X text 200 1019 prepend atom or list before input list;
#X obj 30 1046 list.product;
#X text 200 1046 calculates product of floats in list;
#X obj 30 1073 list.range;
#X text 200 1073 output list smallest and largest value;
#X obj 30 1100 list.reduce;
#X text 200 1100 apply function of two arguments cumulatively to the
list;
#X obj 30 1127 list.remove;
#X text 200 1127 remove list element(s) at specified positions;
#X obj 30 1154 list.remove_if;
#X text 200 1154 remove elements by predicate;
#X obj 30 1181 list.repack;
#X text 200 1181 repack list to specified size;
#X obj 30 1208 list.repeat;
#X text 200 1208 output new list by repeating input list specified
times;
#X obj 30 1235 list.resample;
#X text 200 1235 resample list with specified ratio;
#X obj 30 1262 list.resize;
#X text 200 1262 changes list size;
#X obj 30 1289 list.reverse;
#X text 200 1289 reverses the order of the elements in the list;
#X obj 30 1316 list.rldecode;
#X text 200 1316 Run-length list decoder (RLE);
#X obj 30 1343 list.rlencode;
#X text 200 1343 RLE (run-length encoding) for lists;
#X obj 30 1370 list.rotate;
#X text 200 1370 rotates list;
#X obj 30 1397 list.route;
#X text 200 1397 acts like [route] but for lists;
#X obj 30 1424 list.rundiff;
#X text 200 1424 running difference;
#X obj 30 1451 list.runsum;
#X text 200 1451 running sum;
#X obj 30 1478 list.search;
#X text 200 1478 search specified items in input list;
#X obj 30 1505 list.separate;
#X text 200 1505 sends list elements one by one separately;
#X obj 30 1532 list.seq;
#X text 200 1532 numeric sequence list generator;
#X obj 30 1559 list.set;
#X text 200 1559 set list value at specified position;
#X obj 30 1586 list.shift;
#X text 200 1586 shifts the contents of the list with linear interpolation;
#X obj 30 1613 list.shuffle;
#X text 200 1613 randomly rearranges elements in list;
#X obj 30 1640 list.slice;
#X text 200 1640 extract sublist;
#X obj 30 1667 list.sort;
#X text 200 1667 sorts list values by ascending order;
#X obj 30 1694 list.sort_with;
#X text 200 1694 sort list with user defined side-chain;
#X obj 30 1721 list.split;
#X text 200 1721 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 1761 list.stretch;
#X text 200 1761 stretches list - changes its size with linear interpolation;
#X obj 30 1788 list.sum;
#X text 200 1788 calculates sum of floats in list;
#X obj 30 1815 list.unique;
#X text 200 1815 removes duplicates from input list;
#X obj 30 1842 list.unpack;
#X text 200 1842 unpack list elements to separate outlets;
#X obj 30 1869 list.unzip;
#X text 200 1869 splits list to N lists \, each to separate output;
#X obj 30 1896 list.walk;
#X text 200 1896 Walks thru the list;
#X obj 30 1923 list.zip;
#X text 200 1923 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::list 20 20 0 20 -104026
-4096 0;
#X obj 1 1978 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 1988 library: ceammc;