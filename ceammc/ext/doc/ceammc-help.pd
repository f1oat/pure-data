#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot~;
#X text 200 560 plot signal on specified array;
#X obj 30 587 array.resample;
#X text 200 587 array resampler;
#X obj 30 614 array.rms;
#X text 200 614 calculates root mean square value for array;
#X obj 30 641 array.set;
#X text 200 641 set array content from list;
#X obj 30 668 array.stddev;
#X text 200 668 calculates standard deviation for array values;
#X obj 30 695 array.stretch;
#X text 200 695 array time-stretch \, pitch-shift or rate-change;
#X obj 30 722 array.sum;
#X text 200 722 calculates sum of array elements;
#X obj 30 749 array.sum2;
#X text 200 749 calculates sum of squares of array elements;
#X obj 30 776 array.variance;
#X text 200 776 calculates variance of array values;
#X obj 30 803 array.vplay;
#X text 200 803 simple array player for using with vline~;
#X obj 30 830 array.window;
#X text 200 830 fill array with window;
#X obj 30 857 plot.geomspace~;
#X text 200 857 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 897 plot.hist~;
#X text 200 897 calculate and output signal histogram;
#X obj 30 924 plot.linspace~;
#X text 200 924 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 964 plot.logspace~;
#X text 200 964 outputs numbers spaced evenly on a log scale;
#X obj 30 991 plot.response~;
#X text 200 991 output amp/phase freq response to impulse;
#X obj 20 1018 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1059 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1070 ceammc.search;
#X text 200 1070 ceammc library search object;
#X obj 30 1100 ui.link @title [function] @url function-help.pd;
#X text 200 1097 named function;
#X obj 30 1122 function.call;
#X text 200 1122 call named function;
#X obj 30 1149 gain~;
#X text 200 1149 multislot signal gain;
#X obj 30 1176 logger;
#X text 200 1176 advanced data logger;
#X obj 30 1203 matrix~;
#X text 200 1203 signal routing matrix;
#X obj 30 1230 metro.pattern;
#X text 200 1230 metro with rhythmic patterns;
#X obj 30 1257 metro.random;
#X text 200 1257 metro random bang with specified range;
#X obj 30 1284 metro.seq;
#X text 200 1284 metro sequencer;
#X obj 30 1311 mix~;
#X text 200 1311 multislot signal mixer;
#X obj 30 1338 nsig~;
#X text 200 1338 Mulitchannel converter from control to audio rate;
#X obj 30 1365 obj.props;
#X text 200 1365 property extractor;
#X obj 30 1392 radio;
#X text 200 1392 float index to outlet values as radio switch;
#X obj 30 1419 sync;
#X text 200 1419 value synchronization;
#X obj 30 1446 window;
#X text 200 1446 returns window value by given window position;
#X obj 30 1473 xdac~;
#X text 200 1473 dac~ with channel ranges;
#X obj 30 1500 xfade2~;
#X text 200 1500 multi stereo-signal crossfade;
#X obj 30 1527 xfade~;
#X text 200 1527 multi signal crossfade;
#X obj 20 1554 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1595 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1606 chaos.gbman0;
#X text 200 1606 Gingerbreadman map chaotic generator;
#X obj 30 1633 chaos.gbman0~;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.jong;
#X text 200 1660 Peter de Jong attractor;
#X obj 30 1687 chaos.logistic;
#X text 200 1687 Logistic map chaotic generator;
#X obj 30 1714 chaos.std0;
#X text 200 1714 Standard map chaotic generator;
#X obj 30 1741 chaos.std0~;
#X text 200 1741 Standard map chaotic generator;
#X obj 20 1768 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1809 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1820 array.p2s;
#X text 200 1820 convert array phase [0\..1] to sample position;
#X obj 30 1847 array.s2p;
#X text 200 1847 convert array sample position to relative phase position
[0\..1];
#X obj 30 1887 conv.amp2dbfs;
#X text 200 1887 convert from amplitude to decibel full scale;
#X obj 30 1914 conv.amp2dbfs~;
#X text 200 1914 convert from amplitude to decibel full scale;
#X obj 30 1941 conv.bpm2hz;
#X text 200 1941 converts BPM to frequency in herz;
#X obj 30 1968 conv.bpm2ms;
#X text 200 1968 convert frequency in BPM to period in milliseconds;
#X obj 30 1995 conv.bpm2sec;
#X text 200 1995 convert frequency in BPM to period in seconds;
#X obj 30 2022 conv.car2pol;
#X text 200 2022 convert cartesian coords to polar;
#X obj 30 2049 conv.cc2amp;
#X text 200 2049 convert from MIDI Control Change range;
#X obj 30 2076 conv.dbfs2amp;
#X text 200 2076 convert decibel full scale to amplitude;
#X obj 30 2103 conv.dbfs2amp~;
#X text 200 2103 convert decibel full scale to amplitude;
#X obj 30 2130 conv.degree2key;
#X text 200 2130 convert scale degree to key;
#X obj 30 2157 conv.hex2int;
#X text 200 2157 hex symbol to int value;
#X obj 30 2184 conv.int2bits;
#X text 200 2184 convert integer to list of bits;
#X obj 30 2211 conv.lin2curve;
#X text 200 2211 map linear to exponential range with 0 allowed.;
#X obj 30 2238 conv.lin2exp;
#X text 200 2238 maps linear range to exponential range;
#X obj 30 2265 conv.lin2lin;
#X text 200 2265 convert from one linear range to another;
#X obj 30 2292 conv.lin2lin~;
#X text 200 2292 convert from one linear range to another for signals;
#X obj 30 2319 conv.list2props;
#X text 200 2319 converts list to series of property messages;
#X obj 30 2346 conv.midi2freq;
#X text 200 2346 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2386 conv.ms2bpm;
#X text 200 2386 convert period in milliseconds to frequency in BPM;
#X obj 30 2413 conv.ms2samp;
#X text 200 2413 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2453 conv.ms2samp~;
#X text 200 2453 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2493 conv.phase2rad;
#X text 200 2493 convert phase value [0-1] to radians [0-2π];
#X obj 30 2520 conv.phase2rad~;
#X text 200 2520 convert phase value [0-1] to radians [0-2π];
#X obj 30 2547 conv.pitch2midi;
#X text 200 2547 converts symbol pitch name to MIDI note number;
#X obj 30 2574 conv.pol2car;
#X text 200 2574 convert from polar coordinates to cartesian;
#X obj 30 2601 conv.rad2phase;
#X text 200 2601 convert radians value to phase;
#X obj 30 2628 conv.rad2phase~;
#X text 200 2628 convert radians value to phase;
#X obj 30 2655 conv.samp2ms;
#X text 200 2655 convert samples to time according to samplerate;
#X obj 30 2682 conv.samp2ms~;
#X text 200 2682 convert samples to milliseconds according to samplerate;
#X obj 30 2709 conv.samp2sec;
#X text 200 2709 convert samples to time according to samplerate;
#X obj 30 2736 conv.sec2bpm;
#X text 200 2736 convert period in seconds to frequency in BPM;
#X obj 30 2763 conv.sec2samp;
#X text 200 2763 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2803 conv.sec2str;
#X text 200 2803 converts float time in seconds to formated symbol
(or string);
#X obj 30 2830 conv.str2sec;
#X text 200 2830 converts formatted time to float value in seconds;
#X obj 20 2857 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2898 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2909 data.dict;
#X text 200 2909 dictionary container: store values by key;
#X obj 30 2936 data.fifo;
#X text 200 2936 First-In-First-Out (FIFO) queue data container;
#X obj 30 2963 data.float;
#X text 200 2963 robust float object;
#X obj 30 2990 data.int;
#X text 200 2990 robust int object;
#X obj 30 3017 data.list;
#X text 200 3017 list container;
#X obj 30 3044 data.mlist;
#X text 200 3044 multidimensional list container;
#X obj 30 3071 data.set;
#X text 200 3071 container that store unique elements;
#X obj 30 3098 data.set2list;
#X text 200 3098 converts set to list;
#X obj 30 3125 dict.contains;
#X text 200 3125 predicate to check if dict contains a keys;
#X obj 30 3152 dict.each;
#X text 200 3152 map each value in dict;
#X obj 30 3179 dict.from_list;
#X text 200 3179 creates dictionary from list;
#X obj 30 3206 dict.get;
#X text 200 3206 output dict values;
#X obj 30 3233 dict.keys;
#X text 200 3233 get list of dict keys;
#X obj 30 3260 dict.pass;
#X text 200 3260 passes specified keys in dict;
#X obj 30 3287 dict.reject;
#X text 200 3287 rejects specified keys from dict;
#X obj 30 3314 dict.size;
#X text 200 3314 dictionary size;
#X obj 30 3341 dict.to_list;
#X text 200 3341 converts dictionary to plain list;
#X obj 30 3368 dict.values;
#X text 200 3368 dictionary values as mlist;
#X obj 30 3395 mlist.flatten;
#X text 200 3395 flatten nested mlist;
#X obj 30 3422 rtree.to_list;
#X text 200 3422 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3449 set.contains;
#X text 200 3449 check if specified element is in set;
#X obj 30 3476 set.diff;
#X text 200 3476 difference between two sets;
#X obj 30 3503 set.equal;
#X text 200 3503 checks if two sets are equal (contains same elements);
#X obj 30 3530 set.intersect;
#X text 200 3530 output intersection of given sets;
#X obj 30 3557 set.size;
#X text 200 3557 get number of elements in set;
#X obj 30 3584 set.symdiff;
#X text 200 3584 symmetric difference between two sets;
#X obj 30 3611 set.union;
#X text 200 3611 output union of given sets;
#X obj 20 3638 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3679 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3690 dyn.comp2~;
#X text 200 3690 stereo dynamic range compressor;
#X obj 30 3717 dyn.comp~;
#X text 200 3717 mono dynamic range compressors;
#X obj 30 3744 dyn.gate2~;
#X text 200 3744 stereo signal gate;
#X obj 30 3771 dyn.gate~;
#X text 200 3771 mono signal gate;
#X obj 30 3798 dyn.limit2~;
#X text 200 3798 stereo 1176LN Peak Limiter;
#X obj 30 3825 dyn.limit~;
#X text 200 3825 mono 1176LN Peak Limiter;
#X obj 30 3852 dyn.softclip~;
#X text 200 3852 soft signal clip;
#X obj 20 3879 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3920 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3931 env.adsr~;
#X text 200 3931 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3958 env.ar~;
#X text 200 3958 Attack/Release envelope generator;
#X obj 30 3985 env.asr~;
#X text 200 3985 Attack/Sustain/Release envelope generator;
#X obj 30 4012 env.concat;
#X text 200 4012 Envelope concatenation;
#X obj 30 4039 env.follow~;
#X text 200 4039 Envelope follower with independent attack and release
times;
#X obj 30 4066 env.mix;
#X text 200 4066 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4106 env.smooth~;
#X text 200 4106 An envelope with an exponential attack and release;
#X obj 30 4133 env.tscale;
#X text 200 4133 Envelope time-scale;
#X obj 30 4160 env.tshift;
#X text 200 4160 Envelope time-shift (horizontal);
#X obj 30 4187 env.vscale;
#X text 200 4187 Envelope value-scale;
#X obj 30 4214 env2array;
#X text 200 4214 Renders envelope to specified array;
#X obj 30 4241 env2vline;
#X text 200 4241 Converts envelope to bunch of vline messages;
#X obj 30 4268 envelope;
#X text 200 4268 Envelope data type;
#X obj 30 4295 vline2env;
#X text 200 4295 Converts vline messages to env;
#X obj 20 4322 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4363 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4374 expand_env;
#X text 200 4374 Substitute environment variables in data stream;
#X obj 30 4401 flow.append;
#X text 200 4401 append message to flow stream;
#X obj 30 4428 flow.change;
#X text 200 4428 rejects redundant input values;
#X obj 30 4455 flow.count;
#X text 200 4455 control flow event counter;
#X obj 30 4482 flow.delay;
#X text 200 4482 enhanced version on vanilla delay object;
#X obj 30 4509 flow.demultiplex;
#X text 200 4509 control flow demultiplexer;
#X obj 30 4536 flow.demultiplex2~;
#X text 200 4536 audio stream stereo demultiplexer;
#X obj 30 4563 flow.demultiplex~;
#X text 200 4563 audio stream demultiplexer;
#X obj 30 4590 flow.dup;
#X text 200 4590 message duplicator;
#X obj 30 4617 flow.gate;
#X text 200 4617 control flow gate. [spigot] analog;
#X obj 30 4644 flow.greater;
#X text 200 4644 numeric stream router;
#X obj 30 4671 flow.greater_eq;
#X text 200 4671 numeric stream router;
#X obj 30 4698 flow.group;
#X text 200 4698 group input atoms in list of specified size;
#X obj 30 4725 flow.interval;
#X text 200 4725 measure time between flow events;
#X obj 30 4752 flow.less;
#X text 200 4752 numeric stream router \, like many [moses];
#X obj 30 4779 flow.less_eq;
#X text 200 4779 numeric stream router \, like many [moses];
#X obj 30 4806 flow.match;
#X text 200 4806 route data flow by regexp match;
#X obj 30 4833 flow.mem;
#X text 200 4833 store data flow in memory;
#X obj 30 4860 flow.multiplex;
#X text 200 4860 control flow multiplexer;
#X obj 30 4887 flow.multiplex2~;
#X text 200 4887 audio stream stereo multiplexer;
#X obj 30 4914 flow.multiplex~;
#X text 200 4914 audio stream multiplexer;
#X obj 30 4941 flow.once;
#X text 200 4941 one message pass thru;
#X obj 30 4968 flow.pack;
#X text 200 4968 flow pack;
#X obj 30 4995 flow.pass;
#X text 200 4995 pass specified values;
#X obj 30 5022 flow.pass_if;
#X text 200 5022 pass values that accepted by predicate object;
#X obj 30 5049 flow.pipe;
#X text 200 5049 enhanced version on vanilla pipe object;
#X obj 30 5076 flow.queue;
#X text 200 5076 multi-channel control flow sync queue (or FIFO);
#X obj 30 5103 flow.reject;
#X text 200 5103 reject specified values;
#X obj 30 5130 flow.reject_if;
#X text 200 5130 reject values by predicate;
#X obj 30 5157 flow.ring;
#X text 200 5157 dataflow ring buffer;
#X obj 30 5184 flow.route;
#X text 200 5184 advanced message router;
#X obj 30 5211 flow.select;
#X text 200 5211 vanilla flow on steroids;
#X obj 30 5238 flow.space;
#X text 200 5238 space in time messages received at the same logical
time;
#X obj 30 5265 flow.speedlim;
#X text 200 5265 control stream speed limiter;
#X obj 30 5292 flow.split;
#X text 200 5292 split data flow by external side-chain predicate;
#X obj 30 5319 flow.stack;
#X text 200 5319 any message stack;
#X obj 30 5346 flow.sync;
#X text 200 5346 bus with only hot inlets;
#X obj 30 5373 flow.sync_pack;
#X text 200 5373 flow pack with all hot inlets;
#X obj 30 5400 flow.tee~;
#X text 200 5400 separate audio and control streams;
#X obj 30 5427 replace;
#X text 200 5427 Replace atoms in data stream;
#X obj 30 5454 route.float;
#X text 200 5454 separate float messages from other types;
#X obj 20 5481 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5522 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5533 flt.biquad~;
#X text 200 5533 second order IIR filter.;
#X obj 30 5560 flt.bpf12~;
#X text 200 5560 Two pole band-pass butterworth filter;
#X obj 30 5587 flt.bpf24~;
#X text 200 5587 Four pole band-pass butterworth filter;
#X obj 30 5614 flt.c_bpf~;
#X text 200 5614 BPF coefficient calculator for biquad filter;
#X obj 30 5641 flt.c_highshelf~;
#X text 200 5641 Highshelf filter coefficient calculator for biquad;
#X obj 30 5668 flt.c_hpf~;
#X text 200 5668 HPF coefficient calculator for biquad filter;
#X obj 30 5695 flt.c_lowshelf~;
#X text 200 5695 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5722 flt.c_lpf~;
#X text 200 5722 LPF coefficient calculator for biquad filter;
#X obj 30 5749 flt.c_notch~;
#X text 200 5749 Band-reject coefficient calculator for biquad filter;
#X obj 30 5776 flt.c_peak~;
#X text 200 5776 Peaking equalizer calculator for biquad;
#X obj 30 5803 flt.dcblock2~;
#X text 200 5803 stereo DC blocker;
#X obj 30 5830 flt.dcblock~;
#X text 200 5830 mono DC blocker;
#X obj 30 5857 flt.eq10~;
#X text 200 5857 graphic 10 band equalizer;
#X obj 30 5884 flt.eq_peak_cq~;
#X text 200 5884 constant-Q second order peaking equalizer section;
#X obj 30 5911 flt.eq_peak~;
#X text 200 5911 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5966 flt.fb_comb~;
#X text 200 5966 feedback comb filter;
#X obj 30 5993 flt.ff_comb~;
#X text 200 5993 feed forward comb filter;
#X obj 30 6020 flt.freqz~;
#X text 200 6020 compute the frequency response of a digital filter;
#X obj 30 6047 flt.highshelf~;
#X text 200 6047 gain boost|cut above some frequency;
#X obj 30 6074 flt.hpf12~;
#X text 200 6074 High-pass second order Butterworth filter;
#X obj 30 6101 flt.hpf24~;
#X text 200 6101 High-pass fourth order Butterworth filter;
#X obj 30 6128 flt.lowshelf~;
#X text 200 6128 gain boost|cut below some frequency;
#X obj 30 6155 flt.lpf12~;
#X text 200 6155 Low-pass second order Butterworth filter;
#X obj 30 6182 flt.lpf24~;
#X text 200 6182 Low-pass fourth order Butterworth filter;
#X obj 30 6209 flt.median;
#X text 200 6209 Median control flow filter;
#X obj 30 6236 flt.moog_vcf~;
#X text 200 6236 Moog Voltage Controlled Filter;
#X obj 30 6263 flt.notch~;
#X text 200 6263 band-rejection filter;
#X obj 30 6290 flt.resonbp~;
#X text 200 6290 Simple resonant bandpass filter;
#X obj 20 6317 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6358 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6369 fx.bitdown~;
#X text 200 6369 bit downer and downsampler effect;
#X obj 30 6396 fx.chorus~;
#X text 200 6396 Chorus effect;
#X obj 30 6423 fx.distortion1~;
#X text 200 6423 distortion #1 from Guitarix effects set;
#X obj 30 6450 fx.distortion2~;
#X text 200 6450 distortion #2 from Guitarix effects set;
#X obj 30 6477 fx.distortion3~;
#X text 200 6477 simple distortion #3 from Guitarix effects set;
#X obj 30 6504 fx.distortion~;
#X text 200 6504 cubic nonlinearity distortion;
#X obj 30 6531 fx.drive~;
#X text 200 6531 Guitarix drive effect;
#X obj 30 6558 fx.drone_box~;
#X text 200 6558 mono sympathetic resonance generator;
#X obj 30 6585 fx.echo~;
#X text 200 6585 simple echo effect;
#X obj 30 6612 fx.flanger~;
#X text 200 6612 mono flanging effect;
#X obj 30 6639 fx.freeverb2~;
#X text 200 6639 freeverb2 - stereo version of freeverb;
#X obj 30 6666 fx.freeverb~;
#X text 200 6666 freeverb - common used open-source reverb;
#X obj 30 6693 fx.freqshift~;
#X text 200 6693 frequency shifter or single-sideband ring modulation;
#X obj 30 6720 fx.granulator~;
#X text 200 6720 simple input stream granulator;
#X obj 30 6747 fx.greyhole~;
#X text 200 6747 A complex echo-like effect;
#X obj 30 6774 fx.looper~;
#X text 200 6774 One track looper;
#X obj 30 6801 fx.pitchshift_s~;
#X text 200 6801 signal version of fx.pitchshift~;
#X obj 30 6828 fx.pitchshift~;
#X text 200 6828 simple pitch shifter based on 2 delay lines;
#X obj 30 6855 fx.sdelay~;
#X text 200 6855 smooth delay with a feedback control;
#X obj 30 6882 fx.vocoder~;
#X text 200 6882 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6922 fx.wahwah~;
#X text 200 6922 digitized CryBaby wah pedal;
#X obj 30 6949 fx.zita_rev1~;
#X text 200 6949 Zita stereo reverb;
#X obj 20 6976 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7017 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7028 global.dict;
#X text 200 7028 global named dict object;
#X obj 30 7055 global.float;
#X text 200 7055 global named float object;
#X obj 30 7082 global.int;
#X text 200 7082 global named integer object;
#X obj 30 7109 global.list;
#X text 200 7109 global named list object;
#X obj 30 7136 global.mlist;
#X text 200 7136 global named mlist object;
#X obj 30 7163 global.set;
#X text 200 7163 global named set object;
#X obj 20 7190 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7231 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7242 hw.apple_smc;
#X text 200 7242 query the system management control in Apples;
#X obj 30 7269 hw.apple_sms;
#X text 200 7269 query the sudden motion sensor in Apples;
#X obj 30 7296 hw.arduino;
#X text 200 7296 Arduino device;
#X obj 30 7323 hw.cpu_temp;
#X text 200 7323 get CPU temperature;
#X obj 30 7350 hw.display;
#X text 200 7350 get/set display properties;
#X obj 30 7377 hw.kbd_light;
#X text 200 7377 Get/set keyboard light on some devices;
#X obj 20 7404 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7445 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7456 lfo.+pulse~;
#X text 200 7456 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7483 lfo.+saw~;
#X text 200 7483 Positive unit-amplitude low frequency saw wave;
#X obj 30 7510 lfo.+square~;
#X text 200 7510 Positive low frequency square wave;
#X obj 30 7537 lfo.+tri~;
#X text 200 7537 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7564 lfo.impulse~;
#X text 200 7564 Unit-amplitude low-frequency impulse train;
#X obj 30 7591 lfo.pulse~;
#X text 200 7591 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7618 lfo.saw~;
#X text 200 7618 Full-range unit-amplitude low frequency saw;
#X obj 30 7645 lfo.square~;
#X text 200 7645 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7672 lfo.tri~;
#X text 200 7672 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7699 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7740 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7751 list.^at;
#X text 200 7751 on input index(es) outputs list element(s);
#X obj 30 7778 list.^contains;
#X text 200 7778 checks if input atom is found in the list;
#X obj 30 7805 list.^search;
#X text 200 7805 on input atom returns it index in list;
#X obj 30 7832 list.all_of;
#X text 200 7832 checks if all list atoms accepted by predicate;
#X obj 30 7859 list.any_of;
#X text 200 7859 checks if at least one list element is accepted by
predicate;
#X obj 30 7886 list.append;
#X text 200 7886 append atom or list to the end of input list;
#X obj 30 7913 list.apply_to;
#X text 200 7913 modifies list value at specified position \, filtering
it via external object;
#X obj 30 7953 list.at;
#X text 200 7953 outputs list element(s) at specified index(es);
#X obj 30 7980 list.choice;
#X text 200 7980 outputs random element from list;
#X obj 30 8007 list.contains;
#X text 200 8007 checks if input list contains specified atoms;
#X obj 30 8034 list.count;
#X text 200 8034 output the number of items that equal to specified
value;
#X obj 30 8061 list.count_if;
#X text 200 8061 output the number of items that satisfy to external
predicate;
#X obj 30 8088 list.delta;
#X text 200 8088 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8128 list.distribution;
#X text 200 8128 list value distribution;
#X obj 30 8155 list.do;
#X text 200 8155 iterate and modify list contents via side-chain;
#X obj 30 8182 list.each;
#X text 200 8182 maps each list value via external side-chain;
#X obj 30 8209 list.enumerate;
#X text 200 8209 enumerates input list;
#X obj 30 8236 list.equal;
#X text 200 8236 checks if given lists are equal;
#X obj 30 8263 list.first;
#X text 200 8263 returns first list element;
#X obj 30 8290 list.gen;
#X text 200 8290 generates list of specified length via external generator;
#X obj 30 8317 list.histogram;
#X text 200 8317 outputs distribution histogram;
#X obj 30 8344 list.insert;
#X text 200 8344 insert atom or list to the specified position of input
list;
#X obj 30 8371 list.integrator;
#X text 200 8371 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8411 list.last;
#X text 200 8411 output last list element;
#X obj 30 8438 list.length;
#X text 200 8438 output the number of atoms in the list;
#X obj 30 8465 list.max;
#X text 200 8465 output largest element in the list;
#X obj 30 8492 list.mean;
#X text 200 8492 calculates average of list of floats;
#X obj 30 8519 list.min;
#X text 200 8519 returns smallest element in the list;
#X obj 30 8546 list.none_of;
#X text 200 8546 checks if none of list atoms is accepted by predicate;
#X obj 30 8573 list.normalize;
#X text 200 8573 normalizes float list values to get their sum = 1.0;
#X obj 30 8600 list.pass_if;
#X text 200 8600 leave only elements accepted by predicate;
#X obj 30 8627 list.prepend;
#X text 200 8627 prepend atom or list before input list;
#X obj 30 8654 list.product;
#X text 200 8654 calculates product of floats in list;
#X obj 30 8681 list.range;
#X text 200 8681 output list smallest and largest value;
#X obj 30 8708 list.reduce;
#X text 200 8708 apply function of two arguments cumulatively to the
list;
#X obj 30 8735 list.remove;
#X text 200 8735 remove list element(s) at specified positions;
#X obj 30 8762 list.remove_if;
#X text 200 8762 remove elements by predicate;
#X obj 30 8789 list.repack;
#X text 200 8789 repack list to specified size;
#X obj 30 8816 list.repeat;
#X text 200 8816 output new list by repeating input list specified
times;
#X obj 30 8843 list.resample;
#X text 200 8843 resample list with specified ratio;
#X obj 30 8870 list.resize;
#X text 200 8870 changes list size;
#X obj 30 8897 list.reverse;
#X text 200 8897 reverses the order of the elements in the list;
#X obj 30 8924 list.rldecode;
#X text 200 8924 Run-length list decoder (RLE);
#X obj 30 8951 list.rlencode;
#X text 200 8951 RLE (run-length encoding) for lists;
#X obj 30 8978 list.rotate;
#X text 200 8978 rotates list;
#X obj 30 9005 list.route;
#X text 200 9005 acts like [route] but for lists;
#X obj 30 9032 list.search;
#X text 200 9032 search specified items in input list;
#X obj 30 9059 list.separate;
#X text 200 9059 sends list elements one by one separately;
#X obj 30 9086 list.seq;
#X text 200 9086 numeric sequence list generator;
#X obj 30 9113 list.set;
#X text 200 9113 set list value at specified position;
#X obj 30 9140 list.shift;
#X text 200 9140 shifts the contents of the list with linear interpolation;
#X obj 30 9167 list.shuffle;
#X text 200 9167 randomly rearranges elements in list;
#X obj 30 9194 list.slice;
#X text 200 9194 extract sublist;
#X obj 30 9221 list.sort;
#X text 200 9221 sorts list values by ascending order;
#X obj 30 9248 list.sort_with;
#X text 200 9248 sort list with user defined side-chain;
#X obj 30 9275 list.split;
#X text 200 9275 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9315 list.stretch;
#X text 200 9315 stretches list - changes its size with linear interpolation;
#X obj 30 9342 list.sum;
#X text 200 9342 calculates sum of floats in list;
#X obj 30 9369 list.unique;
#X text 200 9369 removes duplicates from input list;
#X obj 30 9396 list.unpack;
#X text 200 9396 unpack list elements to separate outlets;
#X obj 30 9423 list.unzip;
#X text 200 9423 splits list to N lists \, each to separate output;
#X obj 30 9450 list.walk;
#X text 200 9450 Walks thru the list;
#X obj 30 9477 list.zip;
#X text 200 9477 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9532 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9573 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9584 live.capture~;
#X text 200 9584 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9624 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9665 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9676 local.dict;
#X text 200 9676 local named dict object;
#X obj 30 9703 local.float;
#X text 200 9703 canvas-scoped named float variable;
#X obj 30 9730 local.int;
#X text 200 9730 canvas-scoped named integer variable;
#X obj 30 9757 local.list;
#X text 200 9757 local named list object;
#X obj 30 9784 local.mlist;
#X text 200 9784 local named mlist object;
#X obj 30 9811 local.set;
#X text 200 9811 local named set object;
#X obj 20 9838 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9879 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9890 math.abs;
#X text 200 9890 absolute value function;
#X obj 30 9917 math.abs~;
#X text 200 9917 absolute value function for signals;
#X obj 30 9944 math.acos;
#X text 200 9944 arc cosine function;
#X obj 30 9971 math.acosh;
#X text 200 9971 inverse hyperbolic cosine function;
#X obj 30 9998 math.acosh~;
#X text 200 9998 hyperbolic arc cosine for signals;
#X obj 30 10025 math.acos~;
#X text 200 10025 arc cosine function for signals;
#X obj 30 10052 math.and;
#X text 200 10052 operation AND for multiple arguments;
#X obj 30 10079 math.approx;
#X text 200 10079 check if input value approximately equal to pattern;
#X obj 30 10106 math.asin;
#X text 200 10106 arc sine function;
#X obj 30 10133 math.asinh;
#X text 200 10133 inverse hyperbolic sine function;
#X obj 30 10160 math.asinh~;
#X text 200 10160 hyperbolic arc sine for signals;
#X obj 30 10187 math.asin~;
#X text 200 10187 arc sine for signals;
#X obj 30 10214 math.atan;
#X text 200 10214 arc tangent function;
#X obj 30 10241 math.atanh;
#X text 200 10241 inverse hyperbolic tangent function;
#X obj 30 10268 math.atanh~;
#X text 200 10268 hyperbolic arc tangent for signals;
#X obj 30 10295 math.atan~;
#X text 200 10295 arc tangent for signals;
#X obj 30 10322 math.cabs~;
#X text 200 10322 magnitude of a complex signals;
#X obj 30 10349 math.carg~;
#X text 200 10349 phase angle of a complex signals;
#X obj 30 10376 math.cbrt;
#X text 200 10376 cube root function;
#X obj 30 10403 math.cbrt~;
#X text 200 10403 cube root function for signals;
#X obj 30 10430 math.cdiv~;
#X text 200 10430 division of complex signals;
#X obj 30 10457 math.ceil;
#X text 200 10457 round to smallest integral value not less than input
value;
#X obj 30 10484 math.ceil~;
#X text 200 10484 round to smallest integral value not less than input
value;
#X obj 30 10511 math.cexp~;
#X text 200 10511 exponent of a complex signals;
#X obj 30 10538 math.cmul~;
#X text 200 10538 multiplication of complex signals;
#X obj 30 10565 math.cos;
#X text 200 10565 cosine function;
#X obj 30 10592 math.cosh;
#X text 200 10592 hyperbolic cosine function;
#X obj 30 10619 math.cosh~;
#X text 200 10619 hyperbolic cosine for signals;
#X obj 30 10646 math.cos~;
#X text 200 10646 cosine function;
#X obj 30 10673 math.div;
#X text 200 10673 division (on lists too);
#X obj 30 10700 math.e;
#X text 200 10700 mathematical constant \, base of the natural logarithm;
#X obj 30 10727 math.erf;
#X text 200 10727 error function;
#X obj 30 10754 math.erf~;
#X text 200 10754 error function for signals;
#X obj 30 10781 math.exp;
#X text 200 10781 exponential functions;
#X obj 30 10808 math.exp2;
#X text 200 10808 exponential functions;
#X obj 30 10835 math.exp2~;
#X text 200 10835 base-2 exponential for signal;
#X obj 30 10862 math.expr;
#X text 200 10862 dynamic [expr];
#X obj 30 10889 math.exp~;
#X text 200 10889 base-e exponential for signal;
#X obj 30 10916 math.floor;
#X text 200 10916 round to largest integral value not greater than
x;
#X obj 30 10943 math.floor~;
#X text 200 10943 round to largest integral value not greater than
x;
#X obj 30 10970 math.gamma;
#X text 200 10970 gamma function;
#X obj 30 10997 math.gamma~;
#X text 200 10997 gamma function for floating point signals;
#X obj 30 11024 math.gcd;
#X text 200 11024 calculate greatest common divisor;
#X obj 30 11051 math.inf;
#X text 200 11051 infinity value that cannot be represented accurately;
#X obj 30 11078 math.inf~;
#X text 200 11078 inifinity signal generator;
#X obj 30 11105 math.lcm;
#X text 200 11105 calculate least common multiple;
#X obj 30 11132 math.lgamma;
#X text 200 11132 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11159 math.lgamma~;
#X text 200 11159 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11199 math.log;
#X text 200 11199 natural logarithm;
#X obj 30 11226 math.log10;
#X text 200 11226 logarithm functions;
#X obj 30 11253 math.log10~;
#X text 200 11253 natural logarithm;
#X obj 30 11280 math.log2;
#X text 200 11280 logarithm functions;
#X obj 30 11307 math.log2~;
#X text 200 11307 base-2 logarithm;
#X obj 30 11334 math.log~;
#X text 200 11334 natural logarithm;
#X obj 30 11361 math.mul;
#X text 200 11361 multiplication (on lists too);
#X obj 30 11388 math.nan;
#X text 200 11388 Not a Number \, unrepresentable value;
#X obj 30 11415 math.nan~;
#X text 200 11415 signal NaN;
#X obj 30 11442 math.neg;
#X text 200 11442 negate function;
#X obj 30 11469 math.or;
#X text 200 11469 operation OR for multiple arguments;
#X obj 30 11496 math.pi;
#X text 200 11496 mathematical constant;
#X obj 30 11523 math.pi~;
#X text 200 11523 mathematical constant;
#X obj 30 11550 math.polyeval;
#X text 200 11550 evaluates the polynomial described by the coefficients
list;
#X obj 30 11577 math.reciprocal;
#X text 200 11577 calculate reciprocal number;
#X obj 30 11604 math.reciprocal~;
#X text 200 11604 calculate reciprocal number for signals;
#X obj 30 11631 math.round;
#X text 200 11631 round to integral value \, regardless of rounding
direction;
#X obj 30 11658 math.round~;
#X text 200 11658 signal round;
#X obj 30 11685 math.sign;
#X text 200 11685 sign function;
#X obj 30 11712 math.sin;
#X text 200 11712 sine function;
#X obj 30 11739 math.sinh;
#X text 200 11739 hyperbolic sine function;
#X obj 30 11766 math.sinh~;
#X text 200 11766 hyperbolic sine for signals;
#X obj 30 11793 math.sin~;
#X text 200 11793 sine function;
#X obj 30 11820 math.sqrt;
#X text 200 11820 square root function;
#X obj 30 11847 math.sqrt~;
#X text 200 11847 square root for signal;
#X obj 30 11874 math.squared;
#X text 200 11874 value square;
#X obj 30 11901 math.squared~;
#X text 200 11901 signal value square;
#X obj 30 11928 math.sync_add;
#X text 200 11928 sync addition;
#X obj 30 11955 math.sync_and;
#X text 200 11955 sync logical AND operation;
#X obj 30 11982 math.sync_div;
#X text 200 11982 sync division;
#X obj 30 12009 math.sync_eq;
#X text 200 12009 sync equal numbers check;
#X obj 30 12036 math.sync_ge;
#X text 200 12036 sync greater equal numbers compare;
#X obj 30 12063 math.sync_gt;
#X text 200 12063 sync greater then numbers compare;
#X obj 30 12090 math.sync_le;
#X text 200 12090 sync less equal numbers compare;
#X obj 30 12117 math.sync_lshift;
#X text 200 12117 sync signed bit left shift;
#X obj 30 12144 math.sync_lt;
#X text 200 12144 sync less then numbers compare;
#X obj 30 12171 math.sync_mod;
#X text 200 12171 sync remainder of modulo division (float or integer);
#X obj 30 12198 math.sync_mul;
#X text 200 12198 sync multiplication;
#X obj 30 12225 math.sync_ne;
#X text 200 12225 sync numbers for not equality;
#X obj 30 12252 math.sync_or;
#X text 200 12252 sync logical OR operation;
#X obj 30 12279 math.sync_rshift;
#X text 200 12279 sync signed bit right shift;
#X obj 30 12306 math.sync_sub;
#X text 200 12306 sync subtraction;
#X obj 30 12333 math.sync_xor;
#X text 200 12333 sync logical XOR operation;
#X obj 30 12360 math.tan;
#X text 200 12360 tangent function;
#X obj 30 12387 math.tanh;
#X text 200 12387 hyperbolic tangent function;
#X obj 30 12414 math.tanh~;
#X text 200 12414 hyperbolic tangent for signals;
#X obj 30 12441 math.tan~;
#X text 200 12441 tangent function;
#X obj 30 12468 math.trunc;
#X text 200 12468 truncate to integer value;
#X obj 30 12495 math.trunc~;
#X text 200 12495 truncate to integer value;
#X obj 20 12522 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12563 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12574 midi.cc;
#X text 200 12574 enhanced version of vanilla ctlin;
#X obj 30 12601 midi.clock;
#X text 200 12601 midi clock toolbox;
#X obj 30 12628 midi.ctl2str;
#X text 200 12628 convert Standard MIDI Controllers number to name;
#X obj 30 12655 midi.event2ctl;
#X text 200 12655 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12682 midi.event2note;
#X text 200 12682 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12709 midi.event2prg;
#X text 200 12709 convert MidiEvent message to midi program change
value;
#X obj 30 12736 midi.file;
#X text 200 12736 standard midi file SMF reader and writer;
#X obj 30 12763 midi.key2str;
#X text 200 12763 convert key number to SPN name according to tonality;
#X obj 30 12790 midi.prg2str;
#X text 200 12790 convert GM Instrument number to name (string or symbol);
#X obj 30 12817 midi.sysex;
#X text 200 12817 sysex input messages as list;
#X obj 30 12844 midi.track;
#X text 200 12844 extract track from MidiFile;
#X obj 30 12871 midi.tuning;
#X text 200 12871 apply tuning to midi messages;
#X obj 30 12898 midi.vramp;
#X text 200 12898 apply crescendo or diminuendo for midi message flow;
#X obj 20 12925 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12966 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12977 click~;
#X text 200 12977 Output single impulse on bang;
#X obj 30 13004 fluid~;
#X text 200 13004 FluidSynth SoundFont 2 player;
#X obj 30 13031 modplug~;
#X text 200 13031 MOD file player (using libmodplug);
#X obj 30 13058 speech.flite;
#X text 200 13058 render speech to array;
#X obj 20 13085 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13126 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13137 loadexpr;
#X text 200 13137 send message when patch loads;
#X obj 30 13164 msg;
#X text 200 13164 message constructor;
#X obj 30 13191 msg.after;
#X text 200 13191 send specified message after incoming message;
#X obj 30 13218 msg.onload;
#X text 200 13218 send message when patch loads;
#X obj 20 13245 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13286 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13297 net.host2ip;
#X text 200 13297 returns IP address by DNS name;
#X obj 20 13324 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13365 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13376 noise.baker;
#X text 200 13376 Part of a-chaos library;
#X obj 30 13403 noise.clifford;
#X text 200 13403 Part of a-chaos library;
#X obj 30 13430 noise.collatz;
#X text 200 13430 Part of a-chaos library;
#X obj 30 13457 noise.crackle~;
#X text 200 13457 sparse noise generator;
#X obj 30 13484 noise.duffing;
#X text 200 13484 Part of a-chaos library;
#X obj 30 13511 noise.ginger;
#X text 200 13511 Gingerbreadman map chaotic generator;
#X obj 30 13538 noise.henon;
#X text 200 13538 Part of a-chaos library;
#X obj 30 13565 noise.henon_heilles;
#X text 200 13565 Part of a-chaos library;
#X obj 30 13592 noise.henon_phase;
#X text 200 13592 Part of a-chaos library;
#X obj 30 13619 noise.henonf;
#X text 200 13619 Part of a-chaos library;
#X obj 30 13646 noise.ikeda;
#X text 200 13646 Part of a-chaos library;
#X obj 30 13673 noise.jong;
#X text 200 13673 Part of a-chaos library;
#X obj 30 13700 noise.lfreq0~;
#X text 200 13700 sampled/held noise (piecewise constant);
#X obj 30 13727 noise.lfreq~;
#X text 200 13727 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 13754 noise.logistic;
#X text 200 13754 Part of a-chaos library;
#X obj 30 13781 noise.lorenz;
#X text 200 13781 Part of a-chaos library;
#X obj 30 13808 noise.lyapunov;
#X text 200 13808 Part of a-chaos library;
#X obj 30 13835 noise.navier_stokes;
#X text 200 13835 Part of a-chaos library;
#X obj 30 13862 noise.pink~;
#X text 200 13862 Pink noise generator;
#X obj 30 13889 noise.rossler;
#X text 200 13889 Part of a-chaos library;
#X obj 30 13916 noise.stein;
#X text 200 13916 Part of a-chaos library;
#X obj 30 13943 noise.torus;
#X text 200 13943 Part of a-chaos library;
#X obj 30 13970 noise.verhulst;
#X text 200 13970 Part of a-chaos library;
#X obj 30 13997 noise.white~;
#X text 200 13997 White noise generator;
#X obj 20 14024 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14065 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14076 osc.blit~;
#X text 200 14076 Bandlimited impulse train oscillator;
#X obj 30 14103 osc.impulse~;
#X text 200 14103 Bandlimited impulse train generator;
#X obj 30 14130 osc.pulse~;
#X text 200 14130 Bandlimited pulse train oscillator;
#X obj 30 14157 osc.saw4~;
#X text 200 14157 Bandlimited sawtooth wave;
#X obj 30 14184 osc.saw~;
#X text 200 14184 Alias-free sawtooth wave;
#X obj 30 14211 osc.sinfb~;
#X text 200 14211 Sine oscilator with feedback;
#X obj 30 14238 osc.sin~;
#X text 200 14238 Sine wave oscillator;
#X obj 30 14265 osc.square~;
#X text 200 14265 Bandlimited square wave oscillator;
#X obj 30 14292 osc.tri~;
#X text 200 14292 Bandlimited triangle wave oscillator;
#X obj 20 14319 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14371 canvas.current;
#X text 200 14371 verbose information about current canvas;
#X obj 30 14398 canvas.dir;
#X text 200 14398 current canvas directory;
#X obj 30 14425 canvas.name;
#X text 200 14425 current canvas name;
#X obj 30 14452 canvas.path;
#X text 200 14452 current canvas fullpath;
#X obj 30 14479 canvas.top;
#X text 200 14479 verbose information about top-level canvas;
#X obj 30 14506 patch.args;
#X text 200 14506 Get patch or subpatch arguments;
#X obj 30 14533 patch.deps;
#X text 200 14533 patch dependencies: used objects and abstractions;
#X obj 30 14560 patch.tree;
#X text 200 14560 patch tree;
#X obj 20 14587 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 14628 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14639 path.basename;
#X text 200 14639 outputs filename portion of pathname;
#X obj 30 14666 path.dirname;
#X text 200 14666 outputs directory portion of pathname;
#X obj 30 14693 path.exists;
#X text 200 14693 checks if given path exists;
#X obj 30 14720 path.is_dir;
#X text 200 14720 check if path is directory;
#X obj 30 14747 path.lsdir;
#X text 200 14747 list directory contents;
#X obj 20 14774 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 14815 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14826 is_any;
#X text 200 14826 checks if input data has *any* type;
#X obj 30 14853 is_bang;
#X text 200 14853 checks if input data has *bang* type;
#X obj 30 14880 is_data;
#X text 200 14880 checks if input data has *data* type;
#X obj 30 14907 is_dict;
#X text 200 14907 checks if input data has *dict* type;
#X obj 30 14934 is_even;
#X text 200 14934 checks if input number is even;
#X obj 30 14961 is_file;
#X text 200 14961 checks if file exists and accessible;
#X obj 30 14988 is_float;
#X text 200 14988 checks if input data has *float* type;
#X obj 30 15015 is_list;
#X text 200 15015 checks if input data has *list* type;
#X obj 30 15042 is_odd;
#X text 200 15042 checks if input number is odd;
#X obj 30 15069 is_pointer;
#X text 200 15069 checks if input data has *pointer* type;
#X obj 30 15096 is_symbol;
#X text 200 15096 checks if input data has *symbol* type;
#X obj 20 15123 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15164 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15175 preset.float;
#X text 200 15175 load/store float preset;
#X obj 30 15202 preset.list;
#X text 200 15202 load/store symbol preset;
#X obj 30 15229 preset.storage;
#X text 200 15229 preset storage control;
#X obj 30 15256 preset.symbol;
#X text 200 15256 load/store symbol preset;
#X obj 20 15283 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15324 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15335 patch.props;
#X text 200 15335 patch properties manager;
#X obj 30 15362 prop;
#X text 200 15362 get/set named property value for subpatch or abstraction;
#X obj 30 15389 prop.declare;
#X text 200 15389 declare named property for subpatch or abstraction;
#X obj 30 15416 prop.get;
#X text 200 15416 get property from connected object/subpatch/abstraction;
#X obj 30 15443 prop.get~;
#X text 200 15443 Property extractor from sound stream;
#X obj 30 15470 prop.join;
#X text 200 15470 join property to main data flow;
#X obj 30 15497 prop.set;
#X text 200 15497 set object property;
#X obj 30 15524 prop.split;
#X text 200 15524 separate properties from dataflow;
#X obj 20 15551 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 15592 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15603 proto.firmata;
#X text 200 15603 Firmata Arduino protocol support;
#X obj 30 15630 proto.midi;
#X text 200 15630 raw midi encoder/parser;
#X obj 30 15657 proto.sp.alpaca;
#X text 200 15657 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 15684 proto.xtouch_ext;
#X text 200 15684 Behringer XTouch Extender XMidi protocol;
#X obj 20 15711 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 15752 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15763 random.atom;
#X text 200 15763 weighted atom generation from specified list;
#X obj 30 15790 random.discrete;
#X text 200 15790 random weighted integers on interval [0 \, n);
#X obj 30 15817 random.float;
#X text 200 15817 uniform random float generator in specified range;
#X obj 30 15844 random.gauss;
#X text 200 15844 gaussian random distribution;
#X obj 30 15871 random.int;
#X text 200 15871 uniform random integer generator in specified range;
#X obj 30 15898 random.linear;
#X text 200 15898 random linear distribution;
#X obj 30 15925 random.pw_const;
#X text 200 15925 piecewise constant random distribution;
#X obj 30 15952 random.pw_lin;
#X text 200 15952 piecewise linear random distribution;
#X obj 20 15979 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16020 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16031 seq.arp;
#X text 200 16031 sequence arpeggiator;
#X obj 30 16058 seq.bangs;
#X text 200 16058 bang sequencer;
#X obj 30 16085 seq.counter;
#X text 200 16085 modulo counter;
#X obj 30 16112 seq.matrix;
#X text 200 16112 sequencer control for ui.matrix;
#X obj 30 16139 seq.nbangs;
#X text 200 16139 output specified number of bang with time intervals;
#X obj 30 16166 seq.phasor;
#X text 200 16166 control rate phasor (saw) generator;
#X obj 30 16193 seq.toggles;
#X text 200 16193 toggle sequencer;
#X obj 30 16220 sequencer;
#X text 200 16220 basic sequence player;
#X obj 20 16247 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16288 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16299 snd.file;
#X text 200 16299 Sound file loader on steroids;
#X obj 20 16326 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 16367 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16378 hoa.2d.decoder~;
#X text 200 16378 hoa 2d decoder;
#X obj 30 16405 hoa.2d.encoder~;
#X text 200 16405 hoa 2d encoder;
#X obj 30 16432 hoa.2d.map~;
#X text 200 16432 a 2d ambisonic multisource spatializer;
#X obj 30 16459 hoa.2d.optim~;
#X text 200 16459 a 2D ambisonic optimization tool;
#X obj 30 16486 hoa.2d.projector~;
#X text 200 16486 a plane waves decomposer from circular harmonics
domain;
#X obj 30 16513 hoa.2d.recomposer~;
#X text 200 16513 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 16553 hoa.2d.rotate~;
#X text 200 16553 a 2D ambisonic sound field rotation;
#X obj 30 16580 hoa.2d.wider~;
#X text 200 16580 a 2d fractional ambisonic order simulator;
#X obj 30 16607 hoa.@process;
#X text 200 16607 process properties manager for hoa.process~;
#X obj 30 16634 hoa.in;
#X text 200 16634 message inlet for a patcher loaded by hoa.process~;
#X obj 30 16661 hoa.in~;
#X text 200 16661 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16688 hoa.out;
#X text 200 16688 message outlet for a patcher loaded by hoa.process~;
#X obj 30 16715 hoa.out~;
#X text 200 16715 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16742 hoa.process~;
#X text 200 16742 patcher loader for multichannel processing;
#X obj 30 16772 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 16769 a 2d ambisonic harmonic scope;
#X obj 30 16794 pan.cos~;
#X text 200 16794 two channel equal power sine/cosine panner;
#X obj 30 16821 pan.linsig~;
#X text 200 16821 two channel linear panner with signal control;
#X obj 30 16848 pan.lin~;
#X text 200 16848 two channel linear panner;
#X obj 30 16875 pan.spread~;
#X text 200 16875 spreads input channels across the stereo field;
#X obj 30 16902 pan.sqrt~;
#X text 200 16902 two channel equal power square root panner;
#X obj 30 16929 spat.pan4~;
#X text 200 16929 GMEM SPAT: 4-outputs spatializer;
#X obj 30 16956 spat.pan8~;
#X text 200 16956 GMEM SPAT: 8-outputs spatializer;
#X obj 30 16983 spat.zita6x8~;
#X text 200 16983 spat with 6 inputs sources to 8 channel output;
#X obj 20 17010 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17051 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17062 string;
#X text 200 17062 string constructor;
#X obj 30 17089 string.contains;
#X text 200 17089 checks if string contains specified substring;
#X obj 30 17116 string.ends_with;
#X text 200 17116 checks if string ends with specified substring;
#X obj 30 17143 string.equal;
#X text 200 17143 check strings or symbols for equality;
#X obj 30 17170 string.format;
#X text 200 17170 formats string like printf.;
#X obj 30 17197 string.join;
#X text 200 17197 joins (concatenates) strings with separator;
#X obj 30 17224 string.length;
#X text 200 17224 number of characters in string (unicode supported);
#X obj 30 17251 string.match;
#X text 200 17251 check if string match regular expression;
#X obj 30 17278 string.remove;
#X text 200 17278 remove substring from input string;
#X obj 30 17305 string.replace;
#X text 200 17305 replace from one substring to another in input string;
#X obj 30 17332 string.split;
#X text 200 17332 split string by separator;
#X obj 30 17359 string.starts_with;
#X text 200 17359 checks if string starts with specified substring;
#X obj 30 17386 string.substr;
#X text 200 17386 extract substring from input string;
#X obj 30 17413 string2symbol;
#X text 200 17413 converts string to symbol;
#X obj 20 17440 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 17481 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17492 symbol.equal;
#X text 200 17492 check symbols for equality;
#X obj 30 17519 symbol.length;
#X text 200 17519 number of characters in symbol (unicode supported);
#X obj 30 17546 symbol.num_compare;
#X text 200 17546 numeric symbol compare;
#X obj 30 17573 symbol2any;
#X text 200 17573 converts symbol to message;
#X obj 30 17600 symbol2intlist;
#X text 200 17600 converts symbol to list of character codes;
#X obj 20 17627 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 17668 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17679 synth.bee3~;
#X text 200 17679 Hammond-oid organ FM synthesis instrument;
#X obj 30 17706 synth.birds~;
#X text 200 17706 bird singing generator;
#X obj 30 17733 synth.church_bell~;
#X text 200 17733 generic church bell modal model;
#X obj 30 17760 synth.dubdub~;
#X text 200 17760 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 17800 synth.dx7~;
#X text 200 17800 FAUST dx7 implementation;
#X obj 30 17827 synth.eguitar~;
#X text 200 17827 simple electric guitar model with steel strings;
#X obj 30 17854 synth.fgrain~;
#X text 200 17854 file granulator from STK;
#X obj 30 17881 synth.glitch~;
#X text 200 17881 Glitch synthesizer by naivesound;
#X obj 30 17908 synth.ks~;
#X text 200 17908 Karplus-Strong string;
#X obj 30 17935 synth.marimba~;
#X text 200 17935 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 17975 synth.rhodey~;
#X text 200 17975 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18002 synth.risset_arp~;
#X text 200 18002 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18029 synth.risset_tone~;
#X text 200 18029 Jean Claude Risset's endless glissando;
#X obj 30 18056 synth.russian_bell~;
#X text 200 18056 russian church bell modal model;
#X obj 30 18083 synth.shakers~;
#X text 200 18083 various percussion sounds from STK library;
#X obj 30 18110 synth.sitar~;
#X text 200 18110 STK sitar;
#X obj 30 18137 synth.wurley~;
#X text 200 18137 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18164 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18205 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18216 system.colorpanel;
#X text 200 18216 System color panel dialog popup;
#X obj 30 18243 system.cursor;
#X text 200 18243 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 18270 system.exec;
#X text 200 18270 run external command in separate process;
#X obj 30 18297 system.getenv;
#X text 200 18297 Get system environment variables;
#X obj 30 18324 system.hostname;
#X text 200 18324 outputs system hostname;
#X obj 30 18351 system.memsize;
#X text 200 18351 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 18391 system.memused;
#X text 200 18391 returns the process physical memory use - current
and peak;
#X obj 30 18418 system.screen_size;
#X text 200 18418 returns current screen size in pixels;
#X obj 20 18445 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 18486 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18497 tl.bang;
#X text 200 18497 Timeline bang (with possible delay);
#X obj 30 18527 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 18524 Timeline section;
#X obj 30 18549 tl.timeline;
#X text 200 18549 Timeline - event scheduler;
#X obj 30 18576 tl.toggle;
#X text 200 18576 Timeline bang;
#X obj 30 18603 tl.transport;
#X text 200 18603 Timeline transport control;
#X obj 20 18630 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 18671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18685 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 18682 array view with cursor and selection;
#X obj 30 18710 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 18707 A bang... that's all;
#X obj 30 18735 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 18732 colorchooser widget;
#X obj 30 18760 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 18757 Display GUI object;
#X obj 30 18785 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 18782 GUI for turning DSP on/off;
#X obj 30 18810 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 18807 envelope editor widget;
#X obj 30 18835 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 18832 UI stereo gain control;
#X obj 30 18860 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 18857 UI gain control;
#X obj 30 18885 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 18882 simple icon with button capabilities;
#X obj 30 18910 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 18907 value increment/decrement;
#X obj 30 18935 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 18932 keyboard widget;
#X obj 30 18960 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 18957 knob widget;
#X obj 30 18985 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 18982 simple label widget;
#X obj 30 19010 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19007 Hyperlink widget;
#X obj 30 19035 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19032 The matrix of toggles has you.;
#X obj 30 19060 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19057 Dropdown menu;
#X obj 30 19085 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19082 Shows peak and rms signal level;
#X obj 30 19110 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19107 incoming MIDI message viewport;
#X obj 30 19135 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19132 filter mouse events from ui objects;
#X obj 30 19160 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19157 routes mouse events from ui objects;
#X obj 30 19185 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 19182 counterpart of the vanilla [nbx];
#X obj 30 19210 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 19207 counterpart of the vanilla [nbx] for signal;
#X obj 30 19235 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 19232 signal plotter;
#X obj 30 19260 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 19257 2D slider in polar coordinates;
#X obj 30 19285 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 19282 Preset manager;
#X obj 30 19310 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 19307 counterpart of the vanilla radio toggle;
#X obj 30 19335 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 19332 range slider;
#X obj 30 19360 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 19357 Scope GUI object;
#X obj 30 19385 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 19382 counterpart of the vanilla slider;
#X obj 30 19410 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 19407 2D slider widget;
#X obj 30 19435 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 19432 Multiple slider widget;
#X obj 30 19460 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 19457 Spectroscope GUI object;
#X obj 30 19485 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 19482 displays a list of text buttons or text toggles;
#X obj 30 19510 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 19507 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 19532 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 19532 version: v0.9.1 \, license: GPL3;
#X obj 20 19560 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 19583 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 19547 msg 0;
#X obj 670 19582 switch~;
#X connect 1354 0 1355 0;