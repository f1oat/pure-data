#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 metro.pattern;
#X text 175 498 metro with rythmic patterns;
#X obj 30 525 metro.seq;
#X text 175 525 metro sequencer;
#X obj 30 552 window;
#X text 175 552 returns window value by given window position;
#X obj 20 579 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 620 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 631 array.p2s;
#X text 175 631 convert array phase [0\..1] to sample position;
#X obj 30 658 array.s2p;
#X text 175 658 convert array sample position to relative phase
position [0\..1];
#X obj 30 695 conv.bpm2hz;
#X text 175 695 converts BPM to frequency in herz;
#X obj 30 722 conv.bpm2ms;
#X text 175 722 convert frequency in BPM to period in milliseconds;
#X obj 30 749 conv.bpm2sec;
#X text 175 749 convert frequency in BPM to period in seconds;
#X obj 30 776 conv.cc2amp;
#X text 175 776 convert from MIDI Control Change range;
#X obj 30 803 conv.lin2curve;
#X text 175 803 map linear to exponential range with 0 allowed.;
#X obj 30 830 conv.lin2exp;
#X text 175 830 maps linear range to exponential range;
#X obj 30 857 conv.lin2lin;
#X text 175 857 convert from one linear range to another;
#X obj 30 884 conv.pitch2midi;
#X text 175 884 converts symbol pitch name to MIDI note number;
#X obj 30 911 conv.samp2sec;
#X text 175 911 convert samples to time according to samplerate;
#X obj 30 938 conv.sec2samp;
#X text 175 938 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 975 conv.sec2str;
#X text 175 975 converts float time in seconds to formated symbol (or
string);
#X obj 30 1012 conv.str2sec;
#X text 175 1012 converts formatted time to float value in seconds;
#X obj 20 1039 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1080 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1091 data.fifo;
#X text 175 1091 First-In-First-Out (FIFO) queue data container;
#X obj 30 1118 data.list;
#X text 175 1118 list container;
#X obj 30 1145 data.set;
#X text 175 1145 container that store unique elements;
#X obj 30 1172 data.set2list;
#X text 175 1172 converts set to list;
#X obj 30 1199 set.contains;
#X text 175 1199 check if specified element is in set;
#X obj 30 1226 set.diff;
#X text 175 1226 difference between two sets;
#X obj 30 1253 set.equal;
#X text 175 1253 checks if two sets are equal (contains same
elements);
#X obj 30 1280 set.intersect;
#X text 175 1280 output intersection of given sets;
#X obj 30 1307 set.size;
#X text 175 1307 get number of elements in set;
#X obj 30 1334 set.symdiff;
#X text 175 1334 symmetric difference between two sets;
#X obj 30 1361 set.union;
#X text 175 1361 output union of given sets;
#X obj 20 1388 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1429 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1440 dyn.comp2~;
#X text 175 1440 stereo dynamic range compressor;
#X obj 30 1467 dyn.comp~;
#X text 175 1467 mono dynamic range compressors;
#X obj 30 1494 dyn.gate2~;
#X text 175 1494 stereo signal gate;
#X obj 30 1521 dyn.gate~;
#X text 175 1521 mono signal gate;
#X obj 30 1548 dyn.limit2~;
#X text 175 1548 stereo 1176LN Peak Limiter;
#X obj 30 1575 dyn.limit~;
#X text 175 1575 mono 1176LN Peak Limiter;
#X obj 30 1602 dyn.softclip~;
#X text 175 1602 soft signal clip;
#X obj 20 1629 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1670 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1681 env.adsr~;
#X text 175 1681 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1708 env.ar~;
#X text 175 1708 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1745 env.asr~;
#X text 175 1745 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 1772 env.concat;
#X text 175 1772 Envelope concatenation;
#X obj 30 1799 env.follow~;
#X text 175 1799 Envelope follower with independent attack and release
times.;
#X obj 30 1836 env.mix;
#X text 175 1836 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 1873 env.smooth~;
#X text 175 1873 An envelope with an exponential attack and release;
#X obj 30 1900 env.tscale;
#X text 175 1900 Envelope time-scale;
#X obj 30 1927 env.tshift;
#X text 175 1927 Envelope time-shift (horizontal);
#X obj 30 1954 env.vscale;
#X text 175 1954 Envelope value-scale;
#X obj 30 1981 env2array;
#X text 175 1981 Renders envelope to specified array;
#X obj 30 2008 env2vline;
#X text 175 2008 Converts envelope to bunch of vline messages;
#X obj 30 2035 envelope;
#X text 175 2035 Envelope data type;
#X obj 20 2062 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2103 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2114 expand_env;
#X text 175 2114 Substitute enviroment variables in data stream;
#X obj 30 2141 flow.append;
#X text 175 2141 inject message into flow;
#X obj 30 2168 flow.change;
#X text 175 2168 rejects redundant input values;
#X obj 30 2195 flow.count;
#X text 175 2195 control flow event counter;
#X obj 30 2222 flow.demultiplex;
#X text 175 2222 control flow demultiplexer;
#X obj 30 2249 flow.gate;
#X text 175 2249 control flow gate. [spigot] analog;
#X obj 30 2276 flow.group;
#X text 175 2276 group data atoms in list of specified size;
#X obj 30 2303 flow.less;
#X text 175 2303 numeric stream router \, like many [moses];
#X obj 30 2330 flow.less_eq;
#X text 175 2330 numeric stream router \, like many [moses];
#X obj 30 2357 flow.multiplex;
#X text 175 2357 control flow multiplexer;
#X obj 30 2384 flow.pass;
#X text 175 2384 pass specified values;
#X obj 30 2411 flow.pass_if;
#X text 175 2411 pass values that accepted by predicate object;
#X obj 30 2438 flow.reject;
#X text 175 2438 reject specified values;
#X obj 30 2465 flow.reject_if;
#X text 175 2465 reject values by predicate;
#X obj 30 2492 flow.speedlim;
#X text 175 2492 control stream speed limitier;
#X obj 30 2519 flow.split;
#X text 175 2519 split data flow by external side-chain predicate;
#X obj 30 2546 flow.sync;
#X text 175 2546 bus with only hot inlets;
#X obj 30 2573 flow.tee~;
#X text 175 2573 separate audio and control streams;
#X obj 30 2600 replace;
#X text 175 2600 Replace atoms in data stream;
#X obj 20 2627 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2668 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2679 flt.biquad~;
#X text 175 2679 second order IIR filter.;
#X obj 30 2706 flt.bpf12~;
#X text 175 2706 Band-pass filter with 12/db per octave slope;
#X obj 30 2733 flt.bpf24~;
#X text 175 2733 Band-pass filter with 24/db per octave slope;
#X obj 30 2760 flt.c_bpf~;
#X text 175 2760 BPF coefficent calculator for biquad filter;
#X obj 30 2787 flt.c_highshelf~;
#X text 175 2787 Highshelf filter coefficent calculator for biquad;
#X obj 30 2814 flt.c_hpf~;
#X text 175 2814 HPF coefficent calculator for biquad filter;
#X obj 30 2841 flt.c_lowshelf~;
#X text 175 2841 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2868 flt.c_lpf~;
#X text 175 2868 LPF coefficent calculator for biquad filter;
#X obj 30 2895 flt.c_notch~;
#X text 175 2895 Band-reject coefficent calculator for biquad filter;
#X obj 30 2922 flt.c_peak~;
#X text 175 2922 Peaking equalizer calculator for biquad.;
#X obj 30 2949 flt.dcblock2~;
#X text 175 2949 stereo DC blocker;
#X obj 30 2976 flt.dcblock~;
#X text 175 2976 mono DC blocker;
#X obj 30 3003 flt.eq_peak_cq~;
#X text 175 3003 constant-Q second order peaking equalizer section;
#X obj 30 3030 flt.eq_peak~;
#X text 175 3030 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3081 flt.highshelf~;
#X text 175 3081 gain boost|cut above some frequency;
#X obj 30 3108 flt.hpf12~;
#X text 175 3108 High-pass filter with 12/db per octave slope;
#X obj 30 3135 flt.hpf24~;
#X text 175 3135 High-pass filter with 24/db per octave slope;
#X obj 30 3162 flt.lowshelf~;
#X text 175 3162 gain boost|cut below some frequency;
#X obj 30 3189 flt.lpf12~;
#X text 175 3189 Low-pass filter with 12/db per octave slope;
#X obj 30 3216 flt.lpf24~;
#X text 175 3216 Low-pass filter with 24/db per octave slope;
#X obj 30 3243 flt.notch~;
#X text 175 3243 band-rejection filter;
#X obj 30 3270 flt.resonbp~;
#X text 175 3270 Simple resonant bandpass filter;
#X obj 20 3297 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 3338 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3349 fx.distortion~;
#X text 175 3349 cubic nonlinearity distortion;
#X obj 30 3376 fx.drone_box~;
#X text 175 3376 mono sympathetic resonance generator;
#X obj 30 3403 fx.flanger~;
#X text 175 3403 mono flanging effect;
#X obj 30 3430 fx.freeverb2~;
#X text 175 3430 freeverb2 - stereo version of freeverb;
#X obj 30 3457 fx.freeverb~;
#X text 175 3457 freeverb - common used open-source reverb;
#X obj 30 3484 fx.freqshift~;
#X text 175 3484 frequency shifter or single-sideband ring modulation;
#X obj 30 3511 fx.greyhole~;
#X text 175 3511 A complex echo-like effect;
#X obj 30 3538 fx.looper~;
#X text 175 3538 One track looper;
#X obj 30 3565 fx.pitchshift~;
#X text 175 3565 simple pitch shifter based on 2 delay lines;
#X obj 30 3592 fx.wahwah~;
#X text 175 3592 digitized CryBaby wah pedal;
#X obj 30 3619 fx.zita_rev1~;
#X text 175 3619 Zita stereo reverb;
#X obj 20 3646 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3687 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3698 global.float;
#X text 175 3698 global named float object;
#X obj 30 3725 global.int;
#X text 175 3725 global named integer object;
#X obj 30 3752 global.list;
#X text 175 3752 global named list object;
#X obj 20 3779 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3820 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3831 hw.arduino;
#X text 175 3831 Arduino device;
#X obj 20 3858 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3899 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3910 lfo.impulse~;
#X text 175 3910 Unit-amplitude low-frequency impulse train;
#X obj 30 3937 lfo.pulse~;
#X text 175 3937 Unit-amplitude nonnegative low frequency pulse train
\,;
#X obj 30 3964 lfo.square~;
#X text 175 3964 Positive low frequence square wave;
#X obj 30 3991 lfo.tri~;
#X text 175 3991 Positive unit-amplitude low frequency triangle wave;
#X obj 20 4018 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 4059 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4070 list.all_of;
#X text 175 4070 checks if all list atoms accepted by predicate;
#X obj 30 4097 list.any_of;
#X text 175 4097 checks if at least one list element is accepted by
predicate;
#X obj 30 4134 list.apply_to;
#X text 175 4134 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 4171 list.at;
#X text 175 4171 returns list element(s) at given position(s);
#X obj 30 4198 list.choice;
#X text 175 4198 returns random element from list;
#X obj 30 4225 list.count;
#X text 175 4225 returns the number of items that equal to specified
value;
#X obj 30 4252 list.count_if;
#X text 175 4252 returns the number of items that satisfy to external
predicate.;
#X obj 30 4289 list.deinterleave;
#X text 175 4289 splits list to N lists \, each to separate output;
#X obj 30 4316 list.delta;
#X text 175 4316 returns the difference between the current list of
floats and the previous one.;
#X obj 30 4353 list.distribution;
#X text 175 4353 list value distribution;
#X obj 30 4380 list.do;
#X text 175 4380 iterate and modify list contents via side-chain;
#X obj 30 4407 list.each;
#X text 175 4407 maps each list value via external object(s);
#X obj 30 4434 list.enumerate;
#X text 175 4434 enumerates input list;
#X obj 30 4461 list.equal;
#X text 175 4461 checks if given lists are equal;
#X obj 30 4488 list.first;
#X text 175 4488 returns first list element;
#X obj 30 4515 list.gen;
#X text 175 4515 generates list of specified length via external
generator;
#X obj 30 4542 list.histogram;
#X text 175 4542 outputs distibution histogram;
#X obj 30 4569 list.integrator;
#X text 175 4569 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4606 list.interleave;
#X text 175 4606 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4657 list.last;
#X text 175 4657 returns last list element;
#X obj 30 4684 list.length;
#X text 175 4684 returns the number of atoms in the message;
#X obj 30 4711 list.max;
#X text 175 4711 returns largest element in the list;
#X obj 30 4738 list.mean;
#X text 175 4738 calculates average of list of floats;
#X obj 30 4765 list.min;
#X text 175 4765 returns smallest element in the list;
#X obj 30 4792 list.none_of;
#X text 175 4792 checks if none of list atoms is accepted by
predicate;
#X obj 30 4819 list.normalize;
#X text 175 4819 normalizes float list values to get their sum = 1.0;
#X obj 30 4846 list.pass_if;
#X text 175 4846 leave only elements accepted by predicate;
#X obj 30 4873 list.product;
#X text 175 4873 calculates product of floats in list;
#X obj 30 4900 list.range;
#X text 175 4900 returns list smallest and largest value;
#X obj 30 4927 list.reduce;
#X text 175 4927 apply function of two arguments cumulatively to the
list;
#X obj 30 4954 list.remove_if;
#X text 175 4954 remove elements by predicate;
#X obj 30 4981 list.repack;
#X text 175 4981 repack input list to specified size;
#X obj 30 5008 list.repeat;
#X text 175 5008 creates new list by repeating given list specified
times;
#X obj 30 5035 list.resize;
#X text 175 5035 changes list size;
#X obj 30 5062 list.reverse;
#X text 175 5062 reverses the order of the elements in the list;
#X obj 30 5089 list.rotate;
#X text 175 5089 rotates list left;
#X obj 30 5116 list.route;
#X text 175 5116 acts like [route] but for lists;
#X obj 30 5143 list.separate;
#X text 175 5143 sends list elements one by one separately;
#X obj 30 5170 list.seq;
#X text 175 5170 numeric sequence list generator;
#X obj 30 5197 list.shuffle;
#X text 175 5197 randomly rearranges elements in list;
#X obj 30 5224 list.slice;
#X text 175 5224 extract sublist;
#X obj 30 5251 list.sort;
#X text 175 5251 sorts list values by ascending order;
#X obj 30 5278 list.sort_with;
#X text 175 5278 sort list with user defined side-chain;
#X obj 30 5305 list.split;
#X text 175 5305 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 5342 list.sum;
#X text 175 5342 calculates sum of floats in list;
#X obj 30 5369 list.unique;
#X text 175 5369 sorts and removes duplicates from input list;
#X obj 30 5396 list.unpack;
#X text 175 5396 unpack list elements to separate outlets;
#X obj 30 5423 list.unwrap;
#X text 175 5423 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 5460 list.walk;
#X text 175 5460 Walks thru the list;
#X obj 30 5487 list.wrap;
#X text 175 5487 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 5538 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5579 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5590 live.capture~;
#X text 175 5590 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5627 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5668 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5679 local.float;
#X text 175 5679 canvas-scoped named float variable;
#X obj 30 5706 local.int;
#X text 175 5706 canvas-scoped named integer variable;
#X obj 30 5733 local.list;
#X text 175 5733 local named list object;
#X obj 20 5760 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5801 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5812 math.abs;
#X text 175 5812 absolute value function;
#X obj 30 5839 math.acos;
#X text 175 5839 arc cosine function;
#X obj 30 5866 math.acosh;
#X text 175 5866 inverse hyperbolic cosine function;
#X obj 30 5893 math.and;
#X text 175 5893 operation AND for multiple arguments;
#X obj 30 5920 math.approx;
#X text 175 5920 check if input value approximately equal to pattern;
#X obj 30 5947 math.asin;
#X text 175 5947 arc sine function;
#X obj 30 5974 math.asinh;
#X text 175 5974 inverse hyperbolic sine function;
#X obj 30 6001 math.atan;
#X text 175 6001 arc tangent function;
#X obj 30 6028 math.atanh;
#X text 175 6028 inverse hyperbolic tangent function;
#X obj 30 6055 math.cbrt;
#X text 175 6055 cube root function;
#X obj 30 6082 math.ceil;
#X text 175 6082 round to smallest integral value not less than input
value;
#X obj 30 6109 math.cos;
#X text 175 6109 cosine function;
#X obj 30 6136 math.cosh;
#X text 175 6136 hyperbolic cosine function;
#X obj 30 6163 math.e;
#X text 175 6163 mathematical constant \, base of the natural
logarithm;
#X obj 30 6190 math.exp;
#X text 175 6190 exponential functions;
#X obj 30 6217 math.exp2;
#X text 175 6217 exponential functions;
#X obj 30 6244 math.floor;
#X text 175 6244 round to largest integral value not greater than x;
#X obj 30 6271 math.gcd;
#X text 175 6271 calculate greatest common divisor;
#X obj 30 6298 math.inf;
#X text 175 6298 infinity value that cannot be represented accurately;
#X obj 30 6325 math.lcm;
#X text 175 6325 calculate least common multiple;
#X obj 30 6352 math.log;
#X text 175 6352 logarithm functions;
#X obj 30 6379 math.log10;
#X text 175 6379 logarithm functions;
#X obj 30 6406 math.log2;
#X text 175 6406 logarithm functions;
#X obj 30 6433 math.nan;
#X text 175 6433 Not a Number \, unrepresentable value;
#X obj 30 6460 math.neg;
#X text 175 6460 negate function;
#X obj 30 6487 math.or;
#X text 175 6487 operation OR for multiple arguments;
#X obj 30 6514 math.pi;
#X text 175 6514 mathematical constant;
#X obj 30 6541 math.reciprocal;
#X text 175 6541 calculate reciprocal number;
#X obj 30 6568 math.round;
#X text 175 6568 round to integral value \, regardless of rounding
direction;
#X obj 30 6595 math.round~;
#X text 175 6595 signal round;
#X obj 30 6622 math.sign;
#X text 175 6622 sign function;
#X obj 30 6649 math.sin;
#X text 175 6649 sine function;
#X obj 30 6676 math.sinh;
#X text 175 6676 hyperbolic sine function;
#X obj 30 6703 math.sqrt;
#X text 175 6703 square root function;
#X obj 30 6730 math.squared;
#X text 175 6730 value square;
#X obj 30 6757 math.tan;
#X text 175 6757 tangent function;
#X obj 30 6784 math.tanh;
#X text 175 6784 hyperbolic tangent function;
#X obj 30 6811 math.trunc;
#X text 175 6811 truncate to integer value;
#X obj 20 6838 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 6879 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6890 midi.ctl2str;
#X text 175 6890 convert Standard MIDI Controllers number to name;
#X obj 30 6917 midi.event2ctl;
#X text 175 6917 convert MidiEvent message to controller channel/value
pair;
#X obj 30 6944 midi.event2note;
#X text 175 6944 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6971 midi.event2prg;
#X text 175 6971 convert MidiEvent message to midi program change
value;
#X obj 30 6998 midi.file;
#X text 175 6998 standard midi file SMF reader and writer;
#X obj 30 7025 midi.key2str;
#X text 175 7025 convert key number to SPN name according to tonality;
#X obj 30 7052 midi.prg2str;
#X text 175 7052 convert GM Instrument number to name (string or
symbol);
#X obj 30 7079 midi.track;
#X text 175 7079 extract track from MidiFile;
#X obj 20 7106 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 7147 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7158 click~;
#X text 175 7158 Output single impulse on bang;
#X obj 30 7185 modplug~;
#X text 175 7185 MOD file player (using libmodplug);
#X obj 20 7212 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 7253 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7264 msg;
#X text 175 7264 message constructor;
#X obj 20 7291 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 7332 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7343 noise.crackle~;
#X text 175 7343 sparse noise generator;
#X obj 30 7370 noise.lfreq0~;
#X text 175 7370 sampled/held noise (piecewise constant);
#X obj 30 7397 noise.lfreq~;
#X text 175 7397 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 7424 noise.pink~;
#X text 175 7424 Pink noise generator;
#X obj 30 7451 noise.white~;
#X text 175 7451 White noise generator;
#X obj 20 7478 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 7519 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7530 osc.impulse~;
#X text 175 7530 Bandlimited impulse train generator;
#X obj 30 7557 osc.pulse~;
#X text 175 7557 Bandlimited pulse train oscillator.;
#X obj 30 7584 osc.saw~;
#X text 175 7584 Bandlimited saw wave oscillator;
#X obj 30 7611 osc.sinfb~;
#X text 175 7611 sine oscilator with feedback;
#X obj 30 7638 osc.square~;
#X text 175 7638 Bandlimited square wave oscillator;
#X obj 30 7665 osc.tri~;
#X text 175 7665 Bandlimited triangle wave oscillator;
#X obj 20 7692 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 7733 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7744 canvas.current;
#X text 175 7744 verbose information about current canvas;
#X obj 30 7771 canvas.top;
#X text 175 7771 verbose information about top-level canvas;
#X obj 30 7798 patch.args;
#X text 175 7798 Get patch or subpatch arguments;
#X obj 20 7825 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 7866 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7877 path.basename;
#X text 175 7877 outputs filename portion of pathname;
#X obj 30 7904 path.dirname;
#X text 175 7904 outputs directory portion of pathname;
#X obj 30 7931 path.exists;
#X text 175 7931 checks if given path exists;
#X obj 30 7958 path.lsdir;
#X text 175 7958 list directory contents;
#X obj 20 7985 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 8026 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8037 is_any;
#X text 175 8037 checks if input data has *any* type;
#X obj 30 8064 is_bang;
#X text 175 8064 checks if input data has *bang* type;
#X obj 30 8091 is_even;
#X text 175 8091 checks if input number is even;
#X obj 30 8118 is_file;
#X text 175 8118 checks if file exists and accessible;
#X obj 30 8145 is_float;
#X text 175 8145 checks if input data has *float* type;
#X obj 30 8172 is_list;
#X text 175 8172 checks if input data has *list* type;
#X obj 30 8199 is_odd;
#X text 175 8199 checks if input number is odd;
#X obj 30 8226 is_pointer;
#X text 175 8226 checks if input data has *pointer* type;
#X obj 30 8253 is_symbol;
#X text 175 8253 checks if input data has *symbol* type;
#X obj 20 8280 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 8321 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8332 preset.float;
#X text 175 8332 load/store float preset;
#X obj 30 8359 preset.list;
#X text 175 8359 load/store symbol preset;
#X obj 30 8386 preset.storage;
#X text 175 8386 preset storage control;
#X obj 30 8413 preset.symbol;
#X text 175 8413 load/store symbol preset;
#X obj 20 8440 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 8481 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8492 prop.get;
#X text 175 8492 Property extractor;
#X obj 30 8519 prop.set;
#X text 175 8519 Property injector;
#X obj 20 8546 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 8587 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8598 proto.firmata;
#X text 175 8598 Firmata Arduino protocol support;
#X obj 20 8625 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 8666 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8677 random.discrete;
#X text 175 8677 random weighted integers on interval [0 \, n);
#X obj 30 8704 random.float;
#X text 175 8704 random float generator in specified range;
#X obj 30 8731 random.gauss;
#X text 175 8731 gaussian random distribution;
#X obj 30 8758 random.int;
#X text 175 8758 Random integer generator in specified range;
#X obj 30 8785 random.linear;
#X text 175 8785 random linear distribution;
#X obj 30 8812 random.pw_const;
#X text 175 8812 piecewise constant random distribution;
#X obj 30 8839 random.pw_lin;
#X text 175 8839 piecewise linear random distribution;
#X obj 20 8866 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 8907 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8918 snd.file;
#X text 175 8918 Sound file loader on steroids;
#X obj 20 8945 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 8986 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8997 pan.cos~;
#X text 175 8997 two channel equal power sine/cosine panner;
#X obj 30 9024 pan.lin~;
#X text 175 9024 two channel linear panner;
#X obj 30 9051 pan.spread~;
#X text 175 9051 spreads input channels across the stereo field;
#X obj 30 9078 pan.sqrt~;
#X text 175 9078 two channel equal power square root panner;
#X obj 30 9105 spat.pan4~;
#X text 175 9105 GMEM SPAT: 4-outputs spatializer;
#X obj 30 9132 spat.pan8~;
#X text 175 9132 GMEM SPAT: 8-outputs spatializer;
#X obj 20 9159 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 9200 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9211 string;
#X text 175 9211 string constructor;
#X obj 30 9238 string.contains;
#X text 175 9238 checks if given string contains specified substring;
#X obj 30 9265 string.ends_with;
#X text 175 9265 checks if given string ends with specified suffix;
#X obj 30 9292 string.equal;
#X text 175 9292 check strings for equality;
#X obj 30 9319 string.format;
#X text 175 9319 formats string like printf.;
#X obj 30 9346 string.join;
#X text 175 9346 joins (concatenates) strings with separator;
#X obj 30 9373 string.length;
#X text 175 9373 number of characters in string (unicode supported);
#X obj 30 9400 string.remove;
#X text 175 9400 remove substring from input string;
#X obj 30 9427 string.replace;
#X text 175 9427 replace from one substring to another in input
string;
#X obj 30 9454 string.split;
#X text 175 9454 split string by separator;
#X obj 30 9481 string.starts_with;
#X text 175 9481 checks if given string starts with specified prefix;
#X obj 30 9508 string.substr;
#X text 175 9508 extract substring from input string;
#X obj 30 9535 string2symbol;
#X text 175 9535 converts string to symbol;
#X obj 20 9562 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 9603 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9614 symbol.equal;
#X text 175 9614 check symbols for equality;
#X obj 30 9641 symbol.length;
#X text 175 9641 number of characters in symbol (unicode supported);
#X obj 30 9668 symbol.num_compare;
#X text 175 9668 numeric symbol compare;
#X obj 20 9695 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 9736 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9747 synth.birds~;
#X text 175 9747 bird singing generator;
#X obj 30 9774 synth.marimba~;
#X text 175 9774 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 9811 synth.risset_arp~;
#X text 175 9811 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 9838 synth.risset_tone~;
#X text 175 9838 Jean Claude Risset's endless glissando;
#X obj 20 9865 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 9906 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9917 system.cursor;
#X text 175 9917 Get information about cursor motion \, mousewheel and
buttonclick;
#X obj 30 9954 system.getenv;
#X text 175 9954 Get system environment variables;
#X obj 30 9981 system.hostname;
#X text 175 9981 outputs system hostname;
#X obj 30 10008 system.memsize;
#X text 175 10008 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 10045 system.memused;
#X text 175 10045 returns the process physical memory use - current
and peak;
#X obj 30 10072 system.screen_size;
#X text 175 10072 returns current screen size in pixels;
#X obj 20 10099 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 10140 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10154 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 10151 Timeline bang;
#X obj 30 10177 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 10174 Timeline section;
#X obj 30 10197 tl.transport;
#X text 175 10197 Timeline transport control;
#X obj 30 10227 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 10224 A bang... that's all;
#X obj 30 10250 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 10247 colorchooser widget;
#X obj 30 10273 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 10270 Display GUI object;
#X obj 30 10296 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 10293 GUI for turning DSP on/off;
#X obj 30 10319 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 10316 envelope editor widget;
#X obj 30 10342 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 10339 UI gain control;
#X obj 30 10365 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 10362 simple icon with button capabilities;
#X obj 30 10388 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 10385 value increment/decrement;
#X obj 30 10411 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 10408 keyboard widget;
#X obj 30 10434 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 10431 knob widget;
#X obj 30 10457 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 10454 simple label widget;
#X obj 30 10480 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 10477 Hyperlink widget;
#X obj 30 10503 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 10500 The matrix of toggles has you.;
#X obj 30 10526 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 10523 Dropdown menu;
#X obj 30 10549 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 10546 Shows peak and rms signal level;
#X obj 30 10572 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 10569 counterpart of the vanilla [nbx];
#X obj 30 10595 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 10592 counterpart of the vanilla [nbx] for signal;
#X obj 30 10618 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 10615 Preset manager;
#X obj 30 10641 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 10638 counterpart of the vanilla radio toggle;
#X obj 30 10664 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 10661 rangle slider;
#X obj 30 10687 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 10684 Scope GUI object;
#X obj 30 10710 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 10707 counterpart of the vanilla slider;
#X obj 30 10733 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 10730 2D slider widget;
#X obj 30 10756 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 10753 Multiple slider widget;
#X obj 30 10779 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 10776 Spectroscope GUI object;
#X obj 30 10802 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 10799 displays a list of text buttons or text toggles;
#X obj 30 10825 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 10822 modern toggle widget;
#X obj 20 10845 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 10886 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10897 vector.distance;
#X text 175 10897 returns euclidean distance between two points;
#X obj 30 10924 vector.dot;
#X text 175 10924 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 10975 vector.length;
#X text 175 10975 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 11012 vector.normalize;
#X text 175 11012 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 11039 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 11039 version: v0.5 \, license: GPL3;
#X obj 20 11058 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;