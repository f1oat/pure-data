#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot;
#X text 200 560 array data plotter;
#X obj 30 587 array.plot~;
#X text 200 587 plot signal on specified array;
#X obj 30 614 array.resample;
#X text 200 614 array resampler;
#X obj 30 641 array.rms;
#X text 200 641 calculates root mean square value for array;
#X obj 30 668 array.set;
#X text 200 668 set array content from list;
#X obj 30 695 array.stddev;
#X text 200 695 calculates standard deviation for array values;
#X obj 30 722 array.stretch;
#X text 200 722 array time-stretch \, pitch-shift or rate-change;
#X obj 30 749 array.sum;
#X text 200 749 calculates sum of array elements;
#X obj 30 776 array.sum2;
#X text 200 776 calculates sum of squares of array elements;
#X obj 30 803 array.variance;
#X text 200 803 calculates variance of array values;
#X obj 30 830 array.vplay;
#X text 200 830 simple array player for using with vline~;
#X obj 30 857 array.window;
#X text 200 857 fill array with window;
#X obj 30 884 plot.geomspace~;
#X text 200 884 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 924 plot.hist~;
#X text 200 924 calculate and output signal histogram;
#X obj 30 951 plot.linspace~;
#X text 200 951 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 991 plot.logspace~;
#X text 200 991 outputs numbers spaced evenly on a log scale;
#X obj 30 1018 plot.response~;
#X text 200 1018 output amp/phase freq response to impulse;
#X obj 20 1045 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1086 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1097 ceammc.search;
#X text 200 1097 ceammc library search object;
#X obj 30 1127 ui.link @title [function] @url function-help.pd;
#X text 200 1124 named function;
#X obj 30 1149 function.call;
#X text 200 1149 call named function;
#X obj 30 1176 gain~;
#X text 200 1176 multislot signal gain;
#X obj 30 1203 logger;
#X text 200 1203 advanced data logger;
#X obj 30 1230 matrix~;
#X text 200 1230 signal routing matrix;
#X obj 30 1257 metro.pattern;
#X text 200 1257 metro with rhythmic patterns;
#X obj 30 1284 metro.random;
#X text 200 1284 metro random bang with specified range;
#X obj 30 1311 metro.seq;
#X text 200 1311 metro sequencer;
#X obj 30 1338 mix~;
#X text 200 1338 multislot signal mixer;
#X obj 30 1365 nsig~;
#X text 200 1365 Mulitchannel converter from control to audio rate;
#X obj 30 1392 obj.props;
#X text 200 1392 property extractor;
#X obj 30 1419 radio;
#X text 200 1419 float index to outlet values as radio switch;
#X obj 30 1446 sync;
#X text 200 1446 value synchronization;
#X obj 30 1473 window;
#X text 200 1473 returns window value by given window position;
#X obj 30 1500 xdac~;
#X text 200 1500 dac~ with channel ranges;
#X obj 30 1527 xfade2~;
#X text 200 1527 multi stereo-signal crossfade;
#X obj 30 1554 xfade~;
#X text 200 1554 multi signal crossfade;
#X obj 20 1581 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1622 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1633 chaos.gbman0;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.gbman0~;
#X text 200 1660 Gingerbreadman map chaotic generator;
#X obj 30 1687 chaos.jong;
#X text 200 1687 Peter de Jong attractor;
#X obj 30 1714 chaos.logistic;
#X text 200 1714 Logistic map chaotic generator;
#X obj 30 1741 chaos.std0;
#X text 200 1741 Standard map chaotic generator;
#X obj 30 1768 chaos.std0~;
#X text 200 1768 Standard map chaotic generator;
#X obj 20 1795 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1836 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1847 array.p2s;
#X text 200 1847 convert array phase [0\..1] to sample position;
#X obj 30 1874 array.s2p;
#X text 200 1874 convert sample position to phase range [0\..1];
#X obj 30 1901 conv.amp2dbfs;
#X text 200 1901 convert from amplitude to decibel full scale;
#X obj 30 1928 conv.amp2dbfs~;
#X text 200 1928 convert from amplitude to decibel full scale;
#X obj 30 1955 conv.bits2bang;
#X text 200 1955 convert list of bits to bang events;
#X obj 30 1982 conv.bits2int;
#X text 200 1982 convert list of bits to integer;
#X obj 30 2009 conv.bits2note;
#X text 200 2009 convert list of bits to note events;
#X obj 30 2036 conv.bits2pos;
#X text 200 2036 convert list of bits to list of bit position;
#X obj 30 2063 conv.bpm2hz;
#X text 200 2063 converts BPM to frequency in herz;
#X obj 30 2090 conv.bpm2ms;
#X text 200 2090 convert frequency in BPM to period in milliseconds;
#X obj 30 2117 conv.bpm2sec;
#X text 200 2117 convert frequency in BPM to period in seconds;
#X obj 30 2144 conv.car2pol;
#X text 200 2144 convert cartesian coords to polar;
#X obj 30 2171 conv.cc2amp;
#X text 200 2171 convert from MIDI Control Change range;
#X obj 30 2198 conv.dbfs2amp;
#X text 200 2198 convert decibel full scale to amplitude;
#X obj 30 2225 conv.dbfs2amp~;
#X text 200 2225 convert decibel full scale to amplitude;
#X obj 30 2252 conv.degree2key;
#X text 200 2252 convert scale degree to key;
#X obj 30 2279 conv.hex2int;
#X text 200 2279 hex symbol to int value;
#X obj 30 2306 conv.int2bits;
#X text 200 2306 convert integer to list of bits;
#X obj 30 2333 conv.lin2curve;
#X text 200 2333 map linear to exponential range with 0 allowed.;
#X obj 30 2360 conv.lin2exp;
#X text 200 2360 maps linear range to exponential range;
#X obj 30 2387 conv.lin2lin;
#X text 200 2387 convert from one linear range to another;
#X obj 30 2414 conv.lin2lin~;
#X text 200 2414 convert from one linear range to another for signals;
#X obj 30 2441 conv.list2props;
#X text 200 2441 converts list to series of property messages;
#X obj 30 2468 conv.midi2freq;
#X text 200 2468 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2508 conv.ms2bpm;
#X text 200 2508 convert period in milliseconds to frequency in BPM;
#X obj 30 2535 conv.ms2samp;
#X text 200 2535 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2575 conv.ms2samp~;
#X text 200 2575 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2615 conv.phase2rad;
#X text 200 2615 convert phase value [0-1] to radians [0-2π];
#X obj 30 2642 conv.phase2rad~;
#X text 200 2642 convert phase value [0-1] to radians [0-2π];
#X obj 30 2669 conv.pitch2midi;
#X text 200 2669 converts symbol pitch name to MIDI note number;
#X obj 30 2696 conv.pol2car;
#X text 200 2696 convert from polar coordinates to cartesian;
#X obj 30 2723 conv.rad2phase;
#X text 200 2723 convert radians value to phase;
#X obj 30 2750 conv.rad2phase~;
#X text 200 2750 convert radians value to phase;
#X obj 30 2777 conv.samp2ms;
#X text 200 2777 convert samples to time according to samplerate;
#X obj 30 2804 conv.samp2ms~;
#X text 200 2804 convert samples to milliseconds according to samplerate;
#X obj 30 2831 conv.samp2sec;
#X text 200 2831 convert samples to time according to samplerate;
#X obj 30 2858 conv.sec2bpm;
#X text 200 2858 convert period in seconds to frequency in BPM;
#X obj 30 2885 conv.sec2samp;
#X text 200 2885 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2925 conv.sec2str;
#X text 200 2925 converts float time in seconds to formated symbol
(or string);
#X obj 30 2952 conv.sig2float~;
#X text 200 2952 convert signal to floats;
#X obj 30 2979 conv.str2sec;
#X text 200 2979 converts formatted time to float value in seconds;
#X obj 20 3006 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3047 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3058 data.dict;
#X text 200 3058 dictionary container: store values by key;
#X obj 30 3085 data.fifo;
#X text 200 3085 First-In-First-Out (FIFO) queue data container;
#X obj 30 3112 data.float;
#X text 200 3112 robust float object;
#X obj 30 3139 data.int;
#X text 200 3139 robust int object;
#X obj 30 3166 data.list;
#X text 200 3166 list container;
#X obj 30 3193 data.mlist;
#X text 200 3193 multidimensional list container;
#X obj 30 3220 data.set;
#X text 200 3220 container that store unique elements;
#X obj 30 3247 data.set2list;
#X text 200 3247 converts set to list;
#X obj 30 3274 dict.contains;
#X text 200 3274 predicate to check if dict contains a keys;
#X obj 30 3301 dict.each;
#X text 200 3301 map each value in dict;
#X obj 30 3328 dict.from_list;
#X text 200 3328 creates dictionary from list;
#X obj 30 3355 dict.get;
#X text 200 3355 output dict values;
#X obj 30 3382 dict.keys;
#X text 200 3382 get list of dict keys;
#X obj 30 3409 dict.pass;
#X text 200 3409 passes specified keys in dict;
#X obj 30 3436 dict.reject;
#X text 200 3436 rejects specified keys from dict;
#X obj 30 3463 dict.size;
#X text 200 3463 dictionary size;
#X obj 30 3490 dict.to_list;
#X text 200 3490 converts dictionary to plain list;
#X obj 30 3517 dict.values;
#X text 200 3517 dictionary values as mlist;
#X obj 30 3544 mlist.flatten;
#X text 200 3544 flatten nested mlist;
#X obj 30 3571 rtree.to_list;
#X text 200 3571 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3598 set.contains;
#X text 200 3598 check if specified element is in set;
#X obj 30 3625 set.diff;
#X text 200 3625 difference between two sets;
#X obj 30 3652 set.equal;
#X text 200 3652 checks if two sets are equal (contains same elements);
#X obj 30 3679 set.intersect;
#X text 200 3679 output intersection of given sets;
#X obj 30 3706 set.size;
#X text 200 3706 get number of elements in set;
#X obj 30 3733 set.symdiff;
#X text 200 3733 symmetric difference between two sets;
#X obj 30 3760 set.union;
#X text 200 3760 output union of given sets;
#X obj 20 3787 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3828 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3839 dyn.comp2~;
#X text 200 3839 stereo dynamic range compressor;
#X obj 30 3866 dyn.comp~;
#X text 200 3866 mono dynamic range compressors;
#X obj 30 3893 dyn.gate2~;
#X text 200 3893 stereo signal gate;
#X obj 30 3920 dyn.gate~;
#X text 200 3920 mono signal gate;
#X obj 30 3947 dyn.limit2~;
#X text 200 3947 stereo 1176LN Peak Limiter;
#X obj 30 3974 dyn.limit~;
#X text 200 3974 mono 1176LN Peak Limiter;
#X obj 30 4001 dyn.softclip~;
#X text 200 4001 soft signal clip;
#X obj 20 4028 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4069 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4080 env.adsr~;
#X text 200 4080 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4107 env.ar~;
#X text 200 4107 Attack/Release envelope generator;
#X obj 30 4134 env.asr~;
#X text 200 4134 Attack/Sustain/Release envelope generator;
#X obj 30 4161 env.concat;
#X text 200 4161 Envelope concatenation;
#X obj 30 4188 env.follow~;
#X text 200 4188 Envelope follower with independent attack and release
times;
#X obj 30 4215 env.mix;
#X text 200 4215 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4255 env.smooth~;
#X text 200 4255 An envelope with an exponential attack and release;
#X obj 30 4282 env.tscale;
#X text 200 4282 Envelope time-scale;
#X obj 30 4309 env.tshift;
#X text 200 4309 Envelope time-shift (horizontal);
#X obj 30 4336 env.vscale;
#X text 200 4336 Envelope value-scale;
#X obj 30 4363 env2array;
#X text 200 4363 Renders envelope to specified array;
#X obj 30 4390 env2vline;
#X text 200 4390 Converts envelope to bunch of vline messages;
#X obj 30 4417 envelope;
#X text 200 4417 Envelope data type;
#X obj 30 4444 vline2env;
#X text 200 4444 Converts vline messages to env;
#X obj 20 4471 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4512 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4523 expand_env;
#X text 200 4523 Substitute environment variables in data stream;
#X obj 30 4550 flow.append;
#X text 200 4550 append message to flow stream;
#X obj 30 4577 flow.change;
#X text 200 4577 rejects redundant input values;
#X obj 30 4604 flow.count;
#X text 200 4604 control flow event counter;
#X obj 30 4631 flow.delay;
#X text 200 4631 enhanced version on vanilla delay object;
#X obj 30 4658 flow.demultiplex;
#X text 200 4658 control flow demultiplexer;
#X obj 30 4685 flow.demultiplex2~;
#X text 200 4685 audio stream stereo demultiplexer;
#X obj 30 4712 flow.demultiplex~;
#X text 200 4712 audio stream demultiplexer;
#X obj 30 4739 flow.dup;
#X text 200 4739 message duplicator;
#X obj 30 4766 flow.gate;
#X text 200 4766 control flow gate. [spigot] analog;
#X obj 30 4793 flow.greater;
#X text 200 4793 numeric stream router;
#X obj 30 4820 flow.greater_eq;
#X text 200 4820 numeric stream router;
#X obj 30 4847 flow.group;
#X text 200 4847 group input atoms in list of specified size;
#X obj 30 4874 flow.interval;
#X text 200 4874 measure time between flow events;
#X obj 30 4901 flow.less;
#X text 200 4901 numeric stream router \, like many [moses];
#X obj 30 4928 flow.less_eq;
#X text 200 4928 numeric stream router \, like many [moses];
#X obj 30 4955 flow.match;
#X text 200 4955 route data flow by regexp match;
#X obj 30 4982 flow.mem;
#X text 200 4982 store data flow in memory;
#X obj 30 5009 flow.multiplex;
#X text 200 5009 control flow multiplexer;
#X obj 30 5036 flow.multiplex2~;
#X text 200 5036 audio stream stereo multiplexer;
#X obj 30 5063 flow.multiplex~;
#X text 200 5063 audio stream multiplexer;
#X obj 30 5090 flow.once;
#X text 200 5090 one message pass thru;
#X obj 30 5117 flow.pack;
#X text 200 5117 flow pack;
#X obj 30 5144 flow.pass;
#X text 200 5144 pass specified values;
#X obj 30 5171 flow.pass_if;
#X text 200 5171 pass values that accepted by predicate object;
#X obj 30 5198 flow.pipe;
#X text 200 5198 enhanced version on vanilla pipe object;
#X obj 30 5225 flow.queue;
#X text 200 5225 multi-channel control flow sync queue (or FIFO);
#X obj 30 5252 flow.reject;
#X text 200 5252 reject specified values;
#X obj 30 5279 flow.reject_if;
#X text 200 5279 reject values by predicate;
#X obj 30 5306 flow.ring;
#X text 200 5306 dataflow ring buffer;
#X obj 30 5333 flow.route;
#X text 200 5333 advanced message router;
#X obj 30 5360 flow.select;
#X text 200 5360 vanilla flow on steroids;
#X obj 30 5387 flow.space;
#X text 200 5387 space in time messages received at the same logical
time;
#X obj 30 5414 flow.speedlim;
#X text 200 5414 control stream speed limiter;
#X obj 30 5441 flow.split;
#X text 200 5441 split data flow by external side-chain predicate;
#X obj 30 5468 flow.stack;
#X text 200 5468 any message stack;
#X obj 30 5495 flow.sync;
#X text 200 5495 bus with only hot inlets;
#X obj 30 5522 flow.sync_pack;
#X text 200 5522 flow pack with all hot inlets;
#X obj 30 5549 flow.tee~;
#X text 200 5549 separate audio and control streams;
#X obj 30 5576 replace;
#X text 200 5576 Replace atoms in data stream;
#X obj 30 5603 route.float;
#X text 200 5603 separate float messages from other types;
#X obj 20 5630 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5671 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5682 flt.biquad~;
#X text 200 5682 second order IIR filter.;
#X obj 30 5709 flt.bpf12~;
#X text 200 5709 Two pole band-pass butterworth filter;
#X obj 30 5736 flt.bpf24~;
#X text 200 5736 Four pole band-pass butterworth filter;
#X obj 30 5763 flt.c_bpf~;
#X text 200 5763 BPF coefficient calculator for biquad filter;
#X obj 30 5790 flt.c_highshelf~;
#X text 200 5790 Highshelf filter coefficient calculator for biquad;
#X obj 30 5817 flt.c_hpf~;
#X text 200 5817 HPF coefficient calculator for biquad filter;
#X obj 30 5844 flt.c_lowshelf~;
#X text 200 5844 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5871 flt.c_lpf~;
#X text 200 5871 LPF coefficient calculator for biquad filter;
#X obj 30 5898 flt.c_notch~;
#X text 200 5898 Band-reject coefficient calculator for biquad filter;
#X obj 30 5925 flt.c_peak~;
#X text 200 5925 Peaking equalizer calculator for biquad;
#X obj 30 5952 flt.dcblock2~;
#X text 200 5952 stereo DC blocker;
#X obj 30 5979 flt.dcblock~;
#X text 200 5979 mono DC blocker;
#X obj 30 6006 flt.eq10~;
#X text 200 6006 graphic 10 band equalizer;
#X obj 30 6033 flt.eq_peak_cq~;
#X text 200 6033 constant-Q second order peaking equalizer section;
#X obj 30 6060 flt.eq_peak~;
#X text 200 6060 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6115 flt.fb_comb~;
#X text 200 6115 feedback comb filter;
#X obj 30 6142 flt.ff_comb~;
#X text 200 6142 feed forward comb filter;
#X obj 30 6169 flt.freqz;
#X text 200 6169 compute the frequency response of a digital filter;
#X obj 30 6196 flt.freqz~;
#X text 200 6196 compute the frequency response of a digital filter;
#X obj 30 6223 flt.highshelf~;
#X text 200 6223 gain boost|cut above some frequency;
#X obj 30 6250 flt.hpf12~;
#X text 200 6250 High-pass second order Butterworth filter;
#X obj 30 6277 flt.hpf24~;
#X text 200 6277 High-pass fourth order Butterworth filter;
#X obj 30 6304 flt.lowshelf~;
#X text 200 6304 gain boost|cut below some frequency;
#X obj 30 6331 flt.lpf12~;
#X text 200 6331 Low-pass second order Butterworth filter;
#X obj 30 6358 flt.lpf24~;
#X text 200 6358 Low-pass fourth order Butterworth filter;
#X obj 30 6385 flt.median;
#X text 200 6385 Median control flow filter;
#X obj 30 6412 flt.moog_vcf~;
#X text 200 6412 Moog Voltage Controlled Filter;
#X obj 30 6439 flt.notch~;
#X text 200 6439 band-rejection filter;
#X obj 30 6466 flt.resonbp~;
#X text 200 6466 Simple resonant bandpass filter;
#X obj 20 6493 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6534 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6545 fx.bitdown~;
#X text 200 6545 bit downer and downsampler effect;
#X obj 30 6572 fx.chorus~;
#X text 200 6572 Chorus effect;
#X obj 30 6599 fx.distortion1~;
#X text 200 6599 distortion #1 from Guitarix effects set;
#X obj 30 6626 fx.distortion2~;
#X text 200 6626 distortion #2 from Guitarix effects set;
#X obj 30 6653 fx.distortion3~;
#X text 200 6653 simple distortion #3 from Guitarix effects set;
#X obj 30 6680 fx.distortion~;
#X text 200 6680 cubic nonlinearity distortion;
#X obj 30 6707 fx.drive~;
#X text 200 6707 Guitarix drive effect;
#X obj 30 6734 fx.drone_box~;
#X text 200 6734 mono sympathetic resonance generator;
#X obj 30 6761 fx.echo~;
#X text 200 6761 simple echo effect;
#X obj 30 6788 fx.flanger~;
#X text 200 6788 mono flanging effect;
#X obj 30 6815 fx.freeverb2~;
#X text 200 6815 freeverb2 - stereo version of freeverb;
#X obj 30 6842 fx.freeverb~;
#X text 200 6842 freeverb - common used open-source reverb;
#X obj 30 6869 fx.freqshift~;
#X text 200 6869 frequency shifter or single-sideband ring modulation;
#X obj 30 6896 fx.granulator~;
#X text 200 6896 simple input stream granulator;
#X obj 30 6923 fx.greyhole~;
#X text 200 6923 A complex echo-like effect;
#X obj 30 6950 fx.looper~;
#X text 200 6950 One track looper;
#X obj 30 6977 fx.pitchshift_s~;
#X text 200 6977 signal version of fx.pitchshift~;
#X obj 30 7004 fx.pitchshift~;
#X text 200 7004 simple pitch shifter based on 2 delay lines;
#X obj 30 7031 fx.sdelay~;
#X text 200 7031 smooth delay with a feedback control;
#X obj 30 7058 fx.vocoder~;
#X text 200 7058 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7098 fx.wahwah~;
#X text 200 7098 digitized CryBaby wah pedal;
#X obj 30 7125 fx.zita_rev1~;
#X text 200 7125 Zita stereo reverb;
#X obj 20 7152 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7193 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7204 global.dict;
#X text 200 7204 global named dict object;
#X obj 30 7231 global.float;
#X text 200 7231 global named float object;
#X obj 30 7258 global.int;
#X text 200 7258 global named integer object;
#X obj 30 7285 global.list;
#X text 200 7285 global named list object;
#X obj 30 7312 global.mlist;
#X text 200 7312 global named mlist object;
#X obj 30 7339 global.set;
#X text 200 7339 global named set object;
#X obj 20 7366 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7407 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7418 hw.apple_smc;
#X text 200 7418 query the system management control in Apples;
#X obj 30 7445 hw.apple_sms;
#X text 200 7445 query the sudden motion sensor in Apples;
#X obj 30 7472 hw.arduino;
#X text 200 7472 Arduino device;
#X obj 30 7499 hw.cpu_temp;
#X text 200 7499 get CPU temperature;
#X obj 30 7526 hw.display;
#X text 200 7526 get/set display properties;
#X obj 30 7553 hw.kbd_light;
#X text 200 7553 Get/set keyboard light on some devices;
#X obj 20 7580 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7621 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7632 lfo.+pulse~;
#X text 200 7632 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7659 lfo.+saw~;
#X text 200 7659 Positive unit-amplitude low frequency saw wave;
#X obj 30 7686 lfo.+square~;
#X text 200 7686 Positive low frequency square wave;
#X obj 30 7713 lfo.+tri~;
#X text 200 7713 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7740 lfo.impulse~;
#X text 200 7740 Unit-amplitude low-frequency impulse train;
#X obj 30 7767 lfo.pulse~;
#X text 200 7767 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7794 lfo.saw~;
#X text 200 7794 Full-range unit-amplitude low frequency saw;
#X obj 30 7821 lfo.square~;
#X text 200 7821 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7848 lfo.tri~;
#X text 200 7848 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7875 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7916 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7927 list.^at;
#X text 200 7927 on input index(es) outputs list element(s);
#X obj 30 7954 list.^contains;
#X text 200 7954 checks if input atom is found in the list;
#X obj 30 7981 list.^search;
#X text 200 7981 on input atom returns it index in list;
#X obj 30 8008 list.all_of;
#X text 200 8008 checks if all list atoms accepted by predicate;
#X obj 30 8035 list.any_of;
#X text 200 8035 checks if at least one list element is accepted by
predicate;
#X obj 30 8062 list.append;
#X text 200 8062 append atom or list to the end of input list;
#X obj 30 8089 list.apply_to;
#X text 200 8089 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8129 list.at;
#X text 200 8129 outputs list element(s) at specified index(es);
#X obj 30 8156 list.choice;
#X text 200 8156 outputs random element from list;
#X obj 30 8183 list.contains;
#X text 200 8183 checks if input list contains specified atoms;
#X obj 30 8210 list.count;
#X text 200 8210 output the number of items that equal to specified
value;
#X obj 30 8237 list.count_if;
#X text 200 8237 output the number of items that satisfy to external
predicate;
#X obj 30 8264 list.delta;
#X text 200 8264 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8304 list.distribution;
#X text 200 8304 list value distribution;
#X obj 30 8331 list.do;
#X text 200 8331 iterate and modify list contents via side-chain;
#X obj 30 8358 list.each;
#X text 200 8358 maps each list value via external side-chain;
#X obj 30 8385 list.enumerate;
#X text 200 8385 enumerates input list;
#X obj 30 8412 list.equal;
#X text 200 8412 checks if given lists are equal;
#X obj 30 8439 list.first;
#X text 200 8439 returns first list element;
#X obj 30 8466 list.gen;
#X text 200 8466 generates list of specified length via external generator;
#X obj 30 8493 list.histogram;
#X text 200 8493 outputs distribution histogram;
#X obj 30 8520 list.insert;
#X text 200 8520 insert atom or list to the specified position of input
list;
#X obj 30 8547 list.integrator;
#X text 200 8547 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8587 list.last;
#X text 200 8587 output last list element;
#X obj 30 8614 list.length;
#X text 200 8614 output the number of atoms in the list;
#X obj 30 8641 list.max;
#X text 200 8641 output largest element in the list;
#X obj 30 8668 list.mean;
#X text 200 8668 calculates average of list of floats;
#X obj 30 8695 list.min;
#X text 200 8695 returns smallest element in the list;
#X obj 30 8722 list.none_of;
#X text 200 8722 checks if none of list atoms is accepted by predicate;
#X obj 30 8749 list.normalize;
#X text 200 8749 normalizes float list values to get their sum = 1.0;
#X obj 30 8776 list.pass_if;
#X text 200 8776 leave only elements accepted by predicate;
#X obj 30 8803 list.prepend;
#X text 200 8803 prepend atom or list before input list;
#X obj 30 8830 list.product;
#X text 200 8830 calculates product of floats in list;
#X obj 30 8857 list.range;
#X text 200 8857 output list smallest and largest value;
#X obj 30 8884 list.reduce;
#X text 200 8884 apply function of two arguments cumulatively to the
list;
#X obj 30 8911 list.remove;
#X text 200 8911 remove list element(s) at specified positions;
#X obj 30 8938 list.remove_if;
#X text 200 8938 remove elements by predicate;
#X obj 30 8965 list.repack;
#X text 200 8965 repack list to specified size;
#X obj 30 8992 list.repeat;
#X text 200 8992 output new list by repeating input list specified
times;
#X obj 30 9019 list.resample;
#X text 200 9019 resample list with specified ratio;
#X obj 30 9046 list.resize;
#X text 200 9046 changes list size;
#X obj 30 9073 list.reverse;
#X text 200 9073 reverses the order of the elements in the list;
#X obj 30 9100 list.rldecode;
#X text 200 9100 Run-length list decoder (RLE);
#X obj 30 9127 list.rlencode;
#X text 200 9127 RLE (run-length encoding) for lists;
#X obj 30 9154 list.rotate;
#X text 200 9154 rotates list;
#X obj 30 9181 list.route;
#X text 200 9181 acts like [route] but for lists;
#X obj 30 9208 list.search;
#X text 200 9208 search specified items in input list;
#X obj 30 9235 list.separate;
#X text 200 9235 sends list elements one by one separately;
#X obj 30 9262 list.seq;
#X text 200 9262 numeric sequence list generator;
#X obj 30 9289 list.set;
#X text 200 9289 set list value at specified position;
#X obj 30 9316 list.shift;
#X text 200 9316 shifts the contents of the list with linear interpolation;
#X obj 30 9343 list.shuffle;
#X text 200 9343 randomly rearranges elements in list;
#X obj 30 9370 list.slice;
#X text 200 9370 extract sublist;
#X obj 30 9397 list.sort;
#X text 200 9397 sorts list values by ascending order;
#X obj 30 9424 list.sort_with;
#X text 200 9424 sort list with user defined side-chain;
#X obj 30 9451 list.split;
#X text 200 9451 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9491 list.stretch;
#X text 200 9491 stretches list - changes its size with linear interpolation;
#X obj 30 9518 list.sum;
#X text 200 9518 calculates sum of floats in list;
#X obj 30 9545 list.unique;
#X text 200 9545 removes duplicates from input list;
#X obj 30 9572 list.unpack;
#X text 200 9572 unpack list elements to separate outlets;
#X obj 30 9599 list.unzip;
#X text 200 9599 splits list to N lists \, each to separate output;
#X obj 30 9626 list.walk;
#X text 200 9626 Walks thru the list;
#X obj 30 9653 list.zip;
#X text 200 9653 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9708 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9749 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9760 live.capture~;
#X text 200 9760 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9800 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9841 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9852 local.dict;
#X text 200 9852 local named dict object;
#X obj 30 9879 local.float;
#X text 200 9879 canvas-scoped named float variable;
#X obj 30 9906 local.int;
#X text 200 9906 canvas-scoped named integer variable;
#X obj 30 9933 local.list;
#X text 200 9933 local named list object;
#X obj 30 9960 local.mlist;
#X text 200 9960 local named mlist object;
#X obj 30 9987 local.set;
#X text 200 9987 local named set object;
#X obj 20 10014 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10055 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10066 math.abs;
#X text 200 10066 absolute value function;
#X obj 30 10093 math.abs~;
#X text 200 10093 absolute value function for signals;
#X obj 30 10120 math.acos;
#X text 200 10120 arc cosine function;
#X obj 30 10147 math.acosh;
#X text 200 10147 inverse hyperbolic cosine function;
#X obj 30 10174 math.acosh~;
#X text 200 10174 hyperbolic arc cosine for signals;
#X obj 30 10201 math.acos~;
#X text 200 10201 arc cosine function for signals;
#X obj 30 10228 math.and;
#X text 200 10228 operation AND for multiple arguments;
#X obj 30 10255 math.approx;
#X text 200 10255 check if input value approximately equal to pattern;
#X obj 30 10282 math.asin;
#X text 200 10282 arc sine function;
#X obj 30 10309 math.asinh;
#X text 200 10309 inverse hyperbolic sine function;
#X obj 30 10336 math.asinh~;
#X text 200 10336 hyperbolic arc sine for signals;
#X obj 30 10363 math.asin~;
#X text 200 10363 arc sine for signals;
#X obj 30 10390 math.atan;
#X text 200 10390 arc tangent function;
#X obj 30 10417 math.atanh;
#X text 200 10417 inverse hyperbolic tangent function;
#X obj 30 10444 math.atanh~;
#X text 200 10444 hyperbolic arc tangent for signals;
#X obj 30 10471 math.atan~;
#X text 200 10471 arc tangent for signals;
#X obj 30 10498 math.cabs~;
#X text 200 10498 magnitude of a complex signals;
#X obj 30 10525 math.carg~;
#X text 200 10525 phase angle of a complex signals;
#X obj 30 10552 math.cbrt;
#X text 200 10552 cube root function;
#X obj 30 10579 math.cbrt~;
#X text 200 10579 cube root function for signals;
#X obj 30 10606 math.cdiv~;
#X text 200 10606 division of complex signals;
#X obj 30 10633 math.ceil;
#X text 200 10633 round to smallest integral value not less than input
value;
#X obj 30 10660 math.ceil~;
#X text 200 10660 round to smallest integral value not less than input
value;
#X obj 30 10687 math.cexp~;
#X text 200 10687 exponent of a complex signals;
#X obj 30 10714 math.cmul~;
#X text 200 10714 multiplication of complex signals;
#X obj 30 10741 math.cos;
#X text 200 10741 cosine function;
#X obj 30 10768 math.cosh;
#X text 200 10768 hyperbolic cosine function;
#X obj 30 10795 math.cosh~;
#X text 200 10795 hyperbolic cosine for signals;
#X obj 30 10822 math.cos~;
#X text 200 10822 cosine function;
#X obj 30 10849 math.div;
#X text 200 10849 division (on lists too);
#X obj 30 10876 math.e;
#X text 200 10876 mathematical constant \, base of the natural logarithm;
#X obj 30 10903 math.erf;
#X text 200 10903 error function;
#X obj 30 10930 math.erf~;
#X text 200 10930 error function for signals;
#X obj 30 10957 math.exp;
#X text 200 10957 exponential functions;
#X obj 30 10984 math.exp2;
#X text 200 10984 exponential functions;
#X obj 30 11011 math.exp2~;
#X text 200 11011 base-2 exponential for signal;
#X obj 30 11038 math.expr;
#X text 200 11038 dynamic [expr];
#X obj 30 11065 math.exp~;
#X text 200 11065 base-e exponential for signal;
#X obj 30 11092 math.floor;
#X text 200 11092 round to largest integral value not greater than
x;
#X obj 30 11119 math.floor~;
#X text 200 11119 round to largest integral value not greater than
x;
#X obj 30 11146 math.gamma;
#X text 200 11146 gamma function;
#X obj 30 11173 math.gamma~;
#X text 200 11173 gamma function for floating point signals;
#X obj 30 11200 math.gcd;
#X text 200 11200 calculate greatest common divisor;
#X obj 30 11227 math.inf;
#X text 200 11227 infinity value that cannot be represented accurately;
#X obj 30 11254 math.inf~;
#X text 200 11254 inifinity signal generator;
#X obj 30 11281 math.lcm;
#X text 200 11281 calculate least common multiple;
#X obj 30 11308 math.lgamma;
#X text 200 11308 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11335 math.lgamma~;
#X text 200 11335 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11375 math.log;
#X text 200 11375 natural logarithm;
#X obj 30 11402 math.log10;
#X text 200 11402 logarithm functions;
#X obj 30 11429 math.log10~;
#X text 200 11429 natural logarithm;
#X obj 30 11456 math.log2;
#X text 200 11456 logarithm functions;
#X obj 30 11483 math.log2~;
#X text 200 11483 base-2 logarithm;
#X obj 30 11510 math.log~;
#X text 200 11510 natural logarithm;
#X obj 30 11537 math.mul;
#X text 200 11537 multiplication (on lists too);
#X obj 30 11564 math.nan;
#X text 200 11564 Not a Number \, unrepresentable value;
#X obj 30 11591 math.nan~;
#X text 200 11591 signal NaN;
#X obj 30 11618 math.neg;
#X text 200 11618 negate function;
#X obj 30 11645 math.or;
#X text 200 11645 operation OR for multiple arguments;
#X obj 30 11672 math.pi;
#X text 200 11672 mathematical constant;
#X obj 30 11699 math.pi~;
#X text 200 11699 mathematical constant;
#X obj 30 11726 math.polyeval;
#X text 200 11726 evaluates the polynomial described by the coefficients
list;
#X obj 30 11753 math.reciprocal;
#X text 200 11753 calculate reciprocal number;
#X obj 30 11780 math.reciprocal~;
#X text 200 11780 calculate reciprocal number for signals;
#X obj 30 11807 math.round;
#X text 200 11807 round to integral value \, regardless of rounding
direction;
#X obj 30 11834 math.round~;
#X text 200 11834 signal round;
#X obj 30 11861 math.sign;
#X text 200 11861 sign function;
#X obj 30 11888 math.sin;
#X text 200 11888 sine function;
#X obj 30 11915 math.sinh;
#X text 200 11915 hyperbolic sine function;
#X obj 30 11942 math.sinh~;
#X text 200 11942 hyperbolic sine for signals;
#X obj 30 11969 math.sin~;
#X text 200 11969 sine function;
#X obj 30 11996 math.sqrt;
#X text 200 11996 square root function;
#X obj 30 12023 math.sqrt~;
#X text 200 12023 square root for signal;
#X obj 30 12050 math.squared;
#X text 200 12050 value square;
#X obj 30 12077 math.squared~;
#X text 200 12077 signal value square;
#X obj 30 12104 math.sync_add;
#X text 200 12104 sync addition;
#X obj 30 12131 math.sync_and;
#X text 200 12131 sync logical AND operation;
#X obj 30 12158 math.sync_div;
#X text 200 12158 sync division;
#X obj 30 12185 math.sync_eq;
#X text 200 12185 sync equal numbers check;
#X obj 30 12212 math.sync_ge;
#X text 200 12212 sync greater equal numbers compare;
#X obj 30 12239 math.sync_gt;
#X text 200 12239 sync greater then numbers compare;
#X obj 30 12266 math.sync_le;
#X text 200 12266 sync less equal numbers compare;
#X obj 30 12293 math.sync_lshift;
#X text 200 12293 sync signed bit left shift;
#X obj 30 12320 math.sync_lt;
#X text 200 12320 sync less then numbers compare;
#X obj 30 12347 math.sync_mod;
#X text 200 12347 sync remainder of modulo division (float or integer);
#X obj 30 12374 math.sync_mul;
#X text 200 12374 sync multiplication;
#X obj 30 12401 math.sync_ne;
#X text 200 12401 sync numbers for not equality;
#X obj 30 12428 math.sync_or;
#X text 200 12428 sync logical OR operation;
#X obj 30 12455 math.sync_rshift;
#X text 200 12455 sync signed bit right shift;
#X obj 30 12482 math.sync_sub;
#X text 200 12482 sync subtraction;
#X obj 30 12509 math.sync_xor;
#X text 200 12509 sync logical XOR operation;
#X obj 30 12536 math.tan;
#X text 200 12536 tangent function;
#X obj 30 12563 math.tanh;
#X text 200 12563 hyperbolic tangent function;
#X obj 30 12590 math.tanh~;
#X text 200 12590 hyperbolic tangent for signals;
#X obj 30 12617 math.tan~;
#X text 200 12617 tangent function;
#X obj 30 12644 math.trunc;
#X text 200 12644 truncate to integer value;
#X obj 30 12671 math.trunc~;
#X text 200 12671 truncate to integer value;
#X obj 20 12698 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12739 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12750 midi.cc;
#X text 200 12750 enhanced version of vanilla ctlin;
#X obj 30 12777 midi.clock;
#X text 200 12777 midi clock toolbox;
#X obj 30 12804 midi.ctl2str;
#X text 200 12804 convert Standard MIDI Controllers number to name;
#X obj 30 12831 midi.event2ctl;
#X text 200 12831 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12858 midi.event2note;
#X text 200 12858 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12885 midi.event2prg;
#X text 200 12885 convert MidiEvent message to midi program change
value;
#X obj 30 12912 midi.file;
#X text 200 12912 standard midi file SMF reader and writer;
#X obj 30 12939 midi.key2str;
#X text 200 12939 convert key number to SPN name according to tonality;
#X obj 30 12966 midi.oct;
#X text 200 12966 midi octave transpose;
#X obj 30 12993 midi.prg2str;
#X text 200 12993 convert GM Instrument number to name (string or symbol);
#X obj 30 13020 midi.sysex;
#X text 200 13020 sysex input messages as list;
#X obj 30 13047 midi.track;
#X text 200 13047 extract track from MidiFile;
#X obj 30 13074 midi.tuning;
#X text 200 13074 apply tuning to midi messages;
#X obj 30 13101 midi.vramp;
#X text 200 13101 apply crescendo or diminuendo for midi message flow;
#X obj 30 13128 midi.vrand;
#X text 200 13128 midi velocity randomizer;
#X obj 20 13155 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13196 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13207 click~;
#X text 200 13207 Output single impulse on bang;
#X obj 30 13234 fluid~;
#X text 200 13234 FluidSynth SoundFont 2 player;
#X obj 30 13261 modplug~;
#X text 200 13261 MOD file player (using libmodplug);
#X obj 30 13288 speech.flite;
#X text 200 13288 render speech to array;
#X obj 20 13315 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13356 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13367 loadexpr;
#X text 200 13367 send message when patch loads;
#X obj 30 13394 msg;
#X text 200 13394 message constructor;
#X obj 30 13421 msg.after;
#X text 200 13421 send specified message after incoming message;
#X obj 30 13448 msg.onload;
#X text 200 13448 send message when patch loads;
#X obj 20 13475 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13516 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13527 net.host2ip;
#X text 200 13527 returns IP address by DNS name;
#X obj 20 13554 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13595 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13606 noise.baker;
#X text 200 13606 Part of a-chaos library;
#X obj 30 13633 noise.clifford;
#X text 200 13633 Part of a-chaos library;
#X obj 30 13660 noise.collatz;
#X text 200 13660 Part of a-chaos library;
#X obj 30 13687 noise.crackle~;
#X text 200 13687 sparse noise generator;
#X obj 30 13714 noise.duffing;
#X text 200 13714 Part of a-chaos library;
#X obj 30 13741 noise.ginger;
#X text 200 13741 Gingerbreadman map chaotic generator;
#X obj 30 13768 noise.henon;
#X text 200 13768 Part of a-chaos library;
#X obj 30 13795 noise.henon_heilles;
#X text 200 13795 Part of a-chaos library;
#X obj 30 13822 noise.henon_phase;
#X text 200 13822 Part of a-chaos library;
#X obj 30 13849 noise.henonf;
#X text 200 13849 Part of a-chaos library;
#X obj 30 13876 noise.ikeda;
#X text 200 13876 Part of a-chaos library;
#X obj 30 13903 noise.jong;
#X text 200 13903 Part of a-chaos library;
#X obj 30 13930 noise.lfreq0~;
#X text 200 13930 sampled/held noise (piecewise constant);
#X obj 30 13957 noise.lfreq~;
#X text 200 13957 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 13984 noise.logistic;
#X text 200 13984 Part of a-chaos library;
#X obj 30 14011 noise.lorenz;
#X text 200 14011 Part of a-chaos library;
#X obj 30 14038 noise.lyapunov;
#X text 200 14038 Part of a-chaos library;
#X obj 30 14065 noise.navier_stokes;
#X text 200 14065 Part of a-chaos library;
#X obj 30 14092 noise.pink~;
#X text 200 14092 Pink noise generator;
#X obj 30 14119 noise.rossler;
#X text 200 14119 Part of a-chaos library;
#X obj 30 14146 noise.stein;
#X text 200 14146 Part of a-chaos library;
#X obj 30 14173 noise.torus;
#X text 200 14173 Part of a-chaos library;
#X obj 30 14200 noise.verhulst;
#X text 200 14200 Part of a-chaos library;
#X obj 30 14227 noise.white~;
#X text 200 14227 White noise generator;
#X obj 20 14254 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14295 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14306 osc.blit~;
#X text 200 14306 Bandlimited impulse train oscillator;
#X obj 30 14333 osc.impulse~;
#X text 200 14333 Bandlimited impulse train generator;
#X obj 30 14360 osc.pulse~;
#X text 200 14360 Bandlimited pulse train oscillator;
#X obj 30 14387 osc.saw4~;
#X text 200 14387 Bandlimited sawtooth wave;
#X obj 30 14414 osc.saw~;
#X text 200 14414 Alias-free sawtooth wave;
#X obj 30 14441 osc.sinfb~;
#X text 200 14441 Sine oscilator with feedback;
#X obj 30 14468 osc.sin~;
#X text 200 14468 Sine wave oscillator;
#X obj 30 14495 osc.square~;
#X text 200 14495 Bandlimited square wave oscillator;
#X obj 30 14522 osc.tri~;
#X text 200 14522 Bandlimited triangle wave oscillator;
#X obj 20 14549 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14590 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14601 canvas.current;
#X text 200 14601 verbose information about current canvas;
#X obj 30 14628 canvas.dir;
#X text 200 14628 current canvas directory;
#X obj 30 14655 canvas.name;
#X text 200 14655 current canvas name;
#X obj 30 14682 canvas.path;
#X text 200 14682 current canvas fullpath;
#X obj 30 14709 canvas.top;
#X text 200 14709 verbose information about top-level canvas;
#X obj 30 14736 patch.args;
#X text 200 14736 Get patch or subpatch arguments;
#X obj 30 14763 patch.deps;
#X text 200 14763 patch dependencies: used objects and abstractions;
#X obj 30 14790 patch.tree;
#X text 200 14790 patch tree;
#X obj 20 14817 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 14858 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14869 path.basename;
#X text 200 14869 outputs filename portion of pathname;
#X obj 30 14896 path.dirname;
#X text 200 14896 outputs directory portion of pathname;
#X obj 30 14923 path.exists;
#X text 200 14923 checks if given path exists;
#X obj 30 14950 path.is_dir;
#X text 200 14950 check if path is directory;
#X obj 30 14977 path.lsdir;
#X text 200 14977 list directory contents;
#X obj 20 15004 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 15045 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15056 is_any;
#X text 200 15056 checks if input data has *any* type;
#X obj 30 15083 is_bang;
#X text 200 15083 checks if input data has *bang* type;
#X obj 30 15110 is_data;
#X text 200 15110 checks if input data has *data* type;
#X obj 30 15137 is_dict;
#X text 200 15137 checks if input data has *dict* type;
#X obj 30 15164 is_even;
#X text 200 15164 checks if input number is even;
#X obj 30 15191 is_file;
#X text 200 15191 checks if file exists and accessible;
#X obj 30 15218 is_float;
#X text 200 15218 checks if input data has *float* type;
#X obj 30 15245 is_list;
#X text 200 15245 checks if input data has *list* type;
#X obj 30 15272 is_odd;
#X text 200 15272 checks if input number is odd;
#X obj 30 15299 is_pointer;
#X text 200 15299 checks if input data has *pointer* type;
#X obj 30 15326 is_symbol;
#X text 200 15326 checks if input data has *symbol* type;
#X obj 20 15353 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15394 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15405 preset.float;
#X text 200 15405 load/store float preset;
#X obj 30 15432 preset.list;
#X text 200 15432 load/store symbol preset;
#X obj 30 15459 preset.storage;
#X text 200 15459 preset storage control;
#X obj 30 15486 preset.symbol;
#X text 200 15486 load/store symbol preset;
#X obj 20 15513 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15554 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15565 patch.props;
#X text 200 15565 patch properties manager;
#X obj 30 15592 prop;
#X text 200 15592 get/set named property value for subpatch or abstraction;
#X obj 30 15619 prop.declare;
#X text 200 15619 declare named property for subpatch or abstraction;
#X obj 30 15646 prop.get;
#X text 200 15646 get property from connected object/subpatch/abstraction;
#X obj 30 15673 prop.get~;
#X text 200 15673 Property extractor from sound stream;
#X obj 30 15700 prop.join;
#X text 200 15700 join property to main data flow;
#X obj 30 15727 prop.set;
#X text 200 15727 set object property;
#X obj 30 15754 prop.split;
#X text 200 15754 separate properties from dataflow;
#X obj 20 15781 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 15822 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15833 proto.firmata;
#X text 200 15833 Firmata Arduino protocol support;
#X obj 30 15860 proto.midi;
#X text 200 15860 raw midi encoder/parser;
#X obj 30 15887 proto.sp.alpaca;
#X text 200 15887 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 15914 proto.xtouch_ext;
#X text 200 15914 Behringer XTouch Extender XMidi protocol;
#X obj 20 15941 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 15982 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15993 random.atom;
#X text 200 15993 weighted atom generation from specified list;
#X obj 30 16020 random.discrete;
#X text 200 16020 random weighted integers on interval [0 \, n);
#X obj 30 16047 random.float;
#X text 200 16047 uniform random float generator in specified range;
#X obj 30 16074 random.gauss;
#X text 200 16074 gaussian random distribution;
#X obj 30 16101 random.int;
#X text 200 16101 uniform random integer generator in specified range;
#X obj 30 16128 random.linear;
#X text 200 16128 random linear distribution;
#X obj 30 16155 random.pw_const;
#X text 200 16155 piecewise constant random distribution;
#X obj 30 16182 random.pw_lin;
#X text 200 16182 piecewise linear random distribution;
#X obj 20 16209 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16250 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16261 seq.arp;
#X text 200 16261 sequence arpeggiator;
#X obj 30 16288 seq.bangs;
#X text 200 16288 bang sequencer;
#X obj 30 16315 seq.counter;
#X text 200 16315 modulo counter;
#X obj 30 16342 seq.matrix;
#X text 200 16342 sequencer control for ui.matrix;
#X obj 30 16369 seq.nbangs;
#X text 200 16369 output specified number of bang with time intervals;
#X obj 30 16396 seq.phasor;
#X text 200 16396 control rate phasor (saw) generator;
#X obj 30 16423 seq.toggles;
#X text 200 16423 toggle sequencer;
#X obj 30 16450 sequencer;
#X text 200 16450 basic sequence player;
#X obj 20 16477 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16518 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16529 snd.file;
#X text 200 16529 Sound file loader on steroids;
#X obj 20 16556 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 16597 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16608 hoa.2d.decoder~;
#X text 200 16608 hoa 2d decoder;
#X obj 30 16635 hoa.2d.encoder~;
#X text 200 16635 hoa 2d encoder;
#X obj 30 16662 hoa.2d.map~;
#X text 200 16662 a 2d ambisonic multisource spatializer;
#X obj 30 16689 hoa.2d.optim~;
#X text 200 16689 a 2D ambisonic optimization tool;
#X obj 30 16716 hoa.2d.projector~;
#X text 200 16716 a plane waves decomposer from circular harmonics
domain;
#X obj 30 16743 hoa.2d.recomposer~;
#X text 200 16743 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 16783 hoa.2d.rotate~;
#X text 200 16783 a 2D ambisonic sound field rotation;
#X obj 30 16810 hoa.2d.wider~;
#X text 200 16810 a 2d fractional ambisonic order simulator;
#X obj 30 16837 hoa.@process;
#X text 200 16837 process properties manager for hoa.process~;
#X obj 30 16864 hoa.in;
#X text 200 16864 message inlet for a patcher loaded by hoa.process~;
#X obj 30 16891 hoa.in~;
#X text 200 16891 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16918 hoa.out;
#X text 200 16918 message outlet for a patcher loaded by hoa.process~;
#X obj 30 16945 hoa.out~;
#X text 200 16945 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16972 hoa.process~;
#X text 200 16972 patcher loader for multichannel processing;
#X obj 30 17002 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 16999 a 2d ambisonic harmonic scope;
#X obj 30 17024 pan.cos~;
#X text 200 17024 two channel equal power sine/cosine panner;
#X obj 30 17051 pan.linsig~;
#X text 200 17051 two channel linear panner with signal control;
#X obj 30 17078 pan.lin~;
#X text 200 17078 two channel linear panner;
#X obj 30 17105 pan.spread~;
#X text 200 17105 spreads input channels across the stereo field;
#X obj 30 17132 pan.sqrt~;
#X text 200 17132 two channel equal power square root panner;
#X obj 30 17159 spat.pan4~;
#X text 200 17159 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17186 spat.pan8~;
#X text 200 17186 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17213 spat.zita6x8~;
#X text 200 17213 spat with 6 inputs sources to 8 channel output;
#X obj 20 17240 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17281 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17292 string;
#X text 200 17292 string constructor;
#X obj 30 17319 string.contains;
#X text 200 17319 checks if string contains specified substring;
#X obj 30 17346 string.ends_with;
#X text 200 17346 checks if string ends with specified substring;
#X obj 30 17373 string.equal;
#X text 200 17373 check strings or symbols for equality;
#X obj 30 17400 string.format;
#X text 200 17400 formats string like printf.;
#X obj 30 17427 string.join;
#X text 200 17427 joins (concatenates) strings with separator;
#X obj 30 17454 string.length;
#X text 200 17454 number of characters in string (unicode supported);
#X obj 30 17481 string.match;
#X text 200 17481 check if string match regular expression;
#X obj 30 17508 string.remove;
#X text 200 17508 remove substring from input string;
#X obj 30 17535 string.replace;
#X text 200 17535 replace from one substring to another in input string;
#X obj 30 17562 string.split;
#X text 200 17562 split string by separator;
#X obj 30 17589 string.starts_with;
#X text 200 17589 checks if string starts with specified substring;
#X obj 30 17616 string.substr;
#X text 200 17616 extract substring from input string;
#X obj 30 17643 string2symbol;
#X text 200 17643 converts string to symbol;
#X obj 20 17670 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 17711 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17722 symbol.equal;
#X text 200 17722 check symbols for equality;
#X obj 30 17749 symbol.length;
#X text 200 17749 number of characters in symbol (unicode supported);
#X obj 30 17776 symbol.num_compare;
#X text 200 17776 numeric symbol compare;
#X obj 30 17803 symbol2any;
#X text 200 17803 converts symbol to message;
#X obj 30 17830 symbol2intlist;
#X text 200 17830 converts symbol to list of character codes;
#X obj 20 17857 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 17898 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17909 synth.bee3~;
#X text 200 17909 Hammond-oid organ FM synthesis instrument;
#X obj 30 17936 synth.birds~;
#X text 200 17936 bird singing generator;
#X obj 30 17963 synth.church_bell~;
#X text 200 17963 generic church bell modal model;
#X obj 30 17990 synth.dubdub~;
#X text 200 17990 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 18030 synth.dx7~;
#X text 200 18030 FAUST dx7 implementation;
#X obj 30 18057 synth.eguitar~;
#X text 200 18057 simple electric guitar model with steel strings;
#X obj 30 18084 synth.fgrain~;
#X text 200 18084 file granulator from STK;
#X obj 30 18111 synth.glitch~;
#X text 200 18111 Glitch synthesizer by naivesound;
#X obj 30 18138 synth.ks~;
#X text 200 18138 Karplus-Strong string;
#X obj 30 18165 synth.marimba~;
#X text 200 18165 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18205 synth.rhodey~;
#X text 200 18205 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18232 synth.risset_arp~;
#X text 200 18232 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18259 synth.risset_tone~;
#X text 200 18259 Jean Claude Risset's endless glissando;
#X obj 30 18286 synth.russian_bell~;
#X text 200 18286 russian church bell modal model;
#X obj 30 18313 synth.shakers~;
#X text 200 18313 various percussion sounds from STK library;
#X obj 30 18340 synth.sitar~;
#X text 200 18340 STK sitar;
#X obj 30 18367 synth.wurley~;
#X text 200 18367 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18394 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18435 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18446 system.colorpanel;
#X text 200 18446 System color panel dialog popup;
#X obj 30 18473 system.cursor;
#X text 200 18473 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 18500 system.exec;
#X text 200 18500 run external command in separate process;
#X obj 30 18527 system.getenv;
#X text 200 18527 Get system environment variables;
#X obj 30 18554 system.hostname;
#X text 200 18554 outputs system hostname;
#X obj 30 18581 system.memsize;
#X text 200 18581 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 18621 system.memused;
#X text 200 18621 returns the process physical memory use - current
and peak;
#X obj 30 18648 system.screen_size;
#X text 200 18648 returns current screen size in pixels;
#X obj 20 18675 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 18716 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18727 tl.bang;
#X text 200 18727 Timeline bang (with possible delay);
#X obj 30 18757 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 18754 Timeline section;
#X obj 30 18779 tl.timeline;
#X text 200 18779 Timeline - event scheduler;
#X obj 30 18806 tl.toggle;
#X text 200 18806 Timeline bang;
#X obj 30 18833 tl.transport;
#X text 200 18833 Timeline transport control;
#X obj 20 18860 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 18901 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18915 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 18912 array view with cursor and selection;
#X obj 30 18940 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 18937 A bang... that's all;
#X obj 30 18965 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 18962 colorchooser widget;
#X obj 30 18990 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 18987 Display GUI object;
#X obj 30 19015 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 19012 GUI for turning DSP on/off;
#X obj 30 19040 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 19037 envelope editor widget;
#X obj 30 19065 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 19062 UI stereo gain control;
#X obj 30 19090 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 19087 UI gain control;
#X obj 30 19115 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19112 simple icon with button capabilities;
#X obj 30 19140 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19137 value increment/decrement;
#X obj 30 19165 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19162 keyboard widget;
#X obj 30 19190 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19187 knob widget;
#X obj 30 19215 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19212 simple label widget;
#X obj 30 19240 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19237 Hyperlink widget;
#X obj 30 19265 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19262 The matrix of toggles has you.;
#X obj 30 19290 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19287 Dropdown menu;
#X obj 30 19315 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19312 Shows peak and rms signal level;
#X obj 30 19340 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19337 incoming MIDI message viewport;
#X obj 30 19365 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19362 filter mouse events from ui objects;
#X obj 30 19390 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19387 routes mouse events from ui objects;
#X obj 30 19415 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 19412 counterpart of the vanilla [nbx];
#X obj 30 19440 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 19437 counterpart of the vanilla [nbx] for signal;
#X obj 30 19465 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 19462 signal plotter;
#X obj 30 19490 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 19487 2D slider in polar coordinates;
#X obj 30 19515 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 19512 Preset manager;
#X obj 30 19540 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 19537 counterpart of the vanilla radio toggle;
#X obj 30 19565 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 19562 range slider;
#X obj 30 19590 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 19587 Scope GUI object;
#X obj 30 19615 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 19612 counterpart of the vanilla slider;
#X obj 30 19640 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 19637 2D slider widget;
#X obj 30 19665 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 19662 Multiple slider widget;
#X obj 30 19690 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 19687 Spectroscope GUI object;
#X obj 30 19715 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 19712 displays a list of text buttons or text toggles;
#X obj 30 19740 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 19737 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 19762 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 19762 version: v0.9.1 \, license: GPL3;
#X obj 20 19790 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 19813 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 19777 msg 0;
#X obj 670 19812 switch~;
#X connect 1372 0 1373 0;