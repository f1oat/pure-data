// this is autogenerated file, do not edit!
#ifndef BAR_H_
#define BAR_H_
// clang-format off

#include "nui/model.h"
#include "nui/style.h"
#include "m_pd.h"

#include <tuple>

namespace ceammc {
namespace ui {

class BarData
    : public std::tuple<Size, t_float, t_float, t_float, HexColor, int> {
public:
    enum Fields {
        SIZE,
        VALUE,
        MIN,
        MAX,
        FILL_COLOR,
        STYLE_IDX,
    };
public:
    BarData()
        : std::tuple<Size, t_float, t_float, t_float, HexColor, int>(Size(100, 6), 0, 0, 1, colors::st_fill, 0) { }

    BarData(int style)
        : BarData() {
        setStyle(style);
        loadStyle(style);
    }


    // getters
    Size const& size() const noexcept { return std::get<SIZE>(*this); }
    t_float const& value() const noexcept { return std::get<VALUE>(*this); }
    t_float const& min() const noexcept { return std::get<MIN>(*this); }
    t_float const& max() const noexcept { return std::get<MAX>(*this); }
    HexColor const& fillColor() const noexcept { return std::get<FILL_COLOR>(*this); }
    int const& style() const noexcept { return std::get<STYLE_IDX>(*this); }

    // setters
    void setSize(Size v) { std::get<SIZE>(*this) = v; }
    void setValue(t_float v) { std::get<VALUE>(*this) = v; }
    void setMin(t_float v) { std::get<MIN>(*this) = v; }
    void setMax(t_float v) { std::get<MAX>(*this) = v; }
    void setFillColor(HexColor v) { std::get<FILL_COLOR>(*this) = v; }
    void setStyle(int v) { std::get<STYLE_IDX>(*this) = v; }

    // refs
    Size& sizeRef() { return std::get<SIZE>(*this); }
    t_float& valueRef() { return std::get<VALUE>(*this); }
    t_float& minRef() { return std::get<MIN>(*this); }
    t_float& maxRef() { return std::get<MAX>(*this); }
    HexColor& fillColorRef() { return std::get<FILL_COLOR>(*this); }
    int& styleRef() { return std::get<STYLE_IDX>(*this); }

    // style
    void loadStyle(int st) {
        using sc = StyleCollection;
        setSize(sc::size(st, "bar:size"_hash, Size(100, 6)));
        setFillColor(sc::color(st, "bar:fill_color"_hash, colors::st_fill));
    }
};

using BarModel = ModelBase<BarData>;

}
}

// clang-format on
#endif
