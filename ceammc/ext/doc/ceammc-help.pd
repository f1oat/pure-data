#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value or pattern;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.variance;
#X text 200 965 calculates variance of array values;
#X obj 30 992 array.vplay;
#X text 200 992 simple array player for using with vline~;
#X obj 30 1019 array.window;
#X text 200 1019 fill array with window;
#X obj 30 1046 plot.geomspace~;
#X text 200 1046 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1086 plot.hist~;
#X text 200 1086 calculate and output signal histogram;
#X obj 30 1113 plot.linspace~;
#X text 200 1113 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1153 plot.logspace~;
#X text 200 1153 outputs numbers spaced evenly on a log scale;
#X obj 30 1180 plot.response~;
#X text 200 1180 output amp/phase freq response to impulse;
#X obj 20 1207 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1248 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1259 ceammc.search;
#X text 200 1259 ceammc library search object;
#X obj 30 1289 ui.link @title [function] @url function-help.pd;
#X text 200 1286 named function;
#X obj 30 1311 function.call;
#X text 200 1311 call named function;
#X obj 30 1338 gain~;
#X text 200 1338 multislot signal gain;
#X obj 30 1365 logger;
#X text 200 1365 advanced data logger;
#X obj 30 1392 matrix~;
#X text 200 1392 signal routing matrix;
#X obj 30 1419 metro.choice;
#X text 200 1419 metro with random choice from timeset;
#X obj 30 1446 metro.pattern;
#X text 200 1446 metro with rhythmic patterns;
#X obj 30 1473 metro.random;
#X text 200 1473 metro random bang with specified range;
#X obj 30 1500 metro.seq;
#X text 200 1500 metro sequencer;
#X obj 30 1527 metro.wchoice;
#X text 200 1527 metro with weighted random choice from timeset;
#X obj 30 1554 mix~;
#X text 200 1554 multislot signal mixer;
#X obj 30 1581 nsig~;
#X text 200 1581 Mulitchannel converter from control to audio rate;
#X obj 30 1608 obj.props;
#X text 200 1608 property extractor;
#X obj 30 1635 radio;
#X text 200 1635 float index to outlet values as radio switch;
#X obj 30 1662 spring;
#X text 200 1662 float value "spring";
#X obj 30 1689 sync;
#X text 200 1689 value synchronization;
#X obj 30 1716 window;
#X text 200 1716 returns window value by given window position;
#X obj 30 1743 xdac~;
#X text 200 1743 dac~ with channel ranges;
#X obj 30 1770 xfade2~;
#X text 200 1770 multi stereo-signal crossfade;
#X obj 30 1797 xfade~;
#X text 200 1797 multi signal crossfade;
#X obj 30 1824 z~;
#X text 200 1824 sample delay;
#X obj 20 1851 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1892 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1903 chaos.gbman0;
#X text 200 1903 Gingerbreadman map chaotic generator;
#X obj 30 1930 chaos.gbman0~;
#X text 200 1930 Gingerbreadman map chaotic generator;
#X obj 30 1957 chaos.jong;
#X text 200 1957 Peter de Jong attractor;
#X obj 30 1984 chaos.logistic;
#X text 200 1984 Logistic map chaotic generator;
#X obj 30 2011 chaos.std0;
#X text 200 2011 Standard map chaotic generator;
#X obj 30 2038 chaos.std0~;
#X text 200 2038 Standard map chaotic generator;
#X obj 20 2065 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2106 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2117 array.p2s;
#X text 200 2117 convert array phase [0\..1] to sample position;
#X obj 30 2144 array.s2p;
#X text 200 2144 convert sample position to phase range [0\..1];
#X obj 30 2171 conv.amp2dbfs;
#X text 200 2171 convert from amplitude to decibel full scale;
#X obj 30 2198 conv.amp2dbfs~;
#X text 200 2198 convert from amplitude to decibel full scale;
#X obj 30 2225 conv.bits2bang;
#X text 200 2225 convert list of bits to bang events;
#X obj 30 2252 conv.bits2int;
#X text 200 2252 convert list of bits to integer;
#X obj 30 2279 conv.bits2note;
#X text 200 2279 convert list of bits to note events;
#X obj 30 2306 conv.bits2pos;
#X text 200 2306 convert list of bits to list of bit position;
#X obj 30 2333 conv.bpm2hz;
#X text 200 2333 converts BPM to frequency in hertz;
#X obj 30 2360 conv.bpm2ms;
#X text 200 2360 convert frequency in BPM to period in milliseconds;
#X obj 30 2387 conv.bpm2sec;
#X text 200 2387 convert frequency in BPM to period in seconds;
#X obj 30 2414 conv.car2pol;
#X text 200 2414 convert cartesian coords to polar;
#X obj 30 2441 conv.cc2amp;
#X text 200 2441 convert from MIDI Control Change range;
#X obj 30 2468 conv.color2rgba;
#X text 200 2468 convert named or hex color to separate RGBA values;
#X obj 30 2495 conv.dbfs2amp;
#X text 200 2495 convert decibel full scale to amplitude;
#X obj 30 2522 conv.dbfs2amp~;
#X text 200 2522 convert decibel full scale to amplitude;
#X obj 30 2549 conv.degree2key;
#X text 200 2549 convert scale degree to key;
#X obj 30 2576 conv.edge2bang;
#X text 200 2576 edge detector for numeric stream;
#X obj 30 2603 conv.hex2int;
#X text 200 2603 hex symbol to int value;
#X obj 30 2630 conv.int2bits;
#X text 200 2630 convert integer to list of bits;
#X obj 30 2657 conv.lin2curve;
#X text 200 2657 map linear to exponential range with 0 allowed.;
#X obj 30 2684 conv.lin2exp;
#X text 200 2684 maps linear range to exponential range;
#X obj 30 2711 conv.lin2lin;
#X text 200 2711 convert from one linear range to another;
#X obj 30 2738 conv.lin2lin~;
#X text 200 2738 convert from one linear range to another for signals;
#X obj 30 2765 conv.list2props;
#X text 200 2765 converts list to series of property messages;
#X obj 30 2792 conv.midi2freq;
#X text 200 2792 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2832 conv.ms2bpm;
#X text 200 2832 convert period in milliseconds to frequency in BPM;
#X obj 30 2859 conv.ms2samp;
#X text 200 2859 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2899 conv.ms2samp~;
#X text 200 2899 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2939 conv.note2guido;
#X text 200 2939 convert MIDI note to Guido notation;
#X obj 30 2966 conv.phase2rad;
#X text 200 2966 convert phase value [0-1] to radians [0-2π];
#X obj 30 2993 conv.phase2rad~;
#X text 200 2993 convert phase value [0-1] to radians [0-2π];
#X obj 30 3020 conv.pitch2midi;
#X text 200 3020 converts symbol pitch name to MIDI note number;
#X obj 30 3047 conv.pol2car;
#X text 200 3047 convert from polar coordinates to cartesian;
#X obj 30 3074 conv.rad2phase;
#X text 200 3074 convert radians value to phase;
#X obj 30 3101 conv.rad2phase~;
#X text 200 3101 convert radians value to phase;
#X obj 30 3128 conv.rgb2hex;
#X text 200 3128 convert separate RGB values to hex color;
#X obj 30 3155 conv.samp2ms;
#X text 200 3155 convert samples to time according to samplerate;
#X obj 30 3182 conv.samp2ms~;
#X text 200 3182 convert samples to milliseconds according to samplerate;
#X obj 30 3209 conv.samp2sec;
#X text 200 3209 convert samples to time according to samplerate;
#X obj 30 3236 conv.sec2bpm;
#X text 200 3236 convert period in seconds to frequency in BPM;
#X obj 30 3263 conv.sec2samp;
#X text 200 3263 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3303 conv.sec2str;
#X text 200 3303 converts float time in seconds to formated symbol
(or string);
#X obj 30 3330 conv.sig2float~;
#X text 200 3330 convert signal to floats;
#X obj 30 3357 conv.str2sec;
#X text 200 3357 converts formatted time to float value in seconds;
#X obj 30 3384 music.dur2time;
#X text 200 3384 convert duration list to time;
#X obj 30 3411 music.voice2midi;
#X text 200 3411 convert voice music list of midi pitches;
#X obj 20 3438 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3479 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3490 data.copy;
#X text 200 3490 make copy for any data types: MList \, Set etc...;
#X obj 30 3517 data.dict;
#X text 200 3517 dictionary container: store values by key;
#X obj 30 3544 data.fifo;
#X text 200 3544 First-In-First-Out (FIFO) queue data container;
#X obj 30 3571 data.float;
#X text 200 3571 robust float object;
#X obj 30 3598 data.int;
#X text 200 3598 robust int object;
#X obj 30 3625 data.list;
#X text 200 3625 list container;
#X obj 30 3652 data.mlist;
#X text 200 3652 multidimensional list container;
#X obj 30 3679 data.set;
#X text 200 3679 container that store unique elements;
#X obj 30 3706 data.set2list;
#X text 200 3706 converts set to list;
#X obj 30 3733 dict.contains;
#X text 200 3733 predicate to check if dict contains a keys;
#X obj 30 3760 dict.each;
#X text 200 3760 map each value in dict;
#X obj 30 3787 dict.from_list;
#X text 200 3787 creates dictionary from list;
#X obj 30 3814 dict.get;
#X text 200 3814 output dict values;
#X obj 30 3841 dict.keys;
#X text 200 3841 get list of dict keys;
#X obj 30 3868 dict.pass;
#X text 200 3868 passes specified keys in dict;
#X obj 30 3895 dict.reject;
#X text 200 3895 rejects specified keys from dict;
#X obj 30 3922 dict.size;
#X text 200 3922 dictionary size;
#X obj 30 3949 dict.to_list;
#X text 200 3949 converts dictionary to plain list;
#X obj 30 3976 dict.values;
#X text 200 3976 dictionary values as mlist;
#X obj 30 4003 mlist.flatten;
#X text 200 4003 flatten nested mlist;
#X obj 30 4030 rtree.to_list;
#X text 200 4030 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4057 set.contains;
#X text 200 4057 check if specified element is in set;
#X obj 30 4084 set.diff;
#X text 200 4084 difference between two sets;
#X obj 30 4111 set.equal;
#X text 200 4111 checks if two sets are equal (contains same elements);
#X obj 30 4138 set.intersect;
#X text 200 4138 output intersection of given sets;
#X obj 30 4165 set.size;
#X text 200 4165 get number of elements in set;
#X obj 30 4192 set.symdiff;
#X text 200 4192 symmetric difference between two sets;
#X obj 30 4219 set.union;
#X text 200 4219 output union of given sets;
#X obj 20 4246 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4287 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4298 dyn.comp2~;
#X text 200 4298 stereo dynamic range compressor;
#X obj 30 4325 dyn.comp~;
#X text 200 4325 mono dynamic range compressors;
#X obj 30 4352 dyn.gate2~;
#X text 200 4352 stereo signal gate;
#X obj 30 4379 dyn.gate~;
#X text 200 4379 mono signal gate;
#X obj 30 4406 dyn.limit2~;
#X text 200 4406 stereo 1176LN Peak Limiter;
#X obj 30 4433 dyn.limit~;
#X text 200 4433 mono 1176LN Peak Limiter;
#X obj 30 4460 dyn.softclip~;
#X text 200 4460 soft signal clip;
#X obj 20 4487 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4528 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4539 env.adsr~;
#X text 200 4539 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4566 env.ar~;
#X text 200 4566 Attack/Release envelope generator;
#X obj 30 4593 env.asr~;
#X text 200 4593 Attack/Sustain/Release envelope generator;
#X obj 30 4620 env.concat;
#X text 200 4620 Envelope concatenation;
#X obj 30 4647 env.follow~;
#X text 200 4647 Envelope follower with independent attack and release
times;
#X obj 30 4674 env.mix;
#X text 200 4674 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4714 env.smooth~;
#X text 200 4714 An envelope with an exponential attack and release;
#X obj 30 4741 env.tscale;
#X text 200 4741 Envelope time-scale;
#X obj 30 4768 env.tshift;
#X text 200 4768 Envelope time-shift (horizontal);
#X obj 30 4795 env.vscale;
#X text 200 4795 Envelope value-scale;
#X obj 30 4822 env2array;
#X text 200 4822 Renders envelope to specified array;
#X obj 30 4849 env2vline;
#X text 200 4849 Converts envelope to bunch of vline messages;
#X obj 30 4876 envelope;
#X text 200 4876 Envelope data type;
#X obj 30 4903 vline2env;
#X text 200 4903 Converts vline messages to env;
#X obj 20 4930 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4971 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4982 expand_env;
#X text 200 4982 Substitute environment variables in data stream;
#X obj 30 5009 flow.append;
#X text 200 5009 append message to flow stream;
#X obj 30 5036 flow.change;
#X text 200 5036 rejects redundant input values;
#X obj 30 5063 flow.count;
#X text 200 5063 control flow event counter;
#X obj 30 5090 flow.delay;
#X text 200 5090 enhanced version on vanilla delay object;
#X obj 30 5117 flow.demultiplex;
#X text 200 5117 control flow demultiplexer;
#X obj 30 5144 flow.demultiplex2~;
#X text 200 5144 audio stream stereo demultiplexer;
#X obj 30 5171 flow.demultiplex~;
#X text 200 5171 audio stream demultiplexer;
#X obj 30 5198 flow.dollar;
#X text 200 5198 data flow dollar converter;
#X obj 30 5225 flow.dup;
#X text 200 5225 message duplicator;
#X obj 30 5252 flow.float;
#X text 200 5252 pass floats;
#X obj 30 5279 flow.gate;
#X text 200 5279 control flow gate. [spigot] analog;
#X obj 30 5306 flow.greater;
#X text 200 5306 numeric stream router;
#X obj 30 5333 flow.greater_eq;
#X text 200 5333 numeric stream router;
#X obj 30 5360 flow.group;
#X text 200 5360 group input atoms in list of specified size;
#X obj 30 5387 flow.interval;
#X text 200 5387 measure time between flow events;
#X obj 30 5414 flow.less;
#X text 200 5414 numeric stream router \, like many [moses];
#X obj 30 5441 flow.less_eq;
#X text 200 5441 numeric stream router \, like many [moses];
#X obj 30 5468 flow.list2many;
#X text 200 5468 routes list element with message selectors;
#X obj 30 5495 flow.match;
#X text 200 5495 route data flow by regexp match;
#X obj 30 5522 flow.mem;
#X text 200 5522 store data flow in memory;
#X obj 30 5549 flow.multiplex;
#X text 200 5549 control flow multiplexer;
#X obj 30 5576 flow.multiplex2~;
#X text 200 5576 audio stream stereo multiplexer;
#X obj 30 5603 flow.multiplex~;
#X text 200 5603 audio stream multiplexer;
#X obj 30 5630 flow.once;
#X text 200 5630 one message pass thru;
#X obj 30 5657 flow.pack;
#X text 200 5657 flow pack;
#X obj 30 5684 flow.pass;
#X text 200 5684 pass specified values;
#X obj 30 5711 flow.pass_if;
#X text 200 5711 pass values that accepted by predicate object;
#X obj 30 5738 flow.pipe;
#X text 200 5738 enhanced version on vanilla pipe object;
#X obj 30 5765 flow.queue;
#X text 200 5765 multi-channel control flow sync queue (or FIFO);
#X obj 30 5792 flow.record;
#X text 200 5792 flow stream recorder/player;
#X obj 30 5819 flow.reject;
#X text 200 5819 reject specified values;
#X obj 30 5846 flow.reject_if;
#X text 200 5846 reject values by predicate;
#X obj 30 5873 flow.ring;
#X text 200 5873 dataflow ring buffer;
#X obj 30 5900 flow.route;
#X text 200 5900 advanced message router;
#X obj 30 5927 flow.select;
#X text 200 5927 vanilla flow on steroids;
#X obj 30 5954 flow.seqdelay;
#X text 200 5954 sequential delay/router for input flow;
#X obj 30 5981 flow.space;
#X text 200 5981 space in time messages received at the same logical
time;
#X obj 30 6008 flow.speedlim;
#X text 200 6008 control stream speed limiter;
#X obj 30 6035 flow.split;
#X text 200 6035 split data flow by external side-chain predicate;
#X obj 30 6062 flow.stack;
#X text 200 6062 any message stack;
#X obj 30 6089 flow.sync;
#X text 200 6089 bus with only hot inlets;
#X obj 30 6116 flow.sync_pack;
#X text 200 6116 flow pack with all hot inlets;
#X obj 30 6143 flow.tee~;
#X text 200 6143 separate audio and control streams;
#X obj 30 6170 replace;
#X text 200 6170 Replace atoms in data stream;
#X obj 30 6197 route.any;
#X text 200 6197 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6224 route.bang;
#X text 200 6224 separate bang messages from other types;
#X obj 30 6251 route.float;
#X text 200 6251 separate float messages from other types;
#X obj 30 6278 route.list;
#X text 200 6278 separate list messages from other types;
#X obj 30 6305 route.prop;
#X text 200 6305 separate property messages from other types;
#X obj 30 6332 route.random;
#X text 200 6332 routes input flow to random outlet;
#X obj 30 6359 route.symbol;
#X text 200 6359 separate symbol messages from other types;
#X obj 20 6386 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6427 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6438 flt.a-weight;
#X text 200 6438 convert frequency to A-weight value;
#X obj 30 6465 flt.biquad~;
#X text 200 6465 second order IIR filter.;
#X obj 30 6492 flt.bpf12~;
#X text 200 6492 Two pole band-pass butterworth filter;
#X obj 30 6519 flt.bpf24~;
#X text 200 6519 Four pole band-pass butterworth filter;
#X obj 30 6546 flt.c_apf;
#X text 200 6546 Allpass filter coefficient calculator for biquad;
#X obj 30 6573 flt.c_bpf~;
#X text 200 6573 BPF coefficient calculator for biquad filter;
#X obj 30 6600 flt.c_highshelf~;
#X text 200 6600 Highshelf filter coefficient calculator for biquad;
#X obj 30 6627 flt.c_hpf;
#X text 200 6627 HPF coefficient calculator for biquad filter;
#X obj 30 6654 flt.c_hpf~;
#X text 200 6654 HPF coefficient calculator for biquad filter;
#X obj 30 6681 flt.c_lowshelf~;
#X text 200 6681 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6708 flt.c_lpf;
#X text 200 6708 LPF coefficient calculator for biquad filter;
#X obj 30 6735 flt.c_lpf~;
#X text 200 6735 LPF coefficient calculator for biquad filter;
#X obj 30 6762 flt.c_notch;
#X text 200 6762 Notch filter coefficient calculator for biquad;
#X obj 30 6789 flt.c_notch~;
#X text 200 6789 Band-reject coefficient calculator for biquad filter;
#X obj 30 6816 flt.c_peak~;
#X text 200 6816 Peaking equalizer calculator for biquad;
#X obj 30 6843 flt.c_pole;
#X text 200 6843 One-pole coefficient calculator for biquad filter;
#X obj 30 6870 flt.dcblock2~;
#X text 200 6870 stereo DC blocker;
#X obj 30 6897 flt.dcblock~;
#X text 200 6897 mono DC blocker;
#X obj 30 6924 flt.eq10~;
#X text 200 6924 graphic 10 band equalizer;
#X obj 30 6951 flt.eq_peak_cq~;
#X text 200 6951 constant-Q second order peaking equalizer section;
#X obj 30 6978 flt.eq_peak~;
#X text 200 6978 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7033 flt.fb_comb~;
#X text 200 7033 feedback comb filter;
#X obj 30 7060 flt.fbank5x1~;
#X text 200 7060 5 band one octave butterworth filterbank;
#X obj 30 7087 flt.ff_comb~;
#X text 200 7087 feed forward comb filter;
#X obj 30 7114 flt.freqz;
#X text 200 7114 compute the frequency response of a digital filter;
#X obj 30 7141 flt.freqz~;
#X text 200 7141 compute the frequency response of a digital filter;
#X obj 30 7168 flt.highshelf~;
#X text 200 7168 gain boost|cut above some frequency;
#X obj 30 7195 flt.hpf12~;
#X text 200 7195 High-pass second order Butterworth filter;
#X obj 30 7222 flt.hpf24~;
#X text 200 7222 High-pass fourth order Butterworth filter;
#X obj 30 7249 flt.lowshelf~;
#X text 200 7249 gain boost|cut below some frequency;
#X obj 30 7276 flt.lpf12~;
#X text 200 7276 Low-pass second order Butterworth filter;
#X obj 30 7303 flt.lpf24~;
#X text 200 7303 Low-pass fourth order Butterworth filter;
#X obj 30 7330 flt.median;
#X text 200 7330 Median control flow filter;
#X obj 30 7357 flt.moog_vcf~;
#X text 200 7357 Moog Voltage Controlled Filter;
#X obj 30 7384 flt.notch~;
#X text 200 7384 band-rejection filter;
#X obj 30 7411 flt.resonbp~;
#X text 200 7411 Simple resonant bandpass filter;
#X obj 30 7438 flt.resonhp~;
#X text 200 7438 Simple resonant highpass filter;
#X obj 30 7465 flt.resonlp~;
#X text 200 7465 Simple resonant lowpass filter;
#X obj 20 7492 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7533 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7544 fx.bitdown~;
#X text 200 7544 bit downer and downsampler effect;
#X obj 30 7571 fx.chorus~;
#X text 200 7571 Chorus effect;
#X obj 30 7598 fx.dattorro~;
#X text 200 7598 dattorro reverb;
#X obj 30 7625 fx.distortion1~;
#X text 200 7625 distortion #1 from Guitarix effects set;
#X obj 30 7652 fx.distortion2~;
#X text 200 7652 distortion #2 from Guitarix effects set;
#X obj 30 7679 fx.distortion3~;
#X text 200 7679 simple distortion #3 from Guitarix effects set;
#X obj 30 7706 fx.distortion~;
#X text 200 7706 cubic nonlinearity distortion;
#X obj 30 7733 fx.drive~;
#X text 200 7733 Guitarix drive effect;
#X obj 30 7760 fx.drone_box~;
#X text 200 7760 mono sympathetic resonance generator;
#X obj 30 7787 fx.echo2~;
#X text 200 7787 stereo echo effect;
#X obj 30 7814 fx.echo~;
#X text 200 7814 simple echo effect;
#X obj 30 7841 fx.flanger~;
#X text 200 7841 mono flanging effect;
#X obj 30 7868 fx.freeverb2~;
#X text 200 7868 freeverb2 - stereo version of freeverb;
#X obj 30 7895 fx.freeverb~;
#X text 200 7895 freeverb - common used open-source reverb;
#X obj 30 7922 fx.freqshift~;
#X text 200 7922 frequency shifter or single-sideband ring modulation;
#X obj 30 7949 fx.granulator~;
#X text 200 7949 simple input stream granulator;
#X obj 30 7976 fx.greyhole~;
#X text 200 7976 A complex echo-like effect;
#X obj 30 8003 fx.infrev~;
#X text 200 8003 port of Infinity VST plugin from airwindows;
#X obj 30 8030 fx.jcrev~;
#X text 200 8030 Schroeder quad reverberator from 1972;
#X obj 30 8057 fx.looper~;
#X text 200 8057 One track looper;
#X obj 30 8084 fx.overdrive~;
#X text 200 8084 overdrive effect;
#X obj 30 8111 fx.pitchshift_s~;
#X text 200 8111 signal version of fx.pitchshift~;
#X obj 30 8138 fx.pitchshift~;
#X text 200 8138 simple pitch shifter based on 2 delay lines;
#X obj 30 8165 fx.rb_pitchshift~;
#X text 200 8165 rubber band pitchshift;
#X obj 30 8192 fx.recho~;
#X text 200 8192 reversed echo effect;
#X obj 30 8219 fx.room~;
#X text 200 8219 Gardners room emulation algorithms;
#X obj 30 8246 fx.satrev~;
#X text 200 8246 Schroeder reverberator from 1971;
#X obj 30 8273 fx.sdelay~;
#X text 200 8273 smooth delay with a feedback control;
#X obj 30 8300 fx.secho~;
#X text 200 8300 enchanced echo effect that does not click on delay
change;
#X obj 30 8327 fx.shimmer~;
#X text 200 8327 shimmer reverb effect effect;
#X obj 30 8354 fx.stutter~;
#X text 200 8354 stutter effect;
#X obj 30 8381 fx.tapiir~;
#X text 200 8381 multi-tap delay;
#X obj 30 8408 fx.vocoder~;
#X text 200 8408 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8448 fx.wahwah~;
#X text 200 8448 digitized CryBaby wah pedal;
#X obj 30 8475 fx.zita_rev1~;
#X text 200 8475 Zita stereo reverb;
#X obj 20 8502 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8543 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8554 global.dict;
#X text 200 8554 global named dict object;
#X obj 30 8581 global.float;
#X text 200 8581 global named float object;
#X obj 30 8608 global.int;
#X text 200 8608 global named integer object;
#X obj 30 8635 global.list;
#X text 200 8635 global named list object;
#X obj 30 8662 global.mlist;
#X text 200 8662 global named mlist object;
#X obj 30 8689 global.set;
#X text 200 8689 global named set object;
#X obj 20 8716 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8757 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8768 hw.apple_smc;
#X text 200 8768 query the system management control in Apples;
#X obj 30 8795 hw.apple_sms;
#X text 200 8795 query the sudden motion sensor in Apples;
#X obj 30 8822 hw.arduino;
#X text 200 8822 Arduino device;
#X obj 30 8849 hw.cpu_temp;
#X text 200 8849 get CPU temperature;
#X obj 30 8876 hw.display;
#X text 200 8876 get/set display properties;
#X obj 30 8903 hw.kbd_light;
#X text 200 8903 Get/set keyboard light on some devices;
#X obj 30 8930 hw.motu.avb;
#X text 200 8930 controls Motu AVB devices over http requests;
#X obj 30 8957 hw.serial;
#X text 200 8957 serial port device;
#X obj 20 8984 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9025 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9039 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9036 faust realtime compilation;
#X obj 30 9061 lang.lua;
#X text 200 9061 Lua JIT language bindings;
#X obj 30 9091 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9088 faust compiled ui object;
#X obj 20 9113 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9154 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9165 lfo.+pulse~;
#X text 200 9165 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9192 lfo.+saw~;
#X text 200 9192 Positive unit-amplitude low frequency saw wave;
#X obj 30 9219 lfo.+square~;
#X text 200 9219 Positive low frequency square wave;
#X obj 30 9246 lfo.+tri~;
#X text 200 9246 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9273 lfo.impulse~;
#X text 200 9273 Unit-amplitude low-frequency impulse train;
#X obj 30 9300 lfo.mosc~;
#X text 200 9300 multi-oscillator with various waveforms;
#X obj 30 9327 lfo.pulse~;
#X text 200 9327 Full-range unit-amplitude low frequency pulse train;
#X obj 30 9354 lfo.saw~;
#X text 200 9354 Full-range unit-amplitude low frequency saw;
#X obj 30 9381 lfo.square~;
#X text 200 9381 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 9408 lfo.tri~;
#X text 200 9408 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 9435 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 9476 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9487 list.^at;
#X text 200 9487 on input index(es) outputs list element(s);
#X obj 30 9514 list.^contains;
#X text 200 9514 checks if input atom is found in the list;
#X obj 30 9541 list.^search;
#X text 200 9541 on input atom returns it index in list;
#X obj 30 9568 list.all_of;
#X text 200 9568 checks if all list atoms accepted by predicate;
#X obj 30 9595 list.any_of;
#X text 200 9595 checks if at least one list element is accepted by
predicate;
#X obj 30 9622 list.append;
#X text 200 9622 append atom or list to the end of input list;
#X obj 30 9649 list.apply_to;
#X text 200 9649 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9689 list.at;
#X text 200 9689 outputs list element(s) at specified index(es);
#X obj 30 9716 list.choice;
#X text 200 9716 outputs random element from list;
#X obj 30 9743 list.contains;
#X text 200 9743 checks if input list contains specified atoms;
#X obj 30 9770 list.convolve;
#X text 200 9770 convolution for lists;
#X obj 30 9797 list.correlate;
#X text 200 9797 list cross-correlation;
#X obj 30 9824 list.count;
#X text 200 9824 output the number of items that equal to specified
value;
#X obj 30 9851 list.count_if;
#X text 200 9851 output the number of items that satisfy to external
predicate;
#X obj 30 9878 list.delta;
#X text 200 9878 returns the difference between the current list of
floats and the previous one.;
#X obj 30 9918 list.distribution;
#X text 200 9918 list value distribution;
#X obj 30 9945 list.do;
#X text 200 9945 iterate and modify list contents via side-chain;
#X obj 30 9972 list.each;
#X text 200 9972 maps each list value via external side-chain;
#X obj 30 9999 list.enumerate;
#X text 200 9999 enumerates input list;
#X obj 30 10026 list.equal;
#X text 200 10026 checks if given lists are equal;
#X obj 30 10053 list.first;
#X text 200 10053 returns first list element;
#X obj 30 10080 list.gen;
#X text 200 10080 generates list of specified length via external generator;
#X obj 30 10107 list.histogram;
#X text 200 10107 outputs distribution histogram;
#X obj 30 10134 list.insert;
#X text 200 10134 insert atom or list to the specified position of
input list;
#X obj 30 10161 list.integrator;
#X text 200 10161 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10201 list.last;
#X text 200 10201 output last list element;
#X obj 30 10228 list.length;
#X text 200 10228 output the number of atoms in the list;
#X obj 30 10255 list.map;
#X text 200 10255 map list values by specified dictionary;
#X obj 30 10282 list.max;
#X text 200 10282 output largest element in the list;
#X obj 30 10309 list.mean;
#X text 200 10309 calculates average of list of floats;
#X obj 30 10336 list.min;
#X text 200 10336 returns smallest element in the list;
#X obj 30 10363 list.none_of;
#X text 200 10363 checks if none of list atoms is accepted by predicate;
#X obj 30 10390 list.normalize;
#X text 200 10390 normalizes float list values to get their sum = 1.0;
#X obj 30 10417 list.pass;
#X text 200 10417 leave in list only specified elements;
#X obj 30 10444 list.pass_if;
#X text 200 10444 leave only elements accepted by predicate;
#X obj 30 10471 list.prepend;
#X text 200 10471 prepend atom or list before input list;
#X obj 30 10498 list.product;
#X text 200 10498 calculates product of floats in list;
#X obj 30 10525 list.range;
#X text 200 10525 output list smallest and largest value;
#X obj 30 10552 list.reduce;
#X text 200 10552 apply function of two arguments cumulatively to the
list;
#X obj 30 10579 list.reject;
#X text 200 10579 remove specified element from list;
#X obj 30 10606 list.remove;
#X text 200 10606 remove list element(s) at specified positions;
#X obj 30 10633 list.remove_if;
#X text 200 10633 remove elements by predicate;
#X obj 30 10660 list.repack;
#X text 200 10660 repack list to specified size;
#X obj 30 10687 list.repeat;
#X text 200 10687 output new list by repeating input list specified
times;
#X obj 30 10714 list.resample;
#X text 200 10714 resample list with specified ratio;
#X obj 30 10741 list.resize;
#X text 200 10741 changes list size;
#X obj 30 10768 list.reverse;
#X text 200 10768 reverses the order of the elements in the list;
#X obj 30 10795 list.rldecode;
#X text 200 10795 Run-length list decoder (RLE);
#X obj 30 10822 list.rlencode;
#X text 200 10822 RLE (run-length encoding) for lists;
#X obj 30 10849 list.rotate;
#X text 200 10849 rotates list;
#X obj 30 10876 list.route;
#X text 200 10876 acts like [route] but for lists;
#X obj 30 10903 list.rundiff;
#X text 200 10903 running difference;
#X obj 30 10930 list.runsum;
#X text 200 10930 running sum;
#X obj 30 10957 list.search;
#X text 200 10957 search specified items in input list;
#X obj 30 10984 list.separate;
#X text 200 10984 sends list elements one by one separately;
#X obj 30 11011 list.seq;
#X text 200 11011 numeric sequence list generator;
#X obj 30 11038 list.set;
#X text 200 11038 set list value at specified position;
#X obj 30 11065 list.shift;
#X text 200 11065 shifts the contents of the list with linear interpolation;
#X obj 30 11092 list.shuffle;
#X text 200 11092 randomly rearranges elements in list;
#X obj 30 11119 list.slice;
#X text 200 11119 extract sublist;
#X obj 30 11146 list.sort;
#X text 200 11146 sorts list values by ascending order;
#X obj 30 11173 list.sort_with;
#X text 200 11173 sort list with user defined side-chain;
#X obj 30 11200 list.split;
#X text 200 11200 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11240 list.stretch;
#X text 200 11240 stretches list - changes its size with linear interpolation;
#X obj 30 11267 list.sum;
#X text 200 11267 calculates sum of floats in list;
#X obj 30 11294 list.unique;
#X text 200 11294 removes duplicates from input list;
#X obj 30 11321 list.unpack;
#X text 200 11321 unpack list elements to separate outlets;
#X obj 30 11348 list.unzip;
#X text 200 11348 splits list to N lists \, each to separate output;
#X obj 30 11375 list.walk;
#X text 200 11375 Walks thru the list;
#X obj 30 11402 list.zip;
#X text 200 11402 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 11457 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 11498 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11509 live.capture~;
#X text 200 11509 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11549 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 11590 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11601 local.dict;
#X text 200 11601 local named dict object;
#X obj 30 11628 local.float;
#X text 200 11628 canvas-scoped named float variable;
#X obj 30 11655 local.int;
#X text 200 11655 canvas-scoped named integer variable;
#X obj 30 11682 local.list;
#X text 200 11682 local named list object;
#X obj 30 11709 local.mlist;
#X text 200 11709 local named mlist object;
#X obj 30 11736 local.set;
#X text 200 11736 local named set object;
#X obj 20 11763 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11804 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11815 math.abs;
#X text 200 11815 absolute value function;
#X obj 30 11842 math.abs~;
#X text 200 11842 absolute value function for signals;
#X obj 30 11869 math.acos;
#X text 200 11869 arc cosine function;
#X obj 30 11896 math.acosh;
#X text 200 11896 inverse hyperbolic cosine function;
#X obj 30 11923 math.acosh~;
#X text 200 11923 hyperbolic arc cosine for signals;
#X obj 30 11950 math.acos~;
#X text 200 11950 arc cosine function for signals;
#X obj 30 11977 math.and;
#X text 200 11977 operation AND for multiple arguments;
#X obj 30 12004 math.approx;
#X text 200 12004 check if input value approximately equal to pattern;
#X obj 30 12031 math.asin;
#X text 200 12031 arc sine function;
#X obj 30 12058 math.asinh;
#X text 200 12058 inverse hyperbolic sine function;
#X obj 30 12085 math.asinh~;
#X text 200 12085 hyperbolic arc sine for signals;
#X obj 30 12112 math.asin~;
#X text 200 12112 arc sine for signals;
#X obj 30 12139 math.atan;
#X text 200 12139 arc tangent function;
#X obj 30 12166 math.atanh;
#X text 200 12166 inverse hyperbolic tangent function;
#X obj 30 12193 math.atanh~;
#X text 200 12193 hyperbolic arc tangent for signals;
#X obj 30 12220 math.atan~;
#X text 200 12220 arc tangent for signals;
#X obj 30 12247 math.binomial;
#X text 200 12247 binomial coefficient calculator;
#X obj 30 12274 math.cabs~;
#X text 200 12274 magnitude of a complex signals;
#X obj 30 12301 math.carg~;
#X text 200 12301 phase angle of a complex signals;
#X obj 30 12328 math.cbrt;
#X text 200 12328 cube root function;
#X obj 30 12355 math.cbrt~;
#X text 200 12355 cube root function for signals;
#X obj 30 12382 math.cdiv~;
#X text 200 12382 division of complex signals;
#X obj 30 12409 math.ceil;
#X text 200 12409 round to smallest integral value not less than input
value;
#X obj 30 12436 math.ceil~;
#X text 200 12436 round to smallest integral value not less than input
value;
#X obj 30 12463 math.cexp~;
#X text 200 12463 exponent of a complex signals;
#X obj 30 12490 math.cmul~;
#X text 200 12490 multiplication of complex signals;
#X obj 30 12517 math.cos;
#X text 200 12517 cosine function;
#X obj 30 12544 math.cosh;
#X text 200 12544 hyperbolic cosine function;
#X obj 30 12571 math.cosh~;
#X text 200 12571 hyperbolic cosine for signals;
#X obj 30 12598 math.cos~;
#X text 200 12598 cosine function;
#X obj 30 12625 math.div;
#X text 200 12625 division (on lists too);
#X obj 30 12652 math.e;
#X text 200 12652 mathematical constant \, base of the natural logarithm;
#X obj 30 12679 math.erf;
#X text 200 12679 error function;
#X obj 30 12706 math.erf~;
#X text 200 12706 error function for signals;
#X obj 30 12733 math.exp;
#X text 200 12733 exponential functions;
#X obj 30 12760 math.exp2;
#X text 200 12760 exponential functions;
#X obj 30 12787 math.exp2~;
#X text 200 12787 base-2 exponential for signal;
#X obj 30 12814 math.expr;
#X text 200 12814 dynamic [expr];
#X obj 30 12841 math.exp~;
#X text 200 12841 base-e exponential for signal;
#X obj 30 12868 math.floor;
#X text 200 12868 round to largest integral value not greater than
x;
#X obj 30 12895 math.floor~;
#X text 200 12895 round to largest integral value not greater than
x;
#X obj 30 12922 math.gamma;
#X text 200 12922 gamma function;
#X obj 30 12949 math.gamma~;
#X text 200 12949 gamma function for floating point signals;
#X obj 30 12976 math.gcd;
#X text 200 12976 calculate greatest common divisor;
#X obj 30 13003 math.inf;
#X text 200 13003 infinity value that cannot be represented accurately;
#X obj 30 13030 math.inf~;
#X text 200 13030 inifinity signal generator;
#X obj 30 13057 math.lcm;
#X text 200 13057 calculate least common multiple;
#X obj 30 13084 math.lgamma;
#X text 200 13084 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13111 math.lgamma~;
#X text 200 13111 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13151 math.log;
#X text 200 13151 natural logarithm;
#X obj 30 13178 math.log10;
#X text 200 13178 logarithm functions;
#X obj 30 13205 math.log10~;
#X text 200 13205 natural logarithm;
#X obj 30 13232 math.log2;
#X text 200 13232 logarithm functions;
#X obj 30 13259 math.log2~;
#X text 200 13259 base-2 logarithm;
#X obj 30 13286 math.log~;
#X text 200 13286 natural logarithm;
#X obj 30 13313 math.mul;
#X text 200 13313 multiplication (on lists too);
#X obj 30 13340 math.nan;
#X text 200 13340 Not a Number \, unrepresentable value;
#X obj 30 13367 math.nan~;
#X text 200 13367 signal NaN;
#X obj 30 13394 math.neg;
#X text 200 13394 negate function;
#X obj 30 13421 math.or;
#X text 200 13421 operation OR for multiple arguments;
#X obj 30 13448 math.pi;
#X text 200 13448 mathematical constant;
#X obj 30 13475 math.pi~;
#X text 200 13475 mathematical constant;
#X obj 30 13502 math.polyeval;
#X text 200 13502 evaluates the polynomial described by the coefficients
list;
#X obj 30 13529 math.reciprocal;
#X text 200 13529 calculate reciprocal number;
#X obj 30 13556 math.reciprocal~;
#X text 200 13556 calculate reciprocal number for signals;
#X obj 30 13583 math.round;
#X text 200 13583 round to integral value \, regardless of rounding
direction;
#X obj 30 13610 math.round~;
#X text 200 13610 signal round;
#X obj 30 13637 math.sign;
#X text 200 13637 sign function;
#X obj 30 13664 math.sin;
#X text 200 13664 sine function;
#X obj 30 13691 math.sinh;
#X text 200 13691 hyperbolic sine function;
#X obj 30 13718 math.sinh~;
#X text 200 13718 hyperbolic sine for signals;
#X obj 30 13745 math.sin~;
#X text 200 13745 sine function;
#X obj 30 13772 math.sqrt;
#X text 200 13772 square root function;
#X obj 30 13799 math.sqrt~;
#X text 200 13799 square root for signal;
#X obj 30 13826 math.squared;
#X text 200 13826 value square;
#X obj 30 13853 math.squared~;
#X text 200 13853 signal value square;
#X obj 30 13880 math.sync_add;
#X text 200 13880 sync addition;
#X obj 30 13907 math.sync_and;
#X text 200 13907 sync logical AND operation;
#X obj 30 13934 math.sync_div;
#X text 200 13934 sync division;
#X obj 30 13961 math.sync_eq;
#X text 200 13961 sync equal numbers check;
#X obj 30 13988 math.sync_ge;
#X text 200 13988 sync greater equal numbers compare;
#X obj 30 14015 math.sync_gt;
#X text 200 14015 sync greater then numbers compare;
#X obj 30 14042 math.sync_le;
#X text 200 14042 sync less equal numbers compare;
#X obj 30 14069 math.sync_lshift;
#X text 200 14069 sync signed bit left shift;
#X obj 30 14096 math.sync_lt;
#X text 200 14096 sync less then numbers compare;
#X obj 30 14123 math.sync_mod;
#X text 200 14123 sync remainder of modulo division (float or integer);
#X obj 30 14150 math.sync_mul;
#X text 200 14150 sync multiplication;
#X obj 30 14177 math.sync_ne;
#X text 200 14177 sync numbers for not equality;
#X obj 30 14204 math.sync_or;
#X text 200 14204 sync logical OR operation;
#X obj 30 14231 math.sync_rshift;
#X text 200 14231 sync signed bit right shift;
#X obj 30 14258 math.sync_sub;
#X text 200 14258 sync subtraction;
#X obj 30 14285 math.sync_xor;
#X text 200 14285 sync logical XOR operation;
#X obj 30 14312 math.tan;
#X text 200 14312 tangent function;
#X obj 30 14339 math.tanh;
#X text 200 14339 hyperbolic tangent function;
#X obj 30 14366 math.tanh~;
#X text 200 14366 hyperbolic tangent for signals;
#X obj 30 14393 math.tan~;
#X text 200 14393 tangent function;
#X obj 30 14420 math.trunc;
#X text 200 14420 truncate to integer value;
#X obj 30 14447 math.trunc~;
#X text 200 14447 truncate to integer value;
#X obj 20 14474 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14515 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14526 midi.arp;
#X text 200 14526 MIDI arpeggiator;
#X obj 30 14553 midi.cc;
#X text 200 14553 enhanced version of vanilla ctlin;
#X obj 30 14580 midi.clock;
#X text 200 14580 midi clock toolbox;
#X obj 30 14607 midi.ctl2str;
#X text 200 14607 convert Standard MIDI Controllers number to name;
#X obj 30 14634 midi.event2ctl;
#X text 200 14634 convert MidiEvent message to controller channel/value
pair;
#X obj 30 14661 midi.event2note;
#X text 200 14661 convert MidiEvent message to midi note/velocity pair;
#X obj 30 14688 midi.event2prg;
#X text 200 14688 convert MidiEvent message to midi program change
value;
#X obj 30 14715 midi.file;
#X text 200 14715 standard midi file SMF reader and writer;
#X obj 30 14742 midi.kbd;
#X text 200 14742 computer keyboard midi;
#X obj 30 14769 midi.key2str;
#X text 200 14769 convert key number to SPN name according to tonality;
#X obj 30 14796 midi.modus;
#X text 200 14796 snap/skip midi pitches according modus;
#X obj 30 14823 midi.oct;
#X text 200 14823 midi octave transpose;
#X obj 30 14850 midi.prg2str;
#X text 200 14850 convert GM Instrument number to name (string or symbol);
#X obj 30 14877 midi.split;
#X text 200 14877 midi note splitter;
#X obj 30 14904 midi.sustain;
#X text 200 14904 sustain pedal emulation;
#X obj 30 14931 midi.sysex;
#X text 200 14931 sysex input messages as list;
#X obj 30 14958 midi.track;
#X text 200 14958 extract track from MidiFile;
#X obj 30 14985 midi.tuning;
#X text 200 14985 apply tuning to midi messages;
#X obj 30 15012 midi.vramp;
#X text 200 15012 apply crescendo or diminuendo for midi message flow;
#X obj 30 15039 midi.vrand;
#X text 200 15039 midi velocity randomizer;
#X obj 20 15066 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 15107 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15118 click~;
#X text 200 15118 Output single impulse on bang;
#X obj 30 15145 fluid~;
#X text 200 15145 FluidSynth SoundFont 2 player;
#X obj 30 15172 modplug~;
#X text 200 15172 MOD file player (using libmodplug);
#X obj 30 15199 qrcode;
#X text 200 15199 QR code generator;
#X obj 30 15226 risset.gliss;
#X text 200 15226 Sheppard/Risset glissando calculator;
#X obj 30 15253 sfizz~;
#X text 200 15253 SFZ format sample player;
#X obj 30 15280 speech.flite;
#X text 200 15280 render speech to array;
#X obj 30 15307 speech.flite~;
#X text 200 15307 render speech to array;
#X obj 30 15334 speech.rhvoice~;
#X text 200 15334 RHVoice text to speech synthesis;
#X obj 20 15361 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 15402 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15413 loadexpr;
#X text 200 15413 send message when patch loads;
#X obj 30 15440 msg;
#X text 200 15440 message constructor;
#X obj 30 15467 msg.after;
#X text 200 15467 send specified message after incoming message;
#X obj 30 15494 msg.onload;
#X text 200 15494 send message when patch loads;
#X obj 30 15521 msg.sched;
#X text 200 15521 message scheduler;
#X obj 20 15548 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 15589 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15600 rhythm.euclid;
#X text 200 15600 euclid pattern generator;
#X obj 30 15627 rhythm.hexbeat;
#X text 200 15627 hexbeat pattern generator;
#X obj 20 15654 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 15695 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15706 net.artnet.send;
#X text 200 15706 ArtNet DMX message sender;
#X obj 30 15733 net.host2ip;
#X text 200 15733 returns IP address by DNS name;
#X obj 30 15760 net.http.send;
#X text 200 15760 HTTP request sender;
#X obj 30 15787 net.osc.receive;
#X text 200 15787 OSC message listener;
#X obj 30 15814 net.osc.send;
#X text 200 15814 OSC message sender;
#X obj 30 15841 net.osc.server;
#X text 200 15841 OSC server control;
#X obj 20 15868 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 15909 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15920 noise.baker;
#X text 200 15920 Part of a-chaos library;
#X obj 30 15947 noise.clifford;
#X text 200 15947 clifford attractor;
#X obj 30 15974 noise.collatz;
#X text 200 15974 collatz conjecture output;
#X obj 30 16001 noise.colored~;
#X text 200 16001 colored noise generator with an arbitrary spectral
roll;
#X obj 30 16028 noise.crackle~;
#X text 200 16028 sparse noise generator;
#X obj 30 16055 noise.duffing;
#X text 200 16055 duffing attractor;
#X obj 30 16082 noise.ginger;
#X text 200 16082 Gingerbreadman map chaotic generator;
#X obj 30 16109 noise.henon;
#X text 200 16109 henon attractor;
#X obj 30 16136 noise.henon_heilles;
#X text 200 16136 Hénon–Heiles_system;
#X obj 30 16163 noise.henon_phase;
#X text 200 16163 henon phase Ddagrams;
#X obj 30 16190 noise.henonf;
#X text 200 16190 Henon phase;
#X obj 30 16217 noise.ikeda;
#X text 200 16217 Ikeda attractor;
#X obj 30 16244 noise.lfreq0~;
#X text 200 16244 sampled/held noise (piecewise constant);
#X obj 30 16271 noise.lfreq~;
#X text 200 16271 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 16298 noise.lorenz;
#X text 200 16298 Lorenz chaos;
#X obj 30 16325 noise.lyapunov;
#X text 200 16325 lyapunov random attractor;
#X obj 30 16352 noise.navier_stokes;
#X text 200 16352 navier-stokes diff equations;
#X obj 30 16379 noise.pink~;
#X text 200 16379 Pink noise generator;
#X obj 30 16406 noise.rossler;
#X text 200 16406 Rössler attractor;
#X obj 30 16433 noise.stein;
#X text 200 16433 Stein distribution;
#X obj 30 16460 noise.torus;
#X text 200 16460 torus attractor;
#X obj 30 16487 noise.verhulst;
#X text 200 16487 verhulst distribution;
#X obj 30 16514 noise.white~;
#X text 200 16514 White noise generator;
#X obj 20 16541 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 16582 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16593 osc.blit~;
#X text 200 16593 Bandlimited impulse train oscillator;
#X obj 30 16620 osc.impulse~;
#X text 200 16620 Bandlimited impulse train generator;
#X obj 30 16647 osc.pulse~;
#X text 200 16647 Bandlimited pulse train oscillator;
#X obj 30 16674 osc.saw4~;
#X text 200 16674 Bandlimited sawtooth wave;
#X obj 30 16701 osc.saw~;
#X text 200 16701 Alias-free sawtooth wave;
#X obj 30 16728 osc.sinfb~;
#X text 200 16728 Sine oscilator with feedback;
#X obj 30 16755 osc.sin~;
#X text 200 16755 Sine wave oscillator;
#X obj 30 16782 osc.square~;
#X text 200 16782 Bandlimited square wave oscillator;
#X obj 30 16809 osc.tri~;
#X text 200 16809 Bandlimited triangle wave oscillator;
#X obj 20 16836 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 16877 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16888 canvas.active;
#X text 200 16888 checks if canvas window is on top and active;
#X obj 30 16915 canvas.current;
#X text 200 16915 verbose information about current canvas;
#X obj 30 16942 canvas.dir;
#X text 200 16942 current canvas directory;
#X obj 30 16969 canvas.name;
#X text 200 16969 current canvas name;
#X obj 30 16996 canvas.path;
#X text 200 16996 current canvas fullpath;
#X obj 30 17023 canvas.top;
#X text 200 17023 verbose information about top-level canvas;
#X obj 30 17050 patch.args;
#X text 200 17050 Get patch or subpatch arguments;
#X obj 30 17077 patch.deps;
#X text 200 17077 patch dependencies: used objects and abstractions;
#X obj 30 17104 patch.tree;
#X text 200 17104 patch tree;
#X obj 20 17131 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 17172 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17183 file.size;
#X text 200 17183 output file size;
#X obj 30 17210 path.basename;
#X text 200 17210 outputs filename portion of pathname;
#X obj 30 17237 path.dirname;
#X text 200 17237 outputs directory portion of pathname;
#X obj 30 17264 path.exists;
#X text 200 17264 checks if given path exists;
#X obj 30 17291 path.file;
#X text 200 17291 file input/output;
#X obj 30 17318 path.is_dir;
#X text 200 17318 check if path is directory;
#X obj 30 17345 path.lsdir;
#X text 200 17345 list directory contents;
#X obj 30 17372 path.monitor;
#X text 200 17372 filesystem event monitor;
#X obj 30 17399 path.normalize;
#X text 200 17399 normalize file paths;
#X obj 30 17426 path.pattern;
#X text 200 17426 pattern filename generator;
#X obj 30 17453 path.search;
#X text 200 17453 file search;
#X obj 30 17480 path.split;
#X text 200 17480 file path split;
#X obj 20 17507 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 17548 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17559 is_any;
#X text 200 17559 checks if input data has *any* type;
#X obj 30 17586 is_bang;
#X text 200 17586 checks if input data has *bang* type;
#X obj 30 17613 is_data;
#X text 200 17613 checks if input data has *data* type;
#X obj 30 17640 is_dict;
#X text 200 17640 checks if input data has *dict* type;
#X obj 30 17667 is_even;
#X text 200 17667 checks if input number is even;
#X obj 30 17694 is_file;
#X text 200 17694 checks if file exists and accessible;
#X obj 30 17721 is_float;
#X text 200 17721 checks if input data has *float* type;
#X obj 30 17748 is_list;
#X text 200 17748 checks if input data has *list* type;
#X obj 30 17775 is_odd;
#X text 200 17775 checks if input number is odd;
#X obj 30 17802 is_pointer;
#X text 200 17802 checks if input data has *pointer* type;
#X obj 30 17829 is_prop;
#X text 200 17829 checks if input message is *property* message;
#X obj 30 17856 is_symbol;
#X text 200 17856 checks if input data has *symbol* type;
#X obj 20 17883 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 17924 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17935 preset.float;
#X text 200 17935 load/store float preset;
#X obj 30 17962 preset.list;
#X text 200 17962 load/store symbol preset;
#X obj 30 17989 preset.storage;
#X text 200 17989 preset storage control;
#X obj 30 18016 preset.symbol;
#X text 200 18016 load/store symbol preset;
#X obj 20 18043 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 18084 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18095 patch.props;
#X text 200 18095 patch properties manager;
#X obj 30 18122 prop;
#X text 200 18122 get/set named property value for subpatch or abstraction;
#X obj 30 18149 prop.declare;
#X text 200 18149 declare named property for subpatch or abstraction;
#X obj 30 18176 prop.get;
#X text 200 18176 get property from connected object/subpatch/abstraction;
#X obj 30 18203 prop.get~;
#X text 200 18203 Property extractor from sound stream;
#X obj 30 18230 prop.join;
#X text 200 18230 join property to main data flow;
#X obj 30 18257 prop.random;
#X text 200 18257 property randomizer;
#X obj 30 18284 prop.set;
#X text 200 18284 set property for connected object/subpatch/abstraction;
#X obj 30 18311 prop.split;
#X text 200 18311 separate properties from dataflow;
#X obj 20 18338 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 18379 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18390 proto.feelworld;
#X text 200 18390 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 18417 proto.firmata;
#X text 200 18417 Firmata Arduino protocol support;
#X obj 30 18444 proto.inscore;
#X text 200 18444 INScore message creator;
#X obj 30 18471 proto.midi;
#X text 200 18471 raw midi encoder/parser;
#X obj 30 18498 proto.midi.cc;
#X text 200 18498 raw midi CC encoder/parser;
#X obj 30 18525 proto.midi.sysex;
#X text 200 18525 raw midi SYSex encoder/parser;
#X obj 30 18552 proto.moppy;
#X text 200 18552 protocol for Musical flOPPY controller;
#X obj 30 18579 proto.mpv;
#X text 200 18579 mpv video player control;
#X obj 30 18606 proto.sp.alpaca;
#X text 200 18606 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 18633 proto.vlc;
#X text 200 18633 VLC video player control over HTTP;
#X obj 30 18660 proto.whammy;
#X text 200 18660 Control for Digitech Whammy pedal;
#X obj 30 18687 proto.xtouch_ext;
#X text 200 18687 Behringer XTouch Extender XMidi protocol;
#X obj 20 18714 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 18755 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18766 random.atom;
#X text 200 18766 weighted atom generation from specified list;
#X obj 30 18793 random.discrete;
#X text 200 18793 random weighted integers on interval [0 \, n);
#X obj 30 18820 random.float;
#X text 200 18820 uniform random float generator in specified range;
#X obj 30 18847 random.gauss;
#X text 200 18847 gaussian random distribution;
#X obj 30 18874 random.int;
#X text 200 18874 uniform random integer generator in specified range;
#X obj 30 18901 random.linear;
#X text 200 18901 random linear distribution;
#X obj 30 18928 random.pw_const;
#X text 200 18928 piecewise constant random distribution;
#X obj 30 18955 random.pw_lin;
#X text 200 18955 piecewise linear random distribution;
#X obj 20 18982 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 19023 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19034 samp.time~;
#X text 200 19034 sample counter;
#X obj 20 19061 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 19102 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19113 seq.arp;
#X text 200 19113 sequence arpeggiator;
#X obj 30 19140 seq.bangs;
#X text 200 19140 bang sequencer;
#X obj 30 19167 seq.counter;
#X text 200 19167 sequencer counter;
#X obj 30 19194 seq.life;
#X text 200 19194 Conway gamw of life sequencer;
#X obj 30 19221 seq.matrix;
#X text 200 19221 sequencer control for ui.matrix;
#X obj 30 19248 seq.nbangs;
#X text 200 19248 output specified number of bang with time intervals;
#X obj 30 19275 seq.phasor;
#X text 200 19275 control rate phasor (saw) generator;
#X obj 30 19302 seq.toggles;
#X text 200 19302 toggle sequencer;
#X obj 30 19329 sequencer;
#X text 200 19329 basic sequence player;
#X obj 20 19356 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 19397 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19408 snd.file;
#X text 200 19408 Sound file loader on steroids;
#X obj 20 19435 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 19476 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19487 hoa.2d.decoder~;
#X text 200 19487 hoa 2d decoder;
#X obj 30 19514 hoa.2d.encoder~;
#X text 200 19514 hoa 2d encoder;
#X obj 30 19541 hoa.2d.map~;
#X text 200 19541 a 2d ambisonic multisource spatializer;
#X obj 30 19568 hoa.2d.optim~;
#X text 200 19568 a 2D ambisonic optimization tool;
#X obj 30 19595 hoa.2d.projector~;
#X text 200 19595 a plane waves decomposer from circular harmonics
domain;
#X obj 30 19622 hoa.2d.recomposer~;
#X text 200 19622 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 19662 hoa.2d.rotate~;
#X text 200 19662 a 2D ambisonic sound field rotation;
#X obj 30 19689 hoa.2d.wider~;
#X text 200 19689 a 2d fractional ambisonic order simulator;
#X obj 30 19716 hoa.@process;
#X text 200 19716 process properties manager for hoa.process~;
#X obj 30 19743 hoa.in;
#X text 200 19743 message inlet for a patcher loaded by hoa.process~;
#X obj 30 19770 hoa.in~;
#X text 200 19770 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 19797 hoa.out;
#X text 200 19797 message outlet for a patcher loaded by hoa.process~;
#X obj 30 19824 hoa.out~;
#X text 200 19824 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 19851 hoa.process~;
#X text 200 19851 patcher loader for multichannel processing;
#X obj 30 19881 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 19878 a 2d ambisonic harmonic scope;
#X obj 30 19903 pan.cos~;
#X text 200 19903 two channel equal power sine/cosine panner;
#X obj 30 19930 pan.linsig~;
#X text 200 19930 two channel linear panner with signal control;
#X obj 30 19957 pan.lin~;
#X text 200 19957 two channel linear panner;
#X obj 30 19984 pan.spread~;
#X text 200 19984 spreads input channels across the stereo field;
#X obj 30 20011 pan.sqrt~;
#X text 200 20011 two channel equal power square root panner;
#X obj 30 20038 spat.pan4~;
#X text 200 20038 GMEM SPAT: 4-outputs spatializer;
#X obj 30 20065 spat.pan8~;
#X text 200 20065 GMEM SPAT: 8-outputs spatializer;
#X obj 30 20092 spat.zita6x8~;
#X text 200 20092 spat with 6 inputs sources to 8 channel output;
#X obj 30 20119 spat.zita8~;
#X text 200 20119 8 channel reverb spatializer;
#X obj 20 20146 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 20187 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20198 string;
#X text 200 20198 string constructor;
#X obj 30 20225 string.contains;
#X text 200 20225 checks if string contains specified substring;
#X obj 30 20252 string.ends_with;
#X text 200 20252 checks if string ends with specified substring;
#X obj 30 20279 string.equal;
#X text 200 20279 check strings or symbols for equality;
#X obj 30 20306 string.format;
#X text 200 20306 formats string like printf.;
#X obj 30 20333 string.join;
#X text 200 20333 joins (concatenates) list to string with separator;
#X obj 30 20360 string.length;
#X text 200 20360 number of characters in string (unicode supported);
#X obj 30 20387 string.match;
#X text 200 20387 check if string match regular expression;
#X obj 30 20414 string.remove;
#X text 200 20414 remove substring from input string;
#X obj 30 20441 string.replace;
#X text 200 20441 replace from one substring to another in input string;
#X obj 30 20468 string.split;
#X text 200 20468 split string or symbol by separator;
#X obj 30 20495 string.starts_with;
#X text 200 20495 checks if string starts with specified substring;
#X obj 30 20522 string.substr;
#X text 200 20522 extract substring from input string;
#X obj 30 20549 string2symbol;
#X text 200 20549 converts string to symbol;
#X obj 20 20576 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 20617 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20628 symbol.equal;
#X text 200 20628 check symbols for equality;
#X obj 30 20655 symbol.length;
#X text 200 20655 number of characters in symbol (unicode supported);
#X obj 30 20682 symbol.num_compare;
#X text 200 20682 numeric symbol compare;
#X obj 30 20709 symbol2any;
#X text 200 20709 converts symbol or string to message;
#X obj 30 20736 symbol2intlist;
#X text 200 20736 converts symbol to list of character codes;
#X obj 20 20763 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 20804 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20815 noise.chua~;
#X text 200 20815 Chua's diode circuit;
#X obj 30 20842 synth.bee3~;
#X text 200 20842 Hammond-oid organ FM synthesis instrument;
#X obj 30 20869 synth.birds~;
#X text 200 20869 bird singing generator;
#X obj 30 20896 synth.church_bell~;
#X text 200 20896 generic church bell modal model;
#X obj 30 20923 synth.clap~;
#X text 200 20923 clap synth from faust libraries;
#X obj 30 20950 synth.dubdub~;
#X text 200 20950 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 20990 synth.dx7~;
#X text 200 20990 FAUST dx7 implementation;
#X obj 30 21017 synth.eguitar~;
#X text 200 21017 simple electric guitar model with steel strings;
#X obj 30 21044 synth.english_bell~;
#X text 200 21044 english church bell modal model;
#X obj 30 21071 synth.fgrain~;
#X text 200 21071 file granulator from STK;
#X obj 30 21098 synth.french_bell~;
#X text 200 21098 french church bell modal model;
#X obj 30 21125 synth.german_bell~;
#X text 200 21125 german church bell modal model;
#X obj 30 21152 synth.glass_harm~;
#X text 200 21152 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 21179 synth.glitch~;
#X text 200 21179 Glitch synthesizer by naivesound;
#X obj 30 21206 synth.harpsichord~;
#X text 200 21206 waveguide commuted harpsichord;
#X obj 30 21233 synth.hat~;
#X text 200 21233 hi-hat synth from faust librariest;
#X obj 30 21260 synth.kick2~;
#X text 200 21260 low-kick synth from faust librariest;
#X obj 30 21287 synth.kick~;
#X text 200 21287 low-kick synth from Guitarix project;
#X obj 30 21314 synth.ks~;
#X text 200 21314 Karplus-Strong string;
#X obj 30 21341 synth.marimba~;
#X text 200 21341 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 21381 synth.piano~;
#X text 200 21381 waveguide commuted piano;
#X obj 30 21408 synth.rhodey~;
#X text 200 21408 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 21435 synth.risset_arp~;
#X text 200 21435 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 21462 synth.risset_bell~;
#X text 200 21462 Jean Claude Risset's bell synth;
#X obj 30 21489 synth.risset_tone~;
#X text 200 21489 Jean Claude Risset's endless glissando;
#X obj 30 21516 synth.russian_bell~;
#X text 200 21516 russian church bell modal model;
#X obj 30 21543 synth.shakers~;
#X text 200 21543 various percussion sounds from STK library;
#X obj 30 21570 synth.sitar~;
#X text 200 21570 STK sitar;
#X obj 30 21597 synth.snare~;
#X text 200 21597 Snare drum synth from Guitarix project;
#X obj 30 21624 synth.standard_bell~;
#X text 200 21624 german church bell modal model;
#X obj 30 21651 synth.tube_bell~;
#X text 200 21651 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 21678 synth.voice_fofc~;
#X text 200 21678 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 21705 synth.voice_fofs~;
#X text 200 21705 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 21732 synth.wurley~;
#X text 200 21732 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 21759 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 21800 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21811 system.colorpanel;
#X text 200 21811 System color panel dialog popup;
#X obj 30 21838 system.cursor;
#X text 200 21838 Output cursor motion \, mousewheel and button clicks;
#X obj 30 21865 system.exec;
#X text 200 21865 run external command in separate process;
#X obj 30 21892 system.exit;
#X text 200 21892 quit PureData;
#X obj 30 21919 system.getenv;
#X text 200 21919 Get system environment variables;
#X obj 30 21946 system.hostname;
#X text 200 21946 outputs system hostname;
#X obj 30 21973 system.memsize;
#X text 200 21973 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 22013 system.memused;
#X text 200 22013 returns the process physical memory use - current
and peak;
#X obj 30 22040 system.screen_size;
#X text 200 22040 returns current screen size in pixels;
#X obj 20 22067 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 22108 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22119 tl.bang;
#X text 200 22119 Timeline bang (with possible delay);
#X obj 30 22149 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 22146 Timeline section;
#X obj 30 22171 tl.timeline;
#X text 200 22171 Timeline - event scheduler;
#X obj 30 22198 tl.toggle;
#X text 200 22198 Timeline bang;
#X obj 30 22225 tl.transport;
#X text 200 22225 Timeline transport control;
#X obj 20 22252 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 22293 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22307 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 22304 array view with cursor and selection;
#X obj 30 22332 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 22329 A bang... that's all;
#X obj 30 22357 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 22354 button widget;
#X obj 30 22382 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 22379 colorchooser widget;
#X obj 30 22407 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 22404 Display GUI object;
#X obj 30 22432 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 22429 GUI for turning DSP on/off;
#X obj 30 22457 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 22454 envelope editor widget;
#X obj 30 22482 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 22479 UI filter object calculator for biquad filter;
#X obj 30 22507 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 22504 UI filter object based on biquad filter;
#X obj 30 22532 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 22529 UI stereo gain control;
#X obj 30 22557 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 22554 UI gain control;
#X obj 30 22582 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 22579 simple icon with button capabilities;
#X obj 30 22607 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 22604 value increment/decrement;
#X obj 30 22632 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 22629 keyboard widget;
#X obj 30 22657 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 22654 knob widget;
#X obj 30 22682 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 22679 simple label widget;
#X obj 30 22707 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 22704 Hyperlink widget;
#X obj 30 22732 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 22729 The matrix of toggles has you.;
#X obj 30 22757 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 22754 Dropdown menu;
#X obj 30 22782 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 22779 Shows peak and rms signal level;
#X obj 30 22807 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 22804 incoming MIDI message viewport;
#X obj 30 22832 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 22829 filter mouse events from ui objects;
#X obj 30 22857 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 22854 routes mouse events from ui objects;
#X obj 30 22882 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 22879 counterpart of the vanilla [nbx];
#X obj 30 22907 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 22904 counterpart of the vanilla [nbx] for signal;
#X obj 30 22932 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 22929 signal plotter;
#X obj 30 22957 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 22954 2D slider in polar coordinates;
#X obj 30 22982 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 22979 Preset manager;
#X obj 30 23007 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 23004 counterpart of the vanilla radio toggle;
#X obj 30 23032 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 23029 range slider;
#X obj 30 23057 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 23054 Scope GUI object;
#X obj 30 23082 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 23079 counterpart of the vanilla slider;
#X obj 30 23107 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 23104 2D slider widget;
#X obj 30 23132 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 23129 Multiple slider widget;
#X obj 30 23157 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 23154 Spectroscope GUI object;
#X obj 30 23182 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 23179 displays a list of text buttons or text toggles;
#X obj 30 23207 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 23204 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 23229 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 23229 version: v0.9.6 \, license: GPL3;
#X obj 20 23257 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 23280 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 23244 msg 0;
#X obj 670 23279 switch~;
#X connect 1624 0 1625 0;