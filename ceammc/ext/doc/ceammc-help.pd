#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 metro.pattern;
#X text 175 525 metro with rythmic patterns;
#X obj 30 552 metro.seq;
#X text 175 552 metro sequencer;
#X obj 30 579 window;
#X text 175 579 returns window value by given window position;
#X obj 20 606 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 647 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 658 array.p2s;
#X text 175 658 convert array phase [0\..1] to sample position;
#X obj 30 685 array.s2p;
#X text 175 685 convert array sample position to relative phase
position [0\..1];
#X obj 30 722 conv.amp2dbfs;
#X text 175 722 convert from amplitude to decibell full scale;
#X obj 30 749 conv.bpm2hz;
#X text 175 749 converts BPM to frequency in herz;
#X obj 30 776 conv.bpm2ms;
#X text 175 776 convert frequency in BPM to period in milliseconds;
#X obj 30 803 conv.bpm2sec;
#X text 175 803 convert frequency in BPM to period in seconds;
#X obj 30 830 conv.cc2amp;
#X text 175 830 convert from MIDI Control Change range;
#X obj 30 857 conv.dbfs2amp;
#X text 175 857 convert decibell full scale to amplitude;
#X obj 30 884 conv.lin2curve;
#X text 175 884 map linear to exponential range with 0 allowed.;
#X obj 30 911 conv.lin2exp;
#X text 175 911 maps linear range to exponential range;
#X obj 30 938 conv.lin2lin;
#X text 175 938 convert from one linear range to another;
#X obj 30 965 conv.pitch2midi;
#X text 175 965 converts symbol pitch name to MIDI note number;
#X obj 30 992 conv.samp2sec;
#X text 175 992 convert samples to time according to samplerate;
#X obj 30 1019 conv.sec2samp;
#X text 175 1019 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1056 conv.sec2str;
#X text 175 1056 converts float time in seconds to formated symbol (or
string);
#X obj 30 1093 conv.str2sec;
#X text 175 1093 converts formatted time to float value in seconds;
#X obj 20 1120 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1161 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1172 data.fifo;
#X text 175 1172 First-In-First-Out (FIFO) queue data container;
#X obj 30 1199 data.list;
#X text 175 1199 list container;
#X obj 30 1226 data.set;
#X text 175 1226 container that store unique elements;
#X obj 30 1253 data.set2list;
#X text 175 1253 converts set to list;
#X obj 30 1280 set.contains;
#X text 175 1280 check if specified element is in set;
#X obj 30 1307 set.diff;
#X text 175 1307 difference between two sets;
#X obj 30 1334 set.equal;
#X text 175 1334 checks if two sets are equal (contains same
elements);
#X obj 30 1361 set.intersect;
#X text 175 1361 output intersection of given sets;
#X obj 30 1388 set.size;
#X text 175 1388 get number of elements in set;
#X obj 30 1415 set.symdiff;
#X text 175 1415 symmetric difference between two sets;
#X obj 30 1442 set.union;
#X text 175 1442 output union of given sets;
#X obj 20 1469 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1510 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1521 dyn.comp2~;
#X text 175 1521 stereo dynamic range compressor;
#X obj 30 1548 dyn.comp~;
#X text 175 1548 mono dynamic range compressors;
#X obj 30 1575 dyn.gate2~;
#X text 175 1575 stereo signal gate;
#X obj 30 1602 dyn.gate~;
#X text 175 1602 mono signal gate;
#X obj 30 1629 dyn.limit2~;
#X text 175 1629 stereo 1176LN Peak Limiter;
#X obj 30 1656 dyn.limit~;
#X text 175 1656 mono 1176LN Peak Limiter;
#X obj 30 1683 dyn.softclip~;
#X text 175 1683 soft signal clip;
#X obj 20 1710 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1751 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1762 env.adsr~;
#X text 175 1762 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1789 env.ar~;
#X text 175 1789 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1826 env.asr~;
#X text 175 1826 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 1853 env.concat;
#X text 175 1853 Envelope concatenation;
#X obj 30 1880 env.follow~;
#X text 175 1880 Envelope follower with independent attack and release
times.;
#X obj 30 1917 env.mix;
#X text 175 1917 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 1954 env.smooth~;
#X text 175 1954 An envelope with an exponential attack and release;
#X obj 30 1981 env.tscale;
#X text 175 1981 Envelope time-scale;
#X obj 30 2008 env.tshift;
#X text 175 2008 Envelope time-shift (horizontal);
#X obj 30 2035 env.vscale;
#X text 175 2035 Envelope value-scale;
#X obj 30 2062 env2array;
#X text 175 2062 Renders envelope to specified array;
#X obj 30 2089 env2vline;
#X text 175 2089 Converts envelope to bunch of vline messages;
#X obj 30 2116 envelope;
#X text 175 2116 Envelope data type;
#X obj 20 2143 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2184 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2195 expand_env;
#X text 175 2195 Substitute enviroment variables in data stream;
#X obj 30 2222 flow.append;
#X text 175 2222 inject message into flow;
#X obj 30 2249 flow.change;
#X text 175 2249 rejects redundant input values;
#X obj 30 2276 flow.count;
#X text 175 2276 control flow event counter;
#X obj 30 2303 flow.demultiplex;
#X text 175 2303 control flow demultiplexer;
#X obj 30 2330 flow.gate;
#X text 175 2330 control flow gate. [spigot] analog;
#X obj 30 2357 flow.group;
#X text 175 2357 group data atoms in list of specified size;
#X obj 30 2384 flow.less;
#X text 175 2384 numeric stream router \, like many [moses];
#X obj 30 2411 flow.less_eq;
#X text 175 2411 numeric stream router \, like many [moses];
#X obj 30 2438 flow.multiplex;
#X text 175 2438 control flow multiplexer;
#X obj 30 2465 flow.pass;
#X text 175 2465 pass specified values;
#X obj 30 2492 flow.pass_if;
#X text 175 2492 pass values that accepted by predicate object;
#X obj 30 2519 flow.reject;
#X text 175 2519 reject specified values;
#X obj 30 2546 flow.reject_if;
#X text 175 2546 reject values by predicate;
#X obj 30 2573 flow.speedlim;
#X text 175 2573 control stream speed limitier;
#X obj 30 2600 flow.split;
#X text 175 2600 split data flow by external side-chain predicate;
#X obj 30 2627 flow.sync;
#X text 175 2627 bus with only hot inlets;
#X obj 30 2654 flow.tee~;
#X text 175 2654 separate audio and control streams;
#X obj 30 2681 replace;
#X text 175 2681 Replace atoms in data stream;
#X obj 20 2708 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2749 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2760 flt.biquad~;
#X text 175 2760 second order IIR filter.;
#X obj 30 2787 flt.bpf12~;
#X text 175 2787 Band-pass filter with 12/db per octave slope;
#X obj 30 2814 flt.bpf24~;
#X text 175 2814 Band-pass filter with 24/db per octave slope;
#X obj 30 2841 flt.c_bpf~;
#X text 175 2841 BPF coefficent calculator for biquad filter;
#X obj 30 2868 flt.c_highshelf~;
#X text 175 2868 Highshelf filter coefficent calculator for biquad;
#X obj 30 2895 flt.c_hpf~;
#X text 175 2895 HPF coefficent calculator for biquad filter;
#X obj 30 2922 flt.c_lowshelf~;
#X text 175 2922 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2949 flt.c_lpf~;
#X text 175 2949 LPF coefficent calculator for biquad filter;
#X obj 30 2976 flt.c_notch~;
#X text 175 2976 Band-reject coefficent calculator for biquad filter;
#X obj 30 3003 flt.c_peak~;
#X text 175 3003 Peaking equalizer calculator for biquad.;
#X obj 30 3030 flt.dcblock2~;
#X text 175 3030 stereo DC blocker;
#X obj 30 3057 flt.dcblock~;
#X text 175 3057 mono DC blocker;
#X obj 30 3084 flt.eq_peak_cq~;
#X text 175 3084 constant-Q second order peaking equalizer section;
#X obj 30 3111 flt.eq_peak~;
#X text 175 3111 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3162 flt.highshelf~;
#X text 175 3162 gain boost|cut above some frequency;
#X obj 30 3189 flt.hpf12~;
#X text 175 3189 High-pass filter with 12/db per octave slope;
#X obj 30 3216 flt.hpf24~;
#X text 175 3216 High-pass filter with 24/db per octave slope;
#X obj 30 3243 flt.lowshelf~;
#X text 175 3243 gain boost|cut below some frequency;
#X obj 30 3270 flt.lpf12~;
#X text 175 3270 Low-pass filter with 12/db per octave slope;
#X obj 30 3297 flt.lpf24~;
#X text 175 3297 Low-pass filter with 24/db per octave slope;
#X obj 30 3324 flt.moog_vcf~;
#X text 175 3324 Moog Voltage Controlled Filter;
#X obj 30 3351 flt.notch~;
#X text 175 3351 band-rejection filter;
#X obj 30 3378 flt.resonbp~;
#X text 175 3378 Simple resonant bandpass filter;
#X obj 20 3405 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 3446 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3457 fx.distortion~;
#X text 175 3457 cubic nonlinearity distortion;
#X obj 30 3484 fx.drone_box~;
#X text 175 3484 mono sympathetic resonance generator;
#X obj 30 3511 fx.echo~;
#X text 175 3511 simple echo effect;
#X obj 30 3538 fx.flanger~;
#X text 175 3538 mono flanging effect;
#X obj 30 3565 fx.freeverb2~;
#X text 175 3565 freeverb2 - stereo version of freeverb;
#X obj 30 3592 fx.freeverb~;
#X text 175 3592 freeverb - common used open-source reverb;
#X obj 30 3619 fx.freqshift~;
#X text 175 3619 frequency shifter or single-sideband ring modulation;
#X obj 30 3646 fx.greyhole~;
#X text 175 3646 A complex echo-like effect;
#X obj 30 3673 fx.looper~;
#X text 175 3673 One track looper;
#X obj 30 3700 fx.pitchshift~;
#X text 175 3700 simple pitch shifter based on 2 delay lines;
#X obj 30 3727 fx.sdelay~;
#X text 175 3727 smooth delay with a feedback control;
#X obj 30 3754 fx.wahwah~;
#X text 175 3754 digitized CryBaby wah pedal;
#X obj 30 3781 fx.zita_rev1~;
#X text 175 3781 Zita stereo reverb;
#X obj 20 3808 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3849 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3860 global.float;
#X text 175 3860 global named float object;
#X obj 30 3887 global.int;
#X text 175 3887 global named integer object;
#X obj 30 3914 global.list;
#X text 175 3914 global named list object;
#X obj 20 3941 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3982 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3993 hw.arduino;
#X text 175 3993 Arduino device;
#X obj 20 4020 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4061 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4072 lfo.impulse~;
#X text 175 4072 Unit-amplitude low-frequency impulse train;
#X obj 30 4099 lfo.pulse~;
#X text 175 4099 Unit-amplitude nonnegative low frequency pulse train
\,;
#X obj 30 4126 lfo.square~;
#X text 175 4126 Positive low frequence square wave;
#X obj 30 4153 lfo.tri~;
#X text 175 4153 Positive unit-amplitude low frequency triangle wave;
#X obj 20 4180 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 4221 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4232 list.all_of;
#X text 175 4232 checks if all list atoms accepted by predicate;
#X obj 30 4259 list.any_of;
#X text 175 4259 checks if at least one list element is accepted by
predicate;
#X obj 30 4296 list.append;
#X text 175 4296 append atom or list to the end of input list;
#X obj 30 4323 list.apply_to;
#X text 175 4323 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 4360 list.at;
#X text 175 4360 returns list element(s) at given position(s);
#X obj 30 4387 list.choice;
#X text 175 4387 returns random element from list;
#X obj 30 4414 list.contains;
#X text 175 4414 checks if atom \, data or list contains in list;
#X obj 30 4441 list.count;
#X text 175 4441 returns the number of items that equal to specified
value;
#X obj 30 4468 list.count_if;
#X text 175 4468 returns the number of items that satisfy to external
predicate.;
#X obj 30 4505 list.deinterleave;
#X text 175 4505 splits list to N lists \, each to separate output;
#X obj 30 4532 list.delta;
#X text 175 4532 returns the difference between the current list of
floats and the previous one.;
#X obj 30 4569 list.distribution;
#X text 175 4569 list value distribution;
#X obj 30 4596 list.do;
#X text 175 4596 iterate and modify list contents via side-chain;
#X obj 30 4623 list.each;
#X text 175 4623 maps each list value via external object(s);
#X obj 30 4650 list.enumerate;
#X text 175 4650 enumerates input list;
#X obj 30 4677 list.equal;
#X text 175 4677 checks if given lists are equal;
#X obj 30 4704 list.first;
#X text 175 4704 returns first list element;
#X obj 30 4731 list.gen;
#X text 175 4731 generates list of specified length via external
generator;
#X obj 30 4758 list.histogram;
#X text 175 4758 outputs distibution histogram;
#X obj 30 4785 list.index;
#X text 175 4785 find input element index in list;
#X obj 30 4812 list.insert;
#X text 175 4812 insert atom or list to the specified position of
input list;
#X obj 30 4839 list.integrator;
#X text 175 4839 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4876 list.interleave;
#X text 175 4876 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4927 list.last;
#X text 175 4927 returns last list element;
#X obj 30 4954 list.length;
#X text 175 4954 returns the number of atoms in the message;
#X obj 30 4981 list.max;
#X text 175 4981 returns largest element in the list;
#X obj 30 5008 list.mean;
#X text 175 5008 calculates average of list of floats;
#X obj 30 5035 list.min;
#X text 175 5035 returns smallest element in the list;
#X obj 30 5062 list.none_of;
#X text 175 5062 checks if none of list atoms is accepted by
predicate;
#X obj 30 5089 list.normalize;
#X text 175 5089 normalizes float list values to get their sum = 1.0;
#X obj 30 5116 list.pass_if;
#X text 175 5116 leave only elements accepted by predicate;
#X obj 30 5143 list.prepend;
#X text 175 5143 prepend atom or list before input list;
#X obj 30 5170 list.product;
#X text 175 5170 calculates product of floats in list;
#X obj 30 5197 list.range;
#X text 175 5197 returns list smallest and largest value;
#X obj 30 5224 list.reduce;
#X text 175 5224 apply function of two arguments cumulatively to the
list;
#X obj 30 5251 list.remove_if;
#X text 175 5251 remove elements by predicate;
#X obj 30 5278 list.repack;
#X text 175 5278 repack input list to specified size;
#X obj 30 5305 list.repeat;
#X text 175 5305 creates new list by repeating given list specified
times;
#X obj 30 5332 list.resize;
#X text 175 5332 changes list size;
#X obj 30 5359 list.reverse;
#X text 175 5359 reverses the order of the elements in the list;
#X obj 30 5386 list.rotate;
#X text 175 5386 rotates list left;
#X obj 30 5413 list.route;
#X text 175 5413 acts like [route] but for lists;
#X obj 30 5440 list.search;
#X text 175 5440 search specified items in input list;
#X obj 30 5467 list.separate;
#X text 175 5467 sends list elements one by one separately;
#X obj 30 5494 list.seq;
#X text 175 5494 numeric sequence list generator;
#X obj 30 5521 list.shuffle;
#X text 175 5521 randomly rearranges elements in list;
#X obj 30 5548 list.slice;
#X text 175 5548 extract sublist;
#X obj 30 5575 list.sort;
#X text 175 5575 sorts list values by ascending order;
#X obj 30 5602 list.sort_with;
#X text 175 5602 sort list with user defined side-chain;
#X obj 30 5629 list.split;
#X text 175 5629 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 5666 list.sum;
#X text 175 5666 calculates sum of floats in list;
#X obj 30 5693 list.unique;
#X text 175 5693 sorts and removes duplicates from input list;
#X obj 30 5720 list.unpack;
#X text 175 5720 unpack list elements to separate outlets;
#X obj 30 5747 list.unwrap;
#X text 175 5747 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 5784 list.walk;
#X text 175 5784 Walks thru the list;
#X obj 30 5811 list.wrap;
#X text 175 5811 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 5862 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5903 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5914 live.capture~;
#X text 175 5914 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5951 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5992 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6003 local.float;
#X text 175 6003 canvas-scoped named float variable;
#X obj 30 6030 local.int;
#X text 175 6030 canvas-scoped named integer variable;
#X obj 30 6057 local.list;
#X text 175 6057 local named list object;
#X obj 20 6084 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 6125 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6136 math.abs;
#X text 175 6136 absolute value function;
#X obj 30 6163 math.acos;
#X text 175 6163 arc cosine function;
#X obj 30 6190 math.acosh;
#X text 175 6190 inverse hyperbolic cosine function;
#X obj 30 6217 math.and;
#X text 175 6217 operation AND for multiple arguments;
#X obj 30 6244 math.approx;
#X text 175 6244 check if input value approximately equal to pattern;
#X obj 30 6271 math.asin;
#X text 175 6271 arc sine function;
#X obj 30 6298 math.asinh;
#X text 175 6298 inverse hyperbolic sine function;
#X obj 30 6325 math.atan;
#X text 175 6325 arc tangent function;
#X obj 30 6352 math.atanh;
#X text 175 6352 inverse hyperbolic tangent function;
#X obj 30 6379 math.cbrt;
#X text 175 6379 cube root function;
#X obj 30 6406 math.ceil;
#X text 175 6406 round to smallest integral value not less than input
value;
#X obj 30 6433 math.cos;
#X text 175 6433 cosine function;
#X obj 30 6460 math.cosh;
#X text 175 6460 hyperbolic cosine function;
#X obj 30 6487 math.div;
#X text 175 6487 division (on lists too);
#X obj 30 6514 math.e;
#X text 175 6514 mathematical constant \, base of the natural
logarithm;
#X obj 30 6541 math.exp;
#X text 175 6541 exponential functions;
#X obj 30 6568 math.exp2;
#X text 175 6568 exponential functions;
#X obj 30 6595 math.expr;
#X text 175 6595 dynamic [expr];
#X obj 30 6622 math.floor;
#X text 175 6622 round to largest integral value not greater than x;
#X obj 30 6649 math.gcd;
#X text 175 6649 calculate greatest common divisor;
#X obj 30 6676 math.inf;
#X text 175 6676 infinity value that cannot be represented accurately;
#X obj 30 6703 math.lcm;
#X text 175 6703 calculate least common multiple;
#X obj 30 6730 math.log;
#X text 175 6730 logarithm functions;
#X obj 30 6757 math.log10;
#X text 175 6757 logarithm functions;
#X obj 30 6784 math.log2;
#X text 175 6784 logarithm functions;
#X obj 30 6811 math.mul;
#X text 175 6811 multiplication (on lists too);
#X obj 30 6838 math.nan;
#X text 175 6838 Not a Number \, unrepresentable value;
#X obj 30 6865 math.neg;
#X text 175 6865 negate function;
#X obj 30 6892 math.or;
#X text 175 6892 operation OR for multiple arguments;
#X obj 30 6919 math.pi;
#X text 175 6919 mathematical constant;
#X obj 30 6946 math.reciprocal;
#X text 175 6946 calculate reciprocal number;
#X obj 30 6973 math.round;
#X text 175 6973 round to integral value \, regardless of rounding
direction;
#X obj 30 7000 math.round~;
#X text 175 7000 signal round;
#X obj 30 7027 math.sign;
#X text 175 7027 sign function;
#X obj 30 7054 math.sin;
#X text 175 7054 sine function;
#X obj 30 7081 math.sinh;
#X text 175 7081 hyperbolic sine function;
#X obj 30 7108 math.sqrt;
#X text 175 7108 square root function;
#X obj 30 7135 math.squared;
#X text 175 7135 value square;
#X obj 30 7162 math.tan;
#X text 175 7162 tangent function;
#X obj 30 7189 math.tanh;
#X text 175 7189 hyperbolic tangent function;
#X obj 30 7216 math.trunc;
#X text 175 7216 truncate to integer value;
#X obj 20 7243 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 7284 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7295 midi.ctl2str;
#X text 175 7295 convert Standard MIDI Controllers number to name;
#X obj 30 7322 midi.event2ctl;
#X text 175 7322 convert MidiEvent message to controller channel/value
pair;
#X obj 30 7349 midi.event2note;
#X text 175 7349 convert MidiEvent message to midi note/velocity pair;
#X obj 30 7376 midi.event2prg;
#X text 175 7376 convert MidiEvent message to midi program change
value;
#X obj 30 7403 midi.file;
#X text 175 7403 standard midi file SMF reader and writer;
#X obj 30 7430 midi.key2str;
#X text 175 7430 convert key number to SPN name according to tonality;
#X obj 30 7457 midi.prg2str;
#X text 175 7457 convert GM Instrument number to name (string or
symbol);
#X obj 30 7484 midi.track;
#X text 175 7484 extract track from MidiFile;
#X obj 20 7511 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 7552 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7563 click~;
#X text 175 7563 Output single impulse on bang;
#X obj 30 7590 fluid~;
#X text 175 7590 FluidSynth SoundFont 2 player;
#X obj 30 7617 modplug~;
#X text 175 7617 MOD file player (using libmodplug);
#X obj 30 7644 speech.flite;
#X text 175 7644 render speech to array;
#X obj 20 7671 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 7712 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7723 msg;
#X text 175 7723 message constructor;
#X obj 20 7750 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 7791 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7802 noise.crackle~;
#X text 175 7802 sparse noise generator;
#X obj 30 7829 noise.lfreq0~;
#X text 175 7829 sampled/held noise (piecewise constant);
#X obj 30 7856 noise.lfreq~;
#X text 175 7856 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 7883 noise.pink~;
#X text 175 7883 Pink noise generator;
#X obj 30 7910 noise.white~;
#X text 175 7910 White noise generator;
#X obj 20 7937 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 7978 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7989 osc.impulse~;
#X text 175 7989 Bandlimited impulse train generator;
#X obj 30 8016 osc.pulse~;
#X text 175 8016 Bandlimited pulse train oscillator.;
#X obj 30 8043 osc.saw~;
#X text 175 8043 Bandlimited saw wave oscillator;
#X obj 30 8070 osc.sinfb~;
#X text 175 8070 sine oscilator with feedback;
#X obj 30 8097 osc.square~;
#X text 175 8097 Bandlimited square wave oscillator;
#X obj 30 8124 osc.tri~;
#X text 175 8124 Bandlimited triangle wave oscillator;
#X obj 20 8151 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 8192 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8203 canvas.current;
#X text 175 8203 verbose information about current canvas;
#X obj 30 8230 canvas.top;
#X text 175 8230 verbose information about top-level canvas;
#X obj 30 8257 patch.args;
#X text 175 8257 Get patch or subpatch arguments;
#X obj 20 8284 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 8325 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8336 path.basename;
#X text 175 8336 outputs filename portion of pathname;
#X obj 30 8363 path.dirname;
#X text 175 8363 outputs directory portion of pathname;
#X obj 30 8390 path.exists;
#X text 175 8390 checks if given path exists;
#X obj 30 8417 path.lsdir;
#X text 175 8417 list directory contents;
#X obj 20 8444 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 8485 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8496 is_any;
#X text 175 8496 checks if input data has *any* type;
#X obj 30 8523 is_bang;
#X text 175 8523 checks if input data has *bang* type;
#X obj 30 8550 is_even;
#X text 175 8550 checks if input number is even;
#X obj 30 8577 is_file;
#X text 175 8577 checks if file exists and accessible;
#X obj 30 8604 is_float;
#X text 175 8604 checks if input data has *float* type;
#X obj 30 8631 is_list;
#X text 175 8631 checks if input data has *list* type;
#X obj 30 8658 is_odd;
#X text 175 8658 checks if input number is odd;
#X obj 30 8685 is_pointer;
#X text 175 8685 checks if input data has *pointer* type;
#X obj 30 8712 is_symbol;
#X text 175 8712 checks if input data has *symbol* type;
#X obj 20 8739 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 8780 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8791 preset.float;
#X text 175 8791 load/store float preset;
#X obj 30 8818 preset.list;
#X text 175 8818 load/store symbol preset;
#X obj 30 8845 preset.storage;
#X text 175 8845 preset storage control;
#X obj 30 8872 preset.symbol;
#X text 175 8872 load/store symbol preset;
#X obj 20 8899 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 8940 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8951 prop.get;
#X text 175 8951 Property extractor;
#X obj 30 8978 prop.get~;
#X text 175 8978 Property extractor from sound stream;
#X obj 30 9005 prop.set;
#X text 175 9005 Property injector;
#X obj 20 9032 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 9073 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9084 proto.firmata;
#X text 175 9084 Firmata Arduino protocol support;
#X obj 20 9111 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 9152 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9163 random.discrete;
#X text 175 9163 random weighted integers on interval [0 \, n);
#X obj 30 9190 random.float;
#X text 175 9190 random float generator in specified range;
#X obj 30 9217 random.gauss;
#X text 175 9217 gaussian random distribution;
#X obj 30 9244 random.int;
#X text 175 9244 Random integer generator in specified range;
#X obj 30 9271 random.linear;
#X text 175 9271 random linear distribution;
#X obj 30 9298 random.pw_const;
#X text 175 9298 piecewise constant random distribution;
#X obj 30 9325 random.pw_lin;
#X text 175 9325 piecewise linear random distribution;
#X obj 20 9352 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 9393 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9404 snd.file;
#X text 175 9404 Sound file loader on steroids;
#X obj 20 9431 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 9472 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9483 pan.cos~;
#X text 175 9483 two channel equal power sine/cosine panner;
#X obj 30 9510 pan.lin~;
#X text 175 9510 two channel linear panner;
#X obj 30 9537 pan.spread~;
#X text 175 9537 spreads input channels across the stereo field;
#X obj 30 9564 pan.sqrt~;
#X text 175 9564 two channel equal power square root panner;
#X obj 30 9591 spat.pan4~;
#X text 175 9591 GMEM SPAT: 4-outputs spatializer;
#X obj 30 9618 spat.pan8~;
#X text 175 9618 GMEM SPAT: 8-outputs spatializer;
#X obj 20 9645 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 9686 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9697 string;
#X text 175 9697 string constructor;
#X obj 30 9724 string.contains;
#X text 175 9724 checks if given string contains specified substring;
#X obj 30 9751 string.ends_with;
#X text 175 9751 checks if given string ends with specified suffix;
#X obj 30 9778 string.equal;
#X text 175 9778 check strings for equality;
#X obj 30 9805 string.format;
#X text 175 9805 formats string like printf.;
#X obj 30 9832 string.join;
#X text 175 9832 joins (concatenates) strings with separator;
#X obj 30 9859 string.length;
#X text 175 9859 number of characters in string (unicode supported);
#X obj 30 9886 string.remove;
#X text 175 9886 remove substring from input string;
#X obj 30 9913 string.replace;
#X text 175 9913 replace from one substring to another in input
string;
#X obj 30 9940 string.split;
#X text 175 9940 split string by separator;
#X obj 30 9967 string.starts_with;
#X text 175 9967 checks if given string starts with specified prefix;
#X obj 30 9994 string.substr;
#X text 175 9994 extract substring from input string;
#X obj 30 10021 string2symbol;
#X text 175 10021 converts string to symbol;
#X obj 20 10048 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 10089 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10100 symbol.equal;
#X text 175 10100 check symbols for equality;
#X obj 30 10127 symbol.length;
#X text 175 10127 number of characters in symbol (unicode supported);
#X obj 30 10154 symbol.num_compare;
#X text 175 10154 numeric symbol compare;
#X obj 20 10181 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 10222 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10233 synth.bee3~;
#X text 175 10233 Hammond-oid organ FM synthesis instrument;
#X obj 30 10260 synth.birds~;
#X text 175 10260 bird singing generator;
#X obj 30 10287 synth.church_bell~;
#X text 175 10287 generic church bell modal model;
#X obj 30 10314 synth.dubdub~;
#X text 175 10314 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 10351 synth.eguitar~;
#X text 175 10351 simple electric guitar model with steel strings;
#X obj 30 10378 synth.fgrain~;
#X text 175 10378 file granulator from STK;
#X obj 30 10405 synth.ks~;
#X text 175 10405 Karplus-Strong string;
#X obj 30 10432 synth.marimba~;
#X text 175 10432 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 10469 synth.rhodey~;
#X text 175 10469 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 10496 synth.risset_arp~;
#X text 175 10496 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 10523 synth.risset_tone~;
#X text 175 10523 Jean Claude Risset's endless glissando;
#X obj 30 10550 synth.shakers~;
#X text 175 10550 various percussion sounds from STK library;
#X obj 30 10577 synth.wurley~;
#X text 175 10577 Wurlitzer electric piano FM synthesis instrumentr;
#X obj 20 10604 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 10645 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10656 system.cursor;
#X text 175 10656 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 10693 system.getenv;
#X text 175 10693 Get system environment variables;
#X obj 30 10720 system.hostname;
#X text 175 10720 outputs system hostname;
#X obj 30 10747 system.memsize;
#X text 175 10747 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 10784 system.memused;
#X text 175 10784 returns the process physical memory use - current
and peak;
#X obj 30 10811 system.screen_size;
#X text 175 10811 returns current screen size in pixels;
#X obj 20 10838 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 10879 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10893 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 10890 Timeline bang;
#X obj 30 10916 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 10913 Timeline section;
#X obj 30 10936 tl.transport;
#X text 175 10936 Timeline transport control;
#X obj 30 10966 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 10963 A bang... that's all;
#X obj 30 10989 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 10986 colorchooser widget;
#X obj 30 11012 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 11009 Display GUI object;
#X obj 30 11035 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 11032 GUI for turning DSP on/off;
#X obj 30 11058 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 11055 envelope editor widget;
#X obj 30 11081 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 11078 UI gain control;
#X obj 30 11104 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 11101 simple icon with button capabilities;
#X obj 30 11127 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 11124 value increment/decrement;
#X obj 30 11150 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 11147 keyboard widget;
#X obj 30 11173 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 11170 knob widget;
#X obj 30 11196 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 11193 simple label widget;
#X obj 30 11219 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 11216 Hyperlink widget;
#X obj 30 11242 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 11239 The matrix of toggles has you.;
#X obj 30 11265 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 11262 Dropdown menu;
#X obj 30 11288 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 11285 Shows peak and rms signal level;
#X obj 30 11311 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 11308 counterpart of the vanilla [nbx];
#X obj 30 11334 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 11331 counterpart of the vanilla [nbx] for signal;
#X obj 30 11357 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 11354 Preset manager;
#X obj 30 11380 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 11377 counterpart of the vanilla radio toggle;
#X obj 30 11403 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 11400 rangle slider;
#X obj 30 11426 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 11423 Scope GUI object;
#X obj 30 11449 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 11446 counterpart of the vanilla slider;
#X obj 30 11472 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 11469 2D slider widget;
#X obj 30 11495 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 11492 Multiple slider widget;
#X obj 30 11518 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 11515 Spectroscope GUI object;
#X obj 30 11541 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 11538 displays a list of text buttons or text toggles;
#X obj 30 11564 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 11561 modern toggle widget;
#X obj 20 11584 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 11625 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11636 vector.distance;
#X text 175 11636 returns euclidean distance between two points;
#X obj 30 11663 vector.dot;
#X text 175 11663 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 11714 vector.length;
#X text 175 11714 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 11751 vector.normalize;
#X text 175 11751 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 11778 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 11778 version: v0.5 \, license: GPL3;
#X obj 20 11797 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;