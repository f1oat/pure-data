// data_string.lexer.cpp generated by reflex 3.0.1 from data_string.l

#define REFLEX_VERSION "3.0.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::ds::location
#define REFLEX_OPTION_YYSTYPE             ceammc::ds::DataStringParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc::ds
#define REFLEX_OPTION_bison_cc_parser     DataStringParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "data_string.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               DataStringLexer
#define REFLEX_OPTION_namespace           ceammc::ds
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "data_string.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::ds::DataStringParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ceammc::ds::DataStringParser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "data_string.l"

    # include <string>
    # include <memory>

    # include "lex/data_string.parser.hpp"
    # include "lex/data_string.location.hpp"
    # include "ceammc_log.h"

    using token = ceammc::ds::DataStringParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {

class DataStringLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 12 "data_string.l"

    public:
        size_t output_indent = {0};

        std::string indent(size_t n = 0) const {
            return std::string(output_indent + n, ' ');
        }

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  DataStringLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ceammc::ds::location location(void)
  {
    ceammc::ds::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ceammc::ds::DataStringParser::symbol_type lex(void);
};

} // namespace ceammc
} // namespace ds

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 21 "data_string.l"

    # include "fmt/format.h"

#line 30 "data_string.l"
/*%option graphs-file*/
/*%option debug*/
/*%option perf-report*/

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace ds {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace ceammc
} // namespace ds

ceammc::ds::DataStringParser::symbol_type ceammc::ds::DataStringLexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return ceammc::ds::DataStringParser::symbol_type(0, location());
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule data_string.l:67: {space} :
#line 67 "data_string.l"
            break;
          case 2: // rule data_string.l:68: , :
#line 68 "data_string.l"
{ return DataStringParser::make_COMMA(location()); }
            break;
          case 3: // rule data_string.l:69: null :
#line 69 "data_string.l"
{ return DataStringParser::make_NULL(location()); }
            break;
          case 4: // rule data_string.l:70: true :
#line 70 "data_string.l"
{ return DataStringParser::make_FLOAT(1, location()); }
            break;
          case 5: // rule data_string.l:71: false :
#line 71 "data_string.l"
{ return DataStringParser::make_FLOAT(0, location()); }
            break;
          case 6: // rule data_string.l:72: S/{string} :
#line 72 "data_string.l"
{ return DataStringParser::make_DATA_TYPE_STRING(location()); }
            break;
          case 7: // rule data_string.l:73: {data_type}/{open_list} :
#line 73 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 8: // rule data_string.l:74: {data_type}/{open_dict} :
#line 74 "data_string.l"
{ return DataStringParser::make_DATA_TYPE(text(), location()); }
            break;
          case 9: // rule data_string.l:75: {func_call}/{open_list} :
#line 75 "data_string.l"
{ return DataStringParser::make_FUNC_CALL(text(), location()); }
            break;
          case 10: // rule data_string.l:76: {open_dict} :
#line 76 "data_string.l"
{ return DataStringParser::make_OPEN_DICT_BRACKET(location()); }
            break;
          case 11: // rule data_string.l:77: {close_dict} :
#line 77 "data_string.l"
{ return DataStringParser::make_CLOSE_DICT_BRACKET(location()); }
            break;
          case 12: // rule data_string.l:78: {open_list} :
#line 78 "data_string.l"
{ return DataStringParser::make_OPEN_LIST_BRACKET(location()); }
            break;
          case 13: // rule data_string.l:79: {close_list} :
#line 79 "data_string.l"
{ return DataStringParser::make_CLOSE_LIST_BRACKET(location()); }
            break;
          case 14: // rule data_string.l:80: {float} :
#line 80 "data_string.l"
{ return DataStringParser::make_FLOAT(std::strtod(text(), 0), location()); }
            break;
          case 15: // rule data_string.l:81: {hex} :
#line 81 "data_string.l"
{
                          try {
                           long hex = std::stoi(text(), 0, 16);
                           return DataStringParser::make_FLOAT(hex, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid hex: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 16: // rule data_string.l:91: {bin} :
#line 91 "data_string.l"
{
                          std::string str(text() + 2);
                          try {
                           long bin = std::stoi(str.c_str(), 0, 2);
                           return DataStringParser::make_FLOAT(bin, location());
                          }
                          catch(std::exception& e) {
                             out() << "invalid bin: " << e.what() << " - " << text();
                             return DataStringParser::make_LEXER_ERROR(location());
                          }
                        }
            break;
          case 17: // rule data_string.l:102: {key} :
#line 102 "data_string.l"
{
                          std::string key(str());
                          key.pop_back(); // remove trailing ':'
                          return DataStringParser::make_KEY(key, location());
                        }
            break;
          case 18: // rule data_string.l:107: {symbol} :
#line 107 "data_string.l"
{ return DataStringParser::make_SYMBOL(text(), location()); }
            break;
          case 19: // rule data_string.l:108: {string} :
#line 108 "data_string.l"
{
                          std::string str(text() + 1);
                          str.pop_back();
                          return DataStringParser::make_STRING(str, location());
                        }

            break;
          case 20: // rule data_string.l:114: . :
#line 114 "data_string.l"
{
                          std::string line = matcher().line();
                          std::string err;

                          if(strcmp("`", text()) == 0)
                            err = " - stray ` found, use quotes: \"``\"";
                          else if(strcmp("\"", text()) == 0)
                            err = " - unmatched \" found, use quotes: \"`\"\"";
                          else if(strcmp("[", text()) == 0)
                            err = " - unmatched [ found, use quotes: \"[\"";
                          else if(strcmp("]", text()) == 0)
                            err = " - unmatched ] found, use quotes: \"]\"";
                          else if(strcmp("(", text()) == 0)
                            err = " - unmatched '(' found, use quotes: \"(\"";
                          else
                            err = fmt::format("unmatched lexer input: '{}'", text());

                          out() << fmt::format("error while parsing '{}': {}", line, err);

                          return DataStringParser::make_LEXER_ERROR(location()); /* error */
                        }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 137 "data_string.l"

# include "fmt/format.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace ceammc {
namespace ds {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S52;
  if (c1 == 'n') goto S26;
  if (c1 == 'f') goto S78;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == ']') goto S188;
  if (c1 == '[') goto S186;
  if (c1 == 'S') goto S104;
  if ('A' <= c1 && c1 <= 'Z') goto S133;
  if (c1 == '@') goto S283;
  if ('1' <= c1 && c1 <= '9') goto S220;
  if (c1 == '0') goto S194;
  if (c1 == '/') goto S243;
  if (c1 == '.') goto S283;
  if (c1 == ',') goto S24;
  if ('+' <= c1 && c1 <= '-') goto S279;
  if (c1 == ')') goto S192;
  if (c1 == '(') goto S190;
  if (c1 == '%') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '"') goto S260;
  if (c1 == ' ') goto S275;
  if ('\t' <= c1 && c1 <= '\n') goto S275;
  if (0 <= c1) goto S273;
  return m.FSM_HALT(c1);

S24:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S26:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'u') goto S306;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S52:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'r') goto S353;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S78:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('b' <= c1 && c1 <= 'z') goto S161;
  if (c1 == 'a') goto S379;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S104:
  m.FSM_TAKE(18);
  m.FSM_HEAD(0);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S133;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if (c1 == '[') goto S420;
  if ('A' <= c1 && c1 <= 'Z') goto S133;
  if (c1 == '@') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S283;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S417;
  if (c1 == '#') goto S283;
  if (c1 == '"') goto S405;
  if ('!' <= c1 && c1 <= '\'') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S133:
  m.FSM_TAKE(18);
  m.FSM_HEAD(1);
  m.FSM_HEAD(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S133;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if (c1 == '[') goto S420;
  if ('A' <= c1 && c1 <= 'Z') goto S133;
  if (c1 == '@') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S283;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S417;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S161:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S186:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S188:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S190:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S192:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S194:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'x') goto S423;
  if (c1 == 'b') goto S448;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if (c1 == 'X') goto S423;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S283;
  if (c1 == '.') goto S472;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S220:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S220;
  if (c1 == '.') goto S472;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S243:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('a' <= c1 && c1 <= 127) goto S243;
  if ('^' <= c1 && c1 <= '_') goto S243;
  if (';' <= c1 && c1 <= 'Z') goto S243;
  if ('*' <= c1 && c1 <= '9') goto S243;
  if ('#' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S260:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S523;
  if (241 <= c1 && c1 <= 243) goto S521;
  if (c1 == 240) goto S519;
  if (238 <= c1 && c1 <= 239) goto S517;
  if (c1 == 237) goto S515;
  if (225 <= c1 && c1 <= 236) goto S513;
  if (c1 == 224) goto S511;
  if (194 <= c1 && c1 <= 223) goto S509;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S525;
  if (c1 == '"') goto S495;
  if (0 <= c1 && c1 <= 127) goto S497;
  return m.FSM_HALT(c1);

S273:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S275:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S275;
  if ('\t' <= c1 && c1 <= '\n') goto S275;
  return m.FSM_HALT(c1);

S279:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if ('1' <= c1 && c1 <= '9') goto S536;
  if (c1 == '0') goto S531;
  return m.FSM_HALT(c1);

S283:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S283;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S306:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'l') goto S540;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S332:
  m.FSM_TAKE(9);
  m.FSM_TAIL(3);
  return m.FSM_HALT();

S335:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S337:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S339:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S566;
  return m.FSM_HALT(c1);

S341:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S568;
  return m.FSM_HALT(c1);

S343:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S570;
  return m.FSM_HALT(c1);

S345:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S572;
  return m.FSM_HALT(c1);

S347:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S574;
  return m.FSM_HALT(c1);

S349:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S576;
  return m.FSM_HALT(c1);

S351:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S578;
  return m.FSM_HALT(c1);

S353:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'u') goto S580;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S379:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'l') goto S606;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S405:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S649;
  if (241 <= c1 && c1 <= 243) goto S647;
  if (c1 == 240) goto S645;
  if (238 <= c1 && c1 <= 239) goto S643;
  if (c1 == 237) goto S641;
  if (225 <= c1 && c1 <= 236) goto S639;
  if (c1 == 224) goto S637;
  if (194 <= c1 && c1 <= 223) goto S635;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S651;
  if (c1 == '"') goto S632;
  if (0 <= c1 && c1 <= 127) goto S405;
  return m.FSM_HALT(c1);

S417:
  m.FSM_TAKE(7);
  m.FSM_TAIL(1);
  return m.FSM_HALT();

S420:
  m.FSM_TAKE(8);
  m.FSM_TAIL(2);
  return m.FSM_HALT();

S423:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('g' <= c1 && c1 <= 'z') goto S283;
  if ('a' <= c1 && c1 <= 'f') goto S657;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('A' <= c1 && c1 <= 'F') goto S657;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S657;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S448:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('2' <= c1 && c1 <= '9') goto S283;
  if ('0' <= c1 && c1 <= '1') goto S682;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S472:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S706;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S495:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S497:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S523;
  if (241 <= c1 && c1 <= 243) goto S521;
  if (c1 == 240) goto S519;
  if (238 <= c1 && c1 <= 239) goto S517;
  if (c1 == 237) goto S515;
  if (225 <= c1 && c1 <= 236) goto S513;
  if (c1 == 224) goto S511;
  if (194 <= c1 && c1 <= 223) goto S509;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '`') goto S525;
  if (c1 == '"') goto S495;
  if (0 <= c1 && c1 <= 127) goto S497;
  return m.FSM_HALT(c1);

S509:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S511:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S729;
  return m.FSM_HALT(c1);

S513:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S731;
  return m.FSM_HALT(c1);

S515:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S733;
  return m.FSM_HALT(c1);

S517:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S735;
  return m.FSM_HALT(c1);

S519:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S737;
  return m.FSM_HALT(c1);

S521:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S739;
  return m.FSM_HALT(c1);

S523:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S741;
  return m.FSM_HALT(c1);

S525:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S497;
  if (c1 == ':') goto S497;
  if (c1 == '.') goto S497;
  if ('(' <= c1 && c1 <= ')') goto S497;
  if (c1 == '"') goto S497;
  return m.FSM_HALT(c1);

S531:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S743;
  if (c1 == 'X') goto S743;
  if (c1 == '.') goto S747;
  return m.FSM_HALT(c1);

S536:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S536;
  if (c1 == '.') goto S747;
  return m.FSM_HALT(c1);

S540:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'l') goto S749;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S566:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S568:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S570:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S572:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S574:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S774;
  return m.FSM_HALT(c1);

S576:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S776;
  return m.FSM_HALT(c1);

S578:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S778;
  return m.FSM_HALT(c1);

S580:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'e') goto S780;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S606:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 's') goto S805;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S632:
  m.FSM_TAKE(6);
  m.FSM_TAIL(0);
  return m.FSM_HALT();

S635:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S637:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S831;
  return m.FSM_HALT(c1);

S639:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S833;
  return m.FSM_HALT(c1);

S641:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S835;
  return m.FSM_HALT(c1);

S643:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S837;
  return m.FSM_HALT(c1);

S645:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S839;
  return m.FSM_HALT(c1);

S647:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S841;
  return m.FSM_HALT(c1);

S649:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S843;
  return m.FSM_HALT(c1);

S651:
  c1 = m.FSM_CHAR();
  if (c1 == '`') goto S405;
  if (c1 == ':') goto S405;
  if (c1 == '.') goto S405;
  if ('(' <= c1 && c1 <= ')') goto S405;
  if (c1 == '"') goto S405;
  return m.FSM_HALT(c1);

S657:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('g' <= c1 && c1 <= 'z') goto S283;
  if ('a' <= c1 && c1 <= 'f') goto S657;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('A' <= c1 && c1 <= 'F') goto S657;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S657;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S682:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('2' <= c1 && c1 <= '9') goto S283;
  if ('0' <= c1 && c1 <= '1') goto S682;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S706:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S283;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S706;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S729:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S731:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S733:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S735:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S737:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S845;
  return m.FSM_HALT(c1);

S739:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S847;
  return m.FSM_HALT(c1);

S741:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S849;
  return m.FSM_HALT(c1);

S743:
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S851;
  if ('A' <= c1 && c1 <= 'F') goto S851;
  if ('0' <= c1 && c1 <= '9') goto S851;
  return m.FSM_HALT(c1);

S747:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S856;
  return m.FSM_HALT(c1);

S749:
  m.FSM_TAKE(3);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S774:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S776:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S778:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S243;
  return m.FSM_HALT(c1);

S780:
  m.FSM_TAKE(4);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S805:
  m.FSM_TAKE(18);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if (c1 == 'e') goto S859;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S831:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S833:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S835:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S837:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S839:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S884;
  return m.FSM_HALT(c1);

S841:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S886;
  return m.FSM_HALT(c1);

S843:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S888;
  return m.FSM_HALT(c1);

S845:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S847:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S849:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S497;
  return m.FSM_HALT(c1);

S851:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'f') goto S851;
  if ('A' <= c1 && c1 <= 'F') goto S851;
  if ('0' <= c1 && c1 <= '9') goto S851;
  return m.FSM_HALT(c1);

S856:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S856;
  return m.FSM_HALT(c1);

S859:
  m.FSM_TAKE(5);
  m.FSM_HEAD(3);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S351;
  if (241 <= c1 && c1 <= 243) goto S349;
  if (c1 == 240) goto S347;
  if (238 <= c1 && c1 <= 239) goto S345;
  if (c1 == 237) goto S343;
  if (225 <= c1 && c1 <= 236) goto S341;
  if (c1 == 224) goto S339;
  if (194 <= c1 && c1 <= 223) goto S337;
  if ('{' <= c1 && c1 <= 127) goto S243;
  if ('a' <= c1 && c1 <= 'z') goto S161;
  if (c1 == '_') goto S283;
  if (c1 == '^') goto S243;
  if ('@' <= c1 && c1 <= 'Z') goto S283;
  if (c1 == ':') goto S335;
  if ('0' <= c1 && c1 <= '9') goto S161;
  if (c1 == '.') goto S283;
  if ('*' <= c1 && c1 <= '?') goto S243;
  if (c1 == '(') goto S332;
  if ('$' <= c1 && c1 <= '\'') goto S243;
  if (c1 == '#') goto S283;
  if (c1 == '!') goto S243;
  if (' ' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= 31) goto S243;
  return m.FSM_HALT(c1);

S884:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S886:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);

S888:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S405;
  return m.FSM_HALT(c1);
}

} // namespace ceammc

} // namespace ds

