#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset~;
#X text 200 157 onset detector;
#X obj 30 184 an.pitchtrack~;
#X text 200 184 pitch tracker;
#X obj 20 211 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 263 array.bpm;
#X text 200 263 BPM calculator;
#X obj 30 290 array.copy;
#X text 200 290 copy samples from one array to another;
#X obj 30 317 array.do;
#X text 200 317 iterate and modify array content via side-chain;
#X obj 30 344 array.each;
#X text 200 344 process each array elements via side-chain;
#X obj 30 371 array.fill;
#X text 200 371 fill array with single value or pattern;
#X obj 30 398 array.hist;
#X text 200 398 calculates array histogram;
#X obj 30 425 array.mean;
#X text 200 425 calculates array arithmetic mean value;
#X obj 30 452 array.minmax;
#X text 200 452 find array min and max element value;
#X obj 30 479 array.plot~;
#X text 200 479 plot signal on specified array;
#X obj 30 506 array.resample;
#X text 200 506 array resampler;
#X obj 30 533 array.rms;
#X text 200 533 calculates root mean square value for array;
#X obj 30 560 array.set;
#X text 200 560 set array content from list;
#X obj 30 587 array.stddev;
#X text 200 587 calculates standard deviation for array values;
#X obj 30 614 array.stretch;
#X text 200 614 array time-stretch \, pitch-shift or rate-change;
#X obj 30 641 array.sum;
#X text 200 641 calculates sum of array elements;
#X obj 30 668 array.sum2;
#X text 200 668 calculates sum of squares of array elements;
#X obj 30 695 array.variance;
#X text 200 695 calculates variance of array values;
#X obj 30 722 array.vplay;
#X text 200 722 simple array player for using with vline~;
#X obj 30 749 array.window;
#X text 200 749 fill array with window;
#X obj 30 776 plot.geomspace~;
#X text 200 776 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 816 plot.linspace~;
#X text 200 816 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 20 856 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 897 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 911 ui.link @title [function] @url function-help.pd;
#X text 200 908 named function;
#X obj 30 933 function.call;
#X text 200 933 call named function;
#X obj 30 960 gain~;
#X text 200 960 multislot signal gain;
#X obj 30 987 matrix~;
#X text 200 987 signal routing matrix;
#X obj 30 1014 metro.pattern;
#X text 200 1014 metro with rhythmic patterns;
#X obj 30 1041 metro.random;
#X text 200 1041 metro random bang with specified range;
#X obj 30 1068 metro.seq;
#X text 200 1068 metro sequencer;
#X obj 30 1095 mix~;
#X text 200 1095 multislot signal mixer;
#X obj 30 1122 obj.props;
#X text 200 1122 property extractor;
#X obj 30 1149 radio;
#X text 200 1149 float index to outlet values as radio switch;
#X obj 30 1176 window;
#X text 200 1176 returns window value by given window position;
#X obj 30 1203 xdac~;
#X text 200 1203 dac~ with channel ranges;
#X obj 30 1230 xfade2~;
#X text 200 1230 multi stereo-signal crossfade;
#X obj 30 1257 xfade~;
#X text 200 1257 multi signal crossfade;
#X obj 20 1284 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1325 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1336 chaos.gbman0;
#X text 200 1336 Gingerbreadman map chaotic generator;
#X obj 30 1363 chaos.gbman0~;
#X text 200 1363 Gingerbreadman map chaotic generator;
#X obj 20 1390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1431 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1442 array.p2s;
#X text 200 1442 convert array phase [0\..1] to sample position;
#X obj 30 1469 array.s2p;
#X text 200 1469 convert array sample position to relative phase position
[0\..1];
#X obj 30 1509 conv.amp2dbfs;
#X text 200 1509 convert from amplitude to decibel full scale;
#X obj 30 1536 conv.amp2dbfs~;
#X text 200 1536 convert from amplitude to decibel full scale;
#X obj 30 1563 conv.bpm2hz;
#X text 200 1563 converts BPM to frequency in herz;
#X obj 30 1590 conv.bpm2ms;
#X text 200 1590 convert frequency in BPM to period in milliseconds;
#X obj 30 1617 conv.bpm2sec;
#X text 200 1617 convert frequency in BPM to period in seconds;
#X obj 30 1644 conv.car2pol;
#X text 200 1644 convert cartesian coords to polar;
#X obj 30 1671 conv.cc2amp;
#X text 200 1671 convert from MIDI Control Change range;
#X obj 30 1698 conv.dbfs2amp;
#X text 200 1698 convert decibel full scale to amplitude;
#X obj 30 1725 conv.lin2curve;
#X text 200 1725 map linear to exponential range with 0 allowed.;
#X obj 30 1752 conv.lin2exp;
#X text 200 1752 maps linear range to exponential range;
#X obj 30 1779 conv.lin2lin;
#X text 200 1779 convert from one linear range to another;
#X obj 30 1806 conv.lin2lin~;
#X text 200 1806 convert from one linear range to another for signals;
#X obj 30 1833 conv.list2props;
#X text 200 1833 converts list to series of property messages;
#X obj 30 1860 conv.midi2freq;
#X text 200 1860 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1900 conv.phase2rad;
#X text 200 1900 convert phase value [0-1] to radians;
#X obj 30 1927 conv.phase2rad~;
#X text 200 1927 convert phase value [0-1] to radians;
#X obj 30 1954 conv.pitch2midi;
#X text 200 1954 converts symbol pitch name to MIDI note number;
#X obj 30 1981 conv.pol2car;
#X text 200 1981 convert from polar coordinates to cartesian;
#X obj 30 2008 conv.rad2phase;
#X text 200 2008 convert radians value to phase;
#X obj 30 2035 conv.rad2phase~;
#X text 200 2035 convert radians value to phase;
#X obj 30 2062 conv.samp2ms;
#X text 200 2062 convert samples to time according to samplerate;
#X obj 30 2089 conv.samp2sec;
#X text 200 2089 convert samples to time according to samplerate;
#X obj 30 2116 conv.sec2samp;
#X text 200 2116 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2156 conv.sec2str;
#X text 200 2156 converts float time in seconds to formated symbol
(or string);
#X obj 30 2183 conv.str2sec;
#X text 200 2183 converts formatted time to float value in seconds;
#X obj 20 2210 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2251 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2262 data.dict;
#X text 200 2262 dictionary container: store values by key;
#X obj 30 2289 data.fifo;
#X text 200 2289 First-In-First-Out (FIFO) queue data container;
#X obj 30 2316 data.float;
#X text 200 2316 robust float object;
#X obj 30 2343 data.int;
#X text 200 2343 robust int object;
#X obj 30 2370 data.list;
#X text 200 2370 list container;
#X obj 30 2397 data.mlist;
#X text 200 2397 multidimensional list container;
#X obj 30 2424 data.set;
#X text 200 2424 container that store unique elements;
#X obj 30 2451 data.set2list;
#X text 200 2451 converts set to list;
#X obj 30 2478 dict.contains;
#X text 200 2478 predicate to check if dict contains a keys;
#X obj 30 2505 dict.each;
#X text 200 2505 map each value in dict;
#X obj 30 2532 dict.from_list;
#X text 200 2532 creates dictionary from list;
#X obj 30 2559 dict.get;
#X text 200 2559 output dict values;
#X obj 30 2586 dict.keys;
#X text 200 2586 get list of dict keys;
#X obj 30 2613 dict.pass;
#X text 200 2613 passes specified keys in dict;
#X obj 30 2640 dict.reject;
#X text 200 2640 rejects specified keys from dict;
#X obj 30 2667 dict.size;
#X text 200 2667 dictionary size;
#X obj 30 2694 dict.to_list;
#X text 200 2694 converts dictionary to plain list;
#X obj 30 2721 dict.values;
#X text 200 2721 dictionary values as mlist;
#X obj 30 2748 mlist.flatten;
#X text 200 2748 flatten nested mlist;
#X obj 30 2775 set.contains;
#X text 200 2775 check if specified element is in set;
#X obj 30 2802 set.diff;
#X text 200 2802 difference between two sets;
#X obj 30 2829 set.equal;
#X text 200 2829 checks if two sets are equal (contains same elements);
#X obj 30 2856 set.intersect;
#X text 200 2856 output intersection of given sets;
#X obj 30 2883 set.size;
#X text 200 2883 get number of elements in set;
#X obj 30 2910 set.symdiff;
#X text 200 2910 symmetric difference between two sets;
#X obj 30 2937 set.union;
#X text 200 2937 output union of given sets;
#X obj 20 2964 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3005 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3016 dyn.comp2~;
#X text 200 3016 stereo dynamic range compressor;
#X obj 30 3043 dyn.comp~;
#X text 200 3043 mono dynamic range compressors;
#X obj 30 3070 dyn.gate2~;
#X text 200 3070 stereo signal gate;
#X obj 30 3097 dyn.gate~;
#X text 200 3097 mono signal gate;
#X obj 30 3124 dyn.limit2~;
#X text 200 3124 stereo 1176LN Peak Limiter;
#X obj 30 3151 dyn.limit~;
#X text 200 3151 mono 1176LN Peak Limiter;
#X obj 30 3178 dyn.softclip~;
#X text 200 3178 soft signal clip;
#X obj 20 3205 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3246 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3257 env.adsr~;
#X text 200 3257 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3284 env.ar~;
#X text 200 3284 Attack/Release envelope generator;
#X obj 30 3311 env.asr~;
#X text 200 3311 Attack/Sustain/Release envelope generator;
#X obj 30 3338 env.concat;
#X text 200 3338 Envelope concatenation;
#X obj 30 3365 env.follow~;
#X text 200 3365 Envelope follower with independent attack and release
times;
#X obj 30 3392 env.mix;
#X text 200 3392 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3432 env.smooth~;
#X text 200 3432 An envelope with an exponential attack and release;
#X obj 30 3459 env.tscale;
#X text 200 3459 Envelope time-scale;
#X obj 30 3486 env.tshift;
#X text 200 3486 Envelope time-shift (horizontal);
#X obj 30 3513 env.vscale;
#X text 200 3513 Envelope value-scale;
#X obj 30 3540 env2array;
#X text 200 3540 Renders envelope to specified array;
#X obj 30 3567 env2vline;
#X text 200 3567 Converts envelope to bunch of vline messages;
#X obj 30 3594 envelope;
#X text 200 3594 Envelope data type;
#X obj 30 3621 vline2env;
#X text 200 3621 Converts vline messages to env;
#X obj 20 3648 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3689 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3700 expand_env;
#X text 200 3700 Substitute enviroment variables in data stream;
#X obj 30 3727 flow.append;
#X text 200 3727 inject message into flow;
#X obj 30 3754 flow.change;
#X text 200 3754 rejects redundant input values;
#X obj 30 3781 flow.count;
#X text 200 3781 control flow event counter;
#X obj 30 3808 flow.demultiplex;
#X text 200 3808 control flow demultiplexer;
#X obj 30 3835 flow.demultiplex2~;
#X text 200 3835 audio stream stereo demultiplexer;
#X obj 30 3862 flow.demultiplex~;
#X text 200 3862 audio stream demultiplexer;
#X obj 30 3889 flow.gate;
#X text 200 3889 control flow gate. [spigot] analog;
#X obj 30 3916 flow.greater;
#X text 200 3916 numeric stream router;
#X obj 30 3943 flow.group;
#X text 200 3943 group data atoms in list of specified size;
#X obj 30 3970 flow.interval;
#X text 200 3970 measure time between flow events;
#X obj 30 3997 flow.less;
#X text 200 3997 numeric stream router \, like many [moses];
#X obj 30 4024 flow.less_eq;
#X text 200 4024 numeric stream router \, like many [moses];
#X obj 30 4051 flow.match;
#X text 200 4051 route data flow by regexp match;
#X obj 30 4078 flow.multiplex;
#X text 200 4078 control flow multiplexer;
#X obj 30 4105 flow.multiplex2~;
#X text 200 4105 audio stream stereo multiplexer;
#X obj 30 4132 flow.multiplex~;
#X text 200 4132 audio stream multiplexer;
#X obj 30 4159 flow.once;
#X text 200 4159 one message pass thru;
#X obj 30 4186 flow.pack;
#X text 200 4186 flow pack;
#X obj 30 4213 flow.pass;
#X text 200 4213 pass specified values;
#X obj 30 4240 flow.pass_if;
#X text 200 4240 pass values that accepted by predicate object;
#X obj 30 4267 flow.reject;
#X text 200 4267 reject specified values;
#X obj 30 4294 flow.reject_if;
#X text 200 4294 reject values by predicate;
#X obj 30 4321 flow.route;
#X text 200 4321 advanced message router;
#X obj 30 4348 flow.speedlim;
#X text 200 4348 control stream speed limiter;
#X obj 30 4375 flow.split;
#X text 200 4375 split data flow by external side-chain predicate;
#X obj 30 4402 flow.sync;
#X text 200 4402 bus with only hot inlets;
#X obj 30 4429 flow.sync_pack;
#X text 200 4429 flow pack with all hot inlets;
#X obj 30 4456 flow.tee~;
#X text 200 4456 separate audio and control streams;
#X obj 30 4483 replace;
#X text 200 4483 Replace atoms in data stream;
#X obj 20 4510 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4551 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4562 flt.biquad~;
#X text 200 4562 second order IIR filter.;
#X obj 30 4589 flt.bpf12~;
#X text 200 4589 Band-pass filter with 12/db per octave slope;
#X obj 30 4616 flt.bpf24~;
#X text 200 4616 Band-pass filter with 24/db per octave slope;
#X obj 30 4643 flt.c_bpf~;
#X text 200 4643 BPF coefficient calculator for biquad filter;
#X obj 30 4670 flt.c_highshelf~;
#X text 200 4670 Highshelf filter coefficient calculator for biquad;
#X obj 30 4697 flt.c_hpf~;
#X text 200 4697 HPF coefficient calculator for biquad filter;
#X obj 30 4724 flt.c_lowshelf~;
#X text 200 4724 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4751 flt.c_lpf~;
#X text 200 4751 LPF coefficient calculator for biquad filter;
#X obj 30 4778 flt.c_notch~;
#X text 200 4778 Band-reject coefficient calculator for biquad filter;
#X obj 30 4805 flt.c_peak~;
#X text 200 4805 Peaking equalizer calculator for biquad;
#X obj 30 4832 flt.dcblock2~;
#X text 200 4832 stereo DC blocker;
#X obj 30 4859 flt.dcblock~;
#X text 200 4859 mono DC blocker;
#X obj 30 4886 flt.eq10~;
#X text 200 4886 graphic 10 band equalizer;
#X obj 30 4913 flt.eq_peak_cq~;
#X text 200 4913 constant-Q second order peaking equalizer section;
#X obj 30 4940 flt.eq_peak~;
#X text 200 4940 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4995 flt.freqz~;
#X text 200 4995 compute the frequency response of a digital filter;
#X obj 30 5022 flt.highshelf~;
#X text 200 5022 gain boost|cut above some frequency;
#X obj 30 5049 flt.hpf12~;
#X text 200 5049 High-pass filter with 12/db per octave slope;
#X obj 30 5076 flt.hpf24~;
#X text 200 5076 High-pass filter with 24/db per octave slope;
#X obj 30 5103 flt.lowshelf~;
#X text 200 5103 gain boost|cut below some frequency;
#X obj 30 5130 flt.lpf12~;
#X text 200 5130 Low-pass filter with 12/db per octave slope;
#X obj 30 5157 flt.lpf24~;
#X text 200 5157 Low-pass filter with 24/db per octave slope;
#X obj 30 5184 flt.median;
#X text 200 5184 Median control flow filter;
#X obj 30 5211 flt.moog_vcf~;
#X text 200 5211 Moog Voltage Controlled Filter;
#X obj 30 5238 flt.notch~;
#X text 200 5238 band-rejection filter;
#X obj 30 5265 flt.resonbp~;
#X text 200 5265 Simple resonant bandpass filter;
#X obj 20 5292 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5333 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5344 fx.bitdown~;
#X text 200 5344 bit downer and downsampler effect;
#X obj 30 5371 fx.chorus~;
#X text 200 5371 Chorus effect;
#X obj 30 5398 fx.distortion1~;
#X text 200 5398 distortion #1 from Guitarix effects set;
#X obj 30 5425 fx.distortion2~;
#X text 200 5425 distortion #2 from Guitarix effects set;
#X obj 30 5452 fx.distortion3~;
#X text 200 5452 simple distortion #3 from Guitarix effects set;
#X obj 30 5479 fx.distortion~;
#X text 200 5479 cubic nonlinearity distortion;
#X obj 30 5506 fx.drive~;
#X text 200 5506 Guitarix drive effect;
#X obj 30 5533 fx.drone_box~;
#X text 200 5533 mono sympathetic resonance generator;
#X obj 30 5560 fx.echo~;
#X text 200 5560 simple echo effect;
#X obj 30 5587 fx.flanger~;
#X text 200 5587 mono flanging effect;
#X obj 30 5614 fx.freeverb2~;
#X text 200 5614 freeverb2 - stereo version of freeverb;
#X obj 30 5641 fx.freeverb~;
#X text 200 5641 freeverb - common used open-source reverb;
#X obj 30 5668 fx.freqshift~;
#X text 200 5668 frequency shifter or single-sideband ring modulation;
#X obj 30 5695 fx.granulator~;
#X text 200 5695 simple input stream granulator;
#X obj 30 5722 fx.greyhole~;
#X text 200 5722 A complex echo-like effect;
#X obj 30 5749 fx.looper~;
#X text 200 5749 One track looper;
#X obj 30 5776 fx.pitchshift~;
#X text 200 5776 simple pitch shifter based on 2 delay lines;
#X obj 30 5803 fx.sdelay~;
#X text 200 5803 smooth delay with a feedback control;
#X obj 30 5830 fx.vocoder~;
#X text 200 5830 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5870 fx.wahwah~;
#X text 200 5870 digitized CryBaby wah pedal;
#X obj 30 5897 fx.zita_rev1~;
#X text 200 5897 Zita stereo reverb;
#X obj 20 5924 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5965 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5976 global.dict;
#X text 200 5976 global named dict object;
#X obj 30 6003 global.float;
#X text 200 6003 global named float object;
#X obj 30 6030 global.int;
#X text 200 6030 global named integer object;
#X obj 30 6057 global.list;
#X text 200 6057 global named list object;
#X obj 30 6084 global.mlist;
#X text 200 6084 global named mlist object;
#X obj 30 6111 global.set;
#X text 200 6111 global named set object;
#X obj 20 6138 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6179 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6190 hw.apple_smc;
#X text 200 6190 query the system management control in Apples;
#X obj 30 6217 hw.apple_sms;
#X text 200 6217 query the sudden motion sensor in Apples;
#X obj 30 6244 hw.arduino;
#X text 200 6244 Arduino device;
#X obj 30 6271 hw.cpu_temp;
#X text 200 6271 get CPU temperature;
#X obj 30 6298 hw.display;
#X text 200 6298 get/set display properties;
#X obj 30 6325 hw.kbd_light;
#X text 200 6325 Get/set keyboard light on some devices;
#X obj 20 6352 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6393 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6404 lfo.+pulse~;
#X text 200 6404 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6431 lfo.+saw~;
#X text 200 6431 Positive unit-amplitude low frequency saw wave;
#X obj 30 6458 lfo.+square~;
#X text 200 6458 Positive low frequency square wave;
#X obj 30 6485 lfo.+tri~;
#X text 200 6485 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6512 lfo.impulse~;
#X text 200 6512 Unit-amplitude low-frequency impulse train;
#X obj 30 6539 lfo.pulse~;
#X text 200 6539 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6566 lfo.saw~;
#X text 200 6566 Full-range unit-amplitude low frequency saw;
#X obj 30 6593 lfo.square~;
#X text 200 6593 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6620 lfo.tri~;
#X text 200 6620 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6647 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6688 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6699 list.^at;
#X text 200 6699 on input index(es) outputs list element(s);
#X obj 30 6726 list.^contains;
#X text 200 6726 on input atom or list checks if specified list contains
it;
#X obj 30 6753 list.^search;
#X text 200 6753 on input atom returns it index in list;
#X obj 30 6780 list.all_of;
#X text 200 6780 checks if all list atoms accepted by predicate;
#X obj 30 6807 list.any_of;
#X text 200 6807 checks if at least one list element is accepted by
predicate;
#X obj 30 6834 list.append;
#X text 200 6834 append atom or list to the end of input list;
#X obj 30 6861 list.apply_to;
#X text 200 6861 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6901 list.at;
#X text 200 6901 on input list outputs element(s) at specified index(es);
#X obj 30 6928 list.choice;
#X text 200 6928 returns random element from list;
#X obj 30 6955 list.contains;
#X text 200 6955 checks if input list contains specified atoms;
#X obj 30 6982 list.count;
#X text 200 6982 returns the number of items that equal to specified
value;
#X obj 30 7009 list.count_if;
#X text 200 7009 returns the number of items that satisfy to external
predicate.;
#X obj 30 7049 list.delta;
#X text 200 7049 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7089 list.distribution;
#X text 200 7089 list value distribution;
#X obj 30 7116 list.do;
#X text 200 7116 iterate and modify list contents via side-chain;
#X obj 30 7143 list.each;
#X text 200 7143 maps each list value via external object(s);
#X obj 30 7170 list.enumerate;
#X text 200 7170 enumerates input list;
#X obj 30 7197 list.equal;
#X text 200 7197 checks if given lists are equal;
#X obj 30 7224 list.first;
#X text 200 7224 returns first list element;
#X obj 30 7251 list.gen;
#X text 200 7251 generates list of specified length via external generator;
#X obj 30 7278 list.histogram;
#X text 200 7278 outputs distribution histogram;
#X obj 30 7305 list.insert;
#X text 200 7305 insert atom or list to the specified position of input
list;
#X obj 30 7332 list.integrator;
#X text 200 7332 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7372 list.last;
#X text 200 7372 returns last list element;
#X obj 30 7399 list.length;
#X text 200 7399 returns the number of atoms in the list;
#X obj 30 7426 list.max;
#X text 200 7426 returns largest element in the list;
#X obj 30 7453 list.mean;
#X text 200 7453 calculates average of list of floats;
#X obj 30 7480 list.min;
#X text 200 7480 returns smallest element in the list;
#X obj 30 7507 list.none_of;
#X text 200 7507 checks if none of list atoms is accepted by predicate;
#X obj 30 7534 list.normalize;
#X text 200 7534 normalizes float list values to get their sum = 1.0;
#X obj 30 7561 list.pass_if;
#X text 200 7561 leave only elements accepted by predicate;
#X obj 30 7588 list.prepend;
#X text 200 7588 prepend atom or list before input list;
#X obj 30 7615 list.product;
#X text 200 7615 calculates product of floats in list;
#X obj 30 7642 list.range;
#X text 200 7642 returns list smallest and largest value;
#X obj 30 7669 list.reduce;
#X text 200 7669 apply function of two arguments cumulatively to the
list;
#X obj 30 7696 list.remove;
#X text 200 7696 on input list remove element(s) at specified positions;
#X obj 30 7723 list.remove_if;
#X text 200 7723 remove elements by predicate;
#X obj 30 7750 list.repack;
#X text 200 7750 repack input list to specified size;
#X obj 30 7777 list.repeat;
#X text 200 7777 creates new list by repeating given list specified
times;
#X obj 30 7804 list.resample;
#X text 200 7804 resample list with specified ratio;
#X obj 30 7831 list.resize;
#X text 200 7831 changes list size;
#X obj 30 7858 list.reverse;
#X text 200 7858 reverses the order of the elements in the list;
#X obj 30 7885 list.rldecode;
#X text 200 7885 Run-length list decoder (RLE);
#X obj 30 7912 list.rlencode;
#X text 200 7912 RLE (run-length encoding) for lists;
#X obj 30 7939 list.rotate;
#X text 200 7939 rotates list;
#X obj 30 7966 list.route;
#X text 200 7966 acts like [route] but for lists;
#X obj 30 7993 list.search;
#X text 200 7993 search specified items in input list;
#X obj 30 8020 list.separate;
#X text 200 8020 sends list elements one by one separately;
#X obj 30 8047 list.seq;
#X text 200 8047 numeric sequence list generator;
#X obj 30 8074 list.set;
#X text 200 8074 on input list set value at specified position;
#X obj 30 8101 list.shift;
#X text 200 8101 shifts the contents of the list with linear interpolation;
#X obj 30 8128 list.shuffle;
#X text 200 8128 randomly rearranges elements in list;
#X obj 30 8155 list.slice;
#X text 200 8155 extract sublist;
#X obj 30 8182 list.sort;
#X text 200 8182 sorts list values by ascending order;
#X obj 30 8209 list.sort_with;
#X text 200 8209 sort list with user defined side-chain;
#X obj 30 8236 list.split;
#X text 200 8236 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8276 list.stretch;
#X text 200 8276 stretches list - changes its size with linear interpolation;
#X obj 30 8303 list.sum;
#X text 200 8303 calculates sum of floats in list;
#X obj 30 8330 list.unique;
#X text 200 8330 removes duplicates from input list;
#X obj 30 8357 list.unpack;
#X text 200 8357 unpack list elements to separate outlets;
#X obj 30 8384 list.unzip;
#X text 200 8384 splits list to N lists \, each to separate output;
#X obj 30 8411 list.walk;
#X text 200 8411 Walks thru the list;
#X obj 30 8438 list.zip;
#X text 200 8438 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8493 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8534 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8545 live.capture~;
#X text 200 8545 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8585 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8626 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8637 local.dict;
#X text 200 8637 local named dict object;
#X obj 30 8664 local.float;
#X text 200 8664 canvas-scoped named float variable;
#X obj 30 8691 local.int;
#X text 200 8691 canvas-scoped named integer variable;
#X obj 30 8718 local.list;
#X text 200 8718 local named list object;
#X obj 30 8745 local.mlist;
#X text 200 8745 local named mlist object;
#X obj 30 8772 local.set;
#X text 200 8772 local named set object;
#X obj 20 8799 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8840 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8851 math.abs;
#X text 200 8851 absolute value function;
#X obj 30 8878 math.abs~;
#X text 200 8878 absolute value function for signals;
#X obj 30 8905 math.acos;
#X text 200 8905 arc cosine function;
#X obj 30 8932 math.acosh;
#X text 200 8932 inverse hyperbolic cosine function;
#X obj 30 8959 math.acos~;
#X text 200 8959 arc cosine function for signals;
#X obj 30 8986 math.and;
#X text 200 8986 operation AND for multiple arguments;
#X obj 30 9013 math.approx;
#X text 200 9013 check if input value approximately equal to pattern;
#X obj 30 9040 math.asin;
#X text 200 9040 arc sine function;
#X obj 30 9067 math.asinh;
#X text 200 9067 inverse hyperbolic sine function;
#X obj 30 9094 math.atan;
#X text 200 9094 arc tangent function;
#X obj 30 9121 math.atanh;
#X text 200 9121 inverse hyperbolic tangent function;
#X obj 30 9148 math.cabs~;
#X text 200 9148 magnitude of a complex signals;
#X obj 30 9175 math.carg~;
#X text 200 9175 phase angle of a complex signals;
#X obj 30 9202 math.cbrt;
#X text 200 9202 cube root function;
#X obj 30 9229 math.cdiv~;
#X text 200 9229 division of complex signals;
#X obj 30 9256 math.ceil;
#X text 200 9256 round to smallest integral value not less than input
value;
#X obj 30 9283 math.ceil~;
#X text 200 9283 round to smallest integral value not less than input
value;
#X obj 30 9310 math.cexp~;
#X text 200 9310 exponent of a complex signals;
#X obj 30 9337 math.cmul~;
#X text 200 9337 multiplication of complex signals;
#X obj 30 9364 math.cos;
#X text 200 9364 cosine function;
#X obj 30 9391 math.cosh;
#X text 200 9391 hyperbolic cosine function;
#X obj 30 9418 math.cos~;
#X text 200 9418 cosine function;
#X obj 30 9445 math.div;
#X text 200 9445 division (on lists too);
#X obj 30 9472 math.e;
#X text 200 9472 mathematical constant \, base of the natural logarithm;
#X obj 30 9499 math.erf~;
#X text 200 9499 error function for signals;
#X obj 30 9526 math.exp;
#X text 200 9526 exponential functions;
#X obj 30 9553 math.exp2;
#X text 200 9553 exponential functions;
#X obj 30 9580 math.exp2~;
#X text 200 9580 base-2 exponential for signal;
#X obj 30 9607 math.expr;
#X text 200 9607 dynamic [expr];
#X obj 30 9634 math.floor;
#X text 200 9634 round to largest integral value not greater than x;
#X obj 30 9661 math.floor~;
#X text 200 9661 round to largest integral value not greater than x;
#X obj 30 9688 math.gamma;
#X text 200 9688 gamma function;
#X obj 30 9715 math.gamma~;
#X text 200 9715 gamma function for floating point signals;
#X obj 30 9742 math.gcd;
#X text 200 9742 calculate greatest common divisor;
#X obj 30 9769 math.inf;
#X text 200 9769 infinity value that cannot be represented accurately;
#X obj 30 9796 math.lcm;
#X text 200 9796 calculate least common multiple;
#X obj 30 9823 math.lgamma;
#X text 200 9823 natural logarithm of the absolute value of the gamma
function;
#X obj 30 9850 math.lgamma~;
#X text 200 9850 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 9890 math.log;
#X text 200 9890 logarithm functions;
#X obj 30 9917 math.log10;
#X text 200 9917 logarithm functions;
#X obj 30 9944 math.log2;
#X text 200 9944 logarithm functions;
#X obj 30 9971 math.mul;
#X text 200 9971 multiplication (on lists too);
#X obj 30 9998 math.nan;
#X text 200 9998 Not a Number \, unrepresentable value;
#X obj 30 10025 math.neg;
#X text 200 10025 negate function;
#X obj 30 10052 math.or;
#X text 200 10052 operation OR for multiple arguments;
#X obj 30 10079 math.pi;
#X text 200 10079 mathematical constant;
#X obj 30 10106 math.pi~;
#X text 200 10106 mathematical constant;
#X obj 30 10133 math.polyeval;
#X text 200 10133 evaluates the polynomial described by the coefficients
list;
#X obj 30 10160 math.reciprocal;
#X text 200 10160 calculate reciprocal number;
#X obj 30 10187 math.reciprocal~;
#X text 200 10187 calculate reciprocal number for signals;
#X obj 30 10214 math.round;
#X text 200 10214 round to integral value \, regardless of rounding
direction;
#X obj 30 10241 math.round~;
#X text 200 10241 signal round;
#X obj 30 10268 math.sign;
#X text 200 10268 sign function;
#X obj 30 10295 math.sin;
#X text 200 10295 sine function;
#X obj 30 10322 math.sinh;
#X text 200 10322 hyperbolic sine function;
#X obj 30 10349 math.sin~;
#X text 200 10349 sine function;
#X obj 30 10376 math.sqrt;
#X text 200 10376 square root function;
#X obj 30 10403 math.squared;
#X text 200 10403 value square;
#X obj 30 10430 math.squared~;
#X text 200 10430 signal value square;
#X obj 30 10457 math.sync_add;
#X text 200 10457 sync addition;
#X obj 30 10484 math.sync_and;
#X text 200 10484 sync logical AND operation;
#X obj 30 10511 math.sync_div;
#X text 200 10511 sync division;
#X obj 30 10538 math.sync_eq;
#X text 200 10538 sync equal numbers check;
#X obj 30 10565 math.sync_ge;
#X text 200 10565 sync greater equal numbers compare;
#X obj 30 10592 math.sync_gt;
#X text 200 10592 sync greater then numbers compare;
#X obj 30 10619 math.sync_le;
#X text 200 10619 sync less equal numbers compare;
#X obj 30 10646 math.sync_lt;
#X text 200 10646 sync less then numbers compare;
#X obj 30 10673 math.sync_mod;
#X text 200 10673 sync remainder of modulo division (float or integer);
#X obj 30 10700 math.sync_mul;
#X text 200 10700 sync multiplication;
#X obj 30 10727 math.sync_ne;
#X text 200 10727 sync numbers for not equality;
#X obj 30 10754 math.sync_or;
#X text 200 10754 sync logical OR operation;
#X obj 30 10781 math.sync_sub;
#X text 200 10781 sync subtraction;
#X obj 30 10808 math.sync_xor;
#X text 200 10808 sync logical XOR operation;
#X obj 30 10835 math.tan;
#X text 200 10835 tangent function;
#X obj 30 10862 math.tanh;
#X text 200 10862 hyperbolic tangent function;
#X obj 30 10889 math.trunc;
#X text 200 10889 truncate to integer value;
#X obj 20 10916 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10957 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10968 midi.ctl2str;
#X text 200 10968 convert Standard MIDI Controllers number to name;
#X obj 30 10995 midi.event2ctl;
#X text 200 10995 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11022 midi.event2note;
#X text 200 11022 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11049 midi.event2prg;
#X text 200 11049 convert MidiEvent message to midi program change
value;
#X obj 30 11076 midi.file;
#X text 200 11076 standard midi file SMF reader and writer;
#X obj 30 11103 midi.key2str;
#X text 200 11103 convert key number to SPN name according to tonality;
#X obj 30 11130 midi.prg2str;
#X text 200 11130 convert GM Instrument number to name (string or symbol);
#X obj 30 11157 midi.track;
#X text 200 11157 extract track from MidiFile;
#X obj 20 11184 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 11225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11236 click~;
#X text 200 11236 Output single impulse on bang;
#X obj 30 11263 fluid~;
#X text 200 11263 FluidSynth SoundFont 2 player;
#X obj 30 11290 modplug~;
#X text 200 11290 MOD file player (using libmodplug);
#X obj 30 11317 speech.flite;
#X text 200 11317 render speech to array;
#X obj 20 11344 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 11385 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11396 msg;
#X text 200 11396 message constructor;
#X obj 30 11423 msg.after;
#X text 200 11423 send specified message after incoming message;
#X obj 30 11450 msg.onload;
#X text 200 11450 send message when patch loads;
#X obj 20 11477 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 11518 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11529 net.host2ip;
#X text 200 11529 returns IP address by DNS name;
#X obj 20 11556 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 11597 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11608 noise.crackle~;
#X text 200 11608 sparse noise generator;
#X obj 30 11635 noise.lfreq0~;
#X text 200 11635 sampled/held noise (piecewise constant);
#X obj 30 11662 noise.lfreq~;
#X text 200 11662 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 11689 noise.pink~;
#X text 200 11689 Pink noise generator;
#X obj 30 11716 noise.white~;
#X text 200 11716 White noise generator;
#X obj 20 11743 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 11784 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11795 osc.blit~;
#X text 200 11795 Bandlimited impulse train oscillator;
#X obj 30 11822 osc.impulse~;
#X text 200 11822 Bandlimited impulse train generator;
#X obj 30 11849 osc.pulse~;
#X text 200 11849 Bandlimited pulse train oscillator;
#X obj 30 11876 osc.saw4~;
#X text 200 11876 Bandlimited sawtooth wave;
#X obj 30 11903 osc.saw~;
#X text 200 11903 Alias-free sawtooth wave;
#X obj 30 11930 osc.sinfb~;
#X text 200 11930 Sine oscilator with feedback;
#X obj 30 11957 osc.sin~;
#X text 200 11957 Sine wave oscillator;
#X obj 30 11984 osc.square~;
#X text 200 11984 Bandlimited square wave oscillator;
#X obj 30 12011 osc.tri~;
#X text 200 12011 Bandlimited triangle wave oscillator;
#X obj 20 12038 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12079 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12090 canvas.current;
#X text 200 12090 verbose information about current canvas;
#X obj 30 12117 canvas.dir;
#X text 200 12117 current canvas directory;
#X obj 30 12144 canvas.name;
#X text 200 12144 current canvas name;
#X obj 30 12171 canvas.path;
#X text 200 12171 current canvas fullpath;
#X obj 30 12198 canvas.top;
#X text 200 12198 verbose information about top-level canvas;
#X obj 30 12225 patch.args;
#X text 200 12225 Get patch or subpatch arguments;
#X obj 20 12252 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 12293 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12304 path.basename;
#X text 200 12304 outputs filename portion of pathname;
#X obj 30 12331 path.dirname;
#X text 200 12331 outputs directory portion of pathname;
#X obj 30 12358 path.exists;
#X text 200 12358 checks if given path exists;
#X obj 30 12385 path.is_dir;
#X text 200 12385 check if path is directory;
#X obj 30 12412 path.lsdir;
#X text 200 12412 list directory contents;
#X obj 20 12439 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 12480 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12491 is_any;
#X text 200 12491 checks if input data has *any* type;
#X obj 30 12518 is_bang;
#X text 200 12518 checks if input data has *bang* type;
#X obj 30 12545 is_data;
#X text 200 12545 checks if input data has *data* type;
#X obj 30 12572 is_dict;
#X text 200 12572 checks if input data has *dict* type;
#X obj 30 12599 is_even;
#X text 200 12599 checks if input number is even;
#X obj 30 12626 is_file;
#X text 200 12626 checks if file exists and accessible;
#X obj 30 12653 is_float;
#X text 200 12653 checks if input data has *float* type;
#X obj 30 12680 is_list;
#X text 200 12680 checks if input data has *list* type;
#X obj 30 12707 is_odd;
#X text 200 12707 checks if input number is odd;
#X obj 30 12734 is_pointer;
#X text 200 12734 checks if input data has *pointer* type;
#X obj 30 12761 is_symbol;
#X text 200 12761 checks if input data has *symbol* type;
#X obj 20 12788 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 12829 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12840 preset.float;
#X text 200 12840 load/store float preset;
#X obj 30 12867 preset.list;
#X text 200 12867 load/store symbol preset;
#X obj 30 12894 preset.storage;
#X text 200 12894 preset storage control;
#X obj 30 12921 preset.symbol;
#X text 200 12921 load/store symbol preset;
#X obj 20 12948 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12989 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13000 patch.props;
#X text 200 13000 patch properties manager;
#X obj 30 13027 prop;
#X text 200 13027 get/set named property value for subpatch or abstraction;
#X obj 30 13054 prop.declare;
#X text 200 13054 declare named property for subpatch or abstraction;
#X obj 30 13081 prop.get;
#X text 200 13081 Property extractor;
#X obj 30 13108 prop.get~;
#X text 200 13108 Property extractor from sound stream;
#X obj 30 13135 prop.set;
#X text 200 13135 Property injector;
#X obj 20 13162 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 13203 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13214 proto.firmata;
#X text 200 13214 Firmata Arduino protocol support;
#X obj 30 13241 proto.sp.alpaca;
#X text 200 13241 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 13268 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 13309 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13320 random.discrete;
#X text 200 13320 random weighted integers on interval [0 \, n);
#X obj 30 13347 random.float;
#X text 200 13347 random float generator in specified range;
#X obj 30 13374 random.gauss;
#X text 200 13374 gaussian random distribution;
#X obj 30 13401 random.int;
#X text 200 13401 Random integer generator in specified range;
#X obj 30 13428 random.linear;
#X text 200 13428 random linear distribution;
#X obj 30 13455 random.pw_const;
#X text 200 13455 piecewise constant random distribution;
#X obj 30 13482 random.pw_lin;
#X text 200 13482 piecewise linear random distribution;
#X obj 20 13509 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 13550 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13561 snd.file;
#X text 200 13561 Sound file loader on steroids;
#X obj 20 13588 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 13629 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13640 hoa.2d.decoder~;
#X text 200 13640 hoa 2d decoder;
#X obj 30 13667 hoa.2d.encoder~;
#X text 200 13667 hoa 2d encoder;
#X obj 30 13694 hoa.2d.map~;
#X text 200 13694 a 2d ambisonic multisource spatializer;
#X obj 30 13721 hoa.2d.optim~;
#X text 200 13721 a 2D ambisonic optimization tool;
#X obj 30 13748 hoa.2d.projector~;
#X text 200 13748 a plane waves decomposer from circular harmonics
domain;
#X obj 30 13775 hoa.2d.recomposer~;
#X text 200 13775 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 13815 hoa.2d.rotate~;
#X text 200 13815 a 2D ambisonic sound field rotation;
#X obj 30 13842 hoa.2d.wider~;
#X text 200 13842 a 2d fractional ambisonic order simulator;
#X obj 30 13869 hoa.@process;
#X text 200 13869 process properties manager for hoa.process~;
#X obj 30 13896 hoa.in;
#X text 200 13896 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13923 hoa.in~;
#X text 200 13923 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13950 hoa.out;
#X text 200 13950 message outlet for a patcher loaded by hoa.process~;
#X obj 30 13977 hoa.out~;
#X text 200 13977 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14004 hoa.process~;
#X text 200 14004 patcher loader for multichannel processing;
#X obj 30 14034 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 14031 a 2d ambisonic harmonic scope;
#X obj 30 14056 pan.cos~;
#X text 200 14056 two channel equal power sine/cosine panner;
#X obj 30 14083 pan.linsig~;
#X text 200 14083 two channel linear panner with signal control;
#X obj 30 14110 pan.lin~;
#X text 200 14110 two channel linear panner;
#X obj 30 14137 pan.spread~;
#X text 200 14137 spreads input channels across the stereo field;
#X obj 30 14164 pan.sqrt~;
#X text 200 14164 two channel equal power square root panner;
#X obj 30 14191 spat.pan4~;
#X text 200 14191 GMEM SPAT: 4-outputs spatializer;
#X obj 30 14218 spat.pan8~;
#X text 200 14218 GMEM SPAT: 8-outputs spatializer;
#X obj 20 14245 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 14286 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14297 string;
#X text 200 14297 string constructor;
#X obj 30 14324 string.contains;
#X text 200 14324 checks if given string contains specified substring;
#X obj 30 14351 string.ends_with;
#X text 200 14351 checks if given string ends with specified suffix;
#X obj 30 14378 string.equal;
#X text 200 14378 check strings for equality;
#X obj 30 14405 string.format;
#X text 200 14405 formats string like printf.;
#X obj 30 14432 string.join;
#X text 200 14432 joins (concatenates) strings with separator;
#X obj 30 14459 string.length;
#X text 200 14459 number of characters in string (unicode supported);
#X obj 30 14486 string.match;
#X text 200 14486 check if string match regular expression;
#X obj 30 14513 string.remove;
#X text 200 14513 remove substring from input string;
#X obj 30 14540 string.replace;
#X text 200 14540 replace from one substring to another in input string;
#X obj 30 14567 string.split;
#X text 200 14567 split string by separator;
#X obj 30 14594 string.starts_with;
#X text 200 14594 checks if given string starts with specified prefix;
#X obj 30 14621 string.substr;
#X text 200 14621 extract substring from input string;
#X obj 30 14648 string2symbol;
#X text 200 14648 converts string to symbol;
#X obj 20 14675 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 14716 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14727 symbol.equal;
#X text 200 14727 check symbols for equality;
#X obj 30 14754 symbol.length;
#X text 200 14754 number of characters in symbol (unicode supported);
#X obj 30 14781 symbol.num_compare;
#X text 200 14781 numeric symbol compare;
#X obj 20 14808 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 14849 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14860 synth.bee3~;
#X text 200 14860 Hammond-oid organ FM synthesis instrument;
#X obj 30 14887 synth.birds~;
#X text 200 14887 bird singing generator;
#X obj 30 14914 synth.church_bell~;
#X text 200 14914 generic church bell modal model;
#X obj 30 14941 synth.dubdub~;
#X text 200 14941 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 14981 synth.eguitar~;
#X text 200 14981 simple electric guitar model with steel strings;
#X obj 30 15008 synth.fgrain~;
#X text 200 15008 file granulator from STK;
#X obj 30 15035 synth.ks~;
#X text 200 15035 Karplus-Strong string;
#X obj 30 15062 synth.marimba~;
#X text 200 15062 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 15102 synth.rhodey~;
#X text 200 15102 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 15129 synth.risset_arp~;
#X text 200 15129 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 15156 synth.risset_tone~;
#X text 200 15156 Jean Claude Risset's endless glissando;
#X obj 30 15183 synth.shakers~;
#X text 200 15183 various percussion sounds from STK library;
#X obj 30 15210 synth.wurley~;
#X text 200 15210 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 15237 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 15278 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15289 system.colorpanel;
#X text 200 15289 System color panel dialog popup;
#X obj 30 15316 system.cursor;
#X text 200 15316 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 15343 system.getenv;
#X text 200 15343 Get system environment variables;
#X obj 30 15370 system.hostname;
#X text 200 15370 outputs system hostname;
#X obj 30 15397 system.memsize;
#X text 200 15397 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 15437 system.memused;
#X text 200 15437 returns the process physical memory use - current
and peak;
#X obj 30 15464 system.screen_size;
#X text 200 15464 returns current screen size in pixels;
#X obj 30 15491 system.shell;
#X text 200 15491 run external command in separate process;
#X obj 20 15518 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 15559 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15570 tl.bang;
#X text 200 15570 Timeline bang (with possible delay);
#X obj 30 15600 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 15597 Timeline section;
#X obj 30 15622 tl.timeline;
#X text 200 15622 Timeline - event scheduler;
#X obj 30 15649 tl.toggle;
#X text 200 15649 Timeline bang;
#X obj 30 15676 tl.transport;
#X text 200 15676 Timeline transport control;
#X obj 20 15703 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 15744 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15758 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 15755 array view with cursor and selection;
#X obj 30 15783 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 15780 A bang... that's all;
#X obj 30 15808 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 15805 colorchooser widget;
#X obj 30 15833 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 15830 Display GUI object;
#X obj 30 15858 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 15855 GUI for turning DSP on/off;
#X obj 30 15883 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15880 envelope editor widget;
#X obj 30 15908 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15905 UI stereo gain control;
#X obj 30 15933 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15930 UI gain control;
#X obj 30 15958 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 15955 simple icon with button capabilities;
#X obj 30 15983 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 15980 value increment/decrement;
#X obj 30 16008 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 16005 keyboard widget;
#X obj 30 16033 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 16030 knob widget;
#X obj 30 16058 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 16055 simple label widget;
#X obj 30 16083 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 16080 Hyperlink widget;
#X obj 30 16108 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 16105 The matrix of toggles has you.;
#X obj 30 16133 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 16130 Dropdown menu;
#X obj 30 16158 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 16155 Shows peak and rms signal level;
#X obj 30 16183 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 16180 filter mouse events from ui objects;
#X obj 30 16208 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 16205 routes mouse events from ui objects;
#X obj 30 16233 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 16230 counterpart of the vanilla [nbx];
#X obj 30 16258 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 16255 counterpart of the vanilla [nbx] for signal;
#X obj 30 16283 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 16280 signal plotter;
#X obj 30 16308 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 16305 2D slider in polar coordinates;
#X obj 30 16333 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 16330 Preset manager;
#X obj 30 16358 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 16355 counterpart of the vanilla radio toggle;
#X obj 30 16383 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 16380 range slider;
#X obj 30 16408 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 16405 Scope GUI object;
#X obj 30 16433 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 16430 counterpart of the vanilla slider;
#X obj 30 16458 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 16455 2D slider widget;
#X obj 30 16483 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 16480 Multiple slider widget;
#X obj 30 16508 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 16505 Spectroscope GUI object;
#X obj 30 16533 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 16530 displays a list of text buttons or text toggles;
#X obj 30 16558 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 16555 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 16580 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 16580 version: v0.8.0 \, license: GPL3;
#X obj 20 16601 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;