#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 matrix~;
#X text 175 525 signal routing matrix;
#X obj 30 552 metro.pattern;
#X text 175 552 metro with rhythmic patterns;
#X obj 30 579 metro.seq;
#X text 175 579 metro sequencer;
#X obj 30 606 mix~;
#X text 175 606 multislot signal mixer;
#X obj 30 633 radio;
#X text 175 633 float index to outlet values as radio switch;
#X obj 30 660 window;
#X text 175 660 returns window value by given window position;
#X obj 30 687 xfade2~;
#X text 175 687 multi stereo-signal crossfade;
#X obj 30 714 xfade~;
#X text 175 714 multi signal crossfade;
#X obj 20 741 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 782 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 793 array.p2s;
#X text 175 793 convert array phase [0\..1] to sample position;
#X obj 30 820 array.s2p;
#X text 175 820 convert array sample position to relative phase
position [0\..1];
#X obj 30 857 conv.amp2dbfs;
#X text 175 857 convert from amplitude to decibel full scale;
#X obj 30 884 conv.bpm2hz;
#X text 175 884 converts BPM to frequency in herz;
#X obj 30 911 conv.bpm2ms;
#X text 175 911 convert frequency in BPM to period in milliseconds;
#X obj 30 938 conv.bpm2sec;
#X text 175 938 convert frequency in BPM to period in seconds;
#X obj 30 965 conv.cc2amp;
#X text 175 965 convert from MIDI Control Change range;
#X obj 30 992 conv.dbfs2amp;
#X text 175 992 convert decibel full scale to amplitude;
#X obj 30 1019 conv.lin2curve;
#X text 175 1019 map linear to exponential range with 0 allowed.;
#X obj 30 1046 conv.lin2exp;
#X text 175 1046 maps linear range to exponential range;
#X obj 30 1073 conv.lin2lin;
#X text 175 1073 convert from one linear range to another;
#X obj 30 1100 conv.midi2freq;
#X text 175 1100 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1137 conv.pitch2midi;
#X text 175 1137 converts symbol pitch name to MIDI note number;
#X obj 30 1164 conv.samp2sec;
#X text 175 1164 convert samples to time according to samplerate;
#X obj 30 1191 conv.sec2samp;
#X text 175 1191 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1228 conv.sec2str;
#X text 175 1228 converts float time in seconds to formated symbol (or
string);
#X obj 30 1265 conv.str2sec;
#X text 175 1265 converts formatted time to float value in seconds;
#X obj 20 1292 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1333 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1344 data.dict;
#X text 175 1344 dictionary container: store values by key;
#X obj 30 1371 data.fifo;
#X text 175 1371 First-In-First-Out (FIFO) queue data container;
#X obj 30 1398 data.float;
#X text 175 1398 robust float object;
#X obj 30 1425 data.int;
#X text 175 1425 robust int object;
#X obj 30 1452 data.list;
#X text 175 1452 list container;
#X obj 30 1479 data.mlist;
#X text 175 1479 multidimensional list container;
#X obj 30 1506 data.set;
#X text 175 1506 container that store unique elements;
#X obj 30 1533 data.set2list;
#X text 175 1533 converts set to list;
#X obj 30 1560 dict.contains;
#X text 175 1560 predicate to check dict contains key;
#X obj 30 1587 dict.get;
#X text 175 1587 on input dict outputs value to corresponding key
outlet;
#X obj 30 1614 dict.keys;
#X text 175 1614 get list of dict keys;
#X obj 30 1641 dict.size;
#X text 175 1641 dictionary size;
#X obj 30 1668 dict.values;
#X text 175 1668 dictionary values as mlist;
#X obj 30 1695 mlist.flatten;
#X text 175 1695 flatten nested mlist;
#X obj 30 1722 set.contains;
#X text 175 1722 check if specified element is in set;
#X obj 30 1749 set.diff;
#X text 175 1749 difference between two sets;
#X obj 30 1776 set.equal;
#X text 175 1776 checks if two sets are equal (contains same
elements);
#X obj 30 1803 set.intersect;
#X text 175 1803 output intersection of given sets;
#X obj 30 1830 set.size;
#X text 175 1830 get number of elements in set;
#X obj 30 1857 set.symdiff;
#X text 175 1857 symmetric difference between two sets;
#X obj 30 1884 set.union;
#X text 175 1884 output union of given sets;
#X obj 20 1911 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1952 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1963 dyn.comp2~;
#X text 175 1963 stereo dynamic range compressor;
#X obj 30 1990 dyn.comp~;
#X text 175 1990 mono dynamic range compressors;
#X obj 30 2017 dyn.gate2~;
#X text 175 2017 stereo signal gate;
#X obj 30 2044 dyn.gate~;
#X text 175 2044 mono signal gate;
#X obj 30 2071 dyn.limit2~;
#X text 175 2071 stereo 1176LN Peak Limiter;
#X obj 30 2098 dyn.limit~;
#X text 175 2098 mono 1176LN Peak Limiter;
#X obj 30 2125 dyn.softclip~;
#X text 175 2125 soft signal clip;
#X obj 20 2152 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2204 env.adsr~;
#X text 175 2204 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2231 env.ar~;
#X text 175 2231 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 2268 env.asr~;
#X text 175 2268 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 2295 env.concat;
#X text 175 2295 Envelope concatenation;
#X obj 30 2322 env.follow~;
#X text 175 2322 Envelope follower with independent attack and release
times.;
#X obj 30 2359 env.mix;
#X text 175 2359 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2396 env.smooth~;
#X text 175 2396 An envelope with an exponential attack and release;
#X obj 30 2423 env.tscale;
#X text 175 2423 Envelope time-scale;
#X obj 30 2450 env.tshift;
#X text 175 2450 Envelope time-shift (horizontal);
#X obj 30 2477 env.vscale;
#X text 175 2477 Envelope value-scale;
#X obj 30 2504 env2array;
#X text 175 2504 Renders envelope to specified array;
#X obj 30 2531 env2vline;
#X text 175 2531 Converts envelope to bunch of vline messages;
#X obj 30 2558 envelope;
#X text 175 2558 Envelope data type;
#X obj 30 2585 vline2env;
#X text 175 2585 Converts vline messages to env;
#X obj 20 2612 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2653 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2664 expand_env;
#X text 175 2664 Substitute enviroment variables in data stream;
#X obj 30 2691 flow.append;
#X text 175 2691 inject message into flow;
#X obj 30 2718 flow.change;
#X text 175 2718 rejects redundant input values;
#X obj 30 2745 flow.count;
#X text 175 2745 control flow event counter;
#X obj 30 2772 flow.demultiplex;
#X text 175 2772 control flow demultiplexer;
#X obj 30 2799 flow.demultiplex2~;
#X text 175 2799 audio stream stereo demultiplexer;
#X obj 30 2826 flow.demultiplex~;
#X text 175 2826 audio stream demultiplexer;
#X obj 30 2853 flow.gate;
#X text 175 2853 control flow gate. [spigot] analog;
#X obj 30 2880 flow.group;
#X text 175 2880 group data atoms in list of specified size;
#X obj 30 2907 flow.interval;
#X text 175 2907 measure time between flow events;
#X obj 30 2934 flow.less;
#X text 175 2934 numeric stream router \, like many [moses];
#X obj 30 2961 flow.less_eq;
#X text 175 2961 numeric stream router \, like many [moses];
#X obj 30 2988 flow.multiplex;
#X text 175 2988 control flow multiplexer;
#X obj 30 3015 flow.multiplex2~;
#X text 175 3015 audio stream stereo multiplexer;
#X obj 30 3042 flow.multiplex~;
#X text 175 3042 audio stream multiplexer;
#X obj 30 3069 flow.once;
#X text 175 3069 one message pass thru;
#X obj 30 3096 flow.pass;
#X text 175 3096 pass specified values;
#X obj 30 3123 flow.pass_if;
#X text 175 3123 pass values that accepted by predicate object;
#X obj 30 3150 flow.reject;
#X text 175 3150 reject specified values;
#X obj 30 3177 flow.reject_if;
#X text 175 3177 reject values by predicate;
#X obj 30 3204 flow.route;
#X text 175 3204 advanced message router;
#X obj 30 3231 flow.speedlim;
#X text 175 3231 control stream speed limiter;
#X obj 30 3258 flow.split;
#X text 175 3258 split data flow by external side-chain predicate;
#X obj 30 3285 flow.sync;
#X text 175 3285 bus with only hot inlets;
#X obj 30 3312 flow.tee~;
#X text 175 3312 separate audio and control streams;
#X obj 30 3339 replace;
#X text 175 3339 Replace atoms in data stream;
#X obj 20 3366 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3407 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3418 flt.biquad~;
#X text 175 3418 second order IIR filter.;
#X obj 30 3445 flt.bpf12~;
#X text 175 3445 Band-pass filter with 12/db per octave slope;
#X obj 30 3472 flt.bpf24~;
#X text 175 3472 Band-pass filter with 24/db per octave slope;
#X obj 30 3499 flt.c_bpf~;
#X text 175 3499 BPF coefficient calculator for biquad filter;
#X obj 30 3526 flt.c_highshelf~;
#X text 175 3526 Highshelf filter coefficient calculator for biquad;
#X obj 30 3553 flt.c_hpf~;
#X text 175 3553 HPF coefficient calculator for biquad filter;
#X obj 30 3580 flt.c_lowshelf~;
#X text 175 3580 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3607 flt.c_lpf~;
#X text 175 3607 LPF coefficient calculator for biquad filter;
#X obj 30 3634 flt.c_notch~;
#X text 175 3634 Band-reject coefficient calculator for biquad filter;
#X obj 30 3661 flt.c_peak~;
#X text 175 3661 Peaking equalizer calculator for biquad;
#X obj 30 3688 flt.dcblock2~;
#X text 175 3688 stereo DC blocker;
#X obj 30 3715 flt.dcblock~;
#X text 175 3715 mono DC blocker;
#X obj 30 3742 flt.eq_peak_cq~;
#X text 175 3742 constant-Q second order peaking equalizer section;
#X obj 30 3769 flt.eq_peak~;
#X text 175 3769 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3820 flt.highshelf~;
#X text 175 3820 gain boost|cut above some frequency;
#X obj 30 3847 flt.hpf12~;
#X text 175 3847 High-pass filter with 12/db per octave slope;
#X obj 30 3874 flt.hpf24~;
#X text 175 3874 High-pass filter with 24/db per octave slope;
#X obj 30 3901 flt.lowshelf~;
#X text 175 3901 gain boost|cut below some frequency;
#X obj 30 3928 flt.lpf12~;
#X text 175 3928 Low-pass filter with 12/db per octave slope;
#X obj 30 3955 flt.lpf24~;
#X text 175 3955 Low-pass filter with 24/db per octave slope;
#X obj 30 3982 flt.moog_vcf~;
#X text 175 3982 Moog Voltage Controlled Filter;
#X obj 30 4009 flt.notch~;
#X text 175 4009 band-rejection filter;
#X obj 30 4036 flt.resonbp~;
#X text 175 4036 Simple resonant bandpass filter;
#X obj 20 4063 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4104 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4115 fx.distortion~;
#X text 175 4115 cubic nonlinearity distortion;
#X obj 30 4142 fx.drone_box~;
#X text 175 4142 mono sympathetic resonance generator;
#X obj 30 4169 fx.echo~;
#X text 175 4169 simple echo effect;
#X obj 30 4196 fx.flanger~;
#X text 175 4196 mono flanging effect;
#X obj 30 4223 fx.freeverb2~;
#X text 175 4223 freeverb2 - stereo version of freeverb;
#X obj 30 4250 fx.freeverb~;
#X text 175 4250 freeverb - common used open-source reverb;
#X obj 30 4277 fx.freqshift~;
#X text 175 4277 frequency shifter or single-sideband ring modulation;
#X obj 30 4304 fx.greyhole~;
#X text 175 4304 A complex echo-like effect;
#X obj 30 4331 fx.looper~;
#X text 175 4331 One track looper;
#X obj 30 4358 fx.pitchshift~;
#X text 175 4358 simple pitch shifter based on 2 delay lines;
#X obj 30 4385 fx.sdelay~;
#X text 175 4385 smooth delay with a feedback control;
#X obj 30 4412 fx.wahwah~;
#X text 175 4412 digitized CryBaby wah pedal;
#X obj 30 4439 fx.zita_rev1~;
#X text 175 4439 Zita stereo reverb;
#X obj 20 4466 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4507 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4518 global.dict;
#X text 175 4518 global named dict object;
#X obj 30 4545 global.float;
#X text 175 4545 global named float object;
#X obj 30 4572 global.int;
#X text 175 4572 global named integer object;
#X obj 30 4599 global.list;
#X text 175 4599 global named list object;
#X obj 30 4626 global.mlist;
#X text 175 4626 global named mlist object;
#X obj 30 4653 global.set;
#X text 175 4653 global named set object;
#X obj 20 4680 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 4721 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4732 hw.arduino;
#X text 175 4732 Arduino device;
#X obj 20 4759 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4800 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4811 lfo.+pulse~;
#X text 175 4811 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 4838 lfo.+saw~;
#X text 175 4838 Positive unit-amplitude low frequency saw wave;
#X obj 30 4865 lfo.+square~;
#X text 175 4865 Positive low frequency square wave;
#X obj 30 4892 lfo.+tri~;
#X text 175 4892 Positive unit-amplitude low frequency triangle wave;
#X obj 30 4919 lfo.impulse~;
#X text 175 4919 Unit-amplitude low-frequency impulse train;
#X obj 30 4946 lfo.pulse~;
#X text 175 4946 Full-range unit-amplitude low frequency pulse train;
#X obj 30 4973 lfo.saw~;
#X text 175 4973 Full-range unit-amplitude low frequency saw;
#X obj 30 5000 lfo.square~;
#X text 175 5000 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5027 lfo.tri~;
#X text 175 5027 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5054 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5095 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5106 list.^at;
#X text 175 5106 on input index(es) outputs list element(s);
#X obj 30 5133 list.^contains;
#X text 175 5133 on input atom or list checks if specified list
contains it;
#X obj 30 5160 list.^search;
#X text 175 5160 on input atom returns it index in list;
#X obj 30 5187 list.all_of;
#X text 175 5187 checks if all list atoms accepted by predicate;
#X obj 30 5214 list.any_of;
#X text 175 5214 checks if at least one list element is accepted by
predicate;
#X obj 30 5251 list.append;
#X text 175 5251 append atom or list to the end of input list;
#X obj 30 5278 list.apply_to;
#X text 175 5278 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5315 list.at;
#X text 175 5315 on input list outputs element(s) at specified
index(es);
#X obj 30 5342 list.choice;
#X text 175 5342 returns random element from list;
#X obj 30 5369 list.contains;
#X text 175 5369 on input list checks if it contains specified
subsequence;
#X obj 30 5396 list.count;
#X text 175 5396 returns the number of items that equal to specified
value;
#X obj 30 5423 list.count_if;
#X text 175 5423 returns the number of items that satisfy to external
predicate.;
#X obj 30 5460 list.delta;
#X text 175 5460 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5497 list.distribution;
#X text 175 5497 list value distribution;
#X obj 30 5524 list.do;
#X text 175 5524 iterate and modify list contents via side-chain;
#X obj 30 5551 list.each;
#X text 175 5551 maps each list value via external object(s);
#X obj 30 5578 list.enumerate;
#X text 175 5578 enumerates input list;
#X obj 30 5605 list.equal;
#X text 175 5605 checks if given lists are equal;
#X obj 30 5632 list.first;
#X text 175 5632 returns first list element;
#X obj 30 5659 list.gen;
#X text 175 5659 generates list of specified length via external
generator;
#X obj 30 5686 list.histogram;
#X text 175 5686 outputs distribution histogram;
#X obj 30 5713 list.insert;
#X text 175 5713 insert atom or list to the specified position of
input list;
#X obj 30 5740 list.integrator;
#X text 175 5740 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 5777 list.last;
#X text 175 5777 returns last list element;
#X obj 30 5804 list.length;
#X text 175 5804 returns the number of atoms in the list;
#X obj 30 5831 list.max;
#X text 175 5831 returns largest element in the list;
#X obj 30 5858 list.mean;
#X text 175 5858 calculates average of list of floats;
#X obj 30 5885 list.min;
#X text 175 5885 returns smallest element in the list;
#X obj 30 5912 list.none_of;
#X text 175 5912 checks if none of list atoms is accepted by
predicate;
#X obj 30 5939 list.normalize;
#X text 175 5939 normalizes float list values to get their sum = 1.0;
#X obj 30 5966 list.pass_if;
#X text 175 5966 leave only elements accepted by predicate;
#X obj 30 5993 list.prepend;
#X text 175 5993 prepend atom or list before input list;
#X obj 30 6020 list.product;
#X text 175 6020 calculates product of floats in list;
#X obj 30 6047 list.range;
#X text 175 6047 returns list smallest and largest value;
#X obj 30 6074 list.reduce;
#X text 175 6074 apply function of two arguments cumulatively to the
list;
#X obj 30 6101 list.remove;
#X text 175 6101 on input list remove element(s) at specified
positions;
#X obj 30 6128 list.remove_if;
#X text 175 6128 remove elements by predicate;
#X obj 30 6155 list.repack;
#X text 175 6155 repack input list to specified size;
#X obj 30 6182 list.repeat;
#X text 175 6182 creates new list by repeating given list specified
times;
#X obj 30 6209 list.resize;
#X text 175 6209 changes list size;
#X obj 30 6236 list.reverse;
#X text 175 6236 reverses the order of the elements in the list;
#X obj 30 6263 list.rldecode;
#X text 175 6263 Run-length list decoder (RLE);
#X obj 30 6290 list.rlencode;
#X text 175 6290 RLE (run-length encoding) for lists;
#X obj 30 6317 list.rotate;
#X text 175 6317 rotates list;
#X obj 30 6344 list.route;
#X text 175 6344 acts like [route] but for lists;
#X obj 30 6371 list.search;
#X text 175 6371 search specified items in input list;
#X obj 30 6398 list.separate;
#X text 175 6398 sends list elements one by one separately;
#X obj 30 6425 list.seq;
#X text 175 6425 numeric sequence list generator;
#X obj 30 6452 list.set;
#X text 175 6452 on input list set value at specified position;
#X obj 30 6479 list.shift;
#X text 175 6479 shifts the contents of the list with linear
interpolation;
#X obj 30 6506 list.shuffle;
#X text 175 6506 randomly rearranges elements in list;
#X obj 30 6533 list.slice;
#X text 175 6533 extract sublist;
#X obj 30 6560 list.sort;
#X text 175 6560 sorts list values by ascending order;
#X obj 30 6587 list.sort_with;
#X text 175 6587 sort list with user defined side-chain;
#X obj 30 6614 list.split;
#X text 175 6614 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 6651 list.stretch;
#X text 175 6651 stretches list - chenges its size with linear
interpolation.;
#X obj 30 6688 list.sum;
#X text 175 6688 calculates sum of floats in list;
#X obj 30 6715 list.unique;
#X text 175 6715 removes duplicates from input list;
#X obj 30 6742 list.unpack;
#X text 175 6742 unpack list elements to separate outlets;
#X obj 30 6769 list.unzip;
#X text 175 6769 splits list to N lists \, each to separate output;
#X obj 30 6796 list.walk;
#X text 175 6796 Walks thru the list;
#X obj 30 6823 list.zip;
#X text 175 6823 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 6874 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 6915 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6926 live.capture~;
#X text 175 6926 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 6963 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7004 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7015 local.dict;
#X text 175 7015 local named dict object;
#X obj 30 7042 local.float;
#X text 175 7042 canvas-scoped named float variable;
#X obj 30 7069 local.int;
#X text 175 7069 canvas-scoped named integer variable;
#X obj 30 7096 local.list;
#X text 175 7096 local named list object;
#X obj 30 7123 local.mlist;
#X text 175 7123 local named mlist object;
#X obj 30 7150 local.set;
#X text 175 7150 local named set object;
#X obj 20 7177 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7218 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7229 math.abs;
#X text 175 7229 absolute value function;
#X obj 30 7256 math.acos;
#X text 175 7256 arc cosine function;
#X obj 30 7283 math.acosh;
#X text 175 7283 inverse hyperbolic cosine function;
#X obj 30 7310 math.and;
#X text 175 7310 operation AND for multiple arguments;
#X obj 30 7337 math.approx;
#X text 175 7337 check if input value approximately equal to pattern;
#X obj 30 7364 math.asin;
#X text 175 7364 arc sine function;
#X obj 30 7391 math.asinh;
#X text 175 7391 inverse hyperbolic sine function;
#X obj 30 7418 math.atan;
#X text 175 7418 arc tangent function;
#X obj 30 7445 math.atanh;
#X text 175 7445 inverse hyperbolic tangent function;
#X obj 30 7472 math.cbrt;
#X text 175 7472 cube root function;
#X obj 30 7499 math.ceil;
#X text 175 7499 round to smallest integral value not less than input
value;
#X obj 30 7526 math.cos;
#X text 175 7526 cosine function;
#X obj 30 7553 math.cosh;
#X text 175 7553 hyperbolic cosine function;
#X obj 30 7580 math.div;
#X text 175 7580 division (on lists too);
#X obj 30 7607 math.e;
#X text 175 7607 mathematical constant \, base of the natural
logarithm;
#X obj 30 7634 math.exp;
#X text 175 7634 exponential functions;
#X obj 30 7661 math.exp2;
#X text 175 7661 exponential functions;
#X obj 30 7688 math.expr;
#X text 175 7688 dynamic [expr];
#X obj 30 7715 math.floor;
#X text 175 7715 round to largest integral value not greater than x;
#X obj 30 7742 math.gcd;
#X text 175 7742 calculate greatest common divisor;
#X obj 30 7769 math.inf;
#X text 175 7769 infinity value that cannot be represented accurately;
#X obj 30 7796 math.lcm;
#X text 175 7796 calculate least common multiple;
#X obj 30 7823 math.log;
#X text 175 7823 logarithm functions;
#X obj 30 7850 math.log10;
#X text 175 7850 logarithm functions;
#X obj 30 7877 math.log2;
#X text 175 7877 logarithm functions;
#X obj 30 7904 math.mul;
#X text 175 7904 multiplication (on lists too);
#X obj 30 7931 math.nan;
#X text 175 7931 Not a Number \, unrepresentable value;
#X obj 30 7958 math.neg;
#X text 175 7958 negate function;
#X obj 30 7985 math.or;
#X text 175 7985 operation OR for multiple arguments;
#X obj 30 8012 math.pi;
#X text 175 8012 mathematical constant;
#X obj 30 8039 math.polyeval;
#X text 175 8039 evaluates the polynomial described by the
coefficients list;
#X obj 30 8066 math.reciprocal;
#X text 175 8066 calculate reciprocal number;
#X obj 30 8093 math.round;
#X text 175 8093 round to integral value \, regardless of rounding
direction;
#X obj 30 8120 math.round~;
#X text 175 8120 signal round;
#X obj 30 8147 math.sign;
#X text 175 8147 sign function;
#X obj 30 8174 math.sin;
#X text 175 8174 sine function;
#X obj 30 8201 math.sinh;
#X text 175 8201 hyperbolic sine function;
#X obj 30 8228 math.sqrt;
#X text 175 8228 square root function;
#X obj 30 8255 math.squared;
#X text 175 8255 value square;
#X obj 30 8282 math.tan;
#X text 175 8282 tangent function;
#X obj 30 8309 math.tanh;
#X text 175 8309 hyperbolic tangent function;
#X obj 30 8336 math.trunc;
#X text 175 8336 truncate to integer value;
#X obj 20 8363 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8404 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8415 midi.ctl2str;
#X text 175 8415 convert Standard MIDI Controllers number to name;
#X obj 30 8442 midi.event2ctl;
#X text 175 8442 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8469 midi.event2note;
#X text 175 8469 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8496 midi.event2prg;
#X text 175 8496 convert MidiEvent message to midi program change
value;
#X obj 30 8523 midi.file;
#X text 175 8523 standard midi file SMF reader and writer;
#X obj 30 8550 midi.key2str;
#X text 175 8550 convert key number to SPN name according to tonality;
#X obj 30 8577 midi.prg2str;
#X text 175 8577 convert GM Instrument number to name (string or
symbol);
#X obj 30 8604 midi.track;
#X text 175 8604 extract track from MidiFile;
#X obj 20 8631 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 8672 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8683 click~;
#X text 175 8683 Output single impulse on bang;
#X obj 30 8710 fluid~;
#X text 175 8710 FluidSynth SoundFont 2 player;
#X obj 30 8737 modplug~;
#X text 175 8737 MOD file player (using libmodplug);
#X obj 30 8764 speech.flite;
#X text 175 8764 render speech to array;
#X obj 20 8791 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 8832 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8843 msg;
#X text 175 8843 message constructor;
#X obj 30 8870 msg.onload;
#X text 175 8870 send message when patch loads;
#X obj 20 8897 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 8938 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8949 net.host2ip;
#X text 175 8949 returns IP address by DNS name;
#X obj 20 8976 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9017 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9028 noise.crackle~;
#X text 175 9028 sparse noise generator;
#X obj 30 9055 noise.lfreq0~;
#X text 175 9055 sampled/held noise (piecewise constant);
#X obj 30 9082 noise.lfreq~;
#X text 175 9082 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9109 noise.pink~;
#X text 175 9109 Pink noise generator;
#X obj 30 9136 noise.white~;
#X text 175 9136 White noise generator;
#X obj 20 9163 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9204 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9215 osc.blit~;
#X text 175 9215 Bandlimited impulse train oscillator;
#X obj 30 9242 osc.impulse~;
#X text 175 9242 Bandlimited impulse train generator;
#X obj 30 9269 osc.pulse~;
#X text 175 9269 Bandlimited pulse train oscillator;
#X obj 30 9296 osc.saw4~;
#X text 175 9296 Bandlimited sawtooth wave;
#X obj 30 9323 osc.saw~;
#X text 175 9323 Alias-free sawtooth wave;
#X obj 30 9350 osc.sinfb~;
#X text 175 9350 Sine oscilator with feedback;
#X obj 30 9377 osc.sin~;
#X text 175 9377 Sine wave oscillator;
#X obj 30 9404 osc.square~;
#X text 175 9404 Bandlimited square wave oscillator;
#X obj 30 9431 osc.tri~;
#X text 175 9431 Bandlimited triangle wave oscillator;
#X obj 20 9458 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 9499 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9510 canvas.current;
#X text 175 9510 verbose information about current canvas;
#X obj 30 9537 canvas.top;
#X text 175 9537 verbose information about top-level canvas;
#X obj 30 9564 patch.args;
#X text 175 9564 Get patch or subpatch arguments;
#X obj 20 9591 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 9632 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9643 path.basename;
#X text 175 9643 outputs filename portion of pathname;
#X obj 30 9670 path.dirname;
#X text 175 9670 outputs directory portion of pathname;
#X obj 30 9697 path.exists;
#X text 175 9697 checks if given path exists;
#X obj 30 9724 path.lsdir;
#X text 175 9724 list directory contents;
#X obj 20 9751 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 9792 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9803 is_any;
#X text 175 9803 checks if input data has *any* type;
#X obj 30 9830 is_bang;
#X text 175 9830 checks if input data has *bang* type;
#X obj 30 9857 is_data;
#X text 175 9857 checks if input data has *data* type;
#X obj 30 9884 is_even;
#X text 175 9884 checks if input number is even;
#X obj 30 9911 is_file;
#X text 175 9911 checks if file exists and accessible;
#X obj 30 9938 is_float;
#X text 175 9938 checks if input data has *float* type;
#X obj 30 9965 is_list;
#X text 175 9965 checks if input data has *list* type;
#X obj 30 9992 is_odd;
#X text 175 9992 checks if input number is odd;
#X obj 30 10019 is_pointer;
#X text 175 10019 checks if input data has *pointer* type;
#X obj 30 10046 is_symbol;
#X text 175 10046 checks if input data has *symbol* type;
#X obj 20 10073 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10114 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10125 preset.float;
#X text 175 10125 load/store float preset;
#X obj 30 10152 preset.list;
#X text 175 10152 load/store symbol preset;
#X obj 30 10179 preset.storage;
#X text 175 10179 preset storage control;
#X obj 30 10206 preset.symbol;
#X text 175 10206 load/store symbol preset;
#X obj 20 10233 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10274 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10285 prop.get;
#X text 175 10285 Property extractor;
#X obj 30 10312 prop.get~;
#X text 175 10312 Property extractor from sound stream;
#X obj 30 10339 prop.set;
#X text 175 10339 Property injector;
#X obj 20 10366 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 10407 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10418 proto.firmata;
#X text 175 10418 Firmata Arduino protocol support;
#X obj 20 10445 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 10486 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10497 random.discrete;
#X text 175 10497 random weighted integers on interval [0 \, n);
#X obj 30 10524 random.float;
#X text 175 10524 random float generator in specified range;
#X obj 30 10551 random.gauss;
#X text 175 10551 gaussian random distribution;
#X obj 30 10578 random.int;
#X text 175 10578 Random integer generator in specified range;
#X obj 30 10605 random.linear;
#X text 175 10605 random linear distribution;
#X obj 30 10632 random.pw_const;
#X text 175 10632 piecewise constant random distribution;
#X obj 30 10659 random.pw_lin;
#X text 175 10659 piecewise linear random distribution;
#X obj 20 10686 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 10727 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10738 snd.file;
#X text 175 10738 Sound file loader on steroids;
#X obj 20 10765 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 10806 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10817 pan.cos~;
#X text 175 10817 two channel equal power sine/cosine panner;
#X obj 30 10844 pan.linsig~;
#X text 175 10844 two channel linear panner with signal control;
#X obj 30 10871 pan.lin~;
#X text 175 10871 two channel linear panner;
#X obj 30 10898 pan.spread~;
#X text 175 10898 spreads input channels across the stereo field;
#X obj 30 10925 pan.sqrt~;
#X text 175 10925 two channel equal power square root panner;
#X obj 30 10952 spat.pan4~;
#X text 175 10952 GMEM SPAT: 4-outputs spatializer;
#X obj 30 10979 spat.pan8~;
#X text 175 10979 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11006 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11047 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11058 string;
#X text 175 11058 string constructor;
#X obj 30 11085 string.contains;
#X text 175 11085 checks if given string contains specified substring;
#X obj 30 11112 string.ends_with;
#X text 175 11112 checks if given string ends with specified suffix;
#X obj 30 11139 string.equal;
#X text 175 11139 check strings for equality;
#X obj 30 11166 string.format;
#X text 175 11166 formats string like printf.;
#X obj 30 11193 string.join;
#X text 175 11193 joins (concatenates) strings with separator;
#X obj 30 11220 string.length;
#X text 175 11220 number of characters in string (unicode supported);
#X obj 30 11247 string.remove;
#X text 175 11247 remove substring from input string;
#X obj 30 11274 string.replace;
#X text 175 11274 replace from one substring to another in input
string;
#X obj 30 11301 string.split;
#X text 175 11301 split string by separator;
#X obj 30 11328 string.starts_with;
#X text 175 11328 checks if given string starts with specified prefix;
#X obj 30 11355 string.substr;
#X text 175 11355 extract substring from input string;
#X obj 30 11382 string2symbol;
#X text 175 11382 converts string to symbol;
#X obj 20 11409 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 11450 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11461 symbol.equal;
#X text 175 11461 check symbols for equality;
#X obj 30 11488 symbol.length;
#X text 175 11488 number of characters in symbol (unicode supported);
#X obj 30 11515 symbol.num_compare;
#X text 175 11515 numeric symbol compare;
#X obj 20 11542 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 11583 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11594 synth.bee3~;
#X text 175 11594 Hammond-oid organ FM synthesis instrument;
#X obj 30 11621 synth.birds~;
#X text 175 11621 bird singing generator;
#X obj 30 11648 synth.church_bell~;
#X text 175 11648 generic church bell modal model;
#X obj 30 11675 synth.dubdub~;
#X text 175 11675 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 11712 synth.eguitar~;
#X text 175 11712 simple electric guitar model with steel strings;
#X obj 30 11739 synth.fgrain~;
#X text 175 11739 file granulator from STK;
#X obj 30 11766 synth.ks~;
#X text 175 11766 Karplus-Strong string;
#X obj 30 11793 synth.marimba~;
#X text 175 11793 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 11830 synth.rhodey~;
#X text 175 11830 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 11857 synth.risset_arp~;
#X text 175 11857 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 11884 synth.risset_tone~;
#X text 175 11884 Jean Claude Risset's endless glissando;
#X obj 30 11911 synth.shakers~;
#X text 175 11911 various percussion sounds from STK library;
#X obj 30 11938 synth.wurley~;
#X text 175 11938 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 11965 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12006 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12017 system.cursor;
#X text 175 12017 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12054 system.getenv;
#X text 175 12054 Get system environment variables;
#X obj 30 12081 system.hostname;
#X text 175 12081 outputs system hostname;
#X obj 30 12108 system.memsize;
#X text 175 12108 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12145 system.memused;
#X text 175 12145 returns the process physical memory use - current
and peak;
#X obj 30 12172 system.screen_size;
#X text 175 12172 returns current screen size in pixels;
#X obj 30 12199 system.shell;
#X text 175 12199 run external command in separate process;
#X obj 20 12226 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12267 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12278 tl.bang;
#X text 175 12278 Timeline bang (with possible delay);
#X obj 30 12308 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12305 Timeline section;
#X obj 30 12328 tl.timeline;
#X text 175 12328 Timeline - event scheduler;
#X obj 30 12355 tl.toggle;
#X text 175 12355 Timeline bang;
#X obj 30 12382 tl.transport;
#X text 175 12382 Timeline transport control;
#X obj 20 12409 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 12450 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12464 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 12461 array view with cursor and selection;
#X obj 30 12487 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 12484 A bang... that's all;
#X obj 30 12510 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 12507 colorchooser widget;
#X obj 30 12533 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 12530 Display GUI object;
#X obj 30 12556 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 12553 GUI for turning DSP on/off;
#X obj 30 12579 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 12576 envelope editor widget;
#X obj 30 12602 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 12599 UI gain control;
#X obj 30 12625 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 12622 simple icon with button capabilities;
#X obj 30 12648 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 12645 value increment/decrement;
#X obj 30 12671 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 12668 keyboard widget;
#X obj 30 12694 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 12691 knob widget;
#X obj 30 12717 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 12714 simple label widget;
#X obj 30 12740 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 12737 Hyperlink widget;
#X obj 30 12763 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 12760 The matrix of toggles has you.;
#X obj 30 12786 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 12783 Dropdown menu;
#X obj 30 12809 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 12806 Shows peak and rms signal level;
#X obj 30 12832 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 12829 counterpart of the vanilla [nbx];
#X obj 30 12855 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 12852 counterpart of the vanilla [nbx] for signal;
#X obj 30 12878 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 12875 Preset manager;
#X obj 30 12901 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 12898 counterpart of the vanilla radio toggle;
#X obj 30 12924 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 12921 range slider;
#X obj 30 12947 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 12944 Scope GUI object;
#X obj 30 12970 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 12967 counterpart of the vanilla slider;
#X obj 30 12993 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 12990 2D slider widget;
#X obj 30 13016 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 13013 Multiple slider widget;
#X obj 30 13039 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 13036 Spectroscope GUI object;
#X obj 30 13062 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 13059 displays a list of text buttons or text toggles;
#X obj 30 13085 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13082 modern toggle widget;
#X obj 20 13105 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 13146 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13157 vector.distance;
#X text 175 13157 returns euclidean distance between two points;
#X obj 30 13184 vector.dot;
#X text 175 13184 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 13235 vector.length;
#X text 175 13235 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 13272 vector.normalize;
#X text 175 13272 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13299 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13299 version: v0.6 \, license: GPL3;
#X obj 20 13318 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;