#ifndef ceammc_rust_core_h
#define ceammc_rust_core_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>
#include <cstddef>
struct ceammc_rs_mdns;
struct ceammc_rs_mdns_service_info;

enum class ceammc_rs_mdns_rc {
  Ok,
  /// when NULL service pointer given
  NullService,
  ServiceError,
  InvalidString,
  BrowseFailed,
  SetOptionError,
  ServiceNotFound,
};

struct ceammc_rs_mdns_err_cb {
  void *user;
  void (*cb)(void *user, const char *msg);
};

struct ceammc_rs_mdns_srv_cb {
  void *user;
  void (*cb)(void *user, const char *ty, const char *fullname, bool found);
};


extern "C" {

/// create new MDNS service handler
/// @param on_err - error callback
/// @param on_srv - on service found/remove
/// @return pointer to MDNS service or NULL on error
ceammc_rs_mdns *ceammc_rs_mdns_create(ceammc_rs_mdns_err_cb on_err, ceammc_rs_mdns_srv_cb on_srv);

/// enable/disable network interfaces to search for mdns services
/// @param mdns - pointer to mdns struct
/// @param name - network interface name, for example:
///  - '*', 'all' (all network interfaces)
///  - 'ipv4' (all ip v4 interfaces)
///  - 'ipv6' (all ip v6 interfaces)
///  - '127.0.0.1' etc (interface ip address)
///  - 'lo0', 'eth1' (interface name)
///
/// @note '!' can't be added to disable interface, for ex.: '!ipv6'
/// @return mdns_rc::Ok on success or other codes on error
ceammc_rs_mdns_rc ceammc_rs_mdns_enable_iface(ceammc_rs_mdns *mdns, const char *name);

/// free mdns handler
/// @param mdns - pointer to mdns struct created with ceammc_rs_mdns_create()
void ceammc_rs_mdns_free(ceammc_rs_mdns *mdns);

/// unsubscribe from mdns service
/// @param mdns - pointer to mdns
/// @return mdns_rc
ceammc_rs_mdns_rc ceammc_rs_mdns_process_events(ceammc_rs_mdns *mdns, uint64_t timeout_ms);

ceammc_rs_mdns_rc ceammc_rs_mdns_register(ceammc_rs_mdns *mdns,
                                          const char *service,
                                          const char *name,
                                          const char *hostname,
                                          const char *ip,
                                          uint16_t port);

/// converts error code to string
/// @param rc - pointer to mdns struct created with ceammc_rs_mdns_create()
/// @return pointer to error string
const char *ceammc_rs_mdns_strerr(ceammc_rs_mdns_rc rc);

/// subscribe to mdns service events
/// @param mdns - pointer to mdns
/// @param service: mdns service name
/// @return mdns_rc
ceammc_rs_mdns_rc ceammc_rs_mdns_subscribe(ceammc_rs_mdns *mdns, const char *service);

/// unregister MDNS service
/// @param mdns - mdns service handle
/// @param service - mdns service name
/// @param timeout - timeout for unregister
/// @return mdns_rc::Ok on success and other codes or error
ceammc_rs_mdns_rc ceammc_rs_mdns_unregister(ceammc_rs_mdns *mdns,
                                            const char *service,
                                            uint64_t timeout);

/// unsubscribe from mdns service
/// @param mdns - pointer to mdns
/// @param service name
/// @return mdns_rc
ceammc_rs_mdns_rc ceammc_rs_mdns_unsubscribe(ceammc_rs_mdns *mdns, const char *service);

} // extern "C"

#endif // ceammc_rust_core_h
