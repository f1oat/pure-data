#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.seq;
#X text 200 880 metro sequencer;
#X obj 30 907 mix~;
#X text 200 907 multislot signal mixer;
#X obj 30 934 obj.props;
#X text 200 934 property extractor;
#X obj 30 961 radio;
#X text 200 961 float index to outlet values as radio switch;
#X obj 30 988 window;
#X text 200 988 returns window value by given window position;
#X obj 30 1015 xdac~;
#X text 200 1015 dac~ with channel ranges;
#X obj 30 1042 xfade2~;
#X text 200 1042 multi stereo-signal crossfade;
#X obj 30 1069 xfade~;
#X text 200 1069 multi signal crossfade;
#X obj 20 1096 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1137 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1148 array.p2s;
#X text 200 1148 convert array phase [0\..1] to sample position;
#X obj 30 1175 array.s2p;
#X text 200 1175 convert array sample position to relative phase position
[0\..1];
#X obj 30 1215 conv.amp2dbfs;
#X text 200 1215 convert from amplitude to decibel full scale;
#X obj 30 1242 conv.bpm2hz;
#X text 200 1242 converts BPM to frequency in herz;
#X obj 30 1269 conv.bpm2ms;
#X text 200 1269 convert frequency in BPM to period in milliseconds;
#X obj 30 1296 conv.bpm2sec;
#X text 200 1296 convert frequency in BPM to period in seconds;
#X obj 30 1323 conv.car2pol;
#X text 200 1323 convert cartesian coords to polar;
#X obj 30 1350 conv.cc2amp;
#X text 200 1350 convert from MIDI Control Change range;
#X obj 30 1377 conv.dbfs2amp;
#X text 200 1377 convert decibel full scale to amplitude;
#X obj 30 1404 conv.lin2curve;
#X text 200 1404 map linear to exponential range with 0 allowed.;
#X obj 30 1431 conv.lin2exp;
#X text 200 1431 maps linear range to exponential range;
#X obj 30 1458 conv.lin2lin;
#X text 200 1458 convert from one linear range to another;
#X obj 30 1485 conv.list2props;
#X text 200 1485 converts list to series of property messages;
#X obj 30 1512 conv.midi2freq;
#X text 200 1512 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1552 conv.phase2rad;
#X text 200 1552 convert phase value [0-1] to radians;
#X obj 30 1579 conv.phase2rad~;
#X text 200 1579 convert phase value [0-1] to radians;
#X obj 30 1606 conv.pitch2midi;
#X text 200 1606 converts symbol pitch name to MIDI note number;
#X obj 30 1633 conv.pol2car;
#X text 200 1633 convert from polar coordinates to cartesian;
#X obj 30 1660 conv.rad2phase;
#X text 200 1660 convert radians value to phase;
#X obj 30 1687 conv.rad2phase~;
#X text 200 1687 convert radians value to phase;
#X obj 30 1714 conv.samp2sec;
#X text 200 1714 convert samples to time according to samplerate;
#X obj 30 1741 conv.sec2samp;
#X text 200 1741 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1781 conv.sec2str;
#X text 200 1781 converts float time in seconds to formated symbol
(or string);
#X obj 30 1808 conv.str2sec;
#X text 200 1808 converts formatted time to float value in seconds;
#X obj 20 1835 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1876 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1887 data.dict;
#X text 200 1887 dictionary container: store values by key;
#X obj 30 1914 data.fifo;
#X text 200 1914 First-In-First-Out (FIFO) queue data container;
#X obj 30 1941 data.float;
#X text 200 1941 robust float object;
#X obj 30 1968 data.int;
#X text 200 1968 robust int object;
#X obj 30 1995 data.list;
#X text 200 1995 list container;
#X obj 30 2022 data.mlist;
#X text 200 2022 multidimensional list container;
#X obj 30 2049 data.set;
#X text 200 2049 container that store unique elements;
#X obj 30 2076 data.set2list;
#X text 200 2076 converts set to list;
#X obj 30 2103 dict.contains;
#X text 200 2103 predicate to check dict contains key;
#X obj 30 2130 dict.each;
#X text 200 2130 map each value in dict;
#X obj 30 2157 dict.from_list;
#X text 200 2157 creates dictionary from list;
#X obj 30 2184 dict.get;
#X text 200 2184 on input dict outputs value to corresponding key outlet;
#X obj 30 2211 dict.keys;
#X text 200 2211 get list of dict keys;
#X obj 30 2238 dict.pass;
#X text 200 2238 passes specified keys in dict;
#X obj 30 2265 dict.reject;
#X text 200 2265 rejects specified keys from dict;
#X obj 30 2292 dict.size;
#X text 200 2292 dictionary size;
#X obj 30 2319 dict.to_list;
#X text 200 2319 converts dictionary to plain list;
#X obj 30 2346 dict.values;
#X text 200 2346 dictionary values as mlist;
#X obj 30 2373 mlist.flatten;
#X text 200 2373 flatten nested mlist;
#X obj 30 2400 set.contains;
#X text 200 2400 check if specified element is in set;
#X obj 30 2427 set.diff;
#X text 200 2427 difference between two sets;
#X obj 30 2454 set.equal;
#X text 200 2454 checks if two sets are equal (contains same elements);
#X obj 30 2481 set.intersect;
#X text 200 2481 output intersection of given sets;
#X obj 30 2508 set.size;
#X text 200 2508 get number of elements in set;
#X obj 30 2535 set.symdiff;
#X text 200 2535 symmetric difference between two sets;
#X obj 30 2562 set.union;
#X text 200 2562 output union of given sets;
#X obj 20 2589 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2630 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2641 dyn.comp2~;
#X text 200 2641 stereo dynamic range compressor;
#X obj 30 2668 dyn.comp~;
#X text 200 2668 mono dynamic range compressors;
#X obj 30 2695 dyn.gate2~;
#X text 200 2695 stereo signal gate;
#X obj 30 2722 dyn.gate~;
#X text 200 2722 mono signal gate;
#X obj 30 2749 dyn.limit2~;
#X text 200 2749 stereo 1176LN Peak Limiter;
#X obj 30 2776 dyn.limit~;
#X text 200 2776 mono 1176LN Peak Limiter;
#X obj 30 2803 dyn.softclip~;
#X text 200 2803 soft signal clip;
#X obj 20 2830 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2871 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2882 env.adsr~;
#X text 200 2882 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2909 env.ar~;
#X text 200 2909 Attack/Release envelope generator;
#X obj 30 2936 env.asr~;
#X text 200 2936 Attack/Sustain/Release envelope generator;
#X obj 30 2963 env.concat;
#X text 200 2963 Envelope concatenation;
#X obj 30 2990 env.follow~;
#X text 200 2990 Envelope follower with independent attack and release
times;
#X obj 30 3017 env.mix;
#X text 200 3017 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3057 env.smooth~;
#X text 200 3057 An envelope with an exponential attack and release;
#X obj 30 3084 env.tscale;
#X text 200 3084 Envelope time-scale;
#X obj 30 3111 env.tshift;
#X text 200 3111 Envelope time-shift (horizontal);
#X obj 30 3138 env.vscale;
#X text 200 3138 Envelope value-scale;
#X obj 30 3165 env2array;
#X text 200 3165 Renders envelope to specified array;
#X obj 30 3192 env2vline;
#X text 200 3192 Converts envelope to bunch of vline messages;
#X obj 30 3219 envelope;
#X text 200 3219 Envelope data type;
#X obj 30 3246 vline2env;
#X text 200 3246 Converts vline messages to env;
#X obj 20 3273 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3314 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3325 expand_env;
#X text 200 3325 Substitute enviroment variables in data stream;
#X obj 30 3352 flow.append;
#X text 200 3352 inject message into flow;
#X obj 30 3379 flow.change;
#X text 200 3379 rejects redundant input values;
#X obj 30 3406 flow.count;
#X text 200 3406 control flow event counter;
#X obj 30 3433 flow.demultiplex;
#X text 200 3433 control flow demultiplexer;
#X obj 30 3460 flow.demultiplex2~;
#X text 200 3460 audio stream stereo demultiplexer;
#X obj 30 3487 flow.demultiplex~;
#X text 200 3487 audio stream demultiplexer;
#X obj 30 3514 flow.gate;
#X text 200 3514 control flow gate. [spigot] analog;
#X obj 30 3541 flow.group;
#X text 200 3541 group data atoms in list of specified size;
#X obj 30 3568 flow.interval;
#X text 200 3568 measure time between flow events;
#X obj 30 3595 flow.less;
#X text 200 3595 numeric stream router \, like many [moses];
#X obj 30 3622 flow.less_eq;
#X text 200 3622 numeric stream router \, like many [moses];
#X obj 30 3649 flow.match;
#X text 200 3649 route data flow by regexp match;
#X obj 30 3676 flow.multiplex;
#X text 200 3676 control flow multiplexer;
#X obj 30 3703 flow.multiplex2~;
#X text 200 3703 audio stream stereo multiplexer;
#X obj 30 3730 flow.multiplex~;
#X text 200 3730 audio stream multiplexer;
#X obj 30 3757 flow.once;
#X text 200 3757 one message pass thru;
#X obj 30 3784 flow.pack;
#X text 200 3784 flow pack;
#X obj 30 3811 flow.pass;
#X text 200 3811 pass specified values;
#X obj 30 3838 flow.pass_if;
#X text 200 3838 pass values that accepted by predicate object;
#X obj 30 3865 flow.reject;
#X text 200 3865 reject specified values;
#X obj 30 3892 flow.reject_if;
#X text 200 3892 reject values by predicate;
#X obj 30 3919 flow.route;
#X text 200 3919 advanced message router;
#X obj 30 3946 flow.speedlim;
#X text 200 3946 control stream speed limiter;
#X obj 30 3973 flow.split;
#X text 200 3973 split data flow by external side-chain predicate;
#X obj 30 4000 flow.sync;
#X text 200 4000 bus with only hot inlets;
#X obj 30 4027 flow.sync_pack;
#X text 200 4027 flow pack with all hot inlets;
#X obj 30 4054 flow.tee~;
#X text 200 4054 separate audio and control streams;
#X obj 30 4081 replace;
#X text 200 4081 Replace atoms in data stream;
#X obj 20 4108 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4149 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4160 flt.biquad~;
#X text 200 4160 second order IIR filter.;
#X obj 30 4187 flt.bpf12~;
#X text 200 4187 Band-pass filter with 12/db per octave slope;
#X obj 30 4214 flt.bpf24~;
#X text 200 4214 Band-pass filter with 24/db per octave slope;
#X obj 30 4241 flt.c_bpf~;
#X text 200 4241 BPF coefficient calculator for biquad filter;
#X obj 30 4268 flt.c_highshelf~;
#X text 200 4268 Highshelf filter coefficient calculator for biquad;
#X obj 30 4295 flt.c_hpf~;
#X text 200 4295 HPF coefficient calculator for biquad filter;
#X obj 30 4322 flt.c_lowshelf~;
#X text 200 4322 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4349 flt.c_lpf~;
#X text 200 4349 LPF coefficient calculator for biquad filter;
#X obj 30 4376 flt.c_notch~;
#X text 200 4376 Band-reject coefficient calculator for biquad filter;
#X obj 30 4403 flt.c_peak~;
#X text 200 4403 Peaking equalizer calculator for biquad;
#X obj 30 4430 flt.dcblock2~;
#X text 200 4430 stereo DC blocker;
#X obj 30 4457 flt.dcblock~;
#X text 200 4457 mono DC blocker;
#X obj 30 4484 flt.eq10~;
#X text 200 4484 graphic 10 band equalizer;
#X obj 30 4511 flt.eq_peak_cq~;
#X text 200 4511 constant-Q second order peaking equalizer section;
#X obj 30 4538 flt.eq_peak~;
#X text 200 4538 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4593 flt.highshelf~;
#X text 200 4593 gain boost|cut above some frequency;
#X obj 30 4620 flt.hpf12~;
#X text 200 4620 High-pass filter with 12/db per octave slope;
#X obj 30 4647 flt.hpf24~;
#X text 200 4647 High-pass filter with 24/db per octave slope;
#X obj 30 4674 flt.lowshelf~;
#X text 200 4674 gain boost|cut below some frequency;
#X obj 30 4701 flt.lpf12~;
#X text 200 4701 Low-pass filter with 12/db per octave slope;
#X obj 30 4728 flt.lpf24~;
#X text 200 4728 Low-pass filter with 24/db per octave slope;
#X obj 30 4755 flt.median;
#X text 200 4755 Median control flow filter;
#X obj 30 4782 flt.moog_vcf~;
#X text 200 4782 Moog Voltage Controlled Filter;
#X obj 30 4809 flt.notch~;
#X text 200 4809 band-rejection filter;
#X obj 30 4836 flt.resonbp~;
#X text 200 4836 Simple resonant bandpass filter;
#X obj 20 4863 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4904 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4915 fx.bitdown~;
#X text 200 4915 bit downer and downsampler effect;
#X obj 30 4942 fx.chorus~;
#X text 200 4942 Chorus effect;
#X obj 30 4969 fx.distortion1~;
#X text 200 4969 distortion #1 from Guitarix effects set;
#X obj 30 4996 fx.distortion2~;
#X text 200 4996 distortion #2 from Guitarix effects set;
#X obj 30 5023 fx.distortion3~;
#X text 200 5023 simple distortion #3 from Guitarix effects set;
#X obj 30 5050 fx.distortion~;
#X text 200 5050 cubic nonlinearity distortion;
#X obj 30 5077 fx.drive~;
#X text 200 5077 Guitarix drive effect;
#X obj 30 5104 fx.drone_box~;
#X text 200 5104 mono sympathetic resonance generator;
#X obj 30 5131 fx.echo~;
#X text 200 5131 simple echo effect;
#X obj 30 5158 fx.flanger~;
#X text 200 5158 mono flanging effect;
#X obj 30 5185 fx.freeverb2~;
#X text 200 5185 freeverb2 - stereo version of freeverb;
#X obj 30 5212 fx.freeverb~;
#X text 200 5212 freeverb - common used open-source reverb;
#X obj 30 5239 fx.freqshift~;
#X text 200 5239 frequency shifter or single-sideband ring modulation;
#X obj 30 5266 fx.granulator~;
#X text 200 5266 simple input stream granulator;
#X obj 30 5293 fx.greyhole~;
#X text 200 5293 A complex echo-like effect;
#X obj 30 5320 fx.looper~;
#X text 200 5320 One track looper;
#X obj 30 5347 fx.pitchshift~;
#X text 200 5347 simple pitch shifter based on 2 delay lines;
#X obj 30 5374 fx.sdelay~;
#X text 200 5374 smooth delay with a feedback control;
#X obj 30 5401 fx.vocoder~;
#X text 200 5401 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5441 fx.wahwah~;
#X text 200 5441 digitized CryBaby wah pedal;
#X obj 30 5468 fx.zita_rev1~;
#X text 200 5468 Zita stereo reverb;
#X obj 20 5495 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5536 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5547 global.dict;
#X text 200 5547 global named dict object;
#X obj 30 5574 global.float;
#X text 200 5574 global named float object;
#X obj 30 5601 global.int;
#X text 200 5601 global named integer object;
#X obj 30 5628 global.list;
#X text 200 5628 global named list object;
#X obj 30 5655 global.mlist;
#X text 200 5655 global named mlist object;
#X obj 30 5682 global.set;
#X text 200 5682 global named set object;
#X obj 20 5709 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5750 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5761 hw.apple_smc;
#X text 200 5761 query the system management control in Apples;
#X obj 30 5788 hw.apple_sms;
#X text 200 5788 query the sudden motion sensor in Apples;
#X obj 30 5815 hw.arduino;
#X text 200 5815 Arduino device;
#X obj 30 5842 hw.cpu_temp;
#X text 200 5842 get CPU temperature;
#X obj 30 5869 hw.display;
#X text 200 5869 get/set display properties;
#X obj 30 5896 hw.kbd_light;
#X text 200 5896 Get/set keyboard light on some devices;
#X obj 20 5923 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5964 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5975 lfo.+pulse~;
#X text 200 5975 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6002 lfo.+saw~;
#X text 200 6002 Positive unit-amplitude low frequency saw wave;
#X obj 30 6029 lfo.+square~;
#X text 200 6029 Positive low frequency square wave;
#X obj 30 6056 lfo.+tri~;
#X text 200 6056 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6083 lfo.impulse~;
#X text 200 6083 Unit-amplitude low-frequency impulse train;
#X obj 30 6110 lfo.pulse~;
#X text 200 6110 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6137 lfo.saw~;
#X text 200 6137 Full-range unit-amplitude low frequency saw;
#X obj 30 6164 lfo.square~;
#X text 200 6164 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6191 lfo.tri~;
#X text 200 6191 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6218 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6270 list.^at;
#X text 200 6270 on input index(es) outputs list element(s);
#X obj 30 6297 list.^contains;
#X text 200 6297 on input atom or list checks if specified list contains
it;
#X obj 30 6324 list.^search;
#X text 200 6324 on input atom returns it index in list;
#X obj 30 6351 list.all_of;
#X text 200 6351 checks if all list atoms accepted by predicate;
#X obj 30 6378 list.any_of;
#X text 200 6378 checks if at least one list element is accepted by
predicate;
#X obj 30 6405 list.append;
#X text 200 6405 append atom or list to the end of input list;
#X obj 30 6432 list.apply_to;
#X text 200 6432 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6472 list.at;
#X text 200 6472 on input list outputs element(s) at specified index(es);
#X obj 30 6499 list.choice;
#X text 200 6499 returns random element from list;
#X obj 30 6526 list.contains;
#X text 200 6526 on input list checks if it contains specified subsequence;
#X obj 30 6553 list.count;
#X text 200 6553 returns the number of items that equal to specified
value;
#X obj 30 6580 list.count_if;
#X text 200 6580 returns the number of items that satisfy to external
predicate.;
#X obj 30 6620 list.delta;
#X text 200 6620 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6660 list.distribution;
#X text 200 6660 list value distribution;
#X obj 30 6687 list.do;
#X text 200 6687 iterate and modify list contents via side-chain;
#X obj 30 6714 list.each;
#X text 200 6714 maps each list value via external object(s);
#X obj 30 6741 list.enumerate;
#X text 200 6741 enumerates input list;
#X obj 30 6768 list.equal;
#X text 200 6768 checks if given lists are equal;
#X obj 30 6795 list.first;
#X text 200 6795 returns first list element;
#X obj 30 6822 list.gen;
#X text 200 6822 generates list of specified length via external generator;
#X obj 30 6849 list.histogram;
#X text 200 6849 outputs distribution histogram;
#X obj 30 6876 list.insert;
#X text 200 6876 insert atom or list to the specified position of input
list;
#X obj 30 6903 list.integrator;
#X text 200 6903 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 6943 list.last;
#X text 200 6943 returns last list element;
#X obj 30 6970 list.length;
#X text 200 6970 returns the number of atoms in the list;
#X obj 30 6997 list.max;
#X text 200 6997 returns largest element in the list;
#X obj 30 7024 list.mean;
#X text 200 7024 calculates average of list of floats;
#X obj 30 7051 list.min;
#X text 200 7051 returns smallest element in the list;
#X obj 30 7078 list.none_of;
#X text 200 7078 checks if none of list atoms is accepted by predicate;
#X obj 30 7105 list.normalize;
#X text 200 7105 normalizes float list values to get their sum = 1.0;
#X obj 30 7132 list.pass_if;
#X text 200 7132 leave only elements accepted by predicate;
#X obj 30 7159 list.prepend;
#X text 200 7159 prepend atom or list before input list;
#X obj 30 7186 list.product;
#X text 200 7186 calculates product of floats in list;
#X obj 30 7213 list.range;
#X text 200 7213 returns list smallest and largest value;
#X obj 30 7240 list.reduce;
#X text 200 7240 apply function of two arguments cumulatively to the
list;
#X obj 30 7267 list.remove;
#X text 200 7267 on input list remove element(s) at specified positions;
#X obj 30 7294 list.remove_if;
#X text 200 7294 remove elements by predicate;
#X obj 30 7321 list.repack;
#X text 200 7321 repack input list to specified size;
#X obj 30 7348 list.repeat;
#X text 200 7348 creates new list by repeating given list specified
times;
#X obj 30 7375 list.resize;
#X text 200 7375 changes list size;
#X obj 30 7402 list.reverse;
#X text 200 7402 reverses the order of the elements in the list;
#X obj 30 7429 list.rldecode;
#X text 200 7429 Run-length list decoder (RLE);
#X obj 30 7456 list.rlencode;
#X text 200 7456 RLE (run-length encoding) for lists;
#X obj 30 7483 list.rotate;
#X text 200 7483 rotates list;
#X obj 30 7510 list.route;
#X text 200 7510 acts like [route] but for lists;
#X obj 30 7537 list.search;
#X text 200 7537 search specified items in input list;
#X obj 30 7564 list.separate;
#X text 200 7564 sends list elements one by one separately;
#X obj 30 7591 list.seq;
#X text 200 7591 numeric sequence list generator;
#X obj 30 7618 list.set;
#X text 200 7618 on input list set value at specified position;
#X obj 30 7645 list.shift;
#X text 200 7645 shifts the contents of the list with linear interpolation;
#X obj 30 7672 list.shuffle;
#X text 200 7672 randomly rearranges elements in list;
#X obj 30 7699 list.slice;
#X text 200 7699 extract sublist;
#X obj 30 7726 list.sort;
#X text 200 7726 sorts list values by ascending order;
#X obj 30 7753 list.sort_with;
#X text 200 7753 sort list with user defined side-chain;
#X obj 30 7780 list.split;
#X text 200 7780 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7820 list.stretch;
#X text 200 7820 stretches list - chenges its size with linear interpolation.;
#X obj 30 7847 list.sum;
#X text 200 7847 calculates sum of floats in list;
#X obj 30 7874 list.unique;
#X text 200 7874 removes duplicates from input list;
#X obj 30 7901 list.unpack;
#X text 200 7901 unpack list elements to separate outlets;
#X obj 30 7928 list.unzip;
#X text 200 7928 splits list to N lists \, each to separate output;
#X obj 30 7955 list.walk;
#X text 200 7955 Walks thru the list;
#X obj 30 7982 list.zip;
#X text 200 7982 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8037 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8078 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8089 live.capture~;
#X text 200 8089 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8129 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8170 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8181 local.dict;
#X text 200 8181 local named dict object;
#X obj 30 8208 local.float;
#X text 200 8208 canvas-scoped named float variable;
#X obj 30 8235 local.int;
#X text 200 8235 canvas-scoped named integer variable;
#X obj 30 8262 local.list;
#X text 200 8262 local named list object;
#X obj 30 8289 local.mlist;
#X text 200 8289 local named mlist object;
#X obj 30 8316 local.set;
#X text 200 8316 local named set object;
#X obj 20 8343 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8384 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8395 math.abs;
#X text 200 8395 absolute value function;
#X obj 30 8422 math.acos;
#X text 200 8422 arc cosine function;
#X obj 30 8449 math.acosh;
#X text 200 8449 inverse hyperbolic cosine function;
#X obj 30 8476 math.and;
#X text 200 8476 operation AND for multiple arguments;
#X obj 30 8503 math.approx;
#X text 200 8503 check if input value approximately equal to pattern;
#X obj 30 8530 math.asin;
#X text 200 8530 arc sine function;
#X obj 30 8557 math.asinh;
#X text 200 8557 inverse hyperbolic sine function;
#X obj 30 8584 math.atan;
#X text 200 8584 arc tangent function;
#X obj 30 8611 math.atanh;
#X text 200 8611 inverse hyperbolic tangent function;
#X obj 30 8638 math.cbrt;
#X text 200 8638 cube root function;
#X obj 30 8665 math.cdiv~;
#X text 200 8665 division of complex signals;
#X obj 30 8692 math.ceil;
#X text 200 8692 round to smallest integral value not less than input
value;
#X obj 30 8719 math.cmul~;
#X text 200 8719 multiplication of complex signals;
#X obj 30 8746 math.cos;
#X text 200 8746 cosine function;
#X obj 30 8773 math.cosh;
#X text 200 8773 hyperbolic cosine function;
#X obj 30 8800 math.div;
#X text 200 8800 division (on lists too);
#X obj 30 8827 math.e;
#X text 200 8827 mathematical constant \, base of the natural logarithm;
#X obj 30 8854 math.exp;
#X text 200 8854 exponential functions;
#X obj 30 8881 math.exp2;
#X text 200 8881 exponential functions;
#X obj 30 8908 math.expr;
#X text 200 8908 dynamic [expr];
#X obj 30 8935 math.floor;
#X text 200 8935 round to largest integral value not greater than x;
#X obj 30 8962 math.gcd;
#X text 200 8962 calculate greatest common divisor;
#X obj 30 8989 math.inf;
#X text 200 8989 infinity value that cannot be represented accurately;
#X obj 30 9016 math.lcm;
#X text 200 9016 calculate least common multiple;
#X obj 30 9043 math.log;
#X text 200 9043 logarithm functions;
#X obj 30 9070 math.log10;
#X text 200 9070 logarithm functions;
#X obj 30 9097 math.log2;
#X text 200 9097 logarithm functions;
#X obj 30 9124 math.mul;
#X text 200 9124 multiplication (on lists too);
#X obj 30 9151 math.nan;
#X text 200 9151 Not a Number \, unrepresentable value;
#X obj 30 9178 math.neg;
#X text 200 9178 negate function;
#X obj 30 9205 math.or;
#X text 200 9205 operation OR for multiple arguments;
#X obj 30 9232 math.pi;
#X text 200 9232 mathematical constant;
#X obj 30 9259 math.polyeval;
#X text 200 9259 evaluates the polynomial described by the coefficients
list;
#X obj 30 9286 math.reciprocal;
#X text 200 9286 calculate reciprocal number;
#X obj 30 9313 math.round;
#X text 200 9313 round to integral value \, regardless of rounding
direction;
#X obj 30 9340 math.round~;
#X text 200 9340 signal round;
#X obj 30 9367 math.sign;
#X text 200 9367 sign function;
#X obj 30 9394 math.sin;
#X text 200 9394 sine function;
#X obj 30 9421 math.sinh;
#X text 200 9421 hyperbolic sine function;
#X obj 30 9448 math.sqrt;
#X text 200 9448 square root function;
#X obj 30 9475 math.squared;
#X text 200 9475 value square;
#X obj 30 9502 math.sync_add;
#X text 200 9502 sync addition;
#X obj 30 9529 math.sync_and;
#X text 200 9529 sync logical AND operation;
#X obj 30 9556 math.sync_div;
#X text 200 9556 sync division;
#X obj 30 9583 math.sync_eq;
#X text 200 9583 sync equal numbers check;
#X obj 30 9610 math.sync_ge;
#X text 200 9610 sync greater equal numbers compare;
#X obj 30 9637 math.sync_gt;
#X text 200 9637 sync greater then numbers compare;
#X obj 30 9664 math.sync_le;
#X text 200 9664 sync less equal numbers compare;
#X obj 30 9691 math.sync_lt;
#X text 200 9691 sync less then numbers compare;
#X obj 30 9718 math.sync_mod;
#X text 200 9718 sync remainder of modulo division (float or integer);
#X obj 30 9745 math.sync_mul;
#X text 200 9745 sync multiplication;
#X obj 30 9772 math.sync_ne;
#X text 200 9772 sync numbers for not equality;
#X obj 30 9799 math.sync_or;
#X text 200 9799 sync logical OR operation;
#X obj 30 9826 math.sync_sub;
#X text 200 9826 sync subtraction;
#X obj 30 9853 math.sync_xor;
#X text 200 9853 sync logical XOR operation;
#X obj 30 9880 math.tan;
#X text 200 9880 tangent function;
#X obj 30 9907 math.tanh;
#X text 200 9907 hyperbolic tangent function;
#X obj 30 9934 math.trunc;
#X text 200 9934 truncate to integer value;
#X obj 20 9961 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10002 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10013 midi.ctl2str;
#X text 200 10013 convert Standard MIDI Controllers number to name;
#X obj 30 10040 midi.event2ctl;
#X text 200 10040 convert MidiEvent message to controller channel/value
pair;
#X obj 30 10067 midi.event2note;
#X text 200 10067 convert MidiEvent message to midi note/velocity pair;
#X obj 30 10094 midi.event2prg;
#X text 200 10094 convert MidiEvent message to midi program change
value;
#X obj 30 10121 midi.file;
#X text 200 10121 standard midi file SMF reader and writer;
#X obj 30 10148 midi.key2str;
#X text 200 10148 convert key number to SPN name according to tonality;
#X obj 30 10175 midi.prg2str;
#X text 200 10175 convert GM Instrument number to name (string or symbol);
#X obj 30 10202 midi.track;
#X text 200 10202 extract track from MidiFile;
#X obj 20 10229 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 10270 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10281 click~;
#X text 200 10281 Output single impulse on bang;
#X obj 30 10308 fluid~;
#X text 200 10308 FluidSynth SoundFont 2 player;
#X obj 30 10335 modplug~;
#X text 200 10335 MOD file player (using libmodplug);
#X obj 30 10362 speech.flite;
#X text 200 10362 render speech to array;
#X obj 20 10389 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 10430 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10441 msg;
#X text 200 10441 message constructor;
#X obj 30 10468 msg.after;
#X text 200 10468 send specified message after incoming message;
#X obj 30 10495 msg.onload;
#X text 200 10495 send message when patch loads;
#X obj 20 10522 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 10563 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10574 net.host2ip;
#X text 200 10574 returns IP address by DNS name;
#X obj 20 10601 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 10642 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10653 noise.crackle~;
#X text 200 10653 sparse noise generator;
#X obj 30 10680 noise.lfreq0~;
#X text 200 10680 sampled/held noise (piecewise constant);
#X obj 30 10707 noise.lfreq~;
#X text 200 10707 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10734 noise.pink~;
#X text 200 10734 Pink noise generator;
#X obj 30 10761 noise.white~;
#X text 200 10761 White noise generator;
#X obj 20 10788 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10829 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10840 osc.blit~;
#X text 200 10840 Bandlimited impulse train oscillator;
#X obj 30 10867 osc.impulse~;
#X text 200 10867 Bandlimited impulse train generator;
#X obj 30 10894 osc.pulse~;
#X text 200 10894 Bandlimited pulse train oscillator;
#X obj 30 10921 osc.saw4~;
#X text 200 10921 Bandlimited sawtooth wave;
#X obj 30 10948 osc.saw~;
#X text 200 10948 Alias-free sawtooth wave;
#X obj 30 10975 osc.sinfb~;
#X text 200 10975 Sine oscilator with feedback;
#X obj 30 11002 osc.sin~;
#X text 200 11002 Sine wave oscillator;
#X obj 30 11029 osc.square~;
#X text 200 11029 Bandlimited square wave oscillator;
#X obj 30 11056 osc.tri~;
#X text 200 11056 Bandlimited triangle wave oscillator;
#X obj 20 11083 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 11124 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11135 canvas.current;
#X text 200 11135 verbose information about current canvas;
#X obj 30 11162 canvas.dir;
#X text 200 11162 current canvas directory;
#X obj 30 11189 canvas.name;
#X text 200 11189 current canvas name;
#X obj 30 11216 canvas.path;
#X text 200 11216 current canvas fullpath;
#X obj 30 11243 canvas.top;
#X text 200 11243 verbose information about top-level canvas;
#X obj 30 11270 patch.args;
#X text 200 11270 Get patch or subpatch arguments;
#X obj 20 11297 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 11338 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11349 path.basename;
#X text 200 11349 outputs filename portion of pathname;
#X obj 30 11376 path.dirname;
#X text 200 11376 outputs directory portion of pathname;
#X obj 30 11403 path.exists;
#X text 200 11403 checks if given path exists;
#X obj 30 11430 path.lsdir;
#X text 200 11430 list directory contents;
#X obj 20 11457 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 11498 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11509 is_any;
#X text 200 11509 checks if input data has *any* type;
#X obj 30 11536 is_bang;
#X text 200 11536 checks if input data has *bang* type;
#X obj 30 11563 is_data;
#X text 200 11563 checks if input data has *data* type;
#X obj 30 11590 is_dict;
#X text 200 11590 checks if input data has *dict* type;
#X obj 30 11617 is_even;
#X text 200 11617 checks if input number is even;
#X obj 30 11644 is_file;
#X text 200 11644 checks if file exists and accessible;
#X obj 30 11671 is_float;
#X text 200 11671 checks if input data has *float* type;
#X obj 30 11698 is_list;
#X text 200 11698 checks if input data has *list* type;
#X obj 30 11725 is_odd;
#X text 200 11725 checks if input number is odd;
#X obj 30 11752 is_pointer;
#X text 200 11752 checks if input data has *pointer* type;
#X obj 30 11779 is_symbol;
#X text 200 11779 checks if input data has *symbol* type;
#X obj 20 11806 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11847 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11858 preset.float;
#X text 200 11858 load/store float preset;
#X obj 30 11885 preset.list;
#X text 200 11885 load/store symbol preset;
#X obj 30 11912 preset.storage;
#X text 200 11912 preset storage control;
#X obj 30 11939 preset.symbol;
#X text 200 11939 load/store symbol preset;
#X obj 20 11966 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12007 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12018 patch.props;
#X text 200 12018 patch properties manager;
#X obj 30 12045 prop;
#X text 200 12045 get/set named property value for subpatch or abstraction;
#X obj 30 12072 prop.declare;
#X text 200 12072 declare named property for subpatch or abstraction;
#X obj 30 12099 prop.get;
#X text 200 12099 Property extractor;
#X obj 30 12126 prop.get~;
#X text 200 12126 Property extractor from sound stream;
#X obj 30 12153 prop.set;
#X text 200 12153 Property injector;
#X obj 20 12180 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 12221 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12232 proto.firmata;
#X text 200 12232 Firmata Arduino protocol support;
#X obj 30 12259 proto.sp.alpaca;
#X text 200 12259 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 12286 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 12327 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12338 random.discrete;
#X text 200 12338 random weighted integers on interval [0 \, n);
#X obj 30 12365 random.float;
#X text 200 12365 random float generator in specified range;
#X obj 30 12392 random.gauss;
#X text 200 12392 gaussian random distribution;
#X obj 30 12419 random.int;
#X text 200 12419 Random integer generator in specified range;
#X obj 30 12446 random.linear;
#X text 200 12446 random linear distribution;
#X obj 30 12473 random.pw_const;
#X text 200 12473 piecewise constant random distribution;
#X obj 30 12500 random.pw_lin;
#X text 200 12500 piecewise linear random distribution;
#X obj 20 12527 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 12568 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12579 snd.file;
#X text 200 12579 Sound file loader on steroids;
#X obj 20 12606 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 12647 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12658 hoa.2d.decoder~;
#X text 200 12658 hoa 2d decoder;
#X obj 30 12685 hoa.2d.encoder~;
#X text 200 12685 hoa 2d encoder;
#X obj 30 12712 hoa.2d.map~;
#X text 200 12712 a 2d ambisonic multisource spatializer;
#X obj 30 12739 hoa.2d.optim~;
#X text 200 12739 a 2D ambisonic optimization tool;
#X obj 30 12766 hoa.2d.projector~;
#X text 200 12766 a plane waves decomposer from circular harmonics
domain;
#X obj 30 12793 hoa.2d.recomposer~;
#X text 200 12793 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 12833 hoa.2d.rotate~;
#X text 200 12833 a 2D ambisonic sound field rotation;
#X obj 30 12860 hoa.2d.wider~;
#X text 200 12860 a 2d fractional ambisonic order simulator;
#X obj 30 12887 hoa.@process;
#X text 200 12887 process properties manager for hoa.process~;
#X obj 30 12914 hoa.in;
#X text 200 12914 message inlet for a patcher loaded by hoa.process~;
#X obj 30 12941 hoa.in~;
#X text 200 12941 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 12968 hoa.out;
#X text 200 12968 message outlet for a patcher loaded by hoa.process~;
#X obj 30 12995 hoa.out~;
#X text 200 12995 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13022 hoa.process~;
#X text 200 13022 patcher loader for multichannel processing;
#X obj 30 13052 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 13049 a 2d ambisonic harmonic scope;
#X obj 30 13074 pan.cos~;
#X text 200 13074 two channel equal power sine/cosine panner;
#X obj 30 13101 pan.linsig~;
#X text 200 13101 two channel linear panner with signal control;
#X obj 30 13128 pan.lin~;
#X text 200 13128 two channel linear panner;
#X obj 30 13155 pan.spread~;
#X text 200 13155 spreads input channels across the stereo field;
#X obj 30 13182 pan.sqrt~;
#X text 200 13182 two channel equal power square root panner;
#X obj 30 13209 spat.pan4~;
#X text 200 13209 GMEM SPAT: 4-outputs spatializer;
#X obj 30 13236 spat.pan8~;
#X text 200 13236 GMEM SPAT: 8-outputs spatializer;
#X obj 20 13263 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 13304 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13315 string;
#X text 200 13315 string constructor;
#X obj 30 13342 string.contains;
#X text 200 13342 checks if given string contains specified substring;
#X obj 30 13369 string.ends_with;
#X text 200 13369 checks if given string ends with specified suffix;
#X obj 30 13396 string.equal;
#X text 200 13396 check strings for equality;
#X obj 30 13423 string.format;
#X text 200 13423 formats string like printf.;
#X obj 30 13450 string.join;
#X text 200 13450 joins (concatenates) strings with separator;
#X obj 30 13477 string.length;
#X text 200 13477 number of characters in string (unicode supported);
#X obj 30 13504 string.match;
#X text 200 13504 check if string match regular expression;
#X obj 30 13531 string.remove;
#X text 200 13531 remove substring from input string;
#X obj 30 13558 string.replace;
#X text 200 13558 replace from one substring to another in input string;
#X obj 30 13585 string.split;
#X text 200 13585 split string by separator;
#X obj 30 13612 string.starts_with;
#X text 200 13612 checks if given string starts with specified prefix;
#X obj 30 13639 string.substr;
#X text 200 13639 extract substring from input string;
#X obj 30 13666 string2symbol;
#X text 200 13666 converts string to symbol;
#X obj 20 13693 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 13734 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13745 symbol.equal;
#X text 200 13745 check symbols for equality;
#X obj 30 13772 symbol.length;
#X text 200 13772 number of characters in symbol (unicode supported);
#X obj 30 13799 symbol.num_compare;
#X text 200 13799 numeric symbol compare;
#X obj 20 13826 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 13867 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13878 synth.bee3~;
#X text 200 13878 Hammond-oid organ FM synthesis instrument;
#X obj 30 13905 synth.birds~;
#X text 200 13905 bird singing generator;
#X obj 30 13932 synth.church_bell~;
#X text 200 13932 generic church bell modal model;
#X obj 30 13959 synth.dubdub~;
#X text 200 13959 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 13999 synth.eguitar~;
#X text 200 13999 simple electric guitar model with steel strings;
#X obj 30 14026 synth.fgrain~;
#X text 200 14026 file granulator from STK;
#X obj 30 14053 synth.ks~;
#X text 200 14053 Karplus-Strong string;
#X obj 30 14080 synth.marimba~;
#X text 200 14080 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 14120 synth.rhodey~;
#X text 200 14120 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 14147 synth.risset_arp~;
#X text 200 14147 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 14174 synth.risset_tone~;
#X text 200 14174 Jean Claude Risset's endless glissando;
#X obj 30 14201 synth.shakers~;
#X text 200 14201 various percussion sounds from STK library;
#X obj 30 14228 synth.wurley~;
#X text 200 14228 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 14255 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 14296 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14307 system.colorpanel;
#X text 200 14307 System color panel dialog popup;
#X obj 30 14334 system.cursor;
#X text 200 14334 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 14361 system.getenv;
#X text 200 14361 Get system environment variables;
#X obj 30 14388 system.hostname;
#X text 200 14388 outputs system hostname;
#X obj 30 14415 system.memsize;
#X text 200 14415 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 14455 system.memused;
#X text 200 14455 returns the process physical memory use - current
and peak;
#X obj 30 14482 system.screen_size;
#X text 200 14482 returns current screen size in pixels;
#X obj 30 14509 system.shell;
#X text 200 14509 run external command in separate process;
#X obj 20 14536 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 14577 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14588 tl.bang;
#X text 200 14588 Timeline bang (with possible delay);
#X obj 30 14618 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 14615 Timeline section;
#X obj 30 14640 tl.timeline;
#X text 200 14640 Timeline - event scheduler;
#X obj 30 14667 tl.toggle;
#X text 200 14667 Timeline bang;
#X obj 30 14694 tl.transport;
#X text 200 14694 Timeline transport control;
#X obj 20 14721 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 14762 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14776 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 14773 array view with cursor and selection;
#X obj 30 14801 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 14798 A bang... that's all;
#X obj 30 14826 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 14823 colorchooser widget;
#X obj 30 14851 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 14848 Display GUI object;
#X obj 30 14876 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 14873 GUI for turning DSP on/off;
#X obj 30 14901 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 14898 envelope editor widget;
#X obj 30 14926 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 14923 UI stereo gain control;
#X obj 30 14951 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 14948 UI gain control;
#X obj 30 14976 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 14973 simple icon with button capabilities;
#X obj 30 15001 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 14998 value increment/decrement;
#X obj 30 15026 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 15023 keyboard widget;
#X obj 30 15051 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 15048 knob widget;
#X obj 30 15076 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 15073 simple label widget;
#X obj 30 15101 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 15098 Hyperlink widget;
#X obj 30 15126 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 15123 The matrix of toggles has you.;
#X obj 30 15151 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 15148 Dropdown menu;
#X obj 30 15176 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 15173 Shows peak and rms signal level;
#X obj 30 15201 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 15198 filter mouse events from ui objects;
#X obj 30 15226 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 15223 routes mouse events from ui objects;
#X obj 30 15251 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 15248 counterpart of the vanilla [nbx];
#X obj 30 15276 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 15273 counterpart of the vanilla [nbx] for signal;
#X obj 30 15301 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 15298 2D slider in polar coordinates;
#X obj 30 15326 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 15323 Preset manager;
#X obj 30 15351 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 15348 counterpart of the vanilla radio toggle;
#X obj 30 15376 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 15373 range slider;
#X obj 30 15401 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 15398 Scope GUI object;
#X obj 30 15426 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 15423 counterpart of the vanilla slider;
#X obj 30 15451 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 15448 2D slider widget;
#X obj 30 15476 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 15473 Multiple slider widget;
#X obj 30 15501 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 15498 Spectroscope GUI object;
#X obj 30 15526 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 15523 displays a list of text buttons or text toggles;
#X obj 30 15551 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 15548 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 15573 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 15573 version: v0.8.0 \, license: GPL3;
#X obj 20 15594 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;