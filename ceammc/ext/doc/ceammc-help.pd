#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 an.pitchtrack~;
#X text 175 153 pitch tracker;
#X obj 20 180 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 221 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 array.bpm;
#X text 175 232 BPM calculator;
#X obj 30 259 array.copy;
#X text 175 259 copy samples from one array to another;
#X obj 30 286 array.do;
#X text 175 286 iterate and modify array content via side-chain;
#X obj 30 313 array.each;
#X text 175 313 process each array elements via side-chain;
#X obj 30 340 array.fill;
#X text 175 340 fill array with single value or pattern;
#X obj 30 367 array.minmax;
#X text 175 367 find array min and max element value;
#X obj 30 394 array.set;
#X text 175 394 set array content from list;
#X obj 30 421 array.stretch;
#X text 175 421 array time-stretch \, pitch-shift or rate-change;
#X obj 30 448 array.vplay;
#X text 175 448 simple array player for using with vline~;
#X obj 30 475 array.window;
#X text 175 475 fill array with window;
#X obj 20 502 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 543 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 557 ui.link @title [function] @url function-help.pd;
#X text 175 554 named function;
#X obj 30 577 function.call;
#X text 175 577 call named function;
#X obj 30 604 gain~;
#X text 175 604 multislot signal gain;
#X obj 30 631 matrix~;
#X text 175 631 signal routing matrix;
#X obj 30 658 metro.pattern;
#X text 175 658 metro with rhythmic patterns;
#X obj 30 685 metro.seq;
#X text 175 685 metro sequencer;
#X obj 30 712 mix~;
#X text 175 712 multislot signal mixer;
#X obj 30 739 obj.props;
#X text 175 739 property extractor;
#X obj 30 766 radio;
#X text 175 766 float index to outlet values as radio switch;
#X obj 30 793 window;
#X text 175 793 returns window value by given window position;
#X obj 30 820 xfade2~;
#X text 175 820 multi stereo-signal crossfade;
#X obj 30 847 xfade~;
#X text 175 847 multi signal crossfade;
#X obj 20 874 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 915 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 926 array.p2s;
#X text 175 926 convert array phase [0\..1] to sample position;
#X obj 30 953 array.s2p;
#X text 175 953 convert array sample position to relative phase
position [0\..1];
#X obj 30 990 conv.amp2dbfs;
#X text 175 990 convert from amplitude to decibel full scale;
#X obj 30 1017 conv.bpm2hz;
#X text 175 1017 converts BPM to frequency in herz;
#X obj 30 1044 conv.bpm2ms;
#X text 175 1044 convert frequency in BPM to period in milliseconds;
#X obj 30 1071 conv.bpm2sec;
#X text 175 1071 convert frequency in BPM to period in seconds;
#X obj 30 1098 conv.cc2amp;
#X text 175 1098 convert from MIDI Control Change range;
#X obj 30 1125 conv.dbfs2amp;
#X text 175 1125 convert decibel full scale to amplitude;
#X obj 30 1152 conv.lin2curve;
#X text 175 1152 map linear to exponential range with 0 allowed.;
#X obj 30 1179 conv.lin2exp;
#X text 175 1179 maps linear range to exponential range;
#X obj 30 1206 conv.lin2lin;
#X text 175 1206 convert from one linear range to another;
#X obj 30 1233 conv.list2props;
#X text 175 1233 converts list to series of property messages;
#X obj 30 1260 conv.midi2freq;
#X text 175 1260 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1297 conv.pitch2midi;
#X text 175 1297 converts symbol pitch name to MIDI note number;
#X obj 30 1324 conv.samp2sec;
#X text 175 1324 convert samples to time according to samplerate;
#X obj 30 1351 conv.sec2samp;
#X text 175 1351 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1388 conv.sec2str;
#X text 175 1388 converts float time in seconds to formated symbol (or
string);
#X obj 30 1425 conv.str2sec;
#X text 175 1425 converts formatted time to float value in seconds;
#X obj 20 1452 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1493 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1504 data.dict;
#X text 175 1504 dictionary container: store values by key;
#X obj 30 1531 data.fifo;
#X text 175 1531 First-In-First-Out (FIFO) queue data container;
#X obj 30 1558 data.float;
#X text 175 1558 robust float object;
#X obj 30 1585 data.int;
#X text 175 1585 robust int object;
#X obj 30 1612 data.list;
#X text 175 1612 list container;
#X obj 30 1639 data.mlist;
#X text 175 1639 multidimensional list container;
#X obj 30 1666 data.set;
#X text 175 1666 container that store unique elements;
#X obj 30 1693 data.set2list;
#X text 175 1693 converts set to list;
#X obj 30 1720 dict.contains;
#X text 175 1720 predicate to check dict contains key;
#X obj 30 1747 dict.each;
#X text 175 1747 map each value in dict;
#X obj 30 1774 dict.from_list;
#X text 175 1774 creates dictionary from list;
#X obj 30 1801 dict.get;
#X text 175 1801 on input dict outputs value to corresponding key
outlet;
#X obj 30 1828 dict.keys;
#X text 175 1828 get list of dict keys;
#X obj 30 1855 dict.pass;
#X text 175 1855 passes specified keys in dict;
#X obj 30 1882 dict.reject;
#X text 175 1882 rejects specified keys from dict;
#X obj 30 1909 dict.size;
#X text 175 1909 dictionary size;
#X obj 30 1936 dict.to_list;
#X text 175 1936 converts dictionary to plain list;
#X obj 30 1963 dict.values;
#X text 175 1963 dictionary values as mlist;
#X obj 30 1990 mlist.flatten;
#X text 175 1990 flatten nested mlist;
#X obj 30 2017 set.contains;
#X text 175 2017 check if specified element is in set;
#X obj 30 2044 set.diff;
#X text 175 2044 difference between two sets;
#X obj 30 2071 set.equal;
#X text 175 2071 checks if two sets are equal (contains same
elements);
#X obj 30 2098 set.intersect;
#X text 175 2098 output intersection of given sets;
#X obj 30 2125 set.size;
#X text 175 2125 get number of elements in set;
#X obj 30 2152 set.symdiff;
#X text 175 2152 symmetric difference between two sets;
#X obj 30 2179 set.union;
#X text 175 2179 output union of given sets;
#X obj 20 2206 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2247 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2258 dyn.comp2~;
#X text 175 2258 stereo dynamic range compressor;
#X obj 30 2285 dyn.comp~;
#X text 175 2285 mono dynamic range compressors;
#X obj 30 2312 dyn.gate2~;
#X text 175 2312 stereo signal gate;
#X obj 30 2339 dyn.gate~;
#X text 175 2339 mono signal gate;
#X obj 30 2366 dyn.limit2~;
#X text 175 2366 stereo 1176LN Peak Limiter;
#X obj 30 2393 dyn.limit~;
#X text 175 2393 mono 1176LN Peak Limiter;
#X obj 30 2420 dyn.softclip~;
#X text 175 2420 soft signal clip;
#X obj 20 2447 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2488 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2499 env.adsr~;
#X text 175 2499 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2526 env.ar~;
#X text 175 2526 Attack/Release envelope generator;
#X obj 30 2553 env.asr~;
#X text 175 2553 Attack/Sustain/Release envelope generator;
#X obj 30 2580 env.concat;
#X text 175 2580 Envelope concatenation;
#X obj 30 2607 env.follow~;
#X text 175 2607 Envelope follower with independent attack and release
times;
#X obj 30 2634 env.mix;
#X text 175 2634 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2671 env.smooth~;
#X text 175 2671 An envelope with an exponential attack and release;
#X obj 30 2698 env.tscale;
#X text 175 2698 Envelope time-scale;
#X obj 30 2725 env.tshift;
#X text 175 2725 Envelope time-shift (horizontal);
#X obj 30 2752 env.vscale;
#X text 175 2752 Envelope value-scale;
#X obj 30 2779 env2array;
#X text 175 2779 Renders envelope to specified array;
#X obj 30 2806 env2vline;
#X text 175 2806 Converts envelope to bunch of vline messages;
#X obj 30 2833 envelope;
#X text 175 2833 Envelope data type;
#X obj 30 2860 vline2env;
#X text 175 2860 Converts vline messages to env;
#X obj 20 2887 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2928 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2939 expand_env;
#X text 175 2939 Substitute enviroment variables in data stream;
#X obj 30 2966 flow.append;
#X text 175 2966 inject message into flow;
#X obj 30 2993 flow.change;
#X text 175 2993 rejects redundant input values;
#X obj 30 3020 flow.count;
#X text 175 3020 control flow event counter;
#X obj 30 3047 flow.demultiplex;
#X text 175 3047 control flow demultiplexer;
#X obj 30 3074 flow.demultiplex2~;
#X text 175 3074 audio stream stereo demultiplexer;
#X obj 30 3101 flow.demultiplex~;
#X text 175 3101 audio stream demultiplexer;
#X obj 30 3128 flow.gate;
#X text 175 3128 control flow gate. [spigot] analog;
#X obj 30 3155 flow.group;
#X text 175 3155 group data atoms in list of specified size;
#X obj 30 3182 flow.interval;
#X text 175 3182 measure time between flow events;
#X obj 30 3209 flow.less;
#X text 175 3209 numeric stream router \, like many [moses];
#X obj 30 3236 flow.less_eq;
#X text 175 3236 numeric stream router \, like many [moses];
#X obj 30 3263 flow.multiplex;
#X text 175 3263 control flow multiplexer;
#X obj 30 3290 flow.multiplex2~;
#X text 175 3290 audio stream stereo multiplexer;
#X obj 30 3317 flow.multiplex~;
#X text 175 3317 audio stream multiplexer;
#X obj 30 3344 flow.once;
#X text 175 3344 one message pass thru;
#X obj 30 3371 flow.pass;
#X text 175 3371 pass specified values;
#X obj 30 3398 flow.pass_if;
#X text 175 3398 pass values that accepted by predicate object;
#X obj 30 3425 flow.reject;
#X text 175 3425 reject specified values;
#X obj 30 3452 flow.reject_if;
#X text 175 3452 reject values by predicate;
#X obj 30 3479 flow.route;
#X text 175 3479 advanced message router;
#X obj 30 3506 flow.speedlim;
#X text 175 3506 control stream speed limiter;
#X obj 30 3533 flow.split;
#X text 175 3533 split data flow by external side-chain predicate;
#X obj 30 3560 flow.sync;
#X text 175 3560 bus with only hot inlets;
#X obj 30 3587 flow.tee~;
#X text 175 3587 separate audio and control streams;
#X obj 30 3614 replace;
#X text 175 3614 Replace atoms in data stream;
#X obj 20 3641 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3682 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3693 flt.biquad~;
#X text 175 3693 second order IIR filter.;
#X obj 30 3720 flt.bpf12~;
#X text 175 3720 Band-pass filter with 12/db per octave slope;
#X obj 30 3747 flt.bpf24~;
#X text 175 3747 Band-pass filter with 24/db per octave slope;
#X obj 30 3774 flt.c_bpf~;
#X text 175 3774 BPF coefficient calculator for biquad filter;
#X obj 30 3801 flt.c_highshelf~;
#X text 175 3801 Highshelf filter coefficient calculator for biquad;
#X obj 30 3828 flt.c_hpf~;
#X text 175 3828 HPF coefficient calculator for biquad filter;
#X obj 30 3855 flt.c_lowshelf~;
#X text 175 3855 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3882 flt.c_lpf~;
#X text 175 3882 LPF coefficient calculator for biquad filter;
#X obj 30 3909 flt.c_notch~;
#X text 175 3909 Band-reject coefficient calculator for biquad filter;
#X obj 30 3936 flt.c_peak~;
#X text 175 3936 Peaking equalizer calculator for biquad;
#X obj 30 3963 flt.dcblock2~;
#X text 175 3963 stereo DC blocker;
#X obj 30 3990 flt.dcblock~;
#X text 175 3990 mono DC blocker;
#X obj 30 4017 flt.eq10~;
#X text 175 4017 graphic 10 band equalizer;
#X obj 30 4044 flt.eq_peak_cq~;
#X text 175 4044 constant-Q second order peaking equalizer section;
#X obj 30 4071 flt.eq_peak~;
#X text 175 4071 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 4122 flt.highshelf~;
#X text 175 4122 gain boost|cut above some frequency;
#X obj 30 4149 flt.hpf12~;
#X text 175 4149 High-pass filter with 12/db per octave slope;
#X obj 30 4176 flt.hpf24~;
#X text 175 4176 High-pass filter with 24/db per octave slope;
#X obj 30 4203 flt.lowshelf~;
#X text 175 4203 gain boost|cut below some frequency;
#X obj 30 4230 flt.lpf12~;
#X text 175 4230 Low-pass filter with 12/db per octave slope;
#X obj 30 4257 flt.lpf24~;
#X text 175 4257 Low-pass filter with 24/db per octave slope;
#X obj 30 4284 flt.median;
#X text 175 4284 Median control flow filter;
#X obj 30 4311 flt.moog_vcf~;
#X text 175 4311 Moog Voltage Controlled Filter;
#X obj 30 4338 flt.notch~;
#X text 175 4338 band-rejection filter;
#X obj 30 4365 flt.resonbp~;
#X text 175 4365 Simple resonant bandpass filter;
#X obj 20 4392 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4433 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4444 fx.bitdown~;
#X text 175 4444 bit downer and downsampler effect;
#X obj 30 4471 fx.chorus~;
#X text 175 4471 Chorus effect;
#X obj 30 4498 fx.distortion~;
#X text 175 4498 cubic nonlinearity distortion;
#X obj 30 4525 fx.drive~;
#X text 175 4525 Guitarix drive effect;
#X obj 30 4552 fx.drone_box~;
#X text 175 4552 mono sympathetic resonance generator;
#X obj 30 4579 fx.echo~;
#X text 175 4579 simple echo effect;
#X obj 30 4606 fx.flanger~;
#X text 175 4606 mono flanging effect;
#X obj 30 4633 fx.freeverb2~;
#X text 175 4633 freeverb2 - stereo version of freeverb;
#X obj 30 4660 fx.freeverb~;
#X text 175 4660 freeverb - common used open-source reverb;
#X obj 30 4687 fx.freqshift~;
#X text 175 4687 frequency shifter or single-sideband ring modulation;
#X obj 30 4714 fx.granulator~;
#X text 175 4714 simple input stream granulator;
#X obj 30 4741 fx.greyhole~;
#X text 175 4741 A complex echo-like effect;
#X obj 30 4768 fx.looper~;
#X text 175 4768 One track looper;
#X obj 30 4795 fx.pitchshift~;
#X text 175 4795 simple pitch shifter based on 2 delay lines;
#X obj 30 4822 fx.sdelay~;
#X text 175 4822 smooth delay with a feedback control;
#X obj 30 4849 fx.wahwah~;
#X text 175 4849 digitized CryBaby wah pedal;
#X obj 30 4876 fx.zita_rev1~;
#X text 175 4876 Zita stereo reverb;
#X obj 20 4903 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4944 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4955 global.dict;
#X text 175 4955 global named dict object;
#X obj 30 4982 global.float;
#X text 175 4982 global named float object;
#X obj 30 5009 global.int;
#X text 175 5009 global named integer object;
#X obj 30 5036 global.list;
#X text 175 5036 global named list object;
#X obj 30 5063 global.mlist;
#X text 175 5063 global named mlist object;
#X obj 30 5090 global.set;
#X text 175 5090 global named set object;
#X obj 20 5117 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5158 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5169 hw.arduino;
#X text 175 5169 Arduino device;
#X obj 20 5196 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5237 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5248 lfo.+pulse~;
#X text 175 5248 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5275 lfo.+saw~;
#X text 175 5275 Positive unit-amplitude low frequency saw wave;
#X obj 30 5302 lfo.+square~;
#X text 175 5302 Positive low frequency square wave;
#X obj 30 5329 lfo.+tri~;
#X text 175 5329 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5356 lfo.impulse~;
#X text 175 5356 Unit-amplitude low-frequency impulse train;
#X obj 30 5383 lfo.pulse~;
#X text 175 5383 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5410 lfo.saw~;
#X text 175 5410 Full-range unit-amplitude low frequency saw;
#X obj 30 5437 lfo.square~;
#X text 175 5437 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5464 lfo.tri~;
#X text 175 5464 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5491 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5532 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5543 list.^at;
#X text 175 5543 on input index(es) outputs list element(s);
#X obj 30 5570 list.^contains;
#X text 175 5570 on input atom or list checks if specified list
contains it;
#X obj 30 5597 list.^search;
#X text 175 5597 on input atom returns it index in list;
#X obj 30 5624 list.all_of;
#X text 175 5624 checks if all list atoms accepted by predicate;
#X obj 30 5651 list.any_of;
#X text 175 5651 checks if at least one list element is accepted by
predicate;
#X obj 30 5688 list.append;
#X text 175 5688 append atom or list to the end of input list;
#X obj 30 5715 list.apply_to;
#X text 175 5715 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5752 list.at;
#X text 175 5752 on input list outputs element(s) at specified
index(es);
#X obj 30 5779 list.choice;
#X text 175 5779 returns random element from list;
#X obj 30 5806 list.contains;
#X text 175 5806 on input list checks if it contains specified
subsequence;
#X obj 30 5833 list.count;
#X text 175 5833 returns the number of items that equal to specified
value;
#X obj 30 5860 list.count_if;
#X text 175 5860 returns the number of items that satisfy to external
predicate.;
#X obj 30 5897 list.delta;
#X text 175 5897 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5934 list.distribution;
#X text 175 5934 list value distribution;
#X obj 30 5961 list.do;
#X text 175 5961 iterate and modify list contents via side-chain;
#X obj 30 5988 list.each;
#X text 175 5988 maps each list value via external object(s);
#X obj 30 6015 list.enumerate;
#X text 175 6015 enumerates input list;
#X obj 30 6042 list.equal;
#X text 175 6042 checks if given lists are equal;
#X obj 30 6069 list.first;
#X text 175 6069 returns first list element;
#X obj 30 6096 list.gen;
#X text 175 6096 generates list of specified length via external
generator;
#X obj 30 6123 list.histogram;
#X text 175 6123 outputs distribution histogram;
#X obj 30 6150 list.insert;
#X text 175 6150 insert atom or list to the specified position of
input list;
#X obj 30 6177 list.integrator;
#X text 175 6177 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 6214 list.last;
#X text 175 6214 returns last list element;
#X obj 30 6241 list.length;
#X text 175 6241 returns the number of atoms in the list;
#X obj 30 6268 list.max;
#X text 175 6268 returns largest element in the list;
#X obj 30 6295 list.mean;
#X text 175 6295 calculates average of list of floats;
#X obj 30 6322 list.min;
#X text 175 6322 returns smallest element in the list;
#X obj 30 6349 list.none_of;
#X text 175 6349 checks if none of list atoms is accepted by
predicate;
#X obj 30 6376 list.normalize;
#X text 175 6376 normalizes float list values to get their sum = 1.0;
#X obj 30 6403 list.pass_if;
#X text 175 6403 leave only elements accepted by predicate;
#X obj 30 6430 list.prepend;
#X text 175 6430 prepend atom or list before input list;
#X obj 30 6457 list.product;
#X text 175 6457 calculates product of floats in list;
#X obj 30 6484 list.range;
#X text 175 6484 returns list smallest and largest value;
#X obj 30 6511 list.reduce;
#X text 175 6511 apply function of two arguments cumulatively to the
list;
#X obj 30 6538 list.remove;
#X text 175 6538 on input list remove element(s) at specified
positions;
#X obj 30 6565 list.remove_if;
#X text 175 6565 remove elements by predicate;
#X obj 30 6592 list.repack;
#X text 175 6592 repack input list to specified size;
#X obj 30 6619 list.repeat;
#X text 175 6619 creates new list by repeating given list specified
times;
#X obj 30 6646 list.resize;
#X text 175 6646 changes list size;
#X obj 30 6673 list.reverse;
#X text 175 6673 reverses the order of the elements in the list;
#X obj 30 6700 list.rldecode;
#X text 175 6700 Run-length list decoder (RLE);
#X obj 30 6727 list.rlencode;
#X text 175 6727 RLE (run-length encoding) for lists;
#X obj 30 6754 list.rotate;
#X text 175 6754 rotates list;
#X obj 30 6781 list.route;
#X text 175 6781 acts like [route] but for lists;
#X obj 30 6808 list.search;
#X text 175 6808 search specified items in input list;
#X obj 30 6835 list.separate;
#X text 175 6835 sends list elements one by one separately;
#X obj 30 6862 list.seq;
#X text 175 6862 numeric sequence list generator;
#X obj 30 6889 list.set;
#X text 175 6889 on input list set value at specified position;
#X obj 30 6916 list.shift;
#X text 175 6916 shifts the contents of the list with linear
interpolation;
#X obj 30 6943 list.shuffle;
#X text 175 6943 randomly rearranges elements in list;
#X obj 30 6970 list.slice;
#X text 175 6970 extract sublist;
#X obj 30 6997 list.sort;
#X text 175 6997 sorts list values by ascending order;
#X obj 30 7024 list.sort_with;
#X text 175 7024 sort list with user defined side-chain;
#X obj 30 7051 list.split;
#X text 175 7051 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7088 list.stretch;
#X text 175 7088 stretches list - chenges its size with linear
interpolation.;
#X obj 30 7125 list.sum;
#X text 175 7125 calculates sum of floats in list;
#X obj 30 7152 list.unique;
#X text 175 7152 removes duplicates from input list;
#X obj 30 7179 list.unpack;
#X text 175 7179 unpack list elements to separate outlets;
#X obj 30 7206 list.unzip;
#X text 175 7206 splits list to N lists \, each to separate output;
#X obj 30 7233 list.walk;
#X text 175 7233 Walks thru the list;
#X obj 30 7260 list.zip;
#X text 175 7260 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7311 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7352 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7363 live.capture~;
#X text 175 7363 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7400 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7441 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7452 local.dict;
#X text 175 7452 local named dict object;
#X obj 30 7479 local.float;
#X text 175 7479 canvas-scoped named float variable;
#X obj 30 7506 local.int;
#X text 175 7506 canvas-scoped named integer variable;
#X obj 30 7533 local.list;
#X text 175 7533 local named list object;
#X obj 30 7560 local.mlist;
#X text 175 7560 local named mlist object;
#X obj 30 7587 local.set;
#X text 175 7587 local named set object;
#X obj 20 7614 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7655 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7666 math.abs;
#X text 175 7666 absolute value function;
#X obj 30 7693 math.acos;
#X text 175 7693 arc cosine function;
#X obj 30 7720 math.acosh;
#X text 175 7720 inverse hyperbolic cosine function;
#X obj 30 7747 math.and;
#X text 175 7747 operation AND for multiple arguments;
#X obj 30 7774 math.approx;
#X text 175 7774 check if input value approximately equal to pattern;
#X obj 30 7801 math.asin;
#X text 175 7801 arc sine function;
#X obj 30 7828 math.asinh;
#X text 175 7828 inverse hyperbolic sine function;
#X obj 30 7855 math.atan;
#X text 175 7855 arc tangent function;
#X obj 30 7882 math.atanh;
#X text 175 7882 inverse hyperbolic tangent function;
#X obj 30 7909 math.cbrt;
#X text 175 7909 cube root function;
#X obj 30 7936 math.cdiv~;
#X text 175 7936 division of complex signals;
#X obj 30 7963 math.ceil;
#X text 175 7963 round to smallest integral value not less than input
value;
#X obj 30 7990 math.cmul~;
#X text 175 7990 multiplication of complex signals;
#X obj 30 8017 math.cos;
#X text 175 8017 cosine function;
#X obj 30 8044 math.cosh;
#X text 175 8044 hyperbolic cosine function;
#X obj 30 8071 math.div;
#X text 175 8071 division (on lists too);
#X obj 30 8098 math.e;
#X text 175 8098 mathematical constant \, base of the natural
logarithm;
#X obj 30 8125 math.exp;
#X text 175 8125 exponential functions;
#X obj 30 8152 math.exp2;
#X text 175 8152 exponential functions;
#X obj 30 8179 math.expr;
#X text 175 8179 dynamic [expr];
#X obj 30 8206 math.floor;
#X text 175 8206 round to largest integral value not greater than x;
#X obj 30 8233 math.gcd;
#X text 175 8233 calculate greatest common divisor;
#X obj 30 8260 math.inf;
#X text 175 8260 infinity value that cannot be represented accurately;
#X obj 30 8287 math.lcm;
#X text 175 8287 calculate least common multiple;
#X obj 30 8314 math.log;
#X text 175 8314 logarithm functions;
#X obj 30 8341 math.log10;
#X text 175 8341 logarithm functions;
#X obj 30 8368 math.log2;
#X text 175 8368 logarithm functions;
#X obj 30 8395 math.mul;
#X text 175 8395 multiplication (on lists too);
#X obj 30 8422 math.nan;
#X text 175 8422 Not a Number \, unrepresentable value;
#X obj 30 8449 math.neg;
#X text 175 8449 negate function;
#X obj 30 8476 math.or;
#X text 175 8476 operation OR for multiple arguments;
#X obj 30 8503 math.pi;
#X text 175 8503 mathematical constant;
#X obj 30 8530 math.polyeval;
#X text 175 8530 evaluates the polynomial described by the
coefficients list;
#X obj 30 8557 math.reciprocal;
#X text 175 8557 calculate reciprocal number;
#X obj 30 8584 math.round;
#X text 175 8584 round to integral value \, regardless of rounding
direction;
#X obj 30 8611 math.round~;
#X text 175 8611 signal round;
#X obj 30 8638 math.sign;
#X text 175 8638 sign function;
#X obj 30 8665 math.sin;
#X text 175 8665 sine function;
#X obj 30 8692 math.sinh;
#X text 175 8692 hyperbolic sine function;
#X obj 30 8719 math.sqrt;
#X text 175 8719 square root function;
#X obj 30 8746 math.squared;
#X text 175 8746 value square;
#X obj 30 8773 math.tan;
#X text 175 8773 tangent function;
#X obj 30 8800 math.tanh;
#X text 175 8800 hyperbolic tangent function;
#X obj 30 8827 math.trunc;
#X text 175 8827 truncate to integer value;
#X obj 20 8854 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8895 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8906 midi.ctl2str;
#X text 175 8906 convert Standard MIDI Controllers number to name;
#X obj 30 8933 midi.event2ctl;
#X text 175 8933 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8960 midi.event2note;
#X text 175 8960 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8987 midi.event2prg;
#X text 175 8987 convert MidiEvent message to midi program change
value;
#X obj 30 9014 midi.file;
#X text 175 9014 standard midi file SMF reader and writer;
#X obj 30 9041 midi.key2str;
#X text 175 9041 convert key number to SPN name according to tonality;
#X obj 30 9068 midi.prg2str;
#X text 175 9068 convert GM Instrument number to name (string or
symbol);
#X obj 30 9095 midi.track;
#X text 175 9095 extract track from MidiFile;
#X obj 20 9122 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9163 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9174 click~;
#X text 175 9174 Output single impulse on bang;
#X obj 30 9201 fluid~;
#X text 175 9201 FluidSynth SoundFont 2 player;
#X obj 30 9228 modplug~;
#X text 175 9228 MOD file player (using libmodplug);
#X obj 30 9255 speech.flite;
#X text 175 9255 render speech to array;
#X obj 20 9282 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9323 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9334 msg;
#X text 175 9334 message constructor;
#X obj 30 9361 msg.after;
#X text 175 9361 send specified message after incoming message;
#X obj 30 9388 msg.onload;
#X text 175 9388 send message when patch loads;
#X obj 20 9415 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9456 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9467 net.host2ip;
#X text 175 9467 returns IP address by DNS name;
#X obj 20 9494 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9535 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9546 noise.crackle~;
#X text 175 9546 sparse noise generator;
#X obj 30 9573 noise.lfreq0~;
#X text 175 9573 sampled/held noise (piecewise constant);
#X obj 30 9600 noise.lfreq~;
#X text 175 9600 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9627 noise.pink~;
#X text 175 9627 Pink noise generator;
#X obj 30 9654 noise.white~;
#X text 175 9654 White noise generator;
#X obj 20 9681 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9722 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9733 osc.blit~;
#X text 175 9733 Bandlimited impulse train oscillator;
#X obj 30 9760 osc.impulse~;
#X text 175 9760 Bandlimited impulse train generator;
#X obj 30 9787 osc.pulse~;
#X text 175 9787 Bandlimited pulse train oscillator;
#X obj 30 9814 osc.saw4~;
#X text 175 9814 Bandlimited sawtooth wave;
#X obj 30 9841 osc.saw~;
#X text 175 9841 Alias-free sawtooth wave;
#X obj 30 9868 osc.sinfb~;
#X text 175 9868 Sine oscilator with feedback;
#X obj 30 9895 osc.sin~;
#X text 175 9895 Sine wave oscillator;
#X obj 30 9922 osc.square~;
#X text 175 9922 Bandlimited square wave oscillator;
#X obj 30 9949 osc.tri~;
#X text 175 9949 Bandlimited triangle wave oscillator;
#X obj 20 9976 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10017 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10028 canvas.current;
#X text 175 10028 verbose information about current canvas;
#X obj 30 10055 canvas.top;
#X text 175 10055 verbose information about top-level canvas;
#X obj 30 10082 patch.args;
#X text 175 10082 Get patch or subpatch arguments;
#X obj 20 10109 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10150 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10161 path.basename;
#X text 175 10161 outputs filename portion of pathname;
#X obj 30 10188 path.dirname;
#X text 175 10188 outputs directory portion of pathname;
#X obj 30 10215 path.exists;
#X text 175 10215 checks if given path exists;
#X obj 30 10242 path.lsdir;
#X text 175 10242 list directory contents;
#X obj 20 10269 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10310 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10321 is_any;
#X text 175 10321 checks if input data has *any* type;
#X obj 30 10348 is_bang;
#X text 175 10348 checks if input data has *bang* type;
#X obj 30 10375 is_data;
#X text 175 10375 checks if input data has *data* type;
#X obj 30 10402 is_dict;
#X text 175 10402 checks if input data has *dict* type;
#X obj 30 10429 is_even;
#X text 175 10429 checks if input number is even;
#X obj 30 10456 is_file;
#X text 175 10456 checks if file exists and accessible;
#X obj 30 10483 is_float;
#X text 175 10483 checks if input data has *float* type;
#X obj 30 10510 is_list;
#X text 175 10510 checks if input data has *list* type;
#X obj 30 10537 is_odd;
#X text 175 10537 checks if input number is odd;
#X obj 30 10564 is_pointer;
#X text 175 10564 checks if input data has *pointer* type;
#X obj 30 10591 is_symbol;
#X text 175 10591 checks if input data has *symbol* type;
#X obj 20 10618 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10659 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10670 preset.float;
#X text 175 10670 load/store float preset;
#X obj 30 10697 preset.list;
#X text 175 10697 load/store symbol preset;
#X obj 30 10724 preset.storage;
#X text 175 10724 preset storage control;
#X obj 30 10751 preset.symbol;
#X text 175 10751 load/store symbol preset;
#X obj 20 10778 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10819 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10830 patch.props;
#X text 175 10830 patch properties manager;
#X obj 30 10857 prop;
#X text 175 10857 get/set named property value for subpatch or
abstraction;
#X obj 30 10884 prop.declare;
#X text 175 10884 declare named property for subpatch or abstraction;
#X obj 30 10911 prop.get;
#X text 175 10911 Property extractor;
#X obj 30 10938 prop.get~;
#X text 175 10938 Property extractor from sound stream;
#X obj 30 10965 prop.set;
#X text 175 10965 Property injector;
#X obj 20 10992 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11033 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11044 proto.firmata;
#X text 175 11044 Firmata Arduino protocol support;
#X obj 20 11071 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11112 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11123 random.discrete;
#X text 175 11123 random weighted integers on interval [0 \, n);
#X obj 30 11150 random.float;
#X text 175 11150 random float generator in specified range;
#X obj 30 11177 random.gauss;
#X text 175 11177 gaussian random distribution;
#X obj 30 11204 random.int;
#X text 175 11204 Random integer generator in specified range;
#X obj 30 11231 random.linear;
#X text 175 11231 random linear distribution;
#X obj 30 11258 random.pw_const;
#X text 175 11258 piecewise constant random distribution;
#X obj 30 11285 random.pw_lin;
#X text 175 11285 piecewise linear random distribution;
#X obj 20 11312 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11353 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11364 snd.file;
#X text 175 11364 Sound file loader on steroids;
#X obj 20 11391 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11432 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11443 pan.cos~;
#X text 175 11443 two channel equal power sine/cosine panner;
#X obj 30 11470 pan.linsig~;
#X text 175 11470 two channel linear panner with signal control;
#X obj 30 11497 pan.lin~;
#X text 175 11497 two channel linear panner;
#X obj 30 11524 pan.spread~;
#X text 175 11524 spreads input channels across the stereo field;
#X obj 30 11551 pan.sqrt~;
#X text 175 11551 two channel equal power square root panner;
#X obj 30 11578 spat.pan4~;
#X text 175 11578 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11605 spat.pan8~;
#X text 175 11605 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11632 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11673 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11684 string;
#X text 175 11684 string constructor;
#X obj 30 11711 string.contains;
#X text 175 11711 checks if given string contains specified substring;
#X obj 30 11738 string.ends_with;
#X text 175 11738 checks if given string ends with specified suffix;
#X obj 30 11765 string.equal;
#X text 175 11765 check strings for equality;
#X obj 30 11792 string.format;
#X text 175 11792 formats string like printf.;
#X obj 30 11819 string.join;
#X text 175 11819 joins (concatenates) strings with separator;
#X obj 30 11846 string.length;
#X text 175 11846 number of characters in string (unicode supported);
#X obj 30 11873 string.remove;
#X text 175 11873 remove substring from input string;
#X obj 30 11900 string.replace;
#X text 175 11900 replace from one substring to another in input
string;
#X obj 30 11927 string.split;
#X text 175 11927 split string by separator;
#X obj 30 11954 string.starts_with;
#X text 175 11954 checks if given string starts with specified prefix;
#X obj 30 11981 string.substr;
#X text 175 11981 extract substring from input string;
#X obj 30 12008 string2symbol;
#X text 175 12008 converts string to symbol;
#X obj 20 12035 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12076 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12087 symbol.equal;
#X text 175 12087 check symbols for equality;
#X obj 30 12114 symbol.length;
#X text 175 12114 number of characters in symbol (unicode supported);
#X obj 30 12141 symbol.num_compare;
#X text 175 12141 numeric symbol compare;
#X obj 20 12168 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12209 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12220 synth.bee3~;
#X text 175 12220 Hammond-oid organ FM synthesis instrument;
#X obj 30 12247 synth.birds~;
#X text 175 12247 bird singing generator;
#X obj 30 12274 synth.church_bell~;
#X text 175 12274 generic church bell modal model;
#X obj 30 12301 synth.dubdub~;
#X text 175 12301 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12338 synth.eguitar~;
#X text 175 12338 simple electric guitar model with steel strings;
#X obj 30 12365 synth.fgrain~;
#X text 175 12365 file granulator from STK;
#X obj 30 12392 synth.ks~;
#X text 175 12392 Karplus-Strong string;
#X obj 30 12419 synth.marimba~;
#X text 175 12419 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12456 synth.rhodey~;
#X text 175 12456 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12483 synth.risset_arp~;
#X text 175 12483 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12510 synth.risset_tone~;
#X text 175 12510 Jean Claude Risset's endless glissando;
#X obj 30 12537 synth.shakers~;
#X text 175 12537 various percussion sounds from STK library;
#X obj 30 12564 synth.wurley~;
#X text 175 12564 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12591 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12632 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12643 system.cursor;
#X text 175 12643 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12680 system.getenv;
#X text 175 12680 Get system environment variables;
#X obj 30 12707 system.hostname;
#X text 175 12707 outputs system hostname;
#X obj 30 12734 system.memsize;
#X text 175 12734 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12771 system.memused;
#X text 175 12771 returns the process physical memory use - current
and peak;
#X obj 30 12798 system.screen_size;
#X text 175 12798 returns current screen size in pixels;
#X obj 30 12825 system.shell;
#X text 175 12825 run external command in separate process;
#X obj 20 12852 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12893 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12904 tl.bang;
#X text 175 12904 Timeline bang (with possible delay);
#X obj 30 12934 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12931 Timeline section;
#X obj 30 12954 tl.timeline;
#X text 175 12954 Timeline - event scheduler;
#X obj 30 12981 tl.toggle;
#X text 175 12981 Timeline bang;
#X obj 30 13008 tl.transport;
#X text 175 13008 Timeline transport control;
#X obj 20 13035 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13076 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13090 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 13087 array view with cursor and selection;
#X obj 30 13113 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 13110 A bang... that's all;
#X obj 30 13136 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 13133 colorchooser widget;
#X obj 30 13159 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 13156 Display GUI object;
#X obj 30 13182 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 13179 GUI for turning DSP on/off;
#X obj 30 13205 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 13202 envelope editor widget;
#X obj 30 13228 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 175 13225 UI stereo gain control;
#X obj 30 13251 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 13248 UI gain control;
#X obj 30 13274 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 13271 simple icon with button capabilities;
#X obj 30 13297 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 13294 value increment/decrement;
#X obj 30 13320 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 13317 keyboard widget;
#X obj 30 13343 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 13340 knob widget;
#X obj 30 13366 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 13363 simple label widget;
#X obj 30 13389 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 13386 Hyperlink widget;
#X obj 30 13412 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 13409 The matrix of toggles has you.;
#X obj 30 13435 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 13432 Dropdown menu;
#X obj 30 13458 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 13455 Shows peak and rms signal level;
#X obj 30 13481 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 13478 counterpart of the vanilla [nbx];
#X obj 30 13504 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 13501 counterpart of the vanilla [nbx] for signal;
#X obj 30 13527 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 13524 Preset manager;
#X obj 30 13550 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 13547 counterpart of the vanilla radio toggle;
#X obj 30 13573 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 13570 range slider;
#X obj 30 13596 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 13593 Scope GUI object;
#X obj 30 13619 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 13616 counterpart of the vanilla slider;
#X obj 30 13642 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 13639 2D slider widget;
#X obj 30 13665 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 13662 Multiple slider widget;
#X obj 30 13688 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 13685 Spectroscope GUI object;
#X obj 30 13711 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 13708 displays a list of text buttons or text toggles;
#X obj 30 13734 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13731 modern toggle widget;
#X obj 1 1 cnv 5 695 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13754 cnv 5 695 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13754 version: v0.7 \, license: GPL3;
#X obj 20 13773 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;