// tl_lexer.h generated by reflex 3.0.1 from tl_lexer.l

#ifndef REFLEX_TL_LEXER_H
#define REFLEX_TL_LEXER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::tl::location
#define REFLEX_OPTION_YYSTYPE             ceammc::tl::TlParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc::tl
#define REFLEX_OPTION_bison_cc_parser     TlParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "tl_lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               TlLexer
#define REFLEX_OPTION_namespace           ceammc::tl
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "tl_lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_stack               true
#define REFLEX_OPTION_token_eof           ceammc::tl::TlParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ceammc::tl::TlParser::symbol_type
#define REFLEX_OPTION_yylineno            true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "tl_lexer.l"

    # include <cerrno>
    # include <climits>
    # include <cstdlib>
    # include <string>
    # include "tl_cmd_driver.h"
    # include "tl_parser.hpp"

    /* import the parser's token type into a local typedef */
    using token = ceammc::tl::TlParser::token;

    # define TL_NO_UNISTD_H


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace tl {

class TlLexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  TlLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ceammc::tl::location location(void)
  {
    ceammc::tl::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ceammc::tl::TlParser::symbol_type lex(void);
};

} // namespace ceammc
} // namespace tl

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#endif
