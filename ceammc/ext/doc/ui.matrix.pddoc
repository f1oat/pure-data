<?xml version='1.0' encoding='utf-8'?>
<pddoc xmlns:xi="http://www.w3.org/2001/XInclude" version="1.0">
    <object name="ui.matrix" type="gui">
        <title>ui.matrix</title>
        <meta>
            <authors>
                <author>Pierre Guillot</author>
                <author>Serge Poltavsky</author>
            </authors>
            <description>The matrix of toggles has you.</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category view="link">ui</category>
            <keywords>ui matrix</keywords>
            <since>0.1</since>
            <also>
                <see view="link">ui.radio</see>
                <see view="link">ui.toggle</see>
            </also>
        </meta>
        <info>
            <par>Rectangle matrix of toggles. Note: all matrix operations have following cell
            address format - ROW COL.</par>
            <par>On click outputs message with format [cell ROW COL VALUE(</par>
        </info>
        <arguments>
            <argument name="ROW" type="int" minvalue="1" maxvalue="64">matrix rows</argument>
            <argument name="COL" type="int" minvalue="1" maxvalue="64">matrix columns</argument>
        </arguments>
        <properties>
            <property name="@rows" type="int" minvalue="1" maxvalue="64" default="4">number of
            matrix rows</property>
            <property name="@cols" type="int" minvalue="1" maxvalue="64" default="8">number of
            matrix columns</property>
            <property name="@current_row" type="int" minvalue="-1" default="-1">current row index.
            -1 if not specified. This property is not saved in patch</property>
            <property name="@current_col" type="int" minvalue="-1" default="-1">current column
            index. -1 if not specified. This property is not saved in patch</property>
            <!-- common -->
            <property name="@presetname" type="symbol" default="(null)">preset name for using with
            [ui.preset]</property>
            <property name="@send" type="symbol" default="(null)">send destination</property>
            <property name="@receive" type="symbol" default="(null)">receive source</property>
            <property name="@size" type="list" default="105 53">element size (width, height
            pair)</property>
            <property name="@pinned" type="bool" default="0">pin mode. if 1 - put element to the
            lowest level</property>
            <property name="@active_color" type="list" default="0 0.75 1 1">active color (list of
            red, green, blue values in 0-1 range)</property>
            <property name="@current_color" type="list" default="1 0.75 0 1">current col/row color
            (list of red, green, blue values in 0-1 range)</property>
            <property name="@background_color" type="list" default="0.93 0.93 0.93 1">element
            background color (list of red, green, blue values in 0-1 range)</property>
            <property name="@border_color" type="list" default="0.6 0.6 0.6 1">border color (list
            of red, green, blue values in 0-1 range)</property>
            <!-- font -->
            <property name="@fontsize" type="int" minvalue="4" maxvalue="100" default="11">
            fontsize</property>
            <property name="@fontname" type="symbol" default="Helvetica"
            enum="Courier DejaVu Helvetica Monaco Times">fontname</property>
            <property name="@fontweight" type="symbol" enum="normal bold" default="normal">font
            weight</property>
            <property name="@fontslant" type="symbol" enum="roman italic" default="roman">font
            slant</property>
        </properties>
        <methods>
            <!-- clear -->
            <method name="clear">clears specified preset 
            <param type="int" name="IDX" required="true">preset index</param></method>
            <!-- dump -->
            <method name="dump">dumps all object info to Pd console window.</method>
            <!-- flip -->
            <method name="flip">flips all matrix cells</method>
            <!-- flip R C -->
            <method name="flip R C">flips single cell 
            <param name="R" type="int" minvalue="0" required="true">row index</param>
            <param name="C" type="int" minvalue="0" required="true">column index</param></method>
            <!-- flip col N -->
            <method name="flip col N">flips cells in specified column. 
            <param name="N" type="int" minvalue="0" required="true">column index</param></method>
            <!-- flip row N -->
            <method name="flip row N">flips cells in specified row. 
            <param name="N" type="int" minvalue="0" required="true">row index</param></method>
            <!-- get cell R C -->
            <method name="get cell R C">outputs single cell value as message [cell ROW COL VALUE( 
            <param name="R" type="int" minvalue="0" required="true">row index</param>
            <param name="C" type="int" minvalue="0" required="true">column index</param></method>
            <!-- get cells -->
            <method name="get cells">output all cells as separate messages [cell R C
            VALUE(</method>
            <!-- get col N -->
            <method name="get col N">outputs column cells as message [col N V0 V1...( 
            <param name="N" type="int" minvalue="0" required="true">column index</param></method>
            <!-- get cols -->
            <method name="get cols">output all columns as separate messages [col N V0
            V1...(</method>
            <!-- get list -->
            <method name="get list">output all cell values as list, row by raw. [0 1 1 1
            0...(</method>
            <!-- get row N -->
            <method name="get row N">outputs row cells as message [row N V0 V1...( 
            <param name="N" type="int" minvalue="0" required="true">row index</param></method>
            <!-- get rows -->
            <method name="get rows">output all rows as separate messages [row N V0 V1...(</method>
            <!-- interp -->
            <method name="interp">for this object acts as *load*, no interpolation
            performed</method>
            <!-- load -->
            <method name="load">loads specified preset 
            <param type="int" name="IDX" required="true">preset index</param></method>
            <!-- pos -->
            <method name="pos">set UI element position 
            <param name="X" type="float" required="true">top left x-coord</param>
            <param name="Y" type="float" required="true">top right y-coord</param></method>
            <!-- random -->
            <method name="random">fill matrix random and output</method>
            <!-- read -->
            <method name="read">
                <param type="symbol" name="FNAME">read matrix values from text file (space
                separated). If fname argument is not specified opens file chooser dialog</param>
            </method>
            <!-- reset -->
            <method name="reset">uncheck all matrix cells. No output</method>
            <!-- set col N ... -->
            <method name="set col N ...">set specified column without output 
            <param name="N" type="int" minvalue="0" required="true">column index</param>
            <param name="..." type="list" required="true">cell values (1 - checked, 0 -
            unchecked)</param></method>
            <!-- set list ... -->
            <method name="set list ...">set matrix without output 
            <param name="..." type="list" required="true">cell values (1 - checked, 0 - unchecked),
            row by row</param></method>
            <!-- set row N ... -->
            <method name="set row N ...">set specified row without output 
            <param name="N" type="int" minvalue="0" required="true">row index</param>
            <param name="..." type="list" required="true">cell values (1 - checked, 0 -
            unchecked)</param></method>
            <!-- store -->
            <method name="store">stores specified preset 
            <param type="int" name="IDX" required="true">preset index</param></method>
            <!-- write -->
            <method name="write">
                <param type="symbol" name="FNAME">write matrix values to text file (space
                separated). If fname argument is not specified opens file chooser dialog</param>
            </method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">output all cells. Same as [get cells(</xinfo>
                <xinfo on="list">sets matrix state. Input format: 0 and 1, row by row</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>output</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
          [F]          [F]
[dump(    |            |
|         [get row $1( [get col $1(
| [reset( |            |
| |       | [bang(     | [flip( [get list(
| |       | |          | |      |
| |       | |          | |      |
[ui.matrix                      ]
|
|
|
|
[route cell row col]
|    ^|  ^^|   ^^^|
|     |    |      [ui.d]
|     |    |
|     |    [ui.d]
|     |
|     [ui.d]
|
[ui.d]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
