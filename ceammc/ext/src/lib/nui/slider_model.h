// this is autogenerated file, do not edit!
#ifndef SLIDER_H_
#define SLIDER_H_
// clang-format off

#include "nui/model.h"
#include "nui/style.h"
#include "m_pd.h"

#include <tuple>

namespace ceammc {
namespace ui {

enum SliderDataFields {
    SLIDER_DATA_SIZE,
    SLIDER_DATA_VALUE,
    SLIDER_DATA_MIN,
    SLIDER_DATA_MAX,
    SLIDER_DATA_BORDER_COLOR,
    SLIDER_DATA_FILL_COLOR,
    SLIDER_DATA_KNOB_COLOR,
    SLIDER_DATA_LOG_SCALE,
    SLIDER_DATA_STYLE_IDX,
};

class SliderData
    : public std::tuple<Size, float, float, float, HexColor, HexColor, HexColor, bool, int> {
public:
    SliderData()
        : std::tuple<Size, float, float, float, HexColor, HexColor, HexColor, bool, int>(Size(100, 16), 0, 0, 1, colors::st_border, colors::st_fill, colors::st_active, false, 0) { }

    SliderData(int style)
        : SliderData() {
        setStyle(style);
        loadStyle(style);
    }

    // getters
    Size size() const noexcept { return std::get<SLIDER_DATA_SIZE>(*this); }
    float value() const noexcept { return std::get<SLIDER_DATA_VALUE>(*this); }
    float min() const noexcept { return std::get<SLIDER_DATA_MIN>(*this); }
    float max() const noexcept { return std::get<SLIDER_DATA_MAX>(*this); }
    HexColor borderColor() const noexcept { return std::get<SLIDER_DATA_BORDER_COLOR>(*this); }
    HexColor fillColor() const noexcept { return std::get<SLIDER_DATA_FILL_COLOR>(*this); }
    HexColor knobColor() const noexcept { return std::get<SLIDER_DATA_KNOB_COLOR>(*this); }
    bool logScale() const noexcept { return std::get<SLIDER_DATA_LOG_SCALE>(*this); }
    int style() const noexcept { return std::get<SLIDER_DATA_STYLE_IDX>(*this); }

    // setters
    void setSize(Size v) { std::get<SLIDER_DATA_SIZE>(*this) = v; }
    void setValue(float v) { std::get<SLIDER_DATA_VALUE>(*this) = v; }
    void setMin(float v) { std::get<SLIDER_DATA_MIN>(*this) = v; }
    void setMax(float v) { std::get<SLIDER_DATA_MAX>(*this) = v; }
    void setBorderColor(HexColor v) { std::get<SLIDER_DATA_BORDER_COLOR>(*this) = v; }
    void setFillColor(HexColor v) { std::get<SLIDER_DATA_FILL_COLOR>(*this) = v; }
    void setKnobColor(HexColor v) { std::get<SLIDER_DATA_KNOB_COLOR>(*this) = v; }
    void setLogScale(bool v) { std::get<SLIDER_DATA_LOG_SCALE>(*this) = v; }
    void setStyle(int v) { std::get<SLIDER_DATA_STYLE_IDX>(*this) = v; }

    // style
    void loadStyle(int st) {
        using sc = StyleCollection;
        setSize(sc::size(st, "slider:size"_hash, Size(100, 16)));
        setBorderColor(sc::color(st, "slider:border_color"_hash, colors::st_border));
        setFillColor(sc::color(st, "slider:fill_color"_hash, colors::st_fill));
        setKnobColor(sc::color(st, "slider:knob_color"_hash, colors::st_active));
    }
};

using SliderModel = ModelBase<SliderData>;

}
}

// clang-format on
#endif
