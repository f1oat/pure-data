#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 metro.pattern;
#X text 175 498 metro with rythmic patterns;
#X obj 30 525 metro.seq;
#X text 175 525 metro sequencer;
#X obj 30 552 window;
#X text 175 552 returns window value by given window position;
#X obj 20 579 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 620 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 631 array.p2s;
#X text 175 631 convert array phase [0\..1] to sample position;
#X obj 30 658 array.s2p;
#X text 175 658 convert array sample position to relative phase
position [0\..1];
#X obj 30 695 conv.bpm2hz;
#X text 175 695 converts BPM to frequency in herz;
#X obj 30 722 conv.bpm2ms;
#X text 175 722 convert frequency in BPM to period in milliseconds;
#X obj 30 749 conv.bpm2sec;
#X text 175 749 convert frequency in BPM to period in seconds;
#X obj 30 776 conv.cc2amp;
#X text 175 776 convert from MIDI Control Change range;
#X obj 30 803 conv.lin2curve;
#X text 175 803 map linear to exponential range with 0 allowed.;
#X obj 30 830 conv.lin2exp;
#X text 175 830 maps linear range to exponential range;
#X obj 30 857 conv.lin2lin;
#X text 175 857 convert from one linear range to another;
#X obj 30 884 conv.pitch2midi;
#X text 175 884 converts symbol pitch name to MIDI note number;
#X obj 30 911 conv.samp2sec;
#X text 175 911 convert samples to time according to samplerate;
#X obj 30 938 conv.sec2samp;
#X text 175 938 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 975 conv.sec2str;
#X text 175 975 converts float time in seconds to formated symbol (or
string);
#X obj 30 1012 conv.str2sec;
#X text 175 1012 converts formatted time to float value in seconds;
#X obj 20 1039 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1080 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1091 data.fifo;
#X text 175 1091 First-In-First-Out (FIFO) queue data container;
#X obj 30 1118 data.list;
#X text 175 1118 list container;
#X obj 30 1145 data.set;
#X text 175 1145 container that store unique elements;
#X obj 30 1172 data.set2list;
#X text 175 1172 converts set to list;
#X obj 30 1199 set.contains;
#X text 175 1199 check if specified element is in set;
#X obj 30 1226 set.diff;
#X text 175 1226 difference between two sets;
#X obj 30 1253 set.equal;
#X text 175 1253 checks if two sets are equal (contains same
elements);
#X obj 30 1280 set.intersect;
#X text 175 1280 output intersection of given sets;
#X obj 30 1307 set.size;
#X text 175 1307 get number of elements in set;
#X obj 30 1334 set.symdiff;
#X text 175 1334 symmetric difference between two sets;
#X obj 30 1361 set.union;
#X text 175 1361 output union of given sets;
#X obj 20 1388 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1429 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1440 dyn.comp2~;
#X text 175 1440 stereo dynamic range compressor;
#X obj 30 1467 dyn.comp~;
#X text 175 1467 mono dynamic range compressors;
#X obj 30 1494 dyn.gate2~;
#X text 175 1494 stereo signal gate;
#X obj 30 1521 dyn.gate~;
#X text 175 1521 mono signal gate;
#X obj 30 1548 dyn.limit2~;
#X text 175 1548 stereo 1176LN Peak Limiter;
#X obj 30 1575 dyn.limit~;
#X text 175 1575 mono 1176LN Peak Limiter;
#X obj 30 1602 dyn.softclip~;
#X text 175 1602 soft signal clip;
#X obj 20 1629 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1670 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1681 env.adsr~;
#X text 175 1681 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1708 env.ar~;
#X text 175 1708 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1745 env.asr~;
#X text 175 1745 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 1772 env.concat;
#X text 175 1772 Envelope concatenation;
#X obj 30 1799 env.follow~;
#X text 175 1799 Envelope follower with independent attack and release
times.;
#X obj 30 1836 env.mix;
#X text 175 1836 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 1873 env.tscale;
#X text 175 1873 Envelope time-scale;
#X obj 30 1900 env.tshift;
#X text 175 1900 Envelope time-shift (horizontal);
#X obj 30 1927 env.vscale;
#X text 175 1927 Envelope value-scale;
#X obj 30 1954 env2array;
#X text 175 1954 Renders envelope to specified array;
#X obj 30 1981 env2vline;
#X text 175 1981 Converts envelope to bunch of vline messages;
#X obj 30 2008 envelope;
#X text 175 2008 Envelope data type;
#X obj 20 2035 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2076 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2087 expand_env;
#X text 175 2087 Substitute enviroment variables in data stream;
#X obj 30 2114 flow.change;
#X text 175 2114 rejects redundant input values;
#X obj 30 2141 flow.count;
#X text 175 2141 control flow event counter;
#X obj 30 2168 flow.demultiplex;
#X text 175 2168 control flow demultiplexer;
#X obj 30 2195 flow.gate;
#X text 175 2195 control flow gate. [spigot] analog;
#X obj 30 2222 flow.group;
#X text 175 2222 group data atoms in list of specified size;
#X obj 30 2249 flow.less;
#X text 175 2249 numeric stream router \, like many [moses];
#X obj 30 2276 flow.less_eq;
#X text 175 2276 numeric stream router \, like many [moses];
#X obj 30 2303 flow.multiplex;
#X text 175 2303 control flow multiplexer;
#X obj 30 2330 flow.pass;
#X text 175 2330 pass specified values;
#X obj 30 2357 flow.pass_if;
#X text 175 2357 pass values that accepted by predicate object;
#X obj 30 2384 flow.reject;
#X text 175 2384 reject specified values;
#X obj 30 2411 flow.reject_if;
#X text 175 2411 reject values by predicate;
#X obj 30 2438 flow.speedlim;
#X text 175 2438 control stream speed limitier;
#X obj 30 2465 flow.split;
#X text 175 2465 split data flow by external side-chain predicate;
#X obj 30 2492 flow.sync;
#X text 175 2492 bus with only hot inlets;
#X obj 30 2519 flow.tee~;
#X text 175 2519 separate audio and control streams;
#X obj 30 2546 replace;
#X text 175 2546 Replace atoms in data stream;
#X obj 20 2573 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2614 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2625 flt.biquad~;
#X text 175 2625 second order IIR filter.;
#X obj 30 2652 flt.bpf12~;
#X text 175 2652 Band-pass filter with 12/db per octave slope;
#X obj 30 2679 flt.bpf24~;
#X text 175 2679 Band-pass filter with 24/db per octave slope;
#X obj 30 2706 flt.c_bpf~;
#X text 175 2706 BPF coefficent calculator for biquad filter;
#X obj 30 2733 flt.c_highshelf~;
#X text 175 2733 Highshelf filter coefficent calculator for biquad;
#X obj 30 2760 flt.c_hpf~;
#X text 175 2760 HPF coefficent calculator for biquad filter;
#X obj 30 2787 flt.c_lowshelf~;
#X text 175 2787 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2814 flt.c_lpf~;
#X text 175 2814 LPF coefficent calculator for biquad filter;
#X obj 30 2841 flt.c_notch~;
#X text 175 2841 Band-reject coefficent calculator for biquad filter;
#X obj 30 2868 flt.c_peak~;
#X text 175 2868 Peaking equalizer calculator for biquad.;
#X obj 30 2895 flt.dcblock2~;
#X text 175 2895 stereo DC blocker;
#X obj 30 2922 flt.dcblock~;
#X text 175 2922 mono DC blocker;
#X obj 30 2949 flt.eq_peak~;
#X text 175 2949 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3000 flt.highshelf~;
#X text 175 3000 gain boost|cut above some frequency;
#X obj 30 3027 flt.hpf12~;
#X text 175 3027 High-pass filter with 12/db per octave slope;
#X obj 30 3054 flt.hpf24~;
#X text 175 3054 High-pass filter with 24/db per octave slope;
#X obj 30 3081 flt.lowshelf~;
#X text 175 3081 gain boost|cut below some frequency;
#X obj 30 3108 flt.lpf12~;
#X text 175 3108 Low-pass filter with 12/db per octave slope;
#X obj 30 3135 flt.lpf24~;
#X text 175 3135 Low-pass filter with 24/db per octave slope;
#X obj 30 3162 flt.notch~;
#X text 175 3162 band-rejection filter;
#X obj 30 3189 flt.resonbp~;
#X text 175 3189 Simple resonant bandpass filter;
#X obj 20 3216 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 3257 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3268 fx.distortion~;
#X text 175 3268 cubic nonlinearity distortion;
#X obj 30 3295 fx.flanger~;
#X text 175 3295 mono flanging effect;
#X obj 30 3322 fx.freeverb2~;
#X text 175 3322 freeverb2 - stereo version of freeverb;
#X obj 30 3349 fx.freeverb~;
#X text 175 3349 freeverb - common used open-source reverb;
#X obj 30 3376 fx.freqshift~;
#X text 175 3376 frequency shifter or single-sideband ring modulation;
#X obj 30 3403 fx.greyhole~;
#X text 175 3403 A complex echo-like effect;
#X obj 30 3430 fx.looper~;
#X text 175 3430 One track looper;
#X obj 30 3457 fx.pitchshift~;
#X text 175 3457 simple pitch shifter based on 2 delay lines;
#X obj 30 3484 fx.zita_rev1~;
#X text 175 3484 Zita stereo reverb;
#X obj 20 3511 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3552 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3563 global.float;
#X text 175 3563 global named float object;
#X obj 30 3590 global.int;
#X text 175 3590 global named integer object;
#X obj 30 3617 global.list;
#X text 175 3617 global named list object;
#X obj 20 3644 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3685 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3696 hw.arduino;
#X text 175 3696 Arduino device;
#X obj 20 3723 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3764 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3775 lfo.impulse~;
#X text 175 3775 Unit-amplitude low-frequency impulse train;
#X obj 30 3802 lfo.square~;
#X text 175 3802 Positive low frequence square wave;
#X obj 30 3829 lfo.tri~;
#X text 175 3829 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3856 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3897 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3908 list.all_of;
#X text 175 3908 checks if all list atoms accepted by predicate;
#X obj 30 3935 list.any_of;
#X text 175 3935 checks if at least one list element is accepted by
predicate;
#X obj 30 3972 list.apply_to;
#X text 175 3972 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 4009 list.at;
#X text 175 4009 returns list element(s) at given position(s);
#X obj 30 4036 list.choice;
#X text 175 4036 returns random element from list;
#X obj 30 4063 list.count;
#X text 175 4063 returns the number of items that equal to specified
value;
#X obj 30 4090 list.count_if;
#X text 175 4090 returns the number of items that satisfy to external
predicate.;
#X obj 30 4127 list.deinterleave;
#X text 175 4127 splits list to N lists \, each to separate output;
#X obj 30 4154 list.delta;
#X text 175 4154 returns the difference between the current list of
floats and the previous one.;
#X obj 30 4191 list.distribution;
#X text 175 4191 list value distribution;
#X obj 30 4218 list.do;
#X text 175 4218 iterate and modify list contents via side-chain;
#X obj 30 4245 list.each;
#X text 175 4245 maps each list value via external object(s);
#X obj 30 4272 list.enumerate;
#X text 175 4272 enumerates input list;
#X obj 30 4299 list.equal;
#X text 175 4299 checks if given lists are equal;
#X obj 30 4326 list.first;
#X text 175 4326 returns first list element;
#X obj 30 4353 list.gen;
#X text 175 4353 generates list of specified length via external
generator;
#X obj 30 4380 list.histogram;
#X text 175 4380 outputs distibution histogram;
#X obj 30 4407 list.integrator;
#X text 175 4407 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4444 list.interleave;
#X text 175 4444 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4495 list.last;
#X text 175 4495 returns last list element;
#X obj 30 4522 list.length;
#X text 175 4522 returns the number of atoms in the message;
#X obj 30 4549 list.max;
#X text 175 4549 returns largest element in the list;
#X obj 30 4576 list.mean;
#X text 175 4576 calculates average of list of floats;
#X obj 30 4603 list.min;
#X text 175 4603 returns smallest element in the list;
#X obj 30 4630 list.none_of;
#X text 175 4630 checks if none of list atoms is accepted by
predicate;
#X obj 30 4657 list.normalize;
#X text 175 4657 normalizes float list values to get their sum = 1.0;
#X obj 30 4684 list.pass_if;
#X text 175 4684 leave only elements accepted by predicate;
#X obj 30 4711 list.product;
#X text 175 4711 calculates product of floats in list;
#X obj 30 4738 list.range;
#X text 175 4738 returns list smallest and largest value;
#X obj 30 4765 list.reduce;
#X text 175 4765 apply function of two arguments cumulatively to the
list;
#X obj 30 4792 list.remove_if;
#X text 175 4792 remove elements by predicate;
#X obj 30 4819 list.repack;
#X text 175 4819 repack input list to specified size;
#X obj 30 4846 list.repeat;
#X text 175 4846 creates new list by repeating given list specified
times;
#X obj 30 4873 list.resize;
#X text 175 4873 changes list size;
#X obj 30 4900 list.reverse;
#X text 175 4900 reverses the order of the elements in the list;
#X obj 30 4927 list.rotate;
#X text 175 4927 rotates list left;
#X obj 30 4954 list.route;
#X text 175 4954 acts like [route] but for lists;
#X obj 30 4981 list.separate;
#X text 175 4981 sends list elements one by one separately;
#X obj 30 5008 list.seq;
#X text 175 5008 numeric sequence list generator;
#X obj 30 5035 list.shuffle;
#X text 175 5035 randomly rearranges elements in list;
#X obj 30 5062 list.slice;
#X text 175 5062 extract sublist;
#X obj 30 5089 list.sort;
#X text 175 5089 sorts list values by ascending order;
#X obj 30 5116 list.sort_with;
#X text 175 5116 sort list with user defined side-chain;
#X obj 30 5143 list.split;
#X text 175 5143 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 5180 list.sum;
#X text 175 5180 calculates sum of floats in list;
#X obj 30 5207 list.unique;
#X text 175 5207 sorts and removes duplicates from input list;
#X obj 30 5234 list.unpack;
#X text 175 5234 unpack list elements to separate outlets;
#X obj 30 5261 list.unwrap;
#X text 175 5261 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 5298 list.walk;
#X text 175 5298 Walks thru the list;
#X obj 30 5325 list.wrap;
#X text 175 5325 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 5376 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5417 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5428 live.capture~;
#X text 175 5428 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5465 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5506 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5517 local.float;
#X text 175 5517 canvas-scoped named float variable;
#X obj 30 5544 local.int;
#X text 175 5544 canvas-scoped named integer variable;
#X obj 30 5571 local.list;
#X text 175 5571 local named list object;
#X obj 20 5598 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5639 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5650 math.abs;
#X text 175 5650 absolute value function;
#X obj 30 5677 math.acos;
#X text 175 5677 arc cosine function;
#X obj 30 5704 math.acosh;
#X text 175 5704 inverse hyperbolic cosine function;
#X obj 30 5731 math.and;
#X text 175 5731 operation AND for multiple arguments;
#X obj 30 5758 math.approx;
#X text 175 5758 check if input value approximately equal to pattern;
#X obj 30 5785 math.asin;
#X text 175 5785 arc sine function;
#X obj 30 5812 math.asinh;
#X text 175 5812 inverse hyperbolic sine function;
#X obj 30 5839 math.atan;
#X text 175 5839 arc tangent function;
#X obj 30 5866 math.atanh;
#X text 175 5866 inverse hyperbolic tangent function;
#X obj 30 5893 math.cbrt;
#X text 175 5893 cube root function;
#X obj 30 5920 math.ceil;
#X text 175 5920 round to smallest integral value not less than input
value;
#X obj 30 5947 math.cos;
#X text 175 5947 cosine function;
#X obj 30 5974 math.cosh;
#X text 175 5974 hyperbolic cosine function;
#X obj 30 6001 math.e;
#X text 175 6001 mathematical constant \, base of the natural
logarithm;
#X obj 30 6028 math.exp;
#X text 175 6028 exponential functions;
#X obj 30 6055 math.exp2;
#X text 175 6055 exponential functions;
#X obj 30 6082 math.floor;
#X text 175 6082 round to largest integral value not greater than x;
#X obj 30 6109 math.gcd;
#X text 175 6109 calculate greatest common divisor;
#X obj 30 6136 math.inf;
#X text 175 6136 infinity value that cannot be represented accurately;
#X obj 30 6163 math.lcm;
#X text 175 6163 calculate least common multiple;
#X obj 30 6190 math.log;
#X text 175 6190 logarithm functions;
#X obj 30 6217 math.log10;
#X text 175 6217 logarithm functions;
#X obj 30 6244 math.log2;
#X text 175 6244 logarithm functions;
#X obj 30 6271 math.nan;
#X text 175 6271 Not a Number \, unrepresentable value;
#X obj 30 6298 math.neg;
#X text 175 6298 negate function;
#X obj 30 6325 math.or;
#X text 175 6325 operation OR for multiple arguments;
#X obj 30 6352 math.pi;
#X text 175 6352 mathematical constant;
#X obj 30 6379 math.reciprocal;
#X text 175 6379 calculate reciprocal number;
#X obj 30 6406 math.round;
#X text 175 6406 round to integral value \, regardless of rounding
direction;
#X obj 30 6433 math.round~;
#X text 175 6433 signal round;
#X obj 30 6460 math.sign;
#X text 175 6460 sign function;
#X obj 30 6487 math.sin;
#X text 175 6487 sine function;
#X obj 30 6514 math.sinh;
#X text 175 6514 hyperbolic sine function;
#X obj 30 6541 math.sqrt;
#X text 175 6541 square root function;
#X obj 30 6568 math.squared;
#X text 175 6568 value square;
#X obj 30 6595 math.tan;
#X text 175 6595 tangent function;
#X obj 30 6622 math.tanh;
#X text 175 6622 hyperbolic tangent function;
#X obj 30 6649 math.trunc;
#X text 175 6649 truncate to integer value;
#X obj 20 6676 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 6717 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6728 midi.ctl2str;
#X text 175 6728 convert Standard MIDI Controllers number to name;
#X obj 30 6755 midi.event2ctl;
#X text 175 6755 convert MidiEvent message to controller channel/value
pair;
#X obj 30 6782 midi.event2note;
#X text 175 6782 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6809 midi.event2prg;
#X text 175 6809 convert MidiEvent message to midi program change
value;
#X obj 30 6836 midi.file;
#X text 175 6836 standard midi file SMF reader and writer;
#X obj 30 6863 midi.key2str;
#X text 175 6863 convert key number to SPN name according to tonality;
#X obj 30 6890 midi.prg2str;
#X text 175 6890 convert GM Instrument number to name (string or
symbol);
#X obj 30 6917 midi.track;
#X text 175 6917 extract track from MidiFile;
#X obj 20 6944 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 6985 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6996 click~;
#X text 175 6996 Output single impulse on bang;
#X obj 30 7023 modplug~;
#X text 175 7023 MOD file player (using libmodplug);
#X obj 20 7050 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 7091 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7102 msg;
#X text 175 7102 message constructor;
#X obj 20 7129 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 7170 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7181 noise.pink~;
#X text 175 7181 Pink noise generator;
#X obj 30 7208 noise.white~;
#X text 175 7208 White noise generator;
#X obj 20 7235 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 7276 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7287 osc.impulse~;
#X text 175 7287 Bandlimited impulse train generator;
#X obj 30 7314 osc.pulse~;
#X text 175 7314 Bandlimited pulse train oscillator.;
#X obj 30 7341 osc.saw~;
#X text 175 7341 Bandlimited saw wave oscillator;
#X obj 30 7368 osc.sinfb~;
#X text 175 7368 sine oscilator with feedback;
#X obj 30 7395 osc.square~;
#X text 175 7395 Bandlimited square wave oscillator;
#X obj 30 7422 osc.tri~;
#X text 175 7422 Bandlimited triangle wave oscillator;
#X obj 20 7449 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 7490 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7501 canvas.current;
#X text 175 7501 verbose information about current canvas;
#X obj 30 7528 canvas.top;
#X text 175 7528 verbose information about top-level canvas;
#X obj 30 7555 patch.args;
#X text 175 7555 Get patch or subpatch arguments;
#X obj 20 7582 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 7623 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7634 path.basename;
#X text 175 7634 outputs filename portion of pathname;
#X obj 30 7661 path.dirname;
#X text 175 7661 outputs directory portion of pathname;
#X obj 30 7688 path.exists;
#X text 175 7688 checks if given path exists;
#X obj 30 7715 path.lsdir;
#X text 175 7715 list directory contents;
#X obj 20 7742 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 7783 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7794 is_any;
#X text 175 7794 checks if input data has *any* type;
#X obj 30 7821 is_bang;
#X text 175 7821 checks if input data has *bang* type;
#X obj 30 7848 is_even;
#X text 175 7848 checks if input number is even;
#X obj 30 7875 is_file;
#X text 175 7875 checks if file exists and accessible;
#X obj 30 7902 is_float;
#X text 175 7902 checks if input data has *float* type;
#X obj 30 7929 is_list;
#X text 175 7929 checks if input data has *list* type;
#X obj 30 7956 is_odd;
#X text 175 7956 checks if input number is odd;
#X obj 30 7983 is_pointer;
#X text 175 7983 checks if input data has *pointer* type;
#X obj 30 8010 is_symbol;
#X text 175 8010 checks if input data has *symbol* type;
#X obj 20 8037 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 8078 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8089 preset.float;
#X text 175 8089 load/store float preset;
#X obj 30 8116 preset.list;
#X text 175 8116 load/store symbol preset;
#X obj 30 8143 preset.storage;
#X text 175 8143 preset storage control;
#X obj 30 8170 preset.symbol;
#X text 175 8170 load/store symbol preset;
#X obj 20 8197 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 8238 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8249 prop.get;
#X text 175 8249 Property extractor;
#X obj 30 8276 prop.set;
#X text 175 8276 Property injector;
#X obj 20 8303 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 8344 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8355 proto.firmata;
#X text 175 8355 Firmata Arduino protocol support;
#X obj 20 8382 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 8423 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8434 random.discrete;
#X text 175 8434 random weighted integers on interval [0 \, n);
#X obj 30 8461 random.float;
#X text 175 8461 random float generator in specified range;
#X obj 30 8488 random.gauss;
#X text 175 8488 gaussian random distribution;
#X obj 30 8515 random.int;
#X text 175 8515 Random integer generator in specified range;
#X obj 30 8542 random.linear;
#X text 175 8542 random linear distribution;
#X obj 30 8569 random.pw_const;
#X text 175 8569 piecewise constant random distribution;
#X obj 30 8596 random.pw_lin;
#X text 175 8596 piecewise linear random distribution;
#X obj 20 8623 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 8664 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8675 snd.file;
#X text 175 8675 Sound file loader on steroids;
#X obj 20 8702 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 8743 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8754 pan.cos~;
#X text 175 8754 two channel equal power sine/cosine panner;
#X obj 30 8781 pan.lin~;
#X text 175 8781 two channel linear panner;
#X obj 30 8808 pan.spread~;
#X text 175 8808 spreads input channels across the stereo field;
#X obj 30 8835 pan.sqrt~;
#X text 175 8835 two channel equal power square root panner;
#X obj 20 8862 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 8903 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8914 string;
#X text 175 8914 string constructor;
#X obj 30 8941 string.contains;
#X text 175 8941 checks if given string contains specified substring;
#X obj 30 8968 string.ends_with;
#X text 175 8968 checks if given string ends with specified suffix;
#X obj 30 8995 string.equal;
#X text 175 8995 check strings for equality;
#X obj 30 9022 string.format;
#X text 175 9022 formats string like printf.;
#X obj 30 9049 string.join;
#X text 175 9049 joins (concatenates) strings with separator;
#X obj 30 9076 string.length;
#X text 175 9076 number of characters in string (unicode supported);
#X obj 30 9103 string.remove;
#X text 175 9103 remove substring from input string;
#X obj 30 9130 string.replace;
#X text 175 9130 replace from one substring to another in input
string;
#X obj 30 9157 string.split;
#X text 175 9157 split string by separator;
#X obj 30 9184 string.starts_with;
#X text 175 9184 checks if given string starts with specified prefix;
#X obj 30 9211 string.substr;
#X text 175 9211 extract substring from input string;
#X obj 30 9238 string2symbol;
#X text 175 9238 converts string to symbol;
#X obj 20 9265 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 9306 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9317 symbol.equal;
#X text 175 9317 check symbols for equality;
#X obj 30 9344 symbol.length;
#X text 175 9344 number of characters in symbol (unicode supported);
#X obj 30 9371 symbol.num_compare;
#X text 175 9371 numeric symbol compare;
#X obj 20 9398 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 9439 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9450 synth.risset_tone~;
#X text 175 9450 Jean Claude Risset's endless glissando;
#X obj 20 9477 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 9518 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9529 system.cursor;
#X text 175 9529 Get information about cursor motion \, mousewheel and
buttonclick;
#X obj 30 9566 system.getenv;
#X text 175 9566 Get system environment variables;
#X obj 30 9593 system.hostname;
#X text 175 9593 outputs system hostname;
#X obj 30 9620 system.memsize;
#X text 175 9620 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 9657 system.memused;
#X text 175 9657 returns the process physical memory use - current and
peak;
#X obj 30 9684 system.screen_size;
#X text 175 9684 returns current screen size in pixels;
#X obj 20 9711 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 9752 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9766 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 9763 Timeline bang;
#X obj 30 9789 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 9786 Timeline section;
#X obj 30 9809 tl.transport;
#X text 175 9809 Timeline transport control;
#X obj 30 9839 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 9836 A bang... that's all;
#X obj 30 9862 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 9859 colorchooser widget;
#X obj 30 9885 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 9882 Display GUI object;
#X obj 30 9908 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 9905 GUI for turning DSP on/off;
#X obj 30 9931 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 9928 envelope editor widget;
#X obj 30 9954 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 9951 UI gain control;
#X obj 30 9977 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 9974 simple icon with button capabilities;
#X obj 30 10000 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 9997 value increment/decrement;
#X obj 30 10023 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 10020 keyboard widget;
#X obj 30 10046 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 10043 knob widget;
#X obj 30 10069 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 10066 simple label widget;
#X obj 30 10092 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 10089 Hyperlink widget;
#X obj 30 10115 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 10112 The matrix of toggles has you.;
#X obj 30 10138 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 10135 Dropdown menu;
#X obj 30 10161 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 10158 Shows peak and rms signal level;
#X obj 30 10184 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 10181 counterpart of the vanilla [nbx];
#X obj 30 10207 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 10204 counterpart of the vanilla [nbx] for signal;
#X obj 30 10230 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 10227 Preset manager;
#X obj 30 10253 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 10250 counterpart of the vanilla radio toggle;
#X obj 30 10276 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 10273 rangle slider;
#X obj 30 10299 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 10296 Scope GUI object;
#X obj 30 10322 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 10319 counterpart of the vanilla slider;
#X obj 30 10345 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 10342 2D slider widget;
#X obj 30 10368 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 10365 Multiple slider widget;
#X obj 30 10391 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 10388 Spectroscope GUI object;
#X obj 30 10414 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 10411 displays a list of text buttons or text toggles;
#X obj 30 10437 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 10434 modern toggle widget;
#X obj 20 10457 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 10498 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10509 vector.distance;
#X text 175 10509 returns euclidean distance between two points;
#X obj 30 10536 vector.dot;
#X text 175 10536 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 10587 vector.length;
#X text 175 10587 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 10624 vector.normalize;
#X text 175 10624 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 10651 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 10651 version: v0.5 \, license: GPL3;
#X obj 20 10670 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;