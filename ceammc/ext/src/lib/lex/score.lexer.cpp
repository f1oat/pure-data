// score.lexer.cpp generated by reflex 1.6.3 from score.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ceammc::location
#define REFLEX_OPTION_YYSTYPE             ceammc::ScoreParser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ceammc
#define REFLEX_OPTION_bison_cc_parser     ScoreParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_debug               true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "score.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               ScoreLexer
#define REFLEX_OPTION_namespace           ceammc
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "score.lexer.cpp"
#define REFLEX_OPTION_reentrant           true
#define REFLEX_OPTION_token_eof           ceammc::ScoreParser::symbol_type(0)
#define REFLEX_OPTION_token_type          ceammc::ScoreParser::symbol_type

// --debug option enables ASSERT:
#define ASSERT(c) assert(c)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "score.l"

    # include <memory>
    # include <cctype>
    # include "lex/score.parser.hpp"

    using token = ceammc::ScoreParser::token;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {

class ScoreLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 9 "score.l"

    public:
        BarList bars;



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  ScoreLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
    set_debug(true);
  }
  static const int INITIAL = 0;
  virtual ceammc::ScoreParser::symbol_type lex(void);
};

} // namespace ceammc

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 21 "score.l"
/*%option graphs-file*/
#line 23 "score.l"
/*%option perf-report*/
#line 31 "score.l"
/*%option fast*/


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

ceammc::ScoreParser::symbol_type ceammc::ScoreLexer::lex()
{
  static const char *REGEX_INITIAL = "(?mx)((?:[\\x09\\x0a\\x20]+))|(\\|)|((?:\\.\\.))|((?:fermata))|((?:bar=(?:0|(?:[1-9][0-9]*))))|((?:@(?:0|(?:[1-9][0-9]*))))|((?:(?:[1-9][0-9]*)\\*))|((?:div=(?:0|(?:[1-9][0-9]*))))|((?:(?:0|(?:[1-9][0-9]*))/(?:0|(?:[1-9][0-9]*))))|((?:0|(?:[1-9][0-9]*)))|((?:(?:(?:t(?:empo)?)|(?:(?:a(?:mp)?|c(?:ue)?|m(?:ark)?|p(?:an)?|v(?:ol)?)[0-9]?))=))|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              if (debug()) std::cerr << "--\033[1;35mEOF\033[0m (start condition " << start() << ")\n";
              return ceammc::ScoreParser::symbol_type(0);
            }
            else
            {
              if (debug()) std::cerr << "--\033[1;31maccepting default rule\033[0m\n";
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 55: (?:[\x09\x0a\x20]+)
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 55\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 55 "score.l"
{ return ScoreParser::make_SPACE(); }
            break;
          case 2: // rule at line 56: \|
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 56\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 56 "score.l"
{ return ScoreParser::make_PIPE(); }
            break;
          case 3: // rule at line 57: (?:\.\.)
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 57\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 57 "score.l"
{ return ScoreParser::make_CHANGE(); }
            break;
          case 4: // rule at line 58: (?:fermata)
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 58\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 58 "score.l"
{ return ScoreParser::make_FERMATA(); }

            break;
          case 5: // rule at line 60: (?:bar=(?:0|(?:[1-9][0-9]*)))
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 60\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 60 "score.l"
{
                            const auto n = std::strtol(text()+4, nullptr, 10);
                            return ScoreParser::make_BAR_CHECK(n);
                        }

            break;
          case 6: // rule at line 65: (?:@(?:0|(?:[1-9][0-9]*)))
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 65\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 65 "score.l"
{
                            const auto pos = std::strtol(text()+1, nullptr, 10);
                            return ScoreParser::make_AT(pos);
                        }

            break;
          case 7: // rule at line 70: (?:(?:[1-9][0-9]*)\*)
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 70\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 70 "score.l"
{
                            const auto n = std::strtol(text(), nullptr, 10);
                            return ScoreParser::make_REPEAT(n);
                        }

            break;
          case 8: // rule at line 75: (?:div=(?:0|(?:[1-9][0-9]*)))
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 75\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 75 "score.l"
{
                            const auto n = std::strtol(text()+4, nullptr, 10);
                            return ScoreParser::make_BEAT_DIVISION(n);
                        }

            break;
          case 9: // rule at line 80: (?:(?:0|(?:[1-9][0-9]*))/(?:0|(?:[1-9][0-9]*)))
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 80\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 80 "score.l"
{
                            char* end;
                            const auto num = std::strtol(text(), &end, 10);
                            const auto den = std::strtol(end+1, nullptr, 10);
                            return ScoreParser::make_RATIO(std::pair<int, int>(num, den));
                        }

            break;
          case 10: // rule at line 87: (?:0|(?:[1-9][0-9]*))
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 87\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 87 "score.l"
{
                            const auto num = std::strtol(text(), nullptr, 10);
                            return ScoreParser::make_INT(num);
                        }

            break;
          case 11: // rule at line 92: (?:(?:(?:t(?:empo)?)|(?:(?:a(?:mp)?|c(?:ue)?|m(?:ark)?|p(?:an)?|v(?:ol)?)[0-9]?))=)
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 92\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 92 "score.l"
{
                            const int len = strlen(text());
                            const char id = text()[0];
                            const char c = text()[len-2];
                            const char n = isdigit(c) ? (c-'0') : 0;
                            return ScoreParser::make_KEY(KeyId(id, n));
                        }
            break;
          case 12: // rule at line 99: .
            if (debug()) std::cerr << "--\033[1;35maccepting rule at line 99\033[0m (\"\033[1m" << matcher().text() << "\033[0m\")\n";
#line 99 "score.l"
{   }

            break;
        }
  }
}
