#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in Centre of ElectroAcoustic Music of Moscow Conservatory
(CEAM).;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.ltcplay~;
#X text 200 641 array player controlled by LTC;
#X obj 30 668 array.mean;
#X text 200 668 calculates array arithmetic mean value;
#X obj 30 695 array.minmax;
#X text 200 695 find array min and max element value;
#X obj 30 722 array.play~;
#X text 200 722 array player with variable speed and amplitude;
#X obj 30 749 array.plot;
#X text 200 749 array data plotter;
#X obj 30 776 array.plot~;
#X text 200 776 plot signal on specified array;
#X obj 30 803 array.readwrite~;
#X text 200 803 array reader/writer;
#X obj 30 830 array.resample;
#X text 200 830 array resampler;
#X obj 30 857 array.rms;
#X text 200 857 calculates root mean square value for array;
#X obj 30 884 array.set;
#X text 200 884 set array content from list;
#X obj 30 911 array.stddev;
#X text 200 911 calculates standard deviation for array values;
#X obj 30 938 array.stretch;
#X text 200 938 array time-stretch \, pitch-shift or rate-change;
#X obj 30 965 array.sum;
#X text 200 965 calculates sum of array elements;
#X obj 30 992 array.sum2;
#X text 200 992 calculates sum of squares of array elements;
#X obj 30 1019 array.tramp~;
#X text 200 1019 triggered ramp generator for array;
#X obj 30 1046 array.variance;
#X text 200 1046 calculates variance of array values;
#X obj 30 1073 array.vplay;
#X text 200 1073 simple array player for using with vline~;
#X obj 30 1100 array.window;
#X text 200 1100 fill array with window;
#X obj 30 1127 plot.geomspace~;
#X text 200 1127 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1167 plot.hist~;
#X text 200 1167 calculate and output signal histogram;
#X obj 30 1194 plot.linspace~;
#X text 200 1194 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1234 plot.logspace~;
#X text 200 1234 outputs numbers spaced evenly on a log scale;
#X obj 30 1261 plot.response~;
#X text 200 1261 output amp/phase freq response to impulse;
#X obj 20 1288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1329 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1340 ceammc.search;
#X text 200 1340 ceammc library search object;
#X obj 30 1367 chrono.datetime;
#X text 200 1367 output current date and time info;
#X obj 30 1397 ui.link @title [function] @url function-help.pd;
#X text 200 1394 named function;
#X obj 30 1419 function.call;
#X text 200 1419 call named function;
#X obj 30 1446 gain~;
#X text 200 1446 multislot signal gain;
#X obj 30 1473 gate~;
#X text 200 1473 multislot signal gate;
#X obj 30 1500 logger;
#X text 200 1500 advanced data logger;
#X obj 30 1527 matrix~;
#X text 200 1527 signal routing matrix;
#X obj 30 1554 merge~;
#X text 200 1554 parametrized signal merge;
#X obj 30 1581 metro.choice;
#X text 200 1581 metro with random choice from timeset;
#X obj 30 1608 metro.pattern;
#X text 200 1608 metro with rhythmic patterns;
#X obj 30 1635 metro.random;
#X text 200 1635 metro random bang with specified range;
#X obj 30 1662 metro.seq;
#X text 200 1662 metro sequencer;
#X obj 30 1689 metro.wchoice;
#X text 200 1689 metro with weighted random choice from timeset;
#X obj 30 1716 mix~;
#X text 200 1716 multislot signal mixer;
#X obj 30 1743 nsig~;
#X text 200 1743 Mulitchannel converter from control to audio rate;
#X obj 30 1770 obj.props;
#X text 200 1770 property extractor;
#X obj 30 1797 radio;
#X text 200 1797 float index to outlet values as radio switch;
#X obj 30 1824 split~;
#X text 200 1824 parametrized signal splitter;
#X obj 30 1851 spring;
#X text 200 1851 float value "spring";
#X obj 30 1878 sync;
#X text 200 1878 value synchronization;
#X obj 30 1905 window;
#X text 200 1905 returns window value by given window position;
#X obj 30 1932 xdac~;
#X text 200 1932 dac~ with channel ranges;
#X obj 30 1959 xfade2~;
#X text 200 1959 multi stereo-signal crossfade;
#X obj 30 1986 xfade~;
#X text 200 1986 multi signal crossfade;
#X obj 30 2013 z~;
#X text 200 2013 sample delay;
#X obj 20 2040 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 2081 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2092 chaos.gbman0;
#X text 200 2092 Gingerbreadman map chaotic generator;
#X obj 30 2119 chaos.gbman0~;
#X text 200 2119 Gingerbreadman map chaotic generator;
#X obj 30 2146 chaos.jong;
#X text 200 2146 Peter de Jong attractor;
#X obj 30 2173 chaos.logistic;
#X text 200 2173 Logistic map chaotic generator;
#X obj 30 2200 chaos.std0;
#X text 200 2200 Standard map chaotic generator;
#X obj 30 2227 chaos.std0~;
#X text 200 2227 Standard map chaotic generator;
#X obj 20 2254 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2295 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2306 array.p2s;
#X text 200 2306 convert array phase [0\..1] to sample position;
#X obj 30 2333 array.s2p;
#X text 200 2333 convert sample position to phase range [0\..1];
#X obj 30 2360 conv.amp2dbfs;
#X text 200 2360 convert from amplitude to decibel full scale;
#X obj 30 2387 conv.amp2dbfs~;
#X text 200 2387 convert from amplitude to decibel full scale;
#X obj 30 2414 conv.bar2ms;
#X text 200 2414 calculate bar and beat duration;
#X obj 30 2441 conv.bits2bang;
#X text 200 2441 convert list of bits to bang events;
#X obj 30 2468 conv.bits2int;
#X text 200 2468 convert list of bits to integer;
#X obj 30 2495 conv.bits2note;
#X text 200 2495 convert list of bits to note events;
#X obj 30 2522 conv.bits2pos;
#X text 200 2522 convert list of bits to list of bit position;
#X obj 30 2549 conv.bpm2hz;
#X text 200 2549 converts BPM to frequency in hertz;
#X obj 30 2576 conv.bpm2ms;
#X text 200 2576 convert frequency in BPM to period in milliseconds;
#X obj 30 2603 conv.bpm2sec;
#X text 200 2603 convert frequency in BPM to period in seconds;
#X obj 30 2630 conv.car2pol;
#X text 200 2630 convert cartesian coords to polar;
#X obj 30 2657 conv.cc2amp;
#X text 200 2657 convert from MIDI Control Change range;
#X obj 30 2684 conv.char2morse;
#X text 200 2684 convert character to morse code;
#X obj 30 2711 conv.color2rgba;
#X text 200 2711 convert named or hex color to separate RGBA values;
#X obj 30 2738 conv.dbfs2amp;
#X text 200 2738 convert decibel full scale to amplitude;
#X obj 30 2765 conv.dbfs2amp~;
#X text 200 2765 convert decibel full scale to amplitude;
#X obj 30 2792 conv.degree2key;
#X text 200 2792 convert scale degree to key;
#X obj 30 2819 conv.edge2bang;
#X text 200 2819 edge detector for numeric stream;
#X obj 30 2846 conv.hex2int;
#X text 200 2846 hex symbol to int value;
#X obj 30 2873 conv.hsl2rgb;
#X text 200 2873 convert HSL color values to RGB;
#X obj 30 2900 conv.int2bits;
#X text 200 2900 convert integer to list of bits;
#X obj 30 2927 conv.lab2rgb;
#X text 200 2927 convert LAB color values to RGB;
#X obj 30 2954 conv.lin2curve;
#X text 200 2954 map linear to exponential range with 0 allowed.;
#X obj 30 2981 conv.lin2exp;
#X text 200 2981 maps linear range to exponential range;
#X obj 30 3008 conv.lin2lin;
#X text 200 3008 convert from one linear range to another;
#X obj 30 3035 conv.lin2lin~;
#X text 200 3035 convert from one linear range to another for signals;
#X obj 30 3062 conv.list2props;
#X text 200 3062 converts list to series of property messages;
#X obj 30 3089 conv.midi2freq;
#X text 200 3089 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 3129 conv.ms2bpm;
#X text 200 3129 convert period in milliseconds to frequency in BPM;
#X obj 30 3156 conv.ms2samp;
#X text 200 3156 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3196 conv.ms2samp~;
#X text 200 3196 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3236 conv.ms2str;
#X text 200 3236 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3276 conv.note2guido;
#X text 200 3276 convert MIDI note to Guido notation;
#X obj 30 3303 conv.phase2rad;
#X text 200 3303 convert phase value [0-1] to radians [0-2π];
#X obj 30 3330 conv.phase2rad~;
#X text 200 3330 convert phase value [0-1] to radians [0-2π];
#X obj 30 3357 conv.pitch2midi;
#X text 200 3357 converts symbol pitch name to MIDI note number;
#X obj 30 3384 conv.pol2car;
#X text 200 3384 convert from polar coordinates to cartesian;
#X obj 30 3411 conv.rad2phase;
#X text 200 3411 convert radians value to phase;
#X obj 30 3438 conv.rad2phase~;
#X text 200 3438 convert radians value to phase;
#X obj 30 3465 conv.rgb2hex;
#X text 200 3465 convert separate RGB values to hex color;
#X obj 30 3492 conv.samp2ms;
#X text 200 3492 convert samples to time according to samplerate;
#X obj 30 3519 conv.samp2ms~;
#X text 200 3519 convert samples to milliseconds according to samplerate;
#X obj 30 3546 conv.samp2sec;
#X text 200 3546 convert samples to time according to samplerate;
#X obj 30 3573 conv.sec2bpm;
#X text 200 3573 convert period in seconds to frequency in BPM;
#X obj 30 3600 conv.sec2samp;
#X text 200 3600 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3640 conv.sec2str;
#X text 200 3640 converts float time in seconds to formated symbol
(or string);
#X obj 30 3667 conv.semi2ratio;
#X text 200 3667 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3694 conv.sig2float~;
#X text 200 3694 convert signal to floats;
#X obj 30 3721 conv.str2sec;
#X text 200 3721 converts formatted time to float value in seconds;
#X obj 30 3748 music.dur2time;
#X text 200 3748 convert duration list to time;
#X obj 30 3775 music.voice2midi;
#X text 200 3775 convert voice music list of midi pitches;
#X obj 20 3802 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3843 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3854 color.mix;
#X text 200 3854 color mixer;
#X obj 30 3881 color.scale;
#X text 200 3881 create color scales;
#X obj 30 3908 data.bimap;
#X text 200 3908 bidirectional map container;
#X obj 30 3935 data.color;
#X text 200 3935 Color datatype;
#X obj 30 3962 data.copy;
#X text 200 3962 make copy for any data types: MList \, Set etc...;
#X obj 30 3989 data.dict;
#X text 200 3989 dictionary container: store values by key;
#X obj 30 4016 data.fifo;
#X text 200 4016 First-In-First-Out (FIFO) queue data container;
#X obj 30 4043 data.float;
#X text 200 4043 robust float object;
#X obj 30 4070 data.int;
#X text 200 4070 robust int object;
#X obj 30 4097 data.list;
#X text 200 4097 list container;
#X obj 30 4124 data.mlist;
#X text 200 4124 multidimensional list container;
#X obj 30 4151 data.set;
#X text 200 4151 container that store unique elements;
#X obj 30 4178 data.set2list;
#X text 200 4178 converts set to list;
#X obj 30 4205 dict.contains;
#X text 200 4205 predicate to check if dict contains a keys;
#X obj 30 4232 dict.each;
#X text 200 4232 map each value in dict;
#X obj 30 4259 dict.from_list;
#X text 200 4259 creates dictionary from list;
#X obj 30 4286 dict.get;
#X text 200 4286 output dict values;
#X obj 30 4313 dict.keys;
#X text 200 4313 get list of dict keys;
#X obj 30 4340 dict.pass;
#X text 200 4340 passes specified keys in dict;
#X obj 30 4367 dict.reject;
#X text 200 4367 rejects specified keys from dict;
#X obj 30 4394 dict.size;
#X text 200 4394 dictionary size;
#X obj 30 4421 dict.to_list;
#X text 200 4421 converts dictionary to plain list;
#X obj 30 4448 dict.values;
#X text 200 4448 dictionary values as mlist;
#X obj 30 4475 global.bimap;
#X text 200 4475 Global visibility bidirectional map container;
#X obj 30 4502 local.bimap;
#X text 200 4502 local to patch bidirectional map container;
#X obj 30 4529 mlist.flatten;
#X text 200 4529 flatten nested mlist;
#X obj 30 4556 rtree.to_list;
#X text 200 4556 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4583 set.contains;
#X text 200 4583 check if specified element is in set;
#X obj 30 4610 set.diff;
#X text 200 4610 difference between two sets;
#X obj 30 4637 set.equal;
#X text 200 4637 checks if two sets are equal (contains same elements);
#X obj 30 4664 set.intersect;
#X text 200 4664 output intersection of given sets;
#X obj 30 4691 set.size;
#X text 200 4691 get number of elements in set;
#X obj 30 4718 set.symdiff;
#X text 200 4718 symmetric difference between two sets;
#X obj 30 4745 set.union;
#X text 200 4745 output union of given sets;
#X obj 20 4772 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4813 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4824 dyn.comp2~;
#X text 200 4824 stereo dynamic range compressor;
#X obj 30 4851 dyn.comp_peak2~;
#X text 200 4851 stereo peak feed forward compressor with channel linking;
#X obj 30 4878 dyn.comp_peak~;
#X text 200 4878 mono dynamic range peak feed forward compressor;
#X obj 30 4905 dyn.comp_up2~;
#X text 200 4905 stereo upward compressor with channel linking;
#X obj 30 4932 dyn.comp_up~;
#X text 200 4932 mono upward compressor;
#X obj 30 4959 dyn.comp~;
#X text 200 4959 mono dynamic range compressors;
#X obj 30 4986 dyn.expand2~;
#X text 200 4986 stereo dynamic range expander with channel linking;
#X obj 30 5013 dyn.expand~;
#X text 200 5013 mono dynamic range expander;
#X obj 30 5040 dyn.gate2~;
#X text 200 5040 stereo signal gate;
#X obj 30 5067 dyn.gate~;
#X text 200 5067 mono signal gate;
#X obj 30 5094 dyn.limit2~;
#X text 200 5094 stereo 1176LN Peak Limiter;
#X obj 30 5121 dyn.limit~;
#X text 200 5121 mono 1176LN Peak Limiter;
#X obj 30 5148 dyn.softclip~;
#X text 200 5148 soft signal clip;
#X obj 20 5175 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 5216 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5227 env.adsr~;
#X text 200 5227 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 5254 env.ar~;
#X text 200 5254 Attack/Release envelope generator;
#X obj 30 5281 env.asr~;
#X text 200 5281 Attack/Sustain/Release envelope generator;
#X obj 30 5308 env.concat;
#X text 200 5308 Envelope concatenation;
#X obj 30 5335 env.follow~;
#X text 200 5335 Envelope follower with independent attack and release
times;
#X obj 30 5362 env.mix;
#X text 200 5362 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5402 env.smooth~;
#X text 200 5402 An envelope with an exponential attack and release;
#X obj 30 5429 env.tscale;
#X text 200 5429 Envelope time-scale;
#X obj 30 5456 env.tshift;
#X text 200 5456 Envelope time-shift (horizontal);
#X obj 30 5483 env.vscale;
#X text 200 5483 Envelope value-scale;
#X obj 30 5510 env2array;
#X text 200 5510 Renders envelope to specified array;
#X obj 30 5537 env2vline;
#X text 200 5537 Converts envelope to bunch of vline messages;
#X obj 30 5564 envelope;
#X text 200 5564 Envelope data type;
#X obj 30 5591 vline2env;
#X text 200 5591 Converts vline messages to env;
#X obj 20 5618 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5659 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5670 expand_env;
#X text 200 5670 Substitute environment variables in data stream;
#X obj 30 5697 flow.append;
#X text 200 5697 append message to flow stream;
#X obj 30 5724 flow.change;
#X text 200 5724 rejects redundant input values;
#X obj 30 5751 flow.count;
#X text 200 5751 control flow event counter;
#X obj 30 5778 flow.delay;
#X text 200 5778 enhanced version on vanilla delay object;
#X obj 30 5805 flow.demultiplex;
#X text 200 5805 control flow demultiplexer;
#X obj 30 5832 flow.demultiplex2~;
#X text 200 5832 audio stream stereo demultiplexer;
#X obj 30 5859 flow.demultiplex~;
#X text 200 5859 audio stream demultiplexer;
#X obj 30 5886 flow.dollar;
#X text 200 5886 data flow dollar converter;
#X obj 30 5913 flow.dup;
#X text 200 5913 message duplicator;
#X obj 30 5940 flow.float;
#X text 200 5940 pass floats;
#X obj 30 5967 flow.gate;
#X text 200 5967 control flow gate. [spigot] analog;
#X obj 30 5994 flow.greater;
#X text 200 5994 numeric stream router;
#X obj 30 6021 flow.greater_eq;
#X text 200 6021 numeric stream router;
#X obj 30 6048 flow.group;
#X text 200 6048 group input atoms in list of specified size;
#X obj 30 6075 flow.interval;
#X text 200 6075 measure time between flow events;
#X obj 30 6102 flow.less;
#X text 200 6102 numeric stream router \, like many [moses];
#X obj 30 6129 flow.less_eq;
#X text 200 6129 numeric stream router \, like many [moses];
#X obj 30 6156 flow.list2many;
#X text 200 6156 routes list element with message selectors;
#X obj 30 6183 flow.match;
#X text 200 6183 route data flow by regexp match;
#X obj 30 6210 flow.mem;
#X text 200 6210 store data flow in memory;
#X obj 30 6237 flow.multiplex;
#X text 200 6237 control flow multiplexer;
#X obj 30 6264 flow.multiplex2~;
#X text 200 6264 audio stream stereo multiplexer;
#X obj 30 6291 flow.multiplex~;
#X text 200 6291 audio stream multiplexer;
#X obj 30 6318 flow.once;
#X text 200 6318 one message pass thru;
#X obj 30 6345 flow.pack;
#X text 200 6345 flow pack;
#X obj 30 6372 flow.pass;
#X text 200 6372 pass specified values;
#X obj 30 6399 flow.pass_if;
#X text 200 6399 pass values that accepted by predicate object;
#X obj 30 6426 flow.pipe;
#X text 200 6426 enhanced version on vanilla pipe object;
#X obj 30 6453 flow.prepend;
#X text 200 6453 prepend message before received one;
#X obj 30 6480 flow.queue;
#X text 200 6480 multi-channel control flow sync queue (or FIFO);
#X obj 30 6507 flow.record;
#X text 200 6507 flow stream recorder/player;
#X obj 30 6534 flow.reject;
#X text 200 6534 reject specified values;
#X obj 30 6561 flow.reject_if;
#X text 200 6561 reject values by predicate;
#X obj 30 6588 flow.ring;
#X text 200 6588 dataflow ring buffer;
#X obj 30 6615 flow.route;
#X text 200 6615 advanced message router;
#X obj 30 6642 flow.select;
#X text 200 6642 vanilla flow on steroids;
#X obj 30 6669 flow.seqdelay;
#X text 200 6669 sequential delay/router for input flow;
#X obj 30 6696 flow.space;
#X text 200 6696 space in time messages received at the same logical
time;
#X obj 30 6723 flow.speedlim;
#X text 200 6723 control stream speed limiter;
#X obj 30 6750 flow.split;
#X text 200 6750 split data flow by external side-chain predicate;
#X obj 30 6777 flow.stack;
#X text 200 6777 any message stack;
#X obj 30 6804 flow.sync;
#X text 200 6804 bus with only hot inlets;
#X obj 30 6831 flow.sync_pack;
#X text 200 6831 flow pack with all hot inlets;
#X obj 30 6858 flow.tee~;
#X text 200 6858 separate audio and control streams;
#X obj 30 6885 replace;
#X text 200 6885 Replace atoms in data stream;
#X obj 30 6912 route.any;
#X text 200 6912 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6939 route.bang;
#X text 200 6939 separate bang messages from other types;
#X obj 30 6966 route.cycle;
#X text 200 6966 cyclic message router;
#X obj 30 6993 route.float;
#X text 200 6993 separate float messages from other types;
#X obj 30 7020 route.list;
#X text 200 7020 separate list messages from other types;
#X obj 30 7047 route.prop;
#X text 200 7047 separate property messages from other types;
#X obj 30 7074 route.random;
#X text 200 7074 routes input flow to random outlet;
#X obj 30 7101 route.symbol;
#X text 200 7101 separate symbol messages from other types;
#X obj 20 7128 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 7169 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7180 flt.a-weight;
#X text 200 7180 convert frequency to A-weight value;
#X obj 30 7207 flt.biquad~;
#X text 200 7207 second order IIR filter.;
#X obj 30 7234 flt.bpf12~;
#X text 200 7234 Two pole band-pass butterworth filter;
#X obj 30 7261 flt.bpf24~;
#X text 200 7261 Four pole band-pass butterworth filter;
#X obj 30 7288 flt.bpf36e~;
#X text 200 7288 elliptic band-pass filter with -36db rolloff;
#X obj 30 7315 flt.bpf72e~;
#X text 200 7315 elliptic band-pass filter with -72db rolloff;
#X obj 30 7342 flt.c_apf;
#X text 200 7342 Allpass filter coefficient calculator for biquad;
#X obj 30 7369 flt.c_bpf~;
#X text 200 7369 BPF coefficient calculator for biquad filter;
#X obj 30 7396 flt.c_highshelf~;
#X text 200 7396 Highshelf filter coefficient calculator for biquad;
#X obj 30 7423 flt.c_hpf;
#X text 200 7423 HPF coefficient calculator for biquad filter;
#X obj 30 7450 flt.c_hpf~;
#X text 200 7450 HPF coefficient calculator for biquad filter;
#X obj 30 7477 flt.c_lowshelf~;
#X text 200 7477 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7504 flt.c_lpf;
#X text 200 7504 LPF coefficient calculator for biquad filter;
#X obj 30 7531 flt.c_lpf~;
#X text 200 7531 LPF coefficient calculator for biquad filter;
#X obj 30 7558 flt.c_notch;
#X text 200 7558 Notch filter coefficient calculator for biquad;
#X obj 30 7585 flt.c_notch~;
#X text 200 7585 Band-reject coefficient calculator for biquad filter;
#X obj 30 7612 flt.c_peak~;
#X text 200 7612 Peaking equalizer calculator for biquad;
#X obj 30 7639 flt.c_pole;
#X text 200 7639 One-pole coefficient calculator for biquad filter;
#X obj 30 7666 flt.dcblock2~;
#X text 200 7666 stereo DC blocker;
#X obj 30 7693 flt.dcblock~;
#X text 200 7693 mono DC blocker;
#X obj 30 7720 flt.eq10~;
#X text 200 7720 graphic 10 band equalizer;
#X obj 30 7747 flt.eq_peak_cq~;
#X text 200 7747 constant-Q second order peaking equalizer section;
#X obj 30 7774 flt.eq_peak~;
#X text 200 7774 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7829 flt.fb_comb~;
#X text 200 7829 feedback comb filter;
#X obj 30 7856 flt.fbank5x1~;
#X text 200 7856 5 band one octave butterworth filterbank;
#X obj 30 7883 flt.ff_comb~;
#X text 200 7883 feed forward comb filter;
#X obj 30 7910 flt.freqz;
#X text 200 7910 compute the frequency response of a digital filter;
#X obj 30 7937 flt.freqz~;
#X text 200 7937 compute the frequency response of a digital filter;
#X obj 30 7964 flt.highshelf~;
#X text 200 7964 gain boost|cut above some frequency;
#X obj 30 7991 flt.hpf12~;
#X text 200 7991 High-pass second order Butterworth filter;
#X obj 30 8018 flt.hpf24~;
#X text 200 8018 High-pass fourth order Butterworth filter;
#X obj 30 8045 flt.lowshelf~;
#X text 200 8045 gain boost|cut below some frequency;
#X obj 30 8072 flt.lpf12~;
#X text 200 8072 Low-pass second order Butterworth filter;
#X obj 30 8099 flt.lpf24~;
#X text 200 8099 Low-pass fourth order Butterworth filter;
#X obj 30 8126 flt.median;
#X text 200 8126 Median control flow filter;
#X obj 30 8153 flt.moog_vcf~;
#X text 200 8153 Moog Voltage Controlled Filter;
#X obj 30 8180 flt.notch~;
#X text 200 8180 band-rejection filter;
#X obj 30 8207 flt.resonbp~;
#X text 200 8207 Simple resonant bandpass filter;
#X obj 30 8234 flt.resonhp~;
#X text 200 8234 Simple resonant highpass filter;
#X obj 30 8261 flt.resonlp~;
#X text 200 8261 Simple resonant lowpass filter;
#X obj 30 8288 flt.speaker~;
#X text 200 8288 speaker emulation band-pass filter;
#X obj 20 8315 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 8356 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8367 fx.bitdown~;
#X text 200 8367 bit downer and downsampler effect;
#X obj 30 8394 fx.chorus~;
#X text 200 8394 Chorus effect;
#X obj 30 8421 fx.dattorro~;
#X text 200 8421 dattorro reverb;
#X obj 30 8448 fx.delay~;
#X text 200 8448 smooth delay with a feedback control;
#X obj 30 8475 fx.distortion1~;
#X text 200 8475 distortion #1 from Guitarix effects set;
#X obj 30 8502 fx.distortion2~;
#X text 200 8502 distortion #2 from Guitarix effects set;
#X obj 30 8529 fx.distortion3~;
#X text 200 8529 simple distortion #3 from Guitarix effects set;
#X obj 30 8556 fx.distortion~;
#X text 200 8556 cubic nonlinearity distortion;
#X obj 30 8583 fx.drive~;
#X text 200 8583 Guitarix drive effect;
#X obj 30 8610 fx.drone_box~;
#X text 200 8610 mono sympathetic resonance generator;
#X obj 30 8637 fx.echo2~;
#X text 200 8637 stereo echo effect;
#X obj 30 8664 fx.echo~;
#X text 200 8664 enhanced echo effect;
#X obj 30 8691 fx.flanger~;
#X text 200 8691 mono flanging effect;
#X obj 30 8718 fx.freeverb2~;
#X text 200 8718 freeverb2 - stereo version of freeverb;
#X obj 30 8745 fx.freeverb~;
#X text 200 8745 freeverb - common used open-source reverb;
#X obj 30 8772 fx.freqshift~;
#X text 200 8772 frequency shifter or single-sideband ring modulation;
#X obj 30 8799 fx.granulator~;
#X text 200 8799 simple input stream granulator;
#X obj 30 8826 fx.greyhole~;
#X text 200 8826 A complex echo-like effect;
#X obj 30 8853 fx.infrev~;
#X text 200 8853 port of Infinity VST plugin from airwindows;
#X obj 30 8880 fx.jcrev~;
#X text 200 8880 Schroeder quad reverberator from 1972;
#X obj 30 8907 fx.looper~;
#X text 200 8907 One track looper;
#X obj 30 8934 fx.overdrive~;
#X text 200 8934 overdrive effect;
#X obj 30 8961 fx.pitchshift_s~;
#X text 200 8961 signal version of fx.pitchshift~;
#X obj 30 8988 fx.pitchshift~;
#X text 200 8988 simple pitch shifter based on 2 delay lines;
#X obj 30 9015 fx.rb_pitchshift~;
#X text 200 9015 rubber band pitchshift;
#X obj 30 9042 fx.recho~;
#X text 200 9042 reversed echo effect;
#X obj 30 9069 fx.ringmod~;
#X text 200 9069 ring modulator effect;
#X obj 30 9096 fx.room~;
#X text 200 9096 Gardners room emulation algorithms;
#X obj 30 9123 fx.satrev~;
#X text 200 9123 Schroeder reverberator from 1971;
#X obj 30 9150 fx.scramble~;
#X text 200 9150 scramble delayed sound fragments;
#X obj 30 9177 fx.shimmer~;
#X text 200 9177 shimmer reverb effect effect;
#X obj 30 9204 fx.stutter~;
#X text 200 9204 stutter effect;
#X obj 30 9231 fx.tapiir~;
#X text 200 9231 multi-tap delay;
#X obj 30 9258 fx.tremolo~;
#X text 200 9258 tremolo effect from guitarix project;
#X obj 30 9285 fx.vocoder~;
#X text 200 9285 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 9325 fx.wahwah~;
#X text 200 9325 digitized CryBaby wah pedal;
#X obj 30 9352 fx.zita_rev1~;
#X text 200 9352 Zita stereo reverb;
#X obj 20 9379 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 9420 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9431 global.dict;
#X text 200 9431 global named dict object;
#X obj 30 9458 global.float;
#X text 200 9458 global named float object;
#X obj 30 9485 global.int;
#X text 200 9485 global named integer object;
#X obj 30 9512 global.list;
#X text 200 9512 global named list object;
#X obj 30 9539 global.mlist;
#X text 200 9539 global named mlist object;
#X obj 30 9566 global.set;
#X text 200 9566 global named set object;
#X obj 20 9593 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 9634 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9645 hw.apple_smc;
#X text 200 9645 query the system management control in Apples;
#X obj 30 9672 hw.apple_sms;
#X text 200 9672 query the sudden motion sensor in Apples;
#X obj 30 9699 hw.arduino;
#X text 200 9699 Arduino device;
#X obj 30 9726 hw.cpu_temp;
#X text 200 9726 get CPU temperature;
#X obj 30 9753 hw.display;
#X text 200 9753 get/set display properties;
#X obj 30 9780 hw.kbd_light;
#X text 200 9780 Get/set keyboard light on some devices;
#X obj 30 9807 hw.motu.avb;
#X text 200 9807 controls Motu AVB devices over http requests;
#X obj 30 9834 hw.serial;
#X text 200 9834 serial port device;
#X obj 20 9861 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9902 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9916 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9913 faust realtime compilation;
#X obj 30 9938 lang.lua;
#X text 200 9938 Lua JIT language bindings;
#X obj 30 9968 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9965 faust compiled ui object;
#X obj 20 9990 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 10031 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10042 lfo.+pulse~;
#X text 200 10042 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 10069 lfo.+saw~;
#X text 200 10069 Positive unit-amplitude low frequency saw wave;
#X obj 30 10096 lfo.+square~;
#X text 200 10096 Positive low frequency square wave;
#X obj 30 10123 lfo.+tri~;
#X text 200 10123 Positive unit-amplitude low frequency triangle wave;
#X obj 30 10150 lfo.impulse~;
#X text 200 10150 Unit-amplitude low-frequency impulse train;
#X obj 30 10177 lfo.mosc~;
#X text 200 10177 multi-oscillator with various waveforms;
#X obj 30 10204 lfo.pulse~;
#X text 200 10204 Full-range unit-amplitude low frequency pulse train;
#X obj 30 10231 lfo.saw~;
#X text 200 10231 Full-range unit-amplitude low frequency saw;
#X obj 30 10258 lfo.square~;
#X text 200 10258 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 10285 lfo.tri~;
#X text 200 10285 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 10312 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 10353 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10364 list.^at;
#X text 200 10364 on input index(es) outputs list element(s);
#X obj 30 10391 list.^contains;
#X text 200 10391 checks if input atom is found in the list;
#X obj 30 10418 list.^search;
#X text 200 10418 on input atom returns it index in list;
#X obj 30 10445 list.all_of;
#X text 200 10445 checks if all list atoms accepted by predicate;
#X obj 30 10472 list.any_of;
#X text 200 10472 checks if at least one list element is accepted by
predicate;
#X obj 30 10499 list.append;
#X text 200 10499 append atom or list to the end of input list;
#X obj 30 10526 list.apply_to;
#X text 200 10526 modifies list value at specified position \, filtering
it via external object;
#X obj 30 10566 list.at;
#X text 200 10566 outputs list element(s) at specified index(es);
#X obj 30 10593 list.choice;
#X text 200 10593 outputs random element from list;
#X obj 30 10620 list.contains;
#X text 200 10620 checks if input list contains specified atoms;
#X obj 30 10647 list.convolve;
#X text 200 10647 convolution for lists;
#X obj 30 10674 list.correlate;
#X text 200 10674 list cross-correlation;
#X obj 30 10701 list.count;
#X text 200 10701 output the number of items that equal to specified
value;
#X obj 30 10728 list.count_if;
#X text 200 10728 output the number of items that satisfy to external
predicate;
#X obj 30 10755 list.delta;
#X text 200 10755 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10795 list.distribution;
#X text 200 10795 list value distribution;
#X obj 30 10822 list.do;
#X text 200 10822 iterate and modify list contents via side-chain;
#X obj 30 10849 list.each;
#X text 200 10849 maps each list value via external side-chain;
#X obj 30 10876 list.enumerate;
#X text 200 10876 enumerates input list;
#X obj 30 10903 list.equal;
#X text 200 10903 checks if given lists are equal;
#X obj 30 10930 list.first;
#X text 200 10930 returns first list element;
#X obj 30 10957 list.gen;
#X text 200 10957 generates list of specified length via external generator;
#X obj 30 10984 list.histogram;
#X text 200 10984 outputs distribution histogram;
#X obj 30 11011 list.insert;
#X text 200 11011 insert atom or list to the specified position of
input list;
#X obj 30 11038 list.integrator;
#X text 200 11038 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 11078 list.last;
#X text 200 11078 output last list element;
#X obj 30 11105 list.length;
#X text 200 11105 output the number of atoms in the list;
#X obj 30 11132 list.map;
#X text 200 11132 map list values by specified dictionary;
#X obj 30 11159 list.max;
#X text 200 11159 output largest element in the list;
#X obj 30 11186 list.mean;
#X text 200 11186 calculates average of list of floats;
#X obj 30 11213 list.min;
#X text 200 11213 returns smallest element in the list;
#X obj 30 11240 list.none_of;
#X text 200 11240 checks if none of list atoms is accepted by predicate;
#X obj 30 11267 list.normalize;
#X text 200 11267 normalizes float list values to get their sum = 1.0;
#X obj 30 11294 list.pass;
#X text 200 11294 leave in list only specified elements;
#X obj 30 11321 list.pass_if;
#X text 200 11321 leave only elements accepted by predicate;
#X obj 30 11348 list.prepend;
#X text 200 11348 prepend atom or list before input list;
#X obj 30 11375 list.product;
#X text 200 11375 calculates product of floats in list;
#X obj 30 11402 list.range;
#X text 200 11402 output list smallest and largest value;
#X obj 30 11429 list.reduce;
#X text 200 11429 apply function of two arguments cumulatively to the
list;
#X obj 30 11456 list.reject;
#X text 200 11456 remove specified element from list;
#X obj 30 11483 list.remove;
#X text 200 11483 remove list element(s) at specified positions;
#X obj 30 11510 list.remove_if;
#X text 200 11510 remove elements by predicate;
#X obj 30 11537 list.repack;
#X text 200 11537 repack list to specified size;
#X obj 30 11564 list.repeat;
#X text 200 11564 output new list by repeating input list specified
times;
#X obj 30 11591 list.resample;
#X text 200 11591 resample list with specified ratio;
#X obj 30 11618 list.resize;
#X text 200 11618 changes list size;
#X obj 30 11645 list.reverse;
#X text 200 11645 reverses the order of the elements in the list;
#X obj 30 11672 list.rldecode;
#X text 200 11672 Run-length list decoder (RLE);
#X obj 30 11699 list.rlencode;
#X text 200 11699 RLE (run-length encoding) for lists;
#X obj 30 11726 list.rotate;
#X text 200 11726 rotates list;
#X obj 30 11753 list.route;
#X text 200 11753 acts like [route] but for lists;
#X obj 30 11780 list.rundiff;
#X text 200 11780 running difference;
#X obj 30 11807 list.runsum;
#X text 200 11807 running sum;
#X obj 30 11834 list.search;
#X text 200 11834 search specified items in input list;
#X obj 30 11861 list.separate;
#X text 200 11861 sends list elements one by one separately;
#X obj 30 11888 list.seq;
#X text 200 11888 numeric sequence list generator;
#X obj 30 11915 list.set;
#X text 200 11915 set list value at specified position;
#X obj 30 11942 list.shift;
#X text 200 11942 shifts the contents of the list with linear interpolation;
#X obj 30 11969 list.shuffle;
#X text 200 11969 randomly rearranges elements in list;
#X obj 30 11996 list.slice;
#X text 200 11996 extract sublist;
#X obj 30 12023 list.sort;
#X text 200 12023 sorts list values by ascending order;
#X obj 30 12050 list.sort_with;
#X text 200 12050 sort list with user defined side-chain;
#X obj 30 12077 list.split;
#X text 200 12077 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 12117 list.stretch;
#X text 200 12117 stretches list - changes its size with linear interpolation;
#X obj 30 12144 list.sum;
#X text 200 12144 calculates sum of floats in list;
#X obj 30 12171 list.unique;
#X text 200 12171 removes duplicates from input list;
#X obj 30 12198 list.unpack;
#X text 200 12198 unpack list elements to separate outlets;
#X obj 30 12225 list.unzip;
#X text 200 12225 splits list to N lists \, each to separate output;
#X obj 30 12252 list.walk;
#X text 200 12252 Walks thru the list;
#X obj 30 12279 list.zip;
#X text 200 12279 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 12334 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 12375 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12386 live.capture~;
#X text 200 12386 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 12426 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 12467 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12478 local.dict;
#X text 200 12478 local named dict object;
#X obj 30 12505 local.float;
#X text 200 12505 canvas-scoped named float variable;
#X obj 30 12532 local.int;
#X text 200 12532 canvas-scoped named integer variable;
#X obj 30 12559 local.list;
#X text 200 12559 local named list object;
#X obj 30 12586 local.mlist;
#X text 200 12586 local named mlist object;
#X obj 30 12613 local.set;
#X text 200 12613 local named set object;
#X obj 20 12640 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 12681 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12692 math.abs;
#X text 200 12692 absolute value function;
#X obj 30 12719 math.abs~;
#X text 200 12719 absolute value function for signals;
#X obj 30 12746 math.acos;
#X text 200 12746 arc cosine function;
#X obj 30 12773 math.acosh;
#X text 200 12773 inverse hyperbolic cosine function;
#X obj 30 12800 math.acosh~;
#X text 200 12800 hyperbolic arc cosine for signals;
#X obj 30 12827 math.acos~;
#X text 200 12827 arc cosine function for signals;
#X obj 30 12854 math.and;
#X text 200 12854 operation AND for multiple arguments;
#X obj 30 12881 math.approx;
#X text 200 12881 check if input value approximately equal to pattern;
#X obj 30 12908 math.asin;
#X text 200 12908 arc sine function;
#X obj 30 12935 math.asinh;
#X text 200 12935 inverse hyperbolic sine function;
#X obj 30 12962 math.asinh~;
#X text 200 12962 hyperbolic arc sine for signals;
#X obj 30 12989 math.asin~;
#X text 200 12989 arc sine for signals;
#X obj 30 13016 math.atan;
#X text 200 13016 arc tangent function;
#X obj 30 13043 math.atanh;
#X text 200 13043 inverse hyperbolic tangent function;
#X obj 30 13070 math.atanh~;
#X text 200 13070 hyperbolic arc tangent for signals;
#X obj 30 13097 math.atan~;
#X text 200 13097 arc tangent for signals;
#X obj 30 13124 math.binomial;
#X text 200 13124 binomial coefficient calculator;
#X obj 30 13151 math.cabs~;
#X text 200 13151 magnitude of a complex signals;
#X obj 30 13178 math.carg~;
#X text 200 13178 phase angle of a complex signals;
#X obj 30 13205 math.cbrt;
#X text 200 13205 cube root function;
#X obj 30 13232 math.cbrt~;
#X text 200 13232 cube root function for signals;
#X obj 30 13259 math.cdiv~;
#X text 200 13259 division of complex signals;
#X obj 30 13286 math.ceil;
#X text 200 13286 round to smallest integral value not less than input
value;
#X obj 30 13313 math.ceil~;
#X text 200 13313 round to smallest integral value not less than input
value;
#X obj 30 13340 math.cexp~;
#X text 200 13340 exponent of a complex signals;
#X obj 30 13367 math.cmul~;
#X text 200 13367 multiplication of complex signals;
#X obj 30 13394 math.cos;
#X text 200 13394 cosine function;
#X obj 30 13421 math.cosh;
#X text 200 13421 hyperbolic cosine function;
#X obj 30 13448 math.cosh~;
#X text 200 13448 hyperbolic cosine for signals;
#X obj 30 13475 math.cos~;
#X text 200 13475 cosine function;
#X obj 30 13502 math.div;
#X text 200 13502 division (on lists too);
#X obj 30 13529 math.e;
#X text 200 13529 mathematical constant \, base of the natural logarithm;
#X obj 30 13556 math.erf;
#X text 200 13556 error function;
#X obj 30 13583 math.erf~;
#X text 200 13583 error function for signals;
#X obj 30 13610 math.exp;
#X text 200 13610 exponential functions;
#X obj 30 13637 math.exp2;
#X text 200 13637 exponential functions;
#X obj 30 13664 math.exp2~;
#X text 200 13664 base-2 exponential for signal;
#X obj 30 13691 math.expr;
#X text 200 13691 dynamic [expr];
#X obj 30 13718 math.exp~;
#X text 200 13718 base-e exponential for signal;
#X obj 30 13745 math.floor;
#X text 200 13745 round to largest integral value not greater than
x;
#X obj 30 13772 math.floor~;
#X text 200 13772 round to largest integral value not greater than
x;
#X obj 30 13799 math.gamma;
#X text 200 13799 gamma function;
#X obj 30 13826 math.gamma~;
#X text 200 13826 gamma function for floating point signals;
#X obj 30 13853 math.gcd;
#X text 200 13853 calculate greatest common divisor;
#X obj 30 13880 math.inf;
#X text 200 13880 infinity value that cannot be represented accurately;
#X obj 30 13907 math.inf~;
#X text 200 13907 inifinity signal generator;
#X obj 30 13934 math.lcm;
#X text 200 13934 calculate least common multiple;
#X obj 30 13961 math.lgamma;
#X text 200 13961 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13988 math.lgamma~;
#X text 200 13988 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 14028 math.log;
#X text 200 14028 natural logarithm;
#X obj 30 14055 math.log10;
#X text 200 14055 logarithm functions;
#X obj 30 14082 math.log10~;
#X text 200 14082 natural logarithm;
#X obj 30 14109 math.log2;
#X text 200 14109 logarithm functions;
#X obj 30 14136 math.log2~;
#X text 200 14136 base-2 logarithm;
#X obj 30 14163 math.log~;
#X text 200 14163 natural logarithm;
#X obj 30 14190 math.mul;
#X text 200 14190 multiplication (on lists too);
#X obj 30 14217 math.nan;
#X text 200 14217 Not a Number \, unrepresentable value;
#X obj 30 14244 math.nan~;
#X text 200 14244 signal NaN;
#X obj 30 14271 math.neg;
#X text 200 14271 negate function;
#X obj 30 14298 math.or;
#X text 200 14298 operation OR for multiple arguments;
#X obj 30 14325 math.pi;
#X text 200 14325 mathematical constant;
#X obj 30 14352 math.pi~;
#X text 200 14352 mathematical constant;
#X obj 30 14379 math.polyeval;
#X text 200 14379 evaluates the polynomial described by the coefficients
list;
#X obj 30 14406 math.reciprocal;
#X text 200 14406 calculate reciprocal number;
#X obj 30 14433 math.reciprocal~;
#X text 200 14433 calculate reciprocal number for signals;
#X obj 30 14460 math.round;
#X text 200 14460 round to integral value \, regardless of rounding
direction;
#X obj 30 14487 math.round~;
#X text 200 14487 signal round;
#X obj 30 14514 math.sign;
#X text 200 14514 sign function;
#X obj 30 14541 math.sin;
#X text 200 14541 sine function;
#X obj 30 14568 math.sinh;
#X text 200 14568 hyperbolic sine function;
#X obj 30 14595 math.sinh~;
#X text 200 14595 hyperbolic sine for signals;
#X obj 30 14622 math.sin~;
#X text 200 14622 sine function;
#X obj 30 14649 math.sqrt;
#X text 200 14649 square root function;
#X obj 30 14676 math.sqrt~;
#X text 200 14676 square root for signal;
#X obj 30 14703 math.squared;
#X text 200 14703 value square;
#X obj 30 14730 math.squared~;
#X text 200 14730 signal value square;
#X obj 30 14757 math.sync_add;
#X text 200 14757 sync addition;
#X obj 30 14784 math.sync_and;
#X text 200 14784 sync logical AND operation;
#X obj 30 14811 math.sync_div;
#X text 200 14811 sync division;
#X obj 30 14838 math.sync_eq;
#X text 200 14838 sync equal numbers check;
#X obj 30 14865 math.sync_ge;
#X text 200 14865 sync greater equal numbers compare;
#X obj 30 14892 math.sync_gt;
#X text 200 14892 sync greater then numbers compare;
#X obj 30 14919 math.sync_le;
#X text 200 14919 sync less equal numbers compare;
#X obj 30 14946 math.sync_lshift;
#X text 200 14946 sync signed bit left shift;
#X obj 30 14973 math.sync_lt;
#X text 200 14973 sync less then numbers compare;
#X obj 30 15000 math.sync_mod;
#X text 200 15000 sync remainder of modulo division (float or integer);
#X obj 30 15027 math.sync_mul;
#X text 200 15027 sync multiplication;
#X obj 30 15054 math.sync_ne;
#X text 200 15054 sync numbers for not equality;
#X obj 30 15081 math.sync_or;
#X text 200 15081 sync logical OR operation;
#X obj 30 15108 math.sync_rshift;
#X text 200 15108 sync signed bit right shift;
#X obj 30 15135 math.sync_sub;
#X text 200 15135 sync subtraction;
#X obj 30 15162 math.sync_xor;
#X text 200 15162 sync logical XOR operation;
#X obj 30 15189 math.tan;
#X text 200 15189 tangent function;
#X obj 30 15216 math.tanh;
#X text 200 15216 hyperbolic tangent function;
#X obj 30 15243 math.tanh~;
#X text 200 15243 hyperbolic tangent for signals;
#X obj 30 15270 math.tan~;
#X text 200 15270 tangent function;
#X obj 30 15297 math.trunc;
#X text 200 15297 truncate to integer value;
#X obj 30 15324 math.trunc~;
#X text 200 15324 truncate to integer value;
#X obj 20 15351 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 15392 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15403 midi.arp;
#X text 200 15403 MIDI arpeggiator;
#X obj 30 15430 midi.cc;
#X text 200 15430 enhanced version of vanilla ctlin;
#X obj 30 15457 midi.clock;
#X text 200 15457 midi clock toolbox;
#X obj 30 15484 midi.ctl2str;
#X text 200 15484 convert Standard MIDI Controllers number to name;
#X obj 30 15511 midi.event2ctl;
#X text 200 15511 convert MidiEvent message to controller channel/value
pair;
#X obj 30 15538 midi.event2note;
#X text 200 15538 convert MidiEvent message to midi note/velocity pair;
#X obj 30 15565 midi.event2prg;
#X text 200 15565 convert MidiEvent message to midi program change
value;
#X obj 30 15592 midi.file;
#X text 200 15592 standard midi file SMF reader and writer;
#X obj 30 15619 midi.kbd;
#X text 200 15619 computer keyboard midi;
#X obj 30 15646 midi.key2str;
#X text 200 15646 convert key number to SPN name according to tonality;
#X obj 30 15673 midi.modus;
#X text 200 15673 snap/skip midi pitches according modus;
#X obj 30 15700 midi.note.pass;
#X text 200 15700 midi note pass by expression;
#X obj 30 15727 midi.oct;
#X text 200 15727 midi octave transpose;
#X obj 30 15754 midi.prg2str;
#X text 200 15754 convert GM Instrument number to name (string or symbol);
#X obj 30 15781 midi.split;
#X text 200 15781 midi note splitter;
#X obj 30 15808 midi.sustain;
#X text 200 15808 sustain pedal emulation;
#X obj 30 15835 midi.sysex;
#X text 200 15835 sysex input messages as list;
#X obj 30 15862 midi.track;
#X text 200 15862 extract track from MidiFile;
#X obj 30 15889 midi.tuning;
#X text 200 15889 apply tuning to midi messages;
#X obj 30 15916 midi.vramp;
#X text 200 15916 apply crescendo or diminuendo for midi message flow;
#X obj 30 15943 midi.vrand;
#X text 200 15943 midi velocity randomizer;
#X obj 20 15970 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 16011 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16022 click~;
#X text 200 16022 Output single impulse on bang;
#X obj 30 16049 fluid~;
#X text 200 16049 FluidSynth SoundFont 2 player;
#X obj 30 16076 modplug~;
#X text 200 16076 MOD file player (using libmodplug);
#X obj 30 16103 qrcode;
#X text 200 16103 QR code generator;
#X obj 30 16130 risset.gliss;
#X text 200 16130 Sheppard/Risset glissando calculator;
#X obj 30 16157 sfizz~;
#X text 200 16157 SFZ format sample player;
#X obj 30 16184 speech.flite;
#X text 200 16184 render speech to array;
#X obj 30 16211 speech.flite~;
#X text 200 16211 render speech to array;
#X obj 30 16238 speech.rhvoice~;
#X text 200 16238 RHVoice text to speech synthesis;
#X obj 20 16265 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 16306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16317 loadexpr;
#X text 200 16317 send message when patch loads;
#X obj 30 16344 msg;
#X text 200 16344 message constructor;
#X obj 30 16371 msg.after;
#X text 200 16371 send specified message after incoming message;
#X obj 30 16398 msg.onclose;
#X text 200 16398 send message when patch closes;
#X obj 30 16425 msg.onload;
#X text 200 16425 send message when patch loads;
#X obj 30 16452 msg.pack;
#X text 200 16452 message pack;
#X obj 30 16479 msg.sched;
#X text 200 16479 message scheduler;
#X obj 20 16506 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 16547 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16558 rhythm.euclid;
#X text 200 16558 euclid pattern generator;
#X obj 30 16585 rhythm.hexbeat;
#X text 200 16585 hexbeat pattern generator;
#X obj 30 16612 rhythm.lsystem;
#X text 200 16612 L-system pattern generator;
#X obj 20 16639 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 16680 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16691 net.artnet.send;
#X text 200 16691 ArtNet DMX message sender;
#X obj 30 16718 net.host2ip;
#X text 200 16718 returns IP address by DNS name;
#X obj 30 16745 net.http.send;
#X text 200 16745 HTTP request sender;
#X obj 30 16772 net.osc.receive;
#X text 200 16772 OSC message listener;
#X obj 30 16799 net.osc.send;
#X text 200 16799 OSC message sender;
#X obj 30 16826 net.osc.server;
#X text 200 16826 OSC server control;
#X obj 20 16853 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 16894 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16905 noise.baker;
#X text 200 16905 Part of a-chaos library;
#X obj 30 16932 noise.clifford;
#X text 200 16932 clifford attractor;
#X obj 30 16959 noise.collatz;
#X text 200 16959 collatz conjecture output;
#X obj 30 16986 noise.colored~;
#X text 200 16986 colored noise generator with an arbitrary spectral
roll;
#X obj 30 17013 noise.crackle~;
#X text 200 17013 sparse noise generator;
#X obj 30 17040 noise.duffing;
#X text 200 17040 duffing attractor;
#X obj 30 17067 noise.ginger;
#X text 200 17067 Gingerbreadman map chaotic generator;
#X obj 30 17094 noise.henon;
#X text 200 17094 henon attractor;
#X obj 30 17121 noise.henon_heilles;
#X text 200 17121 Hénon–Heiles_system;
#X obj 30 17148 noise.henon_phase;
#X text 200 17148 henon phase Ddagrams;
#X obj 30 17175 noise.henonf;
#X text 200 17175 Henon phase;
#X obj 30 17202 noise.ikeda;
#X text 200 17202 Ikeda attractor;
#X obj 30 17229 noise.lfreq0~;
#X text 200 17229 sampled/held noise (piecewise constant);
#X obj 30 17256 noise.lfreq~;
#X text 200 17256 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 17283 noise.lorenz;
#X text 200 17283 Lorenz chaos;
#X obj 30 17310 noise.lyapunov;
#X text 200 17310 lyapunov random attractor;
#X obj 30 17337 noise.navier_stokes;
#X text 200 17337 navier-stokes diff equations;
#X obj 30 17364 noise.pink~;
#X text 200 17364 Pink noise generator;
#X obj 30 17391 noise.rossler;
#X text 200 17391 Rössler attractor;
#X obj 30 17418 noise.stein;
#X text 200 17418 Stein distribution;
#X obj 30 17445 noise.torus;
#X text 200 17445 torus attractor;
#X obj 30 17472 noise.verhulst;
#X text 200 17472 verhulst distribution;
#X obj 30 17499 noise.white~;
#X text 200 17499 White noise generator;
#X obj 20 17526 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 17567 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17578 osc.blit~;
#X text 200 17578 Bandlimited impulse train oscillator;
#X obj 30 17605 osc.impulse~;
#X text 200 17605 Bandlimited impulse train generator;
#X obj 30 17632 osc.pulse~;
#X text 200 17632 Bandlimited pulse train oscillator;
#X obj 30 17659 osc.saw4~;
#X text 200 17659 Bandlimited sawtooth wave;
#X obj 30 17686 osc.saw~;
#X text 200 17686 Alias-free sawtooth wave;
#X obj 30 17713 osc.sinfb~;
#X text 200 17713 Sine oscilator with feedback;
#X obj 30 17740 osc.sin~;
#X text 200 17740 Sine wave oscillator;
#X obj 30 17767 osc.square~;
#X text 200 17767 Bandlimited square wave oscillator;
#X obj 30 17794 osc.tri~;
#X text 200 17794 Bandlimited triangle wave oscillator;
#X obj 20 17821 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 17862 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17873 canvas.active;
#X text 200 17873 checks if canvas window is on top and active;
#X obj 30 17900 canvas.current;
#X text 200 17900 verbose information about current canvas;
#X obj 30 17927 canvas.dir;
#X text 200 17927 current canvas directory and nesting level;
#X obj 30 17954 canvas.name;
#X text 200 17954 current canvas name;
#X obj 30 17981 canvas.path;
#X text 200 17981 current canvas fullpath;
#X obj 30 18008 canvas.top;
#X text 200 18008 verbose information about top-level canvas;
#X obj 30 18035 patch.args;
#X text 200 18035 Get patch or subpatch arguments;
#X obj 30 18062 patch.deps;
#X text 200 18062 patch dependencies: used objects and abstractions;
#X obj 30 18089 patch.tree;
#X text 200 18089 patch tree;
#X obj 20 18116 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 18157 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18168 file.size;
#X text 200 18168 output file size;
#X obj 30 18195 path.basename;
#X text 200 18195 outputs filename portion of pathname;
#X obj 30 18222 path.dirname;
#X text 200 18222 outputs directory portion of pathname;
#X obj 30 18249 path.exists;
#X text 200 18249 checks if given path exists;
#X obj 30 18276 path.file;
#X text 200 18276 file input/output;
#X obj 30 18303 path.is_dir;
#X text 200 18303 check if path is directory;
#X obj 30 18330 path.lsdir;
#X text 200 18330 list directory contents;
#X obj 30 18357 path.monitor;
#X text 200 18357 filesystem event monitor;
#X obj 30 18384 path.normalize;
#X text 200 18384 normalize file paths;
#X obj 30 18411 path.pattern;
#X text 200 18411 pattern filename generator;
#X obj 30 18438 path.search;
#X text 200 18438 file search;
#X obj 30 18465 path.split;
#X text 200 18465 file path split;
#X obj 20 18492 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 18533 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18544 is_any;
#X text 200 18544 checks if input data has *any* type;
#X obj 30 18571 is_bang;
#X text 200 18571 checks if input data has *bang* type;
#X obj 30 18598 is_data;
#X text 200 18598 checks if input data has *data* type;
#X obj 30 18625 is_dict;
#X text 200 18625 checks if input data has *dict* type;
#X obj 30 18652 is_even;
#X text 200 18652 checks if input number is even;
#X obj 30 18679 is_file;
#X text 200 18679 checks if file exists and accessible;
#X obj 30 18706 is_float;
#X text 200 18706 checks if input data has *float* type;
#X obj 30 18733 is_list;
#X text 200 18733 checks if input data has *list* type;
#X obj 30 18760 is_odd;
#X text 200 18760 checks if input number is odd;
#X obj 30 18787 is_pointer;
#X text 200 18787 checks if input data has *pointer* type;
#X obj 30 18814 is_prop;
#X text 200 18814 checks if input message is *property* message;
#X obj 30 18841 is_symbol;
#X text 200 18841 checks if input data has *symbol* type;
#X obj 20 18868 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 18909 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18920 preset.float;
#X text 200 18920 load/store float preset;
#X obj 30 18947 preset.list;
#X text 200 18947 load/store symbol preset;
#X obj 30 18974 preset.storage;
#X text 200 18974 preset storage control;
#X obj 30 19001 preset.symbol;
#X text 200 19001 load/store symbol preset;
#X obj 20 19028 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 19069 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19080 patch.props;
#X text 200 19080 patch properties manager;
#X obj 30 19107 prop;
#X text 200 19107 get/set named property value for subpatch or abstraction;
#X obj 30 19134 prop.declare;
#X text 200 19134 declare named property for subpatch or abstraction;
#X obj 30 19161 prop.get;
#X text 200 19161 get property from connected object/subpatch/abstraction;
#X obj 30 19188 prop.get~;
#X text 200 19188 Property extractor from sound stream;
#X obj 30 19215 prop.join;
#X text 200 19215 join property to main data flow;
#X obj 30 19242 prop.random;
#X text 200 19242 property randomizer;
#X obj 30 19269 prop.set;
#X text 200 19269 set property for connected object/subpatch/abstraction;
#X obj 30 19296 prop.split;
#X text 200 19296 separate properties from dataflow;
#X obj 20 19323 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 19364 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19375 proto.arturia.minilab;
#X text 200 19375 simple SysEx control for Arturia MiniLab;
#X obj 30 19402 proto.feelworld;
#X text 200 19402 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 19429 proto.firmata;
#X text 200 19429 Firmata Arduino protocol support;
#X obj 30 19456 proto.inscore;
#X text 200 19456 INScore message creator;
#X obj 30 19483 proto.ltc.in~;
#X text 200 19483 LTC decoder;
#X obj 30 19510 proto.ltc.out~;
#X text 200 19510 LTC encoder;
#X obj 30 19537 proto.midi;
#X text 200 19537 raw midi encoder/parser;
#X obj 30 19564 proto.midi.cc;
#X text 200 19564 raw midi CC encoder/parser;
#X obj 30 19591 proto.midi.sysex;
#X text 200 19591 raw midi SYSex encoder/parser;
#X obj 30 19618 proto.moppy;
#X text 200 19618 protocol for Musical flOPPY controller;
#X obj 30 19645 proto.morse;
#X text 200 19645 Morse encoder;
#X obj 30 19672 proto.mpv;
#X text 200 19672 mpv video player control;
#X obj 30 19699 proto.sp.alpaca;
#X text 200 19699 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 19726 proto.vlc;
#X text 200 19726 VLC video player control over HTTP;
#X obj 30 19753 proto.whammy;
#X text 200 19753 Control for Digitech Whammy pedal;
#X obj 30 19780 proto.xtouch_ext;
#X text 200 19780 Behringer XTouch Extender XMidi protocol;
#X obj 20 19807 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 19848 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19859 random.atom;
#X text 200 19859 weighted atom generation from specified list;
#X obj 30 19886 random.discrete;
#X text 200 19886 random weighted integers on interval [0 \, n);
#X obj 30 19913 random.float;
#X text 200 19913 uniform random float generator in specified range;
#X obj 30 19940 random.gauss;
#X text 200 19940 gaussian random distribution;
#X obj 30 19967 random.int;
#X text 200 19967 uniform random integer generator in specified range;
#X obj 30 19994 random.linear;
#X text 200 19994 random linear distribution;
#X obj 30 20021 random.pw_const;
#X text 200 20021 piecewise constant random distribution;
#X obj 30 20048 random.pw_lin;
#X text 200 20048 piecewise linear random distribution;
#X obj 20 20075 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 20116 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20127 samp.time~;
#X text 200 20127 sample counter;
#X obj 20 20154 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 20195 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20206 seq.arp;
#X text 200 20206 sequence arpeggiator;
#X obj 30 20233 seq.bangs;
#X text 200 20233 bang sequencer;
#X obj 30 20260 seq.counter;
#X text 200 20260 sequencer counter;
#X obj 30 20287 seq.life;
#X text 200 20287 Conway game of life sequencer;
#X obj 30 20314 seq.matrix;
#X text 200 20314 sequencer control for ui.matrix;
#X obj 30 20341 seq.nbangs;
#X text 200 20341 output specified number of bang with time intervals;
#X obj 30 20368 seq.phasor;
#X text 200 20368 control rate phasor (saw) generator;
#X obj 30 20395 seq.toggles;
#X text 200 20395 toggle sequencer;
#X obj 30 20422 sequencer;
#X text 200 20422 basic sequence player;
#X obj 20 20449 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 20490 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20501 snd.file;
#X text 200 20501 Sound file loader on steroids;
#X obj 30 20528 snd.play~;
#X text 200 20528 Sound file player on steriods;
#X obj 20 20555 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 20596 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20607 hoa.2d.decoder~;
#X text 200 20607 hoa 2d decoder;
#X obj 30 20634 hoa.2d.encoder~;
#X text 200 20634 hoa 2d encoder;
#X obj 30 20661 hoa.2d.map~;
#X text 200 20661 a 2d ambisonic multisource spatializer;
#X obj 30 20688 hoa.2d.optim~;
#X text 200 20688 a 2D ambisonic optimization tool;
#X obj 30 20715 hoa.2d.projector~;
#X text 200 20715 a plane waves decomposer from circular harmonics
domain;
#X obj 30 20742 hoa.2d.recomposer~;
#X text 200 20742 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 20782 hoa.2d.rotate~;
#X text 200 20782 a 2D ambisonic sound field rotation;
#X obj 30 20812 ui.link @title [hoa.2d.space] @url
hoa.2d.space-help.pd;
#X text 200 20809 planewaves amp control;
#X obj 30 20834 hoa.2d.wider~;
#X text 200 20834 a 2d fractional ambisonic order simulator;
#X obj 30 20861 hoa.3d.decoder~;
#X text 200 20861 hoa 3d decoder;
#X obj 30 20888 hoa.3d.encoder~;
#X text 200 20888 hoa 3d encoder;
#X obj 30 20915 hoa.3d.optim~;
#X text 200 20915 a 3D ambisonic optimization tool;
#X obj 30 20942 hoa.3d.wider~;
#X text 200 20942 a 3d fractional ambisonic order simulator;
#X obj 30 20969 hoa.@process;
#X text 200 20969 process properties manager for hoa.process~;
#X obj 30 20996 hoa.in;
#X text 200 20996 message inlet for a patcher loaded by hoa.process~;
#X obj 30 21023 hoa.in~;
#X text 200 21023 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 21050 hoa.out;
#X text 200 21050 message outlet for a patcher loaded by hoa.process~;
#X obj 30 21077 hoa.out~;
#X text 200 21077 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 21104 hoa.process~;
#X text 200 21104 patcher loader for multichannel processing;
#X obj 30 21134 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 21131 a 2d ambisonic harmonic scope;
#X obj 30 21156 pan.cos~;
#X text 200 21156 two channel equal power sine/cosine panner;
#X obj 30 21183 pan.linsig~;
#X text 200 21183 two channel linear panner with signal control;
#X obj 30 21210 pan.lin~;
#X text 200 21210 two channel linear panner;
#X obj 30 21237 pan.spread~;
#X text 200 21237 spreads input channels across the stereo field;
#X obj 30 21264 pan.sqrt~;
#X text 200 21264 two channel equal power square root panner;
#X obj 30 21291 spat.pan4~;
#X text 200 21291 GMEM SPAT: 4-outputs spatializer;
#X obj 30 21318 spat.pan8~;
#X text 200 21318 GMEM SPAT: 8-outputs spatializer;
#X obj 30 21345 spat.zita6x8~;
#X text 200 21345 spat with 6 inputs sources to 8 channel output;
#X obj 30 21372 spat.zita8~;
#X text 200 21372 8 channel reverb spatializer;
#X obj 20 21399 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 21440 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21451 string;
#X text 200 21451 string constructor;
#X obj 30 21478 string.contains;
#X text 200 21478 checks if string contains specified substring;
#X obj 30 21505 string.ends_with;
#X text 200 21505 checks if string ends with specified substring;
#X obj 30 21532 string.equal;
#X text 200 21532 check strings or symbols for equality;
#X obj 30 21559 string.format;
#X text 200 21559 formats string like printf.;
#X obj 30 21586 string.join;
#X text 200 21586 joins (concatenates) list to string with separator;
#X obj 30 21613 string.length;
#X text 200 21613 number of characters in string (unicode supported);
#X obj 30 21640 string.match;
#X text 200 21640 check if string match regular expression;
#X obj 30 21667 string.remove;
#X text 200 21667 remove substring from input string;
#X obj 30 21694 string.replace;
#X text 200 21694 replace from one substring to another in input string;
#X obj 30 21721 string.split;
#X text 200 21721 split string or symbol by separator;
#X obj 30 21748 string.starts_with;
#X text 200 21748 checks if string starts with specified substring;
#X obj 30 21775 string.substr;
#X text 200 21775 extract substring from input string;
#X obj 30 21802 string2symbol;
#X text 200 21802 converts string to symbol;
#X obj 20 21829 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 21870 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21881 symbol.equal;
#X text 200 21881 check symbols for equality;
#X obj 30 21908 symbol.length;
#X text 200 21908 number of characters in symbol (unicode supported);
#X obj 30 21935 symbol.num_compare;
#X text 200 21935 numeric symbol compare;
#X obj 30 21962 symbol2any;
#X text 200 21962 converts symbol or string to message;
#X obj 30 21989 symbol2intlist;
#X text 200 21989 converts symbol to list of character codes;
#X obj 20 22016 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 22057 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22068 noise.chua~;
#X text 200 22068 Chua's diode circuit;
#X obj 30 22095 synth.bee3~;
#X text 200 22095 Hammond-oid organ FM synthesis instrument;
#X obj 30 22122 synth.birds~;
#X text 200 22122 bird singing generator;
#X obj 30 22149 synth.church_bell~;
#X text 200 22149 generic church bell modal model;
#X obj 30 22176 synth.clap~;
#X text 200 22176 clap synth from faust libraries;
#X obj 30 22203 synth.dubdub~;
#X text 200 22203 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 22243 synth.dx7~;
#X text 200 22243 FAUST dx7 implementation;
#X obj 30 22270 synth.eguitar~;
#X text 200 22270 simple electric guitar model with steel strings;
#X obj 30 22297 synth.english_bell~;
#X text 200 22297 english church bell modal model;
#X obj 30 22324 synth.fgrain~;
#X text 200 22324 file granulator from STK;
#X obj 30 22351 synth.french_bell~;
#X text 200 22351 french church bell modal model;
#X obj 30 22378 synth.german_bell~;
#X text 200 22378 german church bell modal model;
#X obj 30 22405 synth.glass_harm~;
#X text 200 22405 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 22432 synth.glitch~;
#X text 200 22432 Glitch synthesizer by naivesound;
#X obj 30 22459 synth.harpsichord~;
#X text 200 22459 waveguide commuted harpsichord;
#X obj 30 22486 synth.hat~;
#X text 200 22486 hi-hat synth from faust librariest;
#X obj 30 22513 synth.kick2~;
#X text 200 22513 low-kick synth from faust librariest;
#X obj 30 22540 synth.kick~;
#X text 200 22540 low-kick synth from Guitarix project;
#X obj 30 22567 synth.ks~;
#X text 200 22567 Karplus-Strong string;
#X obj 30 22594 synth.marimba~;
#X text 200 22594 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 22634 synth.metro~;
#X text 200 22634 ready to use metronome synth;
#X obj 30 22661 synth.piano~;
#X text 200 22661 waveguide commuted piano;
#X obj 30 22688 synth.rhodey~;
#X text 200 22688 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 22715 synth.risset_arp~;
#X text 200 22715 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 22742 synth.risset_bell~;
#X text 200 22742 Jean Claude Risset's bell synth;
#X obj 30 22769 synth.risset_tone~;
#X text 200 22769 Jean Claude Risset's endless glissando;
#X obj 30 22796 synth.russian_bell~;
#X text 200 22796 russian church bell modal model;
#X obj 30 22823 synth.shakers~;
#X text 200 22823 various percussion sounds from STK library;
#X obj 30 22850 synth.sitar~;
#X text 200 22850 STK sitar;
#X obj 30 22877 synth.snare~;
#X text 200 22877 Snare drum synth from Guitarix project;
#X obj 30 22904 synth.standard_bell~;
#X text 200 22904 german church bell modal model;
#X obj 30 22931 synth.tube_bell~;
#X text 200 22931 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 22958 synth.voice_fofc~;
#X text 200 22958 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 22985 synth.voice_fofs~;
#X text 200 22985 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 23012 synth.wurley~;
#X text 200 23012 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 23039 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 23080 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23091 system.colorpanel;
#X text 200 23091 System color panel dialog popup;
#X obj 30 23118 system.cursor;
#X text 200 23118 Output cursor motion \, mousewheel and button clicks;
#X obj 30 23145 system.exec;
#X text 200 23145 run external command in separate process;
#X obj 30 23172 system.exit;
#X text 200 23172 quit PureData;
#X obj 30 23199 system.getenv;
#X text 200 23199 Get system environment variables;
#X obj 30 23226 system.hostname;
#X text 200 23226 outputs system hostname;
#X obj 30 23253 system.memsize;
#X text 200 23253 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 23293 system.memused;
#X text 200 23293 returns the process physical memory use - current
and peak;
#X obj 30 23320 system.screen_size;
#X text 200 23320 returns current screen size in pixels;
#X obj 20 23347 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 23388 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23399 tl.bang;
#X text 200 23399 Timeline bang (with possible delay);
#X obj 30 23429 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 23426 Timeline section;
#X obj 30 23451 tl.timeline;
#X text 200 23451 Timeline - event scheduler;
#X obj 30 23478 tl.toggle;
#X text 200 23478 Timeline bang;
#X obj 30 23505 tl.transport;
#X text 200 23505 Timeline transport control;
#X obj 20 23532 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 23573 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23587 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 23584 array view with cursor and selection;
#X obj 30 23612 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 23609 A bang... that's all;
#X obj 30 23637 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 23634 button widget;
#X obj 30 23662 ui.link @title [ui.canvas] @url ui.canvas-help.pd;
#X text 200 23659 UI canvas for drawing;
#X obj 30 23687 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 23684 colorchooser widget;
#X obj 30 23712 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 23709 Display GUI object;
#X obj 30 23737 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 23734 GUI for turning DSP on/off;
#X obj 30 23762 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 23759 envelope editor widget;
#X obj 30 23787 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 23784 UI filter object calculator for biquad filter;
#X obj 30 23812 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 23809 UI filter object based on biquad filter;
#X obj 30 23837 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 23834 UI stereo gain control;
#X obj 30 23862 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 23859 UI gain control;
#X obj 30 23887 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 23884 simple icon with button capabilities;
#X obj 30 23912 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 23909 value increment/decrement;
#X obj 30 23937 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 23934 keyboard widget;
#X obj 30 23962 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 23959 knob widget;
#X obj 30 23987 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 23984 simple label widget;
#X obj 30 24012 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 24009 black and white bitmap display;
#X obj 30 24037 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 24034 Hyperlink widget;
#X obj 30 24062 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 24059 The matrix of toggles has you.;
#X obj 30 24087 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 24084 Dropdown menu;
#X obj 30 24112 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 24109 Shows peak and rms signal level;
#X obj 30 24137 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 24134 incoming MIDI message viewport;
#X obj 30 24162 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 24159 filter mouse events from ui objects;
#X obj 30 24187 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 24184 routes mouse events from ui objects;
#X obj 30 24212 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 24209 counterpart of the vanilla [nbx];
#X obj 30 24237 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 24234 counterpart of the vanilla [nbx] for signal;
#X obj 30 24262 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 24259 signal plotter;
#X obj 30 24287 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 24284 2D slider in polar coordinates;
#X obj 30 24312 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 24309 Preset manager;
#X obj 30 24337 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 24334 counterpart of the vanilla radio toggle;
#X obj 30 24362 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 24359 range slider;
#X obj 30 24387 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 24384 Scope GUI object;
#X obj 30 24412 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 24409 counterpart of the vanilla slider;
#X obj 30 24437 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 24434 2D slider widget;
#X obj 30 24462 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 24459 Multiple slider widget;
#X obj 30 24487 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 24484 Spectroscope GUI object;
#X obj 30 24512 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 24509 displays a list of text buttons or text toggles;
#X obj 30 24537 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 24534 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 24559 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 24559 version: v0.9.7 \, license: GPL3;
#X obj 20 24587 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 24610 ui.link @title Generated with pddoc v0.7.6 @url
http://github.com/uliss/pddoc;
#X obj 670 24574 loadmsg 0;
#X obj 670 24609 switch~;
#X connect 1722 0 1723 0;