#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 20 265 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 306 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 317 array.bpm;
#X text 200 317 BPM calculator;
#X obj 30 344 array.copy;
#X text 200 344 copy samples from one array to another;
#X obj 30 371 array.do;
#X text 200 371 iterate and modify array content via side-chain;
#X obj 30 398 array.each;
#X text 200 398 process each array elements via side-chain;
#X obj 30 425 array.fill;
#X text 200 425 fill array with single value or pattern;
#X obj 30 452 array.hist;
#X text 200 452 calculates array histogram;
#X obj 30 479 array.mean;
#X text 200 479 calculates array arithmetic mean value;
#X obj 30 506 array.minmax;
#X text 200 506 find array min and max element value;
#X obj 30 533 array.play~;
#X text 200 533 array player with variable speed and amplitude;
#X obj 30 560 array.plot~;
#X text 200 560 plot signal on specified array;
#X obj 30 587 array.resample;
#X text 200 587 array resampler;
#X obj 30 614 array.rms;
#X text 200 614 calculates root mean square value for array;
#X obj 30 641 array.set;
#X text 200 641 set array content from list;
#X obj 30 668 array.stddev;
#X text 200 668 calculates standard deviation for array values;
#X obj 30 695 array.stretch;
#X text 200 695 array time-stretch \, pitch-shift or rate-change;
#X obj 30 722 array.sum;
#X text 200 722 calculates sum of array elements;
#X obj 30 749 array.sum2;
#X text 200 749 calculates sum of squares of array elements;
#X obj 30 776 array.variance;
#X text 200 776 calculates variance of array values;
#X obj 30 803 array.vplay;
#X text 200 803 simple array player for using with vline~;
#X obj 30 830 array.window;
#X text 200 830 fill array with window;
#X obj 30 857 plot.geomspace~;
#X text 200 857 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 897 plot.hist~;
#X text 200 897 calculate and output signal histogram;
#X obj 30 924 plot.linspace~;
#X text 200 924 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 964 plot.logspace~;
#X text 200 964 outputs numbers spaced evenly on a log scale;
#X obj 30 991 plot.response~;
#X text 200 991 output amp/phase freq response to impulse;
#X obj 20 1018 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1059 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1070 ceammc.search;
#X text 200 1070 ceammc library search object;
#X obj 30 1100 ui.link @title [function] @url function-help.pd;
#X text 200 1097 named function;
#X obj 30 1122 function.call;
#X text 200 1122 call named function;
#X obj 30 1149 gain~;
#X text 200 1149 multislot signal gain;
#X obj 30 1176 logger;
#X text 200 1176 advanced data logger;
#X obj 30 1203 matrix~;
#X text 200 1203 signal routing matrix;
#X obj 30 1230 metro.pattern;
#X text 200 1230 metro with rhythmic patterns;
#X obj 30 1257 metro.random;
#X text 200 1257 metro random bang with specified range;
#X obj 30 1284 metro.seq;
#X text 200 1284 metro sequencer;
#X obj 30 1311 mix~;
#X text 200 1311 multislot signal mixer;
#X obj 30 1338 nsig~;
#X text 200 1338 Mulitchannel converter from control to audio rate;
#X obj 30 1365 obj.props;
#X text 200 1365 property extractor;
#X obj 30 1392 radio;
#X text 200 1392 float index to outlet values as radio switch;
#X obj 30 1419 sync;
#X text 200 1419 value synchronization;
#X obj 30 1446 window;
#X text 200 1446 returns window value by given window position;
#X obj 30 1473 xdac~;
#X text 200 1473 dac~ with channel ranges;
#X obj 30 1500 xfade2~;
#X text 200 1500 multi stereo-signal crossfade;
#X obj 30 1527 xfade~;
#X text 200 1527 multi signal crossfade;
#X obj 20 1554 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1595 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1606 chaos.gbman0;
#X text 200 1606 Gingerbreadman map chaotic generator;
#X obj 30 1633 chaos.gbman0~;
#X text 200 1633 Gingerbreadman map chaotic generator;
#X obj 30 1660 chaos.jong;
#X text 200 1660 Peter de Jong attractor;
#X obj 30 1687 chaos.logistic;
#X text 200 1687 Logistic map chaotic generator;
#X obj 30 1714 chaos.std0;
#X text 200 1714 Standard map chaotic generator;
#X obj 30 1741 chaos.std0~;
#X text 200 1741 Standard map chaotic generator;
#X obj 20 1768 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1809 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1820 array.p2s;
#X text 200 1820 convert array phase [0\..1] to sample position;
#X obj 30 1847 array.s2p;
#X text 200 1847 convert array sample position to relative phase position
[0\..1];
#X obj 30 1887 conv.amp2dbfs;
#X text 200 1887 convert from amplitude to decibel full scale;
#X obj 30 1914 conv.amp2dbfs~;
#X text 200 1914 convert from amplitude to decibel full scale;
#X obj 30 1941 conv.bits2bang;
#X text 200 1941 convert list of bits to bang events;
#X obj 30 1968 conv.bits2int;
#X text 200 1968 convert list of bits to integer;
#X obj 30 1995 conv.bits2note;
#X text 200 1995 convert list of bits to note events;
#X obj 30 2022 conv.bits2pos;
#X text 200 2022 convert list of bits to list of bit position;
#X obj 30 2049 conv.bpm2hz;
#X text 200 2049 converts BPM to frequency in herz;
#X obj 30 2076 conv.bpm2ms;
#X text 200 2076 convert frequency in BPM to period in milliseconds;
#X obj 30 2103 conv.bpm2sec;
#X text 200 2103 convert frequency in BPM to period in seconds;
#X obj 30 2130 conv.car2pol;
#X text 200 2130 convert cartesian coords to polar;
#X obj 30 2157 conv.cc2amp;
#X text 200 2157 convert from MIDI Control Change range;
#X obj 30 2184 conv.dbfs2amp;
#X text 200 2184 convert decibel full scale to amplitude;
#X obj 30 2211 conv.dbfs2amp~;
#X text 200 2211 convert decibel full scale to amplitude;
#X obj 30 2238 conv.degree2key;
#X text 200 2238 convert scale degree to key;
#X obj 30 2265 conv.hex2int;
#X text 200 2265 hex symbol to int value;
#X obj 30 2292 conv.int2bits;
#X text 200 2292 convert integer to list of bits;
#X obj 30 2319 conv.lin2curve;
#X text 200 2319 map linear to exponential range with 0 allowed.;
#X obj 30 2346 conv.lin2exp;
#X text 200 2346 maps linear range to exponential range;
#X obj 30 2373 conv.lin2lin;
#X text 200 2373 convert from one linear range to another;
#X obj 30 2400 conv.lin2lin~;
#X text 200 2400 convert from one linear range to another for signals;
#X obj 30 2427 conv.list2props;
#X text 200 2427 converts list to series of property messages;
#X obj 30 2454 conv.midi2freq;
#X text 200 2454 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2494 conv.ms2bpm;
#X text 200 2494 convert period in milliseconds to frequency in BPM;
#X obj 30 2521 conv.ms2samp;
#X text 200 2521 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2561 conv.ms2samp~;
#X text 200 2561 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2601 conv.phase2rad;
#X text 200 2601 convert phase value [0-1] to radians [0-2π];
#X obj 30 2628 conv.phase2rad~;
#X text 200 2628 convert phase value [0-1] to radians [0-2π];
#X obj 30 2655 conv.pitch2midi;
#X text 200 2655 converts symbol pitch name to MIDI note number;
#X obj 30 2682 conv.pol2car;
#X text 200 2682 convert from polar coordinates to cartesian;
#X obj 30 2709 conv.rad2phase;
#X text 200 2709 convert radians value to phase;
#X obj 30 2736 conv.rad2phase~;
#X text 200 2736 convert radians value to phase;
#X obj 30 2763 conv.samp2ms;
#X text 200 2763 convert samples to time according to samplerate;
#X obj 30 2790 conv.samp2ms~;
#X text 200 2790 convert samples to milliseconds according to samplerate;
#X obj 30 2817 conv.samp2sec;
#X text 200 2817 convert samples to time according to samplerate;
#X obj 30 2844 conv.sec2bpm;
#X text 200 2844 convert period in seconds to frequency in BPM;
#X obj 30 2871 conv.sec2samp;
#X text 200 2871 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2911 conv.sec2str;
#X text 200 2911 converts float time in seconds to formated symbol
(or string);
#X obj 30 2938 conv.sig2float~;
#X text 200 2938 convert signal to floats;
#X obj 30 2965 conv.str2sec;
#X text 200 2965 converts formatted time to float value in seconds;
#X obj 20 2992 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3033 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3044 data.dict;
#X text 200 3044 dictionary container: store values by key;
#X obj 30 3071 data.fifo;
#X text 200 3071 First-In-First-Out (FIFO) queue data container;
#X obj 30 3098 data.float;
#X text 200 3098 robust float object;
#X obj 30 3125 data.int;
#X text 200 3125 robust int object;
#X obj 30 3152 data.list;
#X text 200 3152 list container;
#X obj 30 3179 data.mlist;
#X text 200 3179 multidimensional list container;
#X obj 30 3206 data.set;
#X text 200 3206 container that store unique elements;
#X obj 30 3233 data.set2list;
#X text 200 3233 converts set to list;
#X obj 30 3260 dict.contains;
#X text 200 3260 predicate to check if dict contains a keys;
#X obj 30 3287 dict.each;
#X text 200 3287 map each value in dict;
#X obj 30 3314 dict.from_list;
#X text 200 3314 creates dictionary from list;
#X obj 30 3341 dict.get;
#X text 200 3341 output dict values;
#X obj 30 3368 dict.keys;
#X text 200 3368 get list of dict keys;
#X obj 30 3395 dict.pass;
#X text 200 3395 passes specified keys in dict;
#X obj 30 3422 dict.reject;
#X text 200 3422 rejects specified keys from dict;
#X obj 30 3449 dict.size;
#X text 200 3449 dictionary size;
#X obj 30 3476 dict.to_list;
#X text 200 3476 converts dictionary to plain list;
#X obj 30 3503 dict.values;
#X text 200 3503 dictionary values as mlist;
#X obj 30 3530 mlist.flatten;
#X text 200 3530 flatten nested mlist;
#X obj 30 3557 rtree.to_list;
#X text 200 3557 convert OpenMusic-like rythm tree to list of fractions;
#X obj 30 3584 set.contains;
#X text 200 3584 check if specified element is in set;
#X obj 30 3611 set.diff;
#X text 200 3611 difference between two sets;
#X obj 30 3638 set.equal;
#X text 200 3638 checks if two sets are equal (contains same elements);
#X obj 30 3665 set.intersect;
#X text 200 3665 output intersection of given sets;
#X obj 30 3692 set.size;
#X text 200 3692 get number of elements in set;
#X obj 30 3719 set.symdiff;
#X text 200 3719 symmetric difference between two sets;
#X obj 30 3746 set.union;
#X text 200 3746 output union of given sets;
#X obj 20 3773 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3814 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3825 dyn.comp2~;
#X text 200 3825 stereo dynamic range compressor;
#X obj 30 3852 dyn.comp~;
#X text 200 3852 mono dynamic range compressors;
#X obj 30 3879 dyn.gate2~;
#X text 200 3879 stereo signal gate;
#X obj 30 3906 dyn.gate~;
#X text 200 3906 mono signal gate;
#X obj 30 3933 dyn.limit2~;
#X text 200 3933 stereo 1176LN Peak Limiter;
#X obj 30 3960 dyn.limit~;
#X text 200 3960 mono 1176LN Peak Limiter;
#X obj 30 3987 dyn.softclip~;
#X text 200 3987 soft signal clip;
#X obj 20 4014 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4055 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4066 env.adsr~;
#X text 200 4066 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4093 env.ar~;
#X text 200 4093 Attack/Release envelope generator;
#X obj 30 4120 env.asr~;
#X text 200 4120 Attack/Sustain/Release envelope generator;
#X obj 30 4147 env.concat;
#X text 200 4147 Envelope concatenation;
#X obj 30 4174 env.follow~;
#X text 200 4174 Envelope follower with independent attack and release
times;
#X obj 30 4201 env.mix;
#X text 200 4201 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4241 env.smooth~;
#X text 200 4241 An envelope with an exponential attack and release;
#X obj 30 4268 env.tscale;
#X text 200 4268 Envelope time-scale;
#X obj 30 4295 env.tshift;
#X text 200 4295 Envelope time-shift (horizontal);
#X obj 30 4322 env.vscale;
#X text 200 4322 Envelope value-scale;
#X obj 30 4349 env2array;
#X text 200 4349 Renders envelope to specified array;
#X obj 30 4376 env2vline;
#X text 200 4376 Converts envelope to bunch of vline messages;
#X obj 30 4403 envelope;
#X text 200 4403 Envelope data type;
#X obj 30 4430 vline2env;
#X text 200 4430 Converts vline messages to env;
#X obj 20 4457 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4498 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4509 expand_env;
#X text 200 4509 Substitute environment variables in data stream;
#X obj 30 4536 flow.append;
#X text 200 4536 append message to flow stream;
#X obj 30 4563 flow.change;
#X text 200 4563 rejects redundant input values;
#X obj 30 4590 flow.count;
#X text 200 4590 control flow event counter;
#X obj 30 4617 flow.delay;
#X text 200 4617 enhanced version on vanilla delay object;
#X obj 30 4644 flow.demultiplex;
#X text 200 4644 control flow demultiplexer;
#X obj 30 4671 flow.demultiplex2~;
#X text 200 4671 audio stream stereo demultiplexer;
#X obj 30 4698 flow.demultiplex~;
#X text 200 4698 audio stream demultiplexer;
#X obj 30 4725 flow.dup;
#X text 200 4725 message duplicator;
#X obj 30 4752 flow.gate;
#X text 200 4752 control flow gate. [spigot] analog;
#X obj 30 4779 flow.greater;
#X text 200 4779 numeric stream router;
#X obj 30 4806 flow.greater_eq;
#X text 200 4806 numeric stream router;
#X obj 30 4833 flow.group;
#X text 200 4833 group input atoms in list of specified size;
#X obj 30 4860 flow.interval;
#X text 200 4860 measure time between flow events;
#X obj 30 4887 flow.less;
#X text 200 4887 numeric stream router \, like many [moses];
#X obj 30 4914 flow.less_eq;
#X text 200 4914 numeric stream router \, like many [moses];
#X obj 30 4941 flow.match;
#X text 200 4941 route data flow by regexp match;
#X obj 30 4968 flow.mem;
#X text 200 4968 store data flow in memory;
#X obj 30 4995 flow.multiplex;
#X text 200 4995 control flow multiplexer;
#X obj 30 5022 flow.multiplex2~;
#X text 200 5022 audio stream stereo multiplexer;
#X obj 30 5049 flow.multiplex~;
#X text 200 5049 audio stream multiplexer;
#X obj 30 5076 flow.once;
#X text 200 5076 one message pass thru;
#X obj 30 5103 flow.pack;
#X text 200 5103 flow pack;
#X obj 30 5130 flow.pass;
#X text 200 5130 pass specified values;
#X obj 30 5157 flow.pass_if;
#X text 200 5157 pass values that accepted by predicate object;
#X obj 30 5184 flow.pipe;
#X text 200 5184 enhanced version on vanilla pipe object;
#X obj 30 5211 flow.queue;
#X text 200 5211 multi-channel control flow sync queue (or FIFO);
#X obj 30 5238 flow.reject;
#X text 200 5238 reject specified values;
#X obj 30 5265 flow.reject_if;
#X text 200 5265 reject values by predicate;
#X obj 30 5292 flow.ring;
#X text 200 5292 dataflow ring buffer;
#X obj 30 5319 flow.route;
#X text 200 5319 advanced message router;
#X obj 30 5346 flow.select;
#X text 200 5346 vanilla flow on steroids;
#X obj 30 5373 flow.space;
#X text 200 5373 space in time messages received at the same logical
time;
#X obj 30 5400 flow.speedlim;
#X text 200 5400 control stream speed limiter;
#X obj 30 5427 flow.split;
#X text 200 5427 split data flow by external side-chain predicate;
#X obj 30 5454 flow.stack;
#X text 200 5454 any message stack;
#X obj 30 5481 flow.sync;
#X text 200 5481 bus with only hot inlets;
#X obj 30 5508 flow.sync_pack;
#X text 200 5508 flow pack with all hot inlets;
#X obj 30 5535 flow.tee~;
#X text 200 5535 separate audio and control streams;
#X obj 30 5562 replace;
#X text 200 5562 Replace atoms in data stream;
#X obj 30 5589 route.float;
#X text 200 5589 separate float messages from other types;
#X obj 20 5616 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 5657 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5668 flt.biquad~;
#X text 200 5668 second order IIR filter.;
#X obj 30 5695 flt.bpf12~;
#X text 200 5695 Two pole band-pass butterworth filter;
#X obj 30 5722 flt.bpf24~;
#X text 200 5722 Four pole band-pass butterworth filter;
#X obj 30 5749 flt.c_bpf~;
#X text 200 5749 BPF coefficient calculator for biquad filter;
#X obj 30 5776 flt.c_highshelf~;
#X text 200 5776 Highshelf filter coefficient calculator for biquad;
#X obj 30 5803 flt.c_hpf~;
#X text 200 5803 HPF coefficient calculator for biquad filter;
#X obj 30 5830 flt.c_lowshelf~;
#X text 200 5830 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5857 flt.c_lpf~;
#X text 200 5857 LPF coefficient calculator for biquad filter;
#X obj 30 5884 flt.c_notch~;
#X text 200 5884 Band-reject coefficient calculator for biquad filter;
#X obj 30 5911 flt.c_peak~;
#X text 200 5911 Peaking equalizer calculator for biquad;
#X obj 30 5938 flt.dcblock2~;
#X text 200 5938 stereo DC blocker;
#X obj 30 5965 flt.dcblock~;
#X text 200 5965 mono DC blocker;
#X obj 30 5992 flt.eq10~;
#X text 200 5992 graphic 10 band equalizer;
#X obj 30 6019 flt.eq_peak_cq~;
#X text 200 6019 constant-Q second order peaking equalizer section;
#X obj 30 6046 flt.eq_peak~;
#X text 200 6046 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 6101 flt.fb_comb~;
#X text 200 6101 feedback comb filter;
#X obj 30 6128 flt.ff_comb~;
#X text 200 6128 feed forward comb filter;
#X obj 30 6155 flt.freqz~;
#X text 200 6155 compute the frequency response of a digital filter;
#X obj 30 6182 flt.highshelf~;
#X text 200 6182 gain boost|cut above some frequency;
#X obj 30 6209 flt.hpf12~;
#X text 200 6209 High-pass second order Butterworth filter;
#X obj 30 6236 flt.hpf24~;
#X text 200 6236 High-pass fourth order Butterworth filter;
#X obj 30 6263 flt.lowshelf~;
#X text 200 6263 gain boost|cut below some frequency;
#X obj 30 6290 flt.lpf12~;
#X text 200 6290 Low-pass second order Butterworth filter;
#X obj 30 6317 flt.lpf24~;
#X text 200 6317 Low-pass fourth order Butterworth filter;
#X obj 30 6344 flt.median;
#X text 200 6344 Median control flow filter;
#X obj 30 6371 flt.moog_vcf~;
#X text 200 6371 Moog Voltage Controlled Filter;
#X obj 30 6398 flt.notch~;
#X text 200 6398 band-rejection filter;
#X obj 30 6425 flt.resonbp~;
#X text 200 6425 Simple resonant bandpass filter;
#X obj 20 6452 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 6493 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6504 fx.bitdown~;
#X text 200 6504 bit downer and downsampler effect;
#X obj 30 6531 fx.chorus~;
#X text 200 6531 Chorus effect;
#X obj 30 6558 fx.distortion1~;
#X text 200 6558 distortion #1 from Guitarix effects set;
#X obj 30 6585 fx.distortion2~;
#X text 200 6585 distortion #2 from Guitarix effects set;
#X obj 30 6612 fx.distortion3~;
#X text 200 6612 simple distortion #3 from Guitarix effects set;
#X obj 30 6639 fx.distortion~;
#X text 200 6639 cubic nonlinearity distortion;
#X obj 30 6666 fx.drive~;
#X text 200 6666 Guitarix drive effect;
#X obj 30 6693 fx.drone_box~;
#X text 200 6693 mono sympathetic resonance generator;
#X obj 30 6720 fx.echo~;
#X text 200 6720 simple echo effect;
#X obj 30 6747 fx.flanger~;
#X text 200 6747 mono flanging effect;
#X obj 30 6774 fx.freeverb2~;
#X text 200 6774 freeverb2 - stereo version of freeverb;
#X obj 30 6801 fx.freeverb~;
#X text 200 6801 freeverb - common used open-source reverb;
#X obj 30 6828 fx.freqshift~;
#X text 200 6828 frequency shifter or single-sideband ring modulation;
#X obj 30 6855 fx.granulator~;
#X text 200 6855 simple input stream granulator;
#X obj 30 6882 fx.greyhole~;
#X text 200 6882 A complex echo-like effect;
#X obj 30 6909 fx.looper~;
#X text 200 6909 One track looper;
#X obj 30 6936 fx.pitchshift_s~;
#X text 200 6936 signal version of fx.pitchshift~;
#X obj 30 6963 fx.pitchshift~;
#X text 200 6963 simple pitch shifter based on 2 delay lines;
#X obj 30 6990 fx.sdelay~;
#X text 200 6990 smooth delay with a feedback control;
#X obj 30 7017 fx.vocoder~;
#X text 200 7017 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 7057 fx.wahwah~;
#X text 200 7057 digitized CryBaby wah pedal;
#X obj 30 7084 fx.zita_rev1~;
#X text 200 7084 Zita stereo reverb;
#X obj 20 7111 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 7152 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7163 global.dict;
#X text 200 7163 global named dict object;
#X obj 30 7190 global.float;
#X text 200 7190 global named float object;
#X obj 30 7217 global.int;
#X text 200 7217 global named integer object;
#X obj 30 7244 global.list;
#X text 200 7244 global named list object;
#X obj 30 7271 global.mlist;
#X text 200 7271 global named mlist object;
#X obj 30 7298 global.set;
#X text 200 7298 global named set object;
#X obj 20 7325 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 7366 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7377 hw.apple_smc;
#X text 200 7377 query the system management control in Apples;
#X obj 30 7404 hw.apple_sms;
#X text 200 7404 query the sudden motion sensor in Apples;
#X obj 30 7431 hw.arduino;
#X text 200 7431 Arduino device;
#X obj 30 7458 hw.cpu_temp;
#X text 200 7458 get CPU temperature;
#X obj 30 7485 hw.display;
#X text 200 7485 get/set display properties;
#X obj 30 7512 hw.kbd_light;
#X text 200 7512 Get/set keyboard light on some devices;
#X obj 20 7539 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 7580 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7591 lfo.+pulse~;
#X text 200 7591 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 7618 lfo.+saw~;
#X text 200 7618 Positive unit-amplitude low frequency saw wave;
#X obj 30 7645 lfo.+square~;
#X text 200 7645 Positive low frequency square wave;
#X obj 30 7672 lfo.+tri~;
#X text 200 7672 Positive unit-amplitude low frequency triangle wave;
#X obj 30 7699 lfo.impulse~;
#X text 200 7699 Unit-amplitude low-frequency impulse train;
#X obj 30 7726 lfo.pulse~;
#X text 200 7726 Full-range unit-amplitude low frequency pulse train;
#X obj 30 7753 lfo.saw~;
#X text 200 7753 Full-range unit-amplitude low frequency saw;
#X obj 30 7780 lfo.square~;
#X text 200 7780 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 7807 lfo.tri~;
#X text 200 7807 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 7834 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7875 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7886 list.^at;
#X text 200 7886 on input index(es) outputs list element(s);
#X obj 30 7913 list.^contains;
#X text 200 7913 checks if input atom is found in the list;
#X obj 30 7940 list.^search;
#X text 200 7940 on input atom returns it index in list;
#X obj 30 7967 list.all_of;
#X text 200 7967 checks if all list atoms accepted by predicate;
#X obj 30 7994 list.any_of;
#X text 200 7994 checks if at least one list element is accepted by
predicate;
#X obj 30 8021 list.append;
#X text 200 8021 append atom or list to the end of input list;
#X obj 30 8048 list.apply_to;
#X text 200 8048 modifies list value at specified position \, filtering
it via external object;
#X obj 30 8088 list.at;
#X text 200 8088 outputs list element(s) at specified index(es);
#X obj 30 8115 list.choice;
#X text 200 8115 outputs random element from list;
#X obj 30 8142 list.contains;
#X text 200 8142 checks if input list contains specified atoms;
#X obj 30 8169 list.count;
#X text 200 8169 output the number of items that equal to specified
value;
#X obj 30 8196 list.count_if;
#X text 200 8196 output the number of items that satisfy to external
predicate;
#X obj 30 8223 list.delta;
#X text 200 8223 returns the difference between the current list of
floats and the previous one.;
#X obj 30 8263 list.distribution;
#X text 200 8263 list value distribution;
#X obj 30 8290 list.do;
#X text 200 8290 iterate and modify list contents via side-chain;
#X obj 30 8317 list.each;
#X text 200 8317 maps each list value via external side-chain;
#X obj 30 8344 list.enumerate;
#X text 200 8344 enumerates input list;
#X obj 30 8371 list.equal;
#X text 200 8371 checks if given lists are equal;
#X obj 30 8398 list.first;
#X text 200 8398 returns first list element;
#X obj 30 8425 list.gen;
#X text 200 8425 generates list of specified length via external generator;
#X obj 30 8452 list.histogram;
#X text 200 8452 outputs distribution histogram;
#X obj 30 8479 list.insert;
#X text 200 8479 insert atom or list to the specified position of input
list;
#X obj 30 8506 list.integrator;
#X text 200 8506 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 8546 list.last;
#X text 200 8546 output last list element;
#X obj 30 8573 list.length;
#X text 200 8573 output the number of atoms in the list;
#X obj 30 8600 list.max;
#X text 200 8600 output largest element in the list;
#X obj 30 8627 list.mean;
#X text 200 8627 calculates average of list of floats;
#X obj 30 8654 list.min;
#X text 200 8654 returns smallest element in the list;
#X obj 30 8681 list.none_of;
#X text 200 8681 checks if none of list atoms is accepted by predicate;
#X obj 30 8708 list.normalize;
#X text 200 8708 normalizes float list values to get their sum = 1.0;
#X obj 30 8735 list.pass_if;
#X text 200 8735 leave only elements accepted by predicate;
#X obj 30 8762 list.prepend;
#X text 200 8762 prepend atom or list before input list;
#X obj 30 8789 list.product;
#X text 200 8789 calculates product of floats in list;
#X obj 30 8816 list.range;
#X text 200 8816 output list smallest and largest value;
#X obj 30 8843 list.reduce;
#X text 200 8843 apply function of two arguments cumulatively to the
list;
#X obj 30 8870 list.remove;
#X text 200 8870 remove list element(s) at specified positions;
#X obj 30 8897 list.remove_if;
#X text 200 8897 remove elements by predicate;
#X obj 30 8924 list.repack;
#X text 200 8924 repack list to specified size;
#X obj 30 8951 list.repeat;
#X text 200 8951 output new list by repeating input list specified
times;
#X obj 30 8978 list.resample;
#X text 200 8978 resample list with specified ratio;
#X obj 30 9005 list.resize;
#X text 200 9005 changes list size;
#X obj 30 9032 list.reverse;
#X text 200 9032 reverses the order of the elements in the list;
#X obj 30 9059 list.rldecode;
#X text 200 9059 Run-length list decoder (RLE);
#X obj 30 9086 list.rlencode;
#X text 200 9086 RLE (run-length encoding) for lists;
#X obj 30 9113 list.rotate;
#X text 200 9113 rotates list;
#X obj 30 9140 list.route;
#X text 200 9140 acts like [route] but for lists;
#X obj 30 9167 list.search;
#X text 200 9167 search specified items in input list;
#X obj 30 9194 list.separate;
#X text 200 9194 sends list elements one by one separately;
#X obj 30 9221 list.seq;
#X text 200 9221 numeric sequence list generator;
#X obj 30 9248 list.set;
#X text 200 9248 set list value at specified position;
#X obj 30 9275 list.shift;
#X text 200 9275 shifts the contents of the list with linear interpolation;
#X obj 30 9302 list.shuffle;
#X text 200 9302 randomly rearranges elements in list;
#X obj 30 9329 list.slice;
#X text 200 9329 extract sublist;
#X obj 30 9356 list.sort;
#X text 200 9356 sorts list values by ascending order;
#X obj 30 9383 list.sort_with;
#X text 200 9383 sort list with user defined side-chain;
#X obj 30 9410 list.split;
#X text 200 9410 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 9450 list.stretch;
#X text 200 9450 stretches list - changes its size with linear interpolation;
#X obj 30 9477 list.sum;
#X text 200 9477 calculates sum of floats in list;
#X obj 30 9504 list.unique;
#X text 200 9504 removes duplicates from input list;
#X obj 30 9531 list.unpack;
#X text 200 9531 unpack list elements to separate outlets;
#X obj 30 9558 list.unzip;
#X text 200 9558 splits list to N lists \, each to separate output;
#X obj 30 9585 list.walk;
#X text 200 9585 Walks thru the list;
#X obj 30 9612 list.zip;
#X text 200 9612 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 9667 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 9708 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9719 live.capture~;
#X text 200 9719 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 9759 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 9800 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9811 local.dict;
#X text 200 9811 local named dict object;
#X obj 30 9838 local.float;
#X text 200 9838 canvas-scoped named float variable;
#X obj 30 9865 local.int;
#X text 200 9865 canvas-scoped named integer variable;
#X obj 30 9892 local.list;
#X text 200 9892 local named list object;
#X obj 30 9919 local.mlist;
#X text 200 9919 local named mlist object;
#X obj 30 9946 local.set;
#X text 200 9946 local named set object;
#X obj 20 9973 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 10014 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10025 math.abs;
#X text 200 10025 absolute value function;
#X obj 30 10052 math.abs~;
#X text 200 10052 absolute value function for signals;
#X obj 30 10079 math.acos;
#X text 200 10079 arc cosine function;
#X obj 30 10106 math.acosh;
#X text 200 10106 inverse hyperbolic cosine function;
#X obj 30 10133 math.acosh~;
#X text 200 10133 hyperbolic arc cosine for signals;
#X obj 30 10160 math.acos~;
#X text 200 10160 arc cosine function for signals;
#X obj 30 10187 math.and;
#X text 200 10187 operation AND for multiple arguments;
#X obj 30 10214 math.approx;
#X text 200 10214 check if input value approximately equal to pattern;
#X obj 30 10241 math.asin;
#X text 200 10241 arc sine function;
#X obj 30 10268 math.asinh;
#X text 200 10268 inverse hyperbolic sine function;
#X obj 30 10295 math.asinh~;
#X text 200 10295 hyperbolic arc sine for signals;
#X obj 30 10322 math.asin~;
#X text 200 10322 arc sine for signals;
#X obj 30 10349 math.atan;
#X text 200 10349 arc tangent function;
#X obj 30 10376 math.atanh;
#X text 200 10376 inverse hyperbolic tangent function;
#X obj 30 10403 math.atanh~;
#X text 200 10403 hyperbolic arc tangent for signals;
#X obj 30 10430 math.atan~;
#X text 200 10430 arc tangent for signals;
#X obj 30 10457 math.cabs~;
#X text 200 10457 magnitude of a complex signals;
#X obj 30 10484 math.carg~;
#X text 200 10484 phase angle of a complex signals;
#X obj 30 10511 math.cbrt;
#X text 200 10511 cube root function;
#X obj 30 10538 math.cbrt~;
#X text 200 10538 cube root function for signals;
#X obj 30 10565 math.cdiv~;
#X text 200 10565 division of complex signals;
#X obj 30 10592 math.ceil;
#X text 200 10592 round to smallest integral value not less than input
value;
#X obj 30 10619 math.ceil~;
#X text 200 10619 round to smallest integral value not less than input
value;
#X obj 30 10646 math.cexp~;
#X text 200 10646 exponent of a complex signals;
#X obj 30 10673 math.cmul~;
#X text 200 10673 multiplication of complex signals;
#X obj 30 10700 math.cos;
#X text 200 10700 cosine function;
#X obj 30 10727 math.cosh;
#X text 200 10727 hyperbolic cosine function;
#X obj 30 10754 math.cosh~;
#X text 200 10754 hyperbolic cosine for signals;
#X obj 30 10781 math.cos~;
#X text 200 10781 cosine function;
#X obj 30 10808 math.div;
#X text 200 10808 division (on lists too);
#X obj 30 10835 math.e;
#X text 200 10835 mathematical constant \, base of the natural logarithm;
#X obj 30 10862 math.erf;
#X text 200 10862 error function;
#X obj 30 10889 math.erf~;
#X text 200 10889 error function for signals;
#X obj 30 10916 math.exp;
#X text 200 10916 exponential functions;
#X obj 30 10943 math.exp2;
#X text 200 10943 exponential functions;
#X obj 30 10970 math.exp2~;
#X text 200 10970 base-2 exponential for signal;
#X obj 30 10997 math.expr;
#X text 200 10997 dynamic [expr];
#X obj 30 11024 math.exp~;
#X text 200 11024 base-e exponential for signal;
#X obj 30 11051 math.floor;
#X text 200 11051 round to largest integral value not greater than
x;
#X obj 30 11078 math.floor~;
#X text 200 11078 round to largest integral value not greater than
x;
#X obj 30 11105 math.gamma;
#X text 200 11105 gamma function;
#X obj 30 11132 math.gamma~;
#X text 200 11132 gamma function for floating point signals;
#X obj 30 11159 math.gcd;
#X text 200 11159 calculate greatest common divisor;
#X obj 30 11186 math.inf;
#X text 200 11186 infinity value that cannot be represented accurately;
#X obj 30 11213 math.inf~;
#X text 200 11213 inifinity signal generator;
#X obj 30 11240 math.lcm;
#X text 200 11240 calculate least common multiple;
#X obj 30 11267 math.lgamma;
#X text 200 11267 natural logarithm of the absolute value of the gamma
function;
#X obj 30 11294 math.lgamma~;
#X text 200 11294 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 11334 math.log;
#X text 200 11334 natural logarithm;
#X obj 30 11361 math.log10;
#X text 200 11361 logarithm functions;
#X obj 30 11388 math.log10~;
#X text 200 11388 natural logarithm;
#X obj 30 11415 math.log2;
#X text 200 11415 logarithm functions;
#X obj 30 11442 math.log2~;
#X text 200 11442 base-2 logarithm;
#X obj 30 11469 math.log~;
#X text 200 11469 natural logarithm;
#X obj 30 11496 math.mul;
#X text 200 11496 multiplication (on lists too);
#X obj 30 11523 math.nan;
#X text 200 11523 Not a Number \, unrepresentable value;
#X obj 30 11550 math.nan~;
#X text 200 11550 signal NaN;
#X obj 30 11577 math.neg;
#X text 200 11577 negate function;
#X obj 30 11604 math.or;
#X text 200 11604 operation OR for multiple arguments;
#X obj 30 11631 math.pi;
#X text 200 11631 mathematical constant;
#X obj 30 11658 math.pi~;
#X text 200 11658 mathematical constant;
#X obj 30 11685 math.polyeval;
#X text 200 11685 evaluates the polynomial described by the coefficients
list;
#X obj 30 11712 math.reciprocal;
#X text 200 11712 calculate reciprocal number;
#X obj 30 11739 math.reciprocal~;
#X text 200 11739 calculate reciprocal number for signals;
#X obj 30 11766 math.round;
#X text 200 11766 round to integral value \, regardless of rounding
direction;
#X obj 30 11793 math.round~;
#X text 200 11793 signal round;
#X obj 30 11820 math.sign;
#X text 200 11820 sign function;
#X obj 30 11847 math.sin;
#X text 200 11847 sine function;
#X obj 30 11874 math.sinh;
#X text 200 11874 hyperbolic sine function;
#X obj 30 11901 math.sinh~;
#X text 200 11901 hyperbolic sine for signals;
#X obj 30 11928 math.sin~;
#X text 200 11928 sine function;
#X obj 30 11955 math.sqrt;
#X text 200 11955 square root function;
#X obj 30 11982 math.sqrt~;
#X text 200 11982 square root for signal;
#X obj 30 12009 math.squared;
#X text 200 12009 value square;
#X obj 30 12036 math.squared~;
#X text 200 12036 signal value square;
#X obj 30 12063 math.sync_add;
#X text 200 12063 sync addition;
#X obj 30 12090 math.sync_and;
#X text 200 12090 sync logical AND operation;
#X obj 30 12117 math.sync_div;
#X text 200 12117 sync division;
#X obj 30 12144 math.sync_eq;
#X text 200 12144 sync equal numbers check;
#X obj 30 12171 math.sync_ge;
#X text 200 12171 sync greater equal numbers compare;
#X obj 30 12198 math.sync_gt;
#X text 200 12198 sync greater then numbers compare;
#X obj 30 12225 math.sync_le;
#X text 200 12225 sync less equal numbers compare;
#X obj 30 12252 math.sync_lshift;
#X text 200 12252 sync signed bit left shift;
#X obj 30 12279 math.sync_lt;
#X text 200 12279 sync less then numbers compare;
#X obj 30 12306 math.sync_mod;
#X text 200 12306 sync remainder of modulo division (float or integer);
#X obj 30 12333 math.sync_mul;
#X text 200 12333 sync multiplication;
#X obj 30 12360 math.sync_ne;
#X text 200 12360 sync numbers for not equality;
#X obj 30 12387 math.sync_or;
#X text 200 12387 sync logical OR operation;
#X obj 30 12414 math.sync_rshift;
#X text 200 12414 sync signed bit right shift;
#X obj 30 12441 math.sync_sub;
#X text 200 12441 sync subtraction;
#X obj 30 12468 math.sync_xor;
#X text 200 12468 sync logical XOR operation;
#X obj 30 12495 math.tan;
#X text 200 12495 tangent function;
#X obj 30 12522 math.tanh;
#X text 200 12522 hyperbolic tangent function;
#X obj 30 12549 math.tanh~;
#X text 200 12549 hyperbolic tangent for signals;
#X obj 30 12576 math.tan~;
#X text 200 12576 tangent function;
#X obj 30 12603 math.trunc;
#X text 200 12603 truncate to integer value;
#X obj 30 12630 math.trunc~;
#X text 200 12630 truncate to integer value;
#X obj 20 12657 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 12698 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12709 midi.cc;
#X text 200 12709 enhanced version of vanilla ctlin;
#X obj 30 12736 midi.clock;
#X text 200 12736 midi clock toolbox;
#X obj 30 12763 midi.ctl2str;
#X text 200 12763 convert Standard MIDI Controllers number to name;
#X obj 30 12790 midi.event2ctl;
#X text 200 12790 convert MidiEvent message to controller channel/value
pair;
#X obj 30 12817 midi.event2note;
#X text 200 12817 convert MidiEvent message to midi note/velocity pair;
#X obj 30 12844 midi.event2prg;
#X text 200 12844 convert MidiEvent message to midi program change
value;
#X obj 30 12871 midi.file;
#X text 200 12871 standard midi file SMF reader and writer;
#X obj 30 12898 midi.key2str;
#X text 200 12898 convert key number to SPN name according to tonality;
#X obj 30 12925 midi.prg2str;
#X text 200 12925 convert GM Instrument number to name (string or symbol);
#X obj 30 12952 midi.sysex;
#X text 200 12952 sysex input messages as list;
#X obj 30 12979 midi.track;
#X text 200 12979 extract track from MidiFile;
#X obj 30 13006 midi.tuning;
#X text 200 13006 apply tuning to midi messages;
#X obj 30 13033 midi.vramp;
#X text 200 13033 apply crescendo or diminuendo for midi message flow;
#X obj 20 13060 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 13101 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13112 click~;
#X text 200 13112 Output single impulse on bang;
#X obj 30 13139 fluid~;
#X text 200 13139 FluidSynth SoundFont 2 player;
#X obj 30 13166 modplug~;
#X text 200 13166 MOD file player (using libmodplug);
#X obj 30 13193 speech.flite;
#X text 200 13193 render speech to array;
#X obj 20 13220 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 13261 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13272 loadexpr;
#X text 200 13272 send message when patch loads;
#X obj 30 13299 msg;
#X text 200 13299 message constructor;
#X obj 30 13326 msg.after;
#X text 200 13326 send specified message after incoming message;
#X obj 30 13353 msg.onload;
#X text 200 13353 send message when patch loads;
#X obj 20 13380 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 13421 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13432 net.host2ip;
#X text 200 13432 returns IP address by DNS name;
#X obj 20 13459 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 13500 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13511 noise.baker;
#X text 200 13511 Part of a-chaos library;
#X obj 30 13538 noise.clifford;
#X text 200 13538 Part of a-chaos library;
#X obj 30 13565 noise.collatz;
#X text 200 13565 Part of a-chaos library;
#X obj 30 13592 noise.crackle~;
#X text 200 13592 sparse noise generator;
#X obj 30 13619 noise.duffing;
#X text 200 13619 Part of a-chaos library;
#X obj 30 13646 noise.ginger;
#X text 200 13646 Gingerbreadman map chaotic generator;
#X obj 30 13673 noise.henon;
#X text 200 13673 Part of a-chaos library;
#X obj 30 13700 noise.henon_heilles;
#X text 200 13700 Part of a-chaos library;
#X obj 30 13727 noise.henon_phase;
#X text 200 13727 Part of a-chaos library;
#X obj 30 13754 noise.henonf;
#X text 200 13754 Part of a-chaos library;
#X obj 30 13781 noise.ikeda;
#X text 200 13781 Part of a-chaos library;
#X obj 30 13808 noise.jong;
#X text 200 13808 Part of a-chaos library;
#X obj 30 13835 noise.lfreq0~;
#X text 200 13835 sampled/held noise (piecewise constant);
#X obj 30 13862 noise.lfreq~;
#X text 200 13862 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 13889 noise.logistic;
#X text 200 13889 Part of a-chaos library;
#X obj 30 13916 noise.lorenz;
#X text 200 13916 Part of a-chaos library;
#X obj 30 13943 noise.lyapunov;
#X text 200 13943 Part of a-chaos library;
#X obj 30 13970 noise.navier_stokes;
#X text 200 13970 Part of a-chaos library;
#X obj 30 13997 noise.pink~;
#X text 200 13997 Pink noise generator;
#X obj 30 14024 noise.rossler;
#X text 200 14024 Part of a-chaos library;
#X obj 30 14051 noise.stein;
#X text 200 14051 Part of a-chaos library;
#X obj 30 14078 noise.torus;
#X text 200 14078 Part of a-chaos library;
#X obj 30 14105 noise.verhulst;
#X text 200 14105 Part of a-chaos library;
#X obj 30 14132 noise.white~;
#X text 200 14132 White noise generator;
#X obj 20 14159 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 14200 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14211 osc.blit~;
#X text 200 14211 Bandlimited impulse train oscillator;
#X obj 30 14238 osc.impulse~;
#X text 200 14238 Bandlimited impulse train generator;
#X obj 30 14265 osc.pulse~;
#X text 200 14265 Bandlimited pulse train oscillator;
#X obj 30 14292 osc.saw4~;
#X text 200 14292 Bandlimited sawtooth wave;
#X obj 30 14319 osc.saw~;
#X text 200 14319 Alias-free sawtooth wave;
#X obj 30 14346 osc.sinfb~;
#X text 200 14346 Sine oscilator with feedback;
#X obj 30 14373 osc.sin~;
#X text 200 14373 Sine wave oscillator;
#X obj 30 14400 osc.square~;
#X text 200 14400 Bandlimited square wave oscillator;
#X obj 30 14427 osc.tri~;
#X text 200 14427 Bandlimited triangle wave oscillator;
#X obj 20 14454 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 14495 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14506 canvas.current;
#X text 200 14506 verbose information about current canvas;
#X obj 30 14533 canvas.dir;
#X text 200 14533 current canvas directory;
#X obj 30 14560 canvas.name;
#X text 200 14560 current canvas name;
#X obj 30 14587 canvas.path;
#X text 200 14587 current canvas fullpath;
#X obj 30 14614 canvas.top;
#X text 200 14614 verbose information about top-level canvas;
#X obj 30 14641 patch.args;
#X text 200 14641 Get patch or subpatch arguments;
#X obj 30 14668 patch.deps;
#X text 200 14668 patch dependencies: used objects and abstractions;
#X obj 30 14695 patch.tree;
#X text 200 14695 patch tree;
#X obj 20 14722 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 14763 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14774 path.basename;
#X text 200 14774 outputs filename portion of pathname;
#X obj 30 14801 path.dirname;
#X text 200 14801 outputs directory portion of pathname;
#X obj 30 14828 path.exists;
#X text 200 14828 checks if given path exists;
#X obj 30 14855 path.is_dir;
#X text 200 14855 check if path is directory;
#X obj 30 14882 path.lsdir;
#X text 200 14882 list directory contents;
#X obj 20 14909 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 14950 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14961 is_any;
#X text 200 14961 checks if input data has *any* type;
#X obj 30 14988 is_bang;
#X text 200 14988 checks if input data has *bang* type;
#X obj 30 15015 is_data;
#X text 200 15015 checks if input data has *data* type;
#X obj 30 15042 is_dict;
#X text 200 15042 checks if input data has *dict* type;
#X obj 30 15069 is_even;
#X text 200 15069 checks if input number is even;
#X obj 30 15096 is_file;
#X text 200 15096 checks if file exists and accessible;
#X obj 30 15123 is_float;
#X text 200 15123 checks if input data has *float* type;
#X obj 30 15150 is_list;
#X text 200 15150 checks if input data has *list* type;
#X obj 30 15177 is_odd;
#X text 200 15177 checks if input number is odd;
#X obj 30 15204 is_pointer;
#X text 200 15204 checks if input data has *pointer* type;
#X obj 30 15231 is_symbol;
#X text 200 15231 checks if input data has *symbol* type;
#X obj 20 15258 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 15299 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15310 preset.float;
#X text 200 15310 load/store float preset;
#X obj 30 15337 preset.list;
#X text 200 15337 load/store symbol preset;
#X obj 30 15364 preset.storage;
#X text 200 15364 preset storage control;
#X obj 30 15391 preset.symbol;
#X text 200 15391 load/store symbol preset;
#X obj 20 15418 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 15459 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15470 patch.props;
#X text 200 15470 patch properties manager;
#X obj 30 15497 prop;
#X text 200 15497 get/set named property value for subpatch or abstraction;
#X obj 30 15524 prop.declare;
#X text 200 15524 declare named property for subpatch or abstraction;
#X obj 30 15551 prop.get;
#X text 200 15551 get property from connected object/subpatch/abstraction;
#X obj 30 15578 prop.get~;
#X text 200 15578 Property extractor from sound stream;
#X obj 30 15605 prop.join;
#X text 200 15605 join property to main data flow;
#X obj 30 15632 prop.set;
#X text 200 15632 set object property;
#X obj 30 15659 prop.split;
#X text 200 15659 separate properties from dataflow;
#X obj 20 15686 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 15727 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15738 proto.firmata;
#X text 200 15738 Firmata Arduino protocol support;
#X obj 30 15765 proto.midi;
#X text 200 15765 raw midi encoder/parser;
#X obj 30 15792 proto.sp.alpaca;
#X text 200 15792 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 15819 proto.xtouch_ext;
#X text 200 15819 Behringer XTouch Extender XMidi protocol;
#X obj 20 15846 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 15887 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15898 random.atom;
#X text 200 15898 weighted atom generation from specified list;
#X obj 30 15925 random.discrete;
#X text 200 15925 random weighted integers on interval [0 \, n);
#X obj 30 15952 random.float;
#X text 200 15952 uniform random float generator in specified range;
#X obj 30 15979 random.gauss;
#X text 200 15979 gaussian random distribution;
#X obj 30 16006 random.int;
#X text 200 16006 uniform random integer generator in specified range;
#X obj 30 16033 random.linear;
#X text 200 16033 random linear distribution;
#X obj 30 16060 random.pw_const;
#X text 200 16060 piecewise constant random distribution;
#X obj 30 16087 random.pw_lin;
#X text 200 16087 piecewise linear random distribution;
#X obj 20 16114 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 16155 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16166 seq.arp;
#X text 200 16166 sequence arpeggiator;
#X obj 30 16193 seq.bangs;
#X text 200 16193 bang sequencer;
#X obj 30 16220 seq.counter;
#X text 200 16220 modulo counter;
#X obj 30 16247 seq.matrix;
#X text 200 16247 sequencer control for ui.matrix;
#X obj 30 16274 seq.nbangs;
#X text 200 16274 output specified number of bang with time intervals;
#X obj 30 16301 seq.phasor;
#X text 200 16301 control rate phasor (saw) generator;
#X obj 30 16328 seq.toggles;
#X text 200 16328 toggle sequencer;
#X obj 30 16355 sequencer;
#X text 200 16355 basic sequence player;
#X obj 20 16382 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 16423 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16434 snd.file;
#X text 200 16434 Sound file loader on steroids;
#X obj 20 16461 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 16502 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16513 hoa.2d.decoder~;
#X text 200 16513 hoa 2d decoder;
#X obj 30 16540 hoa.2d.encoder~;
#X text 200 16540 hoa 2d encoder;
#X obj 30 16567 hoa.2d.map~;
#X text 200 16567 a 2d ambisonic multisource spatializer;
#X obj 30 16594 hoa.2d.optim~;
#X text 200 16594 a 2D ambisonic optimization tool;
#X obj 30 16621 hoa.2d.projector~;
#X text 200 16621 a plane waves decomposer from circular harmonics
domain;
#X obj 30 16648 hoa.2d.recomposer~;
#X text 200 16648 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 16688 hoa.2d.rotate~;
#X text 200 16688 a 2D ambisonic sound field rotation;
#X obj 30 16715 hoa.2d.wider~;
#X text 200 16715 a 2d fractional ambisonic order simulator;
#X obj 30 16742 hoa.@process;
#X text 200 16742 process properties manager for hoa.process~;
#X obj 30 16769 hoa.in;
#X text 200 16769 message inlet for a patcher loaded by hoa.process~;
#X obj 30 16796 hoa.in~;
#X text 200 16796 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16823 hoa.out;
#X text 200 16823 message outlet for a patcher loaded by hoa.process~;
#X obj 30 16850 hoa.out~;
#X text 200 16850 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 16877 hoa.process~;
#X text 200 16877 patcher loader for multichannel processing;
#X obj 30 16907 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 16904 a 2d ambisonic harmonic scope;
#X obj 30 16929 pan.cos~;
#X text 200 16929 two channel equal power sine/cosine panner;
#X obj 30 16956 pan.linsig~;
#X text 200 16956 two channel linear panner with signal control;
#X obj 30 16983 pan.lin~;
#X text 200 16983 two channel linear panner;
#X obj 30 17010 pan.spread~;
#X text 200 17010 spreads input channels across the stereo field;
#X obj 30 17037 pan.sqrt~;
#X text 200 17037 two channel equal power square root panner;
#X obj 30 17064 spat.pan4~;
#X text 200 17064 GMEM SPAT: 4-outputs spatializer;
#X obj 30 17091 spat.pan8~;
#X text 200 17091 GMEM SPAT: 8-outputs spatializer;
#X obj 30 17118 spat.zita6x8~;
#X text 200 17118 spat with 6 inputs sources to 8 channel output;
#X obj 20 17145 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 17186 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17197 string;
#X text 200 17197 string constructor;
#X obj 30 17224 string.contains;
#X text 200 17224 checks if string contains specified substring;
#X obj 30 17251 string.ends_with;
#X text 200 17251 checks if string ends with specified substring;
#X obj 30 17278 string.equal;
#X text 200 17278 check strings or symbols for equality;
#X obj 30 17305 string.format;
#X text 200 17305 formats string like printf.;
#X obj 30 17332 string.join;
#X text 200 17332 joins (concatenates) strings with separator;
#X obj 30 17359 string.length;
#X text 200 17359 number of characters in string (unicode supported);
#X obj 30 17386 string.match;
#X text 200 17386 check if string match regular expression;
#X obj 30 17413 string.remove;
#X text 200 17413 remove substring from input string;
#X obj 30 17440 string.replace;
#X text 200 17440 replace from one substring to another in input string;
#X obj 30 17467 string.split;
#X text 200 17467 split string by separator;
#X obj 30 17494 string.starts_with;
#X text 200 17494 checks if string starts with specified substring;
#X obj 30 17521 string.substr;
#X text 200 17521 extract substring from input string;
#X obj 30 17548 string2symbol;
#X text 200 17548 converts string to symbol;
#X obj 20 17575 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 17616 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17627 symbol.equal;
#X text 200 17627 check symbols for equality;
#X obj 30 17654 symbol.length;
#X text 200 17654 number of characters in symbol (unicode supported);
#X obj 30 17681 symbol.num_compare;
#X text 200 17681 numeric symbol compare;
#X obj 30 17708 symbol2any;
#X text 200 17708 converts symbol to message;
#X obj 30 17735 symbol2intlist;
#X text 200 17735 converts symbol to list of character codes;
#X obj 20 17762 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 17803 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17814 synth.bee3~;
#X text 200 17814 Hammond-oid organ FM synthesis instrument;
#X obj 30 17841 synth.birds~;
#X text 200 17841 bird singing generator;
#X obj 30 17868 synth.church_bell~;
#X text 200 17868 generic church bell modal model;
#X obj 30 17895 synth.dubdub~;
#X text 200 17895 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 17935 synth.dx7~;
#X text 200 17935 FAUST dx7 implementation;
#X obj 30 17962 synth.eguitar~;
#X text 200 17962 simple electric guitar model with steel strings;
#X obj 30 17989 synth.fgrain~;
#X text 200 17989 file granulator from STK;
#X obj 30 18016 synth.glitch~;
#X text 200 18016 Glitch synthesizer by naivesound;
#X obj 30 18043 synth.ks~;
#X text 200 18043 Karplus-Strong string;
#X obj 30 18070 synth.marimba~;
#X text 200 18070 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 18110 synth.rhodey~;
#X text 200 18110 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 18137 synth.risset_arp~;
#X text 200 18137 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 18164 synth.risset_tone~;
#X text 200 18164 Jean Claude Risset's endless glissando;
#X obj 30 18191 synth.russian_bell~;
#X text 200 18191 russian church bell modal model;
#X obj 30 18218 synth.shakers~;
#X text 200 18218 various percussion sounds from STK library;
#X obj 30 18245 synth.sitar~;
#X text 200 18245 STK sitar;
#X obj 30 18272 synth.wurley~;
#X text 200 18272 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 18299 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 18340 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18351 system.colorpanel;
#X text 200 18351 System color panel dialog popup;
#X obj 30 18378 system.cursor;
#X text 200 18378 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 18405 system.exec;
#X text 200 18405 run external command in separate process;
#X obj 30 18432 system.getenv;
#X text 200 18432 Get system environment variables;
#X obj 30 18459 system.hostname;
#X text 200 18459 outputs system hostname;
#X obj 30 18486 system.memsize;
#X text 200 18486 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 18526 system.memused;
#X text 200 18526 returns the process physical memory use - current
and peak;
#X obj 30 18553 system.screen_size;
#X text 200 18553 returns current screen size in pixels;
#X obj 20 18580 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 18621 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18632 tl.bang;
#X text 200 18632 Timeline bang (with possible delay);
#X obj 30 18662 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 18659 Timeline section;
#X obj 30 18684 tl.timeline;
#X text 200 18684 Timeline - event scheduler;
#X obj 30 18711 tl.toggle;
#X text 200 18711 Timeline bang;
#X obj 30 18738 tl.transport;
#X text 200 18738 Timeline transport control;
#X obj 20 18765 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 18806 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18820 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 18817 array view with cursor and selection;
#X obj 30 18845 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 18842 A bang... that's all;
#X obj 30 18870 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 18867 colorchooser widget;
#X obj 30 18895 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 18892 Display GUI object;
#X obj 30 18920 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 18917 GUI for turning DSP on/off;
#X obj 30 18945 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 18942 envelope editor widget;
#X obj 30 18970 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 18967 UI stereo gain control;
#X obj 30 18995 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 18992 UI gain control;
#X obj 30 19020 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 19017 simple icon with button capabilities;
#X obj 30 19045 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 19042 value increment/decrement;
#X obj 30 19070 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 19067 keyboard widget;
#X obj 30 19095 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 19092 knob widget;
#X obj 30 19120 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 19117 simple label widget;
#X obj 30 19145 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 19142 Hyperlink widget;
#X obj 30 19170 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 19167 The matrix of toggles has you.;
#X obj 30 19195 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 19192 Dropdown menu;
#X obj 30 19220 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 19217 Shows peak and rms signal level;
#X obj 30 19245 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 19242 incoming MIDI message viewport;
#X obj 30 19270 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 19267 filter mouse events from ui objects;
#X obj 30 19295 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 19292 routes mouse events from ui objects;
#X obj 30 19320 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 19317 counterpart of the vanilla [nbx];
#X obj 30 19345 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 19342 counterpart of the vanilla [nbx] for signal;
#X obj 30 19370 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 19367 signal plotter;
#X obj 30 19395 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 19392 2D slider in polar coordinates;
#X obj 30 19420 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 19417 Preset manager;
#X obj 30 19445 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 19442 counterpart of the vanilla radio toggle;
#X obj 30 19470 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 19467 range slider;
#X obj 30 19495 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 19492 Scope GUI object;
#X obj 30 19520 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 19517 counterpart of the vanilla slider;
#X obj 30 19545 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 19542 2D slider widget;
#X obj 30 19570 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 19567 Multiple slider widget;
#X obj 30 19595 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 19592 Spectroscope GUI object;
#X obj 30 19620 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 19617 displays a list of text buttons or text toggles;
#X obj 30 19645 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 19642 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 19667 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 19667 version: v0.9.1 \, license: GPL3;
#X obj 20 19695 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 19718 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 19682 msg 0;
#X obj 670 19717 switch~;
#X connect 1364 0 1365 0;