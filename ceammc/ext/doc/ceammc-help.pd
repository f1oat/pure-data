#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 matrix~;
#X text 175 525 signal routing matrix;
#X obj 30 552 metro.pattern;
#X text 175 552 metro with rythmic patterns;
#X obj 30 579 metro.seq;
#X text 175 579 metro sequencer;
#X obj 30 606 mix~;
#X text 175 606 multislot signal mixer;
#X obj 30 633 radio;
#X text 175 633 float index to outlet values as radio switch;
#X obj 30 660 window;
#X text 175 660 returns window value by given window position;
#X obj 30 687 xfade2~;
#X text 175 687 multi stereo-signal crossfade;
#X obj 30 714 xfade~;
#X text 175 714 multi signal crossfade;
#X obj 20 741 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 782 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 793 array.p2s;
#X text 175 793 convert array phase [0\..1] to sample position;
#X obj 30 820 array.s2p;
#X text 175 820 convert array sample position to relative phase
position [0\..1];
#X obj 30 857 conv.amp2dbfs;
#X text 175 857 convert from amplitude to decibell full scale;
#X obj 30 884 conv.bpm2hz;
#X text 175 884 converts BPM to frequency in herz;
#X obj 30 911 conv.bpm2ms;
#X text 175 911 convert frequency in BPM to period in milliseconds;
#X obj 30 938 conv.bpm2sec;
#X text 175 938 convert frequency in BPM to period in seconds;
#X obj 30 965 conv.cc2amp;
#X text 175 965 convert from MIDI Control Change range;
#X obj 30 992 conv.dbfs2amp;
#X text 175 992 convert decibell full scale to amplitude;
#X obj 30 1019 conv.lin2curve;
#X text 175 1019 map linear to exponential range with 0 allowed.;
#X obj 30 1046 conv.lin2exp;
#X text 175 1046 maps linear range to exponential range;
#X obj 30 1073 conv.lin2lin;
#X text 175 1073 convert from one linear range to another;
#X obj 30 1100 conv.pitch2midi;
#X text 175 1100 converts symbol pitch name to MIDI note number;
#X obj 30 1127 conv.samp2sec;
#X text 175 1127 convert samples to time according to samplerate;
#X obj 30 1154 conv.sec2samp;
#X text 175 1154 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1191 conv.sec2str;
#X text 175 1191 converts float time in seconds to formated symbol (or
string);
#X obj 30 1228 conv.str2sec;
#X text 175 1228 converts formatted time to float value in seconds;
#X obj 20 1255 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1296 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1307 data.dict;
#X text 175 1307 dictionary container: store values by key;
#X obj 30 1334 data.fifo;
#X text 175 1334 First-In-First-Out (FIFO) queue data container;
#X obj 30 1361 data.float;
#X text 175 1361 robust float object;
#X obj 30 1388 data.int;
#X text 175 1388 robust int object;
#X obj 30 1415 data.list;
#X text 175 1415 list container;
#X obj 30 1442 data.mlist;
#X text 175 1442 multidimensial list container;
#X obj 30 1469 data.set;
#X text 175 1469 container that store unique elements;
#X obj 30 1496 data.set2list;
#X text 175 1496 converts set to list;
#X obj 30 1523 dict.contains;
#X text 175 1523 predicate to check dict contains key;
#X obj 30 1550 dict.keys;
#X text 175 1550 get list of dict keys;
#X obj 30 1577 dict.size;
#X text 175 1577 dictionary size;
#X obj 30 1604 dict.values;
#X text 175 1604 dictionary values as mlist;
#X obj 30 1631 mlist.flatten;
#X text 175 1631 flatten nested mlist;
#X obj 30 1658 set.contains;
#X text 175 1658 check if specified element is in set;
#X obj 30 1685 set.diff;
#X text 175 1685 difference between two sets;
#X obj 30 1712 set.equal;
#X text 175 1712 checks if two sets are equal (contains same
elements);
#X obj 30 1739 set.intersect;
#X text 175 1739 output intersection of given sets;
#X obj 30 1766 set.size;
#X text 175 1766 get number of elements in set;
#X obj 30 1793 set.symdiff;
#X text 175 1793 symmetric difference between two sets;
#X obj 30 1820 set.union;
#X text 175 1820 output union of given sets;
#X obj 20 1847 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1888 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1899 dyn.comp2~;
#X text 175 1899 stereo dynamic range compressor;
#X obj 30 1926 dyn.comp~;
#X text 175 1926 mono dynamic range compressors;
#X obj 30 1953 dyn.gate2~;
#X text 175 1953 stereo signal gate;
#X obj 30 1980 dyn.gate~;
#X text 175 1980 mono signal gate;
#X obj 30 2007 dyn.limit2~;
#X text 175 2007 stereo 1176LN Peak Limiter;
#X obj 30 2034 dyn.limit~;
#X text 175 2034 mono 1176LN Peak Limiter;
#X obj 30 2061 dyn.softclip~;
#X text 175 2061 soft signal clip;
#X obj 20 2088 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2129 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2140 env.adsr~;
#X text 175 2140 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2167 env.ar~;
#X text 175 2167 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 2204 env.asr~;
#X text 175 2204 ASR (Attack \, Sustain \, Release) envelope
generator;
#X obj 30 2231 env.concat;
#X text 175 2231 Envelope concatenation;
#X obj 30 2258 env.follow~;
#X text 175 2258 Envelope follower with independent attack and release
times.;
#X obj 30 2295 env.mix;
#X text 175 2295 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2332 env.smooth~;
#X text 175 2332 An envelope with an exponential attack and release;
#X obj 30 2359 env.tscale;
#X text 175 2359 Envelope time-scale;
#X obj 30 2386 env.tshift;
#X text 175 2386 Envelope time-shift (horizontal);
#X obj 30 2413 env.vscale;
#X text 175 2413 Envelope value-scale;
#X obj 30 2440 env2array;
#X text 175 2440 Renders envelope to specified array;
#X obj 30 2467 env2vline;
#X text 175 2467 Converts envelope to bunch of vline messages;
#X obj 30 2494 envelope;
#X text 175 2494 Envelope data type;
#X obj 30 2521 vline2env;
#X text 175 2521 Converts vline messages to env;
#X obj 20 2548 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2589 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2600 expand_env;
#X text 175 2600 Substitute enviroment variables in data stream;
#X obj 30 2627 flow.append;
#X text 175 2627 inject message into flow;
#X obj 30 2654 flow.change;
#X text 175 2654 rejects redundant input values;
#X obj 30 2681 flow.count;
#X text 175 2681 control flow event counter;
#X obj 30 2708 flow.demultiplex;
#X text 175 2708 control flow demultiplexer;
#X obj 30 2735 flow.demultiplex2~;
#X text 175 2735 audio stream stereo demultiplexer;
#X obj 30 2762 flow.demultiplex~;
#X text 175 2762 audio stream demultiplexer;
#X obj 30 2789 flow.gate;
#X text 175 2789 control flow gate. [spigot] analog;
#X obj 30 2816 flow.group;
#X text 175 2816 group data atoms in list of specified size;
#X obj 30 2843 flow.interval;
#X text 175 2843 measure time between flow events;
#X obj 30 2870 flow.less;
#X text 175 2870 numeric stream router \, like many [moses];
#X obj 30 2897 flow.less_eq;
#X text 175 2897 numeric stream router \, like many [moses];
#X obj 30 2924 flow.multiplex;
#X text 175 2924 control flow multiplexer;
#X obj 30 2951 flow.multiplex2~;
#X text 175 2951 audio stream stereo multiplexer;
#X obj 30 2978 flow.multiplex~;
#X text 175 2978 audio stream multiplexer;
#X obj 30 3005 flow.once;
#X text 175 3005 one message pass thru;
#X obj 30 3032 flow.pass;
#X text 175 3032 pass specified values;
#X obj 30 3059 flow.pass_if;
#X text 175 3059 pass values that accepted by predicate object;
#X obj 30 3086 flow.reject;
#X text 175 3086 reject specified values;
#X obj 30 3113 flow.reject_if;
#X text 175 3113 reject values by predicate;
#X obj 30 3140 flow.route;
#X text 175 3140 advanced message router;
#X obj 30 3167 flow.speedlim;
#X text 175 3167 control stream speed limitier;
#X obj 30 3194 flow.split;
#X text 175 3194 split data flow by external side-chain predicate;
#X obj 30 3221 flow.sync;
#X text 175 3221 bus with only hot inlets;
#X obj 30 3248 flow.tee~;
#X text 175 3248 separate audio and control streams;
#X obj 30 3275 replace;
#X text 175 3275 Replace atoms in data stream;
#X obj 20 3302 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3343 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3354 flt.biquad~;
#X text 175 3354 second order IIR filter.;
#X obj 30 3381 flt.bpf12~;
#X text 175 3381 Band-pass filter with 12/db per octave slope;
#X obj 30 3408 flt.bpf24~;
#X text 175 3408 Band-pass filter with 24/db per octave slope;
#X obj 30 3435 flt.c_bpf~;
#X text 175 3435 BPF coefficent calculator for biquad filter;
#X obj 30 3462 flt.c_highshelf~;
#X text 175 3462 Highshelf filter coefficent calculator for biquad;
#X obj 30 3489 flt.c_hpf~;
#X text 175 3489 HPF coefficent calculator for biquad filter;
#X obj 30 3516 flt.c_lowshelf~;
#X text 175 3516 Lowshelf filter coefficent calculator for biquad;
#X obj 30 3543 flt.c_lpf~;
#X text 175 3543 LPF coefficent calculator for biquad filter;
#X obj 30 3570 flt.c_notch~;
#X text 175 3570 Band-reject coefficent calculator for biquad filter;
#X obj 30 3597 flt.c_peak~;
#X text 175 3597 Peaking equalizer calculator for biquad.;
#X obj 30 3624 flt.dcblock2~;
#X text 175 3624 stereo DC blocker;
#X obj 30 3651 flt.dcblock~;
#X text 175 3651 mono DC blocker;
#X obj 30 3678 flt.eq_peak_cq~;
#X text 175 3678 constant-Q second order peaking equalizer section;
#X obj 30 3705 flt.eq_peak~;
#X text 175 3705 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3756 flt.highshelf~;
#X text 175 3756 gain boost|cut above some frequency;
#X obj 30 3783 flt.hpf12~;
#X text 175 3783 High-pass filter with 12/db per octave slope;
#X obj 30 3810 flt.hpf24~;
#X text 175 3810 High-pass filter with 24/db per octave slope;
#X obj 30 3837 flt.lowshelf~;
#X text 175 3837 gain boost|cut below some frequency;
#X obj 30 3864 flt.lpf12~;
#X text 175 3864 Low-pass filter with 12/db per octave slope;
#X obj 30 3891 flt.lpf24~;
#X text 175 3891 Low-pass filter with 24/db per octave slope;
#X obj 30 3918 flt.moog_vcf~;
#X text 175 3918 Moog Voltage Controlled Filter;
#X obj 30 3945 flt.notch~;
#X text 175 3945 band-rejection filter;
#X obj 30 3972 flt.resonbp~;
#X text 175 3972 Simple resonant bandpass filter;
#X obj 20 3999 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4040 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4051 fx.distortion~;
#X text 175 4051 cubic nonlinearity distortion;
#X obj 30 4078 fx.drone_box~;
#X text 175 4078 mono sympathetic resonance generator;
#X obj 30 4105 fx.echo~;
#X text 175 4105 simple echo effect;
#X obj 30 4132 fx.flanger~;
#X text 175 4132 mono flanging effect;
#X obj 30 4159 fx.freeverb2~;
#X text 175 4159 freeverb2 - stereo version of freeverb;
#X obj 30 4186 fx.freeverb~;
#X text 175 4186 freeverb - common used open-source reverb;
#X obj 30 4213 fx.freqshift~;
#X text 175 4213 frequency shifter or single-sideband ring modulation;
#X obj 30 4240 fx.greyhole~;
#X text 175 4240 A complex echo-like effect;
#X obj 30 4267 fx.looper~;
#X text 175 4267 One track looper;
#X obj 30 4294 fx.pitchshift~;
#X text 175 4294 simple pitch shifter based on 2 delay lines;
#X obj 30 4321 fx.sdelay~;
#X text 175 4321 smooth delay with a feedback control;
#X obj 30 4348 fx.wahwah~;
#X text 175 4348 digitized CryBaby wah pedal;
#X obj 30 4375 fx.zita_rev1~;
#X text 175 4375 Zita stereo reverb;
#X obj 20 4402 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4443 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4454 global.dict;
#X text 175 4454 global named dict object;
#X obj 30 4481 global.float;
#X text 175 4481 global named float object;
#X obj 30 4508 global.int;
#X text 175 4508 global named integer object;
#X obj 30 4535 global.list;
#X text 175 4535 global named list object;
#X obj 30 4562 global.mlist;
#X text 175 4562 global named mlist object;
#X obj 30 4589 global.set;
#X text 175 4589 global named set object;
#X obj 20 4616 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 4657 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4668 hw.arduino;
#X text 175 4668 Arduino device;
#X obj 20 4695 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 4736 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4747 lfo.impulse~;
#X text 175 4747 Unit-amplitude low-frequency impulse train;
#X obj 30 4774 lfo.pulse~;
#X text 175 4774 Unit-amplitude nonnegative low frequency pulse train
\,;
#X obj 30 4801 lfo.square~;
#X text 175 4801 Positive low frequence square wave;
#X obj 30 4828 lfo.tri~;
#X text 175 4828 Positive unit-amplitude low frequency triangle wave;
#X obj 20 4855 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 4896 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4907 list.^at;
#X text 175 4907 on input index(es) outputs list element(s);
#X obj 30 4934 list.^contains;
#X text 175 4934 on input atom or list checks if specified list
contains it;
#X obj 30 4961 list.^search;
#X text 175 4961 on input atom returns it index in list;
#X obj 30 4988 list.all_of;
#X text 175 4988 checks if all list atoms accepted by predicate;
#X obj 30 5015 list.any_of;
#X text 175 5015 checks if at least one list element is accepted by
predicate;
#X obj 30 5052 list.append;
#X text 175 5052 append atom or list to the end of input list;
#X obj 30 5079 list.apply_to;
#X text 175 5079 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5116 list.at;
#X text 175 5116 on input list outputs element(s) at specified
index(es);
#X obj 30 5143 list.choice;
#X text 175 5143 returns random element from list;
#X obj 30 5170 list.contains;
#X text 175 5170 on input list checks if it contains specified
subsequence;
#X obj 30 5197 list.count;
#X text 175 5197 returns the number of items that equal to specified
value;
#X obj 30 5224 list.count_if;
#X text 175 5224 returns the number of items that satisfy to external
predicate.;
#X obj 30 5261 list.delta;
#X text 175 5261 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5298 list.distribution;
#X text 175 5298 list value distribution;
#X obj 30 5325 list.do;
#X text 175 5325 iterate and modify list contents via side-chain;
#X obj 30 5352 list.each;
#X text 175 5352 maps each list value via external object(s);
#X obj 30 5379 list.enumerate;
#X text 175 5379 enumerates input list;
#X obj 30 5406 list.equal;
#X text 175 5406 checks if given lists are equal;
#X obj 30 5433 list.first;
#X text 175 5433 returns first list element;
#X obj 30 5460 list.gen;
#X text 175 5460 generates list of specified length via external
generator;
#X obj 30 5487 list.histogram;
#X text 175 5487 outputs distibution histogram;
#X obj 30 5514 list.insert;
#X text 175 5514 insert atom or list to the specified position of
input list;
#X obj 30 5541 list.integrator;
#X text 175 5541 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 5578 list.last;
#X text 175 5578 returns last list element;
#X obj 30 5605 list.length;
#X text 175 5605 returns the number of atoms in the list;
#X obj 30 5632 list.max;
#X text 175 5632 returns largest element in the list;
#X obj 30 5659 list.mean;
#X text 175 5659 calculates average of list of floats;
#X obj 30 5686 list.min;
#X text 175 5686 returns smallest element in the list;
#X obj 30 5713 list.none_of;
#X text 175 5713 checks if none of list atoms is accepted by
predicate;
#X obj 30 5740 list.normalize;
#X text 175 5740 normalizes float list values to get their sum = 1.0;
#X obj 30 5767 list.pass_if;
#X text 175 5767 leave only elements accepted by predicate;
#X obj 30 5794 list.prepend;
#X text 175 5794 prepend atom or list before input list;
#X obj 30 5821 list.product;
#X text 175 5821 calculates product of floats in list;
#X obj 30 5848 list.range;
#X text 175 5848 returns list smallest and largest value;
#X obj 30 5875 list.reduce;
#X text 175 5875 apply function of two arguments cumulatively to the
list;
#X obj 30 5902 list.remove;
#X text 175 5902 on input list remove element(s) at specified
positions;
#X obj 30 5929 list.remove_if;
#X text 175 5929 remove elements by predicate;
#X obj 30 5956 list.repack;
#X text 175 5956 repack input list to specified size;
#X obj 30 5983 list.repeat;
#X text 175 5983 creates new list by repeating given list specified
times;
#X obj 30 6010 list.resize;
#X text 175 6010 changes list size;
#X obj 30 6037 list.reverse;
#X text 175 6037 reverses the order of the elements in the list;
#X obj 30 6064 list.rldecode;
#X text 175 6064 Run-length list decoder (RLE);
#X obj 30 6091 list.rlencode;
#X text 175 6091 RLE (run-length encoding) for lists;
#X obj 30 6118 list.rotate;
#X text 175 6118 rotates list;
#X obj 30 6145 list.route;
#X text 175 6145 acts like [route] but for lists;
#X obj 30 6172 list.search;
#X text 175 6172 search specified items in input list;
#X obj 30 6199 list.separate;
#X text 175 6199 sends list elements one by one separately;
#X obj 30 6226 list.seq;
#X text 175 6226 numeric sequence list generator;
#X obj 30 6253 list.set;
#X text 175 6253 on input list set value at specified position;
#X obj 30 6280 list.shift;
#X text 175 6280 shifts the contents of the list with linear
interpolation;
#X obj 30 6307 list.shuffle;
#X text 175 6307 randomly rearranges elements in list;
#X obj 30 6334 list.slice;
#X text 175 6334 extract sublist;
#X obj 30 6361 list.sort;
#X text 175 6361 sorts list values by ascending order;
#X obj 30 6388 list.sort_with;
#X text 175 6388 sort list with user defined side-chain;
#X obj 30 6415 list.split;
#X text 175 6415 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 6452 list.stretch;
#X text 175 6452 stretches list - chenges its size with linear
interpolation.;
#X obj 30 6489 list.sum;
#X text 175 6489 calculates sum of floats in list;
#X obj 30 6516 list.unique;
#X text 175 6516 removes duplicates from input list;
#X obj 30 6543 list.unpack;
#X text 175 6543 unpack list elements to separate outlets;
#X obj 30 6570 list.unzip;
#X text 175 6570 splits list to N lists \, each to separate output;
#X obj 30 6597 list.walk;
#X text 175 6597 Walks thru the list;
#X obj 30 6624 list.zip;
#X text 175 6624 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 6675 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 6716 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6727 live.capture~;
#X text 175 6727 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 6764 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 6805 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6816 local.dict;
#X text 175 6816 local named dict object;
#X obj 30 6843 local.float;
#X text 175 6843 canvas-scoped named float variable;
#X obj 30 6870 local.int;
#X text 175 6870 canvas-scoped named integer variable;
#X obj 30 6897 local.list;
#X text 175 6897 local named list object;
#X obj 30 6924 local.mlist;
#X text 175 6924 local named mlist object;
#X obj 30 6951 local.set;
#X text 175 6951 local named set object;
#X obj 20 6978 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7019 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7030 math.abs;
#X text 175 7030 absolute value function;
#X obj 30 7057 math.acos;
#X text 175 7057 arc cosine function;
#X obj 30 7084 math.acosh;
#X text 175 7084 inverse hyperbolic cosine function;
#X obj 30 7111 math.and;
#X text 175 7111 operation AND for multiple arguments;
#X obj 30 7138 math.approx;
#X text 175 7138 check if input value approximately equal to pattern;
#X obj 30 7165 math.asin;
#X text 175 7165 arc sine function;
#X obj 30 7192 math.asinh;
#X text 175 7192 inverse hyperbolic sine function;
#X obj 30 7219 math.atan;
#X text 175 7219 arc tangent function;
#X obj 30 7246 math.atanh;
#X text 175 7246 inverse hyperbolic tangent function;
#X obj 30 7273 math.cbrt;
#X text 175 7273 cube root function;
#X obj 30 7300 math.ceil;
#X text 175 7300 round to smallest integral value not less than input
value;
#X obj 30 7327 math.cos;
#X text 175 7327 cosine function;
#X obj 30 7354 math.cosh;
#X text 175 7354 hyperbolic cosine function;
#X obj 30 7381 math.div;
#X text 175 7381 division (on lists too);
#X obj 30 7408 math.e;
#X text 175 7408 mathematical constant \, base of the natural
logarithm;
#X obj 30 7435 math.exp;
#X text 175 7435 exponential functions;
#X obj 30 7462 math.exp2;
#X text 175 7462 exponential functions;
#X obj 30 7489 math.expr;
#X text 175 7489 dynamic [expr];
#X obj 30 7516 math.floor;
#X text 175 7516 round to largest integral value not greater than x;
#X obj 30 7543 math.gcd;
#X text 175 7543 calculate greatest common divisor;
#X obj 30 7570 math.inf;
#X text 175 7570 infinity value that cannot be represented accurately;
#X obj 30 7597 math.lcm;
#X text 175 7597 calculate least common multiple;
#X obj 30 7624 math.log;
#X text 175 7624 logarithm functions;
#X obj 30 7651 math.log10;
#X text 175 7651 logarithm functions;
#X obj 30 7678 math.log2;
#X text 175 7678 logarithm functions;
#X obj 30 7705 math.mul;
#X text 175 7705 multiplication (on lists too);
#X obj 30 7732 math.nan;
#X text 175 7732 Not a Number \, unrepresentable value;
#X obj 30 7759 math.neg;
#X text 175 7759 negate function;
#X obj 30 7786 math.or;
#X text 175 7786 operation OR for multiple arguments;
#X obj 30 7813 math.pi;
#X text 175 7813 mathematical constant;
#X obj 30 7840 math.polyeval;
#X text 175 7840 evaluates the polynomial described by the
coefficients list;
#X obj 30 7867 math.reciprocal;
#X text 175 7867 calculate reciprocal number;
#X obj 30 7894 math.round;
#X text 175 7894 round to integral value \, regardless of rounding
direction;
#X obj 30 7921 math.round~;
#X text 175 7921 signal round;
#X obj 30 7948 math.sign;
#X text 175 7948 sign function;
#X obj 30 7975 math.sin;
#X text 175 7975 sine function;
#X obj 30 8002 math.sinh;
#X text 175 8002 hyperbolic sine function;
#X obj 30 8029 math.sqrt;
#X text 175 8029 square root function;
#X obj 30 8056 math.squared;
#X text 175 8056 value square;
#X obj 30 8083 math.tan;
#X text 175 8083 tangent function;
#X obj 30 8110 math.tanh;
#X text 175 8110 hyperbolic tangent function;
#X obj 30 8137 math.trunc;
#X text 175 8137 truncate to integer value;
#X obj 20 8164 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8205 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8216 midi.ctl2str;
#X text 175 8216 convert Standard MIDI Controllers number to name;
#X obj 30 8243 midi.event2ctl;
#X text 175 8243 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8270 midi.event2note;
#X text 175 8270 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8297 midi.event2prg;
#X text 175 8297 convert MidiEvent message to midi program change
value;
#X obj 30 8324 midi.file;
#X text 175 8324 standard midi file SMF reader and writer;
#X obj 30 8351 midi.key2str;
#X text 175 8351 convert key number to SPN name according to tonality;
#X obj 30 8378 midi.prg2str;
#X text 175 8378 convert GM Instrument number to name (string or
symbol);
#X obj 30 8405 midi.track;
#X text 175 8405 extract track from MidiFile;
#X obj 20 8432 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 8473 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8484 click~;
#X text 175 8484 Output single impulse on bang;
#X obj 30 8511 fluid~;
#X text 175 8511 FluidSynth SoundFont 2 player;
#X obj 30 8538 modplug~;
#X text 175 8538 MOD file player (using libmodplug);
#X obj 30 8565 speech.flite;
#X text 175 8565 render speech to array;
#X obj 20 8592 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 8633 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8644 msg;
#X text 175 8644 message constructor;
#X obj 20 8671 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 8712 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8723 noise.crackle~;
#X text 175 8723 sparse noise generator;
#X obj 30 8750 noise.lfreq0~;
#X text 175 8750 sampled/held noise (piecewise constant);
#X obj 30 8777 noise.lfreq~;
#X text 175 8777 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 8804 noise.pink~;
#X text 175 8804 Pink noise generator;
#X obj 30 8831 noise.white~;
#X text 175 8831 White noise generator;
#X obj 20 8858 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 8899 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8910 osc.blit~;
#X text 175 8910 Bandlimited impulse train oscillator;
#X obj 30 8937 osc.impulse~;
#X text 175 8937 Bandlimited impulse train generator;
#X obj 30 8964 osc.pulse~;
#X text 175 8964 Bandlimited pulse train oscillator.;
#X obj 30 8991 osc.saw~;
#X text 175 8991 Bandlimited saw wave oscillator;
#X obj 30 9018 osc.sinfb~;
#X text 175 9018 sine oscilator with feedback;
#X obj 30 9045 osc.square~;
#X text 175 9045 Bandlimited square wave oscillator;
#X obj 30 9072 osc.tri~;
#X text 175 9072 Bandlimited triangle wave oscillator;
#X obj 20 9099 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 9140 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9151 canvas.current;
#X text 175 9151 verbose information about current canvas;
#X obj 30 9178 canvas.top;
#X text 175 9178 verbose information about top-level canvas;
#X obj 30 9205 patch.args;
#X text 175 9205 Get patch or subpatch arguments;
#X obj 20 9232 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 9273 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9284 path.basename;
#X text 175 9284 outputs filename portion of pathname;
#X obj 30 9311 path.dirname;
#X text 175 9311 outputs directory portion of pathname;
#X obj 30 9338 path.exists;
#X text 175 9338 checks if given path exists;
#X obj 30 9365 path.lsdir;
#X text 175 9365 list directory contents;
#X obj 20 9392 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 9433 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9444 is_any;
#X text 175 9444 checks if input data has *any* type;
#X obj 30 9471 is_bang;
#X text 175 9471 checks if input data has *bang* type;
#X obj 30 9498 is_data;
#X text 175 9498 checks if input data has *data* type;
#X obj 30 9525 is_even;
#X text 175 9525 checks if input number is even;
#X obj 30 9552 is_file;
#X text 175 9552 checks if file exists and accessible;
#X obj 30 9579 is_float;
#X text 175 9579 checks if input data has *float* type;
#X obj 30 9606 is_list;
#X text 175 9606 checks if input data has *list* type;
#X obj 30 9633 is_odd;
#X text 175 9633 checks if input number is odd;
#X obj 30 9660 is_pointer;
#X text 175 9660 checks if input data has *pointer* type;
#X obj 30 9687 is_symbol;
#X text 175 9687 checks if input data has *symbol* type;
#X obj 20 9714 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 9755 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9766 preset.float;
#X text 175 9766 load/store float preset;
#X obj 30 9793 preset.list;
#X text 175 9793 load/store symbol preset;
#X obj 30 9820 preset.storage;
#X text 175 9820 preset storage control;
#X obj 30 9847 preset.symbol;
#X text 175 9847 load/store symbol preset;
#X obj 20 9874 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 9915 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9926 prop.get;
#X text 175 9926 Property extractor;
#X obj 30 9953 prop.get~;
#X text 175 9953 Property extractor from sound stream;
#X obj 30 9980 prop.set;
#X text 175 9980 Property injector;
#X obj 20 10007 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 10048 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10059 proto.firmata;
#X text 175 10059 Firmata Arduino protocol support;
#X obj 20 10086 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 10127 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10138 random.discrete;
#X text 175 10138 random weighted integers on interval [0 \, n);
#X obj 30 10165 random.float;
#X text 175 10165 random float generator in specified range;
#X obj 30 10192 random.gauss;
#X text 175 10192 gaussian random distribution;
#X obj 30 10219 random.int;
#X text 175 10219 Random integer generator in specified range;
#X obj 30 10246 random.linear;
#X text 175 10246 random linear distribution;
#X obj 30 10273 random.pw_const;
#X text 175 10273 piecewise constant random distribution;
#X obj 30 10300 random.pw_lin;
#X text 175 10300 piecewise linear random distribution;
#X obj 20 10327 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 10368 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10379 snd.file;
#X text 175 10379 Sound file loader on steroids;
#X obj 20 10406 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 10447 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10458 pan.cos~;
#X text 175 10458 two channel equal power sine/cosine panner;
#X obj 30 10485 pan.lin~;
#X text 175 10485 two channel linear panner;
#X obj 30 10512 pan.spread~;
#X text 175 10512 spreads input channels across the stereo field;
#X obj 30 10539 pan.sqrt~;
#X text 175 10539 two channel equal power square root panner;
#X obj 30 10566 spat.pan4~;
#X text 175 10566 GMEM SPAT: 4-outputs spatializer;
#X obj 30 10593 spat.pan8~;
#X text 175 10593 GMEM SPAT: 8-outputs spatializer;
#X obj 20 10620 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 10661 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10672 string;
#X text 175 10672 string constructor;
#X obj 30 10699 string.contains;
#X text 175 10699 checks if given string contains specified substring;
#X obj 30 10726 string.ends_with;
#X text 175 10726 checks if given string ends with specified suffix;
#X obj 30 10753 string.equal;
#X text 175 10753 check strings for equality;
#X obj 30 10780 string.format;
#X text 175 10780 formats string like printf.;
#X obj 30 10807 string.join;
#X text 175 10807 joins (concatenates) strings with separator;
#X obj 30 10834 string.length;
#X text 175 10834 number of characters in string (unicode supported);
#X obj 30 10861 string.remove;
#X text 175 10861 remove substring from input string;
#X obj 30 10888 string.replace;
#X text 175 10888 replace from one substring to another in input
string;
#X obj 30 10915 string.split;
#X text 175 10915 split string by separator;
#X obj 30 10942 string.starts_with;
#X text 175 10942 checks if given string starts with specified prefix;
#X obj 30 10969 string.substr;
#X text 175 10969 extract substring from input string;
#X obj 30 10996 string2symbol;
#X text 175 10996 converts string to symbol;
#X obj 20 11023 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 11064 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11075 symbol.equal;
#X text 175 11075 check symbols for equality;
#X obj 30 11102 symbol.length;
#X text 175 11102 number of characters in symbol (unicode supported);
#X obj 30 11129 symbol.num_compare;
#X text 175 11129 numeric symbol compare;
#X obj 20 11156 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 11197 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11208 synth.bee3~;
#X text 175 11208 Hammond-oid organ FM synthesis instrument;
#X obj 30 11235 synth.birds~;
#X text 175 11235 bird singing generator;
#X obj 30 11262 synth.church_bell~;
#X text 175 11262 generic church bell modal model;
#X obj 30 11289 synth.dubdub~;
#X text 175 11289 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 11326 synth.eguitar~;
#X text 175 11326 simple electric guitar model with steel strings;
#X obj 30 11353 synth.fgrain~;
#X text 175 11353 file granulator from STK;
#X obj 30 11380 synth.ks~;
#X text 175 11380 Karplus-Strong string;
#X obj 30 11407 synth.marimba~;
#X text 175 11407 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 11444 synth.rhodey~;
#X text 175 11444 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 11471 synth.risset_arp~;
#X text 175 11471 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 11498 synth.risset_tone~;
#X text 175 11498 Jean Claude Risset's endless glissando;
#X obj 30 11525 synth.shakers~;
#X text 175 11525 various percussion sounds from STK library;
#X obj 30 11552 synth.wurley~;
#X text 175 11552 Wurlitzer electric piano FM synthesis instrumentr;
#X obj 20 11579 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 11620 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11631 system.cursor;
#X text 175 11631 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 11668 system.getenv;
#X text 175 11668 Get system environment variables;
#X obj 30 11695 system.hostname;
#X text 175 11695 outputs system hostname;
#X obj 30 11722 system.memsize;
#X text 175 11722 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 11759 system.memused;
#X text 175 11759 returns the process physical memory use - current
and peak;
#X obj 30 11786 system.screen_size;
#X text 175 11786 returns current screen size in pixels;
#X obj 20 11813 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 11854 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11868 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 11865 Timeline bang;
#X obj 30 11891 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 11888 Timeline section;
#X obj 30 11911 tl.transport;
#X text 175 11911 Timeline transport control;
#X obj 30 11941 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 11938 array view with cursor and selection;
#X obj 30 11964 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 11961 A bang... that's all;
#X obj 30 11987 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 11984 colorchooser widget;
#X obj 30 12010 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 12007 Display GUI object;
#X obj 30 12033 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 12030 GUI for turning DSP on/off;
#X obj 30 12056 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 12053 envelope editor widget;
#X obj 30 12079 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 12076 UI gain control;
#X obj 30 12102 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 12099 simple icon with button capabilities;
#X obj 30 12125 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 12122 value increment/decrement;
#X obj 30 12148 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 12145 keyboard widget;
#X obj 30 12171 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 12168 knob widget;
#X obj 30 12194 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 12191 simple label widget;
#X obj 30 12217 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 12214 Hyperlink widget;
#X obj 30 12240 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 12237 The matrix of toggles has you.;
#X obj 30 12263 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 12260 Dropdown menu;
#X obj 30 12286 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 12283 Shows peak and rms signal level;
#X obj 30 12309 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 12306 counterpart of the vanilla [nbx];
#X obj 30 12332 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 12329 counterpart of the vanilla [nbx] for signal;
#X obj 30 12355 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 12352 Preset manager;
#X obj 30 12378 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 12375 counterpart of the vanilla radio toggle;
#X obj 30 12401 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 12398 rangle slider;
#X obj 30 12424 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 12421 Scope GUI object;
#X obj 30 12447 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 12444 counterpart of the vanilla slider;
#X obj 30 12470 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 12467 2D slider widget;
#X obj 30 12493 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 12490 Multiple slider widget;
#X obj 30 12516 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 12513 Spectroscope GUI object;
#X obj 30 12539 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 12536 displays a list of text buttons or text toggles;
#X obj 30 12562 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 12559 modern toggle widget;
#X obj 20 12582 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 12623 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12634 vector.distance;
#X text 175 12634 returns euclidean distance between two points;
#X obj 30 12661 vector.dot;
#X text 175 12661 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 12712 vector.length;
#X text 175 12712 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 12749 vector.normalize;
#X text 175 12749 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 12776 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 12776 version: v0.5 \, license: GPL3;
#X obj 20 12795 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;