#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 80 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 527 50 cnv 1 213 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 527 50 objects for list processing;
#X obj 30 117 list.^at;
#X text 200 117 on input index(es) outputs list element(s);
#X obj 30 145 list.^contains;
#X text 200 145 checks if input atom is found in the list;
#X obj 30 173 list.^search;
#X text 200 173 on input atom returns it index in list;
#X obj 30 201 list.all_of;
#X text 200 201 checks if all list atoms accepted by predicate;
#X obj 30 229 list.any_of;
#X text 200 229 checks if at least one list element is accepted by
predicate;
#X obj 30 257 list.append;
#X text 200 257 append atom or list to the end of input list;
#X obj 30 285 list.apply_to;
#X text 200 285 modifies list value at specified position \, filtering
it via external object;
#X obj 30 325 list.at;
#X text 200 325 outputs list element(s) at specified index(es);
#X obj 30 353 list.choice;
#X text 200 353 outputs random element from list;
#X obj 30 381 list.contains;
#X text 200 381 checks if input list contains specified atoms;
#X obj 30 409 list.convolve;
#X text 200 409 convolution for lists;
#X obj 30 437 list.correlate;
#X text 200 437 list cross-correlation;
#X obj 30 465 list.count;
#X text 200 465 output the number of items that equal to specified
value;
#X obj 30 493 list.count_if;
#X text 200 493 output the number of items that satisfy to external
predicate;
#X obj 30 521 list.delta;
#X text 200 521 returns the difference between the current list of
floats and the previous one.;
#X obj 30 561 list.distribution;
#X text 200 561 list value distribution;
#X obj 30 589 list.do;
#X text 200 589 iterate and modify list contents via side-chain;
#X obj 30 617 list.each;
#X text 200 617 maps each list value via external side-chain;
#X obj 30 645 list.enumerate;
#X text 200 645 enumerates input list;
#X obj 30 673 list.equal;
#X text 200 673 checks if given lists are equal;
#X obj 30 701 list.first;
#X text 200 701 returns first list element;
#X obj 30 729 list.gen;
#X text 200 729 generates list of specified length via external generator;
#X obj 30 757 list.histogram;
#X text 200 757 outputs distribution histogram;
#X obj 30 785 list.insert;
#X text 200 785 insert atom or list to the specified position of input
list;
#X obj 30 813 list.integrator;
#X text 200 813 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 853 list.last;
#X text 200 853 output last list element;
#X obj 30 881 list.length;
#X text 200 881 output the number of atoms in the list;
#X obj 30 909 list.map;
#X text 200 909 map list values by specified dictionary;
#X obj 30 937 list.max;
#X text 200 937 output largest element in the list;
#X obj 30 965 list.mean;
#X text 200 965 calculates average of list of floats;
#X obj 30 993 list.min;
#X text 200 993 returns smallest element in the list;
#X obj 30 1021 list.none_of;
#X text 200 1021 checks if none of list atoms is accepted by predicate;
#X obj 30 1049 list.normalize;
#X text 200 1049 normalizes float list values to get their sum = 1.0;
#X obj 30 1077 list.pass;
#X text 200 1077 leave in list only specified elements;
#X obj 30 1105 list.pass_if;
#X text 200 1105 leave only elements accepted by predicate;
#X obj 30 1133 list.prepend;
#X text 200 1133 prepend atom or list before input list;
#X obj 30 1161 list.product;
#X text 200 1161 calculates product of floats in list;
#X obj 30 1189 list.range;
#X text 200 1189 output list smallest and largest value;
#X obj 30 1217 list.reduce;
#X text 200 1217 apply function of two arguments cumulatively to the
list;
#X obj 30 1245 list.reject;
#X text 200 1245 remove specified element from list;
#X obj 30 1273 list.remove;
#X text 200 1273 remove list element(s) at specified positions;
#X obj 30 1301 list.remove_if;
#X text 200 1301 remove elements by predicate;
#X obj 30 1329 list.repack;
#X text 200 1329 repack list to specified size;
#X obj 30 1357 list.repeat;
#X text 200 1357 output new list by repeating input list specified
times;
#X obj 30 1385 list.resample;
#X text 200 1385 resample list with specified ratio;
#X obj 30 1413 list.resize;
#X text 200 1413 changes list size;
#X obj 30 1441 list.reverse;
#X text 200 1441 reverses the order of the elements in the list;
#X obj 30 1469 list.rldecode;
#X text 200 1469 Run-length list decoder (RLE);
#X obj 30 1497 list.rlencode;
#X text 200 1497 RLE (run-length encoding) for lists;
#X obj 30 1525 list.rotate;
#X text 200 1525 rotates list;
#X obj 30 1553 list.route;
#X text 200 1553 acts like [route] but for lists;
#X obj 30 1581 list.rundiff;
#X text 200 1581 running difference;
#X obj 30 1609 list.runsum;
#X text 200 1609 running sum;
#X obj 30 1637 list.search;
#X text 200 1637 search specified items in input list;
#X obj 30 1665 list.separate;
#X text 200 1665 sends list elements one by one separately;
#X obj 30 1693 list.seq;
#X text 200 1693 numeric sequence list generator;
#X obj 30 1721 list.set;
#X text 200 1721 set list value at specified position;
#X obj 30 1749 list.shift;
#X text 200 1749 shifts the contents of the list with linear interpolation;
#X obj 30 1777 list.shuffle;
#X text 200 1777 randomly rearranges elements in list;
#X obj 30 1805 list.slice;
#X text 200 1805 extract sublist;
#X obj 30 1833 list.sort;
#X text 200 1833 sorts list values by ascending order;
#X obj 30 1861 list.sort_with;
#X text 200 1861 sort list with user defined side-chain;
#X obj 30 1889 list.split;
#X text 200 1889 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 1929 list.stretch;
#X text 200 1929 stretches list - changes its size with linear interpolation;
#X obj 30 1957 list.sum;
#X text 200 1957 calculates sum of floats in list;
#X obj 30 1985 list.unique;
#X text 200 1985 removes duplicates from input list;
#X obj 30 2013 list.unpack;
#X text 200 2013 unpack list elements to separate outlets;
#X obj 30 2041 list.unzip;
#X text 200 2041 splits list to N lists \, each to separate output;
#X obj 30 2069 list.walk;
#X text 200 2069 Walks thru the list;
#X obj 30 2097 list.zip;
#X text 200 2097 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::list 20 20 0 20 -104026
-4096 0;
#X obj 1 2152 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2162 library: ceammc;