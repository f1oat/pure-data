#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.tramp~;
#X text 200 965 triggered ramp generator for array;
#X obj 30 992 array.variance;
#X text 200 992 calculates variance of array values;
#X obj 30 1019 array.vplay;
#X text 200 1019 simple array player for using with vline~;
#X obj 30 1046 array.window;
#X text 200 1046 fill array with window;
#X obj 30 1073 plot.geomspace~;
#X text 200 1073 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1113 plot.hist~;
#X text 200 1113 calculate and output signal histogram;
#X obj 30 1140 plot.linspace~;
#X text 200 1140 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1180 plot.logspace~;
#X text 200 1180 outputs numbers spaced evenly on a log scale;
#X obj 30 1207 plot.response~;
#X text 200 1207 output amp/phase freq response to impulse;
#X obj 20 1234 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1286 ceammc.search;
#X text 200 1286 ceammc library search object;
#X obj 30 1316 ui.link @title [function] @url function-help.pd;
#X text 200 1313 named function;
#X obj 30 1338 function.call;
#X text 200 1338 call named function;
#X obj 30 1365 gain~;
#X text 200 1365 multislot signal gain;
#X obj 30 1392 gate~;
#X text 200 1392 multislot signal gate;
#X obj 30 1419 logger;
#X text 200 1419 advanced data logger;
#X obj 30 1446 matrix~;
#X text 200 1446 signal routing matrix;
#X obj 30 1473 merge~;
#X text 200 1473 parametrized signal merge;
#X obj 30 1500 metro.choice;
#X text 200 1500 metro with random choice from timeset;
#X obj 30 1527 metro.pattern;
#X text 200 1527 metro with rhythmic patterns;
#X obj 30 1554 metro.random;
#X text 200 1554 metro random bang with specified range;
#X obj 30 1581 metro.seq;
#X text 200 1581 metro sequencer;
#X obj 30 1608 metro.wchoice;
#X text 200 1608 metro with weighted random choice from timeset;
#X obj 30 1635 mix~;
#X text 200 1635 multislot signal mixer;
#X obj 30 1662 nsig~;
#X text 200 1662 Mulitchannel converter from control to audio rate;
#X obj 30 1689 obj.props;
#X text 200 1689 property extractor;
#X obj 30 1716 radio;
#X text 200 1716 float index to outlet values as radio switch;
#X obj 30 1743 split~;
#X text 200 1743 parametrized signal splitter;
#X obj 30 1770 spring;
#X text 200 1770 float value "spring";
#X obj 30 1797 sync;
#X text 200 1797 value synchronization;
#X obj 30 1824 window;
#X text 200 1824 returns window value by given window position;
#X obj 30 1851 xdac~;
#X text 200 1851 dac~ with channel ranges;
#X obj 30 1878 xfade2~;
#X text 200 1878 multi stereo-signal crossfade;
#X obj 30 1905 xfade~;
#X text 200 1905 multi signal crossfade;
#X obj 30 1932 z~;
#X text 200 1932 sample delay;
#X obj 20 1959 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 2000 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2011 chaos.gbman0;
#X text 200 2011 Gingerbreadman map chaotic generator;
#X obj 30 2038 chaos.gbman0~;
#X text 200 2038 Gingerbreadman map chaotic generator;
#X obj 30 2065 chaos.jong;
#X text 200 2065 Peter de Jong attractor;
#X obj 30 2092 chaos.logistic;
#X text 200 2092 Logistic map chaotic generator;
#X obj 30 2119 chaos.std0;
#X text 200 2119 Standard map chaotic generator;
#X obj 30 2146 chaos.std0~;
#X text 200 2146 Standard map chaotic generator;
#X obj 20 2173 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2214 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2225 array.p2s;
#X text 200 2225 convert array phase [0\..1] to sample position;
#X obj 30 2252 array.s2p;
#X text 200 2252 convert sample position to phase range [0\..1];
#X obj 30 2279 conv.amp2dbfs;
#X text 200 2279 convert from amplitude to decibel full scale;
#X obj 30 2306 conv.amp2dbfs~;
#X text 200 2306 convert from amplitude to decibel full scale;
#X obj 30 2333 conv.bar2ms;
#X text 200 2333 calculate bar and beat duration;
#X obj 30 2360 conv.bits2bang;
#X text 200 2360 convert list of bits to bang events;
#X obj 30 2387 conv.bits2int;
#X text 200 2387 convert list of bits to integer;
#X obj 30 2414 conv.bits2note;
#X text 200 2414 convert list of bits to note events;
#X obj 30 2441 conv.bits2pos;
#X text 200 2441 convert list of bits to list of bit position;
#X obj 30 2468 conv.bpm2hz;
#X text 200 2468 converts BPM to frequency in hertz;
#X obj 30 2495 conv.bpm2ms;
#X text 200 2495 convert frequency in BPM to period in milliseconds;
#X obj 30 2522 conv.bpm2sec;
#X text 200 2522 convert frequency in BPM to period in seconds;
#X obj 30 2549 conv.car2pol;
#X text 200 2549 convert cartesian coords to polar;
#X obj 30 2576 conv.cc2amp;
#X text 200 2576 convert from MIDI Control Change range;
#X obj 30 2603 conv.char2morse;
#X text 200 2603 convert character to morse code;
#X obj 30 2630 conv.color2rgba;
#X text 200 2630 convert named or hex color to separate RGBA values;
#X obj 30 2657 conv.dbfs2amp;
#X text 200 2657 convert decibel full scale to amplitude;
#X obj 30 2684 conv.dbfs2amp~;
#X text 200 2684 convert decibel full scale to amplitude;
#X obj 30 2711 conv.degree2key;
#X text 200 2711 convert scale degree to key;
#X obj 30 2738 conv.edge2bang;
#X text 200 2738 edge detector for numeric stream;
#X obj 30 2765 conv.hex2int;
#X text 200 2765 hex symbol to int value;
#X obj 30 2792 conv.int2bits;
#X text 200 2792 convert integer to list of bits;
#X obj 30 2819 conv.lin2curve;
#X text 200 2819 map linear to exponential range with 0 allowed.;
#X obj 30 2846 conv.lin2exp;
#X text 200 2846 maps linear range to exponential range;
#X obj 30 2873 conv.lin2lin;
#X text 200 2873 convert from one linear range to another;
#X obj 30 2900 conv.lin2lin~;
#X text 200 2900 convert from one linear range to another for signals;
#X obj 30 2927 conv.list2props;
#X text 200 2927 converts list to series of property messages;
#X obj 30 2954 conv.midi2freq;
#X text 200 2954 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2994 conv.ms2bpm;
#X text 200 2994 convert period in milliseconds to frequency in BPM;
#X obj 30 3021 conv.ms2samp;
#X text 200 3021 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3061 conv.ms2samp~;
#X text 200 3061 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3101 conv.ms2str;
#X text 200 3101 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3141 conv.note2guido;
#X text 200 3141 convert MIDI note to Guido notation;
#X obj 30 3168 conv.phase2rad;
#X text 200 3168 convert phase value [0-1] to radians [0-2π];
#X obj 30 3195 conv.phase2rad~;
#X text 200 3195 convert phase value [0-1] to radians [0-2π];
#X obj 30 3222 conv.pitch2midi;
#X text 200 3222 converts symbol pitch name to MIDI note number;
#X obj 30 3249 conv.pol2car;
#X text 200 3249 convert from polar coordinates to cartesian;
#X obj 30 3276 conv.rad2phase;
#X text 200 3276 convert radians value to phase;
#X obj 30 3303 conv.rad2phase~;
#X text 200 3303 convert radians value to phase;
#X obj 30 3330 conv.rgb2hex;
#X text 200 3330 convert separate RGB values to hex color;
#X obj 30 3357 conv.samp2ms;
#X text 200 3357 convert samples to time according to samplerate;
#X obj 30 3384 conv.samp2ms~;
#X text 200 3384 convert samples to milliseconds according to samplerate;
#X obj 30 3411 conv.samp2sec;
#X text 200 3411 convert samples to time according to samplerate;
#X obj 30 3438 conv.sec2bpm;
#X text 200 3438 convert period in seconds to frequency in BPM;
#X obj 30 3465 conv.sec2samp;
#X text 200 3465 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3505 conv.sec2str;
#X text 200 3505 converts float time in seconds to formated symbol
(or string);
#X obj 30 3532 conv.semi2ratio;
#X text 200 3532 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3559 conv.sig2float~;
#X text 200 3559 convert signal to floats;
#X obj 30 3586 conv.str2sec;
#X text 200 3586 converts formatted time to float value in seconds;
#X obj 30 3613 music.dur2time;
#X text 200 3613 convert duration list to time;
#X obj 30 3640 music.voice2midi;
#X text 200 3640 convert voice music list of midi pitches;
#X obj 20 3667 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3708 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3719 data.bimap;
#X text 200 3719 bidirectional map container;
#X obj 30 3746 data.color;
#X text 200 3746 Color datatype;
#X obj 30 3773 data.copy;
#X text 200 3773 make copy for any data types: MList \, Set etc...;
#X obj 30 3800 data.dict;
#X text 200 3800 dictionary container: store values by key;
#X obj 30 3827 data.fifo;
#X text 200 3827 First-In-First-Out (FIFO) queue data container;
#X obj 30 3854 data.float;
#X text 200 3854 robust float object;
#X obj 30 3881 data.int;
#X text 200 3881 robust int object;
#X obj 30 3908 data.list;
#X text 200 3908 list container;
#X obj 30 3935 data.mlist;
#X text 200 3935 multidimensional list container;
#X obj 30 3962 data.set;
#X text 200 3962 container that store unique elements;
#X obj 30 3989 data.set2list;
#X text 200 3989 converts set to list;
#X obj 30 4016 dict.contains;
#X text 200 4016 predicate to check if dict contains a keys;
#X obj 30 4043 dict.each;
#X text 200 4043 map each value in dict;
#X obj 30 4070 dict.from_list;
#X text 200 4070 creates dictionary from list;
#X obj 30 4097 dict.get;
#X text 200 4097 output dict values;
#X obj 30 4124 dict.keys;
#X text 200 4124 get list of dict keys;
#X obj 30 4151 dict.pass;
#X text 200 4151 passes specified keys in dict;
#X obj 30 4178 dict.reject;
#X text 200 4178 rejects specified keys from dict;
#X obj 30 4205 dict.size;
#X text 200 4205 dictionary size;
#X obj 30 4232 dict.to_list;
#X text 200 4232 converts dictionary to plain list;
#X obj 30 4259 dict.values;
#X text 200 4259 dictionary values as mlist;
#X obj 30 4286 mlist.flatten;
#X text 200 4286 flatten nested mlist;
#X obj 30 4313 rtree.to_list;
#X text 200 4313 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4340 set.contains;
#X text 200 4340 check if specified element is in set;
#X obj 30 4367 set.diff;
#X text 200 4367 difference between two sets;
#X obj 30 4394 set.equal;
#X text 200 4394 checks if two sets are equal (contains same elements);
#X obj 30 4421 set.intersect;
#X text 200 4421 output intersection of given sets;
#X obj 30 4448 set.size;
#X text 200 4448 get number of elements in set;
#X obj 30 4475 set.symdiff;
#X text 200 4475 symmetric difference between two sets;
#X obj 30 4502 set.union;
#X text 200 4502 output union of given sets;
#X obj 20 4529 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4570 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4581 dyn.comp2~;
#X text 200 4581 stereo dynamic range compressor;
#X obj 30 4608 dyn.comp_peak2~;
#X text 200 4608 stereo peak feed forward compressor with channel linking;
#X obj 30 4635 dyn.comp_peak~;
#X text 200 4635 mono dynamic range peak feed forward compressor;
#X obj 30 4662 dyn.comp_up2~;
#X text 200 4662 stereo upward compressor with channel linking;
#X obj 30 4689 dyn.comp_up~;
#X text 200 4689 mono upward compressor;
#X obj 30 4716 dyn.comp~;
#X text 200 4716 mono dynamic range compressors;
#X obj 30 4743 dyn.expand2~;
#X text 200 4743 stereo dynamic range expander with channel linking;
#X obj 30 4770 dyn.expand~;
#X text 200 4770 mono dynamic range expander;
#X obj 30 4797 dyn.gate2~;
#X text 200 4797 stereo signal gate;
#X obj 30 4824 dyn.gate~;
#X text 200 4824 mono signal gate;
#X obj 30 4851 dyn.limit2~;
#X text 200 4851 stereo 1176LN Peak Limiter;
#X obj 30 4878 dyn.limit~;
#X text 200 4878 mono 1176LN Peak Limiter;
#X obj 30 4905 dyn.softclip~;
#X text 200 4905 soft signal clip;
#X obj 20 4932 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4973 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4984 env.adsr~;
#X text 200 4984 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 5011 env.ar~;
#X text 200 5011 Attack/Release envelope generator;
#X obj 30 5038 env.asr~;
#X text 200 5038 Attack/Sustain/Release envelope generator;
#X obj 30 5065 env.concat;
#X text 200 5065 Envelope concatenation;
#X obj 30 5092 env.follow~;
#X text 200 5092 Envelope follower with independent attack and release
times;
#X obj 30 5119 env.mix;
#X text 200 5119 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5159 env.smooth~;
#X text 200 5159 An envelope with an exponential attack and release;
#X obj 30 5186 env.tscale;
#X text 200 5186 Envelope time-scale;
#X obj 30 5213 env.tshift;
#X text 200 5213 Envelope time-shift (horizontal);
#X obj 30 5240 env.vscale;
#X text 200 5240 Envelope value-scale;
#X obj 30 5267 env2array;
#X text 200 5267 Renders envelope to specified array;
#X obj 30 5294 env2vline;
#X text 200 5294 Converts envelope to bunch of vline messages;
#X obj 30 5321 envelope;
#X text 200 5321 Envelope data type;
#X obj 30 5348 vline2env;
#X text 200 5348 Converts vline messages to env;
#X obj 20 5375 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5416 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5427 expand_env;
#X text 200 5427 Substitute environment variables in data stream;
#X obj 30 5454 flow.append;
#X text 200 5454 append message to flow stream;
#X obj 30 5481 flow.change;
#X text 200 5481 rejects redundant input values;
#X obj 30 5508 flow.count;
#X text 200 5508 control flow event counter;
#X obj 30 5535 flow.delay;
#X text 200 5535 enhanced version on vanilla delay object;
#X obj 30 5562 flow.demultiplex;
#X text 200 5562 control flow demultiplexer;
#X obj 30 5589 flow.demultiplex2~;
#X text 200 5589 audio stream stereo demultiplexer;
#X obj 30 5616 flow.demultiplex~;
#X text 200 5616 audio stream demultiplexer;
#X obj 30 5643 flow.dollar;
#X text 200 5643 data flow dollar converter;
#X obj 30 5670 flow.dup;
#X text 200 5670 message duplicator;
#X obj 30 5697 flow.float;
#X text 200 5697 pass floats;
#X obj 30 5724 flow.gate;
#X text 200 5724 control flow gate. [spigot] analog;
#X obj 30 5751 flow.greater;
#X text 200 5751 numeric stream router;
#X obj 30 5778 flow.greater_eq;
#X text 200 5778 numeric stream router;
#X obj 30 5805 flow.group;
#X text 200 5805 group input atoms in list of specified size;
#X obj 30 5832 flow.interval;
#X text 200 5832 measure time between flow events;
#X obj 30 5859 flow.less;
#X text 200 5859 numeric stream router \, like many [moses];
#X obj 30 5886 flow.less_eq;
#X text 200 5886 numeric stream router \, like many [moses];
#X obj 30 5913 flow.list2many;
#X text 200 5913 routes list element with message selectors;
#X obj 30 5940 flow.match;
#X text 200 5940 route data flow by regexp match;
#X obj 30 5967 flow.mem;
#X text 200 5967 store data flow in memory;
#X obj 30 5994 flow.multiplex;
#X text 200 5994 control flow multiplexer;
#X obj 30 6021 flow.multiplex2~;
#X text 200 6021 audio stream stereo multiplexer;
#X obj 30 6048 flow.multiplex~;
#X text 200 6048 audio stream multiplexer;
#X obj 30 6075 flow.once;
#X text 200 6075 one message pass thru;
#X obj 30 6102 flow.pack;
#X text 200 6102 flow pack;
#X obj 30 6129 flow.pass;
#X text 200 6129 pass specified values;
#X obj 30 6156 flow.pass_if;
#X text 200 6156 pass values that accepted by predicate object;
#X obj 30 6183 flow.pipe;
#X text 200 6183 enhanced version on vanilla pipe object;
#X obj 30 6210 flow.queue;
#X text 200 6210 multi-channel control flow sync queue (or FIFO);
#X obj 30 6237 flow.record;
#X text 200 6237 flow stream recorder/player;
#X obj 30 6264 flow.reject;
#X text 200 6264 reject specified values;
#X obj 30 6291 flow.reject_if;
#X text 200 6291 reject values by predicate;
#X obj 30 6318 flow.ring;
#X text 200 6318 dataflow ring buffer;
#X obj 30 6345 flow.route;
#X text 200 6345 advanced message router;
#X obj 30 6372 flow.select;
#X text 200 6372 vanilla flow on steroids;
#X obj 30 6399 flow.seqdelay;
#X text 200 6399 sequential delay/router for input flow;
#X obj 30 6426 flow.space;
#X text 200 6426 space in time messages received at the same logical
time;
#X obj 30 6453 flow.speedlim;
#X text 200 6453 control stream speed limiter;
#X obj 30 6480 flow.split;
#X text 200 6480 split data flow by external side-chain predicate;
#X obj 30 6507 flow.stack;
#X text 200 6507 any message stack;
#X obj 30 6534 flow.sync;
#X text 200 6534 bus with only hot inlets;
#X obj 30 6561 flow.sync_pack;
#X text 200 6561 flow pack with all hot inlets;
#X obj 30 6588 flow.tee~;
#X text 200 6588 separate audio and control streams;
#X obj 30 6615 replace;
#X text 200 6615 Replace atoms in data stream;
#X obj 30 6642 route.any;
#X text 200 6642 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6669 route.bang;
#X text 200 6669 separate bang messages from other types;
#X obj 30 6696 route.cycle;
#X text 200 6696 cyclic message router;
#X obj 30 6723 route.float;
#X text 200 6723 separate float messages from other types;
#X obj 30 6750 route.list;
#X text 200 6750 separate list messages from other types;
#X obj 30 6777 route.prop;
#X text 200 6777 separate property messages from other types;
#X obj 30 6804 route.random;
#X text 200 6804 routes input flow to random outlet;
#X obj 30 6831 route.symbol;
#X text 200 6831 separate symbol messages from other types;
#X obj 20 6858 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6899 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6910 flt.a-weight;
#X text 200 6910 convert frequency to A-weight value;
#X obj 30 6937 flt.biquad~;
#X text 200 6937 second order IIR filter.;
#X obj 30 6964 flt.bpf12~;
#X text 200 6964 Two pole band-pass butterworth filter;
#X obj 30 6991 flt.bpf24~;
#X text 200 6991 Four pole band-pass butterworth filter;
#X obj 30 7018 flt.c_apf;
#X text 200 7018 Allpass filter coefficient calculator for biquad;
#X obj 30 7045 flt.c_bpf~;
#X text 200 7045 BPF coefficient calculator for biquad filter;
#X obj 30 7072 flt.c_highshelf~;
#X text 200 7072 Highshelf filter coefficient calculator for biquad;
#X obj 30 7099 flt.c_hpf;
#X text 200 7099 HPF coefficient calculator for biquad filter;
#X obj 30 7126 flt.c_hpf~;
#X text 200 7126 HPF coefficient calculator for biquad filter;
#X obj 30 7153 flt.c_lowshelf~;
#X text 200 7153 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7180 flt.c_lpf;
#X text 200 7180 LPF coefficient calculator for biquad filter;
#X obj 30 7207 flt.c_lpf~;
#X text 200 7207 LPF coefficient calculator for biquad filter;
#X obj 30 7234 flt.c_notch;
#X text 200 7234 Notch filter coefficient calculator for biquad;
#X obj 30 7261 flt.c_notch~;
#X text 200 7261 Band-reject coefficient calculator for biquad filter;
#X obj 30 7288 flt.c_peak~;
#X text 200 7288 Peaking equalizer calculator for biquad;
#X obj 30 7315 flt.c_pole;
#X text 200 7315 One-pole coefficient calculator for biquad filter;
#X obj 30 7342 flt.dcblock2~;
#X text 200 7342 stereo DC blocker;
#X obj 30 7369 flt.dcblock~;
#X text 200 7369 mono DC blocker;
#X obj 30 7396 flt.eq10~;
#X text 200 7396 graphic 10 band equalizer;
#X obj 30 7423 flt.eq_peak_cq~;
#X text 200 7423 constant-Q second order peaking equalizer section;
#X obj 30 7450 flt.eq_peak~;
#X text 200 7450 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7505 flt.fb_comb~;
#X text 200 7505 feedback comb filter;
#X obj 30 7532 flt.fbank5x1~;
#X text 200 7532 5 band one octave butterworth filterbank;
#X obj 30 7559 flt.ff_comb~;
#X text 200 7559 feed forward comb filter;
#X obj 30 7586 flt.freqz;
#X text 200 7586 compute the frequency response of a digital filter;
#X obj 30 7613 flt.freqz~;
#X text 200 7613 compute the frequency response of a digital filter;
#X obj 30 7640 flt.highshelf~;
#X text 200 7640 gain boost|cut above some frequency;
#X obj 30 7667 flt.hpf12~;
#X text 200 7667 High-pass second order Butterworth filter;
#X obj 30 7694 flt.hpf24~;
#X text 200 7694 High-pass fourth order Butterworth filter;
#X obj 30 7721 flt.lowshelf~;
#X text 200 7721 gain boost|cut below some frequency;
#X obj 30 7748 flt.lpf12~;
#X text 200 7748 Low-pass second order Butterworth filter;
#X obj 30 7775 flt.lpf24~;
#X text 200 7775 Low-pass fourth order Butterworth filter;
#X obj 30 7802 flt.median;
#X text 200 7802 Median control flow filter;
#X obj 30 7829 flt.moog_vcf~;
#X text 200 7829 Moog Voltage Controlled Filter;
#X obj 30 7856 flt.notch~;
#X text 200 7856 band-rejection filter;
#X obj 30 7883 flt.resonbp~;
#X text 200 7883 Simple resonant bandpass filter;
#X obj 30 7910 flt.resonhp~;
#X text 200 7910 Simple resonant highpass filter;
#X obj 30 7937 flt.resonlp~;
#X text 200 7937 Simple resonant lowpass filter;
#X obj 20 7964 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 8005 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8016 fx.bitdown~;
#X text 200 8016 bit downer and downsampler effect;
#X obj 30 8043 fx.chorus~;
#X text 200 8043 Chorus effect;
#X obj 30 8070 fx.dattorro~;
#X text 200 8070 dattorro reverb;
#X obj 30 8097 fx.delay~;
#X text 200 8097 smooth delay with a feedback control;
#X obj 30 8124 fx.distortion1~;
#X text 200 8124 distortion #1 from Guitarix effects set;
#X obj 30 8151 fx.distortion2~;
#X text 200 8151 distortion #2 from Guitarix effects set;
#X obj 30 8178 fx.distortion3~;
#X text 200 8178 simple distortion #3 from Guitarix effects set;
#X obj 30 8205 fx.distortion~;
#X text 200 8205 cubic nonlinearity distortion;
#X obj 30 8232 fx.drive~;
#X text 200 8232 Guitarix drive effect;
#X obj 30 8259 fx.drone_box~;
#X text 200 8259 mono sympathetic resonance generator;
#X obj 30 8286 fx.echo2~;
#X text 200 8286 stereo echo effect;
#X obj 30 8313 fx.echo~;
#X text 200 8313 enhanced echo effect;
#X obj 30 8340 fx.flanger~;
#X text 200 8340 mono flanging effect;
#X obj 30 8367 fx.freeverb2~;
#X text 200 8367 freeverb2 - stereo version of freeverb;
#X obj 30 8394 fx.freeverb~;
#X text 200 8394 freeverb - common used open-source reverb;
#X obj 30 8421 fx.freqshift~;
#X text 200 8421 frequency shifter or single-sideband ring modulation;
#X obj 30 8448 fx.granulator~;
#X text 200 8448 simple input stream granulator;
#X obj 30 8475 fx.greyhole~;
#X text 200 8475 A complex echo-like effect;
#X obj 30 8502 fx.infrev~;
#X text 200 8502 port of Infinity VST plugin from airwindows;
#X obj 30 8529 fx.jcrev~;
#X text 200 8529 Schroeder quad reverberator from 1972;
#X obj 30 8556 fx.looper~;
#X text 200 8556 One track looper;
#X obj 30 8583 fx.overdrive~;
#X text 200 8583 overdrive effect;
#X obj 30 8610 fx.pitchshift_s~;
#X text 200 8610 signal version of fx.pitchshift~;
#X obj 30 8637 fx.pitchshift~;
#X text 200 8637 simple pitch shifter based on 2 delay lines;
#X obj 30 8664 fx.rb_pitchshift~;
#X text 200 8664 rubber band pitchshift;
#X obj 30 8691 fx.recho~;
#X text 200 8691 reversed echo effect;
#X obj 30 8718 fx.ringmod~;
#X text 200 8718 ring modulator effect;
#X obj 30 8745 fx.room~;
#X text 200 8745 Gardners room emulation algorithms;
#X obj 30 8772 fx.satrev~;
#X text 200 8772 Schroeder reverberator from 1971;
#X obj 30 8799 fx.scramble~;
#X text 200 8799 scramble delayed sound fragments;
#X obj 30 8826 fx.shimmer~;
#X text 200 8826 shimmer reverb effect effect;
#X obj 30 8853 fx.stutter~;
#X text 200 8853 stutter effect;
#X obj 30 8880 fx.tapiir~;
#X text 200 8880 multi-tap delay;
#X obj 30 8907 fx.tremolo~;
#X text 200 8907 tremolo effect from guitarix project;
#X obj 30 8934 fx.vocoder~;
#X text 200 8934 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8974 fx.wahwah~;
#X text 200 8974 digitized CryBaby wah pedal;
#X obj 30 9001 fx.zita_rev1~;
#X text 200 9001 Zita stereo reverb;
#X obj 20 9028 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 9069 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9080 global.dict;
#X text 200 9080 global named dict object;
#X obj 30 9107 global.float;
#X text 200 9107 global named float object;
#X obj 30 9134 global.int;
#X text 200 9134 global named integer object;
#X obj 30 9161 global.list;
#X text 200 9161 global named list object;
#X obj 30 9188 global.mlist;
#X text 200 9188 global named mlist object;
#X obj 30 9215 global.set;
#X text 200 9215 global named set object;
#X obj 20 9242 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 9283 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9294 hw.apple_smc;
#X text 200 9294 query the system management control in Apples;
#X obj 30 9321 hw.apple_sms;
#X text 200 9321 query the sudden motion sensor in Apples;
#X obj 30 9348 hw.arduino;
#X text 200 9348 Arduino device;
#X obj 30 9375 hw.cpu_temp;
#X text 200 9375 get CPU temperature;
#X obj 30 9402 hw.display;
#X text 200 9402 get/set display properties;
#X obj 30 9429 hw.kbd_light;
#X text 200 9429 Get/set keyboard light on some devices;
#X obj 30 9456 hw.motu.avb;
#X text 200 9456 controls Motu AVB devices over http requests;
#X obj 30 9483 hw.serial;
#X text 200 9483 serial port device;
#X obj 20 9510 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9551 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9565 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9562 faust realtime compilation;
#X obj 30 9587 lang.lua;
#X text 200 9587 Lua JIT language bindings;
#X obj 30 9617 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9614 faust compiled ui object;
#X obj 20 9639 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9680 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9691 lfo.+pulse~;
#X text 200 9691 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9718 lfo.+saw~;
#X text 200 9718 Positive unit-amplitude low frequency saw wave;
#X obj 30 9745 lfo.+square~;
#X text 200 9745 Positive low frequency square wave;
#X obj 30 9772 lfo.+tri~;
#X text 200 9772 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9799 lfo.impulse~;
#X text 200 9799 Unit-amplitude low-frequency impulse train;
#X obj 30 9826 lfo.mosc~;
#X text 200 9826 multi-oscillator with various waveforms;
#X obj 30 9853 lfo.pulse~;
#X text 200 9853 Full-range unit-amplitude low frequency pulse train;
#X obj 30 9880 lfo.saw~;
#X text 200 9880 Full-range unit-amplitude low frequency saw;
#X obj 30 9907 lfo.square~;
#X text 200 9907 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 9934 lfo.tri~;
#X text 200 9934 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 9961 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 10002 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10013 list.^at;
#X text 200 10013 on input index(es) outputs list element(s);
#X obj 30 10040 list.^contains;
#X text 200 10040 checks if input atom is found in the list;
#X obj 30 10067 list.^search;
#X text 200 10067 on input atom returns it index in list;
#X obj 30 10094 list.all_of;
#X text 200 10094 checks if all list atoms accepted by predicate;
#X obj 30 10121 list.any_of;
#X text 200 10121 checks if at least one list element is accepted by
predicate;
#X obj 30 10148 list.append;
#X text 200 10148 append atom or list to the end of input list;
#X obj 30 10175 list.apply_to;
#X text 200 10175 modifies list value at specified position \, filtering
it via external object;
#X obj 30 10215 list.at;
#X text 200 10215 outputs list element(s) at specified index(es);
#X obj 30 10242 list.choice;
#X text 200 10242 outputs random element from list;
#X obj 30 10269 list.contains;
#X text 200 10269 checks if input list contains specified atoms;
#X obj 30 10296 list.convolve;
#X text 200 10296 convolution for lists;
#X obj 30 10323 list.correlate;
#X text 200 10323 list cross-correlation;
#X obj 30 10350 list.count;
#X text 200 10350 output the number of items that equal to specified
value;
#X obj 30 10377 list.count_if;
#X text 200 10377 output the number of items that satisfy to external
predicate;
#X obj 30 10404 list.delta;
#X text 200 10404 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10444 list.distribution;
#X text 200 10444 list value distribution;
#X obj 30 10471 list.do;
#X text 200 10471 iterate and modify list contents via side-chain;
#X obj 30 10498 list.each;
#X text 200 10498 maps each list value via external side-chain;
#X obj 30 10525 list.enumerate;
#X text 200 10525 enumerates input list;
#X obj 30 10552 list.equal;
#X text 200 10552 checks if given lists are equal;
#X obj 30 10579 list.first;
#X text 200 10579 returns first list element;
#X obj 30 10606 list.gen;
#X text 200 10606 generates list of specified length via external generator;
#X obj 30 10633 list.histogram;
#X text 200 10633 outputs distribution histogram;
#X obj 30 10660 list.insert;
#X text 200 10660 insert atom or list to the specified position of
input list;
#X obj 30 10687 list.integrator;
#X text 200 10687 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10727 list.last;
#X text 200 10727 output last list element;
#X obj 30 10754 list.length;
#X text 200 10754 output the number of atoms in the list;
#X obj 30 10781 list.map;
#X text 200 10781 map list values by specified dictionary;
#X obj 30 10808 list.max;
#X text 200 10808 output largest element in the list;
#X obj 30 10835 list.mean;
#X text 200 10835 calculates average of list of floats;
#X obj 30 10862 list.min;
#X text 200 10862 returns smallest element in the list;
#X obj 30 10889 list.none_of;
#X text 200 10889 checks if none of list atoms is accepted by predicate;
#X obj 30 10916 list.normalize;
#X text 200 10916 normalizes float list values to get their sum = 1.0;
#X obj 30 10943 list.pass;
#X text 200 10943 leave in list only specified elements;
#X obj 30 10970 list.pass_if;
#X text 200 10970 leave only elements accepted by predicate;
#X obj 30 10997 list.prepend;
#X text 200 10997 prepend atom or list before input list;
#X obj 30 11024 list.product;
#X text 200 11024 calculates product of floats in list;
#X obj 30 11051 list.range;
#X text 200 11051 output list smallest and largest value;
#X obj 30 11078 list.reduce;
#X text 200 11078 apply function of two arguments cumulatively to the
list;
#X obj 30 11105 list.reject;
#X text 200 11105 remove specified element from list;
#X obj 30 11132 list.remove;
#X text 200 11132 remove list element(s) at specified positions;
#X obj 30 11159 list.remove_if;
#X text 200 11159 remove elements by predicate;
#X obj 30 11186 list.repack;
#X text 200 11186 repack list to specified size;
#X obj 30 11213 list.repeat;
#X text 200 11213 output new list by repeating input list specified
times;
#X obj 30 11240 list.resample;
#X text 200 11240 resample list with specified ratio;
#X obj 30 11267 list.resize;
#X text 200 11267 changes list size;
#X obj 30 11294 list.reverse;
#X text 200 11294 reverses the order of the elements in the list;
#X obj 30 11321 list.rldecode;
#X text 200 11321 Run-length list decoder (RLE);
#X obj 30 11348 list.rlencode;
#X text 200 11348 RLE (run-length encoding) for lists;
#X obj 30 11375 list.rotate;
#X text 200 11375 rotates list;
#X obj 30 11402 list.route;
#X text 200 11402 acts like [route] but for lists;
#X obj 30 11429 list.rundiff;
#X text 200 11429 running difference;
#X obj 30 11456 list.runsum;
#X text 200 11456 running sum;
#X obj 30 11483 list.search;
#X text 200 11483 search specified items in input list;
#X obj 30 11510 list.separate;
#X text 200 11510 sends list elements one by one separately;
#X obj 30 11537 list.seq;
#X text 200 11537 numeric sequence list generator;
#X obj 30 11564 list.set;
#X text 200 11564 set list value at specified position;
#X obj 30 11591 list.shift;
#X text 200 11591 shifts the contents of the list with linear interpolation;
#X obj 30 11618 list.shuffle;
#X text 200 11618 randomly rearranges elements in list;
#X obj 30 11645 list.slice;
#X text 200 11645 extract sublist;
#X obj 30 11672 list.sort;
#X text 200 11672 sorts list values by ascending order;
#X obj 30 11699 list.sort_with;
#X text 200 11699 sort list with user defined side-chain;
#X obj 30 11726 list.split;
#X text 200 11726 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11766 list.stretch;
#X text 200 11766 stretches list - changes its size with linear interpolation;
#X obj 30 11793 list.sum;
#X text 200 11793 calculates sum of floats in list;
#X obj 30 11820 list.unique;
#X text 200 11820 removes duplicates from input list;
#X obj 30 11847 list.unpack;
#X text 200 11847 unpack list elements to separate outlets;
#X obj 30 11874 list.unzip;
#X text 200 11874 splits list to N lists \, each to separate output;
#X obj 30 11901 list.walk;
#X text 200 11901 Walks thru the list;
#X obj 30 11928 list.zip;
#X text 200 11928 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 11983 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 12024 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12035 live.capture~;
#X text 200 12035 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 12075 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 12116 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12127 local.dict;
#X text 200 12127 local named dict object;
#X obj 30 12154 local.float;
#X text 200 12154 canvas-scoped named float variable;
#X obj 30 12181 local.int;
#X text 200 12181 canvas-scoped named integer variable;
#X obj 30 12208 local.list;
#X text 200 12208 local named list object;
#X obj 30 12235 local.mlist;
#X text 200 12235 local named mlist object;
#X obj 30 12262 local.set;
#X text 200 12262 local named set object;
#X obj 20 12289 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 12330 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12341 math.abs;
#X text 200 12341 absolute value function;
#X obj 30 12368 math.abs~;
#X text 200 12368 absolute value function for signals;
#X obj 30 12395 math.acos;
#X text 200 12395 arc cosine function;
#X obj 30 12422 math.acosh;
#X text 200 12422 inverse hyperbolic cosine function;
#X obj 30 12449 math.acosh~;
#X text 200 12449 hyperbolic arc cosine for signals;
#X obj 30 12476 math.acos~;
#X text 200 12476 arc cosine function for signals;
#X obj 30 12503 math.and;
#X text 200 12503 operation AND for multiple arguments;
#X obj 30 12530 math.approx;
#X text 200 12530 check if input value approximately equal to pattern;
#X obj 30 12557 math.asin;
#X text 200 12557 arc sine function;
#X obj 30 12584 math.asinh;
#X text 200 12584 inverse hyperbolic sine function;
#X obj 30 12611 math.asinh~;
#X text 200 12611 hyperbolic arc sine for signals;
#X obj 30 12638 math.asin~;
#X text 200 12638 arc sine for signals;
#X obj 30 12665 math.atan;
#X text 200 12665 arc tangent function;
#X obj 30 12692 math.atanh;
#X text 200 12692 inverse hyperbolic tangent function;
#X obj 30 12719 math.atanh~;
#X text 200 12719 hyperbolic arc tangent for signals;
#X obj 30 12746 math.atan~;
#X text 200 12746 arc tangent for signals;
#X obj 30 12773 math.binomial;
#X text 200 12773 binomial coefficient calculator;
#X obj 30 12800 math.cabs~;
#X text 200 12800 magnitude of a complex signals;
#X obj 30 12827 math.carg~;
#X text 200 12827 phase angle of a complex signals;
#X obj 30 12854 math.cbrt;
#X text 200 12854 cube root function;
#X obj 30 12881 math.cbrt~;
#X text 200 12881 cube root function for signals;
#X obj 30 12908 math.cdiv~;
#X text 200 12908 division of complex signals;
#X obj 30 12935 math.ceil;
#X text 200 12935 round to smallest integral value not less than input
value;
#X obj 30 12962 math.ceil~;
#X text 200 12962 round to smallest integral value not less than input
value;
#X obj 30 12989 math.cexp~;
#X text 200 12989 exponent of a complex signals;
#X obj 30 13016 math.cmul~;
#X text 200 13016 multiplication of complex signals;
#X obj 30 13043 math.cos;
#X text 200 13043 cosine function;
#X obj 30 13070 math.cosh;
#X text 200 13070 hyperbolic cosine function;
#X obj 30 13097 math.cosh~;
#X text 200 13097 hyperbolic cosine for signals;
#X obj 30 13124 math.cos~;
#X text 200 13124 cosine function;
#X obj 30 13151 math.div;
#X text 200 13151 division (on lists too);
#X obj 30 13178 math.e;
#X text 200 13178 mathematical constant \, base of the natural logarithm;
#X obj 30 13205 math.erf;
#X text 200 13205 error function;
#X obj 30 13232 math.erf~;
#X text 200 13232 error function for signals;
#X obj 30 13259 math.exp;
#X text 200 13259 exponential functions;
#X obj 30 13286 math.exp2;
#X text 200 13286 exponential functions;
#X obj 30 13313 math.exp2~;
#X text 200 13313 base-2 exponential for signal;
#X obj 30 13340 math.expr;
#X text 200 13340 dynamic [expr];
#X obj 30 13367 math.exp~;
#X text 200 13367 base-e exponential for signal;
#X obj 30 13394 math.floor;
#X text 200 13394 round to largest integral value not greater than
x;
#X obj 30 13421 math.floor~;
#X text 200 13421 round to largest integral value not greater than
x;
#X obj 30 13448 math.gamma;
#X text 200 13448 gamma function;
#X obj 30 13475 math.gamma~;
#X text 200 13475 gamma function for floating point signals;
#X obj 30 13502 math.gcd;
#X text 200 13502 calculate greatest common divisor;
#X obj 30 13529 math.inf;
#X text 200 13529 infinity value that cannot be represented accurately;
#X obj 30 13556 math.inf~;
#X text 200 13556 inifinity signal generator;
#X obj 30 13583 math.lcm;
#X text 200 13583 calculate least common multiple;
#X obj 30 13610 math.lgamma;
#X text 200 13610 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13637 math.lgamma~;
#X text 200 13637 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13677 math.log;
#X text 200 13677 natural logarithm;
#X obj 30 13704 math.log10;
#X text 200 13704 logarithm functions;
#X obj 30 13731 math.log10~;
#X text 200 13731 natural logarithm;
#X obj 30 13758 math.log2;
#X text 200 13758 logarithm functions;
#X obj 30 13785 math.log2~;
#X text 200 13785 base-2 logarithm;
#X obj 30 13812 math.log~;
#X text 200 13812 natural logarithm;
#X obj 30 13839 math.mul;
#X text 200 13839 multiplication (on lists too);
#X obj 30 13866 math.nan;
#X text 200 13866 Not a Number \, unrepresentable value;
#X obj 30 13893 math.nan~;
#X text 200 13893 signal NaN;
#X obj 30 13920 math.neg;
#X text 200 13920 negate function;
#X obj 30 13947 math.or;
#X text 200 13947 operation OR for multiple arguments;
#X obj 30 13974 math.pi;
#X text 200 13974 mathematical constant;
#X obj 30 14001 math.pi~;
#X text 200 14001 mathematical constant;
#X obj 30 14028 math.polyeval;
#X text 200 14028 evaluates the polynomial described by the coefficients
list;
#X obj 30 14055 math.reciprocal;
#X text 200 14055 calculate reciprocal number;
#X obj 30 14082 math.reciprocal~;
#X text 200 14082 calculate reciprocal number for signals;
#X obj 30 14109 math.round;
#X text 200 14109 round to integral value \, regardless of rounding
direction;
#X obj 30 14136 math.round~;
#X text 200 14136 signal round;
#X obj 30 14163 math.sign;
#X text 200 14163 sign function;
#X obj 30 14190 math.sin;
#X text 200 14190 sine function;
#X obj 30 14217 math.sinh;
#X text 200 14217 hyperbolic sine function;
#X obj 30 14244 math.sinh~;
#X text 200 14244 hyperbolic sine for signals;
#X obj 30 14271 math.sin~;
#X text 200 14271 sine function;
#X obj 30 14298 math.sqrt;
#X text 200 14298 square root function;
#X obj 30 14325 math.sqrt~;
#X text 200 14325 square root for signal;
#X obj 30 14352 math.squared;
#X text 200 14352 value square;
#X obj 30 14379 math.squared~;
#X text 200 14379 signal value square;
#X obj 30 14406 math.sync_add;
#X text 200 14406 sync addition;
#X obj 30 14433 math.sync_and;
#X text 200 14433 sync logical AND operation;
#X obj 30 14460 math.sync_div;
#X text 200 14460 sync division;
#X obj 30 14487 math.sync_eq;
#X text 200 14487 sync equal numbers check;
#X obj 30 14514 math.sync_ge;
#X text 200 14514 sync greater equal numbers compare;
#X obj 30 14541 math.sync_gt;
#X text 200 14541 sync greater then numbers compare;
#X obj 30 14568 math.sync_le;
#X text 200 14568 sync less equal numbers compare;
#X obj 30 14595 math.sync_lshift;
#X text 200 14595 sync signed bit left shift;
#X obj 30 14622 math.sync_lt;
#X text 200 14622 sync less then numbers compare;
#X obj 30 14649 math.sync_mod;
#X text 200 14649 sync remainder of modulo division (float or integer);
#X obj 30 14676 math.sync_mul;
#X text 200 14676 sync multiplication;
#X obj 30 14703 math.sync_ne;
#X text 200 14703 sync numbers for not equality;
#X obj 30 14730 math.sync_or;
#X text 200 14730 sync logical OR operation;
#X obj 30 14757 math.sync_rshift;
#X text 200 14757 sync signed bit right shift;
#X obj 30 14784 math.sync_sub;
#X text 200 14784 sync subtraction;
#X obj 30 14811 math.sync_xor;
#X text 200 14811 sync logical XOR operation;
#X obj 30 14838 math.tan;
#X text 200 14838 tangent function;
#X obj 30 14865 math.tanh;
#X text 200 14865 hyperbolic tangent function;
#X obj 30 14892 math.tanh~;
#X text 200 14892 hyperbolic tangent for signals;
#X obj 30 14919 math.tan~;
#X text 200 14919 tangent function;
#X obj 30 14946 math.trunc;
#X text 200 14946 truncate to integer value;
#X obj 30 14973 math.trunc~;
#X text 200 14973 truncate to integer value;
#X obj 20 15000 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 15041 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15052 midi.arp;
#X text 200 15052 MIDI arpeggiator;
#X obj 30 15079 midi.cc;
#X text 200 15079 enhanced version of vanilla ctlin;
#X obj 30 15106 midi.clock;
#X text 200 15106 midi clock toolbox;
#X obj 30 15133 midi.ctl2str;
#X text 200 15133 convert Standard MIDI Controllers number to name;
#X obj 30 15160 midi.event2ctl;
#X text 200 15160 convert MidiEvent message to controller channel/value
pair;
#X obj 30 15187 midi.event2note;
#X text 200 15187 convert MidiEvent message to midi note/velocity pair;
#X obj 30 15214 midi.event2prg;
#X text 200 15214 convert MidiEvent message to midi program change
value;
#X obj 30 15241 midi.file;
#X text 200 15241 standard midi file SMF reader and writer;
#X obj 30 15268 midi.kbd;
#X text 200 15268 computer keyboard midi;
#X obj 30 15295 midi.key2str;
#X text 200 15295 convert key number to SPN name according to tonality;
#X obj 30 15322 midi.modus;
#X text 200 15322 snap/skip midi pitches according modus;
#X obj 30 15349 midi.oct;
#X text 200 15349 midi octave transpose;
#X obj 30 15376 midi.prg2str;
#X text 200 15376 convert GM Instrument number to name (string or symbol);
#X obj 30 15403 midi.split;
#X text 200 15403 midi note splitter;
#X obj 30 15430 midi.sustain;
#X text 200 15430 sustain pedal emulation;
#X obj 30 15457 midi.sysex;
#X text 200 15457 sysex input messages as list;
#X obj 30 15484 midi.track;
#X text 200 15484 extract track from MidiFile;
#X obj 30 15511 midi.tuning;
#X text 200 15511 apply tuning to midi messages;
#X obj 30 15538 midi.vramp;
#X text 200 15538 apply crescendo or diminuendo for midi message flow;
#X obj 30 15565 midi.vrand;
#X text 200 15565 midi velocity randomizer;
#X obj 20 15592 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 15633 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15644 click~;
#X text 200 15644 Output single impulse on bang;
#X obj 30 15671 fluid~;
#X text 200 15671 FluidSynth SoundFont 2 player;
#X obj 30 15698 modplug~;
#X text 200 15698 MOD file player (using libmodplug);
#X obj 30 15725 qrcode;
#X text 200 15725 QR code generator;
#X obj 30 15752 risset.gliss;
#X text 200 15752 Sheppard/Risset glissando calculator;
#X obj 30 15779 sfizz~;
#X text 200 15779 SFZ format sample player;
#X obj 30 15806 speech.flite;
#X text 200 15806 render speech to array;
#X obj 30 15833 speech.flite~;
#X text 200 15833 render speech to array;
#X obj 30 15860 speech.rhvoice~;
#X text 200 15860 RHVoice text to speech synthesis;
#X obj 20 15887 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 15928 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15939 loadexpr;
#X text 200 15939 send message when patch loads;
#X obj 30 15966 msg;
#X text 200 15966 message constructor;
#X obj 30 15993 msg.after;
#X text 200 15993 send specified message after incoming message;
#X obj 30 16020 msg.onclose;
#X text 200 16020 send message when patch closes;
#X obj 30 16047 msg.onload;
#X text 200 16047 send message when patch loads;
#X obj 30 16074 msg.sched;
#X text 200 16074 message scheduler;
#X obj 20 16101 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 16142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16153 rhythm.euclid;
#X text 200 16153 euclid pattern generator;
#X obj 30 16180 rhythm.hexbeat;
#X text 200 16180 hexbeat pattern generator;
#X obj 30 16207 rhythm.lsystem;
#X text 200 16207 L-system pattern generator;
#X obj 20 16234 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 16275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16286 net.artnet.send;
#X text 200 16286 ArtNet DMX message sender;
#X obj 30 16313 net.host2ip;
#X text 200 16313 returns IP address by DNS name;
#X obj 30 16340 net.http.send;
#X text 200 16340 HTTP request sender;
#X obj 30 16367 net.osc.receive;
#X text 200 16367 OSC message listener;
#X obj 30 16394 net.osc.send;
#X text 200 16394 OSC message sender;
#X obj 30 16421 net.osc.server;
#X text 200 16421 OSC server control;
#X obj 20 16448 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 16489 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16500 noise.baker;
#X text 200 16500 Part of a-chaos library;
#X obj 30 16527 noise.clifford;
#X text 200 16527 clifford attractor;
#X obj 30 16554 noise.collatz;
#X text 200 16554 collatz conjecture output;
#X obj 30 16581 noise.colored~;
#X text 200 16581 colored noise generator with an arbitrary spectral
roll;
#X obj 30 16608 noise.crackle~;
#X text 200 16608 sparse noise generator;
#X obj 30 16635 noise.duffing;
#X text 200 16635 duffing attractor;
#X obj 30 16662 noise.ginger;
#X text 200 16662 Gingerbreadman map chaotic generator;
#X obj 30 16689 noise.henon;
#X text 200 16689 henon attractor;
#X obj 30 16716 noise.henon_heilles;
#X text 200 16716 Hénon–Heiles_system;
#X obj 30 16743 noise.henon_phase;
#X text 200 16743 henon phase Ddagrams;
#X obj 30 16770 noise.henonf;
#X text 200 16770 Henon phase;
#X obj 30 16797 noise.ikeda;
#X text 200 16797 Ikeda attractor;
#X obj 30 16824 noise.lfreq0~;
#X text 200 16824 sampled/held noise (piecewise constant);
#X obj 30 16851 noise.lfreq~;
#X text 200 16851 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 16878 noise.lorenz;
#X text 200 16878 Lorenz chaos;
#X obj 30 16905 noise.lyapunov;
#X text 200 16905 lyapunov random attractor;
#X obj 30 16932 noise.navier_stokes;
#X text 200 16932 navier-stokes diff equations;
#X obj 30 16959 noise.pink~;
#X text 200 16959 Pink noise generator;
#X obj 30 16986 noise.rossler;
#X text 200 16986 Rössler attractor;
#X obj 30 17013 noise.stein;
#X text 200 17013 Stein distribution;
#X obj 30 17040 noise.torus;
#X text 200 17040 torus attractor;
#X obj 30 17067 noise.verhulst;
#X text 200 17067 verhulst distribution;
#X obj 30 17094 noise.white~;
#X text 200 17094 White noise generator;
#X obj 20 17121 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 17162 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17173 osc.blit~;
#X text 200 17173 Bandlimited impulse train oscillator;
#X obj 30 17200 osc.impulse~;
#X text 200 17200 Bandlimited impulse train generator;
#X obj 30 17227 osc.pulse~;
#X text 200 17227 Bandlimited pulse train oscillator;
#X obj 30 17254 osc.saw4~;
#X text 200 17254 Bandlimited sawtooth wave;
#X obj 30 17281 osc.saw~;
#X text 200 17281 Alias-free sawtooth wave;
#X obj 30 17308 osc.sinfb~;
#X text 200 17308 Sine oscilator with feedback;
#X obj 30 17335 osc.sin~;
#X text 200 17335 Sine wave oscillator;
#X obj 30 17362 osc.square~;
#X text 200 17362 Bandlimited square wave oscillator;
#X obj 30 17389 osc.tri~;
#X text 200 17389 Bandlimited triangle wave oscillator;
#X obj 20 17416 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 17457 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17468 canvas.active;
#X text 200 17468 checks if canvas window is on top and active;
#X obj 30 17495 canvas.current;
#X text 200 17495 verbose information about current canvas;
#X obj 30 17522 canvas.dir;
#X text 200 17522 current canvas directory;
#X obj 30 17549 canvas.name;
#X text 200 17549 current canvas name;
#X obj 30 17576 canvas.path;
#X text 200 17576 current canvas fullpath;
#X obj 30 17603 canvas.top;
#X text 200 17603 verbose information about top-level canvas;
#X obj 30 17630 patch.args;
#X text 200 17630 Get patch or subpatch arguments;
#X obj 30 17657 patch.deps;
#X text 200 17657 patch dependencies: used objects and abstractions;
#X obj 30 17684 patch.tree;
#X text 200 17684 patch tree;
#X obj 20 17711 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 17752 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17763 file.size;
#X text 200 17763 output file size;
#X obj 30 17790 path.basename;
#X text 200 17790 outputs filename portion of pathname;
#X obj 30 17817 path.dirname;
#X text 200 17817 outputs directory portion of pathname;
#X obj 30 17844 path.exists;
#X text 200 17844 checks if given path exists;
#X obj 30 17871 path.file;
#X text 200 17871 file input/output;
#X obj 30 17898 path.is_dir;
#X text 200 17898 check if path is directory;
#X obj 30 17925 path.lsdir;
#X text 200 17925 list directory contents;
#X obj 30 17952 path.monitor;
#X text 200 17952 filesystem event monitor;
#X obj 30 17979 path.normalize;
#X text 200 17979 normalize file paths;
#X obj 30 18006 path.pattern;
#X text 200 18006 pattern filename generator;
#X obj 30 18033 path.search;
#X text 200 18033 file search;
#X obj 30 18060 path.split;
#X text 200 18060 file path split;
#X obj 20 18087 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 18128 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18139 is_any;
#X text 200 18139 checks if input data has *any* type;
#X obj 30 18166 is_bang;
#X text 200 18166 checks if input data has *bang* type;
#X obj 30 18193 is_data;
#X text 200 18193 checks if input data has *data* type;
#X obj 30 18220 is_dict;
#X text 200 18220 checks if input data has *dict* type;
#X obj 30 18247 is_even;
#X text 200 18247 checks if input number is even;
#X obj 30 18274 is_file;
#X text 200 18274 checks if file exists and accessible;
#X obj 30 18301 is_float;
#X text 200 18301 checks if input data has *float* type;
#X obj 30 18328 is_list;
#X text 200 18328 checks if input data has *list* type;
#X obj 30 18355 is_odd;
#X text 200 18355 checks if input number is odd;
#X obj 30 18382 is_pointer;
#X text 200 18382 checks if input data has *pointer* type;
#X obj 30 18409 is_prop;
#X text 200 18409 checks if input message is *property* message;
#X obj 30 18436 is_symbol;
#X text 200 18436 checks if input data has *symbol* type;
#X obj 20 18463 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 18504 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18515 preset.float;
#X text 200 18515 load/store float preset;
#X obj 30 18542 preset.list;
#X text 200 18542 load/store symbol preset;
#X obj 30 18569 preset.storage;
#X text 200 18569 preset storage control;
#X obj 30 18596 preset.symbol;
#X text 200 18596 load/store symbol preset;
#X obj 20 18623 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 18664 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18675 patch.props;
#X text 200 18675 patch properties manager;
#X obj 30 18702 prop;
#X text 200 18702 get/set named property value for subpatch or abstraction;
#X obj 30 18729 prop.declare;
#X text 200 18729 declare named property for subpatch or abstraction;
#X obj 30 18756 prop.get;
#X text 200 18756 get property from connected object/subpatch/abstraction;
#X obj 30 18783 prop.get~;
#X text 200 18783 Property extractor from sound stream;
#X obj 30 18810 prop.join;
#X text 200 18810 join property to main data flow;
#X obj 30 18837 prop.random;
#X text 200 18837 property randomizer;
#X obj 30 18864 prop.set;
#X text 200 18864 set property for connected object/subpatch/abstraction;
#X obj 30 18891 prop.split;
#X text 200 18891 separate properties from dataflow;
#X obj 20 18918 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 18959 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18970 proto.feelworld;
#X text 200 18970 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 18997 proto.firmata;
#X text 200 18997 Firmata Arduino protocol support;
#X obj 30 19024 proto.inscore;
#X text 200 19024 INScore message creator;
#X obj 30 19051 proto.ltc.in~;
#X text 200 19051 LTC decoder;
#X obj 30 19078 proto.midi;
#X text 200 19078 raw midi encoder/parser;
#X obj 30 19105 proto.midi.cc;
#X text 200 19105 raw midi CC encoder/parser;
#X obj 30 19132 proto.midi.sysex;
#X text 200 19132 raw midi SYSex encoder/parser;
#X obj 30 19159 proto.moppy;
#X text 200 19159 protocol for Musical flOPPY controller;
#X obj 30 19186 proto.morse;
#X text 200 19186 Morse encoder;
#X obj 30 19213 proto.mpv;
#X text 200 19213 mpv video player control;
#X obj 30 19240 proto.sp.alpaca;
#X text 200 19240 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 19267 proto.vlc;
#X text 200 19267 VLC video player control over HTTP;
#X obj 30 19294 proto.whammy;
#X text 200 19294 Control for Digitech Whammy pedal;
#X obj 30 19321 proto.xtouch_ext;
#X text 200 19321 Behringer XTouch Extender XMidi protocol;
#X obj 20 19348 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 19389 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19400 random.atom;
#X text 200 19400 weighted atom generation from specified list;
#X obj 30 19427 random.discrete;
#X text 200 19427 random weighted integers on interval [0 \, n);
#X obj 30 19454 random.float;
#X text 200 19454 uniform random float generator in specified range;
#X obj 30 19481 random.gauss;
#X text 200 19481 gaussian random distribution;
#X obj 30 19508 random.int;
#X text 200 19508 uniform random integer generator in specified range;
#X obj 30 19535 random.linear;
#X text 200 19535 random linear distribution;
#X obj 30 19562 random.pw_const;
#X text 200 19562 piecewise constant random distribution;
#X obj 30 19589 random.pw_lin;
#X text 200 19589 piecewise linear random distribution;
#X obj 20 19616 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 19657 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19668 samp.time~;
#X text 200 19668 sample counter;
#X obj 20 19695 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 19736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19747 seq.arp;
#X text 200 19747 sequence arpeggiator;
#X obj 30 19774 seq.bangs;
#X text 200 19774 bang sequencer;
#X obj 30 19801 seq.counter;
#X text 200 19801 sequencer counter;
#X obj 30 19828 seq.life;
#X text 200 19828 Conway gamw of life sequencer;
#X obj 30 19855 seq.matrix;
#X text 200 19855 sequencer control for ui.matrix;
#X obj 30 19882 seq.nbangs;
#X text 200 19882 output specified number of bang with time intervals;
#X obj 30 19909 seq.phasor;
#X text 200 19909 control rate phasor (saw) generator;
#X obj 30 19936 seq.toggles;
#X text 200 19936 toggle sequencer;
#X obj 30 19963 sequencer;
#X text 200 19963 basic sequence player;
#X obj 20 19990 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 20031 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20042 snd.file;
#X text 200 20042 Sound file loader on steroids;
#X obj 20 20069 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 20110 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20121 hoa.2d.decoder~;
#X text 200 20121 hoa 2d decoder;
#X obj 30 20148 hoa.2d.encoder~;
#X text 200 20148 hoa 2d encoder;
#X obj 30 20175 hoa.2d.map~;
#X text 200 20175 a 2d ambisonic multisource spatializer;
#X obj 30 20202 hoa.2d.optim~;
#X text 200 20202 a 2D ambisonic optimization tool;
#X obj 30 20229 hoa.2d.projector~;
#X text 200 20229 a plane waves decomposer from circular harmonics
domain;
#X obj 30 20256 hoa.2d.recomposer~;
#X text 200 20256 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 20296 hoa.2d.rotate~;
#X text 200 20296 a 2D ambisonic sound field rotation;
#X obj 30 20323 hoa.2d.wider~;
#X text 200 20323 a 2d fractional ambisonic order simulator;
#X obj 30 20350 hoa.@process;
#X text 200 20350 process properties manager for hoa.process~;
#X obj 30 20377 hoa.in;
#X text 200 20377 message inlet for a patcher loaded by hoa.process~;
#X obj 30 20404 hoa.in~;
#X text 200 20404 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20431 hoa.out;
#X text 200 20431 message outlet for a patcher loaded by hoa.process~;
#X obj 30 20458 hoa.out~;
#X text 200 20458 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20485 hoa.process~;
#X text 200 20485 patcher loader for multichannel processing;
#X obj 30 20515 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 20512 a 2d ambisonic harmonic scope;
#X obj 30 20537 pan.cos~;
#X text 200 20537 two channel equal power sine/cosine panner;
#X obj 30 20564 pan.linsig~;
#X text 200 20564 two channel linear panner with signal control;
#X obj 30 20591 pan.lin~;
#X text 200 20591 two channel linear panner;
#X obj 30 20618 pan.spread~;
#X text 200 20618 spreads input channels across the stereo field;
#X obj 30 20645 pan.sqrt~;
#X text 200 20645 two channel equal power square root panner;
#X obj 30 20672 spat.pan4~;
#X text 200 20672 GMEM SPAT: 4-outputs spatializer;
#X obj 30 20699 spat.pan8~;
#X text 200 20699 GMEM SPAT: 8-outputs spatializer;
#X obj 30 20726 spat.zita6x8~;
#X text 200 20726 spat with 6 inputs sources to 8 channel output;
#X obj 30 20753 spat.zita8~;
#X text 200 20753 8 channel reverb spatializer;
#X obj 20 20780 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 20821 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20832 string;
#X text 200 20832 string constructor;
#X obj 30 20859 string.contains;
#X text 200 20859 checks if string contains specified substring;
#X obj 30 20886 string.ends_with;
#X text 200 20886 checks if string ends with specified substring;
#X obj 30 20913 string.equal;
#X text 200 20913 check strings or symbols for equality;
#X obj 30 20940 string.format;
#X text 200 20940 formats string like printf.;
#X obj 30 20967 string.join;
#X text 200 20967 joins (concatenates) list to string with separator;
#X obj 30 20994 string.length;
#X text 200 20994 number of characters in string (unicode supported);
#X obj 30 21021 string.match;
#X text 200 21021 check if string match regular expression;
#X obj 30 21048 string.remove;
#X text 200 21048 remove substring from input string;
#X obj 30 21075 string.replace;
#X text 200 21075 replace from one substring to another in input string;
#X obj 30 21102 string.split;
#X text 200 21102 split string or symbol by separator;
#X obj 30 21129 string.starts_with;
#X text 200 21129 checks if string starts with specified substring;
#X obj 30 21156 string.substr;
#X text 200 21156 extract substring from input string;
#X obj 30 21183 string2symbol;
#X text 200 21183 converts string to symbol;
#X obj 20 21210 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 21251 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21262 symbol.equal;
#X text 200 21262 check symbols for equality;
#X obj 30 21289 symbol.length;
#X text 200 21289 number of characters in symbol (unicode supported);
#X obj 30 21316 symbol.num_compare;
#X text 200 21316 numeric symbol compare;
#X obj 30 21343 symbol2any;
#X text 200 21343 converts symbol or string to message;
#X obj 30 21370 symbol2intlist;
#X text 200 21370 converts symbol to list of character codes;
#X obj 20 21397 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 21438 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21449 noise.chua~;
#X text 200 21449 Chua's diode circuit;
#X obj 30 21476 synth.bee3~;
#X text 200 21476 Hammond-oid organ FM synthesis instrument;
#X obj 30 21503 synth.birds~;
#X text 200 21503 bird singing generator;
#X obj 30 21530 synth.church_bell~;
#X text 200 21530 generic church bell modal model;
#X obj 30 21557 synth.clap~;
#X text 200 21557 clap synth from faust libraries;
#X obj 30 21584 synth.dubdub~;
#X text 200 21584 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 21624 synth.dx7~;
#X text 200 21624 FAUST dx7 implementation;
#X obj 30 21651 synth.eguitar~;
#X text 200 21651 simple electric guitar model with steel strings;
#X obj 30 21678 synth.english_bell~;
#X text 200 21678 english church bell modal model;
#X obj 30 21705 synth.fgrain~;
#X text 200 21705 file granulator from STK;
#X obj 30 21732 synth.french_bell~;
#X text 200 21732 french church bell modal model;
#X obj 30 21759 synth.german_bell~;
#X text 200 21759 german church bell modal model;
#X obj 30 21786 synth.glass_harm~;
#X text 200 21786 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 21813 synth.glitch~;
#X text 200 21813 Glitch synthesizer by naivesound;
#X obj 30 21840 synth.harpsichord~;
#X text 200 21840 waveguide commuted harpsichord;
#X obj 30 21867 synth.hat~;
#X text 200 21867 hi-hat synth from faust librariest;
#X obj 30 21894 synth.kick2~;
#X text 200 21894 low-kick synth from faust librariest;
#X obj 30 21921 synth.kick~;
#X text 200 21921 low-kick synth from Guitarix project;
#X obj 30 21948 synth.ks~;
#X text 200 21948 Karplus-Strong string;
#X obj 30 21975 synth.marimba~;
#X text 200 21975 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 22015 synth.metro~;
#X text 200 22015 ready to use metronome synth;
#X obj 30 22042 synth.piano~;
#X text 200 22042 waveguide commuted piano;
#X obj 30 22069 synth.rhodey~;
#X text 200 22069 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 22096 synth.risset_arp~;
#X text 200 22096 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 22123 synth.risset_bell~;
#X text 200 22123 Jean Claude Risset's bell synth;
#X obj 30 22150 synth.risset_tone~;
#X text 200 22150 Jean Claude Risset's endless glissando;
#X obj 30 22177 synth.russian_bell~;
#X text 200 22177 russian church bell modal model;
#X obj 30 22204 synth.shakers~;
#X text 200 22204 various percussion sounds from STK library;
#X obj 30 22231 synth.sitar~;
#X text 200 22231 STK sitar;
#X obj 30 22258 synth.snare~;
#X text 200 22258 Snare drum synth from Guitarix project;
#X obj 30 22285 synth.standard_bell~;
#X text 200 22285 german church bell modal model;
#X obj 30 22312 synth.tube_bell~;
#X text 200 22312 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 22339 synth.voice_fofc~;
#X text 200 22339 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 22366 synth.voice_fofs~;
#X text 200 22366 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 22393 synth.wurley~;
#X text 200 22393 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 22420 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 22461 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22472 system.colorpanel;
#X text 200 22472 System color panel dialog popup;
#X obj 30 22499 system.cursor;
#X text 200 22499 Output cursor motion \, mousewheel and button clicks;
#X obj 30 22526 system.exec;
#X text 200 22526 run external command in separate process;
#X obj 30 22553 system.exit;
#X text 200 22553 quit PureData;
#X obj 30 22580 system.getenv;
#X text 200 22580 Get system environment variables;
#X obj 30 22607 system.hostname;
#X text 200 22607 outputs system hostname;
#X obj 30 22634 system.memsize;
#X text 200 22634 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 22674 system.memused;
#X text 200 22674 returns the process physical memory use - current
and peak;
#X obj 30 22701 system.screen_size;
#X text 200 22701 returns current screen size in pixels;
#X obj 20 22728 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 22769 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22780 tl.bang;
#X text 200 22780 Timeline bang (with possible delay);
#X obj 30 22810 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 22807 Timeline section;
#X obj 30 22832 tl.timeline;
#X text 200 22832 Timeline - event scheduler;
#X obj 30 22859 tl.toggle;
#X text 200 22859 Timeline bang;
#X obj 30 22886 tl.transport;
#X text 200 22886 Timeline transport control;
#X obj 20 22913 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 22954 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22968 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 22965 array view with cursor and selection;
#X obj 30 22993 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 22990 A bang... that's all;
#X obj 30 23018 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 23015 button widget;
#X obj 30 23043 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 23040 colorchooser widget;
#X obj 30 23068 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 23065 Display GUI object;
#X obj 30 23093 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 23090 GUI for turning DSP on/off;
#X obj 30 23118 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 23115 envelope editor widget;
#X obj 30 23143 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 23140 UI filter object calculator for biquad filter;
#X obj 30 23168 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 23165 UI filter object based on biquad filter;
#X obj 30 23193 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 23190 UI stereo gain control;
#X obj 30 23218 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 23215 UI gain control;
#X obj 30 23243 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 23240 simple icon with button capabilities;
#X obj 30 23268 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 23265 value increment/decrement;
#X obj 30 23293 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 23290 keyboard widget;
#X obj 30 23318 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 23315 knob widget;
#X obj 30 23343 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 23340 simple label widget;
#X obj 30 23368 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 23365 black and white bitmap display;
#X obj 30 23393 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 23390 Hyperlink widget;
#X obj 30 23418 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 23415 The matrix of toggles has you.;
#X obj 30 23443 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 23440 Dropdown menu;
#X obj 30 23468 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 23465 Shows peak and rms signal level;
#X obj 30 23493 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 23490 incoming MIDI message viewport;
#X obj 30 23518 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 23515 filter mouse events from ui objects;
#X obj 30 23543 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 23540 routes mouse events from ui objects;
#X obj 30 23568 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 23565 counterpart of the vanilla [nbx];
#X obj 30 23593 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 23590 counterpart of the vanilla [nbx] for signal;
#X obj 30 23618 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 23615 signal plotter;
#X obj 30 23643 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 23640 2D slider in polar coordinates;
#X obj 30 23668 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 23665 Preset manager;
#X obj 30 23693 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 23690 counterpart of the vanilla radio toggle;
#X obj 30 23718 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 23715 range slider;
#X obj 30 23743 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 23740 Scope GUI object;
#X obj 30 23768 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 23765 counterpart of the vanilla slider;
#X obj 30 23793 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 23790 2D slider widget;
#X obj 30 23818 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 23815 Multiple slider widget;
#X obj 30 23843 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 23840 Spectroscope GUI object;
#X obj 30 23868 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 23865 displays a list of text buttons or text toggles;
#X obj 30 23893 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 23890 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 23915 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 23915 version: v0.9.6 \, license: GPL3;
#X obj 20 23943 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 23966 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 23930 msg 0;
#X obj 670 23965 switch~;
#X connect 1674 0 1675 0;