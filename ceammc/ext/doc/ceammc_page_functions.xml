<?xml version="1.0" encoding="utf-8"?>
<page output="ceammc.functions-info.pd">
    <title>Initial object arg functions</title>
    <sections>
        <par>Note: this functions are calculated only once just before(!) ceammc object
        creation.</par>
        <par>Function call can be nested.</par>
        <par>If you want the symbol value pi() instead of numeric value - use double-quotes. In the
        following example theren is a list with two elements: first is π=3.1415 value, second is
        unexpanded symbol pi():</par>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list pi() "pi()"]
|
[ui.dt]
]]>
        </pdascii>
        <h2>list functions</h2>
        <!--        seq-->
        <ul indent="3">
            <item>seq(FROM TO STEP?) - sequence generator. The TO value is included into the output
            range. STEP can be omitted.</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list seq(10 0 2)]
|
[ui.dt]
]]>
        </pdascii>
        <!--        reverse-->
        <ul indent="3">
            <item>reverse(ARGS+) - reverse given arguments</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list reverse(seq(1 16))]
|
[ui.dt]
]]>
        </pdascii>
        <!--        sort-->
        <ul indent="3">
            <item>sort(ARGS+) - sort given arguments</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list sort(3 5 1 7 54 3 2 4 6 7)]
|
[ui.dt]
]]>
        </pdascii>
        <!--        rotate -->
        <ul indent="3">
            <item>rotate(INT ARGS+) - rotates list (positive values rotates
            counter-clockwise)</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list rotate(3 seq(1 10))]
|
[ui.dt]
]]>
        </pdascii>
        <!--        repeat -->
        <ul indent="3">
            <item>repeat(INT ARGS+) - generate list with repeated pattern</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list repeat(3 A B)]
|
[ui.dt]
]]>
        </pdascii>
        <!--        ones -->
        <ul indent="3">
            <item>ones(INT) - generates list filled with ones of specified length</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list ones(16)]
|
[ui.dt]
]]>
        </pdascii>
        <!--        zeroes -->
        <ul indent="3">
            <item>zeros(INT) - generates list filled with zeros of specified length</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list zeros(24)]
|
[ui.dt]
]]>
        </pdascii>
        <h2>math functions</h2>
        <ul indent="3">
            <item>pi() - replaced with π value</item>
            <item>e() - replaced with e value</item>
            <item>bs() - replaced with DSP blocksize value</item>
            <item>sr() - replaced with DSP samplerate value</item>
            <item>amp2db(FLOAT) - convert linear amplitude values to dbfs scale</item>
            <item>db2amp(FLOAT) - convert dbfs scale values to linear amplitudes</item>
            <item>mtof(FLOAT) - convert MIDI pitch info frequency in Hz</item>
            <item>ftom(FLOAT) - convert frequency in Hz into MIDI pitch</item>
        </ul>
        <!--        expr -->
        <ul indent="3">
            <item>expr(SYMBOL) - calculates math expression</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list expr("sqrt(2)^3.5+1-pi*e")]
|
[ui.dt]
]]>
        </pdascii>
        <h2>misc functions</h2>
        <!--        hexbeat -->
        <ul indent="3">
            <item>hexbeat(SYMBOL) - generates hexbeat rhythm pattern</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list hexbeat("0xDEADBEEF")]
|
[ui.dt]
]]>
        </pdascii>
        <!--        euclid -->
        <ul indent="3">
            <item>euclid(BEATS LEN? ROTATION?) - generates euclid rhythm pattern</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list euclid(3 8 0)]
|
[ui.dt]
]]>
        </pdascii>
        <!--        rtree -->
        <ul indent="3">
            <item>rtree(DUR_MS MLIST) - generates nested complex rhythm tree pattern</item>
        </ul>
        <pdascii indent="10">
<![CDATA[
[bang(
|
[data.list rtree(1000 (1 1 (2 1 1 (3 1 1 1))))]
|
[ui.dt]
]]>
        </pdascii>
    </sections>
</page>
