#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 30 238 an.rms~;
#X text 200 238 root mean square with moving-average algorithm.;
#X obj 30 265 an.tempo~;
#X text 200 265 tempo detector;
#X obj 30 292 an.zero~;
#X text 200 292 zero crossing count/rate/freq calculator;
#X obj 20 319 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 360 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 371 array.bpm;
#X text 200 371 BPM calculator;
#X obj 30 398 array.circular;
#X text 200 398 array read/write as circular buffer;
#X obj 30 425 array.circular~;
#X text 200 425 circular buffer for arrays;
#X obj 30 452 array.convolve;
#X text 200 452 array FFT convolution;
#X obj 30 479 array.copy;
#X text 200 479 copy samples from one array to another;
#X obj 30 506 array.do;
#X text 200 506 iterate and modify array content via side-chain;
#X obj 30 533 array.each;
#X text 200 533 process each array elements via side-chain;
#X obj 30 560 array.fill;
#X text 200 560 fill array with single value \, pattern or function;
#X obj 30 587 array.grainer~;
#X text 200 587 array granulator;
#X obj 30 614 array.hist;
#X text 200 614 calculates array histogram;
#X obj 30 641 array.mean;
#X text 200 641 calculates array arithmetic mean value;
#X obj 30 668 array.minmax;
#X text 200 668 find array min and max element value;
#X obj 30 695 array.play~;
#X text 200 695 array player with variable speed and amplitude;
#X obj 30 722 array.plot;
#X text 200 722 array data plotter;
#X obj 30 749 array.plot~;
#X text 200 749 plot signal on specified array;
#X obj 30 776 array.resample;
#X text 200 776 array resampler;
#X obj 30 803 array.rms;
#X text 200 803 calculates root mean square value for array;
#X obj 30 830 array.set;
#X text 200 830 set array content from list;
#X obj 30 857 array.stddev;
#X text 200 857 calculates standard deviation for array values;
#X obj 30 884 array.stretch;
#X text 200 884 array time-stretch \, pitch-shift or rate-change;
#X obj 30 911 array.sum;
#X text 200 911 calculates sum of array elements;
#X obj 30 938 array.sum2;
#X text 200 938 calculates sum of squares of array elements;
#X obj 30 965 array.tramp~;
#X text 200 965 triggered ramp generator for array;
#X obj 30 992 array.variance;
#X text 200 992 calculates variance of array values;
#X obj 30 1019 array.vplay;
#X text 200 1019 simple array player for using with vline~;
#X obj 30 1046 array.window;
#X text 200 1046 fill array with window;
#X obj 30 1073 plot.geomspace~;
#X text 200 1073 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1113 plot.hist~;
#X text 200 1113 calculate and output signal histogram;
#X obj 30 1140 plot.linspace~;
#X text 200 1140 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1180 plot.logspace~;
#X text 200 1180 outputs numbers spaced evenly on a log scale;
#X obj 30 1207 plot.response~;
#X text 200 1207 output amp/phase freq response to impulse;
#X obj 20 1234 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933
0;
#X obj 20 1275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1286 ceammc.search;
#X text 200 1286 ceammc library search object;
#X obj 30 1316 ui.link @title [function] @url function-help.pd;
#X text 200 1313 named function;
#X obj 30 1338 function.call;
#X text 200 1338 call named function;
#X obj 30 1365 gain~;
#X text 200 1365 multislot signal gain;
#X obj 30 1392 logger;
#X text 200 1392 advanced data logger;
#X obj 30 1419 matrix~;
#X text 200 1419 signal routing matrix;
#X obj 30 1446 metro.choice;
#X text 200 1446 metro with random choice from timeset;
#X obj 30 1473 metro.pattern;
#X text 200 1473 metro with rhythmic patterns;
#X obj 30 1500 metro.random;
#X text 200 1500 metro random bang with specified range;
#X obj 30 1527 metro.seq;
#X text 200 1527 metro sequencer;
#X obj 30 1554 metro.wchoice;
#X text 200 1554 metro with weighted random choice from timeset;
#X obj 30 1581 mix~;
#X text 200 1581 multislot signal mixer;
#X obj 30 1608 nsig~;
#X text 200 1608 Mulitchannel converter from control to audio rate;
#X obj 30 1635 obj.props;
#X text 200 1635 property extractor;
#X obj 30 1662 radio;
#X text 200 1662 float index to outlet values as radio switch;
#X obj 30 1689 spring;
#X text 200 1689 float value "spring";
#X obj 30 1716 sync;
#X text 200 1716 value synchronization;
#X obj 30 1743 window;
#X text 200 1743 returns window value by given window position;
#X obj 30 1770 xdac~;
#X text 200 1770 dac~ with channel ranges;
#X obj 30 1797 xfade2~;
#X text 200 1797 multi stereo-signal crossfade;
#X obj 30 1824 xfade~;
#X text 200 1824 multi signal crossfade;
#X obj 30 1851 z~;
#X text 200 1851 sample delay;
#X obj 20 1878 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1919 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1930 chaos.gbman0;
#X text 200 1930 Gingerbreadman map chaotic generator;
#X obj 30 1957 chaos.gbman0~;
#X text 200 1957 Gingerbreadman map chaotic generator;
#X obj 30 1984 chaos.jong;
#X text 200 1984 Peter de Jong attractor;
#X obj 30 2011 chaos.logistic;
#X text 200 2011 Logistic map chaotic generator;
#X obj 30 2038 chaos.std0;
#X text 200 2038 Standard map chaotic generator;
#X obj 30 2065 chaos.std0~;
#X text 200 2065 Standard map chaotic generator;
#X obj 20 2092 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 2133 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2144 array.p2s;
#X text 200 2144 convert array phase [0\..1] to sample position;
#X obj 30 2171 array.s2p;
#X text 200 2171 convert sample position to phase range [0\..1];
#X obj 30 2198 conv.amp2dbfs;
#X text 200 2198 convert from amplitude to decibel full scale;
#X obj 30 2225 conv.amp2dbfs~;
#X text 200 2225 convert from amplitude to decibel full scale;
#X obj 30 2252 conv.bits2bang;
#X text 200 2252 convert list of bits to bang events;
#X obj 30 2279 conv.bits2int;
#X text 200 2279 convert list of bits to integer;
#X obj 30 2306 conv.bits2note;
#X text 200 2306 convert list of bits to note events;
#X obj 30 2333 conv.bits2pos;
#X text 200 2333 convert list of bits to list of bit position;
#X obj 30 2360 conv.bpm2hz;
#X text 200 2360 converts BPM to frequency in hertz;
#X obj 30 2387 conv.bpm2ms;
#X text 200 2387 convert frequency in BPM to period in milliseconds;
#X obj 30 2414 conv.bpm2sec;
#X text 200 2414 convert frequency in BPM to period in seconds;
#X obj 30 2441 conv.car2pol;
#X text 200 2441 convert cartesian coords to polar;
#X obj 30 2468 conv.cc2amp;
#X text 200 2468 convert from MIDI Control Change range;
#X obj 30 2495 conv.char2morse;
#X text 200 2495 convert character to morse code;
#X obj 30 2522 conv.color2rgba;
#X text 200 2522 convert named or hex color to separate RGBA values;
#X obj 30 2549 conv.dbfs2amp;
#X text 200 2549 convert decibel full scale to amplitude;
#X obj 30 2576 conv.dbfs2amp~;
#X text 200 2576 convert decibel full scale to amplitude;
#X obj 30 2603 conv.degree2key;
#X text 200 2603 convert scale degree to key;
#X obj 30 2630 conv.edge2bang;
#X text 200 2630 edge detector for numeric stream;
#X obj 30 2657 conv.hex2int;
#X text 200 2657 hex symbol to int value;
#X obj 30 2684 conv.int2bits;
#X text 200 2684 convert integer to list of bits;
#X obj 30 2711 conv.lin2curve;
#X text 200 2711 map linear to exponential range with 0 allowed.;
#X obj 30 2738 conv.lin2exp;
#X text 200 2738 maps linear range to exponential range;
#X obj 30 2765 conv.lin2lin;
#X text 200 2765 convert from one linear range to another;
#X obj 30 2792 conv.lin2lin~;
#X text 200 2792 convert from one linear range to another for signals;
#X obj 30 2819 conv.list2props;
#X text 200 2819 converts list to series of property messages;
#X obj 30 2846 conv.midi2freq;
#X text 200 2846 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2886 conv.ms2bpm;
#X text 200 2886 convert period in milliseconds to frequency in BPM;
#X obj 30 2913 conv.ms2samp;
#X text 200 2913 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2953 conv.ms2samp~;
#X text 200 2953 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2993 conv.ms2str;
#X text 200 2993 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3033 conv.note2guido;
#X text 200 3033 convert MIDI note to Guido notation;
#X obj 30 3060 conv.phase2rad;
#X text 200 3060 convert phase value [0-1] to radians [0-2π];
#X obj 30 3087 conv.phase2rad~;
#X text 200 3087 convert phase value [0-1] to radians [0-2π];
#X obj 30 3114 conv.pitch2midi;
#X text 200 3114 converts symbol pitch name to MIDI note number;
#X obj 30 3141 conv.pol2car;
#X text 200 3141 convert from polar coordinates to cartesian;
#X obj 30 3168 conv.rad2phase;
#X text 200 3168 convert radians value to phase;
#X obj 30 3195 conv.rad2phase~;
#X text 200 3195 convert radians value to phase;
#X obj 30 3222 conv.rgb2hex;
#X text 200 3222 convert separate RGB values to hex color;
#X obj 30 3249 conv.samp2ms;
#X text 200 3249 convert samples to time according to samplerate;
#X obj 30 3276 conv.samp2ms~;
#X text 200 3276 convert samples to milliseconds according to samplerate;
#X obj 30 3303 conv.samp2sec;
#X text 200 3303 convert samples to time according to samplerate;
#X obj 30 3330 conv.sec2bpm;
#X text 200 3330 convert period in seconds to frequency in BPM;
#X obj 30 3357 conv.sec2samp;
#X text 200 3357 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3397 conv.sec2str;
#X text 200 3397 converts float time in seconds to formated symbol
(or string);
#X obj 30 3424 conv.sig2float~;
#X text 200 3424 convert signal to floats;
#X obj 30 3451 conv.str2sec;
#X text 200 3451 converts formatted time to float value in seconds;
#X obj 30 3478 music.dur2time;
#X text 200 3478 convert duration list to time;
#X obj 30 3505 music.voice2midi;
#X text 200 3505 convert voice music list of midi pitches;
#X obj 20 3532 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 3573 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3584 data.color;
#X text 200 3584 Color datatype;
#X obj 30 3611 data.copy;
#X text 200 3611 make copy for any data types: MList \, Set etc...;
#X obj 30 3638 data.dict;
#X text 200 3638 dictionary container: store values by key;
#X obj 30 3665 data.fifo;
#X text 200 3665 First-In-First-Out (FIFO) queue data container;
#X obj 30 3692 data.float;
#X text 200 3692 robust float object;
#X obj 30 3719 data.int;
#X text 200 3719 robust int object;
#X obj 30 3746 data.list;
#X text 200 3746 list container;
#X obj 30 3773 data.mlist;
#X text 200 3773 multidimensional list container;
#X obj 30 3800 data.set;
#X text 200 3800 container that store unique elements;
#X obj 30 3827 data.set2list;
#X text 200 3827 converts set to list;
#X obj 30 3854 dict.contains;
#X text 200 3854 predicate to check if dict contains a keys;
#X obj 30 3881 dict.each;
#X text 200 3881 map each value in dict;
#X obj 30 3908 dict.from_list;
#X text 200 3908 creates dictionary from list;
#X obj 30 3935 dict.get;
#X text 200 3935 output dict values;
#X obj 30 3962 dict.keys;
#X text 200 3962 get list of dict keys;
#X obj 30 3989 dict.pass;
#X text 200 3989 passes specified keys in dict;
#X obj 30 4016 dict.reject;
#X text 200 4016 rejects specified keys from dict;
#X obj 30 4043 dict.size;
#X text 200 4043 dictionary size;
#X obj 30 4070 dict.to_list;
#X text 200 4070 converts dictionary to plain list;
#X obj 30 4097 dict.values;
#X text 200 4097 dictionary values as mlist;
#X obj 30 4124 mlist.flatten;
#X text 200 4124 flatten nested mlist;
#X obj 30 4151 rtree.to_list;
#X text 200 4151 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4178 set.contains;
#X text 200 4178 check if specified element is in set;
#X obj 30 4205 set.diff;
#X text 200 4205 difference between two sets;
#X obj 30 4232 set.equal;
#X text 200 4232 checks if two sets are equal (contains same elements);
#X obj 30 4259 set.intersect;
#X text 200 4259 output intersection of given sets;
#X obj 30 4286 set.size;
#X text 200 4286 get number of elements in set;
#X obj 30 4313 set.symdiff;
#X text 200 4313 symmetric difference between two sets;
#X obj 30 4340 set.union;
#X text 200 4340 output union of given sets;
#X obj 20 4367 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 4408 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4419 dyn.comp2~;
#X text 200 4419 stereo dynamic range compressor;
#X obj 30 4446 dyn.comp~;
#X text 200 4446 mono dynamic range compressors;
#X obj 30 4473 dyn.gate2~;
#X text 200 4473 stereo signal gate;
#X obj 30 4500 dyn.gate~;
#X text 200 4500 mono signal gate;
#X obj 30 4527 dyn.limit2~;
#X text 200 4527 stereo 1176LN Peak Limiter;
#X obj 30 4554 dyn.limit~;
#X text 200 4554 mono 1176LN Peak Limiter;
#X obj 30 4581 dyn.softclip~;
#X text 200 4581 soft signal clip;
#X obj 20 4608 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 4649 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4660 env.adsr~;
#X text 200 4660 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 4687 env.ar~;
#X text 200 4687 Attack/Release envelope generator;
#X obj 30 4714 env.asr~;
#X text 200 4714 Attack/Sustain/Release envelope generator;
#X obj 30 4741 env.concat;
#X text 200 4741 Envelope concatenation;
#X obj 30 4768 env.follow~;
#X text 200 4768 Envelope follower with independent attack and release
times;
#X obj 30 4795 env.mix;
#X text 200 4795 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 4835 env.smooth~;
#X text 200 4835 An envelope with an exponential attack and release;
#X obj 30 4862 env.tscale;
#X text 200 4862 Envelope time-scale;
#X obj 30 4889 env.tshift;
#X text 200 4889 Envelope time-shift (horizontal);
#X obj 30 4916 env.vscale;
#X text 200 4916 Envelope value-scale;
#X obj 30 4943 env2array;
#X text 200 4943 Renders envelope to specified array;
#X obj 30 4970 env2vline;
#X text 200 4970 Converts envelope to bunch of vline messages;
#X obj 30 4997 envelope;
#X text 200 4997 Envelope data type;
#X obj 30 5024 vline2env;
#X text 200 5024 Converts vline messages to env;
#X obj 20 5051 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 5092 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5103 expand_env;
#X text 200 5103 Substitute environment variables in data stream;
#X obj 30 5130 flow.append;
#X text 200 5130 append message to flow stream;
#X obj 30 5157 flow.change;
#X text 200 5157 rejects redundant input values;
#X obj 30 5184 flow.count;
#X text 200 5184 control flow event counter;
#X obj 30 5211 flow.delay;
#X text 200 5211 enhanced version on vanilla delay object;
#X obj 30 5238 flow.demultiplex;
#X text 200 5238 control flow demultiplexer;
#X obj 30 5265 flow.demultiplex2~;
#X text 200 5265 audio stream stereo demultiplexer;
#X obj 30 5292 flow.demultiplex~;
#X text 200 5292 audio stream demultiplexer;
#X obj 30 5319 flow.dollar;
#X text 200 5319 data flow dollar converter;
#X obj 30 5346 flow.dup;
#X text 200 5346 message duplicator;
#X obj 30 5373 flow.float;
#X text 200 5373 pass floats;
#X obj 30 5400 flow.gate;
#X text 200 5400 control flow gate. [spigot] analog;
#X obj 30 5427 flow.greater;
#X text 200 5427 numeric stream router;
#X obj 30 5454 flow.greater_eq;
#X text 200 5454 numeric stream router;
#X obj 30 5481 flow.group;
#X text 200 5481 group input atoms in list of specified size;
#X obj 30 5508 flow.interval;
#X text 200 5508 measure time between flow events;
#X obj 30 5535 flow.less;
#X text 200 5535 numeric stream router \, like many [moses];
#X obj 30 5562 flow.less_eq;
#X text 200 5562 numeric stream router \, like many [moses];
#X obj 30 5589 flow.list2many;
#X text 200 5589 routes list element with message selectors;
#X obj 30 5616 flow.match;
#X text 200 5616 route data flow by regexp match;
#X obj 30 5643 flow.mem;
#X text 200 5643 store data flow in memory;
#X obj 30 5670 flow.multiplex;
#X text 200 5670 control flow multiplexer;
#X obj 30 5697 flow.multiplex2~;
#X text 200 5697 audio stream stereo multiplexer;
#X obj 30 5724 flow.multiplex~;
#X text 200 5724 audio stream multiplexer;
#X obj 30 5751 flow.once;
#X text 200 5751 one message pass thru;
#X obj 30 5778 flow.pack;
#X text 200 5778 flow pack;
#X obj 30 5805 flow.pass;
#X text 200 5805 pass specified values;
#X obj 30 5832 flow.pass_if;
#X text 200 5832 pass values that accepted by predicate object;
#X obj 30 5859 flow.pipe;
#X text 200 5859 enhanced version on vanilla pipe object;
#X obj 30 5886 flow.queue;
#X text 200 5886 multi-channel control flow sync queue (or FIFO);
#X obj 30 5913 flow.record;
#X text 200 5913 flow stream recorder/player;
#X obj 30 5940 flow.reject;
#X text 200 5940 reject specified values;
#X obj 30 5967 flow.reject_if;
#X text 200 5967 reject values by predicate;
#X obj 30 5994 flow.ring;
#X text 200 5994 dataflow ring buffer;
#X obj 30 6021 flow.route;
#X text 200 6021 advanced message router;
#X obj 30 6048 flow.select;
#X text 200 6048 vanilla flow on steroids;
#X obj 30 6075 flow.seqdelay;
#X text 200 6075 sequential delay/router for input flow;
#X obj 30 6102 flow.space;
#X text 200 6102 space in time messages received at the same logical
time;
#X obj 30 6129 flow.speedlim;
#X text 200 6129 control stream speed limiter;
#X obj 30 6156 flow.split;
#X text 200 6156 split data flow by external side-chain predicate;
#X obj 30 6183 flow.stack;
#X text 200 6183 any message stack;
#X obj 30 6210 flow.sync;
#X text 200 6210 bus with only hot inlets;
#X obj 30 6237 flow.sync_pack;
#X text 200 6237 flow pack with all hot inlets;
#X obj 30 6264 flow.tee~;
#X text 200 6264 separate audio and control streams;
#X obj 30 6291 replace;
#X text 200 6291 Replace atoms in data stream;
#X obj 30 6318 route.any;
#X text 200 6318 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 6345 route.bang;
#X text 200 6345 separate bang messages from other types;
#X obj 30 6372 route.float;
#X text 200 6372 separate float messages from other types;
#X obj 30 6399 route.list;
#X text 200 6399 separate list messages from other types;
#X obj 30 6426 route.prop;
#X text 200 6426 separate property messages from other types;
#X obj 30 6453 route.random;
#X text 200 6453 routes input flow to random outlet;
#X obj 30 6480 route.symbol;
#X text 200 6480 separate symbol messages from other types;
#X obj 20 6507 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 6548 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6559 flt.a-weight;
#X text 200 6559 convert frequency to A-weight value;
#X obj 30 6586 flt.biquad~;
#X text 200 6586 second order IIR filter.;
#X obj 30 6613 flt.bpf12~;
#X text 200 6613 Two pole band-pass butterworth filter;
#X obj 30 6640 flt.bpf24~;
#X text 200 6640 Four pole band-pass butterworth filter;
#X obj 30 6667 flt.c_apf;
#X text 200 6667 Allpass filter coefficient calculator for biquad;
#X obj 30 6694 flt.c_bpf~;
#X text 200 6694 BPF coefficient calculator for biquad filter;
#X obj 30 6721 flt.c_highshelf~;
#X text 200 6721 Highshelf filter coefficient calculator for biquad;
#X obj 30 6748 flt.c_hpf;
#X text 200 6748 HPF coefficient calculator for biquad filter;
#X obj 30 6775 flt.c_hpf~;
#X text 200 6775 HPF coefficient calculator for biquad filter;
#X obj 30 6802 flt.c_lowshelf~;
#X text 200 6802 Lowshelf filter coefficient calculator for biquad;
#X obj 30 6829 flt.c_lpf;
#X text 200 6829 LPF coefficient calculator for biquad filter;
#X obj 30 6856 flt.c_lpf~;
#X text 200 6856 LPF coefficient calculator for biquad filter;
#X obj 30 6883 flt.c_notch;
#X text 200 6883 Notch filter coefficient calculator for biquad;
#X obj 30 6910 flt.c_notch~;
#X text 200 6910 Band-reject coefficient calculator for biquad filter;
#X obj 30 6937 flt.c_peak~;
#X text 200 6937 Peaking equalizer calculator for biquad;
#X obj 30 6964 flt.c_pole;
#X text 200 6964 One-pole coefficient calculator for biquad filter;
#X obj 30 6991 flt.dcblock2~;
#X text 200 6991 stereo DC blocker;
#X obj 30 7018 flt.dcblock~;
#X text 200 7018 mono DC blocker;
#X obj 30 7045 flt.eq10~;
#X text 200 7045 graphic 10 band equalizer;
#X obj 30 7072 flt.eq_peak_cq~;
#X text 200 7072 constant-Q second order peaking equalizer section;
#X obj 30 7099 flt.eq_peak~;
#X text 200 7099 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 7154 flt.fb_comb~;
#X text 200 7154 feedback comb filter;
#X obj 30 7181 flt.fbank5x1~;
#X text 200 7181 5 band one octave butterworth filterbank;
#X obj 30 7208 flt.ff_comb~;
#X text 200 7208 feed forward comb filter;
#X obj 30 7235 flt.freqz;
#X text 200 7235 compute the frequency response of a digital filter;
#X obj 30 7262 flt.freqz~;
#X text 200 7262 compute the frequency response of a digital filter;
#X obj 30 7289 flt.highshelf~;
#X text 200 7289 gain boost|cut above some frequency;
#X obj 30 7316 flt.hpf12~;
#X text 200 7316 High-pass second order Butterworth filter;
#X obj 30 7343 flt.hpf24~;
#X text 200 7343 High-pass fourth order Butterworth filter;
#X obj 30 7370 flt.lowshelf~;
#X text 200 7370 gain boost|cut below some frequency;
#X obj 30 7397 flt.lpf12~;
#X text 200 7397 Low-pass second order Butterworth filter;
#X obj 30 7424 flt.lpf24~;
#X text 200 7424 Low-pass fourth order Butterworth filter;
#X obj 30 7451 flt.median;
#X text 200 7451 Median control flow filter;
#X obj 30 7478 flt.moog_vcf~;
#X text 200 7478 Moog Voltage Controlled Filter;
#X obj 30 7505 flt.notch~;
#X text 200 7505 band-rejection filter;
#X obj 30 7532 flt.resonbp~;
#X text 200 7532 Simple resonant bandpass filter;
#X obj 30 7559 flt.resonhp~;
#X text 200 7559 Simple resonant highpass filter;
#X obj 30 7586 flt.resonlp~;
#X text 200 7586 Simple resonant lowpass filter;
#X obj 20 7613 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 7654 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7665 fx.bitdown~;
#X text 200 7665 bit downer and downsampler effect;
#X obj 30 7692 fx.chorus~;
#X text 200 7692 Chorus effect;
#X obj 30 7719 fx.dattorro~;
#X text 200 7719 dattorro reverb;
#X obj 30 7746 fx.distortion1~;
#X text 200 7746 distortion #1 from Guitarix effects set;
#X obj 30 7773 fx.distortion2~;
#X text 200 7773 distortion #2 from Guitarix effects set;
#X obj 30 7800 fx.distortion3~;
#X text 200 7800 simple distortion #3 from Guitarix effects set;
#X obj 30 7827 fx.distortion~;
#X text 200 7827 cubic nonlinearity distortion;
#X obj 30 7854 fx.drive~;
#X text 200 7854 Guitarix drive effect;
#X obj 30 7881 fx.drone_box~;
#X text 200 7881 mono sympathetic resonance generator;
#X obj 30 7908 fx.echo2~;
#X text 200 7908 stereo echo effect;
#X obj 30 7935 fx.echo~;
#X text 200 7935 simple echo effect;
#X obj 30 7962 fx.flanger~;
#X text 200 7962 mono flanging effect;
#X obj 30 7989 fx.freeverb2~;
#X text 200 7989 freeverb2 - stereo version of freeverb;
#X obj 30 8016 fx.freeverb~;
#X text 200 8016 freeverb - common used open-source reverb;
#X obj 30 8043 fx.freqshift~;
#X text 200 8043 frequency shifter or single-sideband ring modulation;
#X obj 30 8070 fx.granulator~;
#X text 200 8070 simple input stream granulator;
#X obj 30 8097 fx.greyhole~;
#X text 200 8097 A complex echo-like effect;
#X obj 30 8124 fx.infrev~;
#X text 200 8124 port of Infinity VST plugin from airwindows;
#X obj 30 8151 fx.jcrev~;
#X text 200 8151 Schroeder quad reverberator from 1972;
#X obj 30 8178 fx.looper~;
#X text 200 8178 One track looper;
#X obj 30 8205 fx.overdrive~;
#X text 200 8205 overdrive effect;
#X obj 30 8232 fx.pitchshift_s~;
#X text 200 8232 signal version of fx.pitchshift~;
#X obj 30 8259 fx.pitchshift~;
#X text 200 8259 simple pitch shifter based on 2 delay lines;
#X obj 30 8286 fx.rb_pitchshift~;
#X text 200 8286 rubber band pitchshift;
#X obj 30 8313 fx.recho~;
#X text 200 8313 reversed echo effect;
#X obj 30 8340 fx.room~;
#X text 200 8340 Gardners room emulation algorithms;
#X obj 30 8367 fx.satrev~;
#X text 200 8367 Schroeder reverberator from 1971;
#X obj 30 8394 fx.sdelay~;
#X text 200 8394 smooth delay with a feedback control;
#X obj 30 8421 fx.secho~;
#X text 200 8421 enchanced echo effect that does not click on delay
change;
#X obj 30 8448 fx.shimmer~;
#X text 200 8448 shimmer reverb effect effect;
#X obj 30 8475 fx.stutter~;
#X text 200 8475 stutter effect;
#X obj 30 8502 fx.tapiir~;
#X text 200 8502 multi-tap delay;
#X obj 30 8529 fx.tremolo~;
#X text 200 8529 tremolo effect from guitarix project;
#X obj 30 8556 fx.vocoder~;
#X text 200 8556 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 8596 fx.wahwah~;
#X text 200 8596 digitized CryBaby wah pedal;
#X obj 30 8623 fx.zita_rev1~;
#X text 200 8623 Zita stereo reverb;
#X obj 20 8650 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 8691 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8702 global.dict;
#X text 200 8702 global named dict object;
#X obj 30 8729 global.float;
#X text 200 8729 global named float object;
#X obj 30 8756 global.int;
#X text 200 8756 global named integer object;
#X obj 30 8783 global.list;
#X text 200 8783 global named list object;
#X obj 30 8810 global.mlist;
#X text 200 8810 global named mlist object;
#X obj 30 8837 global.set;
#X text 200 8837 global named set object;
#X obj 20 8864 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 8905 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8916 hw.apple_smc;
#X text 200 8916 query the system management control in Apples;
#X obj 30 8943 hw.apple_sms;
#X text 200 8943 query the sudden motion sensor in Apples;
#X obj 30 8970 hw.arduino;
#X text 200 8970 Arduino device;
#X obj 30 8997 hw.cpu_temp;
#X text 200 8997 get CPU temperature;
#X obj 30 9024 hw.display;
#X text 200 9024 get/set display properties;
#X obj 30 9051 hw.kbd_light;
#X text 200 9051 Get/set keyboard light on some devices;
#X obj 30 9078 hw.motu.avb;
#X text 200 9078 controls Motu AVB devices over http requests;
#X obj 30 9105 hw.serial;
#X text 200 9105 serial port device;
#X obj 20 9132 cnv 5 47 31 empty empty lang 4 13 0 17 -262144 -49933
0;
#X obj 20 9173 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9187 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 9184 faust realtime compilation;
#X obj 30 9209 lang.lua;
#X text 200 9209 Lua JIT language bindings;
#X obj 30 9239 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 9236 faust compiled ui object;
#X obj 20 9261 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 9302 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9313 lfo.+pulse~;
#X text 200 9313 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 9340 lfo.+saw~;
#X text 200 9340 Positive unit-amplitude low frequency saw wave;
#X obj 30 9367 lfo.+square~;
#X text 200 9367 Positive low frequency square wave;
#X obj 30 9394 lfo.+tri~;
#X text 200 9394 Positive unit-amplitude low frequency triangle wave;
#X obj 30 9421 lfo.impulse~;
#X text 200 9421 Unit-amplitude low-frequency impulse train;
#X obj 30 9448 lfo.mosc~;
#X text 200 9448 multi-oscillator with various waveforms;
#X obj 30 9475 lfo.pulse~;
#X text 200 9475 Full-range unit-amplitude low frequency pulse train;
#X obj 30 9502 lfo.saw~;
#X text 200 9502 Full-range unit-amplitude low frequency saw;
#X obj 30 9529 lfo.square~;
#X text 200 9529 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 9556 lfo.tri~;
#X text 200 9556 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 9583 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 9624 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9635 list.^at;
#X text 200 9635 on input index(es) outputs list element(s);
#X obj 30 9662 list.^contains;
#X text 200 9662 checks if input atom is found in the list;
#X obj 30 9689 list.^search;
#X text 200 9689 on input atom returns it index in list;
#X obj 30 9716 list.all_of;
#X text 200 9716 checks if all list atoms accepted by predicate;
#X obj 30 9743 list.any_of;
#X text 200 9743 checks if at least one list element is accepted by
predicate;
#X obj 30 9770 list.append;
#X text 200 9770 append atom or list to the end of input list;
#X obj 30 9797 list.apply_to;
#X text 200 9797 modifies list value at specified position \, filtering
it via external object;
#X obj 30 9837 list.at;
#X text 200 9837 outputs list element(s) at specified index(es);
#X obj 30 9864 list.choice;
#X text 200 9864 outputs random element from list;
#X obj 30 9891 list.contains;
#X text 200 9891 checks if input list contains specified atoms;
#X obj 30 9918 list.convolve;
#X text 200 9918 convolution for lists;
#X obj 30 9945 list.correlate;
#X text 200 9945 list cross-correlation;
#X obj 30 9972 list.count;
#X text 200 9972 output the number of items that equal to specified
value;
#X obj 30 9999 list.count_if;
#X text 200 9999 output the number of items that satisfy to external
predicate;
#X obj 30 10026 list.delta;
#X text 200 10026 returns the difference between the current list of
floats and the previous one.;
#X obj 30 10066 list.distribution;
#X text 200 10066 list value distribution;
#X obj 30 10093 list.do;
#X text 200 10093 iterate and modify list contents via side-chain;
#X obj 30 10120 list.each;
#X text 200 10120 maps each list value via external side-chain;
#X obj 30 10147 list.enumerate;
#X text 200 10147 enumerates input list;
#X obj 30 10174 list.equal;
#X text 200 10174 checks if given lists are equal;
#X obj 30 10201 list.first;
#X text 200 10201 returns first list element;
#X obj 30 10228 list.gen;
#X text 200 10228 generates list of specified length via external generator;
#X obj 30 10255 list.histogram;
#X text 200 10255 outputs distribution histogram;
#X obj 30 10282 list.insert;
#X text 200 10282 insert atom or list to the specified position of
input list;
#X obj 30 10309 list.integrator;
#X text 200 10309 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 10349 list.last;
#X text 200 10349 output last list element;
#X obj 30 10376 list.length;
#X text 200 10376 output the number of atoms in the list;
#X obj 30 10403 list.map;
#X text 200 10403 map list values by specified dictionary;
#X obj 30 10430 list.max;
#X text 200 10430 output largest element in the list;
#X obj 30 10457 list.mean;
#X text 200 10457 calculates average of list of floats;
#X obj 30 10484 list.min;
#X text 200 10484 returns smallest element in the list;
#X obj 30 10511 list.none_of;
#X text 200 10511 checks if none of list atoms is accepted by predicate;
#X obj 30 10538 list.normalize;
#X text 200 10538 normalizes float list values to get their sum = 1.0;
#X obj 30 10565 list.pass;
#X text 200 10565 leave in list only specified elements;
#X obj 30 10592 list.pass_if;
#X text 200 10592 leave only elements accepted by predicate;
#X obj 30 10619 list.prepend;
#X text 200 10619 prepend atom or list before input list;
#X obj 30 10646 list.product;
#X text 200 10646 calculates product of floats in list;
#X obj 30 10673 list.range;
#X text 200 10673 output list smallest and largest value;
#X obj 30 10700 list.reduce;
#X text 200 10700 apply function of two arguments cumulatively to the
list;
#X obj 30 10727 list.reject;
#X text 200 10727 remove specified element from list;
#X obj 30 10754 list.remove;
#X text 200 10754 remove list element(s) at specified positions;
#X obj 30 10781 list.remove_if;
#X text 200 10781 remove elements by predicate;
#X obj 30 10808 list.repack;
#X text 200 10808 repack list to specified size;
#X obj 30 10835 list.repeat;
#X text 200 10835 output new list by repeating input list specified
times;
#X obj 30 10862 list.resample;
#X text 200 10862 resample list with specified ratio;
#X obj 30 10889 list.resize;
#X text 200 10889 changes list size;
#X obj 30 10916 list.reverse;
#X text 200 10916 reverses the order of the elements in the list;
#X obj 30 10943 list.rldecode;
#X text 200 10943 Run-length list decoder (RLE);
#X obj 30 10970 list.rlencode;
#X text 200 10970 RLE (run-length encoding) for lists;
#X obj 30 10997 list.rotate;
#X text 200 10997 rotates list;
#X obj 30 11024 list.route;
#X text 200 11024 acts like [route] but for lists;
#X obj 30 11051 list.rundiff;
#X text 200 11051 running difference;
#X obj 30 11078 list.runsum;
#X text 200 11078 running sum;
#X obj 30 11105 list.search;
#X text 200 11105 search specified items in input list;
#X obj 30 11132 list.separate;
#X text 200 11132 sends list elements one by one separately;
#X obj 30 11159 list.seq;
#X text 200 11159 numeric sequence list generator;
#X obj 30 11186 list.set;
#X text 200 11186 set list value at specified position;
#X obj 30 11213 list.shift;
#X text 200 11213 shifts the contents of the list with linear interpolation;
#X obj 30 11240 list.shuffle;
#X text 200 11240 randomly rearranges elements in list;
#X obj 30 11267 list.slice;
#X text 200 11267 extract sublist;
#X obj 30 11294 list.sort;
#X text 200 11294 sorts list values by ascending order;
#X obj 30 11321 list.sort_with;
#X text 200 11321 sort list with user defined side-chain;
#X obj 30 11348 list.split;
#X text 200 11348 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 11388 list.stretch;
#X text 200 11388 stretches list - changes its size with linear interpolation;
#X obj 30 11415 list.sum;
#X text 200 11415 calculates sum of floats in list;
#X obj 30 11442 list.unique;
#X text 200 11442 removes duplicates from input list;
#X obj 30 11469 list.unpack;
#X text 200 11469 unpack list elements to separate outlets;
#X obj 30 11496 list.unzip;
#X text 200 11496 splits list to N lists \, each to separate output;
#X obj 30 11523 list.walk;
#X text 200 11523 Walks thru the list;
#X obj 30 11550 list.zip;
#X text 200 11550 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 11605 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 11646 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11657 live.capture~;
#X text 200 11657 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 11697 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 11738 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11749 local.dict;
#X text 200 11749 local named dict object;
#X obj 30 11776 local.float;
#X text 200 11776 canvas-scoped named float variable;
#X obj 30 11803 local.int;
#X text 200 11803 canvas-scoped named integer variable;
#X obj 30 11830 local.list;
#X text 200 11830 local named list object;
#X obj 30 11857 local.mlist;
#X text 200 11857 local named mlist object;
#X obj 30 11884 local.set;
#X text 200 11884 local named set object;
#X obj 20 11911 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 11952 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11963 math.abs;
#X text 200 11963 absolute value function;
#X obj 30 11990 math.abs~;
#X text 200 11990 absolute value function for signals;
#X obj 30 12017 math.acos;
#X text 200 12017 arc cosine function;
#X obj 30 12044 math.acosh;
#X text 200 12044 inverse hyperbolic cosine function;
#X obj 30 12071 math.acosh~;
#X text 200 12071 hyperbolic arc cosine for signals;
#X obj 30 12098 math.acos~;
#X text 200 12098 arc cosine function for signals;
#X obj 30 12125 math.and;
#X text 200 12125 operation AND for multiple arguments;
#X obj 30 12152 math.approx;
#X text 200 12152 check if input value approximately equal to pattern;
#X obj 30 12179 math.asin;
#X text 200 12179 arc sine function;
#X obj 30 12206 math.asinh;
#X text 200 12206 inverse hyperbolic sine function;
#X obj 30 12233 math.asinh~;
#X text 200 12233 hyperbolic arc sine for signals;
#X obj 30 12260 math.asin~;
#X text 200 12260 arc sine for signals;
#X obj 30 12287 math.atan;
#X text 200 12287 arc tangent function;
#X obj 30 12314 math.atanh;
#X text 200 12314 inverse hyperbolic tangent function;
#X obj 30 12341 math.atanh~;
#X text 200 12341 hyperbolic arc tangent for signals;
#X obj 30 12368 math.atan~;
#X text 200 12368 arc tangent for signals;
#X obj 30 12395 math.binomial;
#X text 200 12395 binomial coefficient calculator;
#X obj 30 12422 math.cabs~;
#X text 200 12422 magnitude of a complex signals;
#X obj 30 12449 math.carg~;
#X text 200 12449 phase angle of a complex signals;
#X obj 30 12476 math.cbrt;
#X text 200 12476 cube root function;
#X obj 30 12503 math.cbrt~;
#X text 200 12503 cube root function for signals;
#X obj 30 12530 math.cdiv~;
#X text 200 12530 division of complex signals;
#X obj 30 12557 math.ceil;
#X text 200 12557 round to smallest integral value not less than input
value;
#X obj 30 12584 math.ceil~;
#X text 200 12584 round to smallest integral value not less than input
value;
#X obj 30 12611 math.cexp~;
#X text 200 12611 exponent of a complex signals;
#X obj 30 12638 math.cmul~;
#X text 200 12638 multiplication of complex signals;
#X obj 30 12665 math.cos;
#X text 200 12665 cosine function;
#X obj 30 12692 math.cosh;
#X text 200 12692 hyperbolic cosine function;
#X obj 30 12719 math.cosh~;
#X text 200 12719 hyperbolic cosine for signals;
#X obj 30 12746 math.cos~;
#X text 200 12746 cosine function;
#X obj 30 12773 math.div;
#X text 200 12773 division (on lists too);
#X obj 30 12800 math.e;
#X text 200 12800 mathematical constant \, base of the natural logarithm;
#X obj 30 12827 math.erf;
#X text 200 12827 error function;
#X obj 30 12854 math.erf~;
#X text 200 12854 error function for signals;
#X obj 30 12881 math.exp;
#X text 200 12881 exponential functions;
#X obj 30 12908 math.exp2;
#X text 200 12908 exponential functions;
#X obj 30 12935 math.exp2~;
#X text 200 12935 base-2 exponential for signal;
#X obj 30 12962 math.expr;
#X text 200 12962 dynamic [expr];
#X obj 30 12989 math.exp~;
#X text 200 12989 base-e exponential for signal;
#X obj 30 13016 math.floor;
#X text 200 13016 round to largest integral value not greater than
x;
#X obj 30 13043 math.floor~;
#X text 200 13043 round to largest integral value not greater than
x;
#X obj 30 13070 math.gamma;
#X text 200 13070 gamma function;
#X obj 30 13097 math.gamma~;
#X text 200 13097 gamma function for floating point signals;
#X obj 30 13124 math.gcd;
#X text 200 13124 calculate greatest common divisor;
#X obj 30 13151 math.inf;
#X text 200 13151 infinity value that cannot be represented accurately;
#X obj 30 13178 math.inf~;
#X text 200 13178 inifinity signal generator;
#X obj 30 13205 math.lcm;
#X text 200 13205 calculate least common multiple;
#X obj 30 13232 math.lgamma;
#X text 200 13232 natural logarithm of the absolute value of the gamma
function;
#X obj 30 13259 math.lgamma~;
#X text 200 13259 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 13299 math.log;
#X text 200 13299 natural logarithm;
#X obj 30 13326 math.log10;
#X text 200 13326 logarithm functions;
#X obj 30 13353 math.log10~;
#X text 200 13353 natural logarithm;
#X obj 30 13380 math.log2;
#X text 200 13380 logarithm functions;
#X obj 30 13407 math.log2~;
#X text 200 13407 base-2 logarithm;
#X obj 30 13434 math.log~;
#X text 200 13434 natural logarithm;
#X obj 30 13461 math.mul;
#X text 200 13461 multiplication (on lists too);
#X obj 30 13488 math.nan;
#X text 200 13488 Not a Number \, unrepresentable value;
#X obj 30 13515 math.nan~;
#X text 200 13515 signal NaN;
#X obj 30 13542 math.neg;
#X text 200 13542 negate function;
#X obj 30 13569 math.or;
#X text 200 13569 operation OR for multiple arguments;
#X obj 30 13596 math.pi;
#X text 200 13596 mathematical constant;
#X obj 30 13623 math.pi~;
#X text 200 13623 mathematical constant;
#X obj 30 13650 math.polyeval;
#X text 200 13650 evaluates the polynomial described by the coefficients
list;
#X obj 30 13677 math.reciprocal;
#X text 200 13677 calculate reciprocal number;
#X obj 30 13704 math.reciprocal~;
#X text 200 13704 calculate reciprocal number for signals;
#X obj 30 13731 math.round;
#X text 200 13731 round to integral value \, regardless of rounding
direction;
#X obj 30 13758 math.round~;
#X text 200 13758 signal round;
#X obj 30 13785 math.sign;
#X text 200 13785 sign function;
#X obj 30 13812 math.sin;
#X text 200 13812 sine function;
#X obj 30 13839 math.sinh;
#X text 200 13839 hyperbolic sine function;
#X obj 30 13866 math.sinh~;
#X text 200 13866 hyperbolic sine for signals;
#X obj 30 13893 math.sin~;
#X text 200 13893 sine function;
#X obj 30 13920 math.sqrt;
#X text 200 13920 square root function;
#X obj 30 13947 math.sqrt~;
#X text 200 13947 square root for signal;
#X obj 30 13974 math.squared;
#X text 200 13974 value square;
#X obj 30 14001 math.squared~;
#X text 200 14001 signal value square;
#X obj 30 14028 math.sync_add;
#X text 200 14028 sync addition;
#X obj 30 14055 math.sync_and;
#X text 200 14055 sync logical AND operation;
#X obj 30 14082 math.sync_div;
#X text 200 14082 sync division;
#X obj 30 14109 math.sync_eq;
#X text 200 14109 sync equal numbers check;
#X obj 30 14136 math.sync_ge;
#X text 200 14136 sync greater equal numbers compare;
#X obj 30 14163 math.sync_gt;
#X text 200 14163 sync greater then numbers compare;
#X obj 30 14190 math.sync_le;
#X text 200 14190 sync less equal numbers compare;
#X obj 30 14217 math.sync_lshift;
#X text 200 14217 sync signed bit left shift;
#X obj 30 14244 math.sync_lt;
#X text 200 14244 sync less then numbers compare;
#X obj 30 14271 math.sync_mod;
#X text 200 14271 sync remainder of modulo division (float or integer);
#X obj 30 14298 math.sync_mul;
#X text 200 14298 sync multiplication;
#X obj 30 14325 math.sync_ne;
#X text 200 14325 sync numbers for not equality;
#X obj 30 14352 math.sync_or;
#X text 200 14352 sync logical OR operation;
#X obj 30 14379 math.sync_rshift;
#X text 200 14379 sync signed bit right shift;
#X obj 30 14406 math.sync_sub;
#X text 200 14406 sync subtraction;
#X obj 30 14433 math.sync_xor;
#X text 200 14433 sync logical XOR operation;
#X obj 30 14460 math.tan;
#X text 200 14460 tangent function;
#X obj 30 14487 math.tanh;
#X text 200 14487 hyperbolic tangent function;
#X obj 30 14514 math.tanh~;
#X text 200 14514 hyperbolic tangent for signals;
#X obj 30 14541 math.tan~;
#X text 200 14541 tangent function;
#X obj 30 14568 math.trunc;
#X text 200 14568 truncate to integer value;
#X obj 30 14595 math.trunc~;
#X text 200 14595 truncate to integer value;
#X obj 20 14622 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 14663 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14674 midi.arp;
#X text 200 14674 MIDI arpeggiator;
#X obj 30 14701 midi.cc;
#X text 200 14701 enhanced version of vanilla ctlin;
#X obj 30 14728 midi.clock;
#X text 200 14728 midi clock toolbox;
#X obj 30 14755 midi.ctl2str;
#X text 200 14755 convert Standard MIDI Controllers number to name;
#X obj 30 14782 midi.event2ctl;
#X text 200 14782 convert MidiEvent message to controller channel/value
pair;
#X obj 30 14809 midi.event2note;
#X text 200 14809 convert MidiEvent message to midi note/velocity pair;
#X obj 30 14836 midi.event2prg;
#X text 200 14836 convert MidiEvent message to midi program change
value;
#X obj 30 14863 midi.file;
#X text 200 14863 standard midi file SMF reader and writer;
#X obj 30 14890 midi.kbd;
#X text 200 14890 computer keyboard midi;
#X obj 30 14917 midi.key2str;
#X text 200 14917 convert key number to SPN name according to tonality;
#X obj 30 14944 midi.modus;
#X text 200 14944 snap/skip midi pitches according modus;
#X obj 30 14971 midi.oct;
#X text 200 14971 midi octave transpose;
#X obj 30 14998 midi.prg2str;
#X text 200 14998 convert GM Instrument number to name (string or symbol);
#X obj 30 15025 midi.split;
#X text 200 15025 midi note splitter;
#X obj 30 15052 midi.sustain;
#X text 200 15052 sustain pedal emulation;
#X obj 30 15079 midi.sysex;
#X text 200 15079 sysex input messages as list;
#X obj 30 15106 midi.track;
#X text 200 15106 extract track from MidiFile;
#X obj 30 15133 midi.tuning;
#X text 200 15133 apply tuning to midi messages;
#X obj 30 15160 midi.vramp;
#X text 200 15160 apply crescendo or diminuendo for midi message flow;
#X obj 30 15187 midi.vrand;
#X text 200 15187 midi velocity randomizer;
#X obj 20 15214 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 15255 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15266 click~;
#X text 200 15266 Output single impulse on bang;
#X obj 30 15293 fluid~;
#X text 200 15293 FluidSynth SoundFont 2 player;
#X obj 30 15320 modplug~;
#X text 200 15320 MOD file player (using libmodplug);
#X obj 30 15347 qrcode;
#X text 200 15347 QR code generator;
#X obj 30 15374 risset.gliss;
#X text 200 15374 Sheppard/Risset glissando calculator;
#X obj 30 15401 sfizz~;
#X text 200 15401 SFZ format sample player;
#X obj 30 15428 speech.flite;
#X text 200 15428 render speech to array;
#X obj 30 15455 speech.flite~;
#X text 200 15455 render speech to array;
#X obj 30 15482 speech.rhvoice~;
#X text 200 15482 RHVoice text to speech synthesis;
#X obj 20 15509 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 15550 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15561 loadexpr;
#X text 200 15561 send message when patch loads;
#X obj 30 15588 msg;
#X text 200 15588 message constructor;
#X obj 30 15615 msg.after;
#X text 200 15615 send specified message after incoming message;
#X obj 30 15642 msg.onload;
#X text 200 15642 send message when patch loads;
#X obj 30 15669 msg.sched;
#X text 200 15669 message scheduler;
#X obj 20 15696 cnv 5 58 31 empty empty music 4 13 0 17 -262144 -49933
0;
#X obj 20 15737 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15748 rhythm.euclid;
#X text 200 15748 euclid pattern generator;
#X obj 30 15775 rhythm.hexbeat;
#X text 200 15775 hexbeat pattern generator;
#X obj 30 15802 rhythm.lsystem;
#X text 200 15802 L-system pattern generator;
#X obj 20 15829 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 15870 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15881 net.artnet.send;
#X text 200 15881 ArtNet DMX message sender;
#X obj 30 15908 net.host2ip;
#X text 200 15908 returns IP address by DNS name;
#X obj 30 15935 net.http.send;
#X text 200 15935 HTTP request sender;
#X obj 30 15962 net.osc.receive;
#X text 200 15962 OSC message listener;
#X obj 30 15989 net.osc.send;
#X text 200 15989 OSC message sender;
#X obj 30 16016 net.osc.server;
#X text 200 16016 OSC server control;
#X obj 20 16043 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 16084 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16095 noise.baker;
#X text 200 16095 Part of a-chaos library;
#X obj 30 16122 noise.clifford;
#X text 200 16122 clifford attractor;
#X obj 30 16149 noise.collatz;
#X text 200 16149 collatz conjecture output;
#X obj 30 16176 noise.colored~;
#X text 200 16176 colored noise generator with an arbitrary spectral
roll;
#X obj 30 16203 noise.crackle~;
#X text 200 16203 sparse noise generator;
#X obj 30 16230 noise.duffing;
#X text 200 16230 duffing attractor;
#X obj 30 16257 noise.ginger;
#X text 200 16257 Gingerbreadman map chaotic generator;
#X obj 30 16284 noise.henon;
#X text 200 16284 henon attractor;
#X obj 30 16311 noise.henon_heilles;
#X text 200 16311 Hénon–Heiles_system;
#X obj 30 16338 noise.henon_phase;
#X text 200 16338 henon phase Ddagrams;
#X obj 30 16365 noise.henonf;
#X text 200 16365 Henon phase;
#X obj 30 16392 noise.ikeda;
#X text 200 16392 Ikeda attractor;
#X obj 30 16419 noise.lfreq0~;
#X text 200 16419 sampled/held noise (piecewise constant);
#X obj 30 16446 noise.lfreq~;
#X text 200 16446 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 16473 noise.lorenz;
#X text 200 16473 Lorenz chaos;
#X obj 30 16500 noise.lyapunov;
#X text 200 16500 lyapunov random attractor;
#X obj 30 16527 noise.navier_stokes;
#X text 200 16527 navier-stokes diff equations;
#X obj 30 16554 noise.pink~;
#X text 200 16554 Pink noise generator;
#X obj 30 16581 noise.rossler;
#X text 200 16581 Rössler attractor;
#X obj 30 16608 noise.stein;
#X text 200 16608 Stein distribution;
#X obj 30 16635 noise.torus;
#X text 200 16635 torus attractor;
#X obj 30 16662 noise.verhulst;
#X text 200 16662 verhulst distribution;
#X obj 30 16689 noise.white~;
#X text 200 16689 White noise generator;
#X obj 20 16716 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 16757 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16768 osc.blit~;
#X text 200 16768 Bandlimited impulse train oscillator;
#X obj 30 16795 osc.impulse~;
#X text 200 16795 Bandlimited impulse train generator;
#X obj 30 16822 osc.pulse~;
#X text 200 16822 Bandlimited pulse train oscillator;
#X obj 30 16849 osc.saw4~;
#X text 200 16849 Bandlimited sawtooth wave;
#X obj 30 16876 osc.saw~;
#X text 200 16876 Alias-free sawtooth wave;
#X obj 30 16903 osc.sinfb~;
#X text 200 16903 Sine oscilator with feedback;
#X obj 30 16930 osc.sin~;
#X text 200 16930 Sine wave oscillator;
#X obj 30 16957 osc.square~;
#X text 200 16957 Bandlimited square wave oscillator;
#X obj 30 16984 osc.tri~;
#X text 200 16984 Bandlimited triangle wave oscillator;
#X obj 20 17011 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 17052 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17063 canvas.active;
#X text 200 17063 checks if canvas window is on top and active;
#X obj 30 17090 canvas.current;
#X text 200 17090 verbose information about current canvas;
#X obj 30 17117 canvas.dir;
#X text 200 17117 current canvas directory;
#X obj 30 17144 canvas.name;
#X text 200 17144 current canvas name;
#X obj 30 17171 canvas.path;
#X text 200 17171 current canvas fullpath;
#X obj 30 17198 canvas.top;
#X text 200 17198 verbose information about top-level canvas;
#X obj 30 17225 patch.args;
#X text 200 17225 Get patch or subpatch arguments;
#X obj 30 17252 patch.deps;
#X text 200 17252 patch dependencies: used objects and abstractions;
#X obj 30 17279 patch.tree;
#X text 200 17279 patch tree;
#X obj 20 17306 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 17347 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17358 file.size;
#X text 200 17358 output file size;
#X obj 30 17385 path.basename;
#X text 200 17385 outputs filename portion of pathname;
#X obj 30 17412 path.dirname;
#X text 200 17412 outputs directory portion of pathname;
#X obj 30 17439 path.exists;
#X text 200 17439 checks if given path exists;
#X obj 30 17466 path.file;
#X text 200 17466 file input/output;
#X obj 30 17493 path.is_dir;
#X text 200 17493 check if path is directory;
#X obj 30 17520 path.lsdir;
#X text 200 17520 list directory contents;
#X obj 30 17547 path.monitor;
#X text 200 17547 filesystem event monitor;
#X obj 30 17574 path.normalize;
#X text 200 17574 normalize file paths;
#X obj 30 17601 path.pattern;
#X text 200 17601 pattern filename generator;
#X obj 30 17628 path.search;
#X text 200 17628 file search;
#X obj 30 17655 path.split;
#X text 200 17655 file path split;
#X obj 20 17682 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 17723 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17734 is_any;
#X text 200 17734 checks if input data has *any* type;
#X obj 30 17761 is_bang;
#X text 200 17761 checks if input data has *bang* type;
#X obj 30 17788 is_data;
#X text 200 17788 checks if input data has *data* type;
#X obj 30 17815 is_dict;
#X text 200 17815 checks if input data has *dict* type;
#X obj 30 17842 is_even;
#X text 200 17842 checks if input number is even;
#X obj 30 17869 is_file;
#X text 200 17869 checks if file exists and accessible;
#X obj 30 17896 is_float;
#X text 200 17896 checks if input data has *float* type;
#X obj 30 17923 is_list;
#X text 200 17923 checks if input data has *list* type;
#X obj 30 17950 is_odd;
#X text 200 17950 checks if input number is odd;
#X obj 30 17977 is_pointer;
#X text 200 17977 checks if input data has *pointer* type;
#X obj 30 18004 is_prop;
#X text 200 18004 checks if input message is *property* message;
#X obj 30 18031 is_symbol;
#X text 200 18031 checks if input data has *symbol* type;
#X obj 20 18058 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 18099 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18110 preset.float;
#X text 200 18110 load/store float preset;
#X obj 30 18137 preset.list;
#X text 200 18137 load/store symbol preset;
#X obj 30 18164 preset.storage;
#X text 200 18164 preset storage control;
#X obj 30 18191 preset.symbol;
#X text 200 18191 load/store symbol preset;
#X obj 20 18218 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 18259 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18270 patch.props;
#X text 200 18270 patch properties manager;
#X obj 30 18297 prop;
#X text 200 18297 get/set named property value for subpatch or abstraction;
#X obj 30 18324 prop.declare;
#X text 200 18324 declare named property for subpatch or abstraction;
#X obj 30 18351 prop.get;
#X text 200 18351 get property from connected object/subpatch/abstraction;
#X obj 30 18378 prop.get~;
#X text 200 18378 Property extractor from sound stream;
#X obj 30 18405 prop.join;
#X text 200 18405 join property to main data flow;
#X obj 30 18432 prop.random;
#X text 200 18432 property randomizer;
#X obj 30 18459 prop.set;
#X text 200 18459 set property for connected object/subpatch/abstraction;
#X obj 30 18486 prop.split;
#X text 200 18486 separate properties from dataflow;
#X obj 20 18513 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 18554 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18565 proto.feelworld;
#X text 200 18565 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 18592 proto.firmata;
#X text 200 18592 Firmata Arduino protocol support;
#X obj 30 18619 proto.inscore;
#X text 200 18619 INScore message creator;
#X obj 30 18646 proto.ltc.in~;
#X text 200 18646 LTC decoder;
#X obj 30 18673 proto.midi;
#X text 200 18673 raw midi encoder/parser;
#X obj 30 18700 proto.midi.cc;
#X text 200 18700 raw midi CC encoder/parser;
#X obj 30 18727 proto.midi.sysex;
#X text 200 18727 raw midi SYSex encoder/parser;
#X obj 30 18754 proto.moppy;
#X text 200 18754 protocol for Musical flOPPY controller;
#X obj 30 18781 proto.morse;
#X text 200 18781 Morse encoder;
#X obj 30 18808 proto.mpv;
#X text 200 18808 mpv video player control;
#X obj 30 18835 proto.sp.alpaca;
#X text 200 18835 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 18862 proto.vlc;
#X text 200 18862 VLC video player control over HTTP;
#X obj 30 18889 proto.whammy;
#X text 200 18889 Control for Digitech Whammy pedal;
#X obj 30 18916 proto.xtouch_ext;
#X text 200 18916 Behringer XTouch Extender XMidi protocol;
#X obj 20 18943 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 18984 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18995 random.atom;
#X text 200 18995 weighted atom generation from specified list;
#X obj 30 19022 random.discrete;
#X text 200 19022 random weighted integers on interval [0 \, n);
#X obj 30 19049 random.float;
#X text 200 19049 uniform random float generator in specified range;
#X obj 30 19076 random.gauss;
#X text 200 19076 gaussian random distribution;
#X obj 30 19103 random.int;
#X text 200 19103 uniform random integer generator in specified range;
#X obj 30 19130 random.linear;
#X text 200 19130 random linear distribution;
#X obj 30 19157 random.pw_const;
#X text 200 19157 piecewise constant random distribution;
#X obj 30 19184 random.pw_lin;
#X text 200 19184 piecewise linear random distribution;
#X obj 20 19211 cnv 5 48 31 empty empty samp 4 13 0 17 -262144 -49933
0;
#X obj 20 19252 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19263 samp.time~;
#X text 200 19263 sample counter;
#X obj 20 19290 cnv 5 37 31 empty empty seq 4 13 0 17 -262144 -49933
0;
#X obj 20 19331 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19342 seq.arp;
#X text 200 19342 sequence arpeggiator;
#X obj 30 19369 seq.bangs;
#X text 200 19369 bang sequencer;
#X obj 30 19396 seq.counter;
#X text 200 19396 sequencer counter;
#X obj 30 19423 seq.life;
#X text 200 19423 Conway gamw of life sequencer;
#X obj 30 19450 seq.matrix;
#X text 200 19450 sequencer control for ui.matrix;
#X obj 30 19477 seq.nbangs;
#X text 200 19477 output specified number of bang with time intervals;
#X obj 30 19504 seq.phasor;
#X text 200 19504 control rate phasor (saw) generator;
#X obj 30 19531 seq.toggles;
#X text 200 19531 toggle sequencer;
#X obj 30 19558 sequencer;
#X text 200 19558 basic sequence player;
#X obj 20 19585 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 19626 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19637 snd.file;
#X text 200 19637 Sound file loader on steroids;
#X obj 20 19664 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 19705 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19716 hoa.2d.decoder~;
#X text 200 19716 hoa 2d decoder;
#X obj 30 19743 hoa.2d.encoder~;
#X text 200 19743 hoa 2d encoder;
#X obj 30 19770 hoa.2d.map~;
#X text 200 19770 a 2d ambisonic multisource spatializer;
#X obj 30 19797 hoa.2d.optim~;
#X text 200 19797 a 2D ambisonic optimization tool;
#X obj 30 19824 hoa.2d.projector~;
#X text 200 19824 a plane waves decomposer from circular harmonics
domain;
#X obj 30 19851 hoa.2d.recomposer~;
#X text 200 19851 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 19891 hoa.2d.rotate~;
#X text 200 19891 a 2D ambisonic sound field rotation;
#X obj 30 19918 hoa.2d.wider~;
#X text 200 19918 a 2d fractional ambisonic order simulator;
#X obj 30 19945 hoa.@process;
#X text 200 19945 process properties manager for hoa.process~;
#X obj 30 19972 hoa.in;
#X text 200 19972 message inlet for a patcher loaded by hoa.process~;
#X obj 30 19999 hoa.in~;
#X text 200 19999 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20026 hoa.out;
#X text 200 20026 message outlet for a patcher loaded by hoa.process~;
#X obj 30 20053 hoa.out~;
#X text 200 20053 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 20080 hoa.process~;
#X text 200 20080 patcher loader for multichannel processing;
#X obj 30 20110 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 20107 a 2d ambisonic harmonic scope;
#X obj 30 20132 pan.cos~;
#X text 200 20132 two channel equal power sine/cosine panner;
#X obj 30 20159 pan.linsig~;
#X text 200 20159 two channel linear panner with signal control;
#X obj 30 20186 pan.lin~;
#X text 200 20186 two channel linear panner;
#X obj 30 20213 pan.spread~;
#X text 200 20213 spreads input channels across the stereo field;
#X obj 30 20240 pan.sqrt~;
#X text 200 20240 two channel equal power square root panner;
#X obj 30 20267 spat.pan4~;
#X text 200 20267 GMEM SPAT: 4-outputs spatializer;
#X obj 30 20294 spat.pan8~;
#X text 200 20294 GMEM SPAT: 8-outputs spatializer;
#X obj 30 20321 spat.zita6x8~;
#X text 200 20321 spat with 6 inputs sources to 8 channel output;
#X obj 30 20348 spat.zita8~;
#X text 200 20348 8 channel reverb spatializer;
#X obj 20 20375 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 20416 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20427 string;
#X text 200 20427 string constructor;
#X obj 30 20454 string.contains;
#X text 200 20454 checks if string contains specified substring;
#X obj 30 20481 string.ends_with;
#X text 200 20481 checks if string ends with specified substring;
#X obj 30 20508 string.equal;
#X text 200 20508 check strings or symbols for equality;
#X obj 30 20535 string.format;
#X text 200 20535 formats string like printf.;
#X obj 30 20562 string.join;
#X text 200 20562 joins (concatenates) list to string with separator;
#X obj 30 20589 string.length;
#X text 200 20589 number of characters in string (unicode supported);
#X obj 30 20616 string.match;
#X text 200 20616 check if string match regular expression;
#X obj 30 20643 string.remove;
#X text 200 20643 remove substring from input string;
#X obj 30 20670 string.replace;
#X text 200 20670 replace from one substring to another in input string;
#X obj 30 20697 string.split;
#X text 200 20697 split string or symbol by separator;
#X obj 30 20724 string.starts_with;
#X text 200 20724 checks if string starts with specified substring;
#X obj 30 20751 string.substr;
#X text 200 20751 extract substring from input string;
#X obj 30 20778 string2symbol;
#X text 200 20778 converts string to symbol;
#X obj 20 20805 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 20846 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20857 symbol.equal;
#X text 200 20857 check symbols for equality;
#X obj 30 20884 symbol.length;
#X text 200 20884 number of characters in symbol (unicode supported);
#X obj 30 20911 symbol.num_compare;
#X text 200 20911 numeric symbol compare;
#X obj 30 20938 symbol2any;
#X text 200 20938 converts symbol or string to message;
#X obj 30 20965 symbol2intlist;
#X text 200 20965 converts symbol to list of character codes;
#X obj 20 20992 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 21033 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21044 noise.chua~;
#X text 200 21044 Chua's diode circuit;
#X obj 30 21071 synth.bee3~;
#X text 200 21071 Hammond-oid organ FM synthesis instrument;
#X obj 30 21098 synth.birds~;
#X text 200 21098 bird singing generator;
#X obj 30 21125 synth.church_bell~;
#X text 200 21125 generic church bell modal model;
#X obj 30 21152 synth.clap~;
#X text 200 21152 clap synth from faust libraries;
#X obj 30 21179 synth.dubdub~;
#X text 200 21179 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 21219 synth.dx7~;
#X text 200 21219 FAUST dx7 implementation;
#X obj 30 21246 synth.eguitar~;
#X text 200 21246 simple electric guitar model with steel strings;
#X obj 30 21273 synth.english_bell~;
#X text 200 21273 english church bell modal model;
#X obj 30 21300 synth.fgrain~;
#X text 200 21300 file granulator from STK;
#X obj 30 21327 synth.french_bell~;
#X text 200 21327 french church bell modal model;
#X obj 30 21354 synth.german_bell~;
#X text 200 21354 german church bell modal model;
#X obj 30 21381 synth.glass_harm~;
#X text 200 21381 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 21408 synth.glitch~;
#X text 200 21408 Glitch synthesizer by naivesound;
#X obj 30 21435 synth.harpsichord~;
#X text 200 21435 waveguide commuted harpsichord;
#X obj 30 21462 synth.hat~;
#X text 200 21462 hi-hat synth from faust librariest;
#X obj 30 21489 synth.kick2~;
#X text 200 21489 low-kick synth from faust librariest;
#X obj 30 21516 synth.kick~;
#X text 200 21516 low-kick synth from Guitarix project;
#X obj 30 21543 synth.ks~;
#X text 200 21543 Karplus-Strong string;
#X obj 30 21570 synth.marimba~;
#X text 200 21570 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 21610 synth.piano~;
#X text 200 21610 waveguide commuted piano;
#X obj 30 21637 synth.rhodey~;
#X text 200 21637 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 21664 synth.risset_arp~;
#X text 200 21664 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 21691 synth.risset_bell~;
#X text 200 21691 Jean Claude Risset's bell synth;
#X obj 30 21718 synth.risset_tone~;
#X text 200 21718 Jean Claude Risset's endless glissando;
#X obj 30 21745 synth.russian_bell~;
#X text 200 21745 russian church bell modal model;
#X obj 30 21772 synth.shakers~;
#X text 200 21772 various percussion sounds from STK library;
#X obj 30 21799 synth.sitar~;
#X text 200 21799 STK sitar;
#X obj 30 21826 synth.snare~;
#X text 200 21826 Snare drum synth from Guitarix project;
#X obj 30 21853 synth.standard_bell~;
#X text 200 21853 german church bell modal model;
#X obj 30 21880 synth.tube_bell~;
#X text 200 21880 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 21907 synth.voice_fofc~;
#X text 200 21907 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 21934 synth.voice_fofs~;
#X text 200 21934 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 21961 synth.wurley~;
#X text 200 21961 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 21988 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 22029 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22040 system.colorpanel;
#X text 200 22040 System color panel dialog popup;
#X obj 30 22067 system.cursor;
#X text 200 22067 Output cursor motion \, mousewheel and button clicks;
#X obj 30 22094 system.exec;
#X text 200 22094 run external command in separate process;
#X obj 30 22121 system.exit;
#X text 200 22121 quit PureData;
#X obj 30 22148 system.getenv;
#X text 200 22148 Get system environment variables;
#X obj 30 22175 system.hostname;
#X text 200 22175 outputs system hostname;
#X obj 30 22202 system.memsize;
#X text 200 22202 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 22242 system.memused;
#X text 200 22242 returns the process physical memory use - current
and peak;
#X obj 30 22269 system.screen_size;
#X text 200 22269 returns current screen size in pixels;
#X obj 20 22296 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 22337 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22348 tl.bang;
#X text 200 22348 Timeline bang (with possible delay);
#X obj 30 22378 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 22375 Timeline section;
#X obj 30 22400 tl.timeline;
#X text 200 22400 Timeline - event scheduler;
#X obj 30 22427 tl.toggle;
#X text 200 22427 Timeline bang;
#X obj 30 22454 tl.transport;
#X text 200 22454 Timeline transport control;
#X obj 20 22481 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 22522 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22536 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 22533 array view with cursor and selection;
#X obj 30 22561 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 22558 A bang... that's all;
#X obj 30 22586 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 22583 button widget;
#X obj 30 22611 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 22608 colorchooser widget;
#X obj 30 22636 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 22633 Display GUI object;
#X obj 30 22661 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 22658 GUI for turning DSP on/off;
#X obj 30 22686 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 22683 envelope editor widget;
#X obj 30 22711 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 22708 UI filter object calculator for biquad filter;
#X obj 30 22736 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 22733 UI filter object based on biquad filter;
#X obj 30 22761 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 22758 UI stereo gain control;
#X obj 30 22786 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 22783 UI gain control;
#X obj 30 22811 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 22808 simple icon with button capabilities;
#X obj 30 22836 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 22833 value increment/decrement;
#X obj 30 22861 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 22858 keyboard widget;
#X obj 30 22886 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 22883 knob widget;
#X obj 30 22911 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 22908 simple label widget;
#X obj 30 22936 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 22933 black and white bitmap display;
#X obj 30 22961 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 22958 Hyperlink widget;
#X obj 30 22986 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 22983 The matrix of toggles has you.;
#X obj 30 23011 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 23008 Dropdown menu;
#X obj 30 23036 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 23033 Shows peak and rms signal level;
#X obj 30 23061 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 23058 incoming MIDI message viewport;
#X obj 30 23086 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 23083 filter mouse events from ui objects;
#X obj 30 23111 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 23108 routes mouse events from ui objects;
#X obj 30 23136 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 23133 counterpart of the vanilla [nbx];
#X obj 30 23161 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 23158 counterpart of the vanilla [nbx] for signal;
#X obj 30 23186 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 23183 signal plotter;
#X obj 30 23211 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 23208 2D slider in polar coordinates;
#X obj 30 23236 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 23233 Preset manager;
#X obj 30 23261 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 23258 counterpart of the vanilla radio toggle;
#X obj 30 23286 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 23283 range slider;
#X obj 30 23311 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 23308 Scope GUI object;
#X obj 30 23336 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 23333 counterpart of the vanilla slider;
#X obj 30 23361 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 23358 2D slider widget;
#X obj 30 23386 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 23383 Multiple slider widget;
#X obj 30 23411 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 23408 Spectroscope GUI object;
#X obj 30 23436 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 23433 displays a list of text buttons or text toggles;
#X obj 30 23461 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 23458 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 23483 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 23483 version: v0.9.6 \, license: GPL3;
#X obj 20 23511 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 23534 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 23498 msg 0;
#X obj 670 23533 switch~;
#X connect 1642 0 1643 0;