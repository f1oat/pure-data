#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.seq;
#X text 200 880 metro sequencer;
#X obj 30 907 mix~;
#X text 200 907 multislot signal mixer;
#X obj 30 934 obj.props;
#X text 200 934 property extractor;
#X obj 30 961 radio;
#X text 200 961 float index to outlet values as radio switch;
#X obj 30 988 window;
#X text 200 988 returns window value by given window position;
#X obj 30 1015 xfade2~;
#X text 200 1015 multi stereo-signal crossfade;
#X obj 30 1042 xfade~;
#X text 200 1042 multi signal crossfade;
#X obj 20 1069 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1110 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1121 array.p2s;
#X text 200 1121 convert array phase [0\..1] to sample position;
#X obj 30 1148 array.s2p;
#X text 200 1148 convert array sample position to relative phase position
[0\..1];
#X obj 30 1188 conv.amp2dbfs;
#X text 200 1188 convert from amplitude to decibel full scale;
#X obj 30 1215 conv.bpm2hz;
#X text 200 1215 converts BPM to frequency in herz;
#X obj 30 1242 conv.bpm2ms;
#X text 200 1242 convert frequency in BPM to period in milliseconds;
#X obj 30 1269 conv.bpm2sec;
#X text 200 1269 convert frequency in BPM to period in seconds;
#X obj 30 1296 conv.car2pol;
#X text 200 1296 convert cartesian coords to polar;
#X obj 30 1323 conv.cc2amp;
#X text 200 1323 convert from MIDI Control Change range;
#X obj 30 1350 conv.dbfs2amp;
#X text 200 1350 convert decibel full scale to amplitude;
#X obj 30 1377 conv.lin2curve;
#X text 200 1377 map linear to exponential range with 0 allowed.;
#X obj 30 1404 conv.lin2exp;
#X text 200 1404 maps linear range to exponential range;
#X obj 30 1431 conv.lin2lin;
#X text 200 1431 convert from one linear range to another;
#X obj 30 1458 conv.list2props;
#X text 200 1458 converts list to series of property messages;
#X obj 30 1485 conv.midi2freq;
#X text 200 1485 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1525 conv.phase2rad;
#X text 200 1525 convert phase value [0-1] to radians;
#X obj 30 1552 conv.phase2rad~;
#X text 200 1552 convert phase value [0-1] to radians;
#X obj 30 1579 conv.pitch2midi;
#X text 200 1579 converts symbol pitch name to MIDI note number;
#X obj 30 1606 conv.pol2car;
#X text 200 1606 convert from polar coordinates to cartesian;
#X obj 30 1633 conv.rad2phase;
#X text 200 1633 convert radians value to phase;
#X obj 30 1660 conv.rad2phase~;
#X text 200 1660 convert radians value to phase;
#X obj 30 1687 conv.samp2sec;
#X text 200 1687 convert samples to time according to samplerate;
#X obj 30 1714 conv.sec2samp;
#X text 200 1714 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1754 conv.sec2str;
#X text 200 1754 converts float time in seconds to formated symbol
(or string);
#X obj 30 1781 conv.str2sec;
#X text 200 1781 converts formatted time to float value in seconds;
#X obj 20 1808 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1849 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1860 data.dict;
#X text 200 1860 dictionary container: store values by key;
#X obj 30 1887 data.fifo;
#X text 200 1887 First-In-First-Out (FIFO) queue data container;
#X obj 30 1914 data.float;
#X text 200 1914 robust float object;
#X obj 30 1941 data.int;
#X text 200 1941 robust int object;
#X obj 30 1968 data.list;
#X text 200 1968 list container;
#X obj 30 1995 data.mlist;
#X text 200 1995 multidimensional list container;
#X obj 30 2022 data.set;
#X text 200 2022 container that store unique elements;
#X obj 30 2049 data.set2list;
#X text 200 2049 converts set to list;
#X obj 30 2076 dict.contains;
#X text 200 2076 predicate to check dict contains key;
#X obj 30 2103 dict.each;
#X text 200 2103 map each value in dict;
#X obj 30 2130 dict.from_list;
#X text 200 2130 creates dictionary from list;
#X obj 30 2157 dict.get;
#X text 200 2157 on input dict outputs value to corresponding key outlet;
#X obj 30 2184 dict.keys;
#X text 200 2184 get list of dict keys;
#X obj 30 2211 dict.pass;
#X text 200 2211 passes specified keys in dict;
#X obj 30 2238 dict.reject;
#X text 200 2238 rejects specified keys from dict;
#X obj 30 2265 dict.size;
#X text 200 2265 dictionary size;
#X obj 30 2292 dict.to_list;
#X text 200 2292 converts dictionary to plain list;
#X obj 30 2319 dict.values;
#X text 200 2319 dictionary values as mlist;
#X obj 30 2346 mlist.flatten;
#X text 200 2346 flatten nested mlist;
#X obj 30 2373 set.contains;
#X text 200 2373 check if specified element is in set;
#X obj 30 2400 set.diff;
#X text 200 2400 difference between two sets;
#X obj 30 2427 set.equal;
#X text 200 2427 checks if two sets are equal (contains same elements);
#X obj 30 2454 set.intersect;
#X text 200 2454 output intersection of given sets;
#X obj 30 2481 set.size;
#X text 200 2481 get number of elements in set;
#X obj 30 2508 set.symdiff;
#X text 200 2508 symmetric difference between two sets;
#X obj 30 2535 set.union;
#X text 200 2535 output union of given sets;
#X obj 20 2562 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2603 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2614 dyn.comp2~;
#X text 200 2614 stereo dynamic range compressor;
#X obj 30 2641 dyn.comp~;
#X text 200 2641 mono dynamic range compressors;
#X obj 30 2668 dyn.gate2~;
#X text 200 2668 stereo signal gate;
#X obj 30 2695 dyn.gate~;
#X text 200 2695 mono signal gate;
#X obj 30 2722 dyn.limit2~;
#X text 200 2722 stereo 1176LN Peak Limiter;
#X obj 30 2749 dyn.limit~;
#X text 200 2749 mono 1176LN Peak Limiter;
#X obj 30 2776 dyn.softclip~;
#X text 200 2776 soft signal clip;
#X obj 20 2803 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2844 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2855 env.adsr~;
#X text 200 2855 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2882 env.ar~;
#X text 200 2882 Attack/Release envelope generator;
#X obj 30 2909 env.asr~;
#X text 200 2909 Attack/Sustain/Release envelope generator;
#X obj 30 2936 env.concat;
#X text 200 2936 Envelope concatenation;
#X obj 30 2963 env.follow~;
#X text 200 2963 Envelope follower with independent attack and release
times;
#X obj 30 2990 env.mix;
#X text 200 2990 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3030 env.smooth~;
#X text 200 3030 An envelope with an exponential attack and release;
#X obj 30 3057 env.tscale;
#X text 200 3057 Envelope time-scale;
#X obj 30 3084 env.tshift;
#X text 200 3084 Envelope time-shift (horizontal);
#X obj 30 3111 env.vscale;
#X text 200 3111 Envelope value-scale;
#X obj 30 3138 env2array;
#X text 200 3138 Renders envelope to specified array;
#X obj 30 3165 env2vline;
#X text 200 3165 Converts envelope to bunch of vline messages;
#X obj 30 3192 envelope;
#X text 200 3192 Envelope data type;
#X obj 30 3219 vline2env;
#X text 200 3219 Converts vline messages to env;
#X obj 20 3246 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3287 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3298 expand_env;
#X text 200 3298 Substitute enviroment variables in data stream;
#X obj 30 3325 flow.append;
#X text 200 3325 inject message into flow;
#X obj 30 3352 flow.change;
#X text 200 3352 rejects redundant input values;
#X obj 30 3379 flow.count;
#X text 200 3379 control flow event counter;
#X obj 30 3406 flow.demultiplex;
#X text 200 3406 control flow demultiplexer;
#X obj 30 3433 flow.demultiplex2~;
#X text 200 3433 audio stream stereo demultiplexer;
#X obj 30 3460 flow.demultiplex~;
#X text 200 3460 audio stream demultiplexer;
#X obj 30 3487 flow.gate;
#X text 200 3487 control flow gate. [spigot] analog;
#X obj 30 3514 flow.group;
#X text 200 3514 group data atoms in list of specified size;
#X obj 30 3541 flow.interval;
#X text 200 3541 measure time between flow events;
#X obj 30 3568 flow.less;
#X text 200 3568 numeric stream router \, like many [moses];
#X obj 30 3595 flow.less_eq;
#X text 200 3595 numeric stream router \, like many [moses];
#X obj 30 3622 flow.match;
#X text 200 3622 route data flow by regexp match;
#X obj 30 3649 flow.multiplex;
#X text 200 3649 control flow multiplexer;
#X obj 30 3676 flow.multiplex2~;
#X text 200 3676 audio stream stereo multiplexer;
#X obj 30 3703 flow.multiplex~;
#X text 200 3703 audio stream multiplexer;
#X obj 30 3730 flow.once;
#X text 200 3730 one message pass thru;
#X obj 30 3757 flow.pack;
#X text 200 3757 hot flow pack;
#X obj 30 3784 flow.pass;
#X text 200 3784 pass specified values;
#X obj 30 3811 flow.pass_if;
#X text 200 3811 pass values that accepted by predicate object;
#X obj 30 3838 flow.reject;
#X text 200 3838 reject specified values;
#X obj 30 3865 flow.reject_if;
#X text 200 3865 reject values by predicate;
#X obj 30 3892 flow.route;
#X text 200 3892 advanced message router;
#X obj 30 3919 flow.speedlim;
#X text 200 3919 control stream speed limiter;
#X obj 30 3946 flow.split;
#X text 200 3946 split data flow by external side-chain predicate;
#X obj 30 3973 flow.sync;
#X text 200 3973 bus with only hot inlets;
#X obj 30 4000 flow.tee~;
#X text 200 4000 separate audio and control streams;
#X obj 30 4027 replace;
#X text 200 4027 Replace atoms in data stream;
#X obj 20 4054 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4095 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4106 flt.biquad~;
#X text 200 4106 second order IIR filter.;
#X obj 30 4133 flt.bpf12~;
#X text 200 4133 Band-pass filter with 12/db per octave slope;
#X obj 30 4160 flt.bpf24~;
#X text 200 4160 Band-pass filter with 24/db per octave slope;
#X obj 30 4187 flt.c_bpf~;
#X text 200 4187 BPF coefficient calculator for biquad filter;
#X obj 30 4214 flt.c_highshelf~;
#X text 200 4214 Highshelf filter coefficient calculator for biquad;
#X obj 30 4241 flt.c_hpf~;
#X text 200 4241 HPF coefficient calculator for biquad filter;
#X obj 30 4268 flt.c_lowshelf~;
#X text 200 4268 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4295 flt.c_lpf~;
#X text 200 4295 LPF coefficient calculator for biquad filter;
#X obj 30 4322 flt.c_notch~;
#X text 200 4322 Band-reject coefficient calculator for biquad filter;
#X obj 30 4349 flt.c_peak~;
#X text 200 4349 Peaking equalizer calculator for biquad;
#X obj 30 4376 flt.dcblock2~;
#X text 200 4376 stereo DC blocker;
#X obj 30 4403 flt.dcblock~;
#X text 200 4403 mono DC blocker;
#X obj 30 4430 flt.eq10~;
#X text 200 4430 graphic 10 band equalizer;
#X obj 30 4457 flt.eq_peak_cq~;
#X text 200 4457 constant-Q second order peaking equalizer section;
#X obj 30 4484 flt.eq_peak~;
#X text 200 4484 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4539 flt.highshelf~;
#X text 200 4539 gain boost|cut above some frequency;
#X obj 30 4566 flt.hpf12~;
#X text 200 4566 High-pass filter with 12/db per octave slope;
#X obj 30 4593 flt.hpf24~;
#X text 200 4593 High-pass filter with 24/db per octave slope;
#X obj 30 4620 flt.lowshelf~;
#X text 200 4620 gain boost|cut below some frequency;
#X obj 30 4647 flt.lpf12~;
#X text 200 4647 Low-pass filter with 12/db per octave slope;
#X obj 30 4674 flt.lpf24~;
#X text 200 4674 Low-pass filter with 24/db per octave slope;
#X obj 30 4701 flt.median;
#X text 200 4701 Median control flow filter;
#X obj 30 4728 flt.moog_vcf~;
#X text 200 4728 Moog Voltage Controlled Filter;
#X obj 30 4755 flt.notch~;
#X text 200 4755 band-rejection filter;
#X obj 30 4782 flt.resonbp~;
#X text 200 4782 Simple resonant bandpass filter;
#X obj 20 4809 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4850 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4861 fx.bitdown~;
#X text 200 4861 bit downer and downsampler effect;
#X obj 30 4888 fx.chorus~;
#X text 200 4888 Chorus effect;
#X obj 30 4915 fx.distortion1~;
#X text 200 4915 distortion #1 from Guitarix effects set;
#X obj 30 4942 fx.distortion2~;
#X text 200 4942 distortion #2 from Guitarix effects set;
#X obj 30 4969 fx.distortion3~;
#X text 200 4969 simple distortion #3 from Guitarix effects set;
#X obj 30 4996 fx.distortion~;
#X text 200 4996 cubic nonlinearity distortion;
#X obj 30 5023 fx.drive~;
#X text 200 5023 Guitarix drive effect;
#X obj 30 5050 fx.drone_box~;
#X text 200 5050 mono sympathetic resonance generator;
#X obj 30 5077 fx.echo~;
#X text 200 5077 simple echo effect;
#X obj 30 5104 fx.flanger~;
#X text 200 5104 mono flanging effect;
#X obj 30 5131 fx.freeverb2~;
#X text 200 5131 freeverb2 - stereo version of freeverb;
#X obj 30 5158 fx.freeverb~;
#X text 200 5158 freeverb - common used open-source reverb;
#X obj 30 5185 fx.freqshift~;
#X text 200 5185 frequency shifter or single-sideband ring modulation;
#X obj 30 5212 fx.granulator~;
#X text 200 5212 simple input stream granulator;
#X obj 30 5239 fx.greyhole~;
#X text 200 5239 A complex echo-like effect;
#X obj 30 5266 fx.looper~;
#X text 200 5266 One track looper;
#X obj 30 5293 fx.pitchshift~;
#X text 200 5293 simple pitch shifter based on 2 delay lines;
#X obj 30 5320 fx.sdelay~;
#X text 200 5320 smooth delay with a feedback control;
#X obj 30 5347 fx.vocoder~;
#X text 200 5347 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5387 fx.wahwah~;
#X text 200 5387 digitized CryBaby wah pedal;
#X obj 30 5414 fx.zita_rev1~;
#X text 200 5414 Zita stereo reverb;
#X obj 20 5441 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5482 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5493 global.dict;
#X text 200 5493 global named dict object;
#X obj 30 5520 global.float;
#X text 200 5520 global named float object;
#X obj 30 5547 global.int;
#X text 200 5547 global named integer object;
#X obj 30 5574 global.list;
#X text 200 5574 global named list object;
#X obj 30 5601 global.mlist;
#X text 200 5601 global named mlist object;
#X obj 30 5628 global.set;
#X text 200 5628 global named set object;
#X obj 20 5655 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5696 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5707 hw.apple_smc;
#X text 200 5707 query the system management control in Apples;
#X obj 30 5734 hw.apple_sms;
#X text 200 5734 query the sudden motion sensor in Apples;
#X obj 30 5761 hw.arduino;
#X text 200 5761 Arduino device;
#X obj 30 5788 hw.cpu_temp;
#X text 200 5788 get CPU temperature;
#X obj 30 5815 hw.display;
#X text 200 5815 get/set display properties;
#X obj 30 5842 hw.kbd_light;
#X text 200 5842 Get/set keyboard light on some devices;
#X obj 20 5869 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5910 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5921 lfo.+pulse~;
#X text 200 5921 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5948 lfo.+saw~;
#X text 200 5948 Positive unit-amplitude low frequency saw wave;
#X obj 30 5975 lfo.+square~;
#X text 200 5975 Positive low frequency square wave;
#X obj 30 6002 lfo.+tri~;
#X text 200 6002 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6029 lfo.impulse~;
#X text 200 6029 Unit-amplitude low-frequency impulse train;
#X obj 30 6056 lfo.pulse~;
#X text 200 6056 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6083 lfo.saw~;
#X text 200 6083 Full-range unit-amplitude low frequency saw;
#X obj 30 6110 lfo.square~;
#X text 200 6110 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6137 lfo.tri~;
#X text 200 6137 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6164 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6205 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6216 list.^at;
#X text 200 6216 on input index(es) outputs list element(s);
#X obj 30 6243 list.^contains;
#X text 200 6243 on input atom or list checks if specified list contains
it;
#X obj 30 6270 list.^search;
#X text 200 6270 on input atom returns it index in list;
#X obj 30 6297 list.all_of;
#X text 200 6297 checks if all list atoms accepted by predicate;
#X obj 30 6324 list.any_of;
#X text 200 6324 checks if at least one list element is accepted by
predicate;
#X obj 30 6351 list.append;
#X text 200 6351 append atom or list to the end of input list;
#X obj 30 6378 list.apply_to;
#X text 200 6378 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6418 list.at;
#X text 200 6418 on input list outputs element(s) at specified index(es);
#X obj 30 6445 list.choice;
#X text 200 6445 returns random element from list;
#X obj 30 6472 list.contains;
#X text 200 6472 on input list checks if it contains specified subsequence;
#X obj 30 6499 list.count;
#X text 200 6499 returns the number of items that equal to specified
value;
#X obj 30 6526 list.count_if;
#X text 200 6526 returns the number of items that satisfy to external
predicate.;
#X obj 30 6566 list.delta;
#X text 200 6566 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6606 list.distribution;
#X text 200 6606 list value distribution;
#X obj 30 6633 list.do;
#X text 200 6633 iterate and modify list contents via side-chain;
#X obj 30 6660 list.each;
#X text 200 6660 maps each list value via external object(s);
#X obj 30 6687 list.enumerate;
#X text 200 6687 enumerates input list;
#X obj 30 6714 list.equal;
#X text 200 6714 checks if given lists are equal;
#X obj 30 6741 list.first;
#X text 200 6741 returns first list element;
#X obj 30 6768 list.gen;
#X text 200 6768 generates list of specified length via external generator;
#X obj 30 6795 list.histogram;
#X text 200 6795 outputs distribution histogram;
#X obj 30 6822 list.insert;
#X text 200 6822 insert atom or list to the specified position of input
list;
#X obj 30 6849 list.integrator;
#X text 200 6849 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 6889 list.last;
#X text 200 6889 returns last list element;
#X obj 30 6916 list.length;
#X text 200 6916 returns the number of atoms in the list;
#X obj 30 6943 list.max;
#X text 200 6943 returns largest element in the list;
#X obj 30 6970 list.mean;
#X text 200 6970 calculates average of list of floats;
#X obj 30 6997 list.min;
#X text 200 6997 returns smallest element in the list;
#X obj 30 7024 list.none_of;
#X text 200 7024 checks if none of list atoms is accepted by predicate;
#X obj 30 7051 list.normalize;
#X text 200 7051 normalizes float list values to get their sum = 1.0;
#X obj 30 7078 list.pass_if;
#X text 200 7078 leave only elements accepted by predicate;
#X obj 30 7105 list.prepend;
#X text 200 7105 prepend atom or list before input list;
#X obj 30 7132 list.product;
#X text 200 7132 calculates product of floats in list;
#X obj 30 7159 list.range;
#X text 200 7159 returns list smallest and largest value;
#X obj 30 7186 list.reduce;
#X text 200 7186 apply function of two arguments cumulatively to the
list;
#X obj 30 7213 list.remove;
#X text 200 7213 on input list remove element(s) at specified positions;
#X obj 30 7240 list.remove_if;
#X text 200 7240 remove elements by predicate;
#X obj 30 7267 list.repack;
#X text 200 7267 repack input list to specified size;
#X obj 30 7294 list.repeat;
#X text 200 7294 creates new list by repeating given list specified
times;
#X obj 30 7321 list.resize;
#X text 200 7321 changes list size;
#X obj 30 7348 list.reverse;
#X text 200 7348 reverses the order of the elements in the list;
#X obj 30 7375 list.rldecode;
#X text 200 7375 Run-length list decoder (RLE);
#X obj 30 7402 list.rlencode;
#X text 200 7402 RLE (run-length encoding) for lists;
#X obj 30 7429 list.rotate;
#X text 200 7429 rotates list;
#X obj 30 7456 list.route;
#X text 200 7456 acts like [route] but for lists;
#X obj 30 7483 list.search;
#X text 200 7483 search specified items in input list;
#X obj 30 7510 list.separate;
#X text 200 7510 sends list elements one by one separately;
#X obj 30 7537 list.seq;
#X text 200 7537 numeric sequence list generator;
#X obj 30 7564 list.set;
#X text 200 7564 on input list set value at specified position;
#X obj 30 7591 list.shift;
#X text 200 7591 shifts the contents of the list with linear interpolation;
#X obj 30 7618 list.shuffle;
#X text 200 7618 randomly rearranges elements in list;
#X obj 30 7645 list.slice;
#X text 200 7645 extract sublist;
#X obj 30 7672 list.sort;
#X text 200 7672 sorts list values by ascending order;
#X obj 30 7699 list.sort_with;
#X text 200 7699 sort list with user defined side-chain;
#X obj 30 7726 list.split;
#X text 200 7726 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7766 list.stretch;
#X text 200 7766 stretches list - chenges its size with linear interpolation.;
#X obj 30 7793 list.sum;
#X text 200 7793 calculates sum of floats in list;
#X obj 30 7820 list.unique;
#X text 200 7820 removes duplicates from input list;
#X obj 30 7847 list.unpack;
#X text 200 7847 unpack list elements to separate outlets;
#X obj 30 7874 list.unzip;
#X text 200 7874 splits list to N lists \, each to separate output;
#X obj 30 7901 list.walk;
#X text 200 7901 Walks thru the list;
#X obj 30 7928 list.zip;
#X text 200 7928 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 7983 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8024 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8035 live.capture~;
#X text 200 8035 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8075 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8116 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8127 local.dict;
#X text 200 8127 local named dict object;
#X obj 30 8154 local.float;
#X text 200 8154 canvas-scoped named float variable;
#X obj 30 8181 local.int;
#X text 200 8181 canvas-scoped named integer variable;
#X obj 30 8208 local.list;
#X text 200 8208 local named list object;
#X obj 30 8235 local.mlist;
#X text 200 8235 local named mlist object;
#X obj 30 8262 local.set;
#X text 200 8262 local named set object;
#X obj 20 8289 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8330 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8341 math.abs;
#X text 200 8341 absolute value function;
#X obj 30 8368 math.acos;
#X text 200 8368 arc cosine function;
#X obj 30 8395 math.acosh;
#X text 200 8395 inverse hyperbolic cosine function;
#X obj 30 8422 math.and;
#X text 200 8422 operation AND for multiple arguments;
#X obj 30 8449 math.approx;
#X text 200 8449 check if input value approximately equal to pattern;
#X obj 30 8476 math.asin;
#X text 200 8476 arc sine function;
#X obj 30 8503 math.asinh;
#X text 200 8503 inverse hyperbolic sine function;
#X obj 30 8530 math.atan;
#X text 200 8530 arc tangent function;
#X obj 30 8557 math.atanh;
#X text 200 8557 inverse hyperbolic tangent function;
#X obj 30 8584 math.cbrt;
#X text 200 8584 cube root function;
#X obj 30 8611 math.cdiv~;
#X text 200 8611 division of complex signals;
#X obj 30 8638 math.ceil;
#X text 200 8638 round to smallest integral value not less than input
value;
#X obj 30 8665 math.cmul~;
#X text 200 8665 multiplication of complex signals;
#X obj 30 8692 math.cos;
#X text 200 8692 cosine function;
#X obj 30 8719 math.cosh;
#X text 200 8719 hyperbolic cosine function;
#X obj 30 8746 math.div;
#X text 200 8746 division (on lists too);
#X obj 30 8773 math.e;
#X text 200 8773 mathematical constant \, base of the natural logarithm;
#X obj 30 8800 math.exp;
#X text 200 8800 exponential functions;
#X obj 30 8827 math.exp2;
#X text 200 8827 exponential functions;
#X obj 30 8854 math.expr;
#X text 200 8854 dynamic [expr];
#X obj 30 8881 math.floor;
#X text 200 8881 round to largest integral value not greater than x;
#X obj 30 8908 math.gcd;
#X text 200 8908 calculate greatest common divisor;
#X obj 30 8935 math.inf;
#X text 200 8935 infinity value that cannot be represented accurately;
#X obj 30 8962 math.lcm;
#X text 200 8962 calculate least common multiple;
#X obj 30 8989 math.log;
#X text 200 8989 logarithm functions;
#X obj 30 9016 math.log10;
#X text 200 9016 logarithm functions;
#X obj 30 9043 math.log2;
#X text 200 9043 logarithm functions;
#X obj 30 9070 math.mul;
#X text 200 9070 multiplication (on lists too);
#X obj 30 9097 math.nan;
#X text 200 9097 Not a Number \, unrepresentable value;
#X obj 30 9124 math.neg;
#X text 200 9124 negate function;
#X obj 30 9151 math.or;
#X text 200 9151 operation OR for multiple arguments;
#X obj 30 9178 math.pi;
#X text 200 9178 mathematical constant;
#X obj 30 9205 math.polyeval;
#X text 200 9205 evaluates the polynomial described by the coefficients
list;
#X obj 30 9232 math.reciprocal;
#X text 200 9232 calculate reciprocal number;
#X obj 30 9259 math.round;
#X text 200 9259 round to integral value \, regardless of rounding
direction;
#X obj 30 9286 math.round~;
#X text 200 9286 signal round;
#X obj 30 9313 math.sign;
#X text 200 9313 sign function;
#X obj 30 9340 math.sin;
#X text 200 9340 sine function;
#X obj 30 9367 math.sinh;
#X text 200 9367 hyperbolic sine function;
#X obj 30 9394 math.sqrt;
#X text 200 9394 square root function;
#X obj 30 9421 math.squared;
#X text 200 9421 value square;
#X obj 30 9448 math.tan;
#X text 200 9448 tangent function;
#X obj 30 9475 math.tanh;
#X text 200 9475 hyperbolic tangent function;
#X obj 30 9502 math.trunc;
#X text 200 9502 truncate to integer value;
#X obj 20 9529 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 9570 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9581 midi.ctl2str;
#X text 200 9581 convert Standard MIDI Controllers number to name;
#X obj 30 9608 midi.event2ctl;
#X text 200 9608 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9635 midi.event2note;
#X text 200 9635 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9662 midi.event2prg;
#X text 200 9662 convert MidiEvent message to midi program change value;
#X obj 30 9689 midi.file;
#X text 200 9689 standard midi file SMF reader and writer;
#X obj 30 9716 midi.key2str;
#X text 200 9716 convert key number to SPN name according to tonality;
#X obj 30 9743 midi.prg2str;
#X text 200 9743 convert GM Instrument number to name (string or symbol);
#X obj 30 9770 midi.track;
#X text 200 9770 extract track from MidiFile;
#X obj 20 9797 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9838 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9849 click~;
#X text 200 9849 Output single impulse on bang;
#X obj 30 9876 fluid~;
#X text 200 9876 FluidSynth SoundFont 2 player;
#X obj 30 9903 modplug~;
#X text 200 9903 MOD file player (using libmodplug);
#X obj 30 9930 speech.flite;
#X text 200 9930 render speech to array;
#X obj 20 9957 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9998 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10009 msg;
#X text 200 10009 message constructor;
#X obj 30 10036 msg.after;
#X text 200 10036 send specified message after incoming message;
#X obj 30 10063 msg.onload;
#X text 200 10063 send message when patch loads;
#X obj 20 10090 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 10131 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10142 net.host2ip;
#X text 200 10142 returns IP address by DNS name;
#X obj 20 10169 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 10210 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10221 noise.crackle~;
#X text 200 10221 sparse noise generator;
#X obj 30 10248 noise.lfreq0~;
#X text 200 10248 sampled/held noise (piecewise constant);
#X obj 30 10275 noise.lfreq~;
#X text 200 10275 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10302 noise.pink~;
#X text 200 10302 Pink noise generator;
#X obj 30 10329 noise.white~;
#X text 200 10329 White noise generator;
#X obj 20 10356 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10397 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10408 osc.blit~;
#X text 200 10408 Bandlimited impulse train oscillator;
#X obj 30 10435 osc.impulse~;
#X text 200 10435 Bandlimited impulse train generator;
#X obj 30 10462 osc.pulse~;
#X text 200 10462 Bandlimited pulse train oscillator;
#X obj 30 10489 osc.saw4~;
#X text 200 10489 Bandlimited sawtooth wave;
#X obj 30 10516 osc.saw~;
#X text 200 10516 Alias-free sawtooth wave;
#X obj 30 10543 osc.sinfb~;
#X text 200 10543 Sine oscilator with feedback;
#X obj 30 10570 osc.sin~;
#X text 200 10570 Sine wave oscillator;
#X obj 30 10597 osc.square~;
#X text 200 10597 Bandlimited square wave oscillator;
#X obj 30 10624 osc.tri~;
#X text 200 10624 Bandlimited triangle wave oscillator;
#X obj 20 10651 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10692 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10703 canvas.current;
#X text 200 10703 verbose information about current canvas;
#X obj 30 10730 canvas.dir;
#X text 200 10730 current canvas directory;
#X obj 30 10757 canvas.name;
#X text 200 10757 current canvas name;
#X obj 30 10784 canvas.path;
#X text 200 10784 current canvas fullpath;
#X obj 30 10811 canvas.top;
#X text 200 10811 verbose information about top-level canvas;
#X obj 30 10838 patch.args;
#X text 200 10838 Get patch or subpatch arguments;
#X obj 20 10865 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10906 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10917 path.basename;
#X text 200 10917 outputs filename portion of pathname;
#X obj 30 10944 path.dirname;
#X text 200 10944 outputs directory portion of pathname;
#X obj 30 10971 path.exists;
#X text 200 10971 checks if given path exists;
#X obj 30 10998 path.lsdir;
#X text 200 10998 list directory contents;
#X obj 20 11025 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 11066 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11077 is_any;
#X text 200 11077 checks if input data has *any* type;
#X obj 30 11104 is_bang;
#X text 200 11104 checks if input data has *bang* type;
#X obj 30 11131 is_data;
#X text 200 11131 checks if input data has *data* type;
#X obj 30 11158 is_dict;
#X text 200 11158 checks if input data has *dict* type;
#X obj 30 11185 is_even;
#X text 200 11185 checks if input number is even;
#X obj 30 11212 is_file;
#X text 200 11212 checks if file exists and accessible;
#X obj 30 11239 is_float;
#X text 200 11239 checks if input data has *float* type;
#X obj 30 11266 is_list;
#X text 200 11266 checks if input data has *list* type;
#X obj 30 11293 is_odd;
#X text 200 11293 checks if input number is odd;
#X obj 30 11320 is_pointer;
#X text 200 11320 checks if input data has *pointer* type;
#X obj 30 11347 is_symbol;
#X text 200 11347 checks if input data has *symbol* type;
#X obj 20 11374 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11415 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11426 preset.float;
#X text 200 11426 load/store float preset;
#X obj 30 11453 preset.list;
#X text 200 11453 load/store symbol preset;
#X obj 30 11480 preset.storage;
#X text 200 11480 preset storage control;
#X obj 30 11507 preset.symbol;
#X text 200 11507 load/store symbol preset;
#X obj 20 11534 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 11575 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11586 patch.props;
#X text 200 11586 patch properties manager;
#X obj 30 11613 prop;
#X text 200 11613 get/set named property value for subpatch or abstraction;
#X obj 30 11640 prop.declare;
#X text 200 11640 declare named property for subpatch or abstraction;
#X obj 30 11667 prop.get;
#X text 200 11667 Property extractor;
#X obj 30 11694 prop.get~;
#X text 200 11694 Property extractor from sound stream;
#X obj 30 11721 prop.set;
#X text 200 11721 Property injector;
#X obj 20 11748 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11789 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11800 proto.firmata;
#X text 200 11800 Firmata Arduino protocol support;
#X obj 30 11827 proto.sp.alpaca;
#X text 200 11827 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 11854 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11895 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11906 random.discrete;
#X text 200 11906 random weighted integers on interval [0 \, n);
#X obj 30 11933 random.float;
#X text 200 11933 random float generator in specified range;
#X obj 30 11960 random.gauss;
#X text 200 11960 gaussian random distribution;
#X obj 30 11987 random.int;
#X text 200 11987 Random integer generator in specified range;
#X obj 30 12014 random.linear;
#X text 200 12014 random linear distribution;
#X obj 30 12041 random.pw_const;
#X text 200 12041 piecewise constant random distribution;
#X obj 30 12068 random.pw_lin;
#X text 200 12068 piecewise linear random distribution;
#X obj 20 12095 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 12136 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12147 snd.file;
#X text 200 12147 Sound file loader on steroids;
#X obj 20 12174 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 12215 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12226 hoa.2d.decoder~;
#X text 200 12226 hoa 2d decoder;
#X obj 30 12253 hoa.2d.encoder~;
#X text 200 12253 hoa 2d encoder;
#X obj 30 12280 hoa.2d.map~;
#X text 200 12280 a 2d ambisonic multisource spatializer;
#X obj 30 12307 hoa.2d.optim~;
#X text 200 12307 a 2D ambisonic optimization tool;
#X obj 30 12334 hoa.2d.projector~;
#X text 200 12334 a plane waves decomposer from circular harmonics
domain;
#X obj 30 12361 hoa.2d.recomposer~;
#X text 200 12361 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 12401 hoa.2d.rotate~;
#X text 200 12401 a 2D ambisonic sound field rotation;
#X obj 30 12428 hoa.2d.wider~;
#X text 200 12428 a 2d fractional ambisonic order simulator;
#X obj 30 12455 hoa.process~;
#X text 200 12455 patcher loader for multichannel processing;
#X obj 30 12482 pan.cos~;
#X text 200 12482 two channel equal power sine/cosine panner;
#X obj 30 12509 pan.linsig~;
#X text 200 12509 two channel linear panner with signal control;
#X obj 30 12536 pan.lin~;
#X text 200 12536 two channel linear panner;
#X obj 30 12563 pan.spread~;
#X text 200 12563 spreads input channels across the stereo field;
#X obj 30 12590 pan.sqrt~;
#X text 200 12590 two channel equal power square root panner;
#X obj 30 12617 spat.pan4~;
#X text 200 12617 GMEM SPAT: 4-outputs spatializer;
#X obj 30 12644 spat.pan8~;
#X text 200 12644 GMEM SPAT: 8-outputs spatializer;
#X obj 20 12671 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 12712 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12723 string;
#X text 200 12723 string constructor;
#X obj 30 12750 string.contains;
#X text 200 12750 checks if given string contains specified substring;
#X obj 30 12777 string.ends_with;
#X text 200 12777 checks if given string ends with specified suffix;
#X obj 30 12804 string.equal;
#X text 200 12804 check strings for equality;
#X obj 30 12831 string.format;
#X text 200 12831 formats string like printf.;
#X obj 30 12858 string.join;
#X text 200 12858 joins (concatenates) strings with separator;
#X obj 30 12885 string.length;
#X text 200 12885 number of characters in string (unicode supported);
#X obj 30 12912 string.match;
#X text 200 12912 check if string match regular expression;
#X obj 30 12939 string.remove;
#X text 200 12939 remove substring from input string;
#X obj 30 12966 string.replace;
#X text 200 12966 replace from one substring to another in input string;
#X obj 30 12993 string.split;
#X text 200 12993 split string by separator;
#X obj 30 13020 string.starts_with;
#X text 200 13020 checks if given string starts with specified prefix;
#X obj 30 13047 string.substr;
#X text 200 13047 extract substring from input string;
#X obj 30 13074 string2symbol;
#X text 200 13074 converts string to symbol;
#X obj 20 13101 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 13142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13153 symbol.equal;
#X text 200 13153 check symbols for equality;
#X obj 30 13180 symbol.length;
#X text 200 13180 number of characters in symbol (unicode supported);
#X obj 30 13207 symbol.num_compare;
#X text 200 13207 numeric symbol compare;
#X obj 20 13234 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 13275 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13286 synth.bee3~;
#X text 200 13286 Hammond-oid organ FM synthesis instrument;
#X obj 30 13313 synth.birds~;
#X text 200 13313 bird singing generator;
#X obj 30 13340 synth.church_bell~;
#X text 200 13340 generic church bell modal model;
#X obj 30 13367 synth.dubdub~;
#X text 200 13367 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 13407 synth.eguitar~;
#X text 200 13407 simple electric guitar model with steel strings;
#X obj 30 13434 synth.fgrain~;
#X text 200 13434 file granulator from STK;
#X obj 30 13461 synth.ks~;
#X text 200 13461 Karplus-Strong string;
#X obj 30 13488 synth.marimba~;
#X text 200 13488 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 13528 synth.rhodey~;
#X text 200 13528 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 13555 synth.risset_arp~;
#X text 200 13555 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 13582 synth.risset_tone~;
#X text 200 13582 Jean Claude Risset's endless glissando;
#X obj 30 13609 synth.shakers~;
#X text 200 13609 various percussion sounds from STK library;
#X obj 30 13636 synth.wurley~;
#X text 200 13636 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 13663 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 13704 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13715 system.cursor;
#X text 200 13715 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 13755 system.getenv;
#X text 200 13755 Get system environment variables;
#X obj 30 13782 system.hostname;
#X text 200 13782 outputs system hostname;
#X obj 30 13809 system.memsize;
#X text 200 13809 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 13849 system.memused;
#X text 200 13849 returns the process physical memory use - current
and peak;
#X obj 30 13876 system.screen_size;
#X text 200 13876 returns current screen size in pixels;
#X obj 30 13903 system.shell;
#X text 200 13903 run external command in separate process;
#X obj 20 13930 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 13971 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13982 tl.bang;
#X text 200 13982 Timeline bang (with possible delay);
#X obj 30 14012 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 14009 Timeline section;
#X obj 30 14034 tl.timeline;
#X text 200 14034 Timeline - event scheduler;
#X obj 30 14061 tl.toggle;
#X text 200 14061 Timeline bang;
#X obj 30 14088 tl.transport;
#X text 200 14088 Timeline transport control;
#X obj 20 14115 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 14156 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14170 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 14167 array view with cursor and selection;
#X obj 30 14195 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 14192 A bang... that's all;
#X obj 30 14220 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 14217 colorchooser widget;
#X obj 30 14245 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 14242 Display GUI object;
#X obj 30 14270 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 14267 GUI for turning DSP on/off;
#X obj 30 14295 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 14292 envelope editor widget;
#X obj 30 14320 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 14317 UI stereo gain control;
#X obj 30 14345 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 14342 UI gain control;
#X obj 30 14370 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 14367 simple icon with button capabilities;
#X obj 30 14395 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 14392 value increment/decrement;
#X obj 30 14420 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 14417 keyboard widget;
#X obj 30 14445 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 14442 knob widget;
#X obj 30 14470 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 14467 simple label widget;
#X obj 30 14495 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 14492 Hyperlink widget;
#X obj 30 14520 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 14517 The matrix of toggles has you.;
#X obj 30 14545 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 14542 Dropdown menu;
#X obj 30 14570 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 14567 Shows peak and rms signal level;
#X obj 30 14595 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 14592 counterpart of the vanilla [nbx];
#X obj 30 14620 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 14617 counterpart of the vanilla [nbx] for signal;
#X obj 30 14645 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 14642 Preset manager;
#X obj 30 14670 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 14667 counterpart of the vanilla radio toggle;
#X obj 30 14695 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 14692 range slider;
#X obj 30 14720 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 14717 Scope GUI object;
#X obj 30 14745 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 14742 counterpart of the vanilla slider;
#X obj 30 14770 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 14767 2D slider widget;
#X obj 30 14795 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 14792 Multiple slider widget;
#X obj 30 14820 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 14817 Spectroscope GUI object;
#X obj 30 14845 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 14842 displays a list of text buttons or text toggles;
#X obj 30 14870 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 14867 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 14892 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 14892 version: v0.7.1 \, license: GPL3;
#X obj 20 14913 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;