#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.pitchtrack~;
#X text 200 157 pitch tracker;
#X obj 20 184 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 225 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 236 array.bpm;
#X text 200 236 BPM calculator;
#X obj 30 263 array.copy;
#X text 200 263 copy samples from one array to another;
#X obj 30 290 array.do;
#X text 200 290 iterate and modify array content via side-chain;
#X obj 30 317 array.each;
#X text 200 317 process each array elements via side-chain;
#X obj 30 344 array.fill;
#X text 200 344 fill array with single value or pattern;
#X obj 30 371 array.hist;
#X text 200 371 calculates array histogram;
#X obj 30 398 array.mean;
#X text 200 398 calculates array arithmetic mean value;
#X obj 30 425 array.minmax;
#X text 200 425 find array min and max element value;
#X obj 30 452 array.rms;
#X text 200 452 calculates root mean square value for array;
#X obj 30 479 array.set;
#X text 200 479 set array content from list;
#X obj 30 506 array.stddev;
#X text 200 506 calculates standard deviation for array values;
#X obj 30 533 array.stretch;
#X text 200 533 array time-stretch \, pitch-shift or rate-change;
#X obj 30 560 array.sum;
#X text 200 560 calculates sum of array elements;
#X obj 30 587 array.sum2;
#X text 200 587 calculates sum of squares of array elements;
#X obj 30 614 array.variance;
#X text 200 614 calculates variance of array values;
#X obj 30 641 array.vplay;
#X text 200 641 simple array player for using with vline~;
#X obj 30 668 array.window;
#X text 200 668 fill array with window;
#X obj 20 695 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 736 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 750 ui.link @title [function] @url function-help.pd;
#X text 200 747 named function;
#X obj 30 772 function.call;
#X text 200 772 call named function;
#X obj 30 799 gain~;
#X text 200 799 multislot signal gain;
#X obj 30 826 matrix~;
#X text 200 826 signal routing matrix;
#X obj 30 853 metro.pattern;
#X text 200 853 metro with rhythmic patterns;
#X obj 30 880 metro.seq;
#X text 200 880 metro sequencer;
#X obj 30 907 mix~;
#X text 200 907 multislot signal mixer;
#X obj 30 934 obj.props;
#X text 200 934 property extractor;
#X obj 30 961 radio;
#X text 200 961 float index to outlet values as radio switch;
#X obj 30 988 window;
#X text 200 988 returns window value by given window position;
#X obj 30 1015 xdac~;
#X text 200 1015 dac~ with channel ranges;
#X obj 30 1042 xfade2~;
#X text 200 1042 multi stereo-signal crossfade;
#X obj 30 1069 xfade~;
#X text 200 1069 multi signal crossfade;
#X obj 20 1096 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1137 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1148 array.p2s;
#X text 200 1148 convert array phase [0\..1] to sample position;
#X obj 30 1175 array.s2p;
#X text 200 1175 convert array sample position to relative phase position
[0\..1];
#X obj 30 1215 conv.amp2dbfs;
#X text 200 1215 convert from amplitude to decibel full scale;
#X obj 30 1242 conv.bpm2hz;
#X text 200 1242 converts BPM to frequency in herz;
#X obj 30 1269 conv.bpm2ms;
#X text 200 1269 convert frequency in BPM to period in milliseconds;
#X obj 30 1296 conv.bpm2sec;
#X text 200 1296 convert frequency in BPM to period in seconds;
#X obj 30 1323 conv.car2pol;
#X text 200 1323 convert cartesian coords to polar;
#X obj 30 1350 conv.cc2amp;
#X text 200 1350 convert from MIDI Control Change range;
#X obj 30 1377 conv.dbfs2amp;
#X text 200 1377 convert decibel full scale to amplitude;
#X obj 30 1404 conv.lin2curve;
#X text 200 1404 map linear to exponential range with 0 allowed.;
#X obj 30 1431 conv.lin2exp;
#X text 200 1431 maps linear range to exponential range;
#X obj 30 1458 conv.lin2lin;
#X text 200 1458 convert from one linear range to another;
#X obj 30 1485 conv.list2props;
#X text 200 1485 converts list to series of property messages;
#X obj 30 1512 conv.midi2freq;
#X text 200 1512 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 1552 conv.phase2rad;
#X text 200 1552 convert phase value [0-1] to radians;
#X obj 30 1579 conv.phase2rad~;
#X text 200 1579 convert phase value [0-1] to radians;
#X obj 30 1606 conv.pitch2midi;
#X text 200 1606 converts symbol pitch name to MIDI note number;
#X obj 30 1633 conv.pol2car;
#X text 200 1633 convert from polar coordinates to cartesian;
#X obj 30 1660 conv.rad2phase;
#X text 200 1660 convert radians value to phase;
#X obj 30 1687 conv.rad2phase~;
#X text 200 1687 convert radians value to phase;
#X obj 30 1714 conv.samp2sec;
#X text 200 1714 convert samples to time according to samplerate;
#X obj 30 1741 conv.sec2samp;
#X text 200 1741 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 1781 conv.sec2str;
#X text 200 1781 converts float time in seconds to formated symbol
(or string);
#X obj 30 1808 conv.str2sec;
#X text 200 1808 converts formatted time to float value in seconds;
#X obj 20 1835 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1876 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1887 data.dict;
#X text 200 1887 dictionary container: store values by key;
#X obj 30 1914 data.fifo;
#X text 200 1914 First-In-First-Out (FIFO) queue data container;
#X obj 30 1941 data.float;
#X text 200 1941 robust float object;
#X obj 30 1968 data.int;
#X text 200 1968 robust int object;
#X obj 30 1995 data.list;
#X text 200 1995 list container;
#X obj 30 2022 data.mlist;
#X text 200 2022 multidimensional list container;
#X obj 30 2049 data.set;
#X text 200 2049 container that store unique elements;
#X obj 30 2076 data.set2list;
#X text 200 2076 converts set to list;
#X obj 30 2103 data.tree;
#X text 200 2103 JSON like structure for storing values \, with parenthesis
instead of curly braces;
#X obj 30 2143 dict.contains;
#X text 200 2143 predicate to check dict contains key;
#X obj 30 2170 dict.each;
#X text 200 2170 map each value in dict;
#X obj 30 2197 dict.from_list;
#X text 200 2197 creates dictionary from list;
#X obj 30 2224 dict.get;
#X text 200 2224 on input dict outputs value to corresponding key outlet;
#X obj 30 2251 dict.keys;
#X text 200 2251 get list of dict keys;
#X obj 30 2278 dict.pass;
#X text 200 2278 passes specified keys in dict;
#X obj 30 2305 dict.reject;
#X text 200 2305 rejects specified keys from dict;
#X obj 30 2332 dict.size;
#X text 200 2332 dictionary size;
#X obj 30 2359 dict.to_list;
#X text 200 2359 converts dictionary to plain list;
#X obj 30 2386 dict.values;
#X text 200 2386 dictionary values as mlist;
#X obj 30 2413 mlist.flatten;
#X text 200 2413 flatten nested mlist;
#X obj 30 2440 set.contains;
#X text 200 2440 check if specified element is in set;
#X obj 30 2467 set.diff;
#X text 200 2467 difference between two sets;
#X obj 30 2494 set.equal;
#X text 200 2494 checks if two sets are equal (contains same elements);
#X obj 30 2521 set.intersect;
#X text 200 2521 output intersection of given sets;
#X obj 30 2548 set.size;
#X text 200 2548 get number of elements in set;
#X obj 30 2575 set.symdiff;
#X text 200 2575 symmetric difference between two sets;
#X obj 30 2602 set.union;
#X text 200 2602 output union of given sets;
#X obj 30 2629 tree.float;
#X text 200 2629 convert tree node to float value;
#X obj 30 2656 tree.symbol;
#X text 200 2656 convert tree node to symbol value;
#X obj 20 2683 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2724 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2735 dyn.comp2~;
#X text 200 2735 stereo dynamic range compressor;
#X obj 30 2762 dyn.comp~;
#X text 200 2762 mono dynamic range compressors;
#X obj 30 2789 dyn.gate2~;
#X text 200 2789 stereo signal gate;
#X obj 30 2816 dyn.gate~;
#X text 200 2816 mono signal gate;
#X obj 30 2843 dyn.limit2~;
#X text 200 2843 stereo 1176LN Peak Limiter;
#X obj 30 2870 dyn.limit~;
#X text 200 2870 mono 1176LN Peak Limiter;
#X obj 30 2897 dyn.softclip~;
#X text 200 2897 soft signal clip;
#X obj 20 2924 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2965 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2976 env.adsr~;
#X text 200 2976 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3003 env.ar~;
#X text 200 3003 Attack/Release envelope generator;
#X obj 30 3030 env.asr~;
#X text 200 3030 Attack/Sustain/Release envelope generator;
#X obj 30 3057 env.concat;
#X text 200 3057 Envelope concatenation;
#X obj 30 3084 env.follow~;
#X text 200 3084 Envelope follower with independent attack and release
times;
#X obj 30 3111 env.mix;
#X text 200 3111 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3151 env.smooth~;
#X text 200 3151 An envelope with an exponential attack and release;
#X obj 30 3178 env.tscale;
#X text 200 3178 Envelope time-scale;
#X obj 30 3205 env.tshift;
#X text 200 3205 Envelope time-shift (horizontal);
#X obj 30 3232 env.vscale;
#X text 200 3232 Envelope value-scale;
#X obj 30 3259 env2array;
#X text 200 3259 Renders envelope to specified array;
#X obj 30 3286 env2vline;
#X text 200 3286 Converts envelope to bunch of vline messages;
#X obj 30 3313 envelope;
#X text 200 3313 Envelope data type;
#X obj 30 3340 vline2env;
#X text 200 3340 Converts vline messages to env;
#X obj 20 3367 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 3408 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3419 expand_env;
#X text 200 3419 Substitute enviroment variables in data stream;
#X obj 30 3446 flow.append;
#X text 200 3446 inject message into flow;
#X obj 30 3473 flow.change;
#X text 200 3473 rejects redundant input values;
#X obj 30 3500 flow.count;
#X text 200 3500 control flow event counter;
#X obj 30 3527 flow.demultiplex;
#X text 200 3527 control flow demultiplexer;
#X obj 30 3554 flow.demultiplex2~;
#X text 200 3554 audio stream stereo demultiplexer;
#X obj 30 3581 flow.demultiplex~;
#X text 200 3581 audio stream demultiplexer;
#X obj 30 3608 flow.gate;
#X text 200 3608 control flow gate. [spigot] analog;
#X obj 30 3635 flow.greater;
#X text 200 3635 numeric stream router;
#X obj 30 3662 flow.group;
#X text 200 3662 group data atoms in list of specified size;
#X obj 30 3689 flow.interval;
#X text 200 3689 measure time between flow events;
#X obj 30 3716 flow.less;
#X text 200 3716 numeric stream router \, like many [moses];
#X obj 30 3743 flow.less_eq;
#X text 200 3743 numeric stream router \, like many [moses];
#X obj 30 3770 flow.match;
#X text 200 3770 route data flow by regexp match;
#X obj 30 3797 flow.multiplex;
#X text 200 3797 control flow multiplexer;
#X obj 30 3824 flow.multiplex2~;
#X text 200 3824 audio stream stereo multiplexer;
#X obj 30 3851 flow.multiplex~;
#X text 200 3851 audio stream multiplexer;
#X obj 30 3878 flow.once;
#X text 200 3878 one message pass thru;
#X obj 30 3905 flow.pack;
#X text 200 3905 flow pack;
#X obj 30 3932 flow.pass;
#X text 200 3932 pass specified values;
#X obj 30 3959 flow.pass_if;
#X text 200 3959 pass values that accepted by predicate object;
#X obj 30 3986 flow.reject;
#X text 200 3986 reject specified values;
#X obj 30 4013 flow.reject_if;
#X text 200 4013 reject values by predicate;
#X obj 30 4040 flow.route;
#X text 200 4040 advanced message router;
#X obj 30 4067 flow.speedlim;
#X text 200 4067 control stream speed limiter;
#X obj 30 4094 flow.split;
#X text 200 4094 split data flow by external side-chain predicate;
#X obj 30 4121 flow.sync;
#X text 200 4121 bus with only hot inlets;
#X obj 30 4148 flow.sync_pack;
#X text 200 4148 flow pack with all hot inlets;
#X obj 30 4175 flow.tee~;
#X text 200 4175 separate audio and control streams;
#X obj 30 4202 replace;
#X text 200 4202 Replace atoms in data stream;
#X obj 20 4229 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4270 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4281 flt.biquad~;
#X text 200 4281 second order IIR filter.;
#X obj 30 4308 flt.bpf12~;
#X text 200 4308 Band-pass filter with 12/db per octave slope;
#X obj 30 4335 flt.bpf24~;
#X text 200 4335 Band-pass filter with 24/db per octave slope;
#X obj 30 4362 flt.c_bpf~;
#X text 200 4362 BPF coefficient calculator for biquad filter;
#X obj 30 4389 flt.c_highshelf~;
#X text 200 4389 Highshelf filter coefficient calculator for biquad;
#X obj 30 4416 flt.c_hpf~;
#X text 200 4416 HPF coefficient calculator for biquad filter;
#X obj 30 4443 flt.c_lowshelf~;
#X text 200 4443 Lowshelf filter coefficient calculator for biquad;
#X obj 30 4470 flt.c_lpf~;
#X text 200 4470 LPF coefficient calculator for biquad filter;
#X obj 30 4497 flt.c_notch~;
#X text 200 4497 Band-reject coefficient calculator for biquad filter;
#X obj 30 4524 flt.c_peak~;
#X text 200 4524 Peaking equalizer calculator for biquad;
#X obj 30 4551 flt.dcblock2~;
#X text 200 4551 stereo DC blocker;
#X obj 30 4578 flt.dcblock~;
#X text 200 4578 mono DC blocker;
#X obj 30 4605 flt.eq10~;
#X text 200 4605 graphic 10 band equalizer;
#X obj 30 4632 flt.eq_peak_cq~;
#X text 200 4632 constant-Q second order peaking equalizer section;
#X obj 30 4659 flt.eq_peak~;
#X text 200 4659 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 4714 flt.highshelf~;
#X text 200 4714 gain boost|cut above some frequency;
#X obj 30 4741 flt.hpf12~;
#X text 200 4741 High-pass filter with 12/db per octave slope;
#X obj 30 4768 flt.hpf24~;
#X text 200 4768 High-pass filter with 24/db per octave slope;
#X obj 30 4795 flt.lowshelf~;
#X text 200 4795 gain boost|cut below some frequency;
#X obj 30 4822 flt.lpf12~;
#X text 200 4822 Low-pass filter with 12/db per octave slope;
#X obj 30 4849 flt.lpf24~;
#X text 200 4849 Low-pass filter with 24/db per octave slope;
#X obj 30 4876 flt.median;
#X text 200 4876 Median control flow filter;
#X obj 30 4903 flt.moog_vcf~;
#X text 200 4903 Moog Voltage Controlled Filter;
#X obj 30 4930 flt.notch~;
#X text 200 4930 band-rejection filter;
#X obj 30 4957 flt.resonbp~;
#X text 200 4957 Simple resonant bandpass filter;
#X obj 20 4984 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5025 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5036 fx.bitdown~;
#X text 200 5036 bit downer and downsampler effect;
#X obj 30 5063 fx.chorus~;
#X text 200 5063 Chorus effect;
#X obj 30 5090 fx.distortion1~;
#X text 200 5090 distortion #1 from Guitarix effects set;
#X obj 30 5117 fx.distortion2~;
#X text 200 5117 distortion #2 from Guitarix effects set;
#X obj 30 5144 fx.distortion3~;
#X text 200 5144 simple distortion #3 from Guitarix effects set;
#X obj 30 5171 fx.distortion~;
#X text 200 5171 cubic nonlinearity distortion;
#X obj 30 5198 fx.drive~;
#X text 200 5198 Guitarix drive effect;
#X obj 30 5225 fx.drone_box~;
#X text 200 5225 mono sympathetic resonance generator;
#X obj 30 5252 fx.echo~;
#X text 200 5252 simple echo effect;
#X obj 30 5279 fx.flanger~;
#X text 200 5279 mono flanging effect;
#X obj 30 5306 fx.freeverb2~;
#X text 200 5306 freeverb2 - stereo version of freeverb;
#X obj 30 5333 fx.freeverb~;
#X text 200 5333 freeverb - common used open-source reverb;
#X obj 30 5360 fx.freqshift~;
#X text 200 5360 frequency shifter or single-sideband ring modulation;
#X obj 30 5387 fx.granulator~;
#X text 200 5387 simple input stream granulator;
#X obj 30 5414 fx.greyhole~;
#X text 200 5414 A complex echo-like effect;
#X obj 30 5441 fx.looper~;
#X text 200 5441 One track looper;
#X obj 30 5468 fx.pitchshift~;
#X text 200 5468 simple pitch shifter based on 2 delay lines;
#X obj 30 5495 fx.sdelay~;
#X text 200 5495 smooth delay with a feedback control;
#X obj 30 5522 fx.vocoder~;
#X text 200 5522 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 5562 fx.wahwah~;
#X text 200 5562 digitized CryBaby wah pedal;
#X obj 30 5589 fx.zita_rev1~;
#X text 200 5589 Zita stereo reverb;
#X obj 20 5616 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 5657 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5668 global.dict;
#X text 200 5668 global named dict object;
#X obj 30 5695 global.float;
#X text 200 5695 global named float object;
#X obj 30 5722 global.int;
#X text 200 5722 global named integer object;
#X obj 30 5749 global.list;
#X text 200 5749 global named list object;
#X obj 30 5776 global.mlist;
#X text 200 5776 global named mlist object;
#X obj 30 5803 global.set;
#X text 200 5803 global named set object;
#X obj 20 5830 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5871 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5882 hw.apple_smc;
#X text 200 5882 query the system management control in Apples;
#X obj 30 5909 hw.apple_sms;
#X text 200 5909 query the sudden motion sensor in Apples;
#X obj 30 5936 hw.arduino;
#X text 200 5936 Arduino device;
#X obj 30 5963 hw.cpu_temp;
#X text 200 5963 get CPU temperature;
#X obj 30 5990 hw.display;
#X text 200 5990 get/set display properties;
#X obj 30 6017 hw.kbd_light;
#X text 200 6017 Get/set keyboard light on some devices;
#X obj 20 6044 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6085 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6096 lfo.+pulse~;
#X text 200 6096 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6123 lfo.+saw~;
#X text 200 6123 Positive unit-amplitude low frequency saw wave;
#X obj 30 6150 lfo.+square~;
#X text 200 6150 Positive low frequency square wave;
#X obj 30 6177 lfo.+tri~;
#X text 200 6177 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6204 lfo.impulse~;
#X text 200 6204 Unit-amplitude low-frequency impulse train;
#X obj 30 6231 lfo.pulse~;
#X text 200 6231 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6258 lfo.saw~;
#X text 200 6258 Full-range unit-amplitude low frequency saw;
#X obj 30 6285 lfo.square~;
#X text 200 6285 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6312 lfo.tri~;
#X text 200 6312 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6339 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 6380 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6391 list.^at;
#X text 200 6391 on input index(es) outputs list element(s);
#X obj 30 6418 list.^contains;
#X text 200 6418 on input atom or list checks if specified list contains
it;
#X obj 30 6445 list.^search;
#X text 200 6445 on input atom returns it index in list;
#X obj 30 6472 list.all_of;
#X text 200 6472 checks if all list atoms accepted by predicate;
#X obj 30 6499 list.any_of;
#X text 200 6499 checks if at least one list element is accepted by
predicate;
#X obj 30 6526 list.append;
#X text 200 6526 append atom or list to the end of input list;
#X obj 30 6553 list.apply_to;
#X text 200 6553 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 6593 list.at;
#X text 200 6593 on input list outputs element(s) at specified index(es);
#X obj 30 6620 list.choice;
#X text 200 6620 returns random element from list;
#X obj 30 6647 list.contains;
#X text 200 6647 on input list checks if it contains specified subsequence;
#X obj 30 6674 list.count;
#X text 200 6674 returns the number of items that equal to specified
value;
#X obj 30 6701 list.count_if;
#X text 200 6701 returns the number of items that satisfy to external
predicate.;
#X obj 30 6741 list.delta;
#X text 200 6741 returns the difference between the current list of
floats and the previous one.;
#X obj 30 6781 list.distribution;
#X text 200 6781 list value distribution;
#X obj 30 6808 list.do;
#X text 200 6808 iterate and modify list contents via side-chain;
#X obj 30 6835 list.each;
#X text 200 6835 maps each list value via external object(s);
#X obj 30 6862 list.enumerate;
#X text 200 6862 enumerates input list;
#X obj 30 6889 list.equal;
#X text 200 6889 checks if given lists are equal;
#X obj 30 6916 list.first;
#X text 200 6916 returns first list element;
#X obj 30 6943 list.gen;
#X text 200 6943 generates list of specified length via external generator;
#X obj 30 6970 list.histogram;
#X text 200 6970 outputs distribution histogram;
#X obj 30 6997 list.insert;
#X text 200 6997 insert atom or list to the specified position of input
list;
#X obj 30 7024 list.integrator;
#X text 200 7024 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7064 list.last;
#X text 200 7064 returns last list element;
#X obj 30 7091 list.length;
#X text 200 7091 returns the number of atoms in the list;
#X obj 30 7118 list.max;
#X text 200 7118 returns largest element in the list;
#X obj 30 7145 list.mean;
#X text 200 7145 calculates average of list of floats;
#X obj 30 7172 list.min;
#X text 200 7172 returns smallest element in the list;
#X obj 30 7199 list.none_of;
#X text 200 7199 checks if none of list atoms is accepted by predicate;
#X obj 30 7226 list.normalize;
#X text 200 7226 normalizes float list values to get their sum = 1.0;
#X obj 30 7253 list.pass_if;
#X text 200 7253 leave only elements accepted by predicate;
#X obj 30 7280 list.prepend;
#X text 200 7280 prepend atom or list before input list;
#X obj 30 7307 list.product;
#X text 200 7307 calculates product of floats in list;
#X obj 30 7334 list.range;
#X text 200 7334 returns list smallest and largest value;
#X obj 30 7361 list.reduce;
#X text 200 7361 apply function of two arguments cumulatively to the
list;
#X obj 30 7388 list.remove;
#X text 200 7388 on input list remove element(s) at specified positions;
#X obj 30 7415 list.remove_if;
#X text 200 7415 remove elements by predicate;
#X obj 30 7442 list.repack;
#X text 200 7442 repack input list to specified size;
#X obj 30 7469 list.repeat;
#X text 200 7469 creates new list by repeating given list specified
times;
#X obj 30 7496 list.resize;
#X text 200 7496 changes list size;
#X obj 30 7523 list.reverse;
#X text 200 7523 reverses the order of the elements in the list;
#X obj 30 7550 list.rldecode;
#X text 200 7550 Run-length list decoder (RLE);
#X obj 30 7577 list.rlencode;
#X text 200 7577 RLE (run-length encoding) for lists;
#X obj 30 7604 list.rotate;
#X text 200 7604 rotates list;
#X obj 30 7631 list.route;
#X text 200 7631 acts like [route] but for lists;
#X obj 30 7658 list.search;
#X text 200 7658 search specified items in input list;
#X obj 30 7685 list.separate;
#X text 200 7685 sends list elements one by one separately;
#X obj 30 7712 list.seq;
#X text 200 7712 numeric sequence list generator;
#X obj 30 7739 list.set;
#X text 200 7739 on input list set value at specified position;
#X obj 30 7766 list.shift;
#X text 200 7766 shifts the contents of the list with linear interpolation;
#X obj 30 7793 list.shuffle;
#X text 200 7793 randomly rearranges elements in list;
#X obj 30 7820 list.slice;
#X text 200 7820 extract sublist;
#X obj 30 7847 list.sort;
#X text 200 7847 sorts list values by ascending order;
#X obj 30 7874 list.sort_with;
#X text 200 7874 sort list with user defined side-chain;
#X obj 30 7901 list.split;
#X text 200 7901 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7941 list.stretch;
#X text 200 7941 stretches list - chenges its size with linear interpolation.;
#X obj 30 7968 list.sum;
#X text 200 7968 calculates sum of floats in list;
#X obj 30 7995 list.unique;
#X text 200 7995 removes duplicates from input list;
#X obj 30 8022 list.unpack;
#X text 200 8022 unpack list elements to separate outlets;
#X obj 30 8049 list.unzip;
#X text 200 8049 splits list to N lists \, each to separate output;
#X obj 30 8076 list.walk;
#X text 200 8076 Walks thru the list;
#X obj 30 8103 list.zip;
#X text 200 8103 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8158 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8199 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8210 live.capture~;
#X text 200 8210 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8250 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8291 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8302 local.dict;
#X text 200 8302 local named dict object;
#X obj 30 8329 local.float;
#X text 200 8329 canvas-scoped named float variable;
#X obj 30 8356 local.int;
#X text 200 8356 canvas-scoped named integer variable;
#X obj 30 8383 local.list;
#X text 200 8383 local named list object;
#X obj 30 8410 local.mlist;
#X text 200 8410 local named mlist object;
#X obj 30 8437 local.set;
#X text 200 8437 local named set object;
#X obj 20 8464 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 8505 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8516 math.abs;
#X text 200 8516 absolute value function;
#X obj 30 8543 math.acos;
#X text 200 8543 arc cosine function;
#X obj 30 8570 math.acosh;
#X text 200 8570 inverse hyperbolic cosine function;
#X obj 30 8597 math.and;
#X text 200 8597 operation AND for multiple arguments;
#X obj 30 8624 math.approx;
#X text 200 8624 check if input value approximately equal to pattern;
#X obj 30 8651 math.asin;
#X text 200 8651 arc sine function;
#X obj 30 8678 math.asinh;
#X text 200 8678 inverse hyperbolic sine function;
#X obj 30 8705 math.atan;
#X text 200 8705 arc tangent function;
#X obj 30 8732 math.atanh;
#X text 200 8732 inverse hyperbolic tangent function;
#X obj 30 8759 math.cbrt;
#X text 200 8759 cube root function;
#X obj 30 8786 math.cdiv~;
#X text 200 8786 division of complex signals;
#X obj 30 8813 math.ceil;
#X text 200 8813 round to smallest integral value not less than input
value;
#X obj 30 8840 math.cmul~;
#X text 200 8840 multiplication of complex signals;
#X obj 30 8867 math.cos;
#X text 200 8867 cosine function;
#X obj 30 8894 math.cosh;
#X text 200 8894 hyperbolic cosine function;
#X obj 30 8921 math.div;
#X text 200 8921 division (on lists too);
#X obj 30 8948 math.e;
#X text 200 8948 mathematical constant \, base of the natural logarithm;
#X obj 30 8975 math.exp;
#X text 200 8975 exponential functions;
#X obj 30 9002 math.exp2;
#X text 200 9002 exponential functions;
#X obj 30 9029 math.expr;
#X text 200 9029 dynamic [expr];
#X obj 30 9056 math.floor;
#X text 200 9056 round to largest integral value not greater than x;
#X obj 30 9083 math.gcd;
#X text 200 9083 calculate greatest common divisor;
#X obj 30 9110 math.inf;
#X text 200 9110 infinity value that cannot be represented accurately;
#X obj 30 9137 math.lcm;
#X text 200 9137 calculate least common multiple;
#X obj 30 9164 math.log;
#X text 200 9164 logarithm functions;
#X obj 30 9191 math.log10;
#X text 200 9191 logarithm functions;
#X obj 30 9218 math.log2;
#X text 200 9218 logarithm functions;
#X obj 30 9245 math.mul;
#X text 200 9245 multiplication (on lists too);
#X obj 30 9272 math.nan;
#X text 200 9272 Not a Number \, unrepresentable value;
#X obj 30 9299 math.neg;
#X text 200 9299 negate function;
#X obj 30 9326 math.or;
#X text 200 9326 operation OR for multiple arguments;
#X obj 30 9353 math.pi;
#X text 200 9353 mathematical constant;
#X obj 30 9380 math.polyeval;
#X text 200 9380 evaluates the polynomial described by the coefficients
list;
#X obj 30 9407 math.reciprocal;
#X text 200 9407 calculate reciprocal number;
#X obj 30 9434 math.round;
#X text 200 9434 round to integral value \, regardless of rounding
direction;
#X obj 30 9461 math.round~;
#X text 200 9461 signal round;
#X obj 30 9488 math.sign;
#X text 200 9488 sign function;
#X obj 30 9515 math.sin;
#X text 200 9515 sine function;
#X obj 30 9542 math.sinh;
#X text 200 9542 hyperbolic sine function;
#X obj 30 9569 math.sqrt;
#X text 200 9569 square root function;
#X obj 30 9596 math.squared;
#X text 200 9596 value square;
#X obj 30 9623 math.sync_add;
#X text 200 9623 sync addition;
#X obj 30 9650 math.sync_and;
#X text 200 9650 sync logical AND operation;
#X obj 30 9677 math.sync_div;
#X text 200 9677 sync division;
#X obj 30 9704 math.sync_eq;
#X text 200 9704 sync equal numbers check;
#X obj 30 9731 math.sync_ge;
#X text 200 9731 sync greater equal numbers compare;
#X obj 30 9758 math.sync_gt;
#X text 200 9758 sync greater then numbers compare;
#X obj 30 9785 math.sync_le;
#X text 200 9785 sync less equal numbers compare;
#X obj 30 9812 math.sync_lt;
#X text 200 9812 sync less then numbers compare;
#X obj 30 9839 math.sync_mod;
#X text 200 9839 sync remainder of modulo division (float or integer);
#X obj 30 9866 math.sync_mul;
#X text 200 9866 sync multiplication;
#X obj 30 9893 math.sync_ne;
#X text 200 9893 sync numbers for not equality;
#X obj 30 9920 math.sync_or;
#X text 200 9920 sync logical OR operation;
#X obj 30 9947 math.sync_sub;
#X text 200 9947 sync subtraction;
#X obj 30 9974 math.sync_xor;
#X text 200 9974 sync logical XOR operation;
#X obj 30 10001 math.tan;
#X text 200 10001 tangent function;
#X obj 30 10028 math.tanh;
#X text 200 10028 hyperbolic tangent function;
#X obj 30 10055 math.trunc;
#X text 200 10055 truncate to integer value;
#X obj 20 10082 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 10123 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10134 midi.ctl2str;
#X text 200 10134 convert Standard MIDI Controllers number to name;
#X obj 30 10161 midi.event2ctl;
#X text 200 10161 convert MidiEvent message to controller channel/value
pair;
#X obj 30 10188 midi.event2note;
#X text 200 10188 convert MidiEvent message to midi note/velocity pair;
#X obj 30 10215 midi.event2prg;
#X text 200 10215 convert MidiEvent message to midi program change
value;
#X obj 30 10242 midi.file;
#X text 200 10242 standard midi file SMF reader and writer;
#X obj 30 10269 midi.key2str;
#X text 200 10269 convert key number to SPN name according to tonality;
#X obj 30 10296 midi.prg2str;
#X text 200 10296 convert GM Instrument number to name (string or symbol);
#X obj 30 10323 midi.track;
#X text 200 10323 extract track from MidiFile;
#X obj 20 10350 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 10391 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10402 click~;
#X text 200 10402 Output single impulse on bang;
#X obj 30 10429 fluid~;
#X text 200 10429 FluidSynth SoundFont 2 player;
#X obj 30 10456 modplug~;
#X text 200 10456 MOD file player (using libmodplug);
#X obj 30 10483 speech.flite;
#X text 200 10483 render speech to array;
#X obj 20 10510 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 10551 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10562 msg;
#X text 200 10562 message constructor;
#X obj 30 10589 msg.after;
#X text 200 10589 send specified message after incoming message;
#X obj 30 10616 msg.onload;
#X text 200 10616 send message when patch loads;
#X obj 20 10643 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 10684 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10695 net.host2ip;
#X text 200 10695 returns IP address by DNS name;
#X obj 20 10722 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 10763 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10774 noise.crackle~;
#X text 200 10774 sparse noise generator;
#X obj 30 10801 noise.lfreq0~;
#X text 200 10801 sampled/held noise (piecewise constant);
#X obj 30 10828 noise.lfreq~;
#X text 200 10828 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 10855 noise.pink~;
#X text 200 10855 Pink noise generator;
#X obj 30 10882 noise.white~;
#X text 200 10882 White noise generator;
#X obj 20 10909 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 10950 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10961 osc.blit~;
#X text 200 10961 Bandlimited impulse train oscillator;
#X obj 30 10988 osc.impulse~;
#X text 200 10988 Bandlimited impulse train generator;
#X obj 30 11015 osc.pulse~;
#X text 200 11015 Bandlimited pulse train oscillator;
#X obj 30 11042 osc.saw4~;
#X text 200 11042 Bandlimited sawtooth wave;
#X obj 30 11069 osc.saw~;
#X text 200 11069 Alias-free sawtooth wave;
#X obj 30 11096 osc.sinfb~;
#X text 200 11096 Sine oscilator with feedback;
#X obj 30 11123 osc.sin~;
#X text 200 11123 Sine wave oscillator;
#X obj 30 11150 osc.square~;
#X text 200 11150 Bandlimited square wave oscillator;
#X obj 30 11177 osc.tri~;
#X text 200 11177 Bandlimited triangle wave oscillator;
#X obj 20 11204 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 11245 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11256 canvas.current;
#X text 200 11256 verbose information about current canvas;
#X obj 30 11283 canvas.dir;
#X text 200 11283 current canvas directory;
#X obj 30 11310 canvas.name;
#X text 200 11310 current canvas name;
#X obj 30 11337 canvas.path;
#X text 200 11337 current canvas fullpath;
#X obj 30 11364 canvas.top;
#X text 200 11364 verbose information about top-level canvas;
#X obj 30 11391 patch.args;
#X text 200 11391 Get patch or subpatch arguments;
#X obj 20 11418 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 11459 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11470 path.basename;
#X text 200 11470 outputs filename portion of pathname;
#X obj 30 11497 path.dirname;
#X text 200 11497 outputs directory portion of pathname;
#X obj 30 11524 path.exists;
#X text 200 11524 checks if given path exists;
#X obj 30 11551 path.lsdir;
#X text 200 11551 list directory contents;
#X obj 20 11578 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 11619 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11630 is_any;
#X text 200 11630 checks if input data has *any* type;
#X obj 30 11657 is_bang;
#X text 200 11657 checks if input data has *bang* type;
#X obj 30 11684 is_data;
#X text 200 11684 checks if input data has *data* type;
#X obj 30 11711 is_dict;
#X text 200 11711 checks if input data has *dict* type;
#X obj 30 11738 is_even;
#X text 200 11738 checks if input number is even;
#X obj 30 11765 is_file;
#X text 200 11765 checks if file exists and accessible;
#X obj 30 11792 is_float;
#X text 200 11792 checks if input data has *float* type;
#X obj 30 11819 is_list;
#X text 200 11819 checks if input data has *list* type;
#X obj 30 11846 is_odd;
#X text 200 11846 checks if input number is odd;
#X obj 30 11873 is_pointer;
#X text 200 11873 checks if input data has *pointer* type;
#X obj 30 11900 is_symbol;
#X text 200 11900 checks if input data has *symbol* type;
#X obj 20 11927 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 11968 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11979 preset.float;
#X text 200 11979 load/store float preset;
#X obj 30 12006 preset.list;
#X text 200 12006 load/store symbol preset;
#X obj 30 12033 preset.storage;
#X text 200 12033 preset storage control;
#X obj 30 12060 preset.symbol;
#X text 200 12060 load/store symbol preset;
#X obj 20 12087 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 12128 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12139 patch.props;
#X text 200 12139 patch properties manager;
#X obj 30 12166 prop;
#X text 200 12166 get/set named property value for subpatch or abstraction;
#X obj 30 12193 prop.declare;
#X text 200 12193 declare named property for subpatch or abstraction;
#X obj 30 12220 prop.get;
#X text 200 12220 Property extractor;
#X obj 30 12247 prop.get~;
#X text 200 12247 Property extractor from sound stream;
#X obj 30 12274 prop.set;
#X text 200 12274 Property injector;
#X obj 20 12301 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 12342 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12353 proto.firmata;
#X text 200 12353 Firmata Arduino protocol support;
#X obj 30 12380 proto.sp.alpaca;
#X text 200 12380 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 12407 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 12448 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12459 random.discrete;
#X text 200 12459 random weighted integers on interval [0 \, n);
#X obj 30 12486 random.float;
#X text 200 12486 random float generator in specified range;
#X obj 30 12513 random.gauss;
#X text 200 12513 gaussian random distribution;
#X obj 30 12540 random.int;
#X text 200 12540 Random integer generator in specified range;
#X obj 30 12567 random.linear;
#X text 200 12567 random linear distribution;
#X obj 30 12594 random.pw_const;
#X text 200 12594 piecewise constant random distribution;
#X obj 30 12621 random.pw_lin;
#X text 200 12621 piecewise linear random distribution;
#X obj 20 12648 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 12689 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12700 snd.file;
#X text 200 12700 Sound file loader on steroids;
#X obj 20 12727 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 12768 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12779 hoa.2d.decoder~;
#X text 200 12779 hoa 2d decoder;
#X obj 30 12806 hoa.2d.encoder~;
#X text 200 12806 hoa 2d encoder;
#X obj 30 12833 hoa.2d.map~;
#X text 200 12833 a 2d ambisonic multisource spatializer;
#X obj 30 12860 hoa.2d.optim~;
#X text 200 12860 a 2D ambisonic optimization tool;
#X obj 30 12887 hoa.2d.projector~;
#X text 200 12887 a plane waves decomposer from circular harmonics
domain;
#X obj 30 12914 hoa.2d.recomposer~;
#X text 200 12914 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 12954 hoa.2d.rotate~;
#X text 200 12954 a 2D ambisonic sound field rotation;
#X obj 30 12981 hoa.2d.wider~;
#X text 200 12981 a 2d fractional ambisonic order simulator;
#X obj 30 13008 hoa.@process;
#X text 200 13008 process properties manager for hoa.process~;
#X obj 30 13035 hoa.in;
#X text 200 13035 message inlet for a patcher loaded by hoa.process~;
#X obj 30 13062 hoa.in~;
#X text 200 13062 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13089 hoa.out;
#X text 200 13089 message outlet for a patcher loaded by hoa.process~;
#X obj 30 13116 hoa.out~;
#X text 200 13116 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 13143 hoa.process~;
#X text 200 13143 patcher loader for multichannel processing;
#X obj 30 13173 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 13170 a 2d ambisonic harmonic scope;
#X obj 30 13195 pan.cos~;
#X text 200 13195 two channel equal power sine/cosine panner;
#X obj 30 13222 pan.linsig~;
#X text 200 13222 two channel linear panner with signal control;
#X obj 30 13249 pan.lin~;
#X text 200 13249 two channel linear panner;
#X obj 30 13276 pan.spread~;
#X text 200 13276 spreads input channels across the stereo field;
#X obj 30 13303 pan.sqrt~;
#X text 200 13303 two channel equal power square root panner;
#X obj 30 13330 spat.pan4~;
#X text 200 13330 GMEM SPAT: 4-outputs spatializer;
#X obj 30 13357 spat.pan8~;
#X text 200 13357 GMEM SPAT: 8-outputs spatializer;
#X obj 20 13384 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 13425 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13436 string;
#X text 200 13436 string constructor;
#X obj 30 13463 string.contains;
#X text 200 13463 checks if given string contains specified substring;
#X obj 30 13490 string.ends_with;
#X text 200 13490 checks if given string ends with specified suffix;
#X obj 30 13517 string.equal;
#X text 200 13517 check strings for equality;
#X obj 30 13544 string.format;
#X text 200 13544 formats string like printf.;
#X obj 30 13571 string.join;
#X text 200 13571 joins (concatenates) strings with separator;
#X obj 30 13598 string.length;
#X text 200 13598 number of characters in string (unicode supported);
#X obj 30 13625 string.match;
#X text 200 13625 check if string match regular expression;
#X obj 30 13652 string.remove;
#X text 200 13652 remove substring from input string;
#X obj 30 13679 string.replace;
#X text 200 13679 replace from one substring to another in input string;
#X obj 30 13706 string.split;
#X text 200 13706 split string by separator;
#X obj 30 13733 string.starts_with;
#X text 200 13733 checks if given string starts with specified prefix;
#X obj 30 13760 string.substr;
#X text 200 13760 extract substring from input string;
#X obj 30 13787 string2symbol;
#X text 200 13787 converts string to symbol;
#X obj 20 13814 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 13855 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13866 symbol.equal;
#X text 200 13866 check symbols for equality;
#X obj 30 13893 symbol.length;
#X text 200 13893 number of characters in symbol (unicode supported);
#X obj 30 13920 symbol.num_compare;
#X text 200 13920 numeric symbol compare;
#X obj 20 13947 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 13988 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13999 synth.bee3~;
#X text 200 13999 Hammond-oid organ FM synthesis instrument;
#X obj 30 14026 synth.birds~;
#X text 200 14026 bird singing generator;
#X obj 30 14053 synth.church_bell~;
#X text 200 14053 generic church bell modal model;
#X obj 30 14080 synth.dubdub~;
#X text 200 14080 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 14120 synth.eguitar~;
#X text 200 14120 simple electric guitar model with steel strings;
#X obj 30 14147 synth.fgrain~;
#X text 200 14147 file granulator from STK;
#X obj 30 14174 synth.ks~;
#X text 200 14174 Karplus-Strong string;
#X obj 30 14201 synth.marimba~;
#X text 200 14201 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 14241 synth.rhodey~;
#X text 200 14241 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 14268 synth.risset_arp~;
#X text 200 14268 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 14295 synth.risset_tone~;
#X text 200 14295 Jean Claude Risset's endless glissando;
#X obj 30 14322 synth.shakers~;
#X text 200 14322 various percussion sounds from STK library;
#X obj 30 14349 synth.wurley~;
#X text 200 14349 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 14376 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 14417 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14428 system.colorpanel;
#X text 200 14428 System color panel dialog popup;
#X obj 30 14455 system.cursor;
#X text 200 14455 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 14482 system.getenv;
#X text 200 14482 Get system environment variables;
#X obj 30 14509 system.hostname;
#X text 200 14509 outputs system hostname;
#X obj 30 14536 system.memsize;
#X text 200 14536 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 14576 system.memused;
#X text 200 14576 returns the process physical memory use - current
and peak;
#X obj 30 14603 system.screen_size;
#X text 200 14603 returns current screen size in pixels;
#X obj 30 14630 system.shell;
#X text 200 14630 run external command in separate process;
#X obj 20 14657 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 14698 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14709 tl.bang;
#X text 200 14709 Timeline bang (with possible delay);
#X obj 30 14739 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 14736 Timeline section;
#X obj 30 14761 tl.timeline;
#X text 200 14761 Timeline - event scheduler;
#X obj 30 14788 tl.toggle;
#X text 200 14788 Timeline bang;
#X obj 30 14815 tl.transport;
#X text 200 14815 Timeline transport control;
#X obj 20 14842 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 14883 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14897 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 14894 array view with cursor and selection;
#X obj 30 14922 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 14919 A bang... that's all;
#X obj 30 14947 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 14944 colorchooser widget;
#X obj 30 14972 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 14969 Display GUI object;
#X obj 30 14997 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 14994 GUI for turning DSP on/off;
#X obj 30 15022 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 15019 envelope editor widget;
#X obj 30 15047 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 15044 UI stereo gain control;
#X obj 30 15072 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 15069 UI gain control;
#X obj 30 15097 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 15094 simple icon with button capabilities;
#X obj 30 15122 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 15119 value increment/decrement;
#X obj 30 15147 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 15144 keyboard widget;
#X obj 30 15172 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 15169 knob widget;
#X obj 30 15197 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 15194 simple label widget;
#X obj 30 15222 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 15219 Hyperlink widget;
#X obj 30 15247 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 15244 The matrix of toggles has you.;
#X obj 30 15272 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 15269 Dropdown menu;
#X obj 30 15297 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 15294 Shows peak and rms signal level;
#X obj 30 15322 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 15319 filter mouse events from ui objects;
#X obj 30 15347 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 15344 routes mouse events from ui objects;
#X obj 30 15372 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 15369 counterpart of the vanilla [nbx];
#X obj 30 15397 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 15394 counterpart of the vanilla [nbx] for signal;
#X obj 30 15422 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 15419 2D slider in polar coordinates;
#X obj 30 15447 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 15444 Preset manager;
#X obj 30 15472 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 15469 counterpart of the vanilla radio toggle;
#X obj 30 15497 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 15494 range slider;
#X obj 30 15522 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 15519 Scope GUI object;
#X obj 30 15547 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 15544 counterpart of the vanilla slider;
#X obj 30 15572 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 15569 2D slider widget;
#X obj 30 15597 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 15594 Multiple slider widget;
#X obj 30 15622 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 15619 Spectroscope GUI object;
#X obj 30 15647 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 15644 displays a list of text buttons or text toggles;
#X obj 30 15672 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 15669 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 15694 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 15694 version: v0.8.0 \, license: GPL3;
#X obj 20 15715 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;