#N canvas 0 0 700 500 12;
#X obj 1 1 cnv 5 680 40 empty empty CEAMMC\ documentation 20 20 0 20
-104026 -4096 0;
#X obj 20 103 cnv 1 660 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 61 cnv 5 450 32 empty empty Initial\ object\ arg\ functions
4 16 0 17 -262144 -104026 0;
#X text 40 124 Note: this functions are calculated only once just before(!)
ceammc object creation., f 80;
#X text 40 169 Function call can be nested., f 80;
#X text 40 199 If you want the symbol value pi() instead of numeric
value - use double-quotes. In the following example theren is a list
with two elements: first is π=3.1415 value \, second is unexpanded
symbol pi():, f 80;
#X msg 140 259 bang;
#X obj 140 283 data.list pi() "pi()";
#X obj 140 307 ui.dt;
#X obj 20 364 cnv 5 400 28 empty empty list\ functions 4 14 0 16
-70738 -262144 0;
#X text 70 412 ◦ seq(FROM TO STEP?) - sequence generator. The TO value
is included into the output range. STEP can be omitted., f 67;
#X msg 140 447 bang;
#X obj 140 471 data.list seq(10 0 2);
#X obj 140 495 ui.dt;
#X text 70 552 ◦ reverse(ARGS+) - reverse given arguments, f 67;
#X msg 140 572 bang;
#X obj 140 596 data.list reverse(seq(1 16));
#X obj 140 620 ui.dt;
#X text 70 677 ◦ sort(ARGS+) - sort given arguments, f 67;
#X msg 140 697 bang;
#X obj 140 721 data.list sort(3 5 1 7 54 3 2 4 6 7);
#X obj 140 745 ui.dt;
#X text 70 802 ◦ rotate(INT ARGS+) - rotates list (positive values
rotates counter-clockwise), f 67;
#X msg 140 837 bang;
#X obj 140 861 data.list rotate(3 seq(1 10));
#X obj 140 885 ui.dt;
#X text 70 942 ◦ repeat(INT ARGS+) - generate list with repeated pattern, f 67;
#X msg 140 962 bang;
#X obj 140 986 data.list repeat(3 A B);
#X obj 140 1010 ui.dt;
#X text 70 1067 ◦ ones(INT) - generates list filled with ones of specified
length, f 67;
#X msg 140 1087 bang;
#X obj 140 1111 data.list ones(16);
#X obj 140 1135 ui.dt;
#X text 70 1192 ◦ zeros(INT) - generates list filled with zeros of
specified length, f 67;
#X msg 140 1212 bang;
#X obj 140 1236 data.list zeros(24);
#X obj 140 1260 ui.dt;
#X obj 20 1317 cnv 5 400 28 empty empty math\ functions 4 14 0 16
-70738 -262144 0;
#X text 70 1365 ◦ pi() - replaced with π value, f 67;
#X text 70 1385 ◦ e() - replaced with e value, f 67;
#X text 70 1405 ◦ bs() - replaced with DSP blocksize value, f 67;
#X text 70 1425 ◦ sr() - replaced with DSP samplerate value, f 67;
#X text 70 1445 ◦ amp2db(FLOAT) - convert linear amplitude values to
dbfs scale, f 67;
#X text 70 1465 ◦ db2amp(FLOAT) - convert dbfs scale values to linear
amplitudes, f 67;
#X text 70 1485 ◦ mtof(FLOAT) - convert MIDI pitch info frequency in
Hz, f 67;
#X text 70 1505 ◦ ftom(FLOAT) - convert frequency in Hz into MIDI pitch, f 67;
#X text 70 1525 ◦ expr(SYMBOL) - calculates math expression, f 67;
#X msg 140 1545 bang;
#X obj 140 1569 data.list expr("sqrt(2)^3.5+1-pi*e");
#X obj 140 1593 ui.dt;
#X obj 20 1650 cnv 5 400 28 empty empty misc\ functions 4 14 0 16
-70738 -262144 0;
#X text 70 1698 ◦ hexbeat(SYMBOL) - generates hexbeat rhythm pattern, f 67;
#X msg 140 1718 bang;
#X obj 140 1742 data.list hexbeat("0xDEADBEEF");
#X obj 140 1766 ui.dt;
#X text 70 1823 ◦ euclid(BEATS LEN? ROTATION?) - generates euclid rhythm
pattern, f 67;
#X msg 140 1843 bang;
#X obj 140 1867 data.list euclid(3 8 0);
#X obj 140 1891 ui.dt;
#X text 70 1948 ◦ rtree(DUR_MS MLIST) - generates nested complex rhythm
tree pattern, f 67;
#X msg 140 1983 bang;
#X obj 140 2007 data.list rtree(1000 (1 1 (2 1 1 (3 1 1 1))));
#X obj 140 2031 ui.dt;
#X obj 1 2108 cnv 5 680 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 31 0 32 0;
#X connect 32 0 33 0;
#X connect 35 0 36 0;
#X connect 36 0 37 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 53 0 54 0;
#X connect 54 0 55 0;
#X connect 57 0 58 0;
#X connect 58 0 59 0;
#X connect 61 0 62 0;
#X connect 62 0 63 0;