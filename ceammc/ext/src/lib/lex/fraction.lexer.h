// fraction.lexer.h generated by reflex 1.6.3 from fraction.l

#ifndef REFLEX_HEADER_H
#define REFLEX_HEADER_H
#define IN_HEADER 1

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "fraction.lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               FractionLexer
#define REFLEX_OPTION_namespace           ceammc::fraction
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "fraction.lexer.cpp"
#define REFLEX_OPTION_reentrant           true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "fraction.l"

    # include "ceammc_units.h"
    # include <cstdlib>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ceammc {
namespace fraction {

class FractionLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 6 "fraction.l"



    public:
        units::FractionValue value;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  FractionLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

} // namespace ceammc
} // namespace fraction

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REENTRANT                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

typedef ceammc::fraction::FractionLexer yyscanner_t;
typedef void *yyscan_t;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

YY_EXTERN_C int yylex(yyscan_t);
YY_EXTERN_C void yylex_init(yyscan_t*);
YY_EXTERN_C void yylex_destroy(yyscan_t);

#endif
