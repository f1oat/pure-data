#N canvas 0 0 715 500 12;
#X obj 20 50 cnv 5 69 31 empty empty matrix 4 13 0 17 -262144 -49933
0;
#X obj 20 91 cnv 1 675 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 102 matrix.!=;
#X text 175 102 element-wise matrix not equal comparasion;
#X obj 30 129 matrix.<;
#X text 175 129 element-wise less then comparasion;
#X obj 30 156 matrix.<=;
#X text 175 156 element-wise less equal comparasion;
#X obj 30 183 matrix.==;
#X text 175 183 element-wise matrix equal comparasion;
#X obj 30 210 matrix.>;
#X text 175 210 element-wise greater then comparasion;
#X obj 30 237 matrix.>=;
#X text 175 237 element-wise greater equal comparasion;
#X obj 30 264 matrix.abs;
#X text 175 264 calc abs value for each matrix element;
#X obj 30 291 matrix.accu;
#X text 175 291 accumulate (sum) all elements of matrix;
#X obj 30 318 matrix.acos;
#X text 175 318 element-wise acrcosine;
#X obj 30 345 matrix.acosh;
#X text 175 345 element-wise hyperbolic acrcosine;
#X obj 30 372 matrix.add;
#X text 175 372 element-wise matrix addition;
#X obj 30 399 matrix.all;
#X text 175 399 check if all elements of the matrix are non-zero;
#X obj 30 426 matrix.all_col;
#X text 175 426 row with each element (0 or 1) indicating whether the
corresponding column has all non-zero elements;
#X obj 30 463 matrix.all_row;
#X text 175 463 column with each element (0 or 1) indicating whether
the corresponding row has all non-zero elements;
#X obj 30 500 matrix.any;
#X text 175 500 check if any elements of the matrix are non-zero;
#X obj 30 527 matrix.any_col;
#X text 175 527 row with each element (0 or 1) indicating whether the
corresponding column has any non-zero elements;
#X obj 30 564 matrix.any_row;
#X text 175 564 column with each element (0 or 1) indicating whether
the corresponding row has any non-zero elements;
#X obj 30 601 matrix.asin;
#X text 175 601 element-wise acrsine;
#X obj 30 628 matrix.asinh;
#X text 175 628 element-wise hyperbolic acrsine;
#X obj 30 655 matrix.at;
#X text 175 655 select matrix element at specified position;
#X obj 30 682 matrix.atan;
#X text 175 682 element-wise arctangent;
#X obj 30 709 matrix.atanh;
#X text 175 709 element-wise hyperbolic acrtangent;
#X obj 30 736 matrix.clip;
#X text 175 736 clip matrix value to range [min \, max];
#X obj 30 763 matrix.col;
#X text 175 763 create Matrix column with specified values;
#X obj 30 790 matrix.col_at;
#X text 175 790 get specified column;
#X obj 30 817 matrix.conv2;
#X text 175 817 2D matrix convolution;
#X obj 30 844 matrix.cos;
#X text 175 844 element-wise cosine;
#X obj 30 871 matrix.cosh;
#X text 175 871 element-wise hyperbolic cosine;
#X obj 30 898 matrix.det;
#X text 175 898 determinant of square matrix;
#X obj 30 925 matrix.diag;
#X text 175 925 get matrix diagonals;
#X obj 30 952 matrix.div;
#X text 175 952 element-wise matrix division;
#X obj 30 979 matrix.exp;
#X text 175 979 element-wise base-e exponent: e^x;
#X obj 30 1006 matrix.exp10;
#X text 175 1006 element-wise base-10 exponent: 10^x;
#X obj 30 1033 matrix.exp2;
#X text 175 1033 element-wise base-2 exponent: 2^x;
#X obj 30 1060 matrix.fill;
#X text 175 1060 fill input Matrix with value;
#X obj 30 1087 matrix.from_list;
#X text 175 1087 create Matrix from list values;
#X obj 30 1114 matrix.full;
#X text 175 1114 create Matrix filled with specified value;
#X obj 30 1141 matrix.hist;
#X text 175 1141 produce a matrix containing column histogram counts;
#X obj 30 1168 matrix.identity;
#X text 175 1168 create identity Matrix;
#X obj 30 1195 matrix.insert_col;
#X text 175 1195 insert vector at specified matrix column;
#X obj 30 1222 matrix.insert_row;
#X text 175 1222 insert vector at specified matrix row;
#X obj 30 1249 matrix.inverse;
#X text 175 1249 inverse square matrix;
#X obj 30 1276 matrix.linspace;
#X text 175 1276 generate row with linearly spaced N elements;
#X obj 30 1303 matrix.load;
#X text 175 1303 load matrix from CSV format;
#X obj 30 1330 matrix.logspace;
#X text 175 1330 generate row with N elements spaced logarithmically;
#X obj 30 1357 matrix.matmul;
#X text 175 1357 matrix product;
#X obj 30 1384 matrix.max;
#X text 175 1384 returns maximum in Matrix;
#X obj 30 1411 matrix.mean;
#X text 175 1411 mean matrix value;
#X obj 30 1438 matrix.mean_col;
#X text 175 1438 mean value for each matrix column;
#X obj 30 1465 matrix.mean_row;
#X text 175 1465 mean value for each matrix row;
#X obj 30 1492 matrix.median;
#X text 175 1492 median matrix value;
#X obj 30 1519 matrix.median_col;
#X text 175 1519 median matrix value for each column;
#X obj 30 1546 matrix.median_row;
#X text 175 1546 median matrix value for each row;
#X obj 30 1573 matrix.min;
#X text 175 1573 returns minimum value in Matrix;
#X obj 30 1600 matrix.mul;
#X text 175 1600 element-wise matrix multiplication;
#X obj 30 1627 matrix.ncols;
#X text 175 1627 return number of columns in Matrix;
#X obj 30 1654 matrix.new;
#X text 175 1654 Matrix data type;
#X obj 30 1681 matrix.nrows;
#X text 175 1681 return number of rows in Matrix;
#X obj 30 1708 matrix.ones;
#X text 175 1708 create Matrix with ones;
#X obj 30 1735 matrix.ones_like;
#X text 175 1735 create Matrix filled with ones with the same shape as
input;
#X obj 30 1762 matrix.randn;
#X text 175 1762 generates Matrix using Gaussian distribution with
zero mean and unit variance;
#X obj 30 1799 matrix.randu;
#X text 175 1799 generates Matrix with uniform distribution [0-1];
#X obj 30 1826 matrix.range;
#X text 175 1826 matrix range (difference between max and min);
#X obj 30 1853 matrix.range_col;
#X text 175 1853 matrix column range (difference between max and min);
#X obj 30 1880 matrix.range_row;
#X text 175 1880 matrix row range (difference between max and min);
#X obj 30 1907 matrix.rank;
#X text 175 1907 rank of the matrix;
#X obj 30 1934 matrix.remove_col;
#X text 175 1934 remove specified matrix column;
#X obj 30 1961 matrix.remove_row;
#X text 175 1961 remove specified matrix row;
#X obj 30 1988 matrix.replace;
#X text 175 1988 replace specific elements with a new value;
#X obj 30 2015 matrix.reshape;
#X text 175 2015 change size while keeping elements;
#X obj 30 2042 matrix.resize;
#X text 175 2042 change size while keeping elements and preserving
layout;
#X obj 30 2069 matrix.row;
#X text 175 2069 create Matrix row with specified values;
#X obj 30 2096 matrix.row_at;
#X text 175 2096 get specified row;
#X obj 30 2123 matrix.save;
#X text 175 2123 save matrix in CSV format;
#X obj 30 2150 matrix.shift_col;
#X text 175 2150 shift Matrix elements by N positions in each column;
#X obj 30 2177 matrix.shift_row;
#X text 175 2177 shift Matrix elements by N positions in each row;
#X obj 30 2204 matrix.sign;
#X text 175 2204 element-wise signum function;
#X obj 30 2231 matrix.sin;
#X text 175 2231 element-wise sine;
#X obj 30 2258 matrix.sinh;
#X text 175 2258 element-wise hyperbolic sine;
#X obj 30 2285 matrix.size;
#X text 175 2285 return Matrix size (rows \, columns);
#X obj 30 2312 matrix.solve;
#X text 175 2312 Solve a system of linear equations \, A*X = B \,
where X is unknown;
#X obj 30 2349 matrix.stddev;
#X text 175 2349 standart deviation for matrix values;
#X obj 30 2376 matrix.stddev_col;
#X text 175 2376 standart deviation matrix value for each column;
#X obj 30 2403 matrix.stddev_row;
#X text 175 2403 standart deviation matrix value for each row;
#X obj 30 2430 matrix.sub;
#X text 175 2430 element-wise matrix subtraction;
#X obj 30 2457 matrix.swap_cols;
#X text 175 2457 swaps specified columns in matrix;
#X obj 30 2484 matrix.swap_rows;
#X text 175 2484 swaps specified rows in matrix;
#X obj 30 2511 matrix.tan;
#X text 175 2511 element-wise tangent;
#X obj 30 2538 matrix.tanh;
#X text 175 2538 element-wise hyperbolic tangent;
#X obj 30 2565 matrix.to_list;
#X text 175 2565 convert Matrix to list;
#X obj 30 2592 matrix.transpose;
#X text 175 2592 transpose Matrix;
#X obj 30 2619 matrix.trunc_exp;
#X text 175 2619 element-wise base-e exponent \, truncated to avoid
infinity;
#X obj 30 2646 matrix.vectorise;
#X text 175 2646 generate a column vector or row vector from matrix;
#X obj 30 2673 matrix.zeros;
#X text 175 2673 create Matrix with zeros;
#X obj 30 2700 matrix.zeros_like;
#X text 175 2700 create Matrix filled with zeros with the same shape
as input;
#X obj 1 1 cnv 5 695 40 empty empty matrix 20 20 0 20 -104026 -4096 0;
#X obj 1 2737 cnv 5 695 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2737 version: v0.1 \, license:;