#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 an.pitchtrack~;
#X text 200 153 pitch tracker;
#X obj 20 180 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 221 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 array.bpm;
#X text 200 232 BPM calculator;
#X obj 30 259 array.copy;
#X text 200 259 copy samples from one array to another;
#X obj 30 286 array.do;
#X text 200 286 iterate and modify array content via side-chain;
#X obj 30 313 array.each;
#X text 200 313 process each array elements via side-chain;
#X obj 30 340 array.fill;
#X text 200 340 fill array with single value or pattern;
#X obj 30 367 array.minmax;
#X text 200 367 find array min and max element value;
#X obj 30 394 array.set;
#X text 200 394 set array content from list;
#X obj 30 421 array.stretch;
#X text 200 421 array time-stretch \, pitch-shift or rate-change;
#X obj 30 448 array.vplay;
#X text 200 448 simple array player for using with vline~;
#X obj 30 475 array.window;
#X text 200 475 fill array with window;
#X obj 20 502 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 543 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 557 ui.link @title [function] @url function-help.pd;
#X text 200 554 named function;
#X obj 30 577 function.call;
#X text 200 577 call named function;
#X obj 30 604 gain~;
#X text 200 604 multislot signal gain;
#X obj 30 631 matrix~;
#X text 200 631 signal routing matrix;
#X obj 30 658 metro.pattern;
#X text 200 658 metro with rhythmic patterns;
#X obj 30 685 metro.seq;
#X text 200 685 metro sequencer;
#X obj 30 712 mix~;
#X text 200 712 multislot signal mixer;
#X obj 30 739 obj.props;
#X text 200 739 property extractor;
#X obj 30 766 radio;
#X text 200 766 float index to outlet values as radio switch;
#X obj 30 793 window;
#X text 200 793 returns window value by given window position;
#X obj 30 820 xfade2~;
#X text 200 820 multi stereo-signal crossfade;
#X obj 30 847 xfade~;
#X text 200 847 multi signal crossfade;
#X obj 20 874 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 915 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 926 array.p2s;
#X text 200 926 convert array phase [0\..1] to sample position;
#X obj 30 953 array.s2p;
#X text 200 953 convert array sample position to relative phase
position [0\..1];
#X obj 30 990 conv.amp2dbfs;
#X text 200 990 convert from amplitude to decibel full scale;
#X obj 30 1017 conv.bpm2hz;
#X text 200 1017 converts BPM to frequency in herz;
#X obj 30 1044 conv.bpm2ms;
#X text 200 1044 convert frequency in BPM to period in milliseconds;
#X obj 30 1071 conv.bpm2sec;
#X text 200 1071 convert frequency in BPM to period in seconds;
#X obj 30 1098 conv.cc2amp;
#X text 200 1098 convert from MIDI Control Change range;
#X obj 30 1125 conv.dbfs2amp;
#X text 200 1125 convert decibel full scale to amplitude;
#X obj 30 1152 conv.lin2curve;
#X text 200 1152 map linear to exponential range with 0 allowed.;
#X obj 30 1179 conv.lin2exp;
#X text 200 1179 maps linear range to exponential range;
#X obj 30 1206 conv.lin2lin;
#X text 200 1206 convert from one linear range to another;
#X obj 30 1233 conv.list2props;
#X text 200 1233 converts list to series of property messages;
#X obj 30 1260 conv.midi2freq;
#X text 200 1260 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1297 conv.pitch2midi;
#X text 200 1297 converts symbol pitch name to MIDI note number;
#X obj 30 1324 conv.samp2sec;
#X text 200 1324 convert samples to time according to samplerate;
#X obj 30 1351 conv.sec2samp;
#X text 200 1351 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1388 conv.sec2str;
#X text 200 1388 converts float time in seconds to formated symbol (or
string);
#X obj 30 1425 conv.str2sec;
#X text 200 1425 converts formatted time to float value in seconds;
#X obj 20 1452 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1493 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1504 data.dict;
#X text 200 1504 dictionary container: store values by key;
#X obj 30 1531 data.fifo;
#X text 200 1531 First-In-First-Out (FIFO) queue data container;
#X obj 30 1558 data.float;
#X text 200 1558 robust float object;
#X obj 30 1585 data.int;
#X text 200 1585 robust int object;
#X obj 30 1612 data.list;
#X text 200 1612 list container;
#X obj 30 1639 data.mlist;
#X text 200 1639 multidimensional list container;
#X obj 30 1666 data.set;
#X text 200 1666 container that store unique elements;
#X obj 30 1693 data.set2list;
#X text 200 1693 converts set to list;
#X obj 30 1720 dict.contains;
#X text 200 1720 predicate to check dict contains key;
#X obj 30 1747 dict.each;
#X text 200 1747 map each value in dict;
#X obj 30 1774 dict.from_list;
#X text 200 1774 creates dictionary from list;
#X obj 30 1801 dict.get;
#X text 200 1801 on input dict outputs value to corresponding key
outlet;
#X obj 30 1828 dict.keys;
#X text 200 1828 get list of dict keys;
#X obj 30 1855 dict.pass;
#X text 200 1855 passes specified keys in dict;
#X obj 30 1882 dict.reject;
#X text 200 1882 rejects specified keys from dict;
#X obj 30 1909 dict.size;
#X text 200 1909 dictionary size;
#X obj 30 1936 dict.to_list;
#X text 200 1936 converts dictionary to plain list;
#X obj 30 1963 dict.values;
#X text 200 1963 dictionary values as mlist;
#X obj 30 1990 mlist.flatten;
#X text 200 1990 flatten nested mlist;
#X obj 30 2017 set.contains;
#X text 200 2017 check if specified element is in set;
#X obj 30 2044 set.diff;
#X text 200 2044 difference between two sets;
#X obj 30 2071 set.equal;
#X text 200 2071 checks if two sets are equal (contains same
elements);
#X obj 30 2098 set.intersect;
#X text 200 2098 output intersection of given sets;
#X obj 30 2125 set.size;
#X text 200 2125 get number of elements in set;
#X obj 30 2152 set.symdiff;
#X text 200 2152 symmetric difference between two sets;
#X obj 30 2179 set.union;
#X text 200 2179 output union of given sets;
#X obj 20 2206 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2247 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2258 dyn.comp2~;
#X text 200 2258 stereo dynamic range compressor;
#X obj 30 2285 dyn.comp~;
#X text 200 2285 mono dynamic range compressors;
#X obj 30 2312 dyn.gate2~;
#X text 200 2312 stereo signal gate;
#X obj 30 2339 dyn.gate~;
#X text 200 2339 mono signal gate;
#X obj 30 2366 dyn.limit2~;
#X text 200 2366 stereo 1176LN Peak Limiter;
#X obj 30 2393 dyn.limit~;
#X text 200 2393 mono 1176LN Peak Limiter;
#X obj 30 2420 dyn.softclip~;
#X text 200 2420 soft signal clip;
#X obj 20 2447 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2488 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2499 env.adsr~;
#X text 200 2499 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2526 env.ar~;
#X text 200 2526 Attack/Release envelope generator;
#X obj 30 2553 env.asr~;
#X text 200 2553 Attack/Sustain/Release envelope generator;
#X obj 30 2580 env.concat;
#X text 200 2580 Envelope concatenation;
#X obj 30 2607 env.follow~;
#X text 200 2607 Envelope follower with independent attack and release
times;
#X obj 30 2634 env.mix;
#X text 200 2634 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2671 env.smooth~;
#X text 200 2671 An envelope with an exponential attack and release;
#X obj 30 2698 env.tscale;
#X text 200 2698 Envelope time-scale;
#X obj 30 2725 env.tshift;
#X text 200 2725 Envelope time-shift (horizontal);
#X obj 30 2752 env.vscale;
#X text 200 2752 Envelope value-scale;
#X obj 30 2779 env2array;
#X text 200 2779 Renders envelope to specified array;
#X obj 30 2806 env2vline;
#X text 200 2806 Converts envelope to bunch of vline messages;
#X obj 30 2833 envelope;
#X text 200 2833 Envelope data type;
#X obj 30 2860 vline2env;
#X text 200 2860 Converts vline messages to env;
#X obj 20 2887 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2928 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2939 expand_env;
#X text 200 2939 Substitute enviroment variables in data stream;
#X obj 30 2966 flow.append;
#X text 200 2966 inject message into flow;
#X obj 30 2993 flow.change;
#X text 200 2993 rejects redundant input values;
#X obj 30 3020 flow.count;
#X text 200 3020 control flow event counter;
#X obj 30 3047 flow.demultiplex;
#X text 200 3047 control flow demultiplexer;
#X obj 30 3074 flow.demultiplex2~;
#X text 200 3074 audio stream stereo demultiplexer;
#X obj 30 3101 flow.demultiplex~;
#X text 200 3101 audio stream demultiplexer;
#X obj 30 3128 flow.gate;
#X text 200 3128 control flow gate. [spigot] analog;
#X obj 30 3155 flow.group;
#X text 200 3155 group data atoms in list of specified size;
#X obj 30 3182 flow.interval;
#X text 200 3182 measure time between flow events;
#X obj 30 3209 flow.less;
#X text 200 3209 numeric stream router \, like many [moses];
#X obj 30 3236 flow.less_eq;
#X text 200 3236 numeric stream router \, like many [moses];
#X obj 30 3263 flow.multiplex;
#X text 200 3263 control flow multiplexer;
#X obj 30 3290 flow.multiplex2~;
#X text 200 3290 audio stream stereo multiplexer;
#X obj 30 3317 flow.multiplex~;
#X text 200 3317 audio stream multiplexer;
#X obj 30 3344 flow.once;
#X text 200 3344 one message pass thru;
#X obj 30 3371 flow.pass;
#X text 200 3371 pass specified values;
#X obj 30 3398 flow.pass_if;
#X text 200 3398 pass values that accepted by predicate object;
#X obj 30 3425 flow.reject;
#X text 200 3425 reject specified values;
#X obj 30 3452 flow.reject_if;
#X text 200 3452 reject values by predicate;
#X obj 30 3479 flow.route;
#X text 200 3479 advanced message router;
#X obj 30 3506 flow.speedlim;
#X text 200 3506 control stream speed limiter;
#X obj 30 3533 flow.split;
#X text 200 3533 split data flow by external side-chain predicate;
#X obj 30 3560 flow.sync;
#X text 200 3560 bus with only hot inlets;
#X obj 30 3587 flow.tee~;
#X text 200 3587 separate audio and control streams;
#X obj 30 3614 replace;
#X text 200 3614 Replace atoms in data stream;
#X obj 20 3641 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3682 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3693 flt.biquad~;
#X text 200 3693 second order IIR filter.;
#X obj 30 3720 flt.bpf12~;
#X text 200 3720 Band-pass filter with 12/db per octave slope;
#X obj 30 3747 flt.bpf24~;
#X text 200 3747 Band-pass filter with 24/db per octave slope;
#X obj 30 3774 flt.c_bpf~;
#X text 200 3774 BPF coefficient calculator for biquad filter;
#X obj 30 3801 flt.c_highshelf~;
#X text 200 3801 Highshelf filter coefficient calculator for biquad;
#X obj 30 3828 flt.c_hpf~;
#X text 200 3828 HPF coefficient calculator for biquad filter;
#X obj 30 3855 flt.c_lowshelf~;
#X text 200 3855 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3882 flt.c_lpf~;
#X text 200 3882 LPF coefficient calculator for biquad filter;
#X obj 30 3909 flt.c_notch~;
#X text 200 3909 Band-reject coefficient calculator for biquad filter;
#X obj 30 3936 flt.c_peak~;
#X text 200 3936 Peaking equalizer calculator for biquad;
#X obj 30 3963 flt.dcblock2~;
#X text 200 3963 stereo DC blocker;
#X obj 30 3990 flt.dcblock~;
#X text 200 3990 mono DC blocker;
#X obj 30 4017 flt.eq10~;
#X text 200 4017 graphic 10 band equalizer;
#X obj 30 4044 flt.eq_peak_cq~;
#X text 200 4044 constant-Q second order peaking equalizer section;
#X obj 30 4071 flt.eq_peak~;
#X text 200 4071 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 4122 flt.highshelf~;
#X text 200 4122 gain boost|cut above some frequency;
#X obj 30 4149 flt.hpf12~;
#X text 200 4149 High-pass filter with 12/db per octave slope;
#X obj 30 4176 flt.hpf24~;
#X text 200 4176 High-pass filter with 24/db per octave slope;
#X obj 30 4203 flt.lowshelf~;
#X text 200 4203 gain boost|cut below some frequency;
#X obj 30 4230 flt.lpf12~;
#X text 200 4230 Low-pass filter with 12/db per octave slope;
#X obj 30 4257 flt.lpf24~;
#X text 200 4257 Low-pass filter with 24/db per octave slope;
#X obj 30 4284 flt.median;
#X text 200 4284 Median control flow filter;
#X obj 30 4311 flt.moog_vcf~;
#X text 200 4311 Moog Voltage Controlled Filter;
#X obj 30 4338 flt.notch~;
#X text 200 4338 band-rejection filter;
#X obj 30 4365 flt.resonbp~;
#X text 200 4365 Simple resonant bandpass filter;
#X obj 20 4392 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4433 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4444 fx.bitdown~;
#X text 200 4444 bit downer and downsampler effect;
#X obj 30 4471 fx.chorus~;
#X text 200 4471 Chorus effect;
#X obj 30 4498 fx.distortion~;
#X text 200 4498 cubic nonlinearity distortion;
#X obj 30 4525 fx.drive~;
#X text 200 4525 Guitarix drive effect;
#X obj 30 4552 fx.drone_box~;
#X text 200 4552 mono sympathetic resonance generator;
#X obj 30 4579 fx.echo~;
#X text 200 4579 simple echo effect;
#X obj 30 4606 fx.flanger~;
#X text 200 4606 mono flanging effect;
#X obj 30 4633 fx.freeverb2~;
#X text 200 4633 freeverb2 - stereo version of freeverb;
#X obj 30 4660 fx.freeverb~;
#X text 200 4660 freeverb - common used open-source reverb;
#X obj 30 4687 fx.freqshift~;
#X text 200 4687 frequency shifter or single-sideband ring modulation;
#X obj 30 4714 fx.granulator~;
#X text 200 4714 simple input stream granulator;
#X obj 30 4741 fx.greyhole~;
#X text 200 4741 A complex echo-like effect;
#X obj 30 4768 fx.looper~;
#X text 200 4768 One track looper;
#X obj 30 4795 fx.pitchshift~;
#X text 200 4795 simple pitch shifter based on 2 delay lines;
#X obj 30 4822 fx.sdelay~;
#X text 200 4822 smooth delay with a feedback control;
#X obj 30 4849 fx.vocoder~;
#X text 200 4849 very simple vocoder where the spectrum of the
modulation signal is analyzed using a 32-band filter bank;
#X obj 30 4886 fx.wahwah~;
#X text 200 4886 digitized CryBaby wah pedal;
#X obj 30 4913 fx.zita_rev1~;
#X text 200 4913 Zita stereo reverb;
#X obj 20 4940 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4981 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4992 global.dict;
#X text 200 4992 global named dict object;
#X obj 30 5019 global.float;
#X text 200 5019 global named float object;
#X obj 30 5046 global.int;
#X text 200 5046 global named integer object;
#X obj 30 5073 global.list;
#X text 200 5073 global named list object;
#X obj 30 5100 global.mlist;
#X text 200 5100 global named mlist object;
#X obj 30 5127 global.set;
#X text 200 5127 global named set object;
#X obj 20 5154 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 5195 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5206 hw.arduino;
#X text 200 5206 Arduino device;
#X obj 30 5233 hw.kbd_light;
#X text 200 5233 Get/set keyboard light on some devices;
#X obj 20 5260 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5301 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5312 lfo.+pulse~;
#X text 200 5312 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5339 lfo.+saw~;
#X text 200 5339 Positive unit-amplitude low frequency saw wave;
#X obj 30 5366 lfo.+square~;
#X text 200 5366 Positive low frequency square wave;
#X obj 30 5393 lfo.+tri~;
#X text 200 5393 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5420 lfo.impulse~;
#X text 200 5420 Unit-amplitude low-frequency impulse train;
#X obj 30 5447 lfo.pulse~;
#X text 200 5447 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5474 lfo.saw~;
#X text 200 5474 Full-range unit-amplitude low frequency saw;
#X obj 30 5501 lfo.square~;
#X text 200 5501 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5528 lfo.tri~;
#X text 200 5528 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5555 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5596 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5607 list.^at;
#X text 200 5607 on input index(es) outputs list element(s);
#X obj 30 5634 list.^contains;
#X text 200 5634 on input atom or list checks if specified list
contains it;
#X obj 30 5661 list.^search;
#X text 200 5661 on input atom returns it index in list;
#X obj 30 5688 list.all_of;
#X text 200 5688 checks if all list atoms accepted by predicate;
#X obj 30 5715 list.any_of;
#X text 200 5715 checks if at least one list element is accepted by
predicate;
#X obj 30 5752 list.append;
#X text 200 5752 append atom or list to the end of input list;
#X obj 30 5779 list.apply_to;
#X text 200 5779 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5816 list.at;
#X text 200 5816 on input list outputs element(s) at specified
index(es);
#X obj 30 5843 list.choice;
#X text 200 5843 returns random element from list;
#X obj 30 5870 list.contains;
#X text 200 5870 on input list checks if it contains specified
subsequence;
#X obj 30 5897 list.count;
#X text 200 5897 returns the number of items that equal to specified
value;
#X obj 30 5924 list.count_if;
#X text 200 5924 returns the number of items that satisfy to external
predicate.;
#X obj 30 5961 list.delta;
#X text 200 5961 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5998 list.distribution;
#X text 200 5998 list value distribution;
#X obj 30 6025 list.do;
#X text 200 6025 iterate and modify list contents via side-chain;
#X obj 30 6052 list.each;
#X text 200 6052 maps each list value via external object(s);
#X obj 30 6079 list.enumerate;
#X text 200 6079 enumerates input list;
#X obj 30 6106 list.equal;
#X text 200 6106 checks if given lists are equal;
#X obj 30 6133 list.first;
#X text 200 6133 returns first list element;
#X obj 30 6160 list.gen;
#X text 200 6160 generates list of specified length via external
generator;
#X obj 30 6187 list.histogram;
#X text 200 6187 outputs distribution histogram;
#X obj 30 6214 list.insert;
#X text 200 6214 insert atom or list to the specified position of
input list;
#X obj 30 6241 list.integrator;
#X text 200 6241 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 6278 list.last;
#X text 200 6278 returns last list element;
#X obj 30 6305 list.length;
#X text 200 6305 returns the number of atoms in the list;
#X obj 30 6332 list.max;
#X text 200 6332 returns largest element in the list;
#X obj 30 6359 list.mean;
#X text 200 6359 calculates average of list of floats;
#X obj 30 6386 list.min;
#X text 200 6386 returns smallest element in the list;
#X obj 30 6413 list.none_of;
#X text 200 6413 checks if none of list atoms is accepted by
predicate;
#X obj 30 6440 list.normalize;
#X text 200 6440 normalizes float list values to get their sum = 1.0;
#X obj 30 6467 list.pass_if;
#X text 200 6467 leave only elements accepted by predicate;
#X obj 30 6494 list.prepend;
#X text 200 6494 prepend atom or list before input list;
#X obj 30 6521 list.product;
#X text 200 6521 calculates product of floats in list;
#X obj 30 6548 list.range;
#X text 200 6548 returns list smallest and largest value;
#X obj 30 6575 list.reduce;
#X text 200 6575 apply function of two arguments cumulatively to the
list;
#X obj 30 6602 list.remove;
#X text 200 6602 on input list remove element(s) at specified
positions;
#X obj 30 6629 list.remove_if;
#X text 200 6629 remove elements by predicate;
#X obj 30 6656 list.repack;
#X text 200 6656 repack input list to specified size;
#X obj 30 6683 list.repeat;
#X text 200 6683 creates new list by repeating given list specified
times;
#X obj 30 6710 list.resize;
#X text 200 6710 changes list size;
#X obj 30 6737 list.reverse;
#X text 200 6737 reverses the order of the elements in the list;
#X obj 30 6764 list.rldecode;
#X text 200 6764 Run-length list decoder (RLE);
#X obj 30 6791 list.rlencode;
#X text 200 6791 RLE (run-length encoding) for lists;
#X obj 30 6818 list.rotate;
#X text 200 6818 rotates list;
#X obj 30 6845 list.route;
#X text 200 6845 acts like [route] but for lists;
#X obj 30 6872 list.search;
#X text 200 6872 search specified items in input list;
#X obj 30 6899 list.separate;
#X text 200 6899 sends list elements one by one separately;
#X obj 30 6926 list.seq;
#X text 200 6926 numeric sequence list generator;
#X obj 30 6953 list.set;
#X text 200 6953 on input list set value at specified position;
#X obj 30 6980 list.shift;
#X text 200 6980 shifts the contents of the list with linear
interpolation;
#X obj 30 7007 list.shuffle;
#X text 200 7007 randomly rearranges elements in list;
#X obj 30 7034 list.slice;
#X text 200 7034 extract sublist;
#X obj 30 7061 list.sort;
#X text 200 7061 sorts list values by ascending order;
#X obj 30 7088 list.sort_with;
#X text 200 7088 sort list with user defined side-chain;
#X obj 30 7115 list.split;
#X text 200 7115 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 7152 list.stretch;
#X text 200 7152 stretches list - chenges its size with linear
interpolation.;
#X obj 30 7189 list.sum;
#X text 200 7189 calculates sum of floats in list;
#X obj 30 7216 list.unique;
#X text 200 7216 removes duplicates from input list;
#X obj 30 7243 list.unpack;
#X text 200 7243 unpack list elements to separate outlets;
#X obj 30 7270 list.unzip;
#X text 200 7270 splits list to N lists \, each to separate output;
#X obj 30 7297 list.walk;
#X text 200 7297 Walks thru the list;
#X obj 30 7324 list.zip;
#X text 200 7324 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7375 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7416 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7427 live.capture~;
#X text 200 7427 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7464 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7505 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7516 local.dict;
#X text 200 7516 local named dict object;
#X obj 30 7543 local.float;
#X text 200 7543 canvas-scoped named float variable;
#X obj 30 7570 local.int;
#X text 200 7570 canvas-scoped named integer variable;
#X obj 30 7597 local.list;
#X text 200 7597 local named list object;
#X obj 30 7624 local.mlist;
#X text 200 7624 local named mlist object;
#X obj 30 7651 local.set;
#X text 200 7651 local named set object;
#X obj 20 7678 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7719 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7730 math.abs;
#X text 200 7730 absolute value function;
#X obj 30 7757 math.acos;
#X text 200 7757 arc cosine function;
#X obj 30 7784 math.acosh;
#X text 200 7784 inverse hyperbolic cosine function;
#X obj 30 7811 math.and;
#X text 200 7811 operation AND for multiple arguments;
#X obj 30 7838 math.approx;
#X text 200 7838 check if input value approximately equal to pattern;
#X obj 30 7865 math.asin;
#X text 200 7865 arc sine function;
#X obj 30 7892 math.asinh;
#X text 200 7892 inverse hyperbolic sine function;
#X obj 30 7919 math.atan;
#X text 200 7919 arc tangent function;
#X obj 30 7946 math.atanh;
#X text 200 7946 inverse hyperbolic tangent function;
#X obj 30 7973 math.cbrt;
#X text 200 7973 cube root function;
#X obj 30 8000 math.cdiv~;
#X text 200 8000 division of complex signals;
#X obj 30 8027 math.ceil;
#X text 200 8027 round to smallest integral value not less than input
value;
#X obj 30 8054 math.cmul~;
#X text 200 8054 multiplication of complex signals;
#X obj 30 8081 math.cos;
#X text 200 8081 cosine function;
#X obj 30 8108 math.cosh;
#X text 200 8108 hyperbolic cosine function;
#X obj 30 8135 math.div;
#X text 200 8135 division (on lists too);
#X obj 30 8162 math.e;
#X text 200 8162 mathematical constant \, base of the natural
logarithm;
#X obj 30 8189 math.exp;
#X text 200 8189 exponential functions;
#X obj 30 8216 math.exp2;
#X text 200 8216 exponential functions;
#X obj 30 8243 math.expr;
#X text 200 8243 dynamic [expr];
#X obj 30 8270 math.floor;
#X text 200 8270 round to largest integral value not greater than x;
#X obj 30 8297 math.gcd;
#X text 200 8297 calculate greatest common divisor;
#X obj 30 8324 math.inf;
#X text 200 8324 infinity value that cannot be represented accurately;
#X obj 30 8351 math.lcm;
#X text 200 8351 calculate least common multiple;
#X obj 30 8378 math.log;
#X text 200 8378 logarithm functions;
#X obj 30 8405 math.log10;
#X text 200 8405 logarithm functions;
#X obj 30 8432 math.log2;
#X text 200 8432 logarithm functions;
#X obj 30 8459 math.mul;
#X text 200 8459 multiplication (on lists too);
#X obj 30 8486 math.nan;
#X text 200 8486 Not a Number \, unrepresentable value;
#X obj 30 8513 math.neg;
#X text 200 8513 negate function;
#X obj 30 8540 math.or;
#X text 200 8540 operation OR for multiple arguments;
#X obj 30 8567 math.pi;
#X text 200 8567 mathematical constant;
#X obj 30 8594 math.polyeval;
#X text 200 8594 evaluates the polynomial described by the
coefficients list;
#X obj 30 8621 math.reciprocal;
#X text 200 8621 calculate reciprocal number;
#X obj 30 8648 math.round;
#X text 200 8648 round to integral value \, regardless of rounding
direction;
#X obj 30 8675 math.round~;
#X text 200 8675 signal round;
#X obj 30 8702 math.sign;
#X text 200 8702 sign function;
#X obj 30 8729 math.sin;
#X text 200 8729 sine function;
#X obj 30 8756 math.sinh;
#X text 200 8756 hyperbolic sine function;
#X obj 30 8783 math.sqrt;
#X text 200 8783 square root function;
#X obj 30 8810 math.squared;
#X text 200 8810 value square;
#X obj 30 8837 math.tan;
#X text 200 8837 tangent function;
#X obj 30 8864 math.tanh;
#X text 200 8864 hyperbolic tangent function;
#X obj 30 8891 math.trunc;
#X text 200 8891 truncate to integer value;
#X obj 20 8918 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8959 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8970 midi.ctl2str;
#X text 200 8970 convert Standard MIDI Controllers number to name;
#X obj 30 8997 midi.event2ctl;
#X text 200 8997 convert MidiEvent message to controller channel/value
pair;
#X obj 30 9024 midi.event2note;
#X text 200 9024 convert MidiEvent message to midi note/velocity pair;
#X obj 30 9051 midi.event2prg;
#X text 200 9051 convert MidiEvent message to midi program change
value;
#X obj 30 9078 midi.file;
#X text 200 9078 standard midi file SMF reader and writer;
#X obj 30 9105 midi.key2str;
#X text 200 9105 convert key number to SPN name according to tonality;
#X obj 30 9132 midi.prg2str;
#X text 200 9132 convert GM Instrument number to name (string or
symbol);
#X obj 30 9159 midi.track;
#X text 200 9159 extract track from MidiFile;
#X obj 20 9186 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 9227 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9238 click~;
#X text 200 9238 Output single impulse on bang;
#X obj 30 9265 fluid~;
#X text 200 9265 FluidSynth SoundFont 2 player;
#X obj 30 9292 modplug~;
#X text 200 9292 MOD file player (using libmodplug);
#X obj 30 9319 speech.flite;
#X text 200 9319 render speech to array;
#X obj 20 9346 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9387 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9398 msg;
#X text 200 9398 message constructor;
#X obj 30 9425 msg.after;
#X text 200 9425 send specified message after incoming message;
#X obj 30 9452 msg.onload;
#X text 200 9452 send message when patch loads;
#X obj 20 9479 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9520 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9531 net.host2ip;
#X text 200 9531 returns IP address by DNS name;
#X obj 20 9558 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9599 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9610 noise.crackle~;
#X text 200 9610 sparse noise generator;
#X obj 30 9637 noise.lfreq0~;
#X text 200 9637 sampled/held noise (piecewise constant);
#X obj 30 9664 noise.lfreq~;
#X text 200 9664 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9691 noise.pink~;
#X text 200 9691 Pink noise generator;
#X obj 30 9718 noise.white~;
#X text 200 9718 White noise generator;
#X obj 20 9745 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9786 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9797 osc.blit~;
#X text 200 9797 Bandlimited impulse train oscillator;
#X obj 30 9824 osc.impulse~;
#X text 200 9824 Bandlimited impulse train generator;
#X obj 30 9851 osc.pulse~;
#X text 200 9851 Bandlimited pulse train oscillator;
#X obj 30 9878 osc.saw4~;
#X text 200 9878 Bandlimited sawtooth wave;
#X obj 30 9905 osc.saw~;
#X text 200 9905 Alias-free sawtooth wave;
#X obj 30 9932 osc.sinfb~;
#X text 200 9932 Sine oscilator with feedback;
#X obj 30 9959 osc.sin~;
#X text 200 9959 Sine wave oscillator;
#X obj 30 9986 osc.square~;
#X text 200 9986 Bandlimited square wave oscillator;
#X obj 30 10013 osc.tri~;
#X text 200 10013 Bandlimited triangle wave oscillator;
#X obj 20 10040 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 10081 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10092 canvas.current;
#X text 200 10092 verbose information about current canvas;
#X obj 30 10119 canvas.top;
#X text 200 10119 verbose information about top-level canvas;
#X obj 30 10146 patch.args;
#X text 200 10146 Get patch or subpatch arguments;
#X obj 20 10173 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 10214 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10225 path.basename;
#X text 200 10225 outputs filename portion of pathname;
#X obj 30 10252 path.dirname;
#X text 200 10252 outputs directory portion of pathname;
#X obj 30 10279 path.exists;
#X text 200 10279 checks if given path exists;
#X obj 30 10306 path.lsdir;
#X text 200 10306 list directory contents;
#X obj 20 10333 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10374 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10385 is_any;
#X text 200 10385 checks if input data has *any* type;
#X obj 30 10412 is_bang;
#X text 200 10412 checks if input data has *bang* type;
#X obj 30 10439 is_data;
#X text 200 10439 checks if input data has *data* type;
#X obj 30 10466 is_dict;
#X text 200 10466 checks if input data has *dict* type;
#X obj 30 10493 is_even;
#X text 200 10493 checks if input number is even;
#X obj 30 10520 is_file;
#X text 200 10520 checks if file exists and accessible;
#X obj 30 10547 is_float;
#X text 200 10547 checks if input data has *float* type;
#X obj 30 10574 is_list;
#X text 200 10574 checks if input data has *list* type;
#X obj 30 10601 is_odd;
#X text 200 10601 checks if input number is odd;
#X obj 30 10628 is_pointer;
#X text 200 10628 checks if input data has *pointer* type;
#X obj 30 10655 is_symbol;
#X text 200 10655 checks if input data has *symbol* type;
#X obj 20 10682 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10723 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10734 preset.float;
#X text 200 10734 load/store float preset;
#X obj 30 10761 preset.list;
#X text 200 10761 load/store symbol preset;
#X obj 30 10788 preset.storage;
#X text 200 10788 preset storage control;
#X obj 30 10815 preset.symbol;
#X text 200 10815 load/store symbol preset;
#X obj 20 10842 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10883 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10894 patch.props;
#X text 200 10894 patch properties manager;
#X obj 30 10921 prop;
#X text 200 10921 get/set named property value for subpatch or
abstraction;
#X obj 30 10948 prop.declare;
#X text 200 10948 declare named property for subpatch or abstraction;
#X obj 30 10975 prop.get;
#X text 200 10975 Property extractor;
#X obj 30 11002 prop.get~;
#X text 200 11002 Property extractor from sound stream;
#X obj 30 11029 prop.set;
#X text 200 11029 Property injector;
#X obj 20 11056 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 11097 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11108 proto.firmata;
#X text 200 11108 Firmata Arduino protocol support;
#X obj 20 11135 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 11176 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11187 random.discrete;
#X text 200 11187 random weighted integers on interval [0 \, n);
#X obj 30 11214 random.float;
#X text 200 11214 random float generator in specified range;
#X obj 30 11241 random.gauss;
#X text 200 11241 gaussian random distribution;
#X obj 30 11268 random.int;
#X text 200 11268 Random integer generator in specified range;
#X obj 30 11295 random.linear;
#X text 200 11295 random linear distribution;
#X obj 30 11322 random.pw_const;
#X text 200 11322 piecewise constant random distribution;
#X obj 30 11349 random.pw_lin;
#X text 200 11349 piecewise linear random distribution;
#X obj 20 11376 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11417 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11428 snd.file;
#X text 200 11428 Sound file loader on steroids;
#X obj 20 11455 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11496 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11507 pan.cos~;
#X text 200 11507 two channel equal power sine/cosine panner;
#X obj 30 11534 pan.linsig~;
#X text 200 11534 two channel linear panner with signal control;
#X obj 30 11561 pan.lin~;
#X text 200 11561 two channel linear panner;
#X obj 30 11588 pan.spread~;
#X text 200 11588 spreads input channels across the stereo field;
#X obj 30 11615 pan.sqrt~;
#X text 200 11615 two channel equal power square root panner;
#X obj 30 11642 spat.pan4~;
#X text 200 11642 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11669 spat.pan8~;
#X text 200 11669 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11696 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11737 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11748 string;
#X text 200 11748 string constructor;
#X obj 30 11775 string.contains;
#X text 200 11775 checks if given string contains specified substring;
#X obj 30 11802 string.ends_with;
#X text 200 11802 checks if given string ends with specified suffix;
#X obj 30 11829 string.equal;
#X text 200 11829 check strings for equality;
#X obj 30 11856 string.format;
#X text 200 11856 formats string like printf.;
#X obj 30 11883 string.join;
#X text 200 11883 joins (concatenates) strings with separator;
#X obj 30 11910 string.length;
#X text 200 11910 number of characters in string (unicode supported);
#X obj 30 11937 string.remove;
#X text 200 11937 remove substring from input string;
#X obj 30 11964 string.replace;
#X text 200 11964 replace from one substring to another in input
string;
#X obj 30 11991 string.split;
#X text 200 11991 split string by separator;
#X obj 30 12018 string.starts_with;
#X text 200 12018 checks if given string starts with specified prefix;
#X obj 30 12045 string.substr;
#X text 200 12045 extract substring from input string;
#X obj 30 12072 string2symbol;
#X text 200 12072 converts string to symbol;
#X obj 20 12099 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 12140 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12151 symbol.equal;
#X text 200 12151 check symbols for equality;
#X obj 30 12178 symbol.length;
#X text 200 12178 number of characters in symbol (unicode supported);
#X obj 30 12205 symbol.num_compare;
#X text 200 12205 numeric symbol compare;
#X obj 20 12232 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 12273 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12284 synth.bee3~;
#X text 200 12284 Hammond-oid organ FM synthesis instrument;
#X obj 30 12311 synth.birds~;
#X text 200 12311 bird singing generator;
#X obj 30 12338 synth.church_bell~;
#X text 200 12338 generic church bell modal model;
#X obj 30 12365 synth.dubdub~;
#X text 200 12365 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12402 synth.eguitar~;
#X text 200 12402 simple electric guitar model with steel strings;
#X obj 30 12429 synth.fgrain~;
#X text 200 12429 file granulator from STK;
#X obj 30 12456 synth.ks~;
#X text 200 12456 Karplus-Strong string;
#X obj 30 12483 synth.marimba~;
#X text 200 12483 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12520 synth.rhodey~;
#X text 200 12520 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12547 synth.risset_arp~;
#X text 200 12547 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12574 synth.risset_tone~;
#X text 200 12574 Jean Claude Risset's endless glissando;
#X obj 30 12601 synth.shakers~;
#X text 200 12601 various percussion sounds from STK library;
#X obj 30 12628 synth.wurley~;
#X text 200 12628 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12655 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12696 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12707 system.cursor;
#X text 200 12707 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12744 system.getenv;
#X text 200 12744 Get system environment variables;
#X obj 30 12771 system.hostname;
#X text 200 12771 outputs system hostname;
#X obj 30 12798 system.memsize;
#X text 200 12798 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12835 system.memused;
#X text 200 12835 returns the process physical memory use - current
and peak;
#X obj 30 12862 system.screen_size;
#X text 200 12862 returns current screen size in pixels;
#X obj 30 12889 system.shell;
#X text 200 12889 run external command in separate process;
#X obj 20 12916 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12957 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12968 tl.bang;
#X text 200 12968 Timeline bang (with possible delay);
#X obj 30 12998 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 12995 Timeline section;
#X obj 30 13018 tl.timeline;
#X text 200 13018 Timeline - event scheduler;
#X obj 30 13045 tl.toggle;
#X text 200 13045 Timeline bang;
#X obj 30 13072 tl.transport;
#X text 200 13072 Timeline transport control;
#X obj 20 13099 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 13140 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13154 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 13151 array view with cursor and selection;
#X obj 30 13177 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 13174 A bang... that's all;
#X obj 30 13200 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 13197 colorchooser widget;
#X obj 30 13223 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 13220 Display GUI object;
#X obj 30 13246 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 13243 GUI for turning DSP on/off;
#X obj 30 13269 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 13266 envelope editor widget;
#X obj 30 13292 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 13289 UI stereo gain control;
#X obj 30 13315 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 13312 UI gain control;
#X obj 30 13338 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 13335 simple icon with button capabilities;
#X obj 30 13361 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 13358 value increment/decrement;
#X obj 30 13384 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 13381 keyboard widget;
#X obj 30 13407 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 13404 knob widget;
#X obj 30 13430 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 13427 simple label widget;
#X obj 30 13453 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 13450 Hyperlink widget;
#X obj 30 13476 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 13473 The matrix of toggles has you.;
#X obj 30 13499 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 13496 Dropdown menu;
#X obj 30 13522 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 13519 Shows peak and rms signal level;
#X obj 30 13545 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 13542 counterpart of the vanilla [nbx];
#X obj 30 13568 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 13565 counterpart of the vanilla [nbx] for signal;
#X obj 30 13591 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 13588 Preset manager;
#X obj 30 13614 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 13611 counterpart of the vanilla radio toggle;
#X obj 30 13637 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 13634 range slider;
#X obj 30 13660 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 13657 Scope GUI object;
#X obj 30 13683 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 13680 counterpart of the vanilla slider;
#X obj 30 13706 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 13703 2D slider widget;
#X obj 30 13729 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 13726 Multiple slider widget;
#X obj 30 13752 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 13749 Spectroscope GUI object;
#X obj 30 13775 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 13772 displays a list of text buttons or text toggles;
#X obj 30 13798 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 13795 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13818 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13818 version: v0.7.1 \, license: GPL3;
#X obj 20 13837 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;