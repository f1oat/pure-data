#N canvas 0 0 785 555 12;
#X declare -lib ceammc;
#X obj 636 50 cnv 1 129 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 636 50 Websocket client;
#X obj 1 1 cnv 5 765 40 empty empty net.ws.client 20 20 0 20 -104026
-4096 0;
#X obj 646 11 net.ws.client;
#X text 50 118 you can start testing websocket server with command:
'websocat -s 8000 -t -v';
#X msg 50 162 connect ws://localhost:8000;
#N canvas 0 22 450 300 (subpatch) 0;
#X array WS-CLI 50 float 1;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X coords 0 100 50 0 92 18 1;
#X restore 414 162 graph;
#X msg 69 190 close;
#X msg 194 190 write MSG1;
#X msg 69 219 ping;
#X msg 194 219 write MSG2;
#X msg 69 248 latency;
#X msg 194 248 flush;
#X msg 69 277 send MESSAGE;
#X msg 213 277 send_json 1 2 A;
#X msg 88 305 send_array WS-CLI;
#X obj 50 334 net.ws.client;
#X obj 50 363 t a a;
#X obj 50 392 print;
#X obj 88 421 ui.dt;
#X obj 20 471 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 476 cnv 5 98 25 empty empty properties: 4 12 0 14 -262144
-49933 0;
#X obj 735 479 ui.link @background_color 0.98039 0.98039 0.98039
@title [?] @url ceammc.props-info.pd;
#X msg 110 511 @mode;
#X text 245 511 Get/Set parsing mode for incoming messages. If 'fudi'
- interpret incoming websocket data as Pd messages \, if 'sym' - always
interpret as symbols \, 'data' - parse ceammc data \, 'json' - convert
json values to ceammc data. Type: symbol. Default value: fudi. Allowed
values: data \, fudi \, json \, sym.;
#X obj 20 608 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 613 cnv 5 73 25 empty empty methods: 4 12 0 14 -262144
-49933 0;
#X msg 110 648 close;
#X text 245 648 gracefully close connection (with websocket handshake).;
#X msg 110 676 connect;
#X text 245 676 connect to websocket server. Arguments are:;
#X obj 255 699 cnv 1 29 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 699 URL: url - ws://HOST:PORT/ \, for ex.: ws://127.0.0.1:9000/path.
Type: symbol.;
#X msg 110 739 flush;
#X text 245 739 flush output stream: sends all buffered messages.;
#X msg 110 767 latency;
#X text 245 767 measure rountrip latency. Outputs: latency TIME_MSEC.;
#X msg 110 795 ping;
#X text 245 795 send ping message to server (on server answer outputs:
pong DATA). Arguments are:;
#X obj 255 833 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 833 [DATA]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 858 send;
#X text 245 858 send as text message. Arguments are:;
#X obj 255 881 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 881 [ARGS]: arguments. Type: list.;
#X msg 110 906 send_array;
#X text 245 906 send as Pd array content as json array. Arguments are:;
#X obj 255 929 cnv 1 31 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 929 ARR: array name. Type: symbol.;
#X obj 255 952 cnv 1 70 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 952 [START=0]: array start index. Type: int. Min value:
0\. Units: 'samp'.;
#X obj 255 990 cnv 1 63 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 990 [LENGTH]: read length. If not specified - read until
array end. Type: int. Min value: 0\. Units: 'samp'.;
#X msg 110 1030 send_binary;
#X text 245 1030 send as binary bytes. Arguments are:;
#X obj 255 1053 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1053 [ARGS]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 1078 send_json;
#X text 245 1078 send as encoded json. Arguments are:;
#X obj 255 1101 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1101 [ARGS]: arguments. Type: list.;
#X msg 110 1126 write;
#X text 245 1126 write as text message to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1164 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1164 [ARGS]: arguments. Type: list.;
#X msg 110 1189 write_binary;
#X text 245 1189 write as binary bytes to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1227 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1227 [ARGS]: list of integers in [0\..255] range. Type:
list.;
#X msg 110 1252 write_json;
#X text 245 1252 write as encoded json to output buffer. You have to
call [flush( method for sending. Arguments are:;
#X obj 255 1290 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1290 [ARGS]: arguments. Type: list.;
#X obj 20 1325 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1330 cnv 5 64 25 empty empty inlets: 4 12 0 14 -262144
-49933 0;
#X text 110 1331 1\.;
#X text 245 1331 message input.;
#X obj 20 1361 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1366 cnv 5 73 25 empty empty outlets: 4 12 0 14 -262144
-49933 0;
#X text 110 1367 1\.;
#X text 245 1367 output messages: latency \, ping \, text \, binary
\, closed \, connected \, disconnected.;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 68 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 116 45 ::;
#X obj 133 48 ui.link @title net @url ceammc.net-help.pd;
#X obj 1 1432 cnv 5 765 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 1435 library: ceammc v0.9.7;
#X text 570 1447 see also:;
#X obj 645 1447 net.ws.server;
#N canvas 10 1454 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.9.7;
#X text 10 54 object:;
#X text 120 54 net.ws.client;
#X text 10 76 category:;
#X text 120 76 net;
#X text 10 98 since:;
#X text 120 98 0.9.8;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3 or later;
#X text 10 164 keywords:;
#X text 120 164 websocket \, net \, client;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pd-ceammc @url
https://github.com/uliss/pd-ceammc;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 1454 pd info;
#X connect 5 0 16 0;
#X connect 13 0 16 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 17 1 19 0;
#X connect 7 0 16 0;
#X connect 9 0 16 0;
#X connect 11 0 16 0;
#X connect 8 0 16 0;
#X connect 10 0 16 0;
#X connect 12 0 16 0;
#X connect 14 0 16 0;