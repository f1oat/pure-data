#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 30 369 array.vplay;
#X text 175 369 simple array player for using with vline~;
#X obj 20 396 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 451 ui.link @title [function] @url function-help.pd;
#X text 175 448 named function;
#X obj 30 471 function.call;
#X text 175 471 call named function;
#X obj 30 498 gain~;
#X text 175 498 multislot signal gain;
#X obj 30 525 matrix~;
#X text 175 525 signal routing matrix;
#X obj 30 552 metro.pattern;
#X text 175 552 metro with rhythmic patterns;
#X obj 30 579 metro.seq;
#X text 175 579 metro sequencer;
#X obj 30 606 mix~;
#X text 175 606 multislot signal mixer;
#X obj 30 633 obj.props;
#X text 175 633 property extractor;
#X obj 30 660 radio;
#X text 175 660 float index to outlet values as radio switch;
#X obj 30 687 window;
#X text 175 687 returns window value by given window position;
#X obj 30 714 xfade2~;
#X text 175 714 multi stereo-signal crossfade;
#X obj 30 741 xfade~;
#X text 175 741 multi signal crossfade;
#X obj 20 768 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 809 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 820 array.p2s;
#X text 175 820 convert array phase [0\..1] to sample position;
#X obj 30 847 array.s2p;
#X text 175 847 convert array sample position to relative phase
position [0\..1];
#X obj 30 884 conv.amp2dbfs;
#X text 175 884 convert from amplitude to decibel full scale;
#X obj 30 911 conv.bpm2hz;
#X text 175 911 converts BPM to frequency in herz;
#X obj 30 938 conv.bpm2ms;
#X text 175 938 convert frequency in BPM to period in milliseconds;
#X obj 30 965 conv.bpm2sec;
#X text 175 965 convert frequency in BPM to period in seconds;
#X obj 30 992 conv.cc2amp;
#X text 175 992 convert from MIDI Control Change range;
#X obj 30 1019 conv.dbfs2amp;
#X text 175 1019 convert decibel full scale to amplitude;
#X obj 30 1046 conv.lin2curve;
#X text 175 1046 map linear to exponential range with 0 allowed.;
#X obj 30 1073 conv.lin2exp;
#X text 175 1073 maps linear range to exponential range;
#X obj 30 1100 conv.lin2lin;
#X text 175 1100 convert from one linear range to another;
#X obj 30 1127 conv.midi2freq;
#X text 175 1127 convert from midi pitch to frequency in hz (with
various base A and temperament);
#X obj 30 1164 conv.pitch2midi;
#X text 175 1164 converts symbol pitch name to MIDI note number;
#X obj 30 1191 conv.samp2sec;
#X text 175 1191 convert samples to time according to samplerate;
#X obj 30 1218 conv.sec2samp;
#X text 175 1218 convert time in seconds to number of samples
according to current samplerate;
#X obj 30 1255 conv.sec2str;
#X text 175 1255 converts float time in seconds to formated symbol (or
string);
#X obj 30 1292 conv.str2sec;
#X text 175 1292 converts formatted time to float value in seconds;
#X obj 20 1319 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 1360 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1371 data.dict;
#X text 175 1371 dictionary container: store values by key;
#X obj 30 1398 data.fifo;
#X text 175 1398 First-In-First-Out (FIFO) queue data container;
#X obj 30 1425 data.float;
#X text 175 1425 robust float object;
#X obj 30 1452 data.int;
#X text 175 1452 robust int object;
#X obj 30 1479 data.list;
#X text 175 1479 list container;
#X obj 30 1506 data.mlist;
#X text 175 1506 multidimensional list container;
#X obj 30 1533 data.set;
#X text 175 1533 container that store unique elements;
#X obj 30 1560 data.set2list;
#X text 175 1560 converts set to list;
#X obj 30 1587 dict.contains;
#X text 175 1587 predicate to check dict contains key;
#X obj 30 1614 dict.each;
#X text 175 1614 map each value in dict;
#X obj 30 1641 dict.get;
#X text 175 1641 on input dict outputs value to corresponding key
outlet;
#X obj 30 1668 dict.keys;
#X text 175 1668 get list of dict keys;
#X obj 30 1695 dict.pass;
#X text 175 1695 passes specified keys in dict;
#X obj 30 1722 dict.size;
#X text 175 1722 dictionary size;
#X obj 30 1749 dict.values;
#X text 175 1749 dictionary values as mlist;
#X obj 30 1776 mlist.flatten;
#X text 175 1776 flatten nested mlist;
#X obj 30 1803 set.contains;
#X text 175 1803 check if specified element is in set;
#X obj 30 1830 set.diff;
#X text 175 1830 difference between two sets;
#X obj 30 1857 set.equal;
#X text 175 1857 checks if two sets are equal (contains same
elements);
#X obj 30 1884 set.intersect;
#X text 175 1884 output intersection of given sets;
#X obj 30 1911 set.size;
#X text 175 1911 get number of elements in set;
#X obj 30 1938 set.symdiff;
#X text 175 1938 symmetric difference between two sets;
#X obj 30 1965 set.union;
#X text 175 1965 output union of given sets;
#X obj 20 1992 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 2033 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2044 dyn.comp2~;
#X text 175 2044 stereo dynamic range compressor;
#X obj 30 2071 dyn.comp~;
#X text 175 2071 mono dynamic range compressors;
#X obj 30 2098 dyn.gate2~;
#X text 175 2098 stereo signal gate;
#X obj 30 2125 dyn.gate~;
#X text 175 2125 mono signal gate;
#X obj 30 2152 dyn.limit2~;
#X text 175 2152 stereo 1176LN Peak Limiter;
#X obj 30 2179 dyn.limit~;
#X text 175 2179 mono 1176LN Peak Limiter;
#X obj 30 2206 dyn.softclip~;
#X text 175 2206 soft signal clip;
#X obj 20 2233 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 2274 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2285 env.adsr~;
#X text 175 2285 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 2312 env.ar~;
#X text 175 2312 Attack/Release envelope generator;
#X obj 30 2339 env.asr~;
#X text 175 2339 Attack/Sustain/Release envelope generator;
#X obj 30 2366 env.concat;
#X text 175 2366 Envelope concatenation;
#X obj 30 2393 env.follow~;
#X text 175 2393 Envelope follower with independent attack and release
times.;
#X obj 30 2430 env.mix;
#X text 175 2430 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 2467 env.smooth~;
#X text 175 2467 An envelope with an exponential attack and release;
#X obj 30 2494 env.tscale;
#X text 175 2494 Envelope time-scale;
#X obj 30 2521 env.tshift;
#X text 175 2521 Envelope time-shift (horizontal);
#X obj 30 2548 env.vscale;
#X text 175 2548 Envelope value-scale;
#X obj 30 2575 env2array;
#X text 175 2575 Renders envelope to specified array;
#X obj 30 2602 env2vline;
#X text 175 2602 Converts envelope to bunch of vline messages;
#X obj 30 2629 envelope;
#X text 175 2629 Envelope data type;
#X obj 30 2656 vline2env;
#X text 175 2656 Converts vline messages to env;
#X obj 20 2683 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 2724 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2735 expand_env;
#X text 175 2735 Substitute enviroment variables in data stream;
#X obj 30 2762 flow.append;
#X text 175 2762 inject message into flow;
#X obj 30 2789 flow.change;
#X text 175 2789 rejects redundant input values;
#X obj 30 2816 flow.count;
#X text 175 2816 control flow event counter;
#X obj 30 2843 flow.demultiplex;
#X text 175 2843 control flow demultiplexer;
#X obj 30 2870 flow.demultiplex2~;
#X text 175 2870 audio stream stereo demultiplexer;
#X obj 30 2897 flow.demultiplex~;
#X text 175 2897 audio stream demultiplexer;
#X obj 30 2924 flow.gate;
#X text 175 2924 control flow gate. [spigot] analog;
#X obj 30 2951 flow.group;
#X text 175 2951 group data atoms in list of specified size;
#X obj 30 2978 flow.interval;
#X text 175 2978 measure time between flow events;
#X obj 30 3005 flow.less;
#X text 175 3005 numeric stream router \, like many [moses];
#X obj 30 3032 flow.less_eq;
#X text 175 3032 numeric stream router \, like many [moses];
#X obj 30 3059 flow.multiplex;
#X text 175 3059 control flow multiplexer;
#X obj 30 3086 flow.multiplex2~;
#X text 175 3086 audio stream stereo multiplexer;
#X obj 30 3113 flow.multiplex~;
#X text 175 3113 audio stream multiplexer;
#X obj 30 3140 flow.once;
#X text 175 3140 one message pass thru;
#X obj 30 3167 flow.pass;
#X text 175 3167 pass specified values;
#X obj 30 3194 flow.pass_if;
#X text 175 3194 pass values that accepted by predicate object;
#X obj 30 3221 flow.reject;
#X text 175 3221 reject specified values;
#X obj 30 3248 flow.reject_if;
#X text 175 3248 reject values by predicate;
#X obj 30 3275 flow.route;
#X text 175 3275 advanced message router;
#X obj 30 3302 flow.speedlim;
#X text 175 3302 control stream speed limiter;
#X obj 30 3329 flow.split;
#X text 175 3329 split data flow by external side-chain predicate;
#X obj 30 3356 flow.sync;
#X text 175 3356 bus with only hot inlets;
#X obj 30 3383 flow.tee~;
#X text 175 3383 separate audio and control streams;
#X obj 30 3410 replace;
#X text 175 3410 Replace atoms in data stream;
#X obj 20 3437 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 3478 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3489 flt.biquad~;
#X text 175 3489 second order IIR filter.;
#X obj 30 3516 flt.bpf12~;
#X text 175 3516 Band-pass filter with 12/db per octave slope;
#X obj 30 3543 flt.bpf24~;
#X text 175 3543 Band-pass filter with 24/db per octave slope;
#X obj 30 3570 flt.c_bpf~;
#X text 175 3570 BPF coefficient calculator for biquad filter;
#X obj 30 3597 flt.c_highshelf~;
#X text 175 3597 Highshelf filter coefficient calculator for biquad;
#X obj 30 3624 flt.c_hpf~;
#X text 175 3624 HPF coefficient calculator for biquad filter;
#X obj 30 3651 flt.c_lowshelf~;
#X text 175 3651 Lowshelf filter coefficient calculator for biquad;
#X obj 30 3678 flt.c_lpf~;
#X text 175 3678 LPF coefficient calculator for biquad filter;
#X obj 30 3705 flt.c_notch~;
#X text 175 3705 Band-reject coefficient calculator for biquad filter;
#X obj 30 3732 flt.c_peak~;
#X text 175 3732 Peaking equalizer calculator for biquad;
#X obj 30 3759 flt.dcblock2~;
#X text 175 3759 stereo DC blocker;
#X obj 30 3786 flt.dcblock~;
#X text 175 3786 mono DC blocker;
#X obj 30 3813 flt.eq10~;
#X text 175 3813 graphic 10 band equalizer;
#X obj 30 3840 flt.eq_peak_cq~;
#X text 175 3840 constant-Q second order peaking equalizer section;
#X obj 30 3867 flt.eq_peak~;
#X text 175 3867 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 3918 flt.highshelf~;
#X text 175 3918 gain boost|cut above some frequency;
#X obj 30 3945 flt.hpf12~;
#X text 175 3945 High-pass filter with 12/db per octave slope;
#X obj 30 3972 flt.hpf24~;
#X text 175 3972 High-pass filter with 24/db per octave slope;
#X obj 30 3999 flt.lowshelf~;
#X text 175 3999 gain boost|cut below some frequency;
#X obj 30 4026 flt.lpf12~;
#X text 175 4026 Low-pass filter with 12/db per octave slope;
#X obj 30 4053 flt.lpf24~;
#X text 175 4053 Low-pass filter with 24/db per octave slope;
#X obj 30 4080 flt.moog_vcf~;
#X text 175 4080 Moog Voltage Controlled Filter;
#X obj 30 4107 flt.notch~;
#X text 175 4107 band-rejection filter;
#X obj 30 4134 flt.resonbp~;
#X text 175 4134 Simple resonant bandpass filter;
#X obj 20 4161 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 4202 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4213 fx.bitdown~;
#X text 175 4213 bit downer and downsampler effect;
#X obj 30 4240 fx.chorus~;
#X text 175 4240 Chorus effect;
#X obj 30 4267 fx.distortion~;
#X text 175 4267 cubic nonlinearity distortion;
#X obj 30 4294 fx.drive~;
#X text 175 4294 Guitarix drive effect;
#X obj 30 4321 fx.drone_box~;
#X text 175 4321 mono sympathetic resonance generator;
#X obj 30 4348 fx.echo~;
#X text 175 4348 simple echo effect;
#X obj 30 4375 fx.flanger~;
#X text 175 4375 mono flanging effect;
#X obj 30 4402 fx.freeverb2~;
#X text 175 4402 freeverb2 - stereo version of freeverb;
#X obj 30 4429 fx.freeverb~;
#X text 175 4429 freeverb - common used open-source reverb;
#X obj 30 4456 fx.freqshift~;
#X text 175 4456 frequency shifter or single-sideband ring modulation;
#X obj 30 4483 fx.granulator~;
#X text 175 4483 simple input stream granulator;
#X obj 30 4510 fx.greyhole~;
#X text 175 4510 A complex echo-like effect;
#X obj 30 4537 fx.looper~;
#X text 175 4537 One track looper;
#X obj 30 4564 fx.pitchshift~;
#X text 175 4564 simple pitch shifter based on 2 delay lines;
#X obj 30 4591 fx.sdelay~;
#X text 175 4591 smooth delay with a feedback control;
#X obj 30 4618 fx.wahwah~;
#X text 175 4618 digitized CryBaby wah pedal;
#X obj 30 4645 fx.zita_rev1~;
#X text 175 4645 Zita stereo reverb;
#X obj 20 4672 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 4713 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4724 global.dict;
#X text 175 4724 global named dict object;
#X obj 30 4751 global.float;
#X text 175 4751 global named float object;
#X obj 30 4778 global.int;
#X text 175 4778 global named integer object;
#X obj 30 4805 global.list;
#X text 175 4805 global named list object;
#X obj 30 4832 global.mlist;
#X text 175 4832 global named mlist object;
#X obj 30 4859 global.set;
#X text 175 4859 global named set object;
#X obj 20 4886 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 4927 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4938 hw.arduino;
#X text 175 4938 Arduino device;
#X obj 20 4965 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 5006 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5017 lfo.+pulse~;
#X text 175 5017 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 5044 lfo.+saw~;
#X text 175 5044 Positive unit-amplitude low frequency saw wave;
#X obj 30 5071 lfo.+square~;
#X text 175 5071 Positive low frequency square wave;
#X obj 30 5098 lfo.+tri~;
#X text 175 5098 Positive unit-amplitude low frequency triangle wave;
#X obj 30 5125 lfo.impulse~;
#X text 175 5125 Unit-amplitude low-frequency impulse train;
#X obj 30 5152 lfo.pulse~;
#X text 175 5152 Full-range unit-amplitude low frequency pulse train;
#X obj 30 5179 lfo.saw~;
#X text 175 5179 Full-range unit-amplitude low frequency saw;
#X obj 30 5206 lfo.square~;
#X text 175 5206 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 5233 lfo.tri~;
#X text 175 5233 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 5260 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 5301 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5312 list.^at;
#X text 175 5312 on input index(es) outputs list element(s);
#X obj 30 5339 list.^contains;
#X text 175 5339 on input atom or list checks if specified list
contains it;
#X obj 30 5366 list.^search;
#X text 175 5366 on input atom returns it index in list;
#X obj 30 5393 list.all_of;
#X text 175 5393 checks if all list atoms accepted by predicate;
#X obj 30 5420 list.any_of;
#X text 175 5420 checks if at least one list element is accepted by
predicate;
#X obj 30 5457 list.append;
#X text 175 5457 append atom or list to the end of input list;
#X obj 30 5484 list.apply_to;
#X text 175 5484 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 5521 list.at;
#X text 175 5521 on input list outputs element(s) at specified
index(es);
#X obj 30 5548 list.choice;
#X text 175 5548 returns random element from list;
#X obj 30 5575 list.contains;
#X text 175 5575 on input list checks if it contains specified
subsequence;
#X obj 30 5602 list.count;
#X text 175 5602 returns the number of items that equal to specified
value;
#X obj 30 5629 list.count_if;
#X text 175 5629 returns the number of items that satisfy to external
predicate.;
#X obj 30 5666 list.delta;
#X text 175 5666 returns the difference between the current list of
floats and the previous one.;
#X obj 30 5703 list.distribution;
#X text 175 5703 list value distribution;
#X obj 30 5730 list.do;
#X text 175 5730 iterate and modify list contents via side-chain;
#X obj 30 5757 list.each;
#X text 175 5757 maps each list value via external object(s);
#X obj 30 5784 list.enumerate;
#X text 175 5784 enumerates input list;
#X obj 30 5811 list.equal;
#X text 175 5811 checks if given lists are equal;
#X obj 30 5838 list.first;
#X text 175 5838 returns first list element;
#X obj 30 5865 list.gen;
#X text 175 5865 generates list of specified length via external
generator;
#X obj 30 5892 list.histogram;
#X text 175 5892 outputs distribution histogram;
#X obj 30 5919 list.insert;
#X text 175 5919 insert atom or list to the specified position of
input list;
#X obj 30 5946 list.integrator;
#X text 175 5946 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 5983 list.last;
#X text 175 5983 returns last list element;
#X obj 30 6010 list.length;
#X text 175 6010 returns the number of atoms in the list;
#X obj 30 6037 list.max;
#X text 175 6037 returns largest element in the list;
#X obj 30 6064 list.mean;
#X text 175 6064 calculates average of list of floats;
#X obj 30 6091 list.min;
#X text 175 6091 returns smallest element in the list;
#X obj 30 6118 list.none_of;
#X text 175 6118 checks if none of list atoms is accepted by
predicate;
#X obj 30 6145 list.normalize;
#X text 175 6145 normalizes float list values to get their sum = 1.0;
#X obj 30 6172 list.pass_if;
#X text 175 6172 leave only elements accepted by predicate;
#X obj 30 6199 list.prepend;
#X text 175 6199 prepend atom or list before input list;
#X obj 30 6226 list.product;
#X text 175 6226 calculates product of floats in list;
#X obj 30 6253 list.range;
#X text 175 6253 returns list smallest and largest value;
#X obj 30 6280 list.reduce;
#X text 175 6280 apply function of two arguments cumulatively to the
list;
#X obj 30 6307 list.remove;
#X text 175 6307 on input list remove element(s) at specified
positions;
#X obj 30 6334 list.remove_if;
#X text 175 6334 remove elements by predicate;
#X obj 30 6361 list.repack;
#X text 175 6361 repack input list to specified size;
#X obj 30 6388 list.repeat;
#X text 175 6388 creates new list by repeating given list specified
times;
#X obj 30 6415 list.resize;
#X text 175 6415 changes list size;
#X obj 30 6442 list.reverse;
#X text 175 6442 reverses the order of the elements in the list;
#X obj 30 6469 list.rldecode;
#X text 175 6469 Run-length list decoder (RLE);
#X obj 30 6496 list.rlencode;
#X text 175 6496 RLE (run-length encoding) for lists;
#X obj 30 6523 list.rotate;
#X text 175 6523 rotates list;
#X obj 30 6550 list.route;
#X text 175 6550 acts like [route] but for lists;
#X obj 30 6577 list.search;
#X text 175 6577 search specified items in input list;
#X obj 30 6604 list.separate;
#X text 175 6604 sends list elements one by one separately;
#X obj 30 6631 list.seq;
#X text 175 6631 numeric sequence list generator;
#X obj 30 6658 list.set;
#X text 175 6658 on input list set value at specified position;
#X obj 30 6685 list.shift;
#X text 175 6685 shifts the contents of the list with linear
interpolation;
#X obj 30 6712 list.shuffle;
#X text 175 6712 randomly rearranges elements in list;
#X obj 30 6739 list.slice;
#X text 175 6739 extract sublist;
#X obj 30 6766 list.sort;
#X text 175 6766 sorts list values by ascending order;
#X obj 30 6793 list.sort_with;
#X text 175 6793 sort list with user defined side-chain;
#X obj 30 6820 list.split;
#X text 175 6820 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 6857 list.stretch;
#X text 175 6857 stretches list - chenges its size with linear
interpolation.;
#X obj 30 6894 list.sum;
#X text 175 6894 calculates sum of floats in list;
#X obj 30 6921 list.unique;
#X text 175 6921 removes duplicates from input list;
#X obj 30 6948 list.unpack;
#X text 175 6948 unpack list elements to separate outlets;
#X obj 30 6975 list.unzip;
#X text 175 6975 splits list to N lists \, each to separate output;
#X obj 30 7002 list.walk;
#X text 175 7002 Walks thru the list;
#X obj 30 7029 list.zip;
#X text 175 7029 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 20 7080 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 7121 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7132 live.capture~;
#X text 175 7132 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 7169 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 7210 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7221 local.dict;
#X text 175 7221 local named dict object;
#X obj 30 7248 local.float;
#X text 175 7248 canvas-scoped named float variable;
#X obj 30 7275 local.int;
#X text 175 7275 canvas-scoped named integer variable;
#X obj 30 7302 local.list;
#X text 175 7302 local named list object;
#X obj 30 7329 local.mlist;
#X text 175 7329 local named mlist object;
#X obj 30 7356 local.set;
#X text 175 7356 local named set object;
#X obj 20 7383 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 7424 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7435 math.abs;
#X text 175 7435 absolute value function;
#X obj 30 7462 math.acos;
#X text 175 7462 arc cosine function;
#X obj 30 7489 math.acosh;
#X text 175 7489 inverse hyperbolic cosine function;
#X obj 30 7516 math.and;
#X text 175 7516 operation AND for multiple arguments;
#X obj 30 7543 math.approx;
#X text 175 7543 check if input value approximately equal to pattern;
#X obj 30 7570 math.asin;
#X text 175 7570 arc sine function;
#X obj 30 7597 math.asinh;
#X text 175 7597 inverse hyperbolic sine function;
#X obj 30 7624 math.atan;
#X text 175 7624 arc tangent function;
#X obj 30 7651 math.atanh;
#X text 175 7651 inverse hyperbolic tangent function;
#X obj 30 7678 math.cbrt;
#X text 175 7678 cube root function;
#X obj 30 7705 math.cdiv~;
#X text 175 7705 division of complex signals;
#X obj 30 7732 math.ceil;
#X text 175 7732 round to smallest integral value not less than input
value;
#X obj 30 7759 math.cmul~;
#X text 175 7759 multiplication of complex signals;
#X obj 30 7786 math.cos;
#X text 175 7786 cosine function;
#X obj 30 7813 math.cosh;
#X text 175 7813 hyperbolic cosine function;
#X obj 30 7840 math.div;
#X text 175 7840 division (on lists too);
#X obj 30 7867 math.e;
#X text 175 7867 mathematical constant \, base of the natural
logarithm;
#X obj 30 7894 math.exp;
#X text 175 7894 exponential functions;
#X obj 30 7921 math.exp2;
#X text 175 7921 exponential functions;
#X obj 30 7948 math.expr;
#X text 175 7948 dynamic [expr];
#X obj 30 7975 math.floor;
#X text 175 7975 round to largest integral value not greater than x;
#X obj 30 8002 math.gcd;
#X text 175 8002 calculate greatest common divisor;
#X obj 30 8029 math.inf;
#X text 175 8029 infinity value that cannot be represented accurately;
#X obj 30 8056 math.lcm;
#X text 175 8056 calculate least common multiple;
#X obj 30 8083 math.log;
#X text 175 8083 logarithm functions;
#X obj 30 8110 math.log10;
#X text 175 8110 logarithm functions;
#X obj 30 8137 math.log2;
#X text 175 8137 logarithm functions;
#X obj 30 8164 math.mul;
#X text 175 8164 multiplication (on lists too);
#X obj 30 8191 math.nan;
#X text 175 8191 Not a Number \, unrepresentable value;
#X obj 30 8218 math.neg;
#X text 175 8218 negate function;
#X obj 30 8245 math.or;
#X text 175 8245 operation OR for multiple arguments;
#X obj 30 8272 math.pi;
#X text 175 8272 mathematical constant;
#X obj 30 8299 math.polyeval;
#X text 175 8299 evaluates the polynomial described by the
coefficients list;
#X obj 30 8326 math.reciprocal;
#X text 175 8326 calculate reciprocal number;
#X obj 30 8353 math.round;
#X text 175 8353 round to integral value \, regardless of rounding
direction;
#X obj 30 8380 math.round~;
#X text 175 8380 signal round;
#X obj 30 8407 math.sign;
#X text 175 8407 sign function;
#X obj 30 8434 math.sin;
#X text 175 8434 sine function;
#X obj 30 8461 math.sinh;
#X text 175 8461 hyperbolic sine function;
#X obj 30 8488 math.sqrt;
#X text 175 8488 square root function;
#X obj 30 8515 math.squared;
#X text 175 8515 value square;
#X obj 30 8542 math.tan;
#X text 175 8542 tangent function;
#X obj 30 8569 math.tanh;
#X text 175 8569 hyperbolic tangent function;
#X obj 30 8596 math.trunc;
#X text 175 8596 truncate to integer value;
#X obj 20 8623 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 8664 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8675 midi.ctl2str;
#X text 175 8675 convert Standard MIDI Controllers number to name;
#X obj 30 8702 midi.event2ctl;
#X text 175 8702 convert MidiEvent message to controller channel/value
pair;
#X obj 30 8729 midi.event2note;
#X text 175 8729 convert MidiEvent message to midi note/velocity pair;
#X obj 30 8756 midi.event2prg;
#X text 175 8756 convert MidiEvent message to midi program change
value;
#X obj 30 8783 midi.file;
#X text 175 8783 standard midi file SMF reader and writer;
#X obj 30 8810 midi.key2str;
#X text 175 8810 convert key number to SPN name according to tonality;
#X obj 30 8837 midi.prg2str;
#X text 175 8837 convert GM Instrument number to name (string or
symbol);
#X obj 30 8864 midi.track;
#X text 175 8864 extract track from MidiFile;
#X obj 20 8891 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 8932 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8943 click~;
#X text 175 8943 Output single impulse on bang;
#X obj 30 8970 fluid~;
#X text 175 8970 FluidSynth SoundFont 2 player;
#X obj 30 8997 modplug~;
#X text 175 8997 MOD file player (using libmodplug);
#X obj 30 9024 speech.flite;
#X text 175 9024 render speech to array;
#X obj 20 9051 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 9092 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9103 msg;
#X text 175 9103 message constructor;
#X obj 30 9130 msg.after;
#X text 175 9130 send specified message after incoming message;
#X obj 30 9157 msg.onload;
#X text 175 9157 send message when patch loads;
#X obj 20 9184 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933 0;
#X obj 20 9225 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9236 net.host2ip;
#X text 175 9236 returns IP address by DNS name;
#X obj 20 9263 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 9304 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9315 noise.crackle~;
#X text 175 9315 sparse noise generator;
#X obj 30 9342 noise.lfreq0~;
#X text 175 9342 sampled/held noise (piecewise constant);
#X obj 30 9369 noise.lfreq~;
#X text 175 9369 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 9396 noise.pink~;
#X text 175 9396 Pink noise generator;
#X obj 30 9423 noise.white~;
#X text 175 9423 White noise generator;
#X obj 20 9450 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 9491 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9502 osc.blit~;
#X text 175 9502 Bandlimited impulse train oscillator;
#X obj 30 9529 osc.impulse~;
#X text 175 9529 Bandlimited impulse train generator;
#X obj 30 9556 osc.pulse~;
#X text 175 9556 Bandlimited pulse train oscillator;
#X obj 30 9583 osc.saw4~;
#X text 175 9583 Bandlimited sawtooth wave;
#X obj 30 9610 osc.saw~;
#X text 175 9610 Alias-free sawtooth wave;
#X obj 30 9637 osc.sinfb~;
#X text 175 9637 Sine oscilator with feedback;
#X obj 30 9664 osc.sin~;
#X text 175 9664 Sine wave oscillator;
#X obj 30 9691 osc.square~;
#X text 175 9691 Bandlimited square wave oscillator;
#X obj 30 9718 osc.tri~;
#X text 175 9718 Bandlimited triangle wave oscillator;
#X obj 20 9745 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 9786 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9797 canvas.current;
#X text 175 9797 verbose information about current canvas;
#X obj 30 9824 canvas.top;
#X text 175 9824 verbose information about top-level canvas;
#X obj 30 9851 patch.args;
#X text 175 9851 Get patch or subpatch arguments;
#X obj 20 9878 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 9919 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9930 path.basename;
#X text 175 9930 outputs filename portion of pathname;
#X obj 30 9957 path.dirname;
#X text 175 9957 outputs directory portion of pathname;
#X obj 30 9984 path.exists;
#X text 175 9984 checks if given path exists;
#X obj 30 10011 path.lsdir;
#X text 175 10011 list directory contents;
#X obj 20 10038 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 10079 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10090 is_any;
#X text 175 10090 checks if input data has *any* type;
#X obj 30 10117 is_bang;
#X text 175 10117 checks if input data has *bang* type;
#X obj 30 10144 is_data;
#X text 175 10144 checks if input data has *data* type;
#X obj 30 10171 is_dict;
#X text 175 10171 checks if input data has *dict* type;
#X obj 30 10198 is_even;
#X text 175 10198 checks if input number is even;
#X obj 30 10225 is_file;
#X text 175 10225 checks if file exists and accessible;
#X obj 30 10252 is_float;
#X text 175 10252 checks if input data has *float* type;
#X obj 30 10279 is_list;
#X text 175 10279 checks if input data has *list* type;
#X obj 30 10306 is_odd;
#X text 175 10306 checks if input number is odd;
#X obj 30 10333 is_pointer;
#X text 175 10333 checks if input data has *pointer* type;
#X obj 30 10360 is_symbol;
#X text 175 10360 checks if input data has *symbol* type;
#X obj 20 10387 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 10428 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10439 preset.float;
#X text 175 10439 load/store float preset;
#X obj 30 10466 preset.list;
#X text 175 10466 load/store symbol preset;
#X obj 30 10493 preset.storage;
#X text 175 10493 preset storage control;
#X obj 30 10520 preset.symbol;
#X text 175 10520 load/store symbol preset;
#X obj 20 10547 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 10588 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10599 prop.get;
#X text 175 10599 Property extractor;
#X obj 30 10626 prop.get~;
#X text 175 10626 Property extractor from sound stream;
#X obj 30 10653 prop.set;
#X text 175 10653 Property injector;
#X obj 20 10680 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 10721 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10732 proto.firmata;
#X text 175 10732 Firmata Arduino protocol support;
#X obj 20 10759 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 10800 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10811 random.discrete;
#X text 175 10811 random weighted integers on interval [0 \, n);
#X obj 30 10838 random.float;
#X text 175 10838 random float generator in specified range;
#X obj 30 10865 random.gauss;
#X text 175 10865 gaussian random distribution;
#X obj 30 10892 random.int;
#X text 175 10892 Random integer generator in specified range;
#X obj 30 10919 random.linear;
#X text 175 10919 random linear distribution;
#X obj 30 10946 random.pw_const;
#X text 175 10946 piecewise constant random distribution;
#X obj 30 10973 random.pw_lin;
#X text 175 10973 piecewise linear random distribution;
#X obj 20 11000 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 11041 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11052 snd.file;
#X text 175 11052 Sound file loader on steroids;
#X obj 20 11079 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 11120 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11131 pan.cos~;
#X text 175 11131 two channel equal power sine/cosine panner;
#X obj 30 11158 pan.linsig~;
#X text 175 11158 two channel linear panner with signal control;
#X obj 30 11185 pan.lin~;
#X text 175 11185 two channel linear panner;
#X obj 30 11212 pan.spread~;
#X text 175 11212 spreads input channels across the stereo field;
#X obj 30 11239 pan.sqrt~;
#X text 175 11239 two channel equal power square root panner;
#X obj 30 11266 spat.pan4~;
#X text 175 11266 GMEM SPAT: 4-outputs spatializer;
#X obj 30 11293 spat.pan8~;
#X text 175 11293 GMEM SPAT: 8-outputs spatializer;
#X obj 20 11320 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 11361 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11372 string;
#X text 175 11372 string constructor;
#X obj 30 11399 string.contains;
#X text 175 11399 checks if given string contains specified substring;
#X obj 30 11426 string.ends_with;
#X text 175 11426 checks if given string ends with specified suffix;
#X obj 30 11453 string.equal;
#X text 175 11453 check strings for equality;
#X obj 30 11480 string.format;
#X text 175 11480 formats string like printf.;
#X obj 30 11507 string.join;
#X text 175 11507 joins (concatenates) strings with separator;
#X obj 30 11534 string.length;
#X text 175 11534 number of characters in string (unicode supported);
#X obj 30 11561 string.remove;
#X text 175 11561 remove substring from input string;
#X obj 30 11588 string.replace;
#X text 175 11588 replace from one substring to another in input
string;
#X obj 30 11615 string.split;
#X text 175 11615 split string by separator;
#X obj 30 11642 string.starts_with;
#X text 175 11642 checks if given string starts with specified prefix;
#X obj 30 11669 string.substr;
#X text 175 11669 extract substring from input string;
#X obj 30 11696 string2symbol;
#X text 175 11696 converts string to symbol;
#X obj 20 11723 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 11764 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11775 symbol.equal;
#X text 175 11775 check symbols for equality;
#X obj 30 11802 symbol.length;
#X text 175 11802 number of characters in symbol (unicode supported);
#X obj 30 11829 symbol.num_compare;
#X text 175 11829 numeric symbol compare;
#X obj 20 11856 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 11897 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11908 synth.bee3~;
#X text 175 11908 Hammond-oid organ FM synthesis instrument;
#X obj 30 11935 synth.birds~;
#X text 175 11935 bird singing generator;
#X obj 30 11962 synth.church_bell~;
#X text 175 11962 generic church bell modal model;
#X obj 30 11989 synth.dubdub~;
#X text 175 11989 simple synth based on a sawtooth wave filtered by a
resonant lowpass;
#X obj 30 12026 synth.eguitar~;
#X text 175 12026 simple electric guitar model with steel strings;
#X obj 30 12053 synth.fgrain~;
#X text 175 12053 file granulator from STK;
#X obj 30 12080 synth.ks~;
#X text 175 12080 Karplus-Strong string;
#X obj 30 12107 synth.marimba~;
#X text 175 12107 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 12144 synth.rhodey~;
#X text 175 12144 STK Fender Rhodes electric piano FM synthesis
instrument;
#X obj 30 12171 synth.risset_arp~;
#X text 175 12171 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 12198 synth.risset_tone~;
#X text 175 12198 Jean Claude Risset's endless glissando;
#X obj 30 12225 synth.shakers~;
#X text 175 12225 various percussion sounds from STK library;
#X obj 30 12252 synth.wurley~;
#X text 175 12252 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 12279 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 12320 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12331 system.cursor;
#X text 175 12331 Get information about cursor motion \, mousewheel
and buttonclick;
#X obj 30 12368 system.getenv;
#X text 175 12368 Get system environment variables;
#X obj 30 12395 system.hostname;
#X text 175 12395 outputs system hostname;
#X obj 30 12422 system.memsize;
#X text 175 12422 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 12459 system.memused;
#X text 175 12459 returns the process physical memory use - current
and peak;
#X obj 30 12486 system.screen_size;
#X text 175 12486 returns current screen size in pixels;
#X obj 30 12513 system.shell;
#X text 175 12513 run external command in separate process;
#X obj 20 12540 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 12581 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12592 tl.bang;
#X text 175 12592 Timeline bang (with possible delay);
#X obj 30 12622 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 12619 Timeline section;
#X obj 30 12642 tl.timeline;
#X text 175 12642 Timeline - event scheduler;
#X obj 30 12669 tl.toggle;
#X text 175 12669 Timeline bang;
#X obj 30 12696 tl.transport;
#X text 175 12696 Timeline transport control;
#X obj 20 12723 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 12764 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12778 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 175 12775 array view with cursor and selection;
#X obj 30 12801 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 12798 A bang... that's all;
#X obj 30 12824 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 175 12821 colorchooser widget;
#X obj 30 12847 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 12844 Display GUI object;
#X obj 30 12870 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 175 12867 GUI for turning DSP on/off;
#X obj 30 12893 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 175 12890 envelope editor widget;
#X obj 30 12916 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 175 12913 UI stereo gain control;
#X obj 30 12939 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 175 12936 UI gain control;
#X obj 30 12962 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 175 12959 simple icon with button capabilities;
#X obj 30 12985 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 12982 value increment/decrement;
#X obj 30 13008 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 13005 keyboard widget;
#X obj 30 13031 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 13028 knob widget;
#X obj 30 13054 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 175 13051 simple label widget;
#X obj 30 13077 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 13074 Hyperlink widget;
#X obj 30 13100 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 13097 The matrix of toggles has you.;
#X obj 30 13123 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 13120 Dropdown menu;
#X obj 30 13146 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 13143 Shows peak and rms signal level;
#X obj 30 13169 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 13166 counterpart of the vanilla [nbx];
#X obj 30 13192 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 13189 counterpart of the vanilla [nbx] for signal;
#X obj 30 13215 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 13212 Preset manager;
#X obj 30 13238 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 13235 counterpart of the vanilla radio toggle;
#X obj 30 13261 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 13258 range slider;
#X obj 30 13284 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 13281 Scope GUI object;
#X obj 30 13307 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 13304 counterpart of the vanilla slider;
#X obj 30 13330 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 13327 2D slider widget;
#X obj 30 13353 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 13350 Multiple slider widget;
#X obj 30 13376 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 13373 Spectroscope GUI object;
#X obj 30 13399 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 13396 displays a list of text buttons or text toggles;
#X obj 30 13422 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 13419 modern toggle widget;
#X obj 20 13442 cnv 5 69 31 empty empty vector 4 13 0 17 -262144
-49933 0;
#X obj 20 13483 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13494 vector.distance;
#X text 175 13494 returns euclidean distance between two points;
#X obj 30 13521 vector.dot;
#X text 175 13521 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 13572 vector.length;
#X text 175 13572 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 13609 vector.normalize;
#X text 175 13609 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 13636 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 13636 version: v0.6 \, license: GPL3;
#X obj 20 13655 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;