#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 20 369 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 424 ui.link @title [function] @url function-help.pd;
#X text 175 421 named function;
#X obj 30 444 function.call;
#X text 175 444 call named function;
#X obj 30 471 window;
#X text 175 471 returns window value by given window position;
#X obj 20 498 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 539 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 550 array.p2s;
#X text 175 550 convert array phase [0\..1] to sample position;
#X obj 30 577 array.s2p;
#X text 175 577 convert array sample position to relative phase
position [0\..1];
#X obj 30 614 conv.bpm2hz;
#X text 175 614 converts BPM to frequency in herz;
#X obj 30 641 conv.bpm2ms;
#X text 175 641 convert frequency in BPM to period in milliseconds;
#X obj 30 668 conv.bpm2sec;
#X text 175 668 convert frequency in BPM to period in seconds;
#X obj 30 695 conv.cc2amp;
#X text 175 695 convert from MIDI Control Change range;
#X obj 30 722 conv.lin2curve;
#X text 175 722 map linear to exponential range with 0 allowed.;
#X obj 30 749 conv.lin2exp;
#X text 175 749 maps linear range to exponential range;
#X obj 30 776 conv.lin2lin;
#X text 175 776 convert from one linear range to another;
#X obj 30 803 conv.pitch2midi;
#X text 175 803 converts symbol pitch name to MIDI note number;
#X obj 30 830 conv.samp2sec;
#X text 175 830 convert samples to time according to samplerate;
#X obj 30 857 conv.sec2samp;
#X text 175 857 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 894 conv.sec2str;
#X text 175 894 converts float time in seconds to formated symbol (or
string);
#X obj 30 931 conv.str2sec;
#X text 175 931 converts formatted time to float value in seconds;
#X obj 20 958 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 999 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1010 data.fifo;
#X text 175 1010 First-In-First-Out (FIFO) queue data container;
#X obj 30 1037 data.list;
#X text 175 1037 list container;
#X obj 30 1064 data.set;
#X text 175 1064 container that store unique elements;
#X obj 30 1091 data.set2list;
#X text 175 1091 converts set to list;
#X obj 30 1118 set.contains;
#X text 175 1118 check if specified element is in set;
#X obj 30 1145 set.diff;
#X text 175 1145 difference between two sets;
#X obj 30 1172 set.equal;
#X text 175 1172 checks if two sets are equal (contains same
elements);
#X obj 30 1199 set.intersect;
#X text 175 1199 output intersection of given sets;
#X obj 30 1226 set.size;
#X text 175 1226 get number of elements in set;
#X obj 30 1253 set.symdiff;
#X text 175 1253 symmetric difference between two sets;
#X obj 30 1280 set.union;
#X text 175 1280 output union of given sets;
#X obj 20 1307 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1348 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1359 dyn.comp2~;
#X text 175 1359 stereo dynamic range compressor;
#X obj 30 1386 dyn.comp~;
#X text 175 1386 mono dynamic range compressors;
#X obj 30 1413 dyn.gate2~;
#X text 175 1413 stereo signal gate;
#X obj 30 1440 dyn.gate~;
#X text 175 1440 mono signal gate;
#X obj 30 1467 dyn.limit2~;
#X text 175 1467 stereo 1176LN Peak Limiter;
#X obj 30 1494 dyn.limit~;
#X text 175 1494 mono 1176LN Peak Limiter;
#X obj 30 1521 dyn.softclip~;
#X text 175 1521 soft signal clip;
#X obj 20 1548 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1589 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1600 env.adsr~;
#X text 175 1600 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1627 env.ar~;
#X text 175 1627 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1664 env.follow~;
#X text 175 1664 Envelope follower with independent attack and release
times.;
#X obj 20 1701 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1742 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1753 expand_env;
#X text 175 1753 Substitute enviroment variables in data stream;
#X obj 30 1780 flow.change;
#X text 175 1780 rejects redundant input values;
#X obj 30 1807 flow.count;
#X text 175 1807 control flow event counter;
#X obj 30 1834 flow.demultiplex;
#X text 175 1834 control flow demultiplexer;
#X obj 30 1861 flow.gate;
#X text 175 1861 control flow gate. [spigot] analog;
#X obj 30 1888 flow.group;
#X text 175 1888 group data atoms in list of specified size;
#X obj 30 1915 flow.less;
#X text 175 1915 numeric stream router \, like many [moses];
#X obj 30 1942 flow.less_eq;
#X text 175 1942 numeric stream router \, like many [moses];
#X obj 30 1969 flow.multiplex;
#X text 175 1969 control flow multiplexer;
#X obj 30 1996 flow.pass;
#X text 175 1996 pass specified values;
#X obj 30 2023 flow.pass_if;
#X text 175 2023 pass values that accepted by predicate object;
#X obj 30 2050 flow.reject;
#X text 175 2050 reject specified values;
#X obj 30 2077 flow.reject_if;
#X text 175 2077 reject values by predicate;
#X obj 30 2104 flow.speedlim;
#X text 175 2104 control stream speed limitier;
#X obj 30 2131 flow.split;
#X text 175 2131 split data flow by external side-chain predicate;
#X obj 30 2158 flow.sync;
#X text 175 2158 bus with only hot inlets;
#X obj 30 2185 flow.tee~;
#X text 175 2185 separate audio and control streams;
#X obj 30 2212 replace;
#X text 175 2212 Replace atoms in data stream;
#X obj 20 2239 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2280 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2291 flt.biquad~;
#X text 175 2291 second order IIR filter.;
#X obj 30 2318 flt.bpf12~;
#X text 175 2318 Band-pass filter with 12/db per octave slope;
#X obj 30 2345 flt.bpf24~;
#X text 175 2345 Band-pass filter with 24/db per octave slope;
#X obj 30 2372 flt.c_bpf~;
#X text 175 2372 BPF coefficent calculator for biquad filter;
#X obj 30 2399 flt.c_highshelf~;
#X text 175 2399 Highshelf filter coefficent calculator for biquad;
#X obj 30 2426 flt.c_hpf~;
#X text 175 2426 HPF coefficent calculator for biquad filter;
#X obj 30 2453 flt.c_lowshelf~;
#X text 175 2453 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2480 flt.c_lpf~;
#X text 175 2480 LPF coefficent calculator for biquad filter;
#X obj 30 2507 flt.c_notch~;
#X text 175 2507 Band-reject coefficent calculator for biquad filter;
#X obj 30 2534 flt.c_peak~;
#X text 175 2534 Peaking equalizer calculator for biquad.;
#X obj 30 2561 flt.dcblock2~;
#X text 175 2561 stereo DC blocker;
#X obj 30 2588 flt.dcblock~;
#X text 175 2588 mono DC blocker;
#X obj 30 2615 flt.eq_peak~;
#X text 175 2615 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2666 flt.highshelf~;
#X text 175 2666 gain boost|cut above some frequency;
#X obj 30 2693 flt.hpf12~;
#X text 175 2693 High-pass filter with 12/db per octave slope;
#X obj 30 2720 flt.hpf24~;
#X text 175 2720 High-pass filter with 24/db per octave slope;
#X obj 30 2747 flt.lowshelf~;
#X text 175 2747 gain boost|cut below some frequency;
#X obj 30 2774 flt.lpf12~;
#X text 175 2774 Low-pass filter with 12/db per octave slope;
#X obj 30 2801 flt.lpf24~;
#X text 175 2801 Low-pass filter with 24/db per octave slope;
#X obj 30 2828 flt.notch~;
#X text 175 2828 band-rejection filter;
#X obj 30 2855 flt.resonbp~;
#X text 175 2855 Simple resonant bandpass filter;
#X obj 20 2882 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2923 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2934 fx.distortion~;
#X text 175 2934 cubic nonlinearity distortion;
#X obj 30 2961 fx.flanger~;
#X text 175 2961 mono flanging effect;
#X obj 30 2988 fx.freeverb2~;
#X text 175 2988 freeverb2 - stereo version of freeverb;
#X obj 30 3015 fx.freeverb~;
#X text 175 3015 freeverb - common used open-source reverb;
#X obj 30 3042 fx.freqshift~;
#X text 175 3042 frequency shifter or single-sideband ring modulation;
#X obj 30 3069 fx.pitchshift~;
#X text 175 3069 simple pitch shifter based on 2 delay lines;
#X obj 30 3096 fx.zita_rev1~;
#X text 175 3096 Zita stereo reverb;
#X obj 20 3123 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3164 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3175 global.float;
#X text 175 3175 global named float object;
#X obj 30 3202 global.int;
#X text 175 3202 global named integer object;
#X obj 30 3229 global.list;
#X text 175 3229 global named list object;
#X obj 20 3256 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 3297 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3308 hw.arduino;
#X text 175 3308 Arduino device;
#X obj 20 3335 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3376 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3387 lfo.impulse~;
#X text 175 3387 Unit-amplitude low-frequency impulse train;
#X obj 30 3414 lfo.square~;
#X text 175 3414 Positive low frequence square wave;
#X obj 30 3441 lfo.tri~;
#X text 175 3441 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3468 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3509 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3520 list.all_of;
#X text 175 3520 checks if all list atoms accepted by predicate;
#X obj 30 3547 list.any_of;
#X text 175 3547 checks if at least one list element is accepted by
predicate;
#X obj 30 3584 list.apply_to;
#X text 175 3584 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3621 list.at;
#X text 175 3621 returns list element(s) at given position(s);
#X obj 30 3648 list.choice;
#X text 175 3648 returns random element from list;
#X obj 30 3675 list.count;
#X text 175 3675 returns the number of items that equal to specified
value;
#X obj 30 3702 list.count_if;
#X text 175 3702 returns the number of items that satisfy to external
predicate.;
#X obj 30 3739 list.deinterleave;
#X text 175 3739 splits list to N lists \, each to separate output;
#X obj 30 3766 list.delta;
#X text 175 3766 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3803 list.distribution;
#X text 175 3803 list value distribution;
#X obj 30 3830 list.each;
#X text 175 3830 maps each list value via external object(s);
#X obj 30 3857 list.enumerate;
#X text 175 3857 enumerates input list;
#X obj 30 3884 list.equal;
#X text 175 3884 checks if given lists are equal;
#X obj 30 3911 list.first;
#X text 175 3911 returns first list element;
#X obj 30 3938 list.gen;
#X text 175 3938 generates list of specified length via external
generator;
#X obj 30 3965 list.histogram;
#X text 175 3965 outputs distibution histogram;
#X obj 30 3992 list.integrator;
#X text 175 3992 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 4029 list.interleave;
#X text 175 4029 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 4080 list.last;
#X text 175 4080 returns last list element;
#X obj 30 4107 list.length;
#X text 175 4107 returns the number of atoms in the message;
#X obj 30 4134 list.max;
#X text 175 4134 returns largest element in the list;
#X obj 30 4161 list.mean;
#X text 175 4161 calculates average of list of floats;
#X obj 30 4188 list.min;
#X text 175 4188 returns smallest element in the list;
#X obj 30 4215 list.none_of;
#X text 175 4215 checks if none of list atoms is accepted by
predicate;
#X obj 30 4242 list.normalize;
#X text 175 4242 normalizes float list values to get their sum = 1.0;
#X obj 30 4269 list.pass_if;
#X text 175 4269 leave only elements accepted by predicate;
#X obj 30 4296 list.product;
#X text 175 4296 calculates product of floats in list;
#X obj 30 4323 list.range;
#X text 175 4323 returns list smallest and largest value;
#X obj 30 4350 list.reduce;
#X text 175 4350 apply function of two arguments cumulatively to the
list;
#X obj 30 4377 list.remove_if;
#X text 175 4377 remove elements by predicate;
#X obj 30 4404 list.repack;
#X text 175 4404 repack input list to specified size;
#X obj 30 4431 list.repeat;
#X text 175 4431 creates new list by repeating given list specified
times;
#X obj 30 4458 list.resize;
#X text 175 4458 changes list size;
#X obj 30 4485 list.reverse;
#X text 175 4485 reverses the order of the elements in the list;
#X obj 30 4512 list.rotate;
#X text 175 4512 rotates list left;
#X obj 30 4539 list.route;
#X text 175 4539 acts like [route] but for lists;
#X obj 30 4566 list.separate;
#X text 175 4566 sends list elements one by one separately;
#X obj 30 4593 list.seq;
#X text 175 4593 numeric sequence list generator;
#X obj 30 4620 list.shuffle;
#X text 175 4620 randomly rearranges elements in list;
#X obj 30 4647 list.slice;
#X text 175 4647 extract sublist;
#X obj 30 4674 list.sort;
#X text 175 4674 sorts list values by ascending order;
#X obj 30 4701 list.sort_with;
#X text 175 4701 sort list with user defined side-chain;
#X obj 30 4728 list.split;
#X text 175 4728 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 4765 list.sum;
#X text 175 4765 calculates sum of floats in list;
#X obj 30 4792 list.unique;
#X text 175 4792 sorts and removes duplicates from input list;
#X obj 30 4819 list.unpack;
#X text 175 4819 unpack list elements to separate outlets;
#X obj 30 4846 list.unwrap;
#X text 175 4846 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4883 list.walk;
#X text 175 4883 Walks thru the list;
#X obj 30 4910 list.wrap;
#X text 175 4910 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4961 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 5002 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5013 live.capture~;
#X text 175 5013 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 5050 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 5091 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5102 local.float;
#X text 175 5102 canvas-scoped named float variable;
#X obj 30 5129 local.int;
#X text 175 5129 canvas-scoped named integer variable;
#X obj 30 5156 local.list;
#X text 175 5156 local named list object;
#X obj 20 5183 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5224 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5235 math.abs;
#X text 175 5235 absolute value function;
#X obj 30 5262 math.acos;
#X text 175 5262 arc cosine function;
#X obj 30 5289 math.acosh;
#X text 175 5289 inverse hyperbolic cosine function;
#X obj 30 5316 math.and;
#X text 175 5316 operation AND for multiple arguments;
#X obj 30 5343 math.approx;
#X text 175 5343 check if input value approximately equal to pattern;
#X obj 30 5370 math.asin;
#X text 175 5370 arc sine function;
#X obj 30 5397 math.asinh;
#X text 175 5397 inverse hyperbolic sine function;
#X obj 30 5424 math.atan;
#X text 175 5424 arc tangent function;
#X obj 30 5451 math.atanh;
#X text 175 5451 inverse hyperbolic tangent function;
#X obj 30 5478 math.cbrt;
#X text 175 5478 cube root function;
#X obj 30 5505 math.ceil;
#X text 175 5505 round to smallest integral value not less than input
value;
#X obj 30 5532 math.cos;
#X text 175 5532 cosine function;
#X obj 30 5559 math.cosh;
#X text 175 5559 hyperbolic cosine function;
#X obj 30 5586 math.e;
#X text 175 5586 mathematical constant \, base of the natural
logarithm;
#X obj 30 5613 math.exp;
#X text 175 5613 exponential functions;
#X obj 30 5640 math.exp2;
#X text 175 5640 exponential functions;
#X obj 30 5667 math.floor;
#X text 175 5667 round to largest integral value not greater than x;
#X obj 30 5694 math.gcd;
#X text 175 5694 calculate greatest common divisor;
#X obj 30 5721 math.inf;
#X text 175 5721 infinity value that cannot be represented accurately;
#X obj 30 5748 math.lcm;
#X text 175 5748 calculate least common multiple;
#X obj 30 5775 math.log;
#X text 175 5775 logarithm functions;
#X obj 30 5802 math.log10;
#X text 175 5802 logarithm functions;
#X obj 30 5829 math.log2;
#X text 175 5829 logarithm functions;
#X obj 30 5856 math.nan;
#X text 175 5856 Not a Number \, unrepresentable value;
#X obj 30 5883 math.neg;
#X text 175 5883 negate function;
#X obj 30 5910 math.or;
#X text 175 5910 operation OR for multiple arguments;
#X obj 30 5937 math.pi;
#X text 175 5937 mathematical constant;
#X obj 30 5964 math.reciprocal;
#X text 175 5964 calculate reciprocal number;
#X obj 30 5991 math.round;
#X text 175 5991 round to integral value \, regardless of rounding
direction;
#X obj 30 6018 math.round~;
#X text 175 6018 signal round;
#X obj 30 6045 math.sign;
#X text 175 6045 sign function;
#X obj 30 6072 math.sin;
#X text 175 6072 sine function;
#X obj 30 6099 math.sinh;
#X text 175 6099 hyperbolic sine function;
#X obj 30 6126 math.sqrt;
#X text 175 6126 square root function;
#X obj 30 6153 math.squared;
#X text 175 6153 value square;
#X obj 30 6180 math.tan;
#X text 175 6180 tangent function;
#X obj 30 6207 math.tanh;
#X text 175 6207 hyperbolic tangent function;
#X obj 30 6234 math.trunc;
#X text 175 6234 truncate to integer value;
#X obj 20 6261 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 6302 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6313 midi.ctl2str;
#X text 175 6313 convert Standard MIDI Controllers number to name;
#X obj 30 6340 midi.event2ctl;
#X text 175 6340 convert MidiEvent message to controller channel/value
pair;
#X obj 30 6367 midi.event2note;
#X text 175 6367 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6394 midi.event2prg;
#X text 175 6394 convert MidiEvent message to midi program change
value;
#X obj 30 6421 midi.file;
#X text 175 6421 standard midi file SMF reader and writer;
#X obj 30 6448 midi.key2str;
#X text 175 6448 convert key number to SPN name according to tonality;
#X obj 30 6475 midi.prg2str;
#X text 175 6475 convert GM Instrument number to name (string or
symbol);
#X obj 30 6502 midi.track;
#X text 175 6502 extract track from MidiFile;
#X obj 20 6529 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 6570 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6581 click~;
#X text 175 6581 Output single impulse on bang;
#X obj 30 6608 modplug~;
#X text 175 6608 MOD file player (using libmodplug);
#X obj 20 6635 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 6676 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6687 msg;
#X text 175 6687 message constructor;
#X obj 20 6714 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 6755 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6766 noise.pink~;
#X text 175 6766 Pink noise generator;
#X obj 30 6793 noise.white~;
#X text 175 6793 White noise generator;
#X obj 20 6820 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 6861 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6872 osc.impulse~;
#X text 175 6872 Bandlimited impulse train generator;
#X obj 30 6899 osc.pulse~;
#X text 175 6899 Bandlimited pulse train oscillator.;
#X obj 30 6926 osc.saw~;
#X text 175 6926 Bandlimited saw wave oscillator;
#X obj 30 6953 osc.sinfb~;
#X text 175 6953 sine oscilator with feedback;
#X obj 30 6980 osc.square~;
#X text 175 6980 Bandlimited square wave oscillator;
#X obj 30 7007 osc.tri~;
#X text 175 7007 Bandlimited triangle wave oscillator;
#X obj 20 7034 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 7075 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7086 canvas.current;
#X text 175 7086 verbose information about current canvas;
#X obj 30 7113 canvas.top;
#X text 175 7113 verbose information about top-level canvas;
#X obj 30 7140 patch.args;
#X text 175 7140 Get patch or subpatch arguments;
#X obj 20 7167 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 7208 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7219 path.basename;
#X text 175 7219 outputs filename portion of pathname;
#X obj 30 7246 path.dirname;
#X text 175 7246 outputs directory portion of pathname;
#X obj 30 7273 path.exists;
#X text 175 7273 checks if given path exists;
#X obj 30 7300 path.lsdir;
#X text 175 7300 list directory contents;
#X obj 20 7327 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 7368 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7379 is_any;
#X text 175 7379 checks if input data has *any* type;
#X obj 30 7406 is_bang;
#X text 175 7406 checks if input data has *bang* type;
#X obj 30 7433 is_even;
#X text 175 7433 checks if input number is even;
#X obj 30 7460 is_file;
#X text 175 7460 checks if file exists and accessible;
#X obj 30 7487 is_float;
#X text 175 7487 checks if input data has *float* type;
#X obj 30 7514 is_list;
#X text 175 7514 checks if input data has *list* type;
#X obj 30 7541 is_odd;
#X text 175 7541 checks if input number is odd;
#X obj 30 7568 is_pointer;
#X text 175 7568 checks if input data has *pointer* type;
#X obj 30 7595 is_symbol;
#X text 175 7595 checks if input data has *symbol* type;
#X obj 20 7622 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 7663 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7674 preset.float;
#X text 175 7674 load/store float preset;
#X obj 30 7701 preset.list;
#X text 175 7701 load/store symbol preset;
#X obj 30 7728 preset.storage;
#X text 175 7728 preset storage control;
#X obj 30 7755 preset.symbol;
#X text 175 7755 load/store symbol preset;
#X obj 20 7782 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 7823 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7834 prop.get;
#X text 175 7834 Property extractor;
#X obj 30 7861 prop.set;
#X text 175 7861 Property injector;
#X obj 20 7888 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 7929 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7940 proto.firmata;
#X text 175 7940 Firmata Arduino protocol support;
#X obj 20 7967 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 8008 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8019 random.discrete;
#X text 175 8019 random weighted integers on interval [0 \, n);
#X obj 30 8046 random.float;
#X text 175 8046 random float generator in specified range;
#X obj 30 8073 random.gauss;
#X text 175 8073 gaussian random distribution;
#X obj 30 8100 random.int;
#X text 175 8100 Random integer generator in specified range;
#X obj 30 8127 random.linear;
#X text 175 8127 random linear distribution;
#X obj 30 8154 random.pw_const;
#X text 175 8154 piecewise constant random distribution;
#X obj 30 8181 random.pw_lin;
#X text 175 8181 piecewise linear random distribution;
#X obj 20 8208 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 8249 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8260 snd.file;
#X text 175 8260 Sound file loader on steroids;
#X obj 20 8287 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 8328 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8339 string;
#X text 175 8339 string constructor;
#X obj 30 8366 string.contains;
#X text 175 8366 checks if given string contains specified substring;
#X obj 30 8393 string.ends_with;
#X text 175 8393 checks if given string ends with specified suffix;
#X obj 30 8420 string.equal;
#X text 175 8420 check strings for equality;
#X obj 30 8447 string.format;
#X text 175 8447 formats string like printf.;
#X obj 30 8474 string.join;
#X text 175 8474 joins (concatenates) strings with separator;
#X obj 30 8501 string.length;
#X text 175 8501 number of characters in string (unicode supported);
#X obj 30 8528 string.remove;
#X text 175 8528 remove substring from input string;
#X obj 30 8555 string.replace;
#X text 175 8555 replace from one substring to another in input
string;
#X obj 30 8582 string.split;
#X text 175 8582 split string by separator;
#X obj 30 8609 string.starts_with;
#X text 175 8609 checks if given string starts with specified prefix;
#X obj 30 8636 string.substr;
#X text 175 8636 extract substring from input string;
#X obj 30 8663 string2symbol;
#X text 175 8663 converts string to symbol;
#X obj 20 8690 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 8731 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8742 symbol.equal;
#X text 175 8742 check symbols for equality;
#X obj 30 8769 symbol.length;
#X text 175 8769 number of characters in symbol (unicode supported);
#X obj 30 8796 symbol.num_compare;
#X text 175 8796 numeric symbol compare;
#X obj 20 8823 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 8864 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8875 system.cursor;
#X text 175 8875 Get information about cursor motion \, mousewheel and
buttonclick;
#X obj 30 8912 system.getenv;
#X text 175 8912 Get system environment variables;
#X obj 30 8939 system.hostname;
#X text 175 8939 outputs system hostname;
#X obj 30 8966 system.memsize;
#X text 175 8966 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 9003 system.memused;
#X text 175 9003 returns the process physical memory use - current and
peak;
#X obj 30 9030 system.screen_size;
#X text 175 9030 returns current screen size in pixels;
#X obj 20 9057 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 9098 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9112 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 9109 Timeline bang;
#X obj 30 9135 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 9132 Timeline section;
#X obj 30 9155 tl.transport;
#X text 175 9155 Timeline transport control;
#X obj 30 9185 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 9182 A bang... that's all;
#X obj 30 9208 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 9205 Breakpoint function GUI object;
#X obj 30 9231 ui.link @title [ui.colorpanel] @url ui.colorpanel-
help.pd;
#X text 175 9228 colorchooser widget;
#X obj 30 9254 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 9251 Display GUI object;
#X obj 30 9277 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 175 9274 value increment/decrement;
#X obj 30 9300 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 9297 keyboard widget;
#X obj 30 9323 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 9320 knob widget;
#X obj 30 9346 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 175 9343 Hyperlink widget;
#X obj 30 9369 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 9366 The matrix of toggles has you.;
#X obj 30 9392 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 175 9389 Dropdown menu;
#X obj 30 9415 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 175 9412 counterpart of the vanilla [vu]. Shows peak signal
level;
#X obj 30 9438 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 175 9435 counterpart of the vanilla [nbx];
#X obj 30 9461 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 175 9458 counterpart of the vanilla [nbx] for signal;
#X obj 30 9484 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 175 9481 Cream GUI preset manager;
#X obj 30 9507 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 175 9504 counterpart of the vanilla radio toggle;
#X obj 30 9530 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 175 9527 rangle slider;
#X obj 30 9553 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 9550 Scope GUI object;
#X obj 30 9576 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 175 9573 counterpart of the vanilla slider;
#X obj 30 9599 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 9596 2D slider widget;
#X obj 30 9622 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 9619 Multiple slider widget;
#X obj 30 9645 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 9642 Spectroscope GUI object;
#X obj 30 9668 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 175 9665 displays a list of text buttons or text toggles;
#X obj 30 9691 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 9688 modern toggle widget;
#X obj 20 9711 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 9752 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9763 vector.distance;
#X text 175 9763 returns euclidean distance between two points;
#X obj 30 9790 vector.dot;
#X text 175 9790 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 9841 vector.length;
#X text 175 9841 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 9878 vector.normalize;
#X text 175 9878 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 9905 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 9905 version: v0.4 \, license: GPL3;
#X obj 20 9924 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;