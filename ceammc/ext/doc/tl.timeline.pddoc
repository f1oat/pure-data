<?xml version='1.0' encoding='utf-8'?>
<pddoc xmlns:xi="http://www.w3.org/2001/XInclude" version="1.0">
    <object name="tl.timeline">
        <title>tl.timeline</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>Timeline - event scheduler</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>tl</category>
            <keywords>timeline</keywords>
            <since>0.7</since>
            <also>
                <see view="link">tl.cue</see>
            </also>
            <aliases>
                <alias>ceammc/timeline</alias>
                <alias>timeline</alias>
            </aliases>
        </meta>
        <info>
            <par>With timeline you can schedule your events and start/pause/stop/move time</par>
            <par>This time formats for event are supported: *clock format* - HH:MM:SS.MS, or values
            like NUMBER UNIT: 10 ms, 10 msec, 20 sec, 30.5s. Note: spaces are ignored.</par>
            <par>Empty timeline always contains "end" event, that can't be removed. Events are
            referred by name or by index. Negative indexes are supported: -1 means last event (not
            "end" event, but last user event)</par>
        </info>
        <arguments>
            <argument name="LENGTH" type="float" minvalue="0" units="second">timeline
            length</argument>
        </arguments>
        <properties>
            <property name="@is_running" type="bool" access="readonly" default="0">if timeline is
            running</property>
            <property name="@length" type="float" minvalue="0" access="initonly" default="60"
            units="second">timeline length</property>
            <property name="@size" type="int" access="readonly" default="1" minvalue="0">number of
            events in timeline</property>
            <property name="@current" type="float" access="readonly" units="millisecond"
            default="0">current time</property>
            <property name="@current_sec" type="float" access="readonly" units="second"
            default="0">current time</property>
            <property name="@phase" type="float" access="readonly" minvalue="0" maxvalue="1"
            default="0">current phase in [0-1) range</property>
            <property name="@events" type="list" access="readonly" default="end">list of event
            names in chronological order</property>
            <property name="@loop" type="bool" default="0">loop mode</property>
            <property name="@mode" type="symbol" enum="fixed inf" default="fixed">timeline mode. If
            timeline is fixed, when reached, it outputs *end* event and stops after that. Infinite
            timeline never stops by itself. Fixed timeline can have @loop property for
            repeats</property>
        </properties>
        <methods>
            <!-- add -->
            <method name="add">add event to timeline. You can use simple syntax like [add 10.1 sec(
            to create event with default name, or use advanced: [add myEvent 510ms before end( 
            <param name="NAME" type="symbol" default="eventN" required="false">event name (if
            ommitted, autogenerated name is used: event1, event2 etc.)</param>
            <param name="TIME" type="list">event time: see *info* section</param>
            <param name="relative" type="symbol" enum="before after" required="false">create
            relative event before or after target event</param>
            <param name="REL_EVENT" type="symbol" required="false">relative event
            name</param></method>
            <!-- clear -->
            <method name="clear">remove all timeline events</method>
            <!-- pause -->
            <method name="pause">stops timeline at current position</method>
            <!-- remove -->
            <method name="remove">remove event by given index or name. [remove event1( or [remove
            3( 
            <param name="NAME|IDX" type="atom">event name or index</param></method>
            <!-- remove_at -->
            <method name="remove_at">remove event at specified time 
            <param name="TIME" type="list">time in supported format. See *info*
            section</param></method>
            <!-- reset -->
            <method name="reset">reset timeline (call only when stopped)</method>
            <!-- start -->
            <method name="start">start timeline from current position</method>
            <!-- stop -->
            <method name="stop">stops timeline and reset current position to the beginning</method>
            <!-- to_event -->
            <method name="to_event">move time to specified event 
            <param name="NAME|IDX" type="atom">event or index</param></method>
            <!-- to_time -->
            <method name="to_time">move time to time 
            <param name="TIME" type="list">time in supported format. See *info*
            section</param></method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="float">control inlet. Non-zero value starts timeline, zero -
                stops.</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>list: event index, event name, current event time</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[add 5.4 sec #b( [add middle 10s #c( [add last 5s before end #d(

 [T]
 |
 [metro 100]
 |
 [@current?(
 |
 |   [start( [pause( [stop( [T]
 |   |       |       |      |
 |   |       |       |      [@loop $1(
 |   |       |       |      |
[tl.timeline 20 @loop 1   #a]
|
[prop-> @current {w=20}   ]
|                        ^|
[sel 0 1 2 begin end   ] [/ 1000]
|    ^| ^^|  ^^^|  ^^^^| |
[B] [B] [B]   [B]    [B] [sec->str @symbol @ms]
                         |
[X b->a]                 [S digits=15]
[X c->a]
[X d->a]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
